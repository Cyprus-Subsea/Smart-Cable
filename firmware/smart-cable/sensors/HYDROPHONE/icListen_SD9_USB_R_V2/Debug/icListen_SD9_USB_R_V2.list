
icListen_SD9_USB_R_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016eb0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c08  08017040  08017040  00027040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017c48  08017c48  00030378  2**0
                  CONTENTS
  4 .ARM          00000008  08017c48  08017c48  00027c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017c50  08017c50  00030378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017c50  08017c50  00027c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017c54  08017c54  00027c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000378  20000000  08017c58  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030378  2**0
                  CONTENTS
 10 .bss          0000d7dc  20000378  20000378  00030378  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000db54  2000db54  00030378  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030378  2**0
                  CONTENTS, READONLY
 13 .debug_info   00032c01  00000000  00000000  000303a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000074ad  00000000  00000000  00062fa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024d8  00000000  00000000  0006a458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002200  00000000  00000000  0006c930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b016  00000000  00000000  0006eb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00033cce  00000000  00000000  00099b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dadbe  00000000  00000000  000cd814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a85d2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a904  00000000  00000000  001a8624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000378 	.word	0x20000378
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017028 	.word	0x08017028

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000037c 	.word	0x2000037c
 80001cc:	08017028 	.word	0x08017028

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <UI_init>:
char temp_array[400];
const char* UI_commands_strings[]={"help here\r"};


void UI_init(UI_typedef* UI_obj)
{
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b096      	sub	sp, #88	; 0x58
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	UI_messages_init(UI_obj);
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f000 f967 	bl	8000880 <UI_messages_init>


	osMessageQDef(UI_events_q, 20, uint8_t);
 80005b2:	4b20      	ldr	r3, [pc, #128]	; (8000634 <UI_init+0x90>)
 80005b4:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80005b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UI_obj->events_q= osMessageCreate(osMessageQ(UI_events_q), NULL);
 80005be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005c2:	2100      	movs	r1, #0
 80005c4:	4618      	mov	r0, r3
 80005c6:	f011 fad2 	bl	8011b6e <osMessageCreate>
 80005ca:	4602      	mov	r2, r0
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	609a      	str	r2, [r3, #8]

	osMessageQDef(UI_media_rx_q, 20, uint16_t);
 80005d0:	4b19      	ldr	r3, [pc, #100]	; (8000638 <UI_init+0x94>)
 80005d2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UI_obj->media_rx_messages_q= osMessageCreate(osMessageQ(UI_media_rx_q), NULL);
 80005dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f011 fac3 	bl	8011b6e <osMessageCreate>
 80005e8:	4602      	mov	r2, r0
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	601a      	str	r2, [r3, #0]

	osMessageQDef(UI_media_tx_q, 200, uint8_t);
 80005ee:	4b13      	ldr	r3, [pc, #76]	; (800063c <UI_init+0x98>)
 80005f0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80005f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UI_obj->media_tx_q = osMessageCreate(osMessageQ(UI_media_tx_q), NULL);
 80005fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f011 fab4 	bl	8011b6e <osMessageCreate>
 8000606:	4602      	mov	r2, r0
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	605a      	str	r2, [r3, #4]

	osThreadDef(UI_task, UI_loop, osPriorityNormal, 0, 256);
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <UI_init+0x9c>)
 800060e:	f107 040c 	add.w	r4, r7, #12
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(UI_task), UI_obj);
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	6879      	ldr	r1, [r7, #4]
 8000626:	4618      	mov	r0, r3
 8000628:	f011 fa41 	bl	8011aae <osThreadCreate>
}
 800062c:	bf00      	nop
 800062e:	3758      	adds	r7, #88	; 0x58
 8000630:	46bd      	mov	sp, r7
 8000632:	bdb0      	pop	{r4, r5, r7, pc}
 8000634:	08017054 	.word	0x08017054
 8000638:	08017064 	.word	0x08017064
 800063c:	08017074 	.word	0x08017074
 8000640:	08017084 	.word	0x08017084

08000644 <UI_loop>:


void UI_loop(UI_typedef* UI_obj)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	 uint16_t msg_indx;
	 for(;;)
	 {
		if(xQueueReceive(UI_obj->media_rx_messages_q,&msg_indx,osWaitForever))
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f107 010a 	add.w	r1, r7, #10
 8000654:	f04f 32ff 	mov.w	r2, #4294967295
 8000658:	4618      	mov	r0, r3
 800065a:	f011 feed 	bl	8012438 <xQueueReceive>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0f3      	beq.n	800064c <UI_loop+0x8>
		{   uint8_t* msg=UI_obj->rx_buffer+msg_indx;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	330e      	adds	r3, #14
 8000668:	897a      	ldrh	r2, [r7, #10]
 800066a:	4413      	add	r3, r2
 800066c:	60fb      	str	r3, [r7, #12]
			UI_parse_message(UI_obj,msg);
 800066e:	68f9      	ldr	r1, [r7, #12]
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f000 f8c7 	bl	8000804 <UI_parse_message>
		if(xQueueReceive(UI_obj->media_rx_messages_q,&msg_indx,osWaitForever))
 8000676:	e7e9      	b.n	800064c <UI_loop+0x8>

08000678 <UI_media_process_byte>:

}


void UI_media_process_byte(UI_typedef* UI_obj,uint8_t rx_byte)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
	if(UI_obj->media_status==UI_MEDIA_READY && rx_byte!=0x00)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	7b5b      	ldrb	r3, [r3, #13]
 8000688:	2b0a      	cmp	r3, #10
 800068a:	d160      	bne.n	800074e <UI_media_process_byte+0xd6>
 800068c:	78fb      	ldrb	r3, [r7, #3]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d05d      	beq.n	800074e <UI_media_process_byte+0xd6>
	{
		UI_obj->rx_buffer[UI_obj->rx_buffer_indx]=rx_byte;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000698:	b29b      	uxth	r3, r3
 800069a:	461a      	mov	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4413      	add	r3, r2
 80006a0:	78fa      	ldrb	r2, [r7, #3]
 80006a2:	739a      	strb	r2, [r3, #14]
		if(rx_byte=='\r')
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	2b0d      	cmp	r3, #13
 80006a8:	d132      	bne.n	8000710 <UI_media_process_byte+0x98>
		{
			UI_obj->rx_buffer[UI_obj->rx_buffer_indx]=0x00;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	461a      	mov	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4413      	add	r3, r2
 80006b8:	2200      	movs	r2, #0
 80006ba:	739a      	strb	r2, [r3, #14]
			osMessagePut(UI_obj->media_rx_messages_q,UI_obj->rx_buffer_new_string_indx,0);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	6818      	ldr	r0, [r3, #0]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	2200      	movs	r2, #0
 80006ca:	4619      	mov	r1, r3
 80006cc:	f011 fa78 	bl	8011bc0 <osMessagePut>
			if(UI_obj->rx_buffer_indx>UI_RX_BUFFER_THR) UI_obj->rx_buffer_indx=0;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80006dc:	d907      	bls.n	80006ee <UI_media_process_byte+0x76>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 80006e6:	2200      	movs	r2, #0
 80006e8:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
 80006ec:	e008      	b.n	8000700 <UI_media_process_byte+0x88>
			else  UI_obj->rx_buffer_indx++;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	3301      	adds	r3, #1
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
			UI_obj->rx_buffer_new_string_indx=UI_obj->rx_buffer_indx;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000706:	b29a      	uxth	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
 800070e:	e008      	b.n	8000722 <UI_media_process_byte+0xaa>
		}
		else UI_obj->rx_buffer_indx++;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000716:	b29b      	uxth	r3, r3
 8000718:	3301      	adds	r3, #1
 800071a:	b29a      	uxth	r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
		if(UI_obj->rx_buffer_indx==UI_RX_BUFFER_SIZE)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000728:	b29b      	uxth	r3, r3
 800072a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800072e:	d11d      	bne.n	800076c <UI_media_process_byte+0xf4>
		{
			UI_obj->rx_buffer_indx=0;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2200      	movs	r2, #0
 8000734:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 8000738:	2200      	movs	r2, #0
 800073a:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
			UI_obj->rx_buffer_new_string_indx=UI_obj->rx_buffer_indx;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000744:	b29a      	uxth	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
		if(UI_obj->rx_buffer_indx==UI_RX_BUFFER_SIZE)
 800074c:	e00e      	b.n	800076c <UI_media_process_byte+0xf4>
		}
	}
	else
	{
		UI_obj->rx_buffer_indx=0;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2200      	movs	r2, #0
 8000752:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 8000756:	2200      	movs	r2, #0
 8000758:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
		UI_obj->rx_buffer_new_string_indx=UI_obj->rx_buffer_indx;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000762:	b29a      	uxth	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
	}
}
 800076a:	bf00      	nop
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <UI_media_get_byte>:

uint8_t UI_media_get_byte(UI_typedef* UI_obj,uint8_t* tx_byte)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
	osEvent res=osMessageGet(UI_obj->media_tx_q,0);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6859      	ldr	r1, [r3, #4]
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2200      	movs	r2, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f011 fa59 	bl	8011c40 <osMessageGet>
	if(res.status==osEventMessage)
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	2b10      	cmp	r3, #16
 8000792:	d105      	bne.n	80007a0 <UI_media_get_byte+0x2c>
    {
		*tx_byte=res.value.v;
 8000794:	693b      	ldr	r3, [r7, #16]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	701a      	strb	r2, [r3, #0]
		return UI_F_OK;
 800079c:	2300      	movs	r3, #0
 800079e:	e000      	b.n	80007a2 <UI_media_get_byte+0x2e>
    }
  return UI_F_ERR;
 80007a0:	2301      	movs	r3, #1
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3718      	adds	r7, #24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <UI_send_msg>:


void UI_send_msg(UI_typedef* UI_obj,uint8_t cmd_id,void* arg)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	60f8      	str	r0, [r7, #12]
 80007b2:	460b      	mov	r3, r1
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	72fb      	strb	r3, [r7, #11]
 memory_region_pointer*  ptr=arg;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	613b      	str	r3, [r7, #16]

 switch(cmd_id)
 80007bc:	7afb      	ldrb	r3, [r7, #11]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d01a      	beq.n	80007f8 <UI_send_msg+0x4e>
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d000      	beq.n	80007c8 <UI_send_msg+0x1e>
		   osMessagePut(UI_obj->media_tx_q,*((uint8_t*)(ptr->start_addr)+i),osWaitForever);
	   }
     break;
 }

}
 80007c6:	e018      	b.n	80007fa <UI_send_msg+0x50>
       for(int i=0;i<ptr->size;i++)
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	e00e      	b.n	80007ec <UI_send_msg+0x42>
		   osMessagePut(UI_obj->media_tx_q,*((uint8_t*)(ptr->start_addr)+i),osWaitForever);
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	6858      	ldr	r0, [r3, #4]
 80007d2:	693b      	ldr	r3, [r7, #16]
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	4413      	add	r3, r2
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	f04f 32ff 	mov.w	r2, #4294967295
 80007e0:	4619      	mov	r1, r3
 80007e2:	f011 f9ed 	bl	8011bc0 <osMessagePut>
       for(int i=0;i<ptr->size;i++)
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	3301      	adds	r3, #1
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	685a      	ldr	r2, [r3, #4]
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d8eb      	bhi.n	80007ce <UI_send_msg+0x24>
     break;
 80007f6:	e000      	b.n	80007fa <UI_send_msg+0x50>
	 break;
 80007f8:	bf00      	nop
}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <UI_parse_message>:
	return UI_F_ERR;
}


int UI_parse_message(UI_typedef* UI_obj,uint8_t* msg)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
 char* pch;
 pch=strtok(msg," ");
 800080e:	4919      	ldr	r1, [pc, #100]	; (8000874 <UI_parse_message+0x70>)
 8000810:	6838      	ldr	r0, [r7, #0]
 8000812:	f014 fcab 	bl	801516c <strtok>
 8000816:	60b8      	str	r0, [r7, #8]
 for(int i=0;i<UI_MSG_NUM_OF_FUNCTIONS;i++)
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	e022      	b.n	8000864 <UI_parse_message+0x60>
 {
	  if(strcmp(pch,UI_messages_strings[i])==0)
 800081e:	4a16      	ldr	r2, [pc, #88]	; (8000878 <UI_parse_message+0x74>)
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000826:	4619      	mov	r1, r3
 8000828:	68b8      	ldr	r0, [r7, #8]
 800082a:	f7ff fcd1 	bl	80001d0 <strcmp>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d114      	bne.n	800085e <UI_parse_message+0x5a>
		{
			if(UI_functions[i](UI_obj,pch+strlen(pch)+1)==UI_F_OK) return UI_F_OK;
 8000834:	4a11      	ldr	r2, [pc, #68]	; (800087c <UI_parse_message+0x78>)
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800083c:	68b8      	ldr	r0, [r7, #8]
 800083e:	f7ff fcd1 	bl	80001e4 <strlen>
 8000842:	4603      	mov	r3, r0
 8000844:	3301      	adds	r3, #1
 8000846:	68ba      	ldr	r2, [r7, #8]
 8000848:	4413      	add	r3, r2
 800084a:	4619      	mov	r1, r3
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	47a0      	blx	r4
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d101      	bne.n	800085a <UI_parse_message+0x56>
 8000856:	2300      	movs	r3, #0
 8000858:	e008      	b.n	800086c <UI_parse_message+0x68>
      else return UI_F_ERR;
 800085a:	2301      	movs	r3, #1
 800085c:	e006      	b.n	800086c <UI_parse_message+0x68>
 for(int i=0;i<UI_MSG_NUM_OF_FUNCTIONS;i++)
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	3301      	adds	r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2b03      	cmp	r3, #3
 8000868:	ddd9      	ble.n	800081e <UI_parse_message+0x1a>
		}

 }
 return UI_F_ERR;
 800086a:	2301      	movs	r3, #1
}
 800086c:	4618      	mov	r0, r3
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	bd90      	pop	{r4, r7, pc}
 8000874:	080170a0 	.word	0x080170a0
 8000878:	200003a4 	.word	0x200003a4
 800087c:	20000394 	.word	0x20000394

08000880 <UI_messages_init>:

void UI_messages_init(UI_typedef* UI_obj)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	UI_functions[UI_MSG_SET] = UI_MSG_SET_f;
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <UI_messages_init+0x44>)
 800088a:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <UI_messages_init+0x48>)
 800088c:	601a      	str	r2, [r3, #0]
	UI_functions[UI_MSG_SHOW] = UI_MSG_SHOW_f;
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <UI_messages_init+0x44>)
 8000890:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <UI_messages_init+0x4c>)
 8000892:	605a      	str	r2, [r3, #4]
	UI_functions[UI_MSG_RESET] = UI_MSG_RESET_f;
 8000894:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <UI_messages_init+0x44>)
 8000896:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <UI_messages_init+0x50>)
 8000898:	609a      	str	r2, [r3, #8]
	UI_functions[UI_MSG_HELP] = UI_MSG_HELP_f;
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <UI_messages_init+0x44>)
 800089c:	4a0d      	ldr	r2, [pc, #52]	; (80008d4 <UI_messages_init+0x54>)
 800089e:	60da      	str	r2, [r3, #12]

	UI_messages_strings[UI_MSG_SET] = "set";
 80008a0:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <UI_messages_init+0x58>)
 80008a2:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <UI_messages_init+0x5c>)
 80008a4:	601a      	str	r2, [r3, #0]
	UI_messages_strings[UI_MSG_SHOW] = "show";
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <UI_messages_init+0x58>)
 80008a8:	4a0d      	ldr	r2, [pc, #52]	; (80008e0 <UI_messages_init+0x60>)
 80008aa:	605a      	str	r2, [r3, #4]
	UI_messages_strings[UI_MSG_RESET] = "reset";
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <UI_messages_init+0x58>)
 80008ae:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <UI_messages_init+0x64>)
 80008b0:	609a      	str	r2, [r3, #8]
	UI_messages_strings[UI_MSG_HELP] = "help";
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <UI_messages_init+0x58>)
 80008b4:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <UI_messages_init+0x68>)
 80008b6:	60da      	str	r2, [r3, #12]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	20000394 	.word	0x20000394
 80008c8:	08000c29 	.word	0x08000c29
 80008cc:	080009c9 	.word	0x080009c9
 80008d0:	0800091d 	.word	0x0800091d
 80008d4:	080008ed 	.word	0x080008ed
 80008d8:	200003a4 	.word	0x200003a4
 80008dc:	080170a4 	.word	0x080170a4
 80008e0:	080170a8 	.word	0x080170a8
 80008e4:	080170b0 	.word	0x080170b0
 80008e8:	080170b8 	.word	0x080170b8

080008ec <UI_MSG_HELP_f>:

int UI_MSG_HELP_f(UI_typedef* UI_obj,uint8_t* msg)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
	char * pch;
	memory_region_pointer ptr;

	pch = strtok (NULL," ");//subcomand
 80008f6:	4908      	ldr	r1, [pc, #32]	; (8000918 <UI_MSG_HELP_f+0x2c>)
 80008f8:	2000      	movs	r0, #0
 80008fa:	f014 fc37 	bl	801516c <strtok>
 80008fe:	6178      	str	r0, [r7, #20]
	osMessagePut(UI_obj->events_q,UI_EVNT_HELP,1);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	2201      	movs	r2, #1
 8000906:	2103      	movs	r1, #3
 8000908:	4618      	mov	r0, r3
 800090a:	f011 f959 	bl	8011bc0 <osMessagePut>
	return UI_F_OK;
 800090e:	2300      	movs	r3, #0
}
 8000910:	4618      	mov	r0, r3
 8000912:	3718      	adds	r7, #24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	080170a0 	.word	0x080170a0

0800091c <UI_MSG_RESET_f>:

int UI_MSG_RESET_f(UI_typedef* UI_obj,uint8_t* msg)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
	char * pch;
	memory_region_pointer ptr;

	pch = strtok (NULL," ");//subcomand
 8000926:	4924      	ldr	r1, [pc, #144]	; (80009b8 <UI_MSG_RESET_f+0x9c>)
 8000928:	2000      	movs	r0, #0
 800092a:	f014 fc1f 	bl	801516c <strtok>
 800092e:	6178      	str	r0, [r7, #20]
	if(strcmp(pch,"settings")==0){
 8000930:	4922      	ldr	r1, [pc, #136]	; (80009bc <UI_MSG_RESET_f+0xa0>)
 8000932:	6978      	ldr	r0, [r7, #20]
 8000934:	f7ff fc4c 	bl	80001d0 <strcmp>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d130      	bne.n	80009a0 <UI_MSG_RESET_f+0x84>
		icListen.settings->wav_sample_rate=ICLISTEN_DEFAULT_WAV_SAMPLE_RATE;
 800093e:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <UI_MSG_RESET_f+0xa4>)
 8000940:	6a1b      	ldr	r3, [r3, #32]
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]
 8000946:	2200      	movs	r2, #0
 8000948:	f042 027d 	orr.w	r2, r2, #125	; 0x7d
 800094c:	705a      	strb	r2, [r3, #1]
 800094e:	2200      	movs	r2, #0
 8000950:	709a      	strb	r2, [r3, #2]
 8000952:	2200      	movs	r2, #0
 8000954:	70da      	strb	r2, [r3, #3]
		icListen.settings->wav_sample_bit_depth=ICLISTEN_DEFAULT_WAV_SAMPLE_BIT_DEPTH;
 8000956:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <UI_MSG_RESET_f+0xa4>)
 8000958:	6a1b      	ldr	r3, [r3, #32]
 800095a:	2200      	movs	r2, #0
 800095c:	f042 0218 	orr.w	r2, r2, #24
 8000960:	711a      	strb	r2, [r3, #4]
 8000962:	2200      	movs	r2, #0
 8000964:	715a      	strb	r2, [r3, #5]
 8000966:	2200      	movs	r2, #0
 8000968:	719a      	strb	r2, [r3, #6]
 800096a:	2200      	movs	r2, #0
 800096c:	71da      	strb	r2, [r3, #7]
		icListen.settings->file_duration=ICLISTEN_DEFAULT_FILE_DURATION;
 800096e:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <UI_MSG_RESET_f+0xa4>)
 8000970:	6a1b      	ldr	r3, [r3, #32]
 8000972:	2200      	movs	r2, #0
 8000974:	f042 0278 	orr.w	r2, r2, #120	; 0x78
 8000978:	721a      	strb	r2, [r3, #8]
 800097a:	2200      	movs	r2, #0
 800097c:	725a      	strb	r2, [r3, #9]
 800097e:	2200      	movs	r2, #0
 8000980:	729a      	strb	r2, [r3, #10]
 8000982:	2200      	movs	r2, #0
 8000984:	72da      	strb	r2, [r3, #11]
		icListen.settings->file_index=0;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <UI_MSG_RESET_f+0xa4>)
 8000988:	6a1b      	ldr	r3, [r3, #32]
 800098a:	2200      	movs	r2, #0
 800098c:	731a      	strb	r2, [r3, #12]
 800098e:	2200      	movs	r2, #0
 8000990:	735a      	strb	r2, [r3, #13]
 8000992:	2200      	movs	r2, #0
 8000994:	739a      	strb	r2, [r3, #14]
 8000996:	2200      	movs	r2, #0
 8000998:	73da      	strb	r2, [r3, #15]
		mcu_flash_save(&mcu_flash);
 800099a:	480a      	ldr	r0, [pc, #40]	; (80009c4 <UI_MSG_RESET_f+0xa8>)
 800099c:	f001 fd3c 	bl	8002418 <mcu_flash_save>
	}
	osMessagePut(UI_obj->events_q,UI_EVNT_RESET,1);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	2201      	movs	r2, #1
 80009a6:	2102      	movs	r1, #2
 80009a8:	4618      	mov	r0, r3
 80009aa:	f011 f909 	bl	8011bc0 <osMessagePut>
	return UI_F_OK;
 80009ae:	2300      	movs	r3, #0
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3718      	adds	r7, #24
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	080170a0 	.word	0x080170a0
 80009bc:	080170c0 	.word	0x080170c0
 80009c0:	20000800 	.word	0x20000800
 80009c4:	20000e78 	.word	0x20000e78

080009c8 <UI_MSG_SHOW_f>:

int UI_MSG_SHOW_f(UI_typedef* UI_obj,uint8_t* msg)
{
 80009c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009cc:	b095      	sub	sp, #84	; 0x54
 80009ce:	af0c      	add	r7, sp, #48	; 0x30
 80009d0:	6178      	str	r0, [r7, #20]
 80009d2:	6139      	str	r1, [r7, #16]
	char * pch;
	pch = strtok (NULL," ");//subcomand
 80009d4:	4985      	ldr	r1, [pc, #532]	; (8000bec <UI_MSG_SHOW_f+0x224>)
 80009d6:	2000      	movs	r0, #0
 80009d8:	f014 fbc8 	bl	801516c <strtok>
 80009dc:	61b8      	str	r0, [r7, #24]

	if(strcmp(pch,"sensor")==0){
 80009de:	4984      	ldr	r1, [pc, #528]	; (8000bf0 <UI_MSG_SHOW_f+0x228>)
 80009e0:	69b8      	ldr	r0, [r7, #24]
 80009e2:	f7ff fbf5 	bl	80001d0 <strcmp>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d154      	bne.n	8000a96 <UI_MSG_SHOW_f+0xce>
                           "Seq err:%d\r"
				           "Misconfig err:%d\r"
				           "Last msg num:%d\r"
				           "File index:%d\r"
				           "Disc free:%d\r"
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.wav_misconfig_err,icListen.last_collect_msg_num,icListen.settings->file_index,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 80009ec:	4b81      	ldr	r3, [pc, #516]	; (8000bf4 <UI_MSG_SHOW_f+0x22c>)
 80009ee:	7f1b      	ldrb	r3, [r3, #28]
		sprintf(temp_array,"Device type: %d\r"
 80009f0:	4698      	mov	r8, r3
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.wav_misconfig_err,icListen.last_collect_msg_num,icListen.settings->file_index,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 80009f2:	4b80      	ldr	r3, [pc, #512]	; (8000bf4 <UI_MSG_SHOW_f+0x22c>)
 80009f4:	881b      	ldrh	r3, [r3, #0]
		sprintf(temp_array,"Device type: %d\r"
 80009f6:	4699      	mov	r9, r3
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.wav_misconfig_err,icListen.last_collect_msg_num,icListen.settings->file_index,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 80009f8:	4b7e      	ldr	r3, [pc, #504]	; (8000bf4 <UI_MSG_SHOW_f+0x22c>)
 80009fa:	7f5b      	ldrb	r3, [r3, #29]
		sprintf(temp_array,"Device type: %d\r"
 80009fc:	60fb      	str	r3, [r7, #12]
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.wav_misconfig_err,icListen.last_collect_msg_num,icListen.settings->file_index,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 80009fe:	4b7d      	ldr	r3, [pc, #500]	; (8000bf4 <UI_MSG_SHOW_f+0x22c>)
 8000a00:	6a1b      	ldr	r3, [r3, #32]
		sprintf(temp_array,"Device type: %d\r"
 8000a02:	689b      	ldr	r3, [r3, #8]
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.wav_misconfig_err,icListen.last_collect_msg_num,icListen.settings->file_index,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 8000a04:	4a7b      	ldr	r2, [pc, #492]	; (8000bf4 <UI_MSG_SHOW_f+0x22c>)
 8000a06:	6a12      	ldr	r2, [r2, #32]
		sprintf(temp_array,"Device type: %d\r"
 8000a08:	6852      	ldr	r2, [r2, #4]
 8000a0a:	60ba      	str	r2, [r7, #8]
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.wav_misconfig_err,icListen.last_collect_msg_num,icListen.settings->file_index,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 8000a0c:	4979      	ldr	r1, [pc, #484]	; (8000bf4 <UI_MSG_SHOW_f+0x22c>)
 8000a0e:	6a09      	ldr	r1, [r1, #32]
		sprintf(temp_array,"Device type: %d\r"
 8000a10:	6809      	ldr	r1, [r1, #0]
 8000a12:	4878      	ldr	r0, [pc, #480]	; (8000bf4 <UI_MSG_SHOW_f+0x22c>)
 8000a14:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8000a16:	4c77      	ldr	r4, [pc, #476]	; (8000bf4 <UI_MSG_SHOW_f+0x22c>)
 8000a18:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8000a1a:	4d76      	ldr	r5, [pc, #472]	; (8000bf4 <UI_MSG_SHOW_f+0x22c>)
 8000a1c:	6a6d      	ldr	r5, [r5, #36]	; 0x24
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.wav_misconfig_err,icListen.last_collect_msg_num,icListen.settings->file_index,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 8000a1e:	4e75      	ldr	r6, [pc, #468]	; (8000bf4 <UI_MSG_SHOW_f+0x22c>)
 8000a20:	6a36      	ldr	r6, [r6, #32]
		sprintf(temp_array,"Device type: %d\r"
 8000a22:	68f6      	ldr	r6, [r6, #12]
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.wav_misconfig_err,icListen.last_collect_msg_num,icListen.settings->file_index,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 8000a24:	4a74      	ldr	r2, [pc, #464]	; (8000bf8 <UI_MSG_SHOW_f+0x230>)
 8000a26:	f892 c910 	ldrb.w	ip, [r2, #2320]	; 0x910
 8000a2a:	46e6      	mov	lr, ip
		sprintf(temp_array,"Device type: %d\r"
 8000a2c:	4a72      	ldr	r2, [pc, #456]	; (8000bf8 <UI_MSG_SHOW_f+0x230>)
 8000a2e:	f44f 7c11 	mov.w	ip, #580	; 0x244
 8000a32:	fb0c fc0e 	mul.w	ip, ip, lr
 8000a36:	4494      	add	ip, r2
 8000a38:	f50c 7c10 	add.w	ip, ip, #576	; 0x240
 8000a3c:	f8dc 2000 	ldr.w	r2, [ip]
 8000a40:	607a      	str	r2, [r7, #4]
				           "Disc indx:%d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,icListen.collect_seq_num_err,icListen.wav_misconfig_err,icListen.last_collect_msg_num,icListen.settings->file_index,microsd_storage.disks[microsd_storage.active_disk_indx].free_space,microsd_storage.active_disk_indx);
 8000a42:	4a6d      	ldr	r2, [pc, #436]	; (8000bf8 <UI_MSG_SHOW_f+0x230>)
 8000a44:	f892 c910 	ldrb.w	ip, [r2, #2320]	; 0x910
		sprintf(temp_array,"Device type: %d\r"
 8000a48:	4662      	mov	r2, ip
 8000a4a:	920b      	str	r2, [sp, #44]	; 0x2c
 8000a4c:	687a      	ldr	r2, [r7, #4]
 8000a4e:	920a      	str	r2, [sp, #40]	; 0x28
 8000a50:	9609      	str	r6, [sp, #36]	; 0x24
 8000a52:	9508      	str	r5, [sp, #32]
 8000a54:	9407      	str	r4, [sp, #28]
 8000a56:	9006      	str	r0, [sp, #24]
 8000a58:	9105      	str	r1, [sp, #20]
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	9204      	str	r2, [sp, #16]
 8000a5e:	9303      	str	r3, [sp, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	9302      	str	r3, [sp, #8]
 8000a64:	4b65      	ldr	r3, [pc, #404]	; (8000bfc <UI_MSG_SHOW_f+0x234>)
 8000a66:	9301      	str	r3, [sp, #4]
 8000a68:	4b65      	ldr	r3, [pc, #404]	; (8000c00 <UI_MSG_SHOW_f+0x238>)
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	464b      	mov	r3, r9
 8000a6e:	4642      	mov	r2, r8
 8000a70:	4964      	ldr	r1, [pc, #400]	; (8000c04 <UI_MSG_SHOW_f+0x23c>)
 8000a72:	4865      	ldr	r0, [pc, #404]	; (8000c08 <UI_MSG_SHOW_f+0x240>)
 8000a74:	f014 fb14 	bl	80150a0 <siprintf>
		temp_ptr.start_addr=temp_array;
 8000a78:	4b64      	ldr	r3, [pc, #400]	; (8000c0c <UI_MSG_SHOW_f+0x244>)
 8000a7a:	4a63      	ldr	r2, [pc, #396]	; (8000c08 <UI_MSG_SHOW_f+0x240>)
 8000a7c:	601a      	str	r2, [r3, #0]
		temp_ptr.size=strlen(temp_array);
 8000a7e:	4862      	ldr	r0, [pc, #392]	; (8000c08 <UI_MSG_SHOW_f+0x240>)
 8000a80:	f7ff fbb0 	bl	80001e4 <strlen>
 8000a84:	4603      	mov	r3, r0
 8000a86:	4a61      	ldr	r2, [pc, #388]	; (8000c0c <UI_MSG_SHOW_f+0x244>)
 8000a88:	6053      	str	r3, [r2, #4]
		UI_send_msg(UI_obj,UI_CMD_SEND_DATA,&temp_ptr);
 8000a8a:	4a60      	ldr	r2, [pc, #384]	; (8000c0c <UI_MSG_SHOW_f+0x244>)
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	6978      	ldr	r0, [r7, #20]
 8000a90:	f7ff fe8b 	bl	80007aa <UI_send_msg>
 8000a94:	e09c      	b.n	8000bd0 <UI_MSG_SHOW_f+0x208>
	}
	else if(strcmp(pch,"storage")==0){
 8000a96:	495e      	ldr	r1, [pc, #376]	; (8000c10 <UI_MSG_SHOW_f+0x248>)
 8000a98:	69b8      	ldr	r0, [r7, #24]
 8000a9a:	f7ff fb99 	bl	80001d0 <strcmp>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d146      	bne.n	8000b32 <UI_MSG_SHOW_f+0x16a>
		temp_array[0]=0x00;
 8000aa4:	4b58      	ldr	r3, [pc, #352]	; (8000c08 <UI_MSG_SHOW_f+0x240>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
 8000aae:	e02e      	b.n	8000b0e <UI_MSG_SHOW_f+0x146>
		{
		 sprintf(temp_array+strlen(temp_array),"Disk: %d\rStatus: %d\rSize: %d KB\rFree space: %d KB\r",i,microsd_storage.disks[i].status,microsd_storage.disks[i].size,microsd_storage.disks[i].free_space);
 8000ab0:	4855      	ldr	r0, [pc, #340]	; (8000c08 <UI_MSG_SHOW_f+0x240>)
 8000ab2:	f7ff fb97 	bl	80001e4 <strlen>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	4a53      	ldr	r2, [pc, #332]	; (8000c08 <UI_MSG_SHOW_f+0x240>)
 8000aba:	1898      	adds	r0, r3, r2
 8000abc:	4a4e      	ldr	r2, [pc, #312]	; (8000bf8 <UI_MSG_SHOW_f+0x230>)
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000ac4:	fb01 f303 	mul.w	r3, r1, r3
 8000ac8:	4413      	add	r3, r2
 8000aca:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	461d      	mov	r5, r3
 8000ad2:	4a49      	ldr	r2, [pc, #292]	; (8000bf8 <UI_MSG_SHOW_f+0x230>)
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000ada:	fb01 f303 	mul.w	r3, r1, r3
 8000ade:	4413      	add	r3, r2
 8000ae0:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4944      	ldr	r1, [pc, #272]	; (8000bf8 <UI_MSG_SHOW_f+0x230>)
 8000ae8:	69fa      	ldr	r2, [r7, #28]
 8000aea:	f44f 7411 	mov.w	r4, #580	; 0x244
 8000aee:	fb04 f202 	mul.w	r2, r4, r2
 8000af2:	440a      	add	r2, r1
 8000af4:	f502 7210 	add.w	r2, r2, #576	; 0x240
 8000af8:	6812      	ldr	r2, [r2, #0]
 8000afa:	9201      	str	r2, [sp, #4]
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	462b      	mov	r3, r5
 8000b00:	69fa      	ldr	r2, [r7, #28]
 8000b02:	4944      	ldr	r1, [pc, #272]	; (8000c14 <UI_MSG_SHOW_f+0x24c>)
 8000b04:	f014 facc 	bl	80150a0 <siprintf>
		for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	61fb      	str	r3, [r7, #28]
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	2b03      	cmp	r3, #3
 8000b12:	ddcd      	ble.n	8000ab0 <UI_MSG_SHOW_f+0xe8>
		}
		temp_ptr.start_addr=temp_array;
 8000b14:	4b3d      	ldr	r3, [pc, #244]	; (8000c0c <UI_MSG_SHOW_f+0x244>)
 8000b16:	4a3c      	ldr	r2, [pc, #240]	; (8000c08 <UI_MSG_SHOW_f+0x240>)
 8000b18:	601a      	str	r2, [r3, #0]
		temp_ptr.size=strlen(temp_array);
 8000b1a:	483b      	ldr	r0, [pc, #236]	; (8000c08 <UI_MSG_SHOW_f+0x240>)
 8000b1c:	f7ff fb62 	bl	80001e4 <strlen>
 8000b20:	4603      	mov	r3, r0
 8000b22:	4a3a      	ldr	r2, [pc, #232]	; (8000c0c <UI_MSG_SHOW_f+0x244>)
 8000b24:	6053      	str	r3, [r2, #4]
		UI_send_msg(UI_obj,UI_CMD_SEND_DATA,&temp_ptr);
 8000b26:	4a39      	ldr	r2, [pc, #228]	; (8000c0c <UI_MSG_SHOW_f+0x244>)
 8000b28:	2101      	movs	r1, #1
 8000b2a:	6978      	ldr	r0, [r7, #20]
 8000b2c:	f7ff fe3d 	bl	80007aa <UI_send_msg>
 8000b30:	e04e      	b.n	8000bd0 <UI_MSG_SHOW_f+0x208>
	}
	else if(strcmp(pch,"clock")==0){
 8000b32:	4939      	ldr	r1, [pc, #228]	; (8000c18 <UI_MSG_SHOW_f+0x250>)
 8000b34:	69b8      	ldr	r0, [r7, #24]
 8000b36:	f7ff fb4b 	bl	80001d0 <strcmp>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d135      	bne.n	8000bac <UI_MSG_SHOW_f+0x1e4>
		temp_array[0]=0x00;
 8000b40:	4b31      	ldr	r3, [pc, #196]	; (8000c08 <UI_MSG_SHOW_f+0x240>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	701a      	strb	r2, [r3, #0]
		read_time(&rtc);
 8000b46:	4835      	ldr	r0, [pc, #212]	; (8000c1c <UI_MSG_SHOW_f+0x254>)
 8000b48:	f001 fcc8 	bl	80024dc <read_time>
        sprintf(temp_array,"Clock: %d:%d:%d  %d/%d/%d %d\r",rtc.time.Hours,rtc.time.Minutes,rtc.time.Seconds,rtc.date.Date,rtc.date.Month,rtc.date.Year,(uint32_t)rtc.timestamp);
 8000b4c:	4b33      	ldr	r3, [pc, #204]	; (8000c1c <UI_MSG_SHOW_f+0x254>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	461e      	mov	r6, r3
 8000b52:	4b32      	ldr	r3, [pc, #200]	; (8000c1c <UI_MSG_SHOW_f+0x254>)
 8000b54:	785b      	ldrb	r3, [r3, #1]
 8000b56:	469c      	mov	ip, r3
 8000b58:	4b30      	ldr	r3, [pc, #192]	; (8000c1c <UI_MSG_SHOW_f+0x254>)
 8000b5a:	789b      	ldrb	r3, [r3, #2]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4b2f      	ldr	r3, [pc, #188]	; (8000c1c <UI_MSG_SHOW_f+0x254>)
 8000b60:	7d9b      	ldrb	r3, [r3, #22]
 8000b62:	4618      	mov	r0, r3
 8000b64:	4b2d      	ldr	r3, [pc, #180]	; (8000c1c <UI_MSG_SHOW_f+0x254>)
 8000b66:	7d5b      	ldrb	r3, [r3, #21]
 8000b68:	461c      	mov	r4, r3
 8000b6a:	4b2c      	ldr	r3, [pc, #176]	; (8000c1c <UI_MSG_SHOW_f+0x254>)
 8000b6c:	7ddb      	ldrb	r3, [r3, #23]
 8000b6e:	461d      	mov	r5, r3
 8000b70:	4b2a      	ldr	r3, [pc, #168]	; (8000c1c <UI_MSG_SHOW_f+0x254>)
 8000b72:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000b76:	4613      	mov	r3, r2
 8000b78:	9304      	str	r3, [sp, #16]
 8000b7a:	9503      	str	r5, [sp, #12]
 8000b7c:	9402      	str	r4, [sp, #8]
 8000b7e:	9001      	str	r0, [sp, #4]
 8000b80:	9100      	str	r1, [sp, #0]
 8000b82:	4663      	mov	r3, ip
 8000b84:	4632      	mov	r2, r6
 8000b86:	4926      	ldr	r1, [pc, #152]	; (8000c20 <UI_MSG_SHOW_f+0x258>)
 8000b88:	481f      	ldr	r0, [pc, #124]	; (8000c08 <UI_MSG_SHOW_f+0x240>)
 8000b8a:	f014 fa89 	bl	80150a0 <siprintf>
		temp_ptr.start_addr=temp_array;
 8000b8e:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <UI_MSG_SHOW_f+0x244>)
 8000b90:	4a1d      	ldr	r2, [pc, #116]	; (8000c08 <UI_MSG_SHOW_f+0x240>)
 8000b92:	601a      	str	r2, [r3, #0]
		temp_ptr.size=strlen(temp_array);
 8000b94:	481c      	ldr	r0, [pc, #112]	; (8000c08 <UI_MSG_SHOW_f+0x240>)
 8000b96:	f7ff fb25 	bl	80001e4 <strlen>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	4a1b      	ldr	r2, [pc, #108]	; (8000c0c <UI_MSG_SHOW_f+0x244>)
 8000b9e:	6053      	str	r3, [r2, #4]
		UI_send_msg(UI_obj,UI_CMD_SEND_DATA,&temp_ptr);
 8000ba0:	4a1a      	ldr	r2, [pc, #104]	; (8000c0c <UI_MSG_SHOW_f+0x244>)
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	6978      	ldr	r0, [r7, #20]
 8000ba6:	f7ff fe00 	bl	80007aa <UI_send_msg>
 8000baa:	e011      	b.n	8000bd0 <UI_MSG_SHOW_f+0x208>
	}
	else{
		sprintf(temp_array,"sensor\rstorage\rclock\r");
 8000bac:	491d      	ldr	r1, [pc, #116]	; (8000c24 <UI_MSG_SHOW_f+0x25c>)
 8000bae:	4816      	ldr	r0, [pc, #88]	; (8000c08 <UI_MSG_SHOW_f+0x240>)
 8000bb0:	f014 fa76 	bl	80150a0 <siprintf>
		temp_ptr.start_addr=temp_array;
 8000bb4:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <UI_MSG_SHOW_f+0x244>)
 8000bb6:	4a14      	ldr	r2, [pc, #80]	; (8000c08 <UI_MSG_SHOW_f+0x240>)
 8000bb8:	601a      	str	r2, [r3, #0]
		temp_ptr.size=strlen(temp_array);
 8000bba:	4813      	ldr	r0, [pc, #76]	; (8000c08 <UI_MSG_SHOW_f+0x240>)
 8000bbc:	f7ff fb12 	bl	80001e4 <strlen>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	4a12      	ldr	r2, [pc, #72]	; (8000c0c <UI_MSG_SHOW_f+0x244>)
 8000bc4:	6053      	str	r3, [r2, #4]
		UI_send_msg(UI_obj,UI_CMD_SEND_DATA,&temp_ptr);
 8000bc6:	4a11      	ldr	r2, [pc, #68]	; (8000c0c <UI_MSG_SHOW_f+0x244>)
 8000bc8:	2101      	movs	r1, #1
 8000bca:	6978      	ldr	r0, [r7, #20]
 8000bcc:	f7ff fded 	bl	80007aa <UI_send_msg>
	}
	osMessagePut(UI_obj->events_q,UI_EVNT_SHOW,1);
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f010 fff1 	bl	8011bc0 <osMessagePut>
	return UI_F_OK;
 8000bde:	2300      	movs	r3, #0
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3724      	adds	r7, #36	; 0x24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000bea:	bf00      	nop
 8000bec:	080170a0 	.word	0x080170a0
 8000bf0:	080170cc 	.word	0x080170cc
 8000bf4:	20000800 	.word	0x20000800
 8000bf8:	20000e9c 	.word	0x20000e9c
 8000bfc:	2000080a 	.word	0x2000080a
 8000c00:	20000802 	.word	0x20000802
 8000c04:	080170d4 	.word	0x080170d4
 8000c08:	200003bc 	.word	0x200003bc
 8000c0c:	200003b4 	.word	0x200003b4
 8000c10:	080171ac 	.word	0x080171ac
 8000c14:	080171b4 	.word	0x080171b4
 8000c18:	080171e8 	.word	0x080171e8
 8000c1c:	20001b88 	.word	0x20001b88
 8000c20:	080171f0 	.word	0x080171f0
 8000c24:	08017210 	.word	0x08017210

08000c28 <UI_MSG_SET_f>:

int UI_MSG_SET_f(UI_typedef* UI_obj,uint8_t* msg)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
	char *             pch;
	uint32_t   sample_rate;
	uint32_t      duration;

	pch = strtok (NULL," ");//subcomand
 8000c32:	4966      	ldr	r1, [pc, #408]	; (8000dcc <UI_MSG_SET_f+0x1a4>)
 8000c34:	2000      	movs	r0, #0
 8000c36:	f014 fa99 	bl	801516c <strtok>
 8000c3a:	6178      	str	r0, [r7, #20]
	if(strcmp(pch,"clock")==0){
 8000c3c:	4964      	ldr	r1, [pc, #400]	; (8000dd0 <UI_MSG_SET_f+0x1a8>)
 8000c3e:	6978      	ldr	r0, [r7, #20]
 8000c40:	f7ff fac6 	bl	80001d0 <strcmp>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d14e      	bne.n	8000ce8 <UI_MSG_SET_f+0xc0>
		pch = strtok (NULL,":");//hours
 8000c4a:	4962      	ldr	r1, [pc, #392]	; (8000dd4 <UI_MSG_SET_f+0x1ac>)
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f014 fa8d 	bl	801516c <strtok>
 8000c52:	6178      	str	r0, [r7, #20]
		rtc.time.Hours=atol(pch);
 8000c54:	6978      	ldr	r0, [r7, #20]
 8000c56:	f013 fd07 	bl	8014668 <atol>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4b5e      	ldr	r3, [pc, #376]	; (8000dd8 <UI_MSG_SET_f+0x1b0>)
 8000c60:	701a      	strb	r2, [r3, #0]
		pch = strtok (NULL,":");//minutes
 8000c62:	495c      	ldr	r1, [pc, #368]	; (8000dd4 <UI_MSG_SET_f+0x1ac>)
 8000c64:	2000      	movs	r0, #0
 8000c66:	f014 fa81 	bl	801516c <strtok>
 8000c6a:	6178      	str	r0, [r7, #20]
		rtc.time.Minutes=atol(pch);
 8000c6c:	6978      	ldr	r0, [r7, #20]
 8000c6e:	f013 fcfb 	bl	8014668 <atol>
 8000c72:	4603      	mov	r3, r0
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4b58      	ldr	r3, [pc, #352]	; (8000dd8 <UI_MSG_SET_f+0x1b0>)
 8000c78:	705a      	strb	r2, [r3, #1]
		pch = strtok (NULL," ");//seconds
 8000c7a:	4954      	ldr	r1, [pc, #336]	; (8000dcc <UI_MSG_SET_f+0x1a4>)
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f014 fa75 	bl	801516c <strtok>
 8000c82:	6178      	str	r0, [r7, #20]
		rtc.time.Seconds=atol(pch);
 8000c84:	6978      	ldr	r0, [r7, #20]
 8000c86:	f013 fcef 	bl	8014668 <atol>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	4b52      	ldr	r3, [pc, #328]	; (8000dd8 <UI_MSG_SET_f+0x1b0>)
 8000c90:	709a      	strb	r2, [r3, #2]
		pch = strtok (NULL,"/");//day
 8000c92:	4952      	ldr	r1, [pc, #328]	; (8000ddc <UI_MSG_SET_f+0x1b4>)
 8000c94:	2000      	movs	r0, #0
 8000c96:	f014 fa69 	bl	801516c <strtok>
 8000c9a:	6178      	str	r0, [r7, #20]
		rtc.date.Date=atol(pch);
 8000c9c:	6978      	ldr	r0, [r7, #20]
 8000c9e:	f013 fce3 	bl	8014668 <atol>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4b4c      	ldr	r3, [pc, #304]	; (8000dd8 <UI_MSG_SET_f+0x1b0>)
 8000ca8:	759a      	strb	r2, [r3, #22]
		pch = strtok (NULL,"/");//month
 8000caa:	494c      	ldr	r1, [pc, #304]	; (8000ddc <UI_MSG_SET_f+0x1b4>)
 8000cac:	2000      	movs	r0, #0
 8000cae:	f014 fa5d 	bl	801516c <strtok>
 8000cb2:	6178      	str	r0, [r7, #20]
		rtc.date.Month=atol(pch);
 8000cb4:	6978      	ldr	r0, [r7, #20]
 8000cb6:	f013 fcd7 	bl	8014668 <atol>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4b46      	ldr	r3, [pc, #280]	; (8000dd8 <UI_MSG_SET_f+0x1b0>)
 8000cc0:	755a      	strb	r2, [r3, #21]
		pch = strtok (NULL," ");//year
 8000cc2:	4942      	ldr	r1, [pc, #264]	; (8000dcc <UI_MSG_SET_f+0x1a4>)
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f014 fa51 	bl	801516c <strtok>
 8000cca:	6178      	str	r0, [r7, #20]
		rtc.date.Year=atol(pch);
 8000ccc:	6978      	ldr	r0, [r7, #20]
 8000cce:	f013 fccb 	bl	8014668 <atol>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4b40      	ldr	r3, [pc, #256]	; (8000dd8 <UI_MSG_SET_f+0x1b0>)
 8000cd8:	75da      	strb	r2, [r3, #23]
		rtc.date.WeekDay=RTC_WEEKDAY_MONDAY;
 8000cda:	4b3f      	ldr	r3, [pc, #252]	; (8000dd8 <UI_MSG_SET_f+0x1b0>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	751a      	strb	r2, [r3, #20]
		set_time(&rtc);
 8000ce0:	483d      	ldr	r0, [pc, #244]	; (8000dd8 <UI_MSG_SET_f+0x1b0>)
 8000ce2:	f001 fc35 	bl	8002550 <set_time>
 8000ce6:	e064      	b.n	8000db2 <UI_MSG_SET_f+0x18a>
	}
	else if(strcmp(pch,"rate")==0){
 8000ce8:	493d      	ldr	r1, [pc, #244]	; (8000de0 <UI_MSG_SET_f+0x1b8>)
 8000cea:	6978      	ldr	r0, [r7, #20]
 8000cec:	f7ff fa70 	bl	80001d0 <strcmp>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d136      	bne.n	8000d64 <UI_MSG_SET_f+0x13c>
		pch = strtok (NULL," ");//rate
 8000cf6:	4935      	ldr	r1, [pc, #212]	; (8000dcc <UI_MSG_SET_f+0x1a4>)
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f014 fa37 	bl	801516c <strtok>
 8000cfe:	6178      	str	r0, [r7, #20]
		sample_rate=atol(pch);
 8000d00:	6978      	ldr	r0, [r7, #20]
 8000d02:	f013 fcb1 	bl	8014668 <atol>
 8000d06:	4603      	mov	r3, r0
 8000d08:	60fb      	str	r3, [r7, #12]
		if(sample_rate==4000 || sample_rate==8000 || sample_rate==16000 || sample_rate==32000 || sample_rate==48000 || sample_rate==96000 || sample_rate==120000 || sample_rate==240000 || sample_rate==480000){
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000d10:	d020      	beq.n	8000d54 <UI_MSG_SET_f+0x12c>
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000d18:	d01c      	beq.n	8000d54 <UI_MSG_SET_f+0x12c>
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000d20:	d018      	beq.n	8000d54 <UI_MSG_SET_f+0x12c>
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000d28:	d014      	beq.n	8000d54 <UI_MSG_SET_f+0x12c>
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d00f      	beq.n	8000d54 <UI_MSG_SET_f+0x12c>
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4a2b      	ldr	r2, [pc, #172]	; (8000de4 <UI_MSG_SET_f+0x1bc>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d00b      	beq.n	8000d54 <UI_MSG_SET_f+0x12c>
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4a2a      	ldr	r2, [pc, #168]	; (8000de8 <UI_MSG_SET_f+0x1c0>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d007      	beq.n	8000d54 <UI_MSG_SET_f+0x12c>
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4a29      	ldr	r2, [pc, #164]	; (8000dec <UI_MSG_SET_f+0x1c4>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d003      	beq.n	8000d54 <UI_MSG_SET_f+0x12c>
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4a28      	ldr	r2, [pc, #160]	; (8000df0 <UI_MSG_SET_f+0x1c8>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d12e      	bne.n	8000db2 <UI_MSG_SET_f+0x18a>
         icListen.settings->wav_sample_rate=sample_rate;
 8000d54:	4b27      	ldr	r3, [pc, #156]	; (8000df4 <UI_MSG_SET_f+0x1cc>)
 8000d56:	6a1b      	ldr	r3, [r3, #32]
 8000d58:	68fa      	ldr	r2, [r7, #12]
 8000d5a:	601a      	str	r2, [r3, #0]
         mcu_flash_save(&mcu_flash);
 8000d5c:	4826      	ldr	r0, [pc, #152]	; (8000df8 <UI_MSG_SET_f+0x1d0>)
 8000d5e:	f001 fb5b 	bl	8002418 <mcu_flash_save>
 8000d62:	e026      	b.n	8000db2 <UI_MSG_SET_f+0x18a>
		}
	}
	else if(strcmp(pch,"duration")==0){
 8000d64:	4925      	ldr	r1, [pc, #148]	; (8000dfc <UI_MSG_SET_f+0x1d4>)
 8000d66:	6978      	ldr	r0, [r7, #20]
 8000d68:	f7ff fa32 	bl	80001d0 <strcmp>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d11f      	bne.n	8000db2 <UI_MSG_SET_f+0x18a>
		pch = strtok (NULL," ");//duration
 8000d72:	4916      	ldr	r1, [pc, #88]	; (8000dcc <UI_MSG_SET_f+0x1a4>)
 8000d74:	2000      	movs	r0, #0
 8000d76:	f014 f9f9 	bl	801516c <strtok>
 8000d7a:	6178      	str	r0, [r7, #20]
		duration=atol(pch);
 8000d7c:	6978      	ldr	r0, [r7, #20]
 8000d7e:	f013 fc73 	bl	8014668 <atol>
 8000d82:	4603      	mov	r3, r0
 8000d84:	613b      	str	r3, [r7, #16]
		if((icListen.settings->wav_sample_bit_depth/8)*icListen.settings->wav_sample_rate*duration<4294967200){
 8000d86:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <UI_MSG_SET_f+0x1cc>)
 8000d88:	6a1b      	ldr	r3, [r3, #32]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	08db      	lsrs	r3, r3, #3
 8000d8e:	4a19      	ldr	r2, [pc, #100]	; (8000df4 <UI_MSG_SET_f+0x1cc>)
 8000d90:	6a12      	ldr	r2, [r2, #32]
 8000d92:	6812      	ldr	r2, [r2, #0]
 8000d94:	fb02 f303 	mul.w	r3, r2, r3
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	fb02 f303 	mul.w	r3, r2, r3
 8000d9e:	f113 0f61 	cmn.w	r3, #97	; 0x61
 8000da2:	d806      	bhi.n	8000db2 <UI_MSG_SET_f+0x18a>
         icListen.settings->file_duration=duration;
 8000da4:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <UI_MSG_SET_f+0x1cc>)
 8000da6:	6a1b      	ldr	r3, [r3, #32]
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	609a      	str	r2, [r3, #8]
         mcu_flash_save(&mcu_flash);
 8000dac:	4812      	ldr	r0, [pc, #72]	; (8000df8 <UI_MSG_SET_f+0x1d0>)
 8000dae:	f001 fb33 	bl	8002418 <mcu_flash_save>
		}
	}

	osMessagePut(UI_obj->events_q,UI_EVNT_SET,1);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	2201      	movs	r2, #1
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f010 ff00 	bl	8011bc0 <osMessagePut>
	return UI_F_OK;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	080170a0 	.word	0x080170a0
 8000dd0:	080171e8 	.word	0x080171e8
 8000dd4:	08017228 	.word	0x08017228
 8000dd8:	20001b88 	.word	0x20001b88
 8000ddc:	0801722c 	.word	0x0801722c
 8000de0:	08017230 	.word	0x08017230
 8000de4:	00017700 	.word	0x00017700
 8000de8:	0001d4c0 	.word	0x0001d4c0
 8000dec:	0003a980 	.word	0x0003a980
 8000df0:	00075300 	.word	0x00075300
 8000df4:	20000800 	.word	0x20000800
 8000df8:	20000e78 	.word	0x20000e78
 8000dfc:	08017238 	.word	0x08017238

08000e00 <crc16_arc_update>:
};



uint16_t crc16_arc_update( char data, uint16_t accum )
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	460a      	mov	r2, r1
 8000e0a:	71fb      	strb	r3, [r7, #7]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	80bb      	strh	r3, [r7, #4]
  unsigned char comb_value;
  comb_value = ( accum&0x00ff ) ^ (unsigned char)data;
 8000e10:	88bb      	ldrh	r3, [r7, #4]
 8000e12:	b25a      	sxtb	r2, r3
 8000e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e18:	4053      	eors	r3, r2
 8000e1a:	b25b      	sxtb	r3, r3
 8000e1c:	73fb      	strb	r3, [r7, #15]
  accum = ( accum >> 8 ) ^ crc16_arc_table[ comb_value ];
 8000e1e:	88bb      	ldrh	r3, [r7, #4]
 8000e20:	0a1b      	lsrs	r3, r3, #8
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	4906      	ldr	r1, [pc, #24]	; (8000e40 <crc16_arc_update+0x40>)
 8000e28:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000e2c:	4053      	eors	r3, r2
 8000e2e:	80bb      	strh	r3, [r7, #4]
  return ( accum );
 8000e30:	88bb      	ldrh	r3, [r7, #4]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000000 	.word	0x20000000

08000e44 <get_crc16_arc>:

uint16_t get_crc16_arc( uint8_t* data,uint16_t length )
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	807b      	strh	r3, [r7, #2]
  uint16_t accm=0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	81fb      	strh	r3, [r7, #14]

  for(int i=0;i<length;i++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	e00d      	b.n	8000e76 <get_crc16_arc+0x32>
  {
    accm=crc16_arc_update(data[i], accm);
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	4413      	add	r3, r2
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	89fa      	ldrh	r2, [r7, #14]
 8000e64:	4611      	mov	r1, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ffca 	bl	8000e00 <crc16_arc_update>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	81fb      	strh	r3, [r7, #14]
  for(int i=0;i<length;i++)
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	3301      	adds	r3, #1
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	887b      	ldrh	r3, [r7, #2]
 8000e78:	68ba      	ldr	r2, [r7, #8]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	dbed      	blt.n	8000e5a <get_crc16_arc+0x16>
  }

  return accm;
 8000e7e:	89fb      	ldrh	r3, [r7, #14]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <sd_storage_disk_init>:

extern ss_pp sd_cards_ss[4];
extern UART_HandleTypeDef huart1;

F_RES sd_storage_disk_init(FATFS* fs,char* path)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
	if(f_mount(fs,path,1)==FR_OK) return F_OK;
 8000e92:	2201      	movs	r2, #1
 8000e94:	6839      	ldr	r1, [r7, #0]
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f00f f9e4 	bl	8010264 <f_mount>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d101      	bne.n	8000ea6 <sd_storage_disk_init+0x1e>
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e000      	b.n	8000ea8 <sd_storage_disk_init+0x20>
	else return F_ERR;
 8000ea6:	2301      	movs	r3, #1
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <sd_storage_init>:
F_RES sd_storage_init(sd_storage_t* self_object)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08c      	sub	sp, #48	; 0x30
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  char tt[10];
  FRESULT res;
  DWORD fre_clust, fre_sect, tot_sect;
  FATFS*  fs;
  self_object->active_disk_indx=0;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
  self_object->num_of_discs=0;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f883 2918 	strb.w	r2, [r3, #2328]	; 0x918
  self_object->status=STORAGE_NOT_INITTIALIZED;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f883 2919 	strb.w	r2, [r3, #2329]	; 0x919

  MX_FATFS_Init();
 8000ed0:	f009 f8c0 	bl	800a054 <MX_FATFS_Init>

  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ed8:	e080      	b.n	8000fdc <sd_storage_init+0x12c>
  {
   sprintf(tt,"%d:",i);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ee0:	4953      	ldr	r1, [pc, #332]	; (8001030 <sd_storage_init+0x180>)
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f014 f8dc 	bl	80150a0 <siprintf>
   if(sd_storage_disk_init(&self_object->disks[i].fs,tt)==F_OK){
 8000ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eea:	f44f 7211 	mov.w	r2, #580	; 0x244
 8000eee:	fb02 f303 	mul.w	r3, r2, r3
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	f107 0214 	add.w	r2, r7, #20
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ffc3 	bl	8000e88 <sd_storage_disk_init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d15b      	bne.n	8000fc0 <sd_storage_init+0x110>
		  self_object->disks[i].status=DISK_PRESENT;
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f0c:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000f10:	fb01 f303 	mul.w	r3, r1, r3
 8000f14:	4413      	add	r3, r2
 8000f16:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
		  self_object->num_of_discs++;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f893 3918 	ldrb.w	r3, [r3, #2328]	; 0x918
 8000f24:	3301      	adds	r3, #1
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f883 2918 	strb.w	r2, [r3, #2328]	; 0x918
  		  if(f_getfree(tt, &fre_clust, &fs)==FR_OK){
 8000f2e:	f107 020c 	add.w	r2, r7, #12
 8000f32:	f107 0110 	add.w	r1, r7, #16
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f010 fb61 	bl	8011602 <f_getfree>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d147      	bne.n	8000fd6 <sd_storage_init+0x126>
		    tot_sect = (self_object->disks[i].fs.n_fatent - 2) * self_object->disks[i].fs.csize;
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f4a:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000f4e:	fb01 f303 	mul.w	r3, r1, r3
 8000f52:	4413      	add	r3, r2
 8000f54:	331c      	adds	r3, #28
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	3b02      	subs	r3, #2
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f5e:	f44f 7011 	mov.w	r0, #580	; 0x244
 8000f62:	fb00 f202 	mul.w	r2, r0, r2
 8000f66:	440a      	add	r2, r1
 8000f68:	320a      	adds	r2, #10
 8000f6a:	8812      	ldrh	r2, [r2, #0]
 8000f6c:	fb02 f303 	mul.w	r3, r2, r3
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
			fre_sect = fre_clust * self_object->disks[i].fs.csize;
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f76:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000f7a:	fb01 f303 	mul.w	r3, r1, r3
 8000f7e:	4413      	add	r3, r2
 8000f80:	330a      	adds	r3, #10
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	fb02 f303 	mul.w	r3, r2, r3
 8000f8c:	623b      	str	r3, [r7, #32]
			self_object->disks[i].size=tot_sect/2;
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f90:	085a      	lsrs	r2, r3, #1
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f96:	f44f 7011 	mov.w	r0, #580	; 0x244
 8000f9a:	fb00 f303 	mul.w	r3, r0, r3
 8000f9e:	440b      	add	r3, r1
 8000fa0:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000fa4:	601a      	str	r2, [r3, #0]
			self_object->disks[i].free_space=fre_sect/2;
 8000fa6:	6a3b      	ldr	r3, [r7, #32]
 8000fa8:	085a      	lsrs	r2, r3, #1
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fae:	f44f 7011 	mov.w	r0, #580	; 0x244
 8000fb2:	fb00 f303 	mul.w	r3, r0, r3
 8000fb6:	440b      	add	r3, r1
 8000fb8:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	e00a      	b.n	8000fd6 <sd_storage_init+0x126>
		  }
   }
   else{
		 self_object->disks[i].status=DISK_ABSENT;
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc4:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000fc8:	fb01 f303 	mul.w	r3, r1, r3
 8000fcc:	4413      	add	r3, r2
 8000fce:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd8:	3301      	adds	r3, #1
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fde:	2b03      	cmp	r3, #3
 8000fe0:	f77f af7b 	ble.w	8000eda <sd_storage_init+0x2a>
   }
  }

  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fe8:	e019      	b.n	800101e <sd_storage_init+0x16e>
  {
   if(self_object->disks[i].status==DISK_PRESENT){
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fee:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000ff2:	fb01 f303 	mul.w	r3, r1, r3
 8000ff6:	4413      	add	r3, r2
 8000ff8:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d10a      	bne.n	8001018 <sd_storage_init+0x168>
	   self_object->active_disk_indx=i;
 8001002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001004:	b2da      	uxtb	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
	   self_object->status=STORAGE_INITTIALIZED;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	f883 2919 	strb.w	r2, [r3, #2329]	; 0x919
	   return F_OK;
 8001014:	2300      	movs	r3, #0
 8001016:	e006      	b.n	8001026 <sd_storage_init+0x176>
  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8001018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101a:	3301      	adds	r3, #1
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
 800101e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001020:	2b03      	cmp	r3, #3
 8001022:	dde2      	ble.n	8000fea <sd_storage_init+0x13a>
   }
  }
  return F_ERR;
 8001024:	2301      	movs	r3, #1
}
 8001026:	4618      	mov	r0, r3
 8001028:	3730      	adds	r7, #48	; 0x30
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	08017244 	.word	0x08017244

08001034 <sd_storage_link_ss>:

F_RES sd_storage_link_ss(sd_storage_t* self_object,uint8_t disk_num, uint16_t sd_ss_pin,GPIO_TypeDef* sd_ss_port)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	460b      	mov	r3, r1
 8001040:	72fb      	strb	r3, [r7, #11]
 8001042:	4613      	mov	r3, r2
 8001044:	813b      	strh	r3, [r7, #8]
	  sd_cards_ss[disk_num].sd_ss_pin=sd_ss_pin;
 8001046:	7afb      	ldrb	r3, [r7, #11]
 8001048:	4908      	ldr	r1, [pc, #32]	; (800106c <sd_storage_link_ss+0x38>)
 800104a:	893a      	ldrh	r2, [r7, #8]
 800104c:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
	  sd_cards_ss[disk_num].sd_ss_port=sd_ss_port;
 8001050:	7afb      	ldrb	r3, [r7, #11]
 8001052:	4a06      	ldr	r2, [pc, #24]	; (800106c <sd_storage_link_ss+0x38>)
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	4413      	add	r3, r2
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	605a      	str	r2, [r3, #4]
	  return F_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20001bb0 	.word	0x20001bb0

08001070 <sd_storage_set_next_disk>:
F_RES sd_storage_read(sd_storage_t* self_object)
{

}
F_RES sd_storage_set_next_disk(sd_storage_t* self_object)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 int i=self_object->active_disk_indx+1;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f893 3910 	ldrb.w	r3, [r3, #2320]	; 0x910
 800107e:	3301      	adds	r3, #1
 8001080:	60fb      	str	r3, [r7, #12]
 for(;i<SD_STORAGE_NUM_DISKS;i++)
 8001082:	e015      	b.n	80010b0 <sd_storage_set_next_disk+0x40>
 {
   if(self_object->disks[i].status==DISK_PRESENT){
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f44f 7111 	mov.w	r1, #580	; 0x244
 800108c:	fb01 f303 	mul.w	r3, r1, r3
 8001090:	4413      	add	r3, r2
 8001092:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d106      	bne.n	80010aa <sd_storage_set_next_disk+0x3a>
	 self_object->active_disk_indx=i;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
	 return F_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	e006      	b.n	80010b8 <sd_storage_set_next_disk+0x48>
 for(;i<SD_STORAGE_NUM_DISKS;i++)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3301      	adds	r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2b03      	cmp	r3, #3
 80010b4:	dde6      	ble.n	8001084 <sd_storage_set_next_disk+0x14>
   }
 }
 return F_ERR;
 80010b6:	2301      	movs	r3, #1
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4a07      	ldr	r2, [pc, #28]	; (80010f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80010d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	4a06      	ldr	r2, [pc, #24]	; (80010f4 <vApplicationGetIdleTaskMemory+0x30>)
 80010da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2280      	movs	r2, #128	; 0x80
 80010e0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010e2:	bf00      	nop
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	2000054c 	.word	0x2000054c
 80010f4:	20000600 	.word	0x20000600

080010f8 <icListen_init_sensor_status>:

icListen_object_typedef icListen;


void icListen_init_sensor_status(icListen_object_typedef* self_object)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	self_object->status=ICLISTEN_DISCONNECTED;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2201      	movs	r2, #1
 8001104:	775a      	strb	r2, [r3, #29]
	memset(self_object->build_date,0x00,18);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	330a      	adds	r3, #10
 800110a:	2212      	movs	r2, #18
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f013 fbf2 	bl	80148f8 <memset>
	memset(self_object->firmware_version,0x00,8);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3302      	adds	r3, #2
 8001118:	2208      	movs	r2, #8
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f013 fbeb 	bl	80148f8 <memset>
	self_object->serial_number=0;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	801a      	strh	r2, [r3, #0]
	self_object->device_type=0;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	771a      	strb	r2, [r3, #28]
	self_object->last_collect_msg_num=0;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	625a      	str	r2, [r3, #36]	; 0x24
	self_object->collect_seq_num_err=0;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	629a      	str	r2, [r3, #40]	; 0x28
	self_object->wav_misconfig_err=0;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	62da      	str	r2, [r3, #44]	; 0x2c

}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <icListen_prepare_setup_msg>:

void icListen_prepare_setup_msg(icListen_setup_full_msg* msg,uint32_t wav_sample_rate,uint32_t wav_sample_bit_depth)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
	msg->basic_hdr.sync=MSG_SYNC;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	222a      	movs	r2, #42	; 0x2a
 8001158:	701a      	strb	r2, [r3, #0]
	msg->basic_hdr.type=MSG_TYPE_JOB_SETUP;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2244      	movs	r2, #68	; 0x44
 800115e:	705a      	strb	r2, [r3, #1]
	msg->setup_type=MSG_JOB_SETUP_WAVEFORM_HF;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2200      	movs	r2, #0
 8001164:	f042 0214 	orr.w	r2, r2, #20
 8001168:	711a      	strb	r2, [r3, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	715a      	strb	r2, [r3, #5]
	msg->num_of_tags=11;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2200      	movs	r2, #0
 8001172:	f042 020b 	orr.w	r2, r2, #11
 8001176:	719a      	strb	r2, [r3, #6]
 8001178:	2200      	movs	r2, #0
 800117a:	71da      	strb	r2, [r3, #7]

	msg->t01_log_start_time.tag=MSG_JOB_SETUP_TAG_LOG_START_TIME;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2200      	movs	r2, #0
 8001180:	f042 0201 	orr.w	r2, r2, #1
 8001184:	721a      	strb	r2, [r3, #8]
 8001186:	2200      	movs	r2, #0
 8001188:	725a      	strb	r2, [r3, #9]
	msg->t01_log_start_time.tag_value=4294967295;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f04f 32ff 	mov.w	r2, #4294967295
 8001190:	731a      	strb	r2, [r3, #12]
 8001192:	f04f 32ff 	mov.w	r2, #4294967295
 8001196:	735a      	strb	r2, [r3, #13]
 8001198:	f04f 32ff 	mov.w	r2, #4294967295
 800119c:	739a      	strb	r2, [r3, #14]
 800119e:	f04f 32ff 	mov.w	r2, #4294967295
 80011a2:	73da      	strb	r2, [r3, #15]
	msg->t01_log_start_time.tag_value_len=4;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2200      	movs	r2, #0
 80011a8:	f042 0204 	orr.w	r2, r2, #4
 80011ac:	729a      	strb	r2, [r3, #10]
 80011ae:	2200      	movs	r2, #0
 80011b0:	72da      	strb	r2, [r3, #11]

	msg->t02_spectrum_sample_rate.tag=MSG_JOB_SETUP_TAG_SPECT_SAMPLE_RATE;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f042 0202 	orr.w	r2, r2, #2
 80011ba:	741a      	strb	r2, [r3, #16]
 80011bc:	2200      	movs	r2, #0
 80011be:	745a      	strb	r2, [r3, #17]
	msg->t02_spectrum_sample_rate.tag_value=0;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2200      	movs	r2, #0
 80011c4:	751a      	strb	r2, [r3, #20]
 80011c6:	2200      	movs	r2, #0
 80011c8:	755a      	strb	r2, [r3, #21]
 80011ca:	2200      	movs	r2, #0
 80011cc:	759a      	strb	r2, [r3, #22]
 80011ce:	2200      	movs	r2, #0
 80011d0:	75da      	strb	r2, [r3, #23]
	msg->t02_spectrum_sample_rate.tag_value_len=4;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2200      	movs	r2, #0
 80011d6:	f042 0204 	orr.w	r2, r2, #4
 80011da:	749a      	strb	r2, [r3, #18]
 80011dc:	2200      	movs	r2, #0
 80011de:	74da      	strb	r2, [r3, #19]

	msg->t06_fft_processing_type.tag=MSG_JOB_SETUP_TAG_FFT_PROCESSING_TYPE;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f042 0206 	orr.w	r2, r2, #6
 80011e8:	761a      	strb	r2, [r3, #24]
 80011ea:	2200      	movs	r2, #0
 80011ec:	765a      	strb	r2, [r3, #25]
	msg->t06_fft_processing_type.tag_value=0;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2200      	movs	r2, #0
 80011f2:	771a      	strb	r2, [r3, #28]
 80011f4:	2200      	movs	r2, #0
 80011f6:	775a      	strb	r2, [r3, #29]
 80011f8:	2200      	movs	r2, #0
 80011fa:	779a      	strb	r2, [r3, #30]
 80011fc:	2200      	movs	r2, #0
 80011fe:	77da      	strb	r2, [r3, #31]
	msg->t06_fft_processing_type.tag_value_len=4;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2200      	movs	r2, #0
 8001204:	f042 0204 	orr.w	r2, r2, #4
 8001208:	769a      	strb	r2, [r3, #26]
 800120a:	2200      	movs	r2, #0
 800120c:	76da      	strb	r2, [r3, #27]

	msg->t07_fft_accumulates.tag=MSG_JOB_SETUP_TAG_FFT_ACCUMULATED;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2200      	movs	r2, #0
 8001212:	f042 0207 	orr.w	r2, r2, #7
 8001216:	f883 2020 	strb.w	r2, [r3, #32]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	msg->t07_fft_accumulates.tag_value=0;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2200      	movs	r2, #0
 8001224:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001228:	2200      	movs	r2, #0
 800122a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800122e:	2200      	movs	r2, #0
 8001230:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	msg->t07_fft_accumulates.tag_value_len=4;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2200      	movs	r2, #0
 800123e:	f042 0204 	orr.w	r2, r2, #4
 8001242:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	msg->t09_spectrum_logging_mode.tag=MSG_JOB_SETUP_TAG_SPECT_LOGGING_MODE;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2200      	movs	r2, #0
 8001250:	f042 0209 	orr.w	r2, r2, #9
 8001254:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	msg->t09_spectrum_logging_mode.tag_value=0;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2200      	movs	r2, #0
 8001262:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8001266:	2200      	movs	r2, #0
 8001268:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800126c:	2200      	movs	r2, #0
 800126e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8001272:	2200      	movs	r2, #0
 8001274:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	msg->t09_spectrum_logging_mode.tag_value_len=4;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2200      	movs	r2, #0
 800127c:	f042 0204 	orr.w	r2, r2, #4
 8001280:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8001284:	2200      	movs	r2, #0
 8001286:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	msg->t0A_spectrum_log_file_length.tag=MSG_JOB_SETUP_TAG_SPECT_LOG_FILE_LEN;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2200      	movs	r2, #0
 800128e:	f042 020a 	orr.w	r2, r2, #10
 8001292:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8001296:	2200      	movs	r2, #0
 8001298:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	msg->t0A_spectrum_log_file_length.tag_value=1;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2200      	movs	r2, #0
 80012a0:	f042 0201 	orr.w	r2, r2, #1
 80012a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	msg->t0A_spectrum_log_file_length.tag_value_len=4;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2200      	movs	r2, #0
 80012be:	f042 0204 	orr.w	r2, r2, #4
 80012c2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	msg->t0E_waveform_sample_rate.tag=MSG_JOB_SETUP_TAG_WAVEFORM_SAMPLE_RATE;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f042 020e 	orr.w	r2, r2, #14
 80012d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	msg->t0E_waveform_sample_rate.tag_value=wav_sample_rate;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	68ba      	ldr	r2, [r7, #8]
 80012e2:	63da      	str	r2, [r3, #60]	; 0x3c
	msg->t0E_waveform_sample_rate.tag_value_len=4;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f042 0204 	orr.w	r2, r2, #4
 80012ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

	msg->t0F_waveform_data_bit_depth.tag=MSG_JOB_SETUP_TAG_WAVEFORM_DATA_BITS_DEPTH;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f042 020f 	orr.w	r2, r2, #15
 80012fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	msg->t0F_waveform_data_bit_depth.tag_value=wav_sample_bit_depth;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	645a      	str	r2, [r3, #68]	; 0x44
	msg->t0F_waveform_data_bit_depth.tag_value_len=4;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2200      	movs	r2, #0
 8001312:	f042 0204 	orr.w	r2, r2, #4
 8001316:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	msg->t12_waveform_logging_mode.tag=MSG_JOB_SETUP_TAG_WAVEFROM_DATA_LOGGING_MODE;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2200      	movs	r2, #0
 8001324:	f042 0212 	orr.w	r2, r2, #18
 8001328:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800132c:	2200      	movs	r2, #0
 800132e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	msg->t12_waveform_logging_mode.tag_value=0;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800133a:	2200      	movs	r2, #0
 800133c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001340:	2200      	movs	r2, #0
 8001342:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8001346:	2200      	movs	r2, #0
 8001348:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	msg->t12_waveform_logging_mode.tag_value_len=4;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2200      	movs	r2, #0
 8001350:	f042 0204 	orr.w	r2, r2, #4
 8001354:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8001358:	2200      	movs	r2, #0
 800135a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	msg->t13_waveform_log_file_length.tag=MSG_JOB_SETUP_TAG_WAVEFORM_LOG_FILE_LENGTH;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2200      	movs	r2, #0
 8001362:	f042 0213 	orr.w	r2, r2, #19
 8001366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	msg->t13_waveform_log_file_length.tag_value=1;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2200      	movs	r2, #0
 8001374:	f042 0201 	orr.w	r2, r2, #1
 8001378:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8001382:	2200      	movs	r2, #0
 8001384:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	msg->t13_waveform_log_file_length.tag_value_len=4;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2200      	movs	r2, #0
 8001392:	f042 0204 	orr.w	r2, r2, #4
 8001396:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 800139a:	2200      	movs	r2, #0
 800139c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	msg->t14_aux_pin_messages.tag=MSG_JOB_SETUP_TAG_AUX_PIN_MESSAGE;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2200      	movs	r2, #0
 80013a4:	f042 0214 	orr.w	r2, r2, #20
 80013a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	msg->t14_aux_pin_messages.tag_value=1;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f042 0201 	orr.w	r2, r2, #1
 80013ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	msg->t14_aux_pin_messages.tag_value_len=4;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f042 0204 	orr.w	r2, r2, #4
 80013d8:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b


	msg->basic_hdr.length=sizeof(icListen_setup_full_msg)-4-2;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f042 025c 	orr.w	r2, r2, #92	; 0x5c
 80013ea:	709a      	strb	r2, [r3, #2]
 80013ec:	2200      	movs	r2, #0
 80013ee:	70da      	strb	r2, [r3, #3]
	msg->crc=get_crc16_arc((uint8_t*)msg,sizeof(icListen_setup_full_msg)-2);
 80013f0:	2160      	movs	r1, #96	; 0x60
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f7ff fd26 	bl	8000e44 <get_crc16_arc>
 80013f8:	4603      	mov	r3, r0
 80013fa:	461a      	mov	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
}
 8001402:	bf00      	nop
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <icListen_prepare_collect_msg>:

void icListen_prepare_collect_msg(icListen_collect_short_mask_msg* msg,uint8_t mask)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
 8001412:	460b      	mov	r3, r1
 8001414:	70fb      	strb	r3, [r7, #3]
	msg->basic_hdr.sync=MSG_SYNC;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	222a      	movs	r2, #42	; 0x2a
 800141a:	701a      	strb	r2, [r3, #0]
    msg->basic_hdr.type=MSG_TYPE_COLLECT_DATA;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2243      	movs	r2, #67	; 0x43
 8001420:	705a      	strb	r2, [r3, #1]
    msg->mask_hdr.mask=mask;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	78fa      	ldrb	r2, [r7, #3]
 8001426:	711a      	strb	r2, [r3, #4]
    msg->basic_hdr.length=1;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f042 0201 	orr.w	r2, r2, #1
 8001430:	709a      	strb	r2, [r3, #2]
 8001432:	2200      	movs	r2, #0
 8001434:	70da      	strb	r2, [r3, #3]
	msg->crc=get_crc16_arc((uint8_t*)msg,sizeof(icListen_collect_short_mask_msg)-2);
 8001436:	2105      	movs	r1, #5
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff fd03 	bl	8000e44 <get_crc16_arc>
 800143e:	4603      	mov	r3, r0
 8001440:	461a      	mov	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f8a3 2005 	strh.w	r2, [r3, #5]
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <icListen_prepare_enquire_device_msg>:

void icListen_prepare_enquire_device_msg(icListen_enquire_device_msg* msg)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	msg->basic_hdr.sync=MSG_SYNC;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	222a      	movs	r2, #42	; 0x2a
 800145c:	701a      	strb	r2, [r3, #0]
    msg->basic_hdr.type=MSG_TYPE_ENQUIRE_DEVICE;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2245      	movs	r2, #69	; 0x45
 8001462:	705a      	strb	r2, [r3, #1]
    msg->basic_hdr.length=0;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	709a      	strb	r2, [r3, #2]
 800146a:	2200      	movs	r2, #0
 800146c:	70da      	strb	r2, [r3, #3]
	msg->crc=get_crc16_arc((uint8_t*)msg,sizeof(icListen_enquire_device_msg)-2);
 800146e:	2104      	movs	r1, #4
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff fce7 	bl	8000e44 <get_crc16_arc>
 8001476:	4603      	mov	r3, r0
 8001478:	461a      	mov	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	809a      	strh	r2, [r3, #4]

}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <icListen_parse_msg>:

F_RES icListen_parse_msg(uint8_t* msg,icListen_object_typedef* self_object,uint8_t* msg_type,memory_region_pointer* parsed_data_ptr)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b088      	sub	sp, #32
 800148a:	af00      	add	r7, sp, #0
 800148c:	60f8      	str	r0, [r7, #12]
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	603b      	str	r3, [r7, #0]

	icListen_basic_header* basic_header=(icListen_basic_header*)msg;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	61fb      	str	r3, [r7, #28]
	icListen_status_basic_msg* status_msg=(icListen_status_basic_msg*)msg;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	61bb      	str	r3, [r7, #24]
	icListen_wav_full_header* collected_wav_header=(icListen_wav_full_header*)msg;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	617b      	str	r3, [r7, #20]

	uint16_t crc_msg=*(uint16_t*)(msg+basic_header->length+4);
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	885b      	ldrh	r3, [r3, #2]
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	3304      	adds	r3, #4
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	4413      	add	r3, r2
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	827b      	strh	r3, [r7, #18]

	if(basic_header->sync==MSG_SYNC){
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b2a      	cmp	r3, #42	; 0x2a
 80014b6:	f040 8089 	bne.w	80015cc <icListen_parse_msg+0x146>
	*msg_type=basic_header->type;
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	785a      	ldrb	r2, [r3, #1]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	701a      	strb	r2, [r3, #0]
	switch(basic_header->type){
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	785b      	ldrb	r3, [r3, #1]
 80014c6:	2b43      	cmp	r3, #67	; 0x43
 80014c8:	d033      	beq.n	8001532 <icListen_parse_msg+0xac>
 80014ca:	2b45      	cmp	r3, #69	; 0x45
 80014cc:	d17c      	bne.n	80015c8 <icListen_parse_msg+0x142>
	     case MSG_TYPE_ENQUIRE_DEVICE:
	    	 if(crc_msg==get_crc16_arc(msg,(uint16_t)basic_header->length+4)){
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	885b      	ldrh	r3, [r3, #2]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	3304      	adds	r3, #4
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	4619      	mov	r1, r3
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f7ff fcb2 	bl	8000e44 <get_crc16_arc>
 80014e0:	4603      	mov	r3, r0
 80014e2:	461a      	mov	r2, r3
 80014e4:	8a7b      	ldrh	r3, [r7, #18]
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d121      	bne.n	800152e <icListen_parse_msg+0xa8>
		    	  self_object->status=status_msg->status;
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	775a      	strb	r2, [r3, #29]
		    	  memcpy(self_object->build_date,status_msg->build_date,18);
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	f103 000a 	add.w	r0, r3, #10
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	330e      	adds	r3, #14
 80014fe:	2212      	movs	r2, #18
 8001500:	4619      	mov	r1, r3
 8001502:	f013 f9eb 	bl	80148dc <memcpy>
		    	  memcpy(self_object->firmware_version,status_msg->firmware_version,8);
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	1c98      	adds	r0, r3, #2
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	3306      	adds	r3, #6
 800150e:	2208      	movs	r2, #8
 8001510:	4619      	mov	r1, r3
 8001512:	f013 f9e3 	bl	80148dc <memcpy>
		    	  self_object->serial_number=status_msg->serial_number;
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	889b      	ldrh	r3, [r3, #4]
 800151a:	b29a      	uxth	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	801a      	strh	r2, [r3, #0]
		    	  self_object->device_type=status_msg->device_type;
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	771a      	strb	r2, [r3, #28]
		    	  return F_OK;
 800152a:	2300      	movs	r3, #0
 800152c:	e04f      	b.n	80015ce <icListen_parse_msg+0x148>
	    	  }
	    	 else return F_ERR;
 800152e:	2301      	movs	r3, #1
 8001530:	e04d      	b.n	80015ce <icListen_parse_msg+0x148>
	     break;
		 case MSG_TYPE_COLLECT_DATA:
			 if(collected_wav_header->basic_hdr.length>1){
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	885b      	ldrh	r3, [r3, #2]
 8001536:	b29b      	uxth	r3, r3
 8001538:	2b01      	cmp	r3, #1
 800153a:	d93a      	bls.n	80015b2 <icListen_parse_msg+0x12c>
			      if((self_object->last_collect_msg_num+1)!=collected_wav_header->wav_hdr.seq_num && self_object->last_collect_msg_num !=0){
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001540:	3301      	adds	r3, #1
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	f8b2 2005 	ldrh.w	r2, [r2, #5]
 8001548:	b292      	uxth	r2, r2
 800154a:	4293      	cmp	r3, r2
 800154c:	d008      	beq.n	8001560 <icListen_parse_msg+0xda>
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001552:	2b00      	cmp	r3, #0
 8001554:	d004      	beq.n	8001560 <icListen_parse_msg+0xda>
			    	  self_object->collect_seq_num_err++;
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155a:	1c5a      	adds	r2, r3, #1
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	629a      	str	r2, [r3, #40]	; 0x28
			      }
			      self_object->last_collect_msg_num=collected_wav_header->wav_hdr.seq_num;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8001566:	b29b      	uxth	r3, r3
 8001568:	461a      	mov	r2, r3
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	625a      	str	r2, [r3, #36]	; 0x24
			      if(collected_wav_header->wav_hdr.sample_rate!=self_object->settings->wav_sample_rate || collected_wav_header->wav_hdr.bit_depth!=self_object->settings->wav_sample_bit_depth ){
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	f8d3 200b 	ldr.w	r2, [r3, #11]
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	d107      	bne.n	800158e <icListen_parse_msg+0x108>
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	79db      	ldrb	r3, [r3, #7]
 8001582:	461a      	mov	r2, r3
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	429a      	cmp	r2, r3
 800158c:	d004      	beq.n	8001598 <icListen_parse_msg+0x112>
			        self_object->wav_misconfig_err++;
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	62da      	str	r2, [r3, #44]	; 0x2c
			      }
		    	  parsed_data_ptr->start_addr=msg+sizeof(icListen_wav_full_header);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f103 0213 	add.w	r2, r3, #19
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	601a      	str	r2, [r3, #0]
		    	  parsed_data_ptr->size=collected_wav_header->wav_hdr.num_of_bytes;
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	891b      	ldrh	r3, [r3, #8]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	461a      	mov	r2, r3
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	605a      	str	r2, [r3, #4]
			    //parsed_data_ptr->start_addr=msg;
				//parsed_data_ptr->size=collected_wav_header->basic_hdr.length+4;
				  return F_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	e00d      	b.n	80015ce <icListen_parse_msg+0x148>
			 }
			 parsed_data_ptr->size=0;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	2200      	movs	r2, #0
 80015b6:	711a      	strb	r2, [r3, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	715a      	strb	r2, [r3, #5]
 80015bc:	2200      	movs	r2, #0
 80015be:	719a      	strb	r2, [r3, #6]
 80015c0:	2200      	movs	r2, #0
 80015c2:	71da      	strb	r2, [r3, #7]
		     return F_OK;
 80015c4:	2300      	movs	r3, #0
 80015c6:	e002      	b.n	80015ce <icListen_parse_msg+0x148>
		 break;
		 default:
			 return F_ERR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e000      	b.n	80015ce <icListen_parse_msg+0x148>
	     break;
	 };
	}
	else{
		return F_ERR;
 80015cc:	2301      	movs	r3, #1
	}
	return F_ERR;
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3720      	adds	r7, #32
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d8:	b5b0      	push	{r4, r5, r7, lr}
 80015da:	b0ac      	sub	sp, #176	; 0xb0
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015de:	f001 fe45 	bl	800326c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015e2:	f000 f8cd 	bl	8001780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015e6:	f000 fa5d 	bl	8001aa4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80015ea:	f000 f98f 	bl	800190c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80015ee:	f000 fa0f 	bl	8001a10 <MX_USART1_UART_Init>
  MX_DMA_Init();
 80015f2:	f000 fa37 	bl	8001a64 <MX_DMA_Init>
  MX_TIM2_Init();
 80015f6:	f000 f9bf 	bl	8001978 <MX_TIM2_Init>
  MX_RTC_Init();
 80015fa:	f000 f92d 	bl	8001858 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  UI_init(&user_interface);
 80015fe:	484c      	ldr	r0, [pc, #304]	; (8001730 <main+0x158>)
 8001600:	f7fe ffd0 	bl	80005a4 <UI_init>
  HAL_UART_Receive_IT(&UI_UART,&(user_interface.media_rx_byte),1);
 8001604:	2201      	movs	r2, #1
 8001606:	494b      	ldr	r1, [pc, #300]	; (8001734 <main+0x15c>)
 8001608:	484b      	ldr	r0, [pc, #300]	; (8001738 <main+0x160>)
 800160a:	f006 fdaf 	bl	800816c <HAL_UART_Receive_IT>
  mcu_flash_init(&mcu_flash,FLASH_SECTOR_11);
 800160e:	210b      	movs	r1, #11
 8001610:	484a      	ldr	r0, [pc, #296]	; (800173c <main+0x164>)
 8001612:	f000 fe8f 	bl	8002334 <mcu_flash_init>

  system_status=SYSTEM_STARTED;
 8001616:	4b4a      	ldr	r3, [pc, #296]	; (8001740 <main+0x168>)
 8001618:	220b      	movs	r2, #11
 800161a:	701a      	strb	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of AppliEvent */
  osMessageQDef(AppliEvent, 16, uint16_t);
 800161c:	4b49      	ldr	r3, [pc, #292]	; (8001744 <main+0x16c>)
 800161e:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8001622:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001624:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  AppliEventHandle = osMessageCreate(osMessageQ(AppliEvent), NULL);
 8001628:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800162c:	2100      	movs	r1, #0
 800162e:	4618      	mov	r0, r3
 8001630:	f010 fa9d 	bl	8011b6e <osMessageCreate>
 8001634:	4603      	mov	r3, r0
 8001636:	4a44      	ldr	r2, [pc, #272]	; (8001748 <main+0x170>)
 8001638:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_rx */
  osMessageQDef(USB_rx, 10, uint32_t);
 800163a:	4b44      	ldr	r3, [pc, #272]	; (800174c <main+0x174>)
 800163c:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001640:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001642:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  USB_rxHandle = osMessageCreate(osMessageQ(USB_rx), NULL);
 8001646:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f010 fa8e 	bl	8011b6e <osMessageCreate>
 8001652:	4603      	mov	r3, r0
 8001654:	4a3e      	ldr	r2, [pc, #248]	; (8001750 <main+0x178>)
 8001656:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_tx */
  osMessageQDef(USB_tx, 10, uint32_t);
 8001658:	4b3c      	ldr	r3, [pc, #240]	; (800174c <main+0x174>)
 800165a:	f107 0480 	add.w	r4, r7, #128	; 0x80
 800165e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001660:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  USB_txHandle = osMessageCreate(osMessageQ(USB_tx), NULL);
 8001664:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f010 fa7f 	bl	8011b6e <osMessageCreate>
 8001670:	4603      	mov	r3, r0
 8001672:	4a38      	ldr	r2, [pc, #224]	; (8001754 <main+0x17c>)
 8001674:	6013      	str	r3, [r2, #0]

  /* definition and creation of storage_w */
  osMessageQDef(storage_w, 5, uint32_t);
 8001676:	4b38      	ldr	r3, [pc, #224]	; (8001758 <main+0x180>)
 8001678:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800167c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800167e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  storage_wHandle = osMessageCreate(osMessageQ(storage_w), NULL);
 8001682:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f010 fa70 	bl	8011b6e <osMessageCreate>
 800168e:	4603      	mov	r3, r0
 8001690:	4a32      	ldr	r2, [pc, #200]	; (800175c <main+0x184>)
 8001692:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8001694:	4b32      	ldr	r3, [pc, #200]	; (8001760 <main+0x188>)
 8001696:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800169a:	461d      	mov	r5, r3
 800169c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800169e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80016a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016ac:	2100      	movs	r1, #0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f010 f9fd 	bl	8011aae <osThreadCreate>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4a2b      	ldr	r2, [pc, #172]	; (8001764 <main+0x18c>)
 80016b8:	6013      	str	r3, [r2, #0]

  /* definition and creation of storage_t */
  osThreadDef(storage_t, storage_f, osPriorityNormal, 0, 512);
 80016ba:	4b2b      	ldr	r3, [pc, #172]	; (8001768 <main+0x190>)
 80016bc:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80016c0:	461d      	mov	r5, r3
 80016c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  storage_tHandle = osThreadCreate(osThread(storage_t), NULL);
 80016ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016d2:	2100      	movs	r1, #0
 80016d4:	4618      	mov	r0, r3
 80016d6:	f010 f9ea 	bl	8011aae <osThreadCreate>
 80016da:	4603      	mov	r3, r0
 80016dc:	4a23      	ldr	r2, [pc, #140]	; (800176c <main+0x194>)
 80016de:	6013      	str	r3, [r2, #0]

  /* definition and creation of icListen_t */
  osThreadDef(icListen_t, icListen_f, osPriorityNormal, 0, 512);
 80016e0:	4b23      	ldr	r3, [pc, #140]	; (8001770 <main+0x198>)
 80016e2:	f107 041c 	add.w	r4, r7, #28
 80016e6:	461d      	mov	r5, r3
 80016e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  icListen_tHandle = osThreadCreate(osThread(icListen_t), NULL);
 80016f4:	f107 031c 	add.w	r3, r7, #28
 80016f8:	2100      	movs	r1, #0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f010 f9d7 	bl	8011aae <osThreadCreate>
 8001700:	4603      	mov	r3, r0
 8001702:	4a1c      	ldr	r2, [pc, #112]	; (8001774 <main+0x19c>)
 8001704:	6013      	str	r3, [r2, #0]

  /* definition and creation of uart_t */
  osThreadDef(uart_t, uart_f, osPriorityNormal, 0, 256);
 8001706:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <main+0x1a0>)
 8001708:	463c      	mov	r4, r7
 800170a:	461d      	mov	r5, r3
 800170c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800170e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001710:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001714:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart_tHandle = osThreadCreate(osThread(uart_t), NULL);
 8001718:	463b      	mov	r3, r7
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f010 f9c6 	bl	8011aae <osThreadCreate>
 8001722:	4603      	mov	r3, r0
 8001724:	4a15      	ldr	r2, [pc, #84]	; (800177c <main+0x1a4>)
 8001726:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001728:	f010 f9ba 	bl	8011aa0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800172c:	e7fe      	b.n	800172c <main+0x154>
 800172e:	bf00      	nop
 8001730:	20000a64 	.word	0x20000a64
 8001734:	20000a70 	.word	0x20000a70
 8001738:	20000954 	.word	0x20000954
 800173c:	20000e78 	.word	0x20000e78
 8001740:	20001b70 	.word	0x20001b70
 8001744:	08017274 	.word	0x08017274
 8001748:	200009a8 	.word	0x200009a8
 800174c:	08017284 	.word	0x08017284
 8001750:	200009ac 	.word	0x200009ac
 8001754:	200009b0 	.word	0x200009b0
 8001758:	08017294 	.word	0x08017294
 800175c:	200009b4 	.word	0x200009b4
 8001760:	080172a4 	.word	0x080172a4
 8001764:	20000998 	.word	0x20000998
 8001768:	080172c0 	.word	0x080172c0
 800176c:	2000099c 	.word	0x2000099c
 8001770:	080172dc 	.word	0x080172dc
 8001774:	200009a0 	.word	0x200009a0
 8001778:	080172f8 	.word	0x080172f8
 800177c:	200009a4 	.word	0x200009a4

08001780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b094      	sub	sp, #80	; 0x50
 8001784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001786:	f107 0320 	add.w	r3, r7, #32
 800178a:	2230      	movs	r2, #48	; 0x30
 800178c:	2100      	movs	r1, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f013 f8b2 	bl	80148f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001794:	f107 030c 	add.w	r3, r7, #12
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a4:	2300      	movs	r3, #0
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	4b29      	ldr	r3, [pc, #164]	; (8001850 <SystemClock_Config+0xd0>)
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	4a28      	ldr	r2, [pc, #160]	; (8001850 <SystemClock_Config+0xd0>)
 80017ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b2:	6413      	str	r3, [r2, #64]	; 0x40
 80017b4:	4b26      	ldr	r3, [pc, #152]	; (8001850 <SystemClock_Config+0xd0>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017c0:	2300      	movs	r3, #0
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	4b23      	ldr	r3, [pc, #140]	; (8001854 <SystemClock_Config+0xd4>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a22      	ldr	r2, [pc, #136]	; (8001854 <SystemClock_Config+0xd4>)
 80017ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	4b20      	ldr	r3, [pc, #128]	; (8001854 <SystemClock_Config+0xd4>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80017dc:	2305      	movs	r3, #5
 80017de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80017e6:	2301      	movs	r3, #1
 80017e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ea:	2302      	movs	r3, #2
 80017ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80017f4:	230f      	movs	r3, #15
 80017f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80017f8:	2390      	movs	r3, #144	; 0x90
 80017fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017fc:	2302      	movs	r3, #2
 80017fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001800:	2305      	movs	r3, #5
 8001802:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001804:	f107 0320 	add.w	r3, r7, #32
 8001808:	4618      	mov	r0, r3
 800180a:	f004 fa8b 	bl	8005d24 <HAL_RCC_OscConfig>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001814:	f000 fd88 	bl	8002328 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001818:	230f      	movs	r3, #15
 800181a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800181c:	2302      	movs	r3, #2
 800181e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001824:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001828:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800182a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800182e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	2103      	movs	r1, #3
 8001836:	4618      	mov	r0, r3
 8001838:	f004 fcec 	bl	8006214 <HAL_RCC_ClockConfig>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001842:	f000 fd71 	bl	8002328 <Error_Handler>
  }
}
 8001846:	bf00      	nop
 8001848:	3750      	adds	r7, #80	; 0x50
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023800 	.word	0x40023800
 8001854:	40007000 	.word	0x40007000

08001858 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800186c:	2300      	movs	r3, #0
 800186e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001870:	4b24      	ldr	r3, [pc, #144]	; (8001904 <MX_RTC_Init+0xac>)
 8001872:	4a25      	ldr	r2, [pc, #148]	; (8001908 <MX_RTC_Init+0xb0>)
 8001874:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001876:	4b23      	ldr	r3, [pc, #140]	; (8001904 <MX_RTC_Init+0xac>)
 8001878:	2200      	movs	r2, #0
 800187a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800187c:	4b21      	ldr	r3, [pc, #132]	; (8001904 <MX_RTC_Init+0xac>)
 800187e:	227f      	movs	r2, #127	; 0x7f
 8001880:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001882:	4b20      	ldr	r3, [pc, #128]	; (8001904 <MX_RTC_Init+0xac>)
 8001884:	22ff      	movs	r2, #255	; 0xff
 8001886:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001888:	4b1e      	ldr	r3, [pc, #120]	; (8001904 <MX_RTC_Init+0xac>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800188e:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <MX_RTC_Init+0xac>)
 8001890:	2200      	movs	r2, #0
 8001892:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001894:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <MX_RTC_Init+0xac>)
 8001896:	2200      	movs	r2, #0
 8001898:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800189a:	481a      	ldr	r0, [pc, #104]	; (8001904 <MX_RTC_Init+0xac>)
 800189c:	f004 ffae 	bl	80067fc <HAL_RTC_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80018a6:	f000 fd3f 	bl	8002328 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	2200      	movs	r2, #0
 80018c2:	4619      	mov	r1, r3
 80018c4:	480f      	ldr	r0, [pc, #60]	; (8001904 <MX_RTC_Init+0xac>)
 80018c6:	f005 f80f 	bl	80068e8 <HAL_RTC_SetTime>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80018d0:	f000 fd2a 	bl	8002328 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80018d4:	2301      	movs	r3, #1
 80018d6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80018d8:	2301      	movs	r3, #1
 80018da:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80018dc:	2301      	movs	r3, #1
 80018de:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80018e4:	463b      	mov	r3, r7
 80018e6:	2200      	movs	r2, #0
 80018e8:	4619      	mov	r1, r3
 80018ea:	4806      	ldr	r0, [pc, #24]	; (8001904 <MX_RTC_Init+0xac>)
 80018ec:	f005 f8f4 	bl	8006ad8 <HAL_RTC_SetDate>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80018f6:	f000 fd17 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80018fa:	bf00      	nop
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000834 	.word	0x20000834
 8001908:	40002800 	.word	0x40002800

0800190c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001910:	4b17      	ldr	r3, [pc, #92]	; (8001970 <MX_SPI1_Init+0x64>)
 8001912:	4a18      	ldr	r2, [pc, #96]	; (8001974 <MX_SPI1_Init+0x68>)
 8001914:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001916:	4b16      	ldr	r3, [pc, #88]	; (8001970 <MX_SPI1_Init+0x64>)
 8001918:	f44f 7282 	mov.w	r2, #260	; 0x104
 800191c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800191e:	4b14      	ldr	r3, [pc, #80]	; (8001970 <MX_SPI1_Init+0x64>)
 8001920:	2200      	movs	r2, #0
 8001922:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <MX_SPI1_Init+0x64>)
 8001926:	2200      	movs	r2, #0
 8001928:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800192a:	4b11      	ldr	r3, [pc, #68]	; (8001970 <MX_SPI1_Init+0x64>)
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001930:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <MX_SPI1_Init+0x64>)
 8001932:	2200      	movs	r2, #0
 8001934:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001936:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <MX_SPI1_Init+0x64>)
 8001938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800193c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800193e:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <MX_SPI1_Init+0x64>)
 8001940:	2208      	movs	r2, #8
 8001942:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001944:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <MX_SPI1_Init+0x64>)
 8001946:	2200      	movs	r2, #0
 8001948:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <MX_SPI1_Init+0x64>)
 800194c:	2200      	movs	r2, #0
 800194e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001950:	4b07      	ldr	r3, [pc, #28]	; (8001970 <MX_SPI1_Init+0x64>)
 8001952:	2200      	movs	r2, #0
 8001954:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <MX_SPI1_Init+0x64>)
 8001958:	220a      	movs	r2, #10
 800195a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800195c:	4804      	ldr	r0, [pc, #16]	; (8001970 <MX_SPI1_Init+0x64>)
 800195e:	f005 fa4b 	bl	8006df8 <HAL_SPI_Init>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001968:	f000 fcde 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000854 	.word	0x20000854
 8001974:	40013000 	.word	0x40013000

08001978 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800197e:	f107 0308 	add.w	r3, r7, #8
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198c:	463b      	mov	r3, r7
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001994:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <MX_TIM2_Init+0x94>)
 8001996:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800199a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800199c:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <MX_TIM2_Init+0x94>)
 800199e:	2200      	movs	r2, #0
 80019a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a2:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <MX_TIM2_Init+0x94>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80019a8:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <MX_TIM2_Init+0x94>)
 80019aa:	f04f 32ff 	mov.w	r2, #4294967295
 80019ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b0:	4b16      	ldr	r3, [pc, #88]	; (8001a0c <MX_TIM2_Init+0x94>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <MX_TIM2_Init+0x94>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019bc:	4813      	ldr	r0, [pc, #76]	; (8001a0c <MX_TIM2_Init+0x94>)
 80019be:	f005 fe2f 	bl	8007620 <HAL_TIM_Base_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80019c8:	f000 fcae 	bl	8002328 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019d2:	f107 0308 	add.w	r3, r7, #8
 80019d6:	4619      	mov	r1, r3
 80019d8:	480c      	ldr	r0, [pc, #48]	; (8001a0c <MX_TIM2_Init+0x94>)
 80019da:	f005 ffe9 	bl	80079b0 <HAL_TIM_ConfigClockSource>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80019e4:	f000 fca0 	bl	8002328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e8:	2300      	movs	r3, #0
 80019ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019f0:	463b      	mov	r3, r7
 80019f2:	4619      	mov	r1, r3
 80019f4:	4805      	ldr	r0, [pc, #20]	; (8001a0c <MX_TIM2_Init+0x94>)
 80019f6:	f006 fa05 	bl	8007e04 <HAL_TIMEx_MasterConfigSynchronization>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a00:	f000 fc92 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a04:	bf00      	nop
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	2000090c 	.word	0x2000090c

08001a10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <MX_USART1_UART_Init+0x4c>)
 8001a16:	4a12      	ldr	r2, [pc, #72]	; (8001a60 <MX_USART1_UART_Init+0x50>)
 8001a18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <MX_USART1_UART_Init+0x4c>)
 8001a1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <MX_USART1_UART_Init+0x4c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <MX_USART1_UART_Init+0x4c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <MX_USART1_UART_Init+0x4c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a34:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <MX_USART1_UART_Init+0x4c>)
 8001a36:	220c      	movs	r2, #12
 8001a38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a3a:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <MX_USART1_UART_Init+0x4c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <MX_USART1_UART_Init+0x4c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a46:	4805      	ldr	r0, [pc, #20]	; (8001a5c <MX_USART1_UART_Init+0x4c>)
 8001a48:	f006 fa6c 	bl	8007f24 <HAL_UART_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a52:	f000 fc69 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000954 	.word	0x20000954
 8001a60:	40011000 	.word	0x40011000

08001a64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	607b      	str	r3, [r7, #4]
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <MX_DMA_Init+0x3c>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a0b      	ldr	r2, [pc, #44]	; (8001aa0 <MX_DMA_Init+0x3c>)
 8001a74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <MX_DMA_Init+0x3c>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2105      	movs	r1, #5
 8001a8a:	203b      	movs	r0, #59	; 0x3b
 8001a8c:	f001 fd0c 	bl	80034a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001a90:	203b      	movs	r0, #59	; 0x3b
 8001a92:	f001 fd25 	bl	80034e0 <HAL_NVIC_EnableIRQ>

}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800

08001aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08a      	sub	sp, #40	; 0x28
 8001aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
 8001ab8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	4b39      	ldr	r3, [pc, #228]	; (8001ba4 <MX_GPIO_Init+0x100>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a38      	ldr	r2, [pc, #224]	; (8001ba4 <MX_GPIO_Init+0x100>)
 8001ac4:	f043 0304 	orr.w	r3, r3, #4
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b36      	ldr	r3, [pc, #216]	; (8001ba4 <MX_GPIO_Init+0x100>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4b32      	ldr	r3, [pc, #200]	; (8001ba4 <MX_GPIO_Init+0x100>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a31      	ldr	r2, [pc, #196]	; (8001ba4 <MX_GPIO_Init+0x100>)
 8001ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b2f      	ldr	r3, [pc, #188]	; (8001ba4 <MX_GPIO_Init+0x100>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	4b2b      	ldr	r3, [pc, #172]	; (8001ba4 <MX_GPIO_Init+0x100>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a2a      	ldr	r2, [pc, #168]	; (8001ba4 <MX_GPIO_Init+0x100>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b28      	ldr	r3, [pc, #160]	; (8001ba4 <MX_GPIO_Init+0x100>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	4b24      	ldr	r3, [pc, #144]	; (8001ba4 <MX_GPIO_Init+0x100>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a23      	ldr	r2, [pc, #140]	; (8001ba4 <MX_GPIO_Init+0x100>)
 8001b18:	f043 0302 	orr.w	r3, r3, #2
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b21      	ldr	r3, [pc, #132]	; (8001ba4 <MX_GPIO_Init+0x100>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_SD3_GPIO_Port, SS_SD3_Pin, GPIO_PIN_SET);
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	2102      	movs	r1, #2
 8001b2e:	481e      	ldr	r0, [pc, #120]	; (8001ba8 <MX_GPIO_Init+0x104>)
 8001b30:	f002 fcd4 	bl	80044dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin, GPIO_PIN_SET);
 8001b34:	2201      	movs	r2, #1
 8001b36:	2186      	movs	r1, #134	; 0x86
 8001b38:	481c      	ldr	r0, [pc, #112]	; (8001bac <MX_GPIO_Init+0x108>)
 8001b3a:	f002 fccf 	bl	80044dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_VBUS_GPIO_Port, USB_VBUS_Pin, GPIO_PIN_SET);
 8001b3e:	2201      	movs	r2, #1
 8001b40:	2101      	movs	r1, #1
 8001b42:	481b      	ldr	r0, [pc, #108]	; (8001bb0 <MX_GPIO_Init+0x10c>)
 8001b44:	f002 fcca 	bl	80044dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SS_SD3_Pin */
  GPIO_InitStruct.Pin = SS_SD3_Pin;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b50:	2301      	movs	r3, #1
 8001b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b54:	2302      	movs	r3, #2
 8001b56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SS_SD3_GPIO_Port, &GPIO_InitStruct);
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4812      	ldr	r0, [pc, #72]	; (8001ba8 <MX_GPIO_Init+0x104>)
 8001b60:	f002 fb20 	bl	80041a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS_SD1_Pin SS_SD2_Pin SS_SD4_Pin */
  GPIO_InitStruct.Pin = SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin;
 8001b64:	2386      	movs	r3, #134	; 0x86
 8001b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b70:	2302      	movs	r3, #2
 8001b72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	4619      	mov	r1, r3
 8001b7a:	480c      	ldr	r0, [pc, #48]	; (8001bac <MX_GPIO_Init+0x108>)
 8001b7c:	f002 fb12 	bl	80041a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001b80:	2301      	movs	r3, #1
 8001b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b84:	2301      	movs	r3, #1
 8001b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	4619      	mov	r1, r3
 8001b96:	4806      	ldr	r0, [pc, #24]	; (8001bb0 <MX_GPIO_Init+0x10c>)
 8001b98:	f002 fb04 	bl	80041a4 <HAL_GPIO_Init>

}
 8001b9c:	bf00      	nop
 8001b9e:	3728      	adds	r7, #40	; 0x28
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40020800 	.word	0x40020800
 8001bac:	40020000 	.word	0x40020000
 8001bb0:	40020400 	.word	0x40020400

08001bb4 <HAL_UART_RxCpltCallback>:

uint8_t tmp1;
uint8_t tmp2;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 if(huart==&UI_UART && system_status==SYSTEM_READY)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a0b      	ldr	r2, [pc, #44]	; (8001bec <HAL_UART_RxCpltCallback+0x38>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d10e      	bne.n	8001be2 <HAL_UART_RxCpltCallback+0x2e>
 8001bc4:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <HAL_UART_RxCpltCallback+0x3c>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b0a      	cmp	r3, #10
 8001bca:	d10a      	bne.n	8001be2 <HAL_UART_RxCpltCallback+0x2e>
 {
	 UI_media_process_byte(&user_interface,user_interface.media_rx_byte);
 8001bcc:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <HAL_UART_RxCpltCallback+0x40>)
 8001bce:	7b1b      	ldrb	r3, [r3, #12]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4808      	ldr	r0, [pc, #32]	; (8001bf4 <HAL_UART_RxCpltCallback+0x40>)
 8001bd4:	f7fe fd50 	bl	8000678 <UI_media_process_byte>
	 HAL_UART_Receive_IT(&UI_UART,&(user_interface.media_rx_byte),1);
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4907      	ldr	r1, [pc, #28]	; (8001bf8 <HAL_UART_RxCpltCallback+0x44>)
 8001bdc:	4803      	ldr	r0, [pc, #12]	; (8001bec <HAL_UART_RxCpltCallback+0x38>)
 8001bde:	f006 fac5 	bl	800816c <HAL_UART_Receive_IT>
 }
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000954 	.word	0x20000954
 8001bf0:	20001b70 	.word	0x20001b70
 8001bf4:	20000a64 	.word	0x20000a64
 8001bf8:	20000a70 	.word	0x20000a70

08001bfc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

 if(huart==&UI_UART)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a09      	ldr	r2, [pc, #36]	; (8001c2c <HAL_UART_TxCpltCallback+0x30>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d10b      	bne.n	8001c24 <HAL_UART_TxCpltCallback+0x28>
 {
  if(UI_media_get_byte(&user_interface,&tmp2)==UI_F_OK)
 8001c0c:	4908      	ldr	r1, [pc, #32]	; (8001c30 <HAL_UART_TxCpltCallback+0x34>)
 8001c0e:	4809      	ldr	r0, [pc, #36]	; (8001c34 <HAL_UART_TxCpltCallback+0x38>)
 8001c10:	f7fe fdb0 	bl	8000774 <UI_media_get_byte>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d104      	bne.n	8001c24 <HAL_UART_TxCpltCallback+0x28>
  {
	    HAL_UART_Transmit_IT(&UI_UART,&tmp2,1);
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	4904      	ldr	r1, [pc, #16]	; (8001c30 <HAL_UART_TxCpltCallback+0x34>)
 8001c1e:	4803      	ldr	r0, [pc, #12]	; (8001c2c <HAL_UART_TxCpltCallback+0x30>)
 8001c20:	f006 fa5f 	bl	80080e2 <HAL_UART_Transmit_IT>
  }
 }
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000954 	.word	0x20000954
 8001c30:	20001b84 	.word	0x20001b84
 8001c34:	20000a64 	.word	0x20000a64

08001c38 <icListen_prepare_messages>:

void icListen_prepare_messages(icListen_object_typedef* self_object)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  collect_msg_ptr.start_addr=(uint8_t*)&collect_msg;
 8001c40:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <icListen_prepare_messages+0x58>)
 8001c42:	4a14      	ldr	r2, [pc, #80]	; (8001c94 <icListen_prepare_messages+0x5c>)
 8001c44:	601a      	str	r2, [r3, #0]
  collect_msg_ptr.size=sizeof(icListen_collect_short_mask_msg);
 8001c46:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <icListen_prepare_messages+0x58>)
 8001c48:	2207      	movs	r2, #7
 8001c4a:	605a      	str	r2, [r3, #4]

  status_msg_ptr.start_addr=(uint8_t*)&status_msg;
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <icListen_prepare_messages+0x60>)
 8001c4e:	4a13      	ldr	r2, [pc, #76]	; (8001c9c <icListen_prepare_messages+0x64>)
 8001c50:	601a      	str	r2, [r3, #0]
  status_msg_ptr.size=sizeof(icListen_enquire_device_msg);
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <icListen_prepare_messages+0x60>)
 8001c54:	2206      	movs	r2, #6
 8001c56:	605a      	str	r2, [r3, #4]

  setup_msg_ptr.start_addr=(uint8_t*)&setup_msg;
 8001c58:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <icListen_prepare_messages+0x68>)
 8001c5a:	4a12      	ldr	r2, [pc, #72]	; (8001ca4 <icListen_prepare_messages+0x6c>)
 8001c5c:	601a      	str	r2, [r3, #0]
  setup_msg_ptr.size=sizeof(icListen_setup_full_msg);
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <icListen_prepare_messages+0x68>)
 8001c60:	2262      	movs	r2, #98	; 0x62
 8001c62:	605a      	str	r2, [r3, #4]

  icListen_prepare_collect_msg(&collect_msg,0x20);
 8001c64:	2120      	movs	r1, #32
 8001c66:	480b      	ldr	r0, [pc, #44]	; (8001c94 <icListen_prepare_messages+0x5c>)
 8001c68:	f7ff fbcf 	bl	800140a <icListen_prepare_collect_msg>
  icListen_prepare_enquire_device_msg(&status_msg);
 8001c6c:	480b      	ldr	r0, [pc, #44]	; (8001c9c <icListen_prepare_messages+0x64>)
 8001c6e:	f7ff fbef 	bl	8001450 <icListen_prepare_enquire_device_msg>
  icListen_prepare_setup_msg(&setup_msg,self_object->settings->wav_sample_rate,self_object->settings->wav_sample_bit_depth);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	6819      	ldr	r1, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4808      	ldr	r0, [pc, #32]	; (8001ca4 <icListen_prepare_messages+0x6c>)
 8001c82:	f7ff fa61 	bl	8001148 <icListen_prepare_setup_msg>
  //HAL_UART_Transmit(&huart1,(uint8_t*)&setup_msg,98,100);
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	200009e8 	.word	0x200009e8
 8001c94:	200009f0 	.word	0x200009f0
 8001c98:	200009b8 	.word	0x200009b8
 8001c9c:	200009c0 	.word	0x200009c0
 8001ca0:	200009f8 	.word	0x200009f8
 8001ca4:	20000a00 	.word	0x20000a00

08001ca8 <open_new_wav_file>:

F_RES open_new_wav_file()
{
 8001ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001caa:	b091      	sub	sp, #68	; 0x44
 8001cac:	af06      	add	r7, sp, #24
	char file_name[30];
	file_bytes_left=((icListen.settings->wav_sample_bit_depth/8)*icListen.settings->wav_sample_rate*icListen.settings->file_duration)-44;
 8001cae:	4b33      	ldr	r3, [pc, #204]	; (8001d7c <open_new_wav_file+0xd4>)
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	08db      	lsrs	r3, r3, #3
 8001cb6:	4a31      	ldr	r2, [pc, #196]	; (8001d7c <open_new_wav_file+0xd4>)
 8001cb8:	6a12      	ldr	r2, [r2, #32]
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	fb02 f303 	mul.w	r3, r2, r3
 8001cc0:	4a2e      	ldr	r2, [pc, #184]	; (8001d7c <open_new_wav_file+0xd4>)
 8001cc2:	6a12      	ldr	r2, [r2, #32]
 8001cc4:	6892      	ldr	r2, [r2, #8]
 8001cc6:	fb02 f303 	mul.w	r3, r2, r3
 8001cca:	3b2c      	subs	r3, #44	; 0x2c
 8001ccc:	4a2c      	ldr	r2, [pc, #176]	; (8001d80 <open_new_wav_file+0xd8>)
 8001cce:	6013      	str	r3, [r2, #0]
	read_time(&rtc);
 8001cd0:	482c      	ldr	r0, [pc, #176]	; (8001d84 <open_new_wav_file+0xdc>)
 8001cd2:	f000 fc03 	bl	80024dc <read_time>
	sprintf(file_name,"%d:%d_%02d%02d%02d_%02d%02d%02d.wav",microsd_storage.active_disk_indx,icListen.settings->file_index,rtc.time.Hours,rtc.time.Minutes,rtc.time.Seconds,rtc.date.Date,rtc.date.Month,rtc.date.Year);
 8001cd6:	4b2c      	ldr	r3, [pc, #176]	; (8001d88 <open_new_wav_file+0xe0>)
 8001cd8:	f893 3910 	ldrb.w	r3, [r3, #2320]	; 0x910
 8001cdc:	469c      	mov	ip, r3
 8001cde:	4b27      	ldr	r3, [pc, #156]	; (8001d7c <open_new_wav_file+0xd4>)
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	4a27      	ldr	r2, [pc, #156]	; (8001d84 <open_new_wav_file+0xdc>)
 8001ce6:	7812      	ldrb	r2, [r2, #0]
 8001ce8:	4611      	mov	r1, r2
 8001cea:	4a26      	ldr	r2, [pc, #152]	; (8001d84 <open_new_wav_file+0xdc>)
 8001cec:	7852      	ldrb	r2, [r2, #1]
 8001cee:	4614      	mov	r4, r2
 8001cf0:	4a24      	ldr	r2, [pc, #144]	; (8001d84 <open_new_wav_file+0xdc>)
 8001cf2:	7892      	ldrb	r2, [r2, #2]
 8001cf4:	4615      	mov	r5, r2
 8001cf6:	4a23      	ldr	r2, [pc, #140]	; (8001d84 <open_new_wav_file+0xdc>)
 8001cf8:	7d92      	ldrb	r2, [r2, #22]
 8001cfa:	4616      	mov	r6, r2
 8001cfc:	4a21      	ldr	r2, [pc, #132]	; (8001d84 <open_new_wav_file+0xdc>)
 8001cfe:	7d52      	ldrb	r2, [r2, #21]
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	4a20      	ldr	r2, [pc, #128]	; (8001d84 <open_new_wav_file+0xdc>)
 8001d04:	7dd2      	ldrb	r2, [r2, #23]
 8001d06:	f107 0008 	add.w	r0, r7, #8
 8001d0a:	9205      	str	r2, [sp, #20]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	9204      	str	r2, [sp, #16]
 8001d10:	9603      	str	r6, [sp, #12]
 8001d12:	9502      	str	r5, [sp, #8]
 8001d14:	9401      	str	r4, [sp, #4]
 8001d16:	9100      	str	r1, [sp, #0]
 8001d18:	4662      	mov	r2, ip
 8001d1a:	491c      	ldr	r1, [pc, #112]	; (8001d8c <open_new_wav_file+0xe4>)
 8001d1c:	f013 f9c0 	bl	80150a0 <siprintf>
	if(disk_kbytes_left>(file_bytes_left/1024)){
 8001d20:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <open_new_wav_file+0xd8>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	0a9a      	lsrs	r2, r3, #10
 8001d26:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <open_new_wav_file+0xe8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d221      	bcs.n	8001d72 <open_new_wav_file+0xca>
	 if(wav_file_open(&wav_file,file_name,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate,1)==F_OK){
 8001d2e:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <open_new_wav_file+0xd4>)
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <open_new_wav_file+0xd4>)
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f107 0108 	add.w	r1, r7, #8
 8001d3e:	2001      	movs	r0, #1
 8001d40:	9000      	str	r0, [sp, #0]
 8001d42:	4814      	ldr	r0, [pc, #80]	; (8001d94 <open_new_wav_file+0xec>)
 8001d44:	f001 f990 	bl	8003068 <wav_file_open>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d111      	bne.n	8001d72 <open_new_wav_file+0xca>
		disk_kbytes_left-=(file_bytes_left/1024);
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <open_new_wav_file+0xe8>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <open_new_wav_file+0xd8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	0a9b      	lsrs	r3, r3, #10
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	4a0d      	ldr	r2, [pc, #52]	; (8001d90 <open_new_wav_file+0xe8>)
 8001d5c:	6013      	str	r3, [r2, #0]
		icListen.settings->file_index++;
 8001d5e:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <open_new_wav_file+0xd4>)
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	68da      	ldr	r2, [r3, #12]
 8001d64:	3201      	adds	r2, #1
 8001d66:	60da      	str	r2, [r3, #12]
		mcu_flash_save(&mcu_flash);
 8001d68:	480b      	ldr	r0, [pc, #44]	; (8001d98 <open_new_wav_file+0xf0>)
 8001d6a:	f000 fb55 	bl	8002418 <mcu_flash_save>
		return F_OK;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	e000      	b.n	8001d74 <open_new_wav_file+0xcc>
	 }
	}
    return F_ERR;
 8001d72:	2301      	movs	r3, #1
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	372c      	adds	r7, #44	; 0x2c
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d7c:	20000800 	.word	0x20000800
 8001d80:	20001b74 	.word	0x20001b74
 8001d84:	20001b88 	.word	0x20001b88
 8001d88:	20000e9c 	.word	0x20000e9c
 8001d8c:	08017314 	.word	0x08017314
 8001d90:	20001b78 	.word	0x20001b78
 8001d94:	200017b8 	.word	0x200017b8
 8001d98:	20000e78 	.word	0x20000e78

08001d9c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001da4:	f012 f958 	bl	8014058 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
   osEvent event;

  if(mcu_flash_read(&mcu_flash)!=F_OK){
 8001da8:	483c      	ldr	r0, [pc, #240]	; (8001e9c <StartDefaultTask+0x100>)
 8001daa:	f000 fb15 	bl	80023d8 <mcu_flash_read>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d02a      	beq.n	8001e0a <StartDefaultTask+0x6e>
  		icListen.settings->wav_sample_rate=ICLISTEN_DEFAULT_WAV_SAMPLE_RATE;
 8001db4:	4b3a      	ldr	r3, [pc, #232]	; (8001ea0 <StartDefaultTask+0x104>)
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f042 027d 	orr.w	r2, r2, #125	; 0x7d
 8001dc2:	705a      	strb	r2, [r3, #1]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	709a      	strb	r2, [r3, #2]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	70da      	strb	r2, [r3, #3]
  		icListen.settings->wav_sample_bit_depth=ICLISTEN_DEFAULT_WAV_SAMPLE_BIT_DEPTH;
 8001dcc:	4b34      	ldr	r3, [pc, #208]	; (8001ea0 <StartDefaultTask+0x104>)
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f042 0218 	orr.w	r2, r2, #24
 8001dd6:	711a      	strb	r2, [r3, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	715a      	strb	r2, [r3, #5]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	719a      	strb	r2, [r3, #6]
 8001de0:	2200      	movs	r2, #0
 8001de2:	71da      	strb	r2, [r3, #7]
  		icListen.settings->file_duration=ICLISTEN_DEFAULT_FILE_DURATION;
 8001de4:	4b2e      	ldr	r3, [pc, #184]	; (8001ea0 <StartDefaultTask+0x104>)
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f042 0278 	orr.w	r2, r2, #120	; 0x78
 8001dee:	721a      	strb	r2, [r3, #8]
 8001df0:	2200      	movs	r2, #0
 8001df2:	725a      	strb	r2, [r3, #9]
 8001df4:	2200      	movs	r2, #0
 8001df6:	729a      	strb	r2, [r3, #10]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	72da      	strb	r2, [r3, #11]
  		mcu_flash_save(&mcu_flash);
 8001dfc:	4827      	ldr	r0, [pc, #156]	; (8001e9c <StartDefaultTask+0x100>)
 8001dfe:	f000 fb0b 	bl	8002418 <mcu_flash_save>
  }
  while(microsd_storage.status!=STORAGE_NOT_INITTIALIZED) {osDelay(1);}
 8001e02:	e002      	b.n	8001e0a <StartDefaultTask+0x6e>
 8001e04:	2001      	movs	r0, #1
 8001e06:	f00f fe9e 	bl	8011b46 <osDelay>
 8001e0a:	4b26      	ldr	r3, [pc, #152]	; (8001ea4 <StartDefaultTask+0x108>)
 8001e0c:	f893 3919 	ldrb.w	r3, [r3, #2329]	; 0x919
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d1f7      	bne.n	8001e04 <StartDefaultTask+0x68>
  system_status=SYSTEM_READY;
 8001e14:	4b24      	ldr	r3, [pc, #144]	; (8001ea8 <StartDefaultTask+0x10c>)
 8001e16:	220a      	movs	r2, #10
 8001e18:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  for(;;)
  {
	  event = osMessageGet(AppliEventHandle, osWaitForever);
 8001e1a:	4b24      	ldr	r3, [pc, #144]	; (8001eac <StartDefaultTask+0x110>)
 8001e1c:	6819      	ldr	r1, [r3, #0]
 8001e1e:	f107 030c 	add.w	r3, r7, #12
 8001e22:	f04f 32ff 	mov.w	r2, #4294967295
 8001e26:	4618      	mov	r0, r3
 8001e28:	f00f ff0a 	bl	8011c40 <osMessageGet>

	  if(event.status == osEventMessage)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2b10      	cmp	r3, #16
 8001e30:	d130      	bne.n	8001e94 <StartDefaultTask+0xf8>
	  {
		switch(event.value.v)
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	2b03      	cmp	r3, #3
 8001e36:	d006      	beq.n	8001e46 <StartDefaultTask+0xaa>
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	d82d      	bhi.n	8001e98 <StartDefaultTask+0xfc>
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d026      	beq.n	8001e8e <StartDefaultTask+0xf2>
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d004      	beq.n	8001e4e <StartDefaultTask+0xb2>
		 case APPLICATION_START:
		   USB_set_line_coding();
		 break;

		 default:
		 break;
 8001e44:	e028      	b.n	8001e98 <StartDefaultTask+0xfc>
			 icListen_init_sensor_status(&icListen);
 8001e46:	4816      	ldr	r0, [pc, #88]	; (8001ea0 <StartDefaultTask+0x104>)
 8001e48:	f7ff f956 	bl	80010f8 <icListen_init_sensor_status>
		 break;
 8001e4c:	e025      	b.n	8001e9a <StartDefaultTask+0xfe>
			 osDelay(5000);
 8001e4e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001e52:	f00f fe78 	bl	8011b46 <osDelay>
			 icListen_init_sensor_status(&icListen);
 8001e56:	4812      	ldr	r0, [pc, #72]	; (8001ea0 <StartDefaultTask+0x104>)
 8001e58:	f7ff f94e 	bl	80010f8 <icListen_init_sensor_status>
			 icListen.status=ICLISTEN_CONNECTED;
 8001e5c:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <StartDefaultTask+0x104>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	775a      	strb	r2, [r3, #29]
			 osMessagePut(USB_txHandle,(uint32_t)&status_msg_ptr, 0);
 8001e62:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <StartDefaultTask+0x114>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4913      	ldr	r1, [pc, #76]	; (8001eb4 <StartDefaultTask+0x118>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f00f fea8 	bl	8011bc0 <osMessagePut>
			 osMessagePut(USB_txHandle,(uint32_t)&setup_msg_ptr, 0);
 8001e70:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <StartDefaultTask+0x114>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4910      	ldr	r1, [pc, #64]	; (8001eb8 <StartDefaultTask+0x11c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f00f fea1 	bl	8011bc0 <osMessagePut>
			 osMessagePut(USB_txHandle,(uint32_t)&collect_msg_ptr, 0);
 8001e7e:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <StartDefaultTask+0x114>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	490e      	ldr	r1, [pc, #56]	; (8001ebc <StartDefaultTask+0x120>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	4618      	mov	r0, r3
 8001e88:	f00f fe9a 	bl	8011bc0 <osMessagePut>
		 break;
 8001e8c:	e005      	b.n	8001e9a <StartDefaultTask+0xfe>
		   USB_set_line_coding();
 8001e8e:	f012 f8b5 	bl	8013ffc <USB_set_line_coding>
		 break;
 8001e92:	e002      	b.n	8001e9a <StartDefaultTask+0xfe>
		 }
	   }
 8001e94:	bf00      	nop
 8001e96:	e7c0      	b.n	8001e1a <StartDefaultTask+0x7e>
		 break;
 8001e98:	bf00      	nop
	  event = osMessageGet(AppliEventHandle, osWaitForever);
 8001e9a:	e7be      	b.n	8001e1a <StartDefaultTask+0x7e>
 8001e9c:	20000e78 	.word	0x20000e78
 8001ea0:	20000800 	.word	0x20000800
 8001ea4:	20000e9c 	.word	0x20000e9c
 8001ea8:	20001b70 	.word	0x20001b70
 8001eac:	200009a8 	.word	0x200009a8
 8001eb0:	200009b0 	.word	0x200009b0
 8001eb4:	200009b8 	.word	0x200009b8
 8001eb8:	200009f8 	.word	0x200009f8
 8001ebc:	200009e8 	.word	0x200009e8

08001ec0 <storage_f>:
* @retval None
*/

/* USER CODE END Header_storage_f */
void storage_f(void const * argument)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b0a0      	sub	sp, #128	; 0x80
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN storage_f */
  osDelay(500);
 8001ec8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ecc:	f00f fe3b 	bl	8011b46 <osDelay>
  char info_msg[100];

  memory_region_pointer* data_ptr;
  osEvent storage_w_event;

  sprintf(info_msg,"Wait for storage init....");
 8001ed0:	f107 0318 	add.w	r3, r7, #24
 8001ed4:	498e      	ldr	r1, [pc, #568]	; (8002110 <storage_f+0x250>)
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f013 f8e2 	bl	80150a0 <siprintf>
  HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 8001edc:	f107 0318 	add.w	r3, r7, #24
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe f97f 	bl	80001e4 <strlen>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	f107 0118 	add.w	r1, r7, #24
 8001eee:	2364      	movs	r3, #100	; 0x64
 8001ef0:	4888      	ldr	r0, [pc, #544]	; (8002114 <storage_f+0x254>)
 8001ef2:	f006 f864 	bl	8007fbe <HAL_UART_Transmit>

  sd_storage_link_ss(&microsd_storage,0,SS_SD1_Pin,GPIOA);
 8001ef6:	4b88      	ldr	r3, [pc, #544]	; (8002118 <storage_f+0x258>)
 8001ef8:	2202      	movs	r2, #2
 8001efa:	2100      	movs	r1, #0
 8001efc:	4887      	ldr	r0, [pc, #540]	; (800211c <storage_f+0x25c>)
 8001efe:	f7ff f899 	bl	8001034 <sd_storage_link_ss>
  sd_storage_link_ss(&microsd_storage,1,SS_SD2_Pin,GPIOA);
 8001f02:	4b85      	ldr	r3, [pc, #532]	; (8002118 <storage_f+0x258>)
 8001f04:	2204      	movs	r2, #4
 8001f06:	2101      	movs	r1, #1
 8001f08:	4884      	ldr	r0, [pc, #528]	; (800211c <storage_f+0x25c>)
 8001f0a:	f7ff f893 	bl	8001034 <sd_storage_link_ss>
  sd_storage_link_ss(&microsd_storage,2,SS_SD3_Pin,SS_SD3_GPIO_Port);
 8001f0e:	4b84      	ldr	r3, [pc, #528]	; (8002120 <storage_f+0x260>)
 8001f10:	2202      	movs	r2, #2
 8001f12:	2102      	movs	r1, #2
 8001f14:	4881      	ldr	r0, [pc, #516]	; (800211c <storage_f+0x25c>)
 8001f16:	f7ff f88d 	bl	8001034 <sd_storage_link_ss>
  sd_storage_link_ss(&microsd_storage,3,SS_SD4_Pin,GPIOA);
 8001f1a:	4b7f      	ldr	r3, [pc, #508]	; (8002118 <storage_f+0x258>)
 8001f1c:	2280      	movs	r2, #128	; 0x80
 8001f1e:	2103      	movs	r1, #3
 8001f20:	487e      	ldr	r0, [pc, #504]	; (800211c <storage_f+0x25c>)
 8001f22:	f7ff f887 	bl	8001034 <sd_storage_link_ss>
  while(sd_storage_init(&microsd_storage)!=F_OK) osDelay(1000);
 8001f26:	e003      	b.n	8001f30 <storage_f+0x70>
 8001f28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f2c:	f00f fe0b 	bl	8011b46 <osDelay>
 8001f30:	487a      	ldr	r0, [pc, #488]	; (800211c <storage_f+0x25c>)
 8001f32:	f7fe ffbd 	bl	8000eb0 <sd_storage_init>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1f5      	bne.n	8001f28 <storage_f+0x68>

  sprintf(info_msg,"detected %d cards.\r",microsd_storage.num_of_discs);
 8001f3c:	4b77      	ldr	r3, [pc, #476]	; (800211c <storage_f+0x25c>)
 8001f3e:	f893 3918 	ldrb.w	r3, [r3, #2328]	; 0x918
 8001f42:	461a      	mov	r2, r3
 8001f44:	f107 0318 	add.w	r3, r7, #24
 8001f48:	4976      	ldr	r1, [pc, #472]	; (8002124 <storage_f+0x264>)
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f013 f8a8 	bl	80150a0 <siprintf>
  HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 8001f50:	f107 0318 	add.w	r3, r7, #24
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe f945 	bl	80001e4 <strlen>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	f107 0118 	add.w	r1, r7, #24
 8001f62:	2364      	movs	r3, #100	; 0x64
 8001f64:	486b      	ldr	r0, [pc, #428]	; (8002114 <storage_f+0x254>)
 8001f66:	f006 f82a 	bl	8007fbe <HAL_UART_Transmit>



  disk_kbytes_left=microsd_storage.disks[microsd_storage.active_disk_indx].free_space;
 8001f6a:	4b6c      	ldr	r3, [pc, #432]	; (800211c <storage_f+0x25c>)
 8001f6c:	f893 3910 	ldrb.w	r3, [r3, #2320]	; 0x910
 8001f70:	4619      	mov	r1, r3
 8001f72:	4a6a      	ldr	r2, [pc, #424]	; (800211c <storage_f+0x25c>)
 8001f74:	f44f 7311 	mov.w	r3, #580	; 0x244
 8001f78:	fb01 f303 	mul.w	r3, r1, r3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a68      	ldr	r2, [pc, #416]	; (8002128 <storage_f+0x268>)
 8001f86:	6013      	str	r3, [r2, #0]
  if(open_new_wav_file()==F_ERR){
 8001f88:	f7ff fe8e 	bl	8001ca8 <open_new_wav_file>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d116      	bne.n	8001fc0 <storage_f+0x100>
	sprintf(info_msg,"Not enough space for start.\r");
 8001f92:	f107 0318 	add.w	r3, r7, #24
 8001f96:	4965      	ldr	r1, [pc, #404]	; (800212c <storage_f+0x26c>)
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f013 f881 	bl	80150a0 <siprintf>
	HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 8001f9e:	f107 0318 	add.w	r3, r7, #24
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe f91e 	bl	80001e4 <strlen>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	f107 0118 	add.w	r1, r7, #24
 8001fb0:	2364      	movs	r3, #100	; 0x64
 8001fb2:	4858      	ldr	r0, [pc, #352]	; (8002114 <storage_f+0x254>)
 8001fb4:	f006 f803 	bl	8007fbe <HAL_UART_Transmit>
	while(1){osDelay(1);}
 8001fb8:	2001      	movs	r0, #1
 8001fba:	f00f fdc4 	bl	8011b46 <osDelay>
 8001fbe:	e7fb      	b.n	8001fb8 <storage_f+0xf8>

  /* Infinite loop */
  for(;;)
  {

   storage_w_event = osMessageGet(storage_wHandle, osWaitForever);
 8001fc0:	4b5b      	ldr	r3, [pc, #364]	; (8002130 <storage_f+0x270>)
 8001fc2:	6819      	ldr	r1, [r3, #0]
 8001fc4:	f107 030c 	add.w	r3, r7, #12
 8001fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f00f fe37 	bl	8011c40 <osMessageGet>
   if(storage_w_event.status == osEventMessage){
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2b10      	cmp	r3, #16
 8001fd6:	d1f3      	bne.n	8001fc0 <storage_f+0x100>
	 data_ptr=(memory_region_pointer*)storage_w_event.value.v;
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	67fb      	str	r3, [r7, #124]	; 0x7c


	 if(file_bytes_left>data_ptr->size){
 8001fdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	4b54      	ldr	r3, [pc, #336]	; (8002134 <storage_f+0x274>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d22c      	bcs.n	8002042 <storage_f+0x182>
	   if(wav_file_write(&wav_file,data_ptr->start_addr,data_ptr->size)==F_OK){
 8001fe8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fea:	6819      	ldr	r1, [r3, #0]
 8001fec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4851      	ldr	r0, [pc, #324]	; (8002138 <storage_f+0x278>)
 8001ff4:	f001 f8ed 	bl	80031d2 <wav_file_write>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d107      	bne.n	800200e <storage_f+0x14e>
	      file_bytes_left-=data_ptr->size;
 8001ffe:	4b4d      	ldr	r3, [pc, #308]	; (8002134 <storage_f+0x274>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	4a4a      	ldr	r2, [pc, #296]	; (8002134 <storage_f+0x274>)
 800200a:	6013      	str	r3, [r2, #0]
 800200c:	e7d8      	b.n	8001fc0 <storage_f+0x100>
	   }
	   else{
	      wav_file_close(&wav_file);
 800200e:	484a      	ldr	r0, [pc, #296]	; (8002138 <storage_f+0x278>)
 8002010:	f001 f8ae 	bl	8003170 <wav_file_close>
	      sprintf(info_msg,"Write error.\r");
 8002014:	f107 0318 	add.w	r3, r7, #24
 8002018:	4948      	ldr	r1, [pc, #288]	; (800213c <storage_f+0x27c>)
 800201a:	4618      	mov	r0, r3
 800201c:	f013 f840 	bl	80150a0 <siprintf>
	      HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 8002020:	f107 0318 	add.w	r3, r7, #24
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe f8dd 	bl	80001e4 <strlen>
 800202a:	4603      	mov	r3, r0
 800202c:	b29a      	uxth	r2, r3
 800202e:	f107 0118 	add.w	r1, r7, #24
 8002032:	2364      	movs	r3, #100	; 0x64
 8002034:	4837      	ldr	r0, [pc, #220]	; (8002114 <storage_f+0x254>)
 8002036:	f005 ffc2 	bl	8007fbe <HAL_UART_Transmit>
	      while(1){osDelay(1);}
 800203a:	2001      	movs	r0, #1
 800203c:	f00f fd83 	bl	8011b46 <osDelay>
 8002040:	e7fb      	b.n	800203a <storage_f+0x17a>
	   }
	 }
	 else{
		wav_file_close(&wav_file);
 8002042:	483d      	ldr	r0, [pc, #244]	; (8002138 <storage_f+0x278>)
 8002044:	f001 f894 	bl	8003170 <wav_file_close>
		if(open_new_wav_file()!=F_OK){
 8002048:	f7ff fe2e 	bl	8001ca8 <open_new_wav_file>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d030      	beq.n	80020b4 <storage_f+0x1f4>
		  do{
				if(sd_storage_set_next_disk(&microsd_storage)!=F_OK){
 8002052:	4832      	ldr	r0, [pc, #200]	; (800211c <storage_f+0x25c>)
 8002054:	f7ff f80c 	bl	8001070 <sd_storage_set_next_disk>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d016      	beq.n	800208c <storage_f+0x1cc>
	        		sprintf(info_msg,"End of storage reached.\r");
 800205e:	f107 0318 	add.w	r3, r7, #24
 8002062:	4937      	ldr	r1, [pc, #220]	; (8002140 <storage_f+0x280>)
 8002064:	4618      	mov	r0, r3
 8002066:	f013 f81b 	bl	80150a0 <siprintf>
		        	HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 800206a:	f107 0318 	add.w	r3, r7, #24
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe f8b8 	bl	80001e4 <strlen>
 8002074:	4603      	mov	r3, r0
 8002076:	b29a      	uxth	r2, r3
 8002078:	f107 0118 	add.w	r1, r7, #24
 800207c:	2364      	movs	r3, #100	; 0x64
 800207e:	4825      	ldr	r0, [pc, #148]	; (8002114 <storage_f+0x254>)
 8002080:	f005 ff9d 	bl	8007fbe <HAL_UART_Transmit>
		        	while(1){osDelay(1);}
 8002084:	2001      	movs	r0, #1
 8002086:	f00f fd5e 	bl	8011b46 <osDelay>
 800208a:	e7fb      	b.n	8002084 <storage_f+0x1c4>
				}
				disk_kbytes_left=microsd_storage.disks[microsd_storage.active_disk_indx].free_space;
 800208c:	4b23      	ldr	r3, [pc, #140]	; (800211c <storage_f+0x25c>)
 800208e:	f893 3910 	ldrb.w	r3, [r3, #2320]	; 0x910
 8002092:	4619      	mov	r1, r3
 8002094:	4a21      	ldr	r2, [pc, #132]	; (800211c <storage_f+0x25c>)
 8002096:	f44f 7311 	mov.w	r3, #580	; 0x244
 800209a:	fb01 f303 	mul.w	r3, r1, r3
 800209e:	4413      	add	r3, r2
 80020a0:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a20      	ldr	r2, [pc, #128]	; (8002128 <storage_f+0x268>)
 80020a8:	6013      	str	r3, [r2, #0]
		   }while(open_new_wav_file()!=F_OK);
 80020aa:	f7ff fdfd 	bl	8001ca8 <open_new_wav_file>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1ce      	bne.n	8002052 <storage_f+0x192>
	   	 }
		 if(wav_file_write(&wav_file,data_ptr->start_addr,data_ptr->size)==F_OK){
 80020b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020b6:	6819      	ldr	r1, [r3, #0]
 80020b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	461a      	mov	r2, r3
 80020be:	481e      	ldr	r0, [pc, #120]	; (8002138 <storage_f+0x278>)
 80020c0:	f001 f887 	bl	80031d2 <wav_file_write>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d107      	bne.n	80020da <storage_f+0x21a>
			 file_bytes_left-=data_ptr->size;
 80020ca:	4b1a      	ldr	r3, [pc, #104]	; (8002134 <storage_f+0x274>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	4a17      	ldr	r2, [pc, #92]	; (8002134 <storage_f+0x274>)
 80020d6:	6013      	str	r3, [r2, #0]
 80020d8:	e772      	b.n	8001fc0 <storage_f+0x100>

	     }
		 else{
			 wav_file_close(&wav_file);
 80020da:	4817      	ldr	r0, [pc, #92]	; (8002138 <storage_f+0x278>)
 80020dc:	f001 f848 	bl	8003170 <wav_file_close>
		     sprintf(info_msg,"Write error.\r");
 80020e0:	f107 0318 	add.w	r3, r7, #24
 80020e4:	4915      	ldr	r1, [pc, #84]	; (800213c <storage_f+0x27c>)
 80020e6:	4618      	mov	r0, r3
 80020e8:	f012 ffda 	bl	80150a0 <siprintf>
		     HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 80020ec:	f107 0318 	add.w	r3, r7, #24
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe f877 	bl	80001e4 <strlen>
 80020f6:	4603      	mov	r3, r0
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	f107 0118 	add.w	r1, r7, #24
 80020fe:	2364      	movs	r3, #100	; 0x64
 8002100:	4804      	ldr	r0, [pc, #16]	; (8002114 <storage_f+0x254>)
 8002102:	f005 ff5c 	bl	8007fbe <HAL_UART_Transmit>
		     while(1){osDelay(1);}
 8002106:	2001      	movs	r0, #1
 8002108:	f00f fd1d 	bl	8011b46 <osDelay>
 800210c:	e7fb      	b.n	8002106 <storage_f+0x246>
 800210e:	bf00      	nop
 8002110:	08017338 	.word	0x08017338
 8002114:	20000954 	.word	0x20000954
 8002118:	40020000 	.word	0x40020000
 800211c:	20000e9c 	.word	0x20000e9c
 8002120:	40020800 	.word	0x40020800
 8002124:	08017354 	.word	0x08017354
 8002128:	20001b78 	.word	0x20001b78
 800212c:	08017368 	.word	0x08017368
 8002130:	200009b4 	.word	0x200009b4
 8002134:	20001b74 	.word	0x20001b74
 8002138:	200017b8 	.word	0x200017b8
 800213c:	08017388 	.word	0x08017388
 8002140:	08017398 	.word	0x08017398

08002144 <icListen_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_icListen_f */
void icListen_f(void const * argument)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b0a0      	sub	sp, #128	; 0x80
 8002148:	af00      	add	r7, sp, #0
 800214a:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN icListen_f */
  /* Infinite loop */
  uint8_t msg_type;
  memory_region_pointer* usb_tx_msg_ptr;
  memory_region_pointer  parsed_data_ptr[10];
  uint8_t                parsed_data_ptr_index=0;
 800214c:	2300      	movs	r3, #0
 800214e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  osEvent event;

  while(system_status!=SYSTEM_READY) {osDelay(1);}
 8002152:	e002      	b.n	800215a <icListen_f+0x16>
 8002154:	2001      	movs	r0, #1
 8002156:	f00f fcf6 	bl	8011b46 <osDelay>
 800215a:	4b49      	ldr	r3, [pc, #292]	; (8002280 <icListen_f+0x13c>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b0a      	cmp	r3, #10
 8002160:	d1f8      	bne.n	8002154 <icListen_f+0x10>
  icListen_init_sensor_status(&icListen);
 8002162:	4848      	ldr	r0, [pc, #288]	; (8002284 <icListen_f+0x140>)
 8002164:	f7fe ffc8 	bl	80010f8 <icListen_init_sensor_status>
  icListen.settings=(icListen_settings_typedef*)mcu_flash.data.raw_data;
 8002168:	4b46      	ldr	r3, [pc, #280]	; (8002284 <icListen_f+0x140>)
 800216a:	4a47      	ldr	r2, [pc, #284]	; (8002288 <icListen_f+0x144>)
 800216c:	621a      	str	r2, [r3, #32]
  icListen_prepare_messages(&icListen);
 800216e:	4845      	ldr	r0, [pc, #276]	; (8002284 <icListen_f+0x140>)
 8002170:	f7ff fd62 	bl	8001c38 <icListen_prepare_messages>
  icListen.delay_time=((3000*1000)/((icListen.settings->wav_sample_bit_depth/8)*icListen.settings->wav_sample_rate))/2;
 8002174:	4b43      	ldr	r3, [pc, #268]	; (8002284 <icListen_f+0x140>)
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	08db      	lsrs	r3, r3, #3
 800217c:	4a41      	ldr	r2, [pc, #260]	; (8002284 <icListen_f+0x140>)
 800217e:	6a12      	ldr	r2, [r2, #32]
 8002180:	6812      	ldr	r2, [r2, #0]
 8002182:	fb02 f303 	mul.w	r3, r2, r3
 8002186:	4a41      	ldr	r2, [pc, #260]	; (800228c <icListen_f+0x148>)
 8002188:	fbb2 f3f3 	udiv	r3, r2, r3
 800218c:	b29a      	uxth	r2, r3
 800218e:	4b3d      	ldr	r3, [pc, #244]	; (8002284 <icListen_f+0x140>)
 8002190:	861a      	strh	r2, [r3, #48]	; 0x30


  /* Infinite loop */
  for(;;)
  {
	   event = osMessageGet(USB_txHandle, osWaitForever);
 8002192:	4b3f      	ldr	r3, [pc, #252]	; (8002290 <icListen_f+0x14c>)
 8002194:	6819      	ldr	r1, [r3, #0]
 8002196:	f107 0318 	add.w	r3, r7, #24
 800219a:	f04f 32ff 	mov.w	r2, #4294967295
 800219e:	4618      	mov	r0, r3
 80021a0:	f00f fd4e 	bl	8011c40 <osMessageGet>
	   if(icListen.status==ICLISTEN_CONNECTED){
 80021a4:	4b37      	ldr	r3, [pc, #220]	; (8002284 <icListen_f+0x140>)
 80021a6:	7f5b      	ldrb	r3, [r3, #29]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f2      	bne.n	8002192 <icListen_f+0x4e>
		if(event.status == osEventMessage){
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	2b10      	cmp	r3, #16
 80021b0:	d109      	bne.n	80021c6 <icListen_f+0x82>
		   usb_tx_msg_ptr=(memory_region_pointer*)event.value.v;
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	67bb      	str	r3, [r7, #120]	; 0x78
		   USB_transmit_msg(usb_tx_msg_ptr->start_addr,usb_tx_msg_ptr->size);
 80021b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	4619      	mov	r1, r3
 80021c0:	4610      	mov	r0, r2
 80021c2:	f011 feeb 	bl	8013f9c <USB_transmit_msg>
		}

		event = osMessageGet(USB_rxHandle, 20);
 80021c6:	4b33      	ldr	r3, [pc, #204]	; (8002294 <icListen_f+0x150>)
 80021c8:	6819      	ldr	r1, [r3, #0]
 80021ca:	463b      	mov	r3, r7
 80021cc:	2214      	movs	r2, #20
 80021ce:	4618      	mov	r0, r3
 80021d0:	f00f fd36 	bl	8011c40 <osMessageGet>
 80021d4:	f107 0318 	add.w	r3, r7, #24
 80021d8:	463a      	mov	r2, r7
 80021da:	ca07      	ldmia	r2, {r0, r1, r2}
 80021dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		if(event.status == osEventMessage){
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	2b10      	cmp	r3, #16
 80021e4:	d1d5      	bne.n	8002192 <icListen_f+0x4e>

		   if(icListen_parse_msg((uint8_t*)event.value.v,&icListen,&msg_type,&parsed_data_ptr[parsed_data_ptr_index])==F_OK)
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80021ee:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4413      	add	r3, r2
 80021f6:	f107 0277 	add.w	r2, r7, #119	; 0x77
 80021fa:	4922      	ldr	r1, [pc, #136]	; (8002284 <icListen_f+0x140>)
 80021fc:	f7ff f943 	bl	8001486 <icListen_parse_msg>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1c5      	bne.n	8002192 <icListen_f+0x4e>
		   {
			   if(msg_type==MSG_TYPE_COLLECT_DATA){
 8002206:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800220a:	2b43      	cmp	r3, #67	; 0x43
 800220c:	d1c1      	bne.n	8002192 <icListen_f+0x4e>
			     if(parsed_data_ptr[parsed_data_ptr_index].size>7){
 800220e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	3380      	adds	r3, #128	; 0x80
 8002216:	443b      	add	r3, r7
 8002218:	f853 3c58 	ldr.w	r3, [r3, #-88]
 800221c:	2b07      	cmp	r3, #7
 800221e:	d91d      	bls.n	800225c <icListen_f+0x118>
				  osMessagePut(storage_wHandle,(uint32_t)&parsed_data_ptr[parsed_data_ptr_index],0);
 8002220:	4b1d      	ldr	r3, [pc, #116]	; (8002298 <icListen_f+0x154>)
 8002222:	6818      	ldr	r0, [r3, #0]
 8002224:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002228:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	4413      	add	r3, r2
 8002230:	2200      	movs	r2, #0
 8002232:	4619      	mov	r1, r3
 8002234:	f00f fcc4 	bl	8011bc0 <osMessagePut>
				  parsed_data_ptr_index++;
 8002238:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800223c:	3301      	adds	r3, #1
 800223e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				  parsed_data_ptr_index%=10;
 8002242:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8002246:	4b15      	ldr	r3, [pc, #84]	; (800229c <icListen_f+0x158>)
 8002248:	fba3 1302 	umull	r1, r3, r3, r2
 800224c:	08d9      	lsrs	r1, r3, #3
 800224e:	460b      	mov	r3, r1
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	440b      	add	r3, r1
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			     }
			     if(icListen.delay_time>0) osDelay(icListen.delay_time);
 800225c:	4b09      	ldr	r3, [pc, #36]	; (8002284 <icListen_f+0x140>)
 800225e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002260:	2b00      	cmp	r3, #0
 8002262:	d004      	beq.n	800226e <icListen_f+0x12a>
 8002264:	4b07      	ldr	r3, [pc, #28]	; (8002284 <icListen_f+0x140>)
 8002266:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002268:	4618      	mov	r0, r3
 800226a:	f00f fc6c 	bl	8011b46 <osDelay>
				 osMessagePut(USB_txHandle,(uint32_t)&collect_msg_ptr, 0);
 800226e:	4b08      	ldr	r3, [pc, #32]	; (8002290 <icListen_f+0x14c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	490b      	ldr	r1, [pc, #44]	; (80022a0 <icListen_f+0x15c>)
 8002274:	2200      	movs	r2, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f00f fca2 	bl	8011bc0 <osMessagePut>
	   event = osMessageGet(USB_txHandle, osWaitForever);
 800227c:	e789      	b.n	8002192 <icListen_f+0x4e>
 800227e:	bf00      	nop
 8002280:	20001b70 	.word	0x20001b70
 8002284:	20000800 	.word	0x20000800
 8002288:	20000e84 	.word	0x20000e84
 800228c:	0016e360 	.word	0x0016e360
 8002290:	200009b0 	.word	0x200009b0
 8002294:	200009ac 	.word	0x200009ac
 8002298:	200009b4 	.word	0x200009b4
 800229c:	cccccccd 	.word	0xcccccccd
 80022a0:	200009e8 	.word	0x200009e8

080022a4 <uart_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart_f */
void uart_f(void const * argument)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uart_f */
  uint8_t tmp;
  while(system_status!=SYSTEM_READY) {osDelay(1);}
 80022ac:	e002      	b.n	80022b4 <uart_f+0x10>
 80022ae:	2001      	movs	r0, #1
 80022b0:	f00f fc49 	bl	8011b46 <osDelay>
 80022b4:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <uart_f+0x54>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b0a      	cmp	r3, #10
 80022ba:	d1f8      	bne.n	80022ae <uart_f+0xa>
  user_interface.media_status=UI_MEDIA_READY;
 80022bc:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <uart_f+0x58>)
 80022be:	220a      	movs	r2, #10
 80022c0:	735a      	strb	r2, [r3, #13]
  /* Infinite loop */

  for(;;)
  {
   if(UI_UART.gState!=HAL_UART_STATE_BUSY_TX)
 80022c2:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <uart_f+0x5c>)
 80022c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b21      	cmp	r3, #33	; 0x21
 80022cc:	d00f      	beq.n	80022ee <uart_f+0x4a>
   {
 	if(UI_media_get_byte(&user_interface,&tmp)==UI_F_OK) HAL_UART_Transmit_IT(&UI_UART,&tmp,1);
 80022ce:	f107 030f 	add.w	r3, r7, #15
 80022d2:	4619      	mov	r1, r3
 80022d4:	4809      	ldr	r0, [pc, #36]	; (80022fc <uart_f+0x58>)
 80022d6:	f7fe fa4d 	bl	8000774 <UI_media_get_byte>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d106      	bne.n	80022ee <uart_f+0x4a>
 80022e0:	f107 030f 	add.w	r3, r7, #15
 80022e4:	2201      	movs	r2, #1
 80022e6:	4619      	mov	r1, r3
 80022e8:	4805      	ldr	r0, [pc, #20]	; (8002300 <uart_f+0x5c>)
 80022ea:	f005 fefa 	bl	80080e2 <HAL_UART_Transmit_IT>
   }
   osDelay(1);
 80022ee:	2001      	movs	r0, #1
 80022f0:	f00f fc29 	bl	8011b46 <osDelay>
   if(UI_UART.gState!=HAL_UART_STATE_BUSY_TX)
 80022f4:	e7e5      	b.n	80022c2 <uart_f+0x1e>
 80022f6:	bf00      	nop
 80022f8:	20001b70 	.word	0x20001b70
 80022fc:	20000a64 	.word	0x20000a64
 8002300:	20000954 	.word	0x20000954

08002304 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a04      	ldr	r2, [pc, #16]	; (8002324 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d101      	bne.n	800231a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002316:	f000 ffcb 	bl	80032b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40010000 	.word	0x40010000

08002328 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800232c:	b672      	cpsid	i
}
 800232e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002330:	e7fe      	b.n	8002330 <Error_Handler+0x8>
	...

08002334 <mcu_flash_init>:
#if defined(STM32F205xx)  //KB
uint32_t  flash_block_size[]={16,16,16,16,64,128,128,128,128,128,128,128};
#endif

void mcu_flash_init(mcu_flash_typedef* mcu_flash_obj,uint32_t first_block)
{
 8002334:	b480      	push	{r7}
 8002336:	b087      	sub	sp, #28
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
	uint32_t temp=0;
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
	int32_t temp2=0;
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
	if(first_block<FLASH_NUM_OF_BLOCKS){
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2b0b      	cmp	r3, #11
 800234a:	d83d      	bhi.n	80023c8 <mcu_flash_init+0x94>
      mcu_flash_obj->first_block_num=first_block;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	605a      	str	r2, [r3, #4]
      for(int i=0;i<first_block;i++) temp+=flash_block_size[i];
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	e009      	b.n	800236c <mcu_flash_init+0x38>
 8002358:	4a1e      	ldr	r2, [pc, #120]	; (80023d4 <mcu_flash_init+0xa0>)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	4413      	add	r3, r2
 8002364:	617b      	str	r3, [r7, #20]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	3301      	adds	r3, #1
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d8f1      	bhi.n	8002358 <mcu_flash_init+0x24>
	  mcu_flash_obj->first_block_addr=FLASH_BASE+(temp*1024);
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800237a:	029a      	lsls	r2, r3, #10
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	601a      	str	r2, [r3, #0]

	  temp2=FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE;
 8002380:	2316      	movs	r3, #22
 8002382:	613b      	str	r3, [r7, #16]
	  mcu_flash_obj->num_of_blocks=0;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	721a      	strb	r2, [r3, #8]
 800238a:	2200      	movs	r2, #0
 800238c:	725a      	strb	r2, [r3, #9]
 800238e:	2200      	movs	r2, #0
 8002390:	729a      	strb	r2, [r3, #10]
 8002392:	2200      	movs	r2, #0
 8002394:	72da      	strb	r2, [r3, #11]
	  for(int i=mcu_flash_obj->first_block_num;i<FLASH_NUM_OF_BLOCKS&&temp2>0;i++) {
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	60bb      	str	r3, [r7, #8]
 800239c:	e00e      	b.n	80023bc <mcu_flash_init+0x88>
		  temp2-=flash_block_size[i];
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	490c      	ldr	r1, [pc, #48]	; (80023d4 <mcu_flash_init+0xa0>)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	613b      	str	r3, [r7, #16]
		  mcu_flash_obj->num_of_blocks++;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	609a      	str	r2, [r3, #8]
	  for(int i=mcu_flash_obj->first_block_num;i<FLASH_NUM_OF_BLOCKS&&temp2>0;i++) {
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	3301      	adds	r3, #1
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2b0b      	cmp	r3, #11
 80023c0:	dc02      	bgt.n	80023c8 <mcu_flash_init+0x94>
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	dcea      	bgt.n	800239e <mcu_flash_init+0x6a>
	  }
	}
}
 80023c8:	bf00      	nop
 80023ca:	371c      	adds	r7, #28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	20000200 	.word	0x20000200

080023d8 <mcu_flash_read>:

F_RES mcu_flash_read(mcu_flash_typedef* mcu_flash_obj)
{
 80023d8:	b590      	push	{r4, r7, lr}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
	 memcpy((uint8_t*)&(mcu_flash_obj->data),(uint8_t*)mcu_flash_obj->first_block_addr,FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f103 000c 	add.w	r0, r3, #12
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2216      	movs	r2, #22
 80023ec:	4619      	mov	r1, r3
 80023ee:	f012 fa75 	bl	80148dc <memcpy>
	 if(mcu_flash_obj->data.crc==get_crc16_arc(mcu_flash_obj->data.raw_data,FLASH_DATA_SIZE)){
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	8c1b      	ldrh	r3, [r3, #32]
 80023f6:	b29c      	uxth	r4, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	330c      	adds	r3, #12
 80023fc:	2114      	movs	r1, #20
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe fd20 	bl	8000e44 <get_crc16_arc>
 8002404:	4603      	mov	r3, r0
 8002406:	429c      	cmp	r4, r3
 8002408:	d101      	bne.n	800240e <mcu_flash_read+0x36>
		 return F_OK;
 800240a:	2300      	movs	r3, #0
 800240c:	e000      	b.n	8002410 <mcu_flash_read+0x38>
	 }
	 else{
		 return F_ERR;
 800240e:	2301      	movs	r3, #1
	 }

}
 8002410:	4618      	mov	r0, r3
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	bd90      	pop	{r4, r7, pc}

08002418 <mcu_flash_save>:
void mcu_flash_save(mcu_flash_typedef* mcu_flash_obj)
{
 8002418:	b5b0      	push	{r4, r5, r7, lr}
 800241a:	b08c      	sub	sp, #48	; 0x30
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
	uint32_t i=0;
 8002420:	2300      	movs	r3, #0
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t tmp;
	uint32_t pgerr = 0;
 8002424:	2300      	movs	r3, #0
 8002426:	623b      	str	r3, [r7, #32]
	uint8_t* data=(uint8_t*)&mcu_flash_obj->data;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	330c      	adds	r3, #12
 800242c:	627b      	str	r3, [r7, #36]	; 0x24

	mcu_flash_obj->data.crc=get_crc16_arc(mcu_flash_obj->data.raw_data,FLASH_DATA_SIZE);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	330c      	adds	r3, #12
 8002432:	2114      	movs	r1, #20
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe fd05 	bl	8000e44 <get_crc16_arc>
 800243a:	4603      	mov	r3, r0
 800243c:	461a      	mov	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	841a      	strh	r2, [r3, #32]

    HAL_FLASH_Unlock();
 8002442:	f001 fc2b 	bl	8003c9c <HAL_FLASH_Unlock>
    #if defined(STM32F405xx)
	FLASH_EraseInitTypeDef erase_info = {
 8002446:	f107 030c 	add.w	r3, r7, #12
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	609a      	str	r2, [r3, #8]
 8002452:	60da      	str	r2, [r3, #12]
 8002454:	611a      	str	r2, [r3, #16]
		.TypeErase = FLASH_TYPEERASE_SECTORS,
		.Sector = mcu_flash_obj->first_block_num,
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
	FLASH_EraseInitTypeDef erase_info = {
 800245a:	617b      	str	r3, [r7, #20]
		.NbSectors = mcu_flash_obj->num_of_blocks,
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
	FLASH_EraseInitTypeDef erase_info = {
 8002460:	61bb      	str	r3, [r7, #24]
	.NbPages = mcu_flash_obj->num_of_blocks,
    };
    #endif


	HAL_FLASHEx_Erase(&erase_info, &pgerr);
 8002462:	f107 0220 	add.w	r2, r7, #32
 8002466:	f107 030c 	add.w	r3, r7, #12
 800246a:	4611      	mov	r1, r2
 800246c:	4618      	mov	r0, r3
 800246e:	f001 fd77 	bl	8003f60 <HAL_FLASHEx_Erase>

	if(pgerr != 0xFFFFFFFFul)
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002478:	d027      	beq.n	80024ca <mcu_flash_save+0xb2>
	{
		HAL_FLASH_Lock();
 800247a:	f001 fc31 	bl	8003ce0 <HAL_FLASH_Lock>
 800247e:	e029      	b.n	80024d4 <mcu_flash_save+0xbc>
		return ;
	}

	while(i<(FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE))
	{
        tmp=(tmp&0x0000)|(data[i]&0x00FF);
 8002480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002484:	4413      	add	r3, r2
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	857b      	strh	r3, [r7, #42]	; 0x2a
		if((i+1)<(FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE)) tmp=tmp|(data[i+1]<<8&0xFF00);
 800248a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248c:	3301      	adds	r3, #1
 800248e:	2b15      	cmp	r3, #21
 8002490:	d80b      	bhi.n	80024aa <mcu_flash_save+0x92>
 8002492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002494:	3301      	adds	r3, #1
 8002496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002498:	4413      	add	r3, r2
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	021b      	lsls	r3, r3, #8
 800249e:	b21a      	sxth	r2, r3
 80024a0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80024a4:	4313      	orrs	r3, r2
 80024a6:	b21b      	sxth	r3, r3
 80024a8:	857b      	strh	r3, [r7, #42]	; 0x2a
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,mcu_flash_obj->first_block_addr+i,tmp);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b0:	18d1      	adds	r1, r2, r3
 80024b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024b4:	2200      	movs	r2, #0
 80024b6:	461c      	mov	r4, r3
 80024b8:	4615      	mov	r5, r2
 80024ba:	4622      	mov	r2, r4
 80024bc:	462b      	mov	r3, r5
 80024be:	2001      	movs	r0, #1
 80024c0:	f001 fb98 	bl	8003bf4 <HAL_FLASH_Program>
		i=i+2;
 80024c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c6:	3302      	adds	r3, #2
 80024c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(i<(FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE))
 80024ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024cc:	2b15      	cmp	r3, #21
 80024ce:	d9d7      	bls.n	8002480 <mcu_flash_save+0x68>
	}

	HAL_FLASH_Lock();
 80024d0:	f001 fc06 	bl	8003ce0 <HAL_FLASH_Lock>
}
 80024d4:	3730      	adds	r7, #48	; 0x30
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080024dc <read_time>:

extern RTC_HandleTypeDef hrtc;
rtc_typedef rtc;

time_t read_time(rtc_typedef* self_object)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08c      	sub	sp, #48	; 0x30
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
	struct tm currTime;
	HAL_RTC_GetTime(&hrtc, &self_object->time, RTC_FORMAT_BIN);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	4619      	mov	r1, r3
 80024ea:	4818      	ldr	r0, [pc, #96]	; (800254c <read_time+0x70>)
 80024ec:	f004 fa96 	bl	8006a1c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &self_object->date, RTC_FORMAT_BIN);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3314      	adds	r3, #20
 80024f4:	2200      	movs	r2, #0
 80024f6:	4619      	mov	r1, r3
 80024f8:	4814      	ldr	r0, [pc, #80]	; (800254c <read_time+0x70>)
 80024fa:	f004 fb71 	bl	8006be0 <HAL_RTC_GetDate>
	currTime.tm_hour=self_object->time.Hours;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	617b      	str	r3, [r7, #20]
	currTime.tm_min=self_object->time.Minutes;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	785b      	ldrb	r3, [r3, #1]
 8002508:	613b      	str	r3, [r7, #16]
	currTime.tm_sec=self_object->time.Seconds;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	789b      	ldrb	r3, [r3, #2]
 800250e:	60fb      	str	r3, [r7, #12]
	currTime.tm_mday=self_object->date.Date;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	7d9b      	ldrb	r3, [r3, #22]
 8002514:	61bb      	str	r3, [r7, #24]
	currTime.tm_mon=self_object->date.Month-1;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	7d5b      	ldrb	r3, [r3, #21]
 800251a:	3b01      	subs	r3, #1
 800251c:	61fb      	str	r3, [r7, #28]
	currTime.tm_year=(2000+self_object->date.Year)-1900;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	7ddb      	ldrb	r3, [r3, #23]
 8002522:	3364      	adds	r3, #100	; 0x64
 8002524:	623b      	str	r3, [r7, #32]
	self_object->timestamp=mktime(&currTime);
 8002526:	f107 030c 	add.w	r3, r7, #12
 800252a:	4618      	mov	r0, r3
 800252c:	f012 fac4 	bl	8014ab8 <mktime>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	e9c1 2306 	strd	r2, r3, [r1, #24]
	return self_object->timestamp;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
}
 8002540:	4610      	mov	r0, r2
 8002542:	4619      	mov	r1, r3
 8002544:	3730      	adds	r7, #48	; 0x30
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000834 	.word	0x20000834

08002550 <set_time>:

time_t set_time(rtc_typedef* self_object)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetTime(&hrtc, &self_object->time, RTC_FORMAT_BIN);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	4619      	mov	r1, r3
 800255e:	4808      	ldr	r0, [pc, #32]	; (8002580 <set_time+0x30>)
 8002560:	f004 f9c2 	bl	80068e8 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &self_object->date, RTC_FORMAT_BIN);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3314      	adds	r3, #20
 8002568:	2200      	movs	r2, #0
 800256a:	4619      	mov	r1, r3
 800256c:	4804      	ldr	r0, [pc, #16]	; (8002580 <set_time+0x30>)
 800256e:	f004 fab3 	bl	8006ad8 <HAL_RTC_SetDate>
}
 8002572:	bf00      	nop
 8002574:	4610      	mov	r0, r2
 8002576:	4619      	mov	r1, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000834 	.word	0x20000834

08002584 <sd_ss_set_active>:
extern volatile uint16_t htim2;

uint8_t spi_rx_buffer[512];

void sd_ss_set_active(uint8_t drv)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	71fb      	strb	r3, [r7, #7]
  active_sd_ss_pin=sd_cards_ss[drv].sd_ss_pin;
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	4a08      	ldr	r2, [pc, #32]	; (80025b4 <sd_ss_set_active+0x30>)
 8002592:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 8002596:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <sd_ss_set_active+0x34>)
 8002598:	801a      	strh	r2, [r3, #0]
  active_sd_ss_port=sd_cards_ss[drv].sd_ss_port;
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	4a05      	ldr	r2, [pc, #20]	; (80025b4 <sd_ss_set_active+0x30>)
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4413      	add	r3, r2
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	4a05      	ldr	r2, [pc, #20]	; (80025bc <sd_ss_set_active+0x38>)
 80025a6:	6013      	str	r3, [r2, #0]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	20001bb0 	.word	0x20001bb0
 80025b8:	20001baa 	.word	0x20001baa
 80025bc:	20001bac 	.word	0x20001bac

080025c0 <sd_ss_active_pin_down>:

void sd_ss_active_pin_down()
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(active_sd_ss_port, active_sd_ss_pin, GPIO_PIN_RESET);
 80025c4:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <sd_ss_active_pin_down+0x18>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a04      	ldr	r2, [pc, #16]	; (80025dc <sd_ss_active_pin_down+0x1c>)
 80025ca:	8811      	ldrh	r1, [r2, #0]
 80025cc:	2200      	movs	r2, #0
 80025ce:	4618      	mov	r0, r3
 80025d0:	f001 ff84 	bl	80044dc <HAL_GPIO_WritePin>
}
 80025d4:	bf00      	nop
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20001bac 	.word	0x20001bac
 80025dc:	20001baa 	.word	0x20001baa

080025e0 <sd_ss_active_pin_up>:
void sd_ss_active_pin_up()
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(active_sd_ss_port, active_sd_ss_pin, GPIO_PIN_SET);
 80025e4:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <sd_ss_active_pin_up+0x18>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a04      	ldr	r2, [pc, #16]	; (80025fc <sd_ss_active_pin_up+0x1c>)
 80025ea:	8811      	ldrh	r1, [r2, #0]
 80025ec:	2201      	movs	r2, #1
 80025ee:	4618      	mov	r0, r3
 80025f0:	f001 ff74 	bl	80044dc <HAL_GPIO_WritePin>
}
 80025f4:	bf00      	nop
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20001bac 	.word	0x20001bac
 80025fc:	20001baa 	.word	0x20001baa

08002600 <SD_cmd>:



//-----------------------------------------------
static uint8_t SD_cmd (uint8_t cmd, uint32_t arg)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	6039      	str	r1, [r7, #0]
 800260a:	71fb      	strb	r3, [r7, #7]
  uint8_t n, res;
  // ACMD<n> is the command sequense of CMD55-CMD<n>
  if (cmd & 0x80)
 800260c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002610:	2b00      	cmp	r3, #0
 8002612:	da0e      	bge.n	8002632 <SD_cmd+0x32>
  {
    cmd &= 0x7F;
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800261a:	71fb      	strb	r3, [r7, #7]
    res = SD_cmd(CMD55, 0);
 800261c:	2100      	movs	r1, #0
 800261e:	2077      	movs	r0, #119	; 0x77
 8002620:	f7ff ffee 	bl	8002600 <SD_cmd>
 8002624:	4603      	mov	r3, r0
 8002626:	73bb      	strb	r3, [r7, #14]
    if (res > 1) return res;
 8002628:	7bbb      	ldrb	r3, [r7, #14]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d901      	bls.n	8002632 <SD_cmd+0x32>
 800262e:	7bbb      	ldrb	r3, [r7, #14]
 8002630:	e043      	b.n	80026ba <SD_cmd+0xba>
  }
  // Select the card
  SS_SD_DESELECT();
 8002632:	f7ff ffd5 	bl	80025e0 <sd_ss_active_pin_up>
  SPI_ReceiveByte();
 8002636:	f000 f96a 	bl	800290e <SPI_ReceiveByte>

  SS_SD_SELECT();
 800263a:	f7ff ffc1 	bl	80025c0 <sd_ss_active_pin_down>
  SPI_ReceiveByte();
 800263e:	f000 f966 	bl	800290e <SPI_ReceiveByte>
  // Send a command packet
  SPI_SendByte(cmd); // Start + Command index
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	4618      	mov	r0, r3
 8002646:	f000 f955 	bl	80028f4 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 24)); // Argument[31..24]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	0e1b      	lsrs	r3, r3, #24
 800264e:	b2db      	uxtb	r3, r3
 8002650:	4618      	mov	r0, r3
 8002652:	f000 f94f 	bl	80028f4 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 16)); // Argument[23..16]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	0c1b      	lsrs	r3, r3, #16
 800265a:	b2db      	uxtb	r3, r3
 800265c:	4618      	mov	r0, r3
 800265e:	f000 f949 	bl	80028f4 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 8)); // Argument[15..8]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	0a1b      	lsrs	r3, r3, #8
 8002666:	b2db      	uxtb	r3, r3
 8002668:	4618      	mov	r0, r3
 800266a:	f000 f943 	bl	80028f4 <SPI_SendByte>
  SPI_SendByte((uint8_t)arg); // Argument[7..0]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	4618      	mov	r0, r3
 8002674:	f000 f93e 	bl	80028f4 <SPI_SendByte>

  n = 0x01; // Dummy CRC + Stop
 8002678:	2301      	movs	r3, #1
 800267a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0) {n = 0x95;} // Valid CRC for CMD0(0)
 800267c:	79fb      	ldrb	r3, [r7, #7]
 800267e:	2b40      	cmp	r3, #64	; 0x40
 8002680:	d101      	bne.n	8002686 <SD_cmd+0x86>
 8002682:	2395      	movs	r3, #149	; 0x95
 8002684:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD8) {n = 0x87;} // Valid CRC for CMD8(0x1AA)
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	2b48      	cmp	r3, #72	; 0x48
 800268a:	d101      	bne.n	8002690 <SD_cmd+0x90>
 800268c:	2387      	movs	r3, #135	; 0x87
 800268e:	73fb      	strb	r3, [r7, #15]
  SPI_SendByte(n);
 8002690:	7bfb      	ldrb	r3, [r7, #15]
 8002692:	4618      	mov	r0, r3
 8002694:	f000 f92e 	bl	80028f4 <SPI_SendByte>
  // Receive a command response
  n = 10; // Wait for a valid response in timeout of 10 attempts
 8002698:	230a      	movs	r3, #10
 800269a:	73fb      	strb	r3, [r7, #15]
  do {
    res = SPI_ReceiveByte();
 800269c:	f000 f937 	bl	800290e <SPI_ReceiveByte>
 80026a0:	4603      	mov	r3, r0
 80026a2:	73bb      	strb	r3, [r7, #14]
  } while ((res & 0x80) && --n);
 80026a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	da05      	bge.n	80026b8 <SD_cmd+0xb8>
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	73fb      	strb	r3, [r7, #15]
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1f1      	bne.n	800269c <SD_cmd+0x9c>
  return res;
 80026b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <sd_ini>:

uint8_t sd_ini(void)
{
 80026c4:	b590      	push	{r4, r7, lr}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
	  uint8_t i, cmd;;
	  uint8_t ocr[4];
	  int16_t tmr;
	  uint32_t temp;
	  //LD_OFF;
	  sdinfo.type = 0;
 80026ca:	4b57      	ldr	r3, [pc, #348]	; (8002828 <sd_ini+0x164>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	701a      	strb	r2, [r3, #0]

	  hspi1.Init.BaudRatePrescaler = temp;
	  HAL_SPI_Init(&hspi1);
	  */

	  SS_SD_SELECT();
 80026d0:	f7ff ff76 	bl	80025c0 <sd_ss_active_pin_down>
	  if (SD_cmd(CMD0, 0) == 1) // Enter Idle state
 80026d4:	2100      	movs	r1, #0
 80026d6:	2040      	movs	r0, #64	; 0x40
 80026d8:	f7ff ff92 	bl	8002600 <SD_cmd>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b01      	cmp	r3, #1
 80026e0:	f040 809a 	bne.w	8002818 <sd_ini+0x154>
	  {
		  SPI_Release();
 80026e4:	f000 f920 	bl	8002928 <SPI_Release>
		  if (SD_cmd(CMD8, 0x1AA) == 1) // SDv2
 80026e8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80026ec:	2048      	movs	r0, #72	; 0x48
 80026ee:	f7ff ff87 	bl	8002600 <SD_cmd>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d157      	bne.n	80027a8 <sd_ini+0xe4>
		  {
			  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 80026f8:	2300      	movs	r3, #0
 80026fa:	71fb      	strb	r3, [r7, #7]
 80026fc:	e00c      	b.n	8002718 <sd_ini+0x54>
 80026fe:	79fc      	ldrb	r4, [r7, #7]
 8002700:	f000 f905 	bl	800290e <SPI_ReceiveByte>
 8002704:	4603      	mov	r3, r0
 8002706:	461a      	mov	r2, r3
 8002708:	f104 0308 	add.w	r3, r4, #8
 800270c:	443b      	add	r3, r7
 800270e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	3301      	adds	r3, #1
 8002716:	71fb      	strb	r3, [r7, #7]
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	2b03      	cmp	r3, #3
 800271c:	d9ef      	bls.n	80026fe <sd_ini+0x3a>

			    // Get trailing return value of R7 resp
			    if (ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 800271e:	78bb      	ldrb	r3, [r7, #2]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d17b      	bne.n	800281c <sd_ini+0x158>
 8002724:	78fb      	ldrb	r3, [r7, #3]
 8002726:	2baa      	cmp	r3, #170	; 0xaa
 8002728:	d178      	bne.n	800281c <sd_ini+0x158>
			    {
			    	for (tmr = 12000; tmr && SD_cmd(ACMD41, 1UL << 30); tmr--)
 800272a:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800272e:	80bb      	strh	r3, [r7, #4]
 8002730:	e005      	b.n	800273e <sd_ini+0x7a>
 8002732:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002736:	b29b      	uxth	r3, r3
 8002738:	3b01      	subs	r3, #1
 800273a:	b29b      	uxth	r3, r3
 800273c:	80bb      	strh	r3, [r7, #4]
 800273e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d007      	beq.n	8002756 <sd_ini+0x92>
 8002746:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800274a:	20e9      	movs	r0, #233	; 0xe9
 800274c:	f7ff ff58 	bl	8002600 <SD_cmd>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1ed      	bne.n	8002732 <sd_ini+0x6e>
			    	    ; // Wait for leaving idle state (ACMD41 with HCS bit)
			    	if (tmr && SD_cmd(CMD58, 0) == 0)
 8002756:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d05e      	beq.n	800281c <sd_ini+0x158>
 800275e:	2100      	movs	r1, #0
 8002760:	207a      	movs	r0, #122	; 0x7a
 8002762:	f7ff ff4d 	bl	8002600 <SD_cmd>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d157      	bne.n	800281c <sd_ini+0x158>
			    	 { // Check CCS bit in the OCR
			    	  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 800276c:	2300      	movs	r3, #0
 800276e:	71fb      	strb	r3, [r7, #7]
 8002770:	e00c      	b.n	800278c <sd_ini+0xc8>
 8002772:	79fc      	ldrb	r4, [r7, #7]
 8002774:	f000 f8cb 	bl	800290e <SPI_ReceiveByte>
 8002778:	4603      	mov	r3, r0
 800277a:	461a      	mov	r2, r3
 800277c:	f104 0308 	add.w	r3, r4, #8
 8002780:	443b      	add	r3, r7
 8002782:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	3301      	adds	r3, #1
 800278a:	71fb      	strb	r3, [r7, #7]
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	2b03      	cmp	r3, #3
 8002790:	d9ef      	bls.n	8002772 <sd_ini+0xae>
			     	   sdinfo.type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 8002792:	783b      	ldrb	r3, [r7, #0]
 8002794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <sd_ini+0xdc>
 800279c:	220c      	movs	r2, #12
 800279e:	e000      	b.n	80027a2 <sd_ini+0xde>
 80027a0:	2204      	movs	r2, #4
 80027a2:	4b21      	ldr	r3, [pc, #132]	; (8002828 <sd_ini+0x164>)
 80027a4:	701a      	strb	r2, [r3, #0]
 80027a6:	e039      	b.n	800281c <sd_ini+0x158>
			    	}
			    }
		  }
		  else //SDv1 or MMCv3
		  {
			  if (SD_cmd(ACMD41, 0) <= 1)
 80027a8:	2100      	movs	r1, #0
 80027aa:	20e9      	movs	r0, #233	; 0xe9
 80027ac:	f7ff ff28 	bl	8002600 <SD_cmd>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d805      	bhi.n	80027c2 <sd_ini+0xfe>
			    {
			      sdinfo.type = CT_SD1; cmd = ACMD41; // SDv1
 80027b6:	4b1c      	ldr	r3, [pc, #112]	; (8002828 <sd_ini+0x164>)
 80027b8:	2202      	movs	r2, #2
 80027ba:	701a      	strb	r2, [r3, #0]
 80027bc:	23e9      	movs	r3, #233	; 0xe9
 80027be:	71bb      	strb	r3, [r7, #6]
 80027c0:	e004      	b.n	80027cc <sd_ini+0x108>
			    }
			    else
			    {
			      sdinfo.type = CT_MMC; cmd = CMD1; // MMCv3
 80027c2:	4b19      	ldr	r3, [pc, #100]	; (8002828 <sd_ini+0x164>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	701a      	strb	r2, [r3, #0]
 80027c8:	2341      	movs	r3, #65	; 0x41
 80027ca:	71bb      	strb	r3, [r7, #6]
			    }
			    for (tmr = 25000; tmr && SD_cmd(cmd, 0); tmr--) ; // Wait for leaving idle state
 80027cc:	f246 13a8 	movw	r3, #25000	; 0x61a8
 80027d0:	80bb      	strh	r3, [r7, #4]
 80027d2:	e005      	b.n	80027e0 <sd_ini+0x11c>
 80027d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80027d8:	b29b      	uxth	r3, r3
 80027da:	3b01      	subs	r3, #1
 80027dc:	b29b      	uxth	r3, r3
 80027de:	80bb      	strh	r3, [r7, #4]
 80027e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d007      	beq.n	80027f8 <sd_ini+0x134>
 80027e8:	79bb      	ldrb	r3, [r7, #6]
 80027ea:	2100      	movs	r1, #0
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff07 	bl	8002600 <SD_cmd>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1ed      	bne.n	80027d4 <sd_ini+0x110>
			    if (!tmr || SD_cmd(CMD16, 512) != 0) // Set R/W block length to 512
 80027f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d007      	beq.n	8002810 <sd_ini+0x14c>
 8002800:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002804:	2050      	movs	r0, #80	; 0x50
 8002806:	f7ff fefb 	bl	8002600 <SD_cmd>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <sd_ini+0x158>
			    sdinfo.type = 0;
 8002810:	4b05      	ldr	r3, [pc, #20]	; (8002828 <sd_ini+0x164>)
 8002812:	2200      	movs	r2, #0
 8002814:	701a      	strb	r2, [r3, #0]
 8002816:	e001      	b.n	800281c <sd_ini+0x158>

	  }
	  else
	  {

	    return 1;
 8002818:	2301      	movs	r3, #1
 800281a:	e000      	b.n	800281e <sd_ini+0x15a>
	  }




  return 0;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	bd90      	pop	{r4, r7, pc}
 8002826:	bf00      	nop
 8002828:	20001ba8 	.word	0x20001ba8

0800282c <Error>:

static void Error (void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  //LD_ON;
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <SPI_wait_ready>:

uint8_t SPI_wait_ready(void)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
  uint8_t res;
  uint16_t cnt;
  cnt=0;
 8002840:	2300      	movs	r3, #0
 8002842:	80fb      	strh	r3, [r7, #6]
  do {
    res=SPI_ReceiveByte();
 8002844:	f000 f863 	bl	800290e <SPI_ReceiveByte>
 8002848:	4603      	mov	r3, r0
 800284a:	717b      	strb	r3, [r7, #5]
    cnt++;
 800284c:	88fb      	ldrh	r3, [r7, #6]
 800284e:	3301      	adds	r3, #1
 8002850:	80fb      	strh	r3, [r7, #6]
  } while ( (res!=0xFF)&&(cnt<0xFFFF) );
 8002852:	797b      	ldrb	r3, [r7, #5]
 8002854:	2bff      	cmp	r3, #255	; 0xff
 8002856:	d004      	beq.n	8002862 <SPI_wait_ready+0x28>
 8002858:	88fb      	ldrh	r3, [r7, #6]
 800285a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800285e:	4293      	cmp	r3, r2
 8002860:	d1f0      	bne.n	8002844 <SPI_wait_ready+0xa>
  if (cnt>=0xFFFF) return 1;
 8002862:	88fb      	ldrh	r3, [r7, #6]
 8002864:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002868:	4293      	cmp	r3, r2
 800286a:	d101      	bne.n	8002870 <SPI_wait_ready+0x36>
 800286c:	2301      	movs	r3, #1
 800286e:	e000      	b.n	8002872 <SPI_wait_ready+0x38>
  return res;
 8002870:	797b      	ldrb	r3, [r7, #5]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
	...

0800287c <SPIx_Write_Multi>:
{
	if(HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_READY) return F_OK;
	else return F_ERR;
}
F_RES SPIx_Write_Multi(uint8_t* tx_buf,uint32_t size)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af02      	add	r7, sp, #8
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
	if(HAL_SPI_TransmitReceive(&hspi1, tx_buf, spi_rx_buffer, size,HAL_MAX_DELAY)==HAL_OK) return F_OK;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	b29b      	uxth	r3, r3
 800288a:	f04f 32ff 	mov.w	r2, #4294967295
 800288e:	9200      	str	r2, [sp, #0]
 8002890:	4a07      	ldr	r2, [pc, #28]	; (80028b0 <SPIx_Write_Multi+0x34>)
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4807      	ldr	r0, [pc, #28]	; (80028b4 <SPIx_Write_Multi+0x38>)
 8002896:	f004 fb38 	bl	8006f0a <HAL_SPI_TransmitReceive>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <SPIx_Write_Multi+0x28>
 80028a0:	2300      	movs	r3, #0
 80028a2:	e000      	b.n	80028a6 <SPIx_Write_Multi+0x2a>
		else return F_ERR;
 80028a4:	2301      	movs	r3, #1
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20001bd0 	.word	0x20001bd0
 80028b4:	20000854 	.word	0x20000854

080028b8 <SPIx_WriteRead>:
	if(HAL_SPI_Transmit_DMA(&hspi1, tx_buf, size)==HAL_OK) return F_OK;
	else return F_ERR;
}

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af02      	add	r7, sp, #8
 80028be:	4603      	mov	r3, r0
 80028c0:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 80028c6:	f107 020f 	add.w	r2, r7, #15
 80028ca:	1df9      	adds	r1, r7, #7
 80028cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	2301      	movs	r3, #1
 80028d4:	4806      	ldr	r0, [pc, #24]	; (80028f0 <SPIx_WriteRead+0x38>)
 80028d6:	f004 fb18 	bl	8006f0a <HAL_SPI_TransmitReceive>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <SPIx_WriteRead+0x2c>
  {
    Error();
 80028e0:	f7ff ffa4 	bl	800282c <Error>
  }
  return receivedbyte;
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000854 	.word	0x20000854

080028f4 <SPI_SendByte>:

void SPI_SendByte(uint8_t bt)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
  SPIx_WriteRead(bt);
 80028fe:	79fb      	ldrb	r3, [r7, #7]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ffd9 	bl	80028b8 <SPIx_WriteRead>
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <SPI_ReceiveByte>:

uint8_t SPI_ReceiveByte(void)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
  uint8_t bt = SPIx_WriteRead(0xFF);
 8002914:	20ff      	movs	r0, #255	; 0xff
 8002916:	f7ff ffcf 	bl	80028b8 <SPIx_WriteRead>
 800291a:	4603      	mov	r3, r0
 800291c:	71fb      	strb	r3, [r7, #7]
  return bt;
 800291e:	79fb      	ldrb	r3, [r7, #7]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <SPI_Release>:
void SPI_Release(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  SPIx_WriteRead(0xFF);
 800292c:	20ff      	movs	r0, #255	; 0xff
 800292e:	f7ff ffc3 	bl	80028b8 <SPIx_WriteRead>
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}

08002936 <SD_Read_Block>:

uint8_t SD_Read_Block (uint8_t *buff, uint32_t lba)
{
 8002936:	b590      	push	{r4, r7, lr}
 8002938:	b085      	sub	sp, #20
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	6039      	str	r1, [r7, #0]
  uint8_t result;
  uint16_t cnt;

  result=SD_cmd (CMD17, lba);
 8002940:	6839      	ldr	r1, [r7, #0]
 8002942:	2051      	movs	r0, #81	; 0x51
 8002944:	f7ff fe5c 	bl	8002600 <SD_cmd>
 8002948:	4603      	mov	r3, r0
 800294a:	737b      	strb	r3, [r7, #13]
  if (result!=0x00){
 800294c:	7b7b      	ldrb	r3, [r7, #13]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <SD_Read_Block+0x20>
	  return 5;
 8002952:	2305      	movs	r3, #5
 8002954:	e02f      	b.n	80029b6 <SD_Read_Block+0x80>
  }

  SPI_Release();
 8002956:	f7ff ffe7 	bl	8002928 <SPI_Release>
   cnt=0;
 800295a:	2300      	movs	r3, #0
 800295c:	81fb      	strh	r3, [r7, #14]
   do{
     result=SPI_ReceiveByte();
 800295e:	f7ff ffd6 	bl	800290e <SPI_ReceiveByte>
 8002962:	4603      	mov	r3, r0
 8002964:	737b      	strb	r3, [r7, #13]
     cnt++;
 8002966:	89fb      	ldrh	r3, [r7, #14]
 8002968:	3301      	adds	r3, #1
 800296a:	81fb      	strh	r3, [r7, #14]
   } while ( (result!=0xFE)&&(cnt<0xFFFF) );
 800296c:	7b7b      	ldrb	r3, [r7, #13]
 800296e:	2bfe      	cmp	r3, #254	; 0xfe
 8002970:	d004      	beq.n	800297c <SD_Read_Block+0x46>
 8002972:	89fb      	ldrh	r3, [r7, #14]
 8002974:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002978:	4293      	cmp	r3, r2
 800297a:	d1f0      	bne.n	800295e <SD_Read_Block+0x28>
   if (cnt>=0xFFFF) {
 800297c:	89fb      	ldrh	r3, [r7, #14]
 800297e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002982:	4293      	cmp	r3, r2
 8002984:	d101      	bne.n	800298a <SD_Read_Block+0x54>
	   return 5;
 8002986:	2305      	movs	r3, #5
 8002988:	e015      	b.n	80029b6 <SD_Read_Block+0x80>
   }
   for (cnt=0;cnt<512;cnt++) buff[cnt]=SPI_ReceiveByte();
 800298a:	2300      	movs	r3, #0
 800298c:	81fb      	strh	r3, [r7, #14]
 800298e:	e009      	b.n	80029a4 <SD_Read_Block+0x6e>
 8002990:	89fb      	ldrh	r3, [r7, #14]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	18d4      	adds	r4, r2, r3
 8002996:	f7ff ffba 	bl	800290e <SPI_ReceiveByte>
 800299a:	4603      	mov	r3, r0
 800299c:	7023      	strb	r3, [r4, #0]
 800299e:	89fb      	ldrh	r3, [r7, #14]
 80029a0:	3301      	adds	r3, #1
 80029a2:	81fb      	strh	r3, [r7, #14]
 80029a4:	89fb      	ldrh	r3, [r7, #14]
 80029a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029aa:	d3f1      	bcc.n	8002990 <SD_Read_Block+0x5a>
   SPI_Release();
 80029ac:	f7ff ffbc 	bl	8002928 <SPI_Release>
   SPI_Release();
 80029b0:	f7ff ffba 	bl	8002928 <SPI_Release>



  return 0;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd90      	pop	{r4, r7, pc}
	...

080029c0 <SD_Write_Blocks>:

uint8_t SD_Write_Blocks (uint8_t *buff, uint32_t lba,uint16_t count)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b088      	sub	sp, #32
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	4613      	mov	r3, r2
 80029cc:	80fb      	strh	r3, [r7, #6]
  tick1=xTaskGetTickCount();
 80029ce:	f010 fa95 	bl	8012efc <xTaskGetTickCount>
 80029d2:	4603      	mov	r3, r0
 80029d4:	4a39      	ldr	r2, [pc, #228]	; (8002abc <SD_Write_Blocks+0xfc>)
 80029d6:	6013      	str	r3, [r2, #0]
  uint8_t result;
  uint16_t cnt;


  result=SD_cmd(CMD25,lba);//CMD25
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	2059      	movs	r0, #89	; 0x59
 80029dc:	f7ff fe10 	bl	8002600 <SD_cmd>
 80029e0:	4603      	mov	r3, r0
 80029e2:	75fb      	strb	r3, [r7, #23]
  if (result!=0x00){
 80029e4:	7dfb      	ldrb	r3, [r7, #23]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <SD_Write_Blocks+0x2e>
	  return 6;
 80029ea:	2306      	movs	r3, #6
 80029ec:	e061      	b.n	8002ab2 <SD_Write_Blocks+0xf2>
  }
  SPI_Release();  //1byte gap
 80029ee:	f7ff ff9b 	bl	8002928 <SPI_Release>

  for(int i=0;i<count;i++){
 80029f2:	2300      	movs	r3, #0
 80029f4:	61bb      	str	r3, [r7, #24]
 80029f6:	e035      	b.n	8002a64 <SD_Write_Blocks+0xa4>
   SPI_SendByte (0xFC);//token CMD25
 80029f8:	20fc      	movs	r0, #252	; 0xfc
 80029fa:	f7ff ff7b 	bl	80028f4 <SPI_SendByte>

   SPIx_Write_Multi(buff,512);
 80029fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f7ff ff3a 	bl	800287c <SPIx_Write_Multi>
   buff+=512;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002a0e:	60fb      	str	r3, [r7, #12]
   SPI_Release();   //CRC
 8002a10:	f7ff ff8a 	bl	8002928 <SPI_Release>
   SPI_Release();   //CRC
 8002a14:	f7ff ff88 	bl	8002928 <SPI_Release>


   result=SPI_ReceiveByte();
 8002a18:	f7ff ff79 	bl	800290e <SPI_ReceiveByte>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	75fb      	strb	r3, [r7, #23]
   if ((result&0x1F)!=0x05) {
 8002a20:	7dfb      	ldrb	r3, [r7, #23]
 8002a22:	f003 031f 	and.w	r3, r3, #31
 8002a26:	2b05      	cmp	r3, #5
 8002a28:	d001      	beq.n	8002a2e <SD_Write_Blocks+0x6e>
	  return 6;
 8002a2a:	2306      	movs	r3, #6
 8002a2c:	e041      	b.n	8002ab2 <SD_Write_Blocks+0xf2>
   }
   cnt=0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	83fb      	strh	r3, [r7, #30]
   do {
    result=SPI_ReceiveByte();
 8002a32:	f7ff ff6c 	bl	800290e <SPI_ReceiveByte>
 8002a36:	4603      	mov	r3, r0
 8002a38:	75fb      	strb	r3, [r7, #23]
    cnt++;
 8002a3a:	8bfb      	ldrh	r3, [r7, #30]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	83fb      	strh	r3, [r7, #30]
   } while ( (result!=0xFF)&&(cnt<0xFFFF) );
 8002a40:	7dfb      	ldrb	r3, [r7, #23]
 8002a42:	2bff      	cmp	r3, #255	; 0xff
 8002a44:	d004      	beq.n	8002a50 <SD_Write_Blocks+0x90>
 8002a46:	8bfb      	ldrh	r3, [r7, #30]
 8002a48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d1f0      	bne.n	8002a32 <SD_Write_Blocks+0x72>
   if (cnt>=0xFFFF) {
 8002a50:	8bfb      	ldrh	r3, [r7, #30]
 8002a52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d101      	bne.n	8002a5e <SD_Write_Blocks+0x9e>
	  return 6;
 8002a5a:	2306      	movs	r3, #6
 8002a5c:	e029      	b.n	8002ab2 <SD_Write_Blocks+0xf2>
  for(int i=0;i<count;i++){
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	3301      	adds	r3, #1
 8002a62:	61bb      	str	r3, [r7, #24]
 8002a64:	88fb      	ldrh	r3, [r7, #6]
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	dbc5      	blt.n	80029f8 <SD_Write_Blocks+0x38>
   }
  }

  SPI_SendByte (0xFD); //stop transaction token for CMD25
 8002a6c:	20fd      	movs	r0, #253	; 0xfd
 8002a6e:	f7ff ff41 	bl	80028f4 <SPI_SendByte>
  SPI_Release();       //1byte gap
 8002a72:	f7ff ff59 	bl	8002928 <SPI_Release>
  cnt=0;
 8002a76:	2300      	movs	r3, #0
 8002a78:	83fb      	strh	r3, [r7, #30]
  do {
	result=SPI_ReceiveByte();
 8002a7a:	f7ff ff48 	bl	800290e <SPI_ReceiveByte>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	75fb      	strb	r3, [r7, #23]
	cnt++;
 8002a82:	8bfb      	ldrh	r3, [r7, #30]
 8002a84:	3301      	adds	r3, #1
 8002a86:	83fb      	strh	r3, [r7, #30]
  } while ( (result!=0xFF)&&(cnt<0xFFFF) );
 8002a88:	7dfb      	ldrb	r3, [r7, #23]
 8002a8a:	2bff      	cmp	r3, #255	; 0xff
 8002a8c:	d004      	beq.n	8002a98 <SD_Write_Blocks+0xd8>
 8002a8e:	8bfb      	ldrh	r3, [r7, #30]
 8002a90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d1f0      	bne.n	8002a7a <SD_Write_Blocks+0xba>
  if (cnt>=0xFFFF) return 6;
 8002a98:	8bfb      	ldrh	r3, [r7, #30]
 8002a9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d101      	bne.n	8002aa6 <SD_Write_Blocks+0xe6>
 8002aa2:	2306      	movs	r3, #6
 8002aa4:	e005      	b.n	8002ab2 <SD_Write_Blocks+0xf2>
  tick2=xTaskGetTickCount();
 8002aa6:	f010 fa29 	bl	8012efc <xTaskGetTickCount>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	4a04      	ldr	r2, [pc, #16]	; (8002ac0 <SD_Write_Blocks+0x100>)
 8002aae:	6013      	str	r3, [r2, #0]
  return 0;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3720      	adds	r7, #32
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20001b7c 	.word	0x20001b7c
 8002ac0:	20001b80 	.word	0x20001b80

08002ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	607b      	str	r3, [r7, #4]
 8002ace:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <HAL_MspInit+0x54>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	4a11      	ldr	r2, [pc, #68]	; (8002b18 <HAL_MspInit+0x54>)
 8002ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ada:	4b0f      	ldr	r3, [pc, #60]	; (8002b18 <HAL_MspInit+0x54>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae2:	607b      	str	r3, [r7, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	603b      	str	r3, [r7, #0]
 8002aea:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <HAL_MspInit+0x54>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	4a0a      	ldr	r2, [pc, #40]	; (8002b18 <HAL_MspInit+0x54>)
 8002af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af4:	6413      	str	r3, [r2, #64]	; 0x40
 8002af6:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <HAL_MspInit+0x54>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afe:	603b      	str	r3, [r7, #0]
 8002b00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b02:	2200      	movs	r2, #0
 8002b04:	210f      	movs	r1, #15
 8002b06:	f06f 0001 	mvn.w	r0, #1
 8002b0a:	f000 fccd 	bl	80034a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40023800 	.word	0x40023800

08002b1c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b24:	f107 0308 	add.w	r3, r7, #8
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a0c      	ldr	r2, [pc, #48]	; (8002b68 <HAL_RTC_MspInit+0x4c>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d111      	bne.n	8002b60 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002b40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b44:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b46:	f107 0308 	add.w	r3, r7, #8
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f003 fd74 	bl	8006638 <HAL_RCCEx_PeriphCLKConfig>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002b56:	f7ff fbe7 	bl	8002328 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002b5a:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <HAL_RTC_MspInit+0x50>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002b60:	bf00      	nop
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40002800 	.word	0x40002800
 8002b6c:	42470e3c 	.word	0x42470e3c

08002b70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08a      	sub	sp, #40	; 0x28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b78:	f107 0314 	add.w	r3, r7, #20
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	60da      	str	r2, [r3, #12]
 8002b86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a34      	ldr	r2, [pc, #208]	; (8002c60 <HAL_SPI_MspInit+0xf0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d162      	bne.n	8002c58 <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b92:	2300      	movs	r3, #0
 8002b94:	613b      	str	r3, [r7, #16]
 8002b96:	4b33      	ldr	r3, [pc, #204]	; (8002c64 <HAL_SPI_MspInit+0xf4>)
 8002b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9a:	4a32      	ldr	r2, [pc, #200]	; (8002c64 <HAL_SPI_MspInit+0xf4>)
 8002b9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ba2:	4b30      	ldr	r3, [pc, #192]	; (8002c64 <HAL_SPI_MspInit+0xf4>)
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	4b2c      	ldr	r3, [pc, #176]	; (8002c64 <HAL_SPI_MspInit+0xf4>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	4a2b      	ldr	r2, [pc, #172]	; (8002c64 <HAL_SPI_MspInit+0xf4>)
 8002bb8:	f043 0302 	orr.w	r3, r3, #2
 8002bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bbe:	4b29      	ldr	r3, [pc, #164]	; (8002c64 <HAL_SPI_MspInit+0xf4>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002bca:	2338      	movs	r3, #56	; 0x38
 8002bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bda:	2305      	movs	r3, #5
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bde:	f107 0314 	add.w	r3, r7, #20
 8002be2:	4619      	mov	r1, r3
 8002be4:	4820      	ldr	r0, [pc, #128]	; (8002c68 <HAL_SPI_MspInit+0xf8>)
 8002be6:	f001 fadd 	bl	80041a4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002bea:	4b20      	ldr	r3, [pc, #128]	; (8002c6c <HAL_SPI_MspInit+0xfc>)
 8002bec:	4a20      	ldr	r2, [pc, #128]	; (8002c70 <HAL_SPI_MspInit+0x100>)
 8002bee:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002bf0:	4b1e      	ldr	r3, [pc, #120]	; (8002c6c <HAL_SPI_MspInit+0xfc>)
 8002bf2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002bf6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bf8:	4b1c      	ldr	r3, [pc, #112]	; (8002c6c <HAL_SPI_MspInit+0xfc>)
 8002bfa:	2240      	movs	r2, #64	; 0x40
 8002bfc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bfe:	4b1b      	ldr	r3, [pc, #108]	; (8002c6c <HAL_SPI_MspInit+0xfc>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c04:	4b19      	ldr	r3, [pc, #100]	; (8002c6c <HAL_SPI_MspInit+0xfc>)
 8002c06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c0a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c0c:	4b17      	ldr	r3, [pc, #92]	; (8002c6c <HAL_SPI_MspInit+0xfc>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c12:	4b16      	ldr	r3, [pc, #88]	; (8002c6c <HAL_SPI_MspInit+0xfc>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002c18:	4b14      	ldr	r3, [pc, #80]	; (8002c6c <HAL_SPI_MspInit+0xfc>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002c1e:	4b13      	ldr	r3, [pc, #76]	; (8002c6c <HAL_SPI_MspInit+0xfc>)
 8002c20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c24:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c26:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <HAL_SPI_MspInit+0xfc>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002c2c:	480f      	ldr	r0, [pc, #60]	; (8002c6c <HAL_SPI_MspInit+0xfc>)
 8002c2e:	f000 fc65 	bl	80034fc <HAL_DMA_Init>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8002c38:	f7ff fb76 	bl	8002328 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a0b      	ldr	r2, [pc, #44]	; (8002c6c <HAL_SPI_MspInit+0xfc>)
 8002c40:	649a      	str	r2, [r3, #72]	; 0x48
 8002c42:	4a0a      	ldr	r2, [pc, #40]	; (8002c6c <HAL_SPI_MspInit+0xfc>)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002c48:	2200      	movs	r2, #0
 8002c4a:	2105      	movs	r1, #5
 8002c4c:	2023      	movs	r0, #35	; 0x23
 8002c4e:	f000 fc2b 	bl	80034a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002c52:	2023      	movs	r0, #35	; 0x23
 8002c54:	f000 fc44 	bl	80034e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002c58:	bf00      	nop
 8002c5a:	3728      	adds	r7, #40	; 0x28
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40013000 	.word	0x40013000
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40020400 	.word	0x40020400
 8002c6c:	200008ac 	.word	0x200008ac
 8002c70:	40026458 	.word	0x40026458

08002c74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c84:	d115      	bne.n	8002cb2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	4b0c      	ldr	r3, [pc, #48]	; (8002cbc <HAL_TIM_Base_MspInit+0x48>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	4a0b      	ldr	r2, [pc, #44]	; (8002cbc <HAL_TIM_Base_MspInit+0x48>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	6413      	str	r3, [r2, #64]	; 0x40
 8002c96:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <HAL_TIM_Base_MspInit+0x48>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2105      	movs	r1, #5
 8002ca6:	201c      	movs	r0, #28
 8002ca8:	f000 fbfe 	bl	80034a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002cac:	201c      	movs	r0, #28
 8002cae:	f000 fc17 	bl	80034e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002cb2:	bf00      	nop
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40023800 	.word	0x40023800

08002cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08a      	sub	sp, #40	; 0x28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc8:	f107 0314 	add.w	r3, r7, #20
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	609a      	str	r2, [r3, #8]
 8002cd4:	60da      	str	r2, [r3, #12]
 8002cd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a1d      	ldr	r2, [pc, #116]	; (8002d54 <HAL_UART_MspInit+0x94>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d134      	bne.n	8002d4c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	4b1c      	ldr	r3, [pc, #112]	; (8002d58 <HAL_UART_MspInit+0x98>)
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	4a1b      	ldr	r2, [pc, #108]	; (8002d58 <HAL_UART_MspInit+0x98>)
 8002cec:	f043 0310 	orr.w	r3, r3, #16
 8002cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8002cf2:	4b19      	ldr	r3, [pc, #100]	; (8002d58 <HAL_UART_MspInit+0x98>)
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf6:	f003 0310 	and.w	r3, r3, #16
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	4b15      	ldr	r3, [pc, #84]	; (8002d58 <HAL_UART_MspInit+0x98>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	4a14      	ldr	r2, [pc, #80]	; (8002d58 <HAL_UART_MspInit+0x98>)
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0e:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <HAL_UART_MspInit+0x98>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d1a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d20:	2302      	movs	r3, #2
 8002d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d24:	2300      	movs	r3, #0
 8002d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d2c:	2307      	movs	r3, #7
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d30:	f107 0314 	add.w	r3, r7, #20
 8002d34:	4619      	mov	r1, r3
 8002d36:	4809      	ldr	r0, [pc, #36]	; (8002d5c <HAL_UART_MspInit+0x9c>)
 8002d38:	f001 fa34 	bl	80041a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	2105      	movs	r1, #5
 8002d40:	2025      	movs	r0, #37	; 0x25
 8002d42:	f000 fbb1 	bl	80034a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d46:	2025      	movs	r0, #37	; 0x25
 8002d48:	f000 fbca 	bl	80034e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002d4c:	bf00      	nop
 8002d4e:	3728      	adds	r7, #40	; 0x28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40011000 	.word	0x40011000
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40020000 	.word	0x40020000

08002d60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08c      	sub	sp, #48	; 0x30
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002d70:	2200      	movs	r2, #0
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	2019      	movs	r0, #25
 8002d76:	f000 fb97 	bl	80034a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002d7a:	2019      	movs	r0, #25
 8002d7c:	f000 fbb0 	bl	80034e0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002d80:	2300      	movs	r3, #0
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	4b1f      	ldr	r3, [pc, #124]	; (8002e04 <HAL_InitTick+0xa4>)
 8002d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d88:	4a1e      	ldr	r2, [pc, #120]	; (8002e04 <HAL_InitTick+0xa4>)
 8002d8a:	f043 0301 	orr.w	r3, r3, #1
 8002d8e:	6453      	str	r3, [r2, #68]	; 0x44
 8002d90:	4b1c      	ldr	r3, [pc, #112]	; (8002e04 <HAL_InitTick+0xa4>)
 8002d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d9c:	f107 0210 	add.w	r2, r7, #16
 8002da0:	f107 0314 	add.w	r3, r7, #20
 8002da4:	4611      	mov	r1, r2
 8002da6:	4618      	mov	r0, r3
 8002da8:	f003 fc14 	bl	80065d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002dac:	f003 fbfe 	bl	80065ac <HAL_RCC_GetPCLK2Freq>
 8002db0:	4603      	mov	r3, r0
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db8:	4a13      	ldr	r2, [pc, #76]	; (8002e08 <HAL_InitTick+0xa8>)
 8002dba:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbe:	0c9b      	lsrs	r3, r3, #18
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002dc4:	4b11      	ldr	r3, [pc, #68]	; (8002e0c <HAL_InitTick+0xac>)
 8002dc6:	4a12      	ldr	r2, [pc, #72]	; (8002e10 <HAL_InitTick+0xb0>)
 8002dc8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002dca:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <HAL_InitTick+0xac>)
 8002dcc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002dd0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002dd2:	4a0e      	ldr	r2, [pc, #56]	; (8002e0c <HAL_InitTick+0xac>)
 8002dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002dd8:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <HAL_InitTick+0xac>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dde:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <HAL_InitTick+0xac>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002de4:	4809      	ldr	r0, [pc, #36]	; (8002e0c <HAL_InitTick+0xac>)
 8002de6:	f004 fc1b 	bl	8007620 <HAL_TIM_Base_Init>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d104      	bne.n	8002dfa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002df0:	4806      	ldr	r0, [pc, #24]	; (8002e0c <HAL_InitTick+0xac>)
 8002df2:	f004 fc65 	bl	80076c0 <HAL_TIM_Base_Start_IT>
 8002df6:	4603      	mov	r3, r0
 8002df8:	e000      	b.n	8002dfc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3730      	adds	r7, #48	; 0x30
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40023800 	.word	0x40023800
 8002e08:	431bde83 	.word	0x431bde83
 8002e0c:	20001dd0 	.word	0x20001dd0
 8002e10:	40010000 	.word	0x40010000

08002e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e18:	e7fe      	b.n	8002e18 <NMI_Handler+0x4>

08002e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e1e:	e7fe      	b.n	8002e1e <HardFault_Handler+0x4>

08002e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e24:	e7fe      	b.n	8002e24 <MemManage_Handler+0x4>

08002e26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e26:	b480      	push	{r7}
 8002e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e2a:	e7fe      	b.n	8002e2a <BusFault_Handler+0x4>

08002e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e30:	e7fe      	b.n	8002e30 <UsageFault_Handler+0x4>

08002e32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e32:	b480      	push	{r7}
 8002e34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e36:	bf00      	nop
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e44:	4802      	ldr	r0, [pc, #8]	; (8002e50 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002e46:	f004 fcab 	bl	80077a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	20001dd0 	.word	0x20001dd0

08002e54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e58:	4802      	ldr	r0, [pc, #8]	; (8002e64 <TIM2_IRQHandler+0x10>)
 8002e5a:	f004 fca1 	bl	80077a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	2000090c 	.word	0x2000090c

08002e68 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002e6c:	4802      	ldr	r0, [pc, #8]	; (8002e78 <SPI1_IRQHandler+0x10>)
 8002e6e:	f004 f9ef 	bl	8007250 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000854 	.word	0x20000854

08002e7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e80:	4802      	ldr	r0, [pc, #8]	; (8002e8c <USART1_IRQHandler+0x10>)
 8002e82:	f005 f9a3 	bl	80081cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20000954 	.word	0x20000954

08002e90 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002e94:	4802      	ldr	r0, [pc, #8]	; (8002ea0 <DMA2_Stream3_IRQHandler+0x10>)
 8002e96:	f000 fc71 	bl	800377c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002e9a:	bf00      	nop
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	200008ac 	.word	0x200008ac

08002ea4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002ea8:	4802      	ldr	r0, [pc, #8]	; (8002eb4 <OTG_FS_IRQHandler+0x10>)
 8002eaa:	f001 fd9b 	bl	80049e4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002eae:	bf00      	nop
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	2000d818 	.word	0x2000d818

08002eb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
	return 1;
 8002ebc:	2301      	movs	r3, #1
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <_kill>:

int _kill(int pid, int sig)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ed2:	f011 fbcd 	bl	8014670 <__errno>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2216      	movs	r2, #22
 8002eda:	601a      	str	r2, [r3, #0]
	return -1;
 8002edc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <_exit>:

void _exit (int status)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff ffe7 	bl	8002ec8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002efa:	e7fe      	b.n	8002efa <_exit+0x12>

08002efc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	e00a      	b.n	8002f24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f0e:	f3af 8000 	nop.w
 8002f12:	4601      	mov	r1, r0
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	1c5a      	adds	r2, r3, #1
 8002f18:	60ba      	str	r2, [r7, #8]
 8002f1a:	b2ca      	uxtb	r2, r1
 8002f1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	3301      	adds	r3, #1
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	dbf0      	blt.n	8002f0e <_read+0x12>
	}

return len;
 8002f2c:	687b      	ldr	r3, [r7, #4]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b086      	sub	sp, #24
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	60f8      	str	r0, [r7, #12]
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f42:	2300      	movs	r3, #0
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	e009      	b.n	8002f5c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	60ba      	str	r2, [r7, #8]
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	dbf1      	blt.n	8002f48 <_write+0x12>
	}
	return len;
 8002f64:	687b      	ldr	r3, [r7, #4]
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3718      	adds	r7, #24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <_close>:

int _close(int file)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
	return -1;
 8002f76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
 8002f8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f96:	605a      	str	r2, [r3, #4]
	return 0;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <_isatty>:

int _isatty(int file)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
	return 1;
 8002fae:	2301      	movs	r3, #1
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
	return 0;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
	...

08002fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fe0:	4a14      	ldr	r2, [pc, #80]	; (8003034 <_sbrk+0x5c>)
 8002fe2:	4b15      	ldr	r3, [pc, #84]	; (8003038 <_sbrk+0x60>)
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fec:	4b13      	ldr	r3, [pc, #76]	; (800303c <_sbrk+0x64>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d102      	bne.n	8002ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ff4:	4b11      	ldr	r3, [pc, #68]	; (800303c <_sbrk+0x64>)
 8002ff6:	4a12      	ldr	r2, [pc, #72]	; (8003040 <_sbrk+0x68>)
 8002ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ffa:	4b10      	ldr	r3, [pc, #64]	; (800303c <_sbrk+0x64>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4413      	add	r3, r2
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	429a      	cmp	r2, r3
 8003006:	d207      	bcs.n	8003018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003008:	f011 fb32 	bl	8014670 <__errno>
 800300c:	4603      	mov	r3, r0
 800300e:	220c      	movs	r2, #12
 8003010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003012:	f04f 33ff 	mov.w	r3, #4294967295
 8003016:	e009      	b.n	800302c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003018:	4b08      	ldr	r3, [pc, #32]	; (800303c <_sbrk+0x64>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800301e:	4b07      	ldr	r3, [pc, #28]	; (800303c <_sbrk+0x64>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4413      	add	r3, r2
 8003026:	4a05      	ldr	r2, [pc, #20]	; (800303c <_sbrk+0x64>)
 8003028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800302a:	68fb      	ldr	r3, [r7, #12]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	20020000 	.word	0x20020000
 8003038:	00000400 	.word	0x00000400
 800303c:	20001e1c 	.word	0x20001e1c
 8003040:	2000db58 	.word	0x2000db58

08003044 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003048:	4b06      	ldr	r3, [pc, #24]	; (8003064 <SystemInit+0x20>)
 800304a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304e:	4a05      	ldr	r2, [pc, #20]	; (8003064 <SystemInit+0x20>)
 8003050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003058:	bf00      	nop
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <wav_file_open>:


extern UART_HandleTypeDef huart1;

F_RES wav_file_open(wav_file_typedef* self_object,char* filename,uint32_t sample_size,uint32_t sample_rate,uint8_t num_channels)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
 8003074:	603b      	str	r3, [r7, #0]
  memcpy(self_object->header.chunk.prefix,"RIFF",4);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2204      	movs	r2, #4
 800307a:	4939      	ldr	r1, [pc, #228]	; (8003160 <wav_file_open+0xf8>)
 800307c:	4618      	mov	r0, r3
 800307e:	f011 fc2d 	bl	80148dc <memcpy>
  memcpy(self_object->header.chunk.postfix,"WAVE",4);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	3308      	adds	r3, #8
 8003086:	2204      	movs	r2, #4
 8003088:	4936      	ldr	r1, [pc, #216]	; (8003164 <wav_file_open+0xfc>)
 800308a:	4618      	mov	r0, r3
 800308c:	f011 fc26 	bl	80148dc <memcpy>
  memcpy(self_object->header.subchunk_fmt.prefix,"fmt ",4);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	330c      	adds	r3, #12
 8003094:	2204      	movs	r2, #4
 8003096:	4934      	ldr	r1, [pc, #208]	; (8003168 <wav_file_open+0x100>)
 8003098:	4618      	mov	r0, r3
 800309a:	f011 fc1f 	bl	80148dc <memcpy>
  self_object->header.subchunk_fmt.size=16;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f042 0210 	orr.w	r2, r2, #16
 80030a6:	741a      	strb	r2, [r3, #16]
 80030a8:	2200      	movs	r2, #0
 80030aa:	745a      	strb	r2, [r3, #17]
 80030ac:	2200      	movs	r2, #0
 80030ae:	749a      	strb	r2, [r3, #18]
 80030b0:	2200      	movs	r2, #0
 80030b2:	74da      	strb	r2, [r3, #19]
  self_object->header.subchunk_fmt.format=1;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f042 0201 	orr.w	r2, r2, #1
 80030bc:	751a      	strb	r2, [r3, #20]
 80030be:	2200      	movs	r2, #0
 80030c0:	755a      	strb	r2, [r3, #21]
  self_object->header.subchunk_fmt.numchannels=num_channels;
 80030c2:	7e3b      	ldrb	r3, [r7, #24]
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	82da      	strh	r2, [r3, #22]
  self_object->header.subchunk_fmt.samplerate=sample_rate;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	619a      	str	r2, [r3, #24]
  self_object->header.subchunk_fmt.bps=sample_size;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	845a      	strh	r2, [r3, #34]	; 0x22
  self_object->header.subchunk_fmt.byterate=sample_rate*num_channels*(sample_size/8);
 80030d8:	7e3b      	ldrb	r3, [r7, #24]
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	fb02 f303 	mul.w	r3, r2, r3
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	08d2      	lsrs	r2, r2, #3
 80030e4:	fb03 f202 	mul.w	r2, r3, r2
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	61da      	str	r2, [r3, #28]
  self_object->header.subchunk_fmt.block_align=num_channels*(sample_size/8);
 80030ec:	7e3b      	ldrb	r3, [r7, #24]
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	08db      	lsrs	r3, r3, #3
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	fb12 f303 	smulbb	r3, r2, r3
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	841a      	strh	r2, [r3, #32]
  memcpy(self_object->header.subchunk_data.prefix,"data",4);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	3324      	adds	r3, #36	; 0x24
 8003104:	2204      	movs	r2, #4
 8003106:	4919      	ldr	r1, [pc, #100]	; (800316c <wav_file_open+0x104>)
 8003108:	4618      	mov	r0, r3
 800310a:	f011 fbe7 	bl	80148dc <memcpy>
  self_object->data_counter=0;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8003116:	2200      	movs	r2, #0
 8003118:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800311c:	2200      	movs	r2, #0
 800311e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8003122:	2200      	movs	r2, #0
 8003124:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  if(f_open(&self_object->media.file,filename,FA_CREATE_ALWAYS|FA_WRITE)==FR_OK){
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	3330      	adds	r3, #48	; 0x30
 800312c:	220a      	movs	r2, #10
 800312e:	68b9      	ldr	r1, [r7, #8]
 8003130:	4618      	mov	r0, r3
 8003132:	f00d f8dd 	bl	80102f0 <f_open>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10b      	bne.n	8003154 <wav_file_open+0xec>
   f_lseek(&self_object->media.file, sizeof(self_object->header));
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003142:	f04f 022c 	mov.w	r2, #44	; 0x2c
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	4608      	mov	r0, r1
 800314c:	f00d fe8d 	bl	8010e6a <f_lseek>
   return F_OK;
 8003150:	2300      	movs	r3, #0
 8003152:	e000      	b.n	8003156 <wav_file_open+0xee>
  }
  return F_ERR;
 8003154:	2301      	movs	r3, #1
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	080173b4 	.word	0x080173b4
 8003164:	080173bc 	.word	0x080173bc
 8003168:	080173c4 	.word	0x080173c4
 800316c:	080173cc 	.word	0x080173cc

08003170 <wav_file_close>:

F_RES wav_file_close(wav_file_typedef* self_object)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
	self_object->header.subchunk_data.size=self_object->data_counter;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	629a      	str	r2, [r3, #40]	; 0x28
	self_object->header.chunk.size=36+self_object->data_counter;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003184:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	605a      	str	r2, [r3, #4]
 	f_lseek(&self_object->media.file, 0);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003192:	f04f 0200 	mov.w	r2, #0
 8003196:	f04f 0300 	mov.w	r3, #0
 800319a:	4608      	mov	r0, r1
 800319c:	f00d fe65 	bl	8010e6a <f_lseek>
 	if(f_write(&self_object->media.file,(uint8_t*)&self_object->header,sizeof(self_object->header),(void*)&self_object->media.byteswritten)==FR_OK){
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 80031ae:	222c      	movs	r2, #44	; 0x2c
 80031b0:	f00d fb5f 	bl	8010872 <f_write>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d106      	bne.n	80031c8 <wav_file_close+0x58>
 	  f_close(&self_object->media.file);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3330      	adds	r3, #48	; 0x30
 80031be:	4618      	mov	r0, r3
 80031c0:	f00d fe29 	bl	8010e16 <f_close>
 	  return F_OK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	e000      	b.n	80031ca <wav_file_close+0x5a>
 	}
 	return F_ERR;
 80031c8:	2301      	movs	r3, #1
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <wav_file_write>:

F_RES wav_file_write(wav_file_typedef* self_object,uint8_t* data,uint32_t length)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b086      	sub	sp, #24
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
	FRESULT res;
	self_object->data_counter+=length;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	441a      	add	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	62da      	str	r2, [r3, #44]	; 0x2c
	res=f_write(&self_object->media.file,data,length,(void*)&self_object->media.byteswritten);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	68b9      	ldr	r1, [r7, #8]
 80031fa:	f00d fb3a 	bl	8010872 <f_write>
 80031fe:	4603      	mov	r3, r0
 8003200:	75fb      	strb	r3, [r7, #23]
	if(res==FR_OK) return F_OK;
 8003202:	7dfb      	ldrb	r3, [r7, #23]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <wav_file_write+0x3a>
 8003208:	2300      	movs	r3, #0
 800320a:	e000      	b.n	800320e <wav_file_write+0x3c>
	return F_ERR;
 800320c:	2301      	movs	r3, #1
}
 800320e:	4618      	mov	r0, r3
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003218:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003250 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800321c:	480d      	ldr	r0, [pc, #52]	; (8003254 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800321e:	490e      	ldr	r1, [pc, #56]	; (8003258 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003220:	4a0e      	ldr	r2, [pc, #56]	; (800325c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003224:	e002      	b.n	800322c <LoopCopyDataInit>

08003226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800322a:	3304      	adds	r3, #4

0800322c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800322c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800322e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003230:	d3f9      	bcc.n	8003226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003232:	4a0b      	ldr	r2, [pc, #44]	; (8003260 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003234:	4c0b      	ldr	r4, [pc, #44]	; (8003264 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003238:	e001      	b.n	800323e <LoopFillZerobss>

0800323a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800323a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800323c:	3204      	adds	r2, #4

0800323e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800323e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003240:	d3fb      	bcc.n	800323a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003242:	f7ff feff 	bl	8003044 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003246:	f011 fb0f 	bl	8014868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800324a:	f7fe f9c5 	bl	80015d8 <main>
  bx  lr    
 800324e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003250:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003258:	20000378 	.word	0x20000378
  ldr r2, =_sidata
 800325c:	08017c58 	.word	0x08017c58
  ldr r2, =_sbss
 8003260:	20000378 	.word	0x20000378
  ldr r4, =_ebss
 8003264:	2000db54 	.word	0x2000db54

08003268 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003268:	e7fe      	b.n	8003268 <ADC_IRQHandler>
	...

0800326c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003270:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <HAL_Init+0x40>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a0d      	ldr	r2, [pc, #52]	; (80032ac <HAL_Init+0x40>)
 8003276:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800327a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <HAL_Init+0x40>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a0a      	ldr	r2, [pc, #40]	; (80032ac <HAL_Init+0x40>)
 8003282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003286:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003288:	4b08      	ldr	r3, [pc, #32]	; (80032ac <HAL_Init+0x40>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a07      	ldr	r2, [pc, #28]	; (80032ac <HAL_Init+0x40>)
 800328e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003292:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003294:	2003      	movs	r0, #3
 8003296:	f000 f8fc 	bl	8003492 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800329a:	200f      	movs	r0, #15
 800329c:	f7ff fd60 	bl	8002d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032a0:	f7ff fc10 	bl	8002ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40023c00 	.word	0x40023c00

080032b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032b4:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <HAL_IncTick+0x20>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	461a      	mov	r2, r3
 80032ba:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <HAL_IncTick+0x24>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4413      	add	r3, r2
 80032c0:	4a04      	ldr	r2, [pc, #16]	; (80032d4 <HAL_IncTick+0x24>)
 80032c2:	6013      	str	r3, [r2, #0]
}
 80032c4:	bf00      	nop
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	2000023c 	.word	0x2000023c
 80032d4:	20001e20 	.word	0x20001e20

080032d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  return uwTick;
 80032dc:	4b03      	ldr	r3, [pc, #12]	; (80032ec <HAL_GetTick+0x14>)
 80032de:	681b      	ldr	r3, [r3, #0]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	20001e20 	.word	0x20001e20

080032f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032f8:	f7ff ffee 	bl	80032d8 <HAL_GetTick>
 80032fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003308:	d005      	beq.n	8003316 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800330a:	4b0a      	ldr	r3, [pc, #40]	; (8003334 <HAL_Delay+0x44>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	461a      	mov	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4413      	add	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003316:	bf00      	nop
 8003318:	f7ff ffde 	bl	80032d8 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	429a      	cmp	r2, r3
 8003326:	d8f7      	bhi.n	8003318 <HAL_Delay+0x28>
  {
  }
}
 8003328:	bf00      	nop
 800332a:	bf00      	nop
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	2000023c 	.word	0x2000023c

08003338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003348:	4b0c      	ldr	r3, [pc, #48]	; (800337c <__NVIC_SetPriorityGrouping+0x44>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003354:	4013      	ands	r3, r2
 8003356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800336a:	4a04      	ldr	r2, [pc, #16]	; (800337c <__NVIC_SetPriorityGrouping+0x44>)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	60d3      	str	r3, [r2, #12]
}
 8003370:	bf00      	nop
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	e000ed00 	.word	0xe000ed00

08003380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003384:	4b04      	ldr	r3, [pc, #16]	; (8003398 <__NVIC_GetPriorityGrouping+0x18>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	0a1b      	lsrs	r3, r3, #8
 800338a:	f003 0307 	and.w	r3, r3, #7
}
 800338e:	4618      	mov	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	e000ed00 	.word	0xe000ed00

0800339c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	db0b      	blt.n	80033c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	f003 021f 	and.w	r2, r3, #31
 80033b4:	4907      	ldr	r1, [pc, #28]	; (80033d4 <__NVIC_EnableIRQ+0x38>)
 80033b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ba:	095b      	lsrs	r3, r3, #5
 80033bc:	2001      	movs	r0, #1
 80033be:	fa00 f202 	lsl.w	r2, r0, r2
 80033c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	e000e100 	.word	0xe000e100

080033d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	6039      	str	r1, [r7, #0]
 80033e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	db0a      	blt.n	8003402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	490c      	ldr	r1, [pc, #48]	; (8003424 <__NVIC_SetPriority+0x4c>)
 80033f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f6:	0112      	lsls	r2, r2, #4
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	440b      	add	r3, r1
 80033fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003400:	e00a      	b.n	8003418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	b2da      	uxtb	r2, r3
 8003406:	4908      	ldr	r1, [pc, #32]	; (8003428 <__NVIC_SetPriority+0x50>)
 8003408:	79fb      	ldrb	r3, [r7, #7]
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	3b04      	subs	r3, #4
 8003410:	0112      	lsls	r2, r2, #4
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	440b      	add	r3, r1
 8003416:	761a      	strb	r2, [r3, #24]
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	e000e100 	.word	0xe000e100
 8003428:	e000ed00 	.word	0xe000ed00

0800342c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800342c:	b480      	push	{r7}
 800342e:	b089      	sub	sp, #36	; 0x24
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f1c3 0307 	rsb	r3, r3, #7
 8003446:	2b04      	cmp	r3, #4
 8003448:	bf28      	it	cs
 800344a:	2304      	movcs	r3, #4
 800344c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	3304      	adds	r3, #4
 8003452:	2b06      	cmp	r3, #6
 8003454:	d902      	bls.n	800345c <NVIC_EncodePriority+0x30>
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	3b03      	subs	r3, #3
 800345a:	e000      	b.n	800345e <NVIC_EncodePriority+0x32>
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003460:	f04f 32ff 	mov.w	r2, #4294967295
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43da      	mvns	r2, r3
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	401a      	ands	r2, r3
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003474:	f04f 31ff 	mov.w	r1, #4294967295
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	fa01 f303 	lsl.w	r3, r1, r3
 800347e:	43d9      	mvns	r1, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003484:	4313      	orrs	r3, r2
         );
}
 8003486:	4618      	mov	r0, r3
 8003488:	3724      	adds	r7, #36	; 0x24
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b082      	sub	sp, #8
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7ff ff4c 	bl	8003338 <__NVIC_SetPriorityGrouping>
}
 80034a0:	bf00      	nop
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
 80034b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034ba:	f7ff ff61 	bl	8003380 <__NVIC_GetPriorityGrouping>
 80034be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	68b9      	ldr	r1, [r7, #8]
 80034c4:	6978      	ldr	r0, [r7, #20]
 80034c6:	f7ff ffb1 	bl	800342c <NVIC_EncodePriority>
 80034ca:	4602      	mov	r2, r0
 80034cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034d0:	4611      	mov	r1, r2
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff ff80 	bl	80033d8 <__NVIC_SetPriority>
}
 80034d8:	bf00      	nop
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	4603      	mov	r3, r0
 80034e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff ff54 	bl	800339c <__NVIC_EnableIRQ>
}
 80034f4:	bf00      	nop
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003508:	f7ff fee6 	bl	80032d8 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e099      	b.n	800364c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0201 	bic.w	r2, r2, #1
 8003536:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003538:	e00f      	b.n	800355a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800353a:	f7ff fecd 	bl	80032d8 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b05      	cmp	r3, #5
 8003546:	d908      	bls.n	800355a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2220      	movs	r2, #32
 800354c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2203      	movs	r2, #3
 8003552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e078      	b.n	800364c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1e8      	bne.n	800353a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	4b38      	ldr	r3, [pc, #224]	; (8003654 <HAL_DMA_Init+0x158>)
 8003574:	4013      	ands	r3, r2
 8003576:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003586:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003592:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800359e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d107      	bne.n	80035c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035bc:	4313      	orrs	r3, r2
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f023 0307 	bic.w	r3, r3, #7
 80035da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	d117      	bne.n	800361e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00e      	beq.n	800361e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 fa7b 	bl	8003afc <DMA_CheckFifoParam>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2240      	movs	r2, #64	; 0x40
 8003610:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800361a:	2301      	movs	r3, #1
 800361c:	e016      	b.n	800364c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fa32 	bl	8003a90 <DMA_CalcBaseAndBitshift>
 800362c:	4603      	mov	r3, r0
 800362e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003634:	223f      	movs	r2, #63	; 0x3f
 8003636:	409a      	lsls	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3718      	adds	r7, #24
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	f010803f 	.word	0xf010803f

08003658 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003664:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003666:	f7ff fe37 	bl	80032d8 <HAL_GetTick>
 800366a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d008      	beq.n	800368a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2280      	movs	r2, #128	; 0x80
 800367c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e052      	b.n	8003730 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0216 	bic.w	r2, r2, #22
 8003698:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695a      	ldr	r2, [r3, #20]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d103      	bne.n	80036ba <HAL_DMA_Abort+0x62>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d007      	beq.n	80036ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 0208 	bic.w	r2, r2, #8
 80036c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0201 	bic.w	r2, r2, #1
 80036d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036da:	e013      	b.n	8003704 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036dc:	f7ff fdfc 	bl	80032d8 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b05      	cmp	r3, #5
 80036e8:	d90c      	bls.n	8003704 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2220      	movs	r2, #32
 80036ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2203      	movs	r2, #3
 80036f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e015      	b.n	8003730 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1e4      	bne.n	80036dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003716:	223f      	movs	r2, #63	; 0x3f
 8003718:	409a      	lsls	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d004      	beq.n	8003756 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2280      	movs	r2, #128	; 0x80
 8003750:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e00c      	b.n	8003770 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2205      	movs	r2, #5
 800375a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0201 	bic.w	r2, r2, #1
 800376c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003788:	4b8e      	ldr	r3, [pc, #568]	; (80039c4 <HAL_DMA_IRQHandler+0x248>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a8e      	ldr	r2, [pc, #568]	; (80039c8 <HAL_DMA_IRQHandler+0x24c>)
 800378e:	fba2 2303 	umull	r2, r3, r2, r3
 8003792:	0a9b      	lsrs	r3, r3, #10
 8003794:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a6:	2208      	movs	r2, #8
 80037a8:	409a      	lsls	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4013      	ands	r3, r2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d01a      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d013      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0204 	bic.w	r2, r2, #4
 80037ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d4:	2208      	movs	r2, #8
 80037d6:	409a      	lsls	r2, r3
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e0:	f043 0201 	orr.w	r2, r3, #1
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ec:	2201      	movs	r2, #1
 80037ee:	409a      	lsls	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d012      	beq.n	800381e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00b      	beq.n	800381e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380a:	2201      	movs	r2, #1
 800380c:	409a      	lsls	r2, r3
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003816:	f043 0202 	orr.w	r2, r3, #2
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003822:	2204      	movs	r2, #4
 8003824:	409a      	lsls	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4013      	ands	r3, r2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d012      	beq.n	8003854 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00b      	beq.n	8003854 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003840:	2204      	movs	r2, #4
 8003842:	409a      	lsls	r2, r3
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384c:	f043 0204 	orr.w	r2, r3, #4
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003858:	2210      	movs	r2, #16
 800385a:	409a      	lsls	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4013      	ands	r3, r2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d043      	beq.n	80038ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	d03c      	beq.n	80038ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003876:	2210      	movs	r2, #16
 8003878:	409a      	lsls	r2, r3
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d018      	beq.n	80038be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d108      	bne.n	80038ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d024      	beq.n	80038ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	4798      	blx	r3
 80038aa:	e01f      	b.n	80038ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d01b      	beq.n	80038ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	4798      	blx	r3
 80038bc:	e016      	b.n	80038ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d107      	bne.n	80038dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0208 	bic.w	r2, r2, #8
 80038da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f0:	2220      	movs	r2, #32
 80038f2:	409a      	lsls	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4013      	ands	r3, r2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 808f 	beq.w	8003a1c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0310 	and.w	r3, r3, #16
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 8087 	beq.w	8003a1c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003912:	2220      	movs	r2, #32
 8003914:	409a      	lsls	r2, r3
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b05      	cmp	r3, #5
 8003924:	d136      	bne.n	8003994 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0216 	bic.w	r2, r2, #22
 8003934:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695a      	ldr	r2, [r3, #20]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003944:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	2b00      	cmp	r3, #0
 800394c:	d103      	bne.n	8003956 <HAL_DMA_IRQHandler+0x1da>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003952:	2b00      	cmp	r3, #0
 8003954:	d007      	beq.n	8003966 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0208 	bic.w	r2, r2, #8
 8003964:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396a:	223f      	movs	r2, #63	; 0x3f
 800396c:	409a      	lsls	r2, r3
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003986:	2b00      	cmp	r3, #0
 8003988:	d07e      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	4798      	blx	r3
        }
        return;
 8003992:	e079      	b.n	8003a88 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d01d      	beq.n	80039de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10d      	bne.n	80039cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d031      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	4798      	blx	r3
 80039c0:	e02c      	b.n	8003a1c <HAL_DMA_IRQHandler+0x2a0>
 80039c2:	bf00      	nop
 80039c4:	20000234 	.word	0x20000234
 80039c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d023      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	4798      	blx	r3
 80039dc:	e01e      	b.n	8003a1c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10f      	bne.n	8003a0c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0210 	bic.w	r2, r2, #16
 80039fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d032      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d022      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2205      	movs	r2, #5
 8003a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0201 	bic.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d307      	bcc.n	8003a64 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1f2      	bne.n	8003a48 <HAL_DMA_IRQHandler+0x2cc>
 8003a62:	e000      	b.n	8003a66 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003a64:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d005      	beq.n	8003a8a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	4798      	blx	r3
 8003a86:	e000      	b.n	8003a8a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003a88:	bf00      	nop
    }
  }
}
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	3b10      	subs	r3, #16
 8003aa0:	4a14      	ldr	r2, [pc, #80]	; (8003af4 <DMA_CalcBaseAndBitshift+0x64>)
 8003aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa6:	091b      	lsrs	r3, r3, #4
 8003aa8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003aaa:	4a13      	ldr	r2, [pc, #76]	; (8003af8 <DMA_CalcBaseAndBitshift+0x68>)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4413      	add	r3, r2
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2b03      	cmp	r3, #3
 8003abc:	d909      	bls.n	8003ad2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ac6:	f023 0303 	bic.w	r3, r3, #3
 8003aca:	1d1a      	adds	r2, r3, #4
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	659a      	str	r2, [r3, #88]	; 0x58
 8003ad0:	e007      	b.n	8003ae2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ada:	f023 0303 	bic.w	r3, r3, #3
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	aaaaaaab 	.word	0xaaaaaaab
 8003af8:	0801749c 	.word	0x0801749c

08003afc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b04:	2300      	movs	r3, #0
 8003b06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d11f      	bne.n	8003b56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	2b03      	cmp	r3, #3
 8003b1a:	d856      	bhi.n	8003bca <DMA_CheckFifoParam+0xce>
 8003b1c:	a201      	add	r2, pc, #4	; (adr r2, 8003b24 <DMA_CheckFifoParam+0x28>)
 8003b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b22:	bf00      	nop
 8003b24:	08003b35 	.word	0x08003b35
 8003b28:	08003b47 	.word	0x08003b47
 8003b2c:	08003b35 	.word	0x08003b35
 8003b30:	08003bcb 	.word	0x08003bcb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d046      	beq.n	8003bce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b44:	e043      	b.n	8003bce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b4e:	d140      	bne.n	8003bd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b54:	e03d      	b.n	8003bd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b5e:	d121      	bne.n	8003ba4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	2b03      	cmp	r3, #3
 8003b64:	d837      	bhi.n	8003bd6 <DMA_CheckFifoParam+0xda>
 8003b66:	a201      	add	r2, pc, #4	; (adr r2, 8003b6c <DMA_CheckFifoParam+0x70>)
 8003b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6c:	08003b7d 	.word	0x08003b7d
 8003b70:	08003b83 	.word	0x08003b83
 8003b74:	08003b7d 	.word	0x08003b7d
 8003b78:	08003b95 	.word	0x08003b95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b80:	e030      	b.n	8003be4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d025      	beq.n	8003bda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b92:	e022      	b.n	8003bda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b9c:	d11f      	bne.n	8003bde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ba2:	e01c      	b.n	8003bde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d903      	bls.n	8003bb2 <DMA_CheckFifoParam+0xb6>
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2b03      	cmp	r3, #3
 8003bae:	d003      	beq.n	8003bb8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003bb0:	e018      	b.n	8003be4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb6:	e015      	b.n	8003be4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00e      	beq.n	8003be2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003bc8:	e00b      	b.n	8003be2 <DMA_CheckFifoParam+0xe6>
      break;
 8003bca:	bf00      	nop
 8003bcc:	e00a      	b.n	8003be4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bce:	bf00      	nop
 8003bd0:	e008      	b.n	8003be4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bd2:	bf00      	nop
 8003bd4:	e006      	b.n	8003be4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bd6:	bf00      	nop
 8003bd8:	e004      	b.n	8003be4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bda:	bf00      	nop
 8003bdc:	e002      	b.n	8003be4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003bde:	bf00      	nop
 8003be0:	e000      	b.n	8003be4 <DMA_CheckFifoParam+0xe8>
      break;
 8003be2:	bf00      	nop
    }
  } 
  
  return status; 
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop

08003bf4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003c06:	4b23      	ldr	r3, [pc, #140]	; (8003c94 <HAL_FLASH_Program+0xa0>)
 8003c08:	7e1b      	ldrb	r3, [r3, #24]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d101      	bne.n	8003c12 <HAL_FLASH_Program+0x1e>
 8003c0e:	2302      	movs	r3, #2
 8003c10:	e03b      	b.n	8003c8a <HAL_FLASH_Program+0x96>
 8003c12:	4b20      	ldr	r3, [pc, #128]	; (8003c94 <HAL_FLASH_Program+0xa0>)
 8003c14:	2201      	movs	r2, #1
 8003c16:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003c18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c1c:	f000 f870 	bl	8003d00 <FLASH_WaitForLastOperation>
 8003c20:	4603      	mov	r3, r0
 8003c22:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003c24:	7dfb      	ldrb	r3, [r7, #23]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d12b      	bne.n	8003c82 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d105      	bne.n	8003c3c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003c30:	783b      	ldrb	r3, [r7, #0]
 8003c32:	4619      	mov	r1, r3
 8003c34:	68b8      	ldr	r0, [r7, #8]
 8003c36:	f000 f91b 	bl	8003e70 <FLASH_Program_Byte>
 8003c3a:	e016      	b.n	8003c6a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d105      	bne.n	8003c4e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003c42:	883b      	ldrh	r3, [r7, #0]
 8003c44:	4619      	mov	r1, r3
 8003c46:	68b8      	ldr	r0, [r7, #8]
 8003c48:	f000 f8ee 	bl	8003e28 <FLASH_Program_HalfWord>
 8003c4c:	e00d      	b.n	8003c6a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d105      	bne.n	8003c60 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	4619      	mov	r1, r3
 8003c58:	68b8      	ldr	r0, [r7, #8]
 8003c5a:	f000 f8c3 	bl	8003de4 <FLASH_Program_Word>
 8003c5e:	e004      	b.n	8003c6a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003c60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c64:	68b8      	ldr	r0, [r7, #8]
 8003c66:	f000 f88b 	bl	8003d80 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003c6a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c6e:	f000 f847 	bl	8003d00 <FLASH_WaitForLastOperation>
 8003c72:	4603      	mov	r3, r0
 8003c74:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003c76:	4b08      	ldr	r3, [pc, #32]	; (8003c98 <HAL_FLASH_Program+0xa4>)
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	4a07      	ldr	r2, [pc, #28]	; (8003c98 <HAL_FLASH_Program+0xa4>)
 8003c7c:	f023 0301 	bic.w	r3, r3, #1
 8003c80:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003c82:	4b04      	ldr	r3, [pc, #16]	; (8003c94 <HAL_FLASH_Program+0xa0>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	20001e24 	.word	0x20001e24
 8003c98:	40023c00 	.word	0x40023c00

08003c9c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003ca6:	4b0b      	ldr	r3, [pc, #44]	; (8003cd4 <HAL_FLASH_Unlock+0x38>)
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	da0b      	bge.n	8003cc6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003cae:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <HAL_FLASH_Unlock+0x38>)
 8003cb0:	4a09      	ldr	r2, [pc, #36]	; (8003cd8 <HAL_FLASH_Unlock+0x3c>)
 8003cb2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003cb4:	4b07      	ldr	r3, [pc, #28]	; (8003cd4 <HAL_FLASH_Unlock+0x38>)
 8003cb6:	4a09      	ldr	r2, [pc, #36]	; (8003cdc <HAL_FLASH_Unlock+0x40>)
 8003cb8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003cba:	4b06      	ldr	r3, [pc, #24]	; (8003cd4 <HAL_FLASH_Unlock+0x38>)
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	da01      	bge.n	8003cc6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003cc6:	79fb      	ldrb	r3, [r7, #7]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	40023c00 	.word	0x40023c00
 8003cd8:	45670123 	.word	0x45670123
 8003cdc:	cdef89ab 	.word	0xcdef89ab

08003ce0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003ce4:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <HAL_FLASH_Lock+0x1c>)
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	4a04      	ldr	r2, [pc, #16]	; (8003cfc <HAL_FLASH_Lock+0x1c>)
 8003cea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cee:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	40023c00 	.word	0x40023c00

08003d00 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d0c:	4b1a      	ldr	r3, [pc, #104]	; (8003d78 <FLASH_WaitForLastOperation+0x78>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003d12:	f7ff fae1 	bl	80032d8 <HAL_GetTick>
 8003d16:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003d18:	e010      	b.n	8003d3c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d20:	d00c      	beq.n	8003d3c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d007      	beq.n	8003d38 <FLASH_WaitForLastOperation+0x38>
 8003d28:	f7ff fad6 	bl	80032d8 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d201      	bcs.n	8003d3c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e019      	b.n	8003d70 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003d3c:	4b0f      	ldr	r3, [pc, #60]	; (8003d7c <FLASH_WaitForLastOperation+0x7c>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1e8      	bne.n	8003d1a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003d48:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <FLASH_WaitForLastOperation+0x7c>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003d54:	4b09      	ldr	r3, [pc, #36]	; (8003d7c <FLASH_WaitForLastOperation+0x7c>)
 8003d56:	2201      	movs	r2, #1
 8003d58:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003d5a:	4b08      	ldr	r3, [pc, #32]	; (8003d7c <FLASH_WaitForLastOperation+0x7c>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003d66:	f000 f8a5 	bl	8003eb4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
  
}  
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	20001e24 	.word	0x20001e24
 8003d7c:	40023c00 	.word	0x40023c00

08003d80 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003d8c:	4b14      	ldr	r3, [pc, #80]	; (8003de0 <FLASH_Program_DoubleWord+0x60>)
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	4a13      	ldr	r2, [pc, #76]	; (8003de0 <FLASH_Program_DoubleWord+0x60>)
 8003d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003d98:	4b11      	ldr	r3, [pc, #68]	; (8003de0 <FLASH_Program_DoubleWord+0x60>)
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	4a10      	ldr	r2, [pc, #64]	; (8003de0 <FLASH_Program_DoubleWord+0x60>)
 8003d9e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003da2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003da4:	4b0e      	ldr	r3, [pc, #56]	; (8003de0 <FLASH_Program_DoubleWord+0x60>)
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	4a0d      	ldr	r2, [pc, #52]	; (8003de0 <FLASH_Program_DoubleWord+0x60>)
 8003daa:	f043 0301 	orr.w	r3, r3, #1
 8003dae:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003db6:	f3bf 8f6f 	isb	sy
}
 8003dba:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003dbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003dc0:	f04f 0200 	mov.w	r2, #0
 8003dc4:	f04f 0300 	mov.w	r3, #0
 8003dc8:	000a      	movs	r2, r1
 8003dca:	2300      	movs	r3, #0
 8003dcc:	68f9      	ldr	r1, [r7, #12]
 8003dce:	3104      	adds	r1, #4
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	600b      	str	r3, [r1, #0]
}
 8003dd4:	bf00      	nop
 8003dd6:	3714      	adds	r7, #20
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	40023c00 	.word	0x40023c00

08003de4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003dee:	4b0d      	ldr	r3, [pc, #52]	; (8003e24 <FLASH_Program_Word+0x40>)
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	4a0c      	ldr	r2, [pc, #48]	; (8003e24 <FLASH_Program_Word+0x40>)
 8003df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003dfa:	4b0a      	ldr	r3, [pc, #40]	; (8003e24 <FLASH_Program_Word+0x40>)
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	4a09      	ldr	r2, [pc, #36]	; (8003e24 <FLASH_Program_Word+0x40>)
 8003e00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e04:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003e06:	4b07      	ldr	r3, [pc, #28]	; (8003e24 <FLASH_Program_Word+0x40>)
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	4a06      	ldr	r2, [pc, #24]	; (8003e24 <FLASH_Program_Word+0x40>)
 8003e0c:	f043 0301 	orr.w	r3, r3, #1
 8003e10:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	601a      	str	r2, [r3, #0]
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	40023c00 	.word	0x40023c00

08003e28 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	460b      	mov	r3, r1
 8003e32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003e34:	4b0d      	ldr	r3, [pc, #52]	; (8003e6c <FLASH_Program_HalfWord+0x44>)
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	4a0c      	ldr	r2, [pc, #48]	; (8003e6c <FLASH_Program_HalfWord+0x44>)
 8003e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003e40:	4b0a      	ldr	r3, [pc, #40]	; (8003e6c <FLASH_Program_HalfWord+0x44>)
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	4a09      	ldr	r2, [pc, #36]	; (8003e6c <FLASH_Program_HalfWord+0x44>)
 8003e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003e4c:	4b07      	ldr	r3, [pc, #28]	; (8003e6c <FLASH_Program_HalfWord+0x44>)
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	4a06      	ldr	r2, [pc, #24]	; (8003e6c <FLASH_Program_HalfWord+0x44>)
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	887a      	ldrh	r2, [r7, #2]
 8003e5c:	801a      	strh	r2, [r3, #0]
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	40023c00 	.word	0x40023c00

08003e70 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	460b      	mov	r3, r1
 8003e7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003e7c:	4b0c      	ldr	r3, [pc, #48]	; (8003eb0 <FLASH_Program_Byte+0x40>)
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	4a0b      	ldr	r2, [pc, #44]	; (8003eb0 <FLASH_Program_Byte+0x40>)
 8003e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003e88:	4b09      	ldr	r3, [pc, #36]	; (8003eb0 <FLASH_Program_Byte+0x40>)
 8003e8a:	4a09      	ldr	r2, [pc, #36]	; (8003eb0 <FLASH_Program_Byte+0x40>)
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003e90:	4b07      	ldr	r3, [pc, #28]	; (8003eb0 <FLASH_Program_Byte+0x40>)
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	4a06      	ldr	r2, [pc, #24]	; (8003eb0 <FLASH_Program_Byte+0x40>)
 8003e96:	f043 0301 	orr.w	r3, r3, #1
 8003e9a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	78fa      	ldrb	r2, [r7, #3]
 8003ea0:	701a      	strb	r2, [r3, #0]
}
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	40023c00 	.word	0x40023c00

08003eb4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003eb8:	4b27      	ldr	r3, [pc, #156]	; (8003f58 <FLASH_SetErrorCode+0xa4>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f003 0310 	and.w	r3, r3, #16
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d008      	beq.n	8003ed6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003ec4:	4b25      	ldr	r3, [pc, #148]	; (8003f5c <FLASH_SetErrorCode+0xa8>)
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	f043 0310 	orr.w	r3, r3, #16
 8003ecc:	4a23      	ldr	r2, [pc, #140]	; (8003f5c <FLASH_SetErrorCode+0xa8>)
 8003ece:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003ed0:	4b21      	ldr	r3, [pc, #132]	; (8003f58 <FLASH_SetErrorCode+0xa4>)
 8003ed2:	2210      	movs	r2, #16
 8003ed4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003ed6:	4b20      	ldr	r3, [pc, #128]	; (8003f58 <FLASH_SetErrorCode+0xa4>)
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f003 0320 	and.w	r3, r3, #32
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d008      	beq.n	8003ef4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003ee2:	4b1e      	ldr	r3, [pc, #120]	; (8003f5c <FLASH_SetErrorCode+0xa8>)
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	f043 0308 	orr.w	r3, r3, #8
 8003eea:	4a1c      	ldr	r2, [pc, #112]	; (8003f5c <FLASH_SetErrorCode+0xa8>)
 8003eec:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003eee:	4b1a      	ldr	r3, [pc, #104]	; (8003f58 <FLASH_SetErrorCode+0xa4>)
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003ef4:	4b18      	ldr	r3, [pc, #96]	; (8003f58 <FLASH_SetErrorCode+0xa4>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d008      	beq.n	8003f12 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003f00:	4b16      	ldr	r3, [pc, #88]	; (8003f5c <FLASH_SetErrorCode+0xa8>)
 8003f02:	69db      	ldr	r3, [r3, #28]
 8003f04:	f043 0304 	orr.w	r3, r3, #4
 8003f08:	4a14      	ldr	r2, [pc, #80]	; (8003f5c <FLASH_SetErrorCode+0xa8>)
 8003f0a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003f0c:	4b12      	ldr	r3, [pc, #72]	; (8003f58 <FLASH_SetErrorCode+0xa4>)
 8003f0e:	2240      	movs	r2, #64	; 0x40
 8003f10:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003f12:	4b11      	ldr	r3, [pc, #68]	; (8003f58 <FLASH_SetErrorCode+0xa4>)
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d008      	beq.n	8003f30 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003f1e:	4b0f      	ldr	r3, [pc, #60]	; (8003f5c <FLASH_SetErrorCode+0xa8>)
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f043 0302 	orr.w	r3, r3, #2
 8003f26:	4a0d      	ldr	r2, [pc, #52]	; (8003f5c <FLASH_SetErrorCode+0xa8>)
 8003f28:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003f2a:	4b0b      	ldr	r3, [pc, #44]	; (8003f58 <FLASH_SetErrorCode+0xa4>)
 8003f2c:	2280      	movs	r2, #128	; 0x80
 8003f2e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003f30:	4b09      	ldr	r3, [pc, #36]	; (8003f58 <FLASH_SetErrorCode+0xa4>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d008      	beq.n	8003f4e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003f3c:	4b07      	ldr	r3, [pc, #28]	; (8003f5c <FLASH_SetErrorCode+0xa8>)
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	f043 0320 	orr.w	r3, r3, #32
 8003f44:	4a05      	ldr	r2, [pc, #20]	; (8003f5c <FLASH_SetErrorCode+0xa8>)
 8003f46:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003f48:	4b03      	ldr	r3, [pc, #12]	; (8003f58 <FLASH_SetErrorCode+0xa4>)
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	60da      	str	r2, [r3, #12]
  }
}
 8003f4e:	bf00      	nop
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	40023c00 	.word	0x40023c00
 8003f5c:	20001e24 	.word	0x20001e24

08003f60 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003f72:	4b31      	ldr	r3, [pc, #196]	; (8004038 <HAL_FLASHEx_Erase+0xd8>)
 8003f74:	7e1b      	ldrb	r3, [r3, #24]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d101      	bne.n	8003f7e <HAL_FLASHEx_Erase+0x1e>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e058      	b.n	8004030 <HAL_FLASHEx_Erase+0xd0>
 8003f7e:	4b2e      	ldr	r3, [pc, #184]	; (8004038 <HAL_FLASHEx_Erase+0xd8>)
 8003f80:	2201      	movs	r2, #1
 8003f82:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f84:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003f88:	f7ff feba 	bl	8003d00 <FLASH_WaitForLastOperation>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d148      	bne.n	8004028 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	f04f 32ff 	mov.w	r2, #4294967295
 8003f9c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d115      	bne.n	8003fd2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4610      	mov	r0, r2
 8003fb4:	f000 f844 	bl	8004040 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003fb8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003fbc:	f7ff fea0 	bl	8003d00 <FLASH_WaitForLastOperation>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003fc4:	4b1d      	ldr	r3, [pc, #116]	; (800403c <HAL_FLASHEx_Erase+0xdc>)
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	4a1c      	ldr	r2, [pc, #112]	; (800403c <HAL_FLASHEx_Erase+0xdc>)
 8003fca:	f023 0304 	bic.w	r3, r3, #4
 8003fce:	6113      	str	r3, [r2, #16]
 8003fd0:	e028      	b.n	8004024 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	60bb      	str	r3, [r7, #8]
 8003fd8:	e01c      	b.n	8004014 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	68b8      	ldr	r0, [r7, #8]
 8003fe4:	f000 f850 	bl	8004088 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003fe8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003fec:	f7ff fe88 	bl	8003d00 <FLASH_WaitForLastOperation>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003ff4:	4b11      	ldr	r3, [pc, #68]	; (800403c <HAL_FLASHEx_Erase+0xdc>)
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	4a10      	ldr	r2, [pc, #64]	; (800403c <HAL_FLASHEx_Erase+0xdc>)
 8003ffa:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8003ffe:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8004000:	7bfb      	ldrb	r3, [r7, #15]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	601a      	str	r2, [r3, #0]
          break;
 800400c:	e00a      	b.n	8004024 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	3301      	adds	r3, #1
 8004012:	60bb      	str	r3, [r7, #8]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	4413      	add	r3, r2
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	429a      	cmp	r2, r3
 8004022:	d3da      	bcc.n	8003fda <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004024:	f000 f878 	bl	8004118 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004028:	4b03      	ldr	r3, [pc, #12]	; (8004038 <HAL_FLASHEx_Erase+0xd8>)
 800402a:	2200      	movs	r2, #0
 800402c:	761a      	strb	r2, [r3, #24]

  return status;
 800402e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	20001e24 	.word	0x20001e24
 800403c:	40023c00 	.word	0x40023c00

08004040 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	4603      	mov	r3, r0
 8004048:	6039      	str	r1, [r7, #0]
 800404a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800404c:	4b0d      	ldr	r3, [pc, #52]	; (8004084 <FLASH_MassErase+0x44>)
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	4a0c      	ldr	r2, [pc, #48]	; (8004084 <FLASH_MassErase+0x44>)
 8004052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004056:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8004058:	4b0a      	ldr	r3, [pc, #40]	; (8004084 <FLASH_MassErase+0x44>)
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	4a09      	ldr	r2, [pc, #36]	; (8004084 <FLASH_MassErase+0x44>)
 800405e:	f043 0304 	orr.w	r3, r3, #4
 8004062:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8004064:	4b07      	ldr	r3, [pc, #28]	; (8004084 <FLASH_MassErase+0x44>)
 8004066:	691a      	ldr	r2, [r3, #16]
 8004068:	79fb      	ldrb	r3, [r7, #7]
 800406a:	021b      	lsls	r3, r3, #8
 800406c:	4313      	orrs	r3, r2
 800406e:	4a05      	ldr	r2, [pc, #20]	; (8004084 <FLASH_MassErase+0x44>)
 8004070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004074:	6113      	str	r3, [r2, #16]
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	40023c00 	.word	0x40023c00

08004088 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004098:	78fb      	ldrb	r3, [r7, #3]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d102      	bne.n	80040a4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800409e:	2300      	movs	r3, #0
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	e010      	b.n	80040c6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80040a4:	78fb      	ldrb	r3, [r7, #3]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d103      	bne.n	80040b2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80040aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	e009      	b.n	80040c6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80040b2:	78fb      	ldrb	r3, [r7, #3]
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d103      	bne.n	80040c0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80040b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	e002      	b.n	80040c6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80040c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80040c4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80040c6:	4b13      	ldr	r3, [pc, #76]	; (8004114 <FLASH_Erase_Sector+0x8c>)
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	4a12      	ldr	r2, [pc, #72]	; (8004114 <FLASH_Erase_Sector+0x8c>)
 80040cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80040d2:	4b10      	ldr	r3, [pc, #64]	; (8004114 <FLASH_Erase_Sector+0x8c>)
 80040d4:	691a      	ldr	r2, [r3, #16]
 80040d6:	490f      	ldr	r1, [pc, #60]	; (8004114 <FLASH_Erase_Sector+0x8c>)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4313      	orrs	r3, r2
 80040dc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80040de:	4b0d      	ldr	r3, [pc, #52]	; (8004114 <FLASH_Erase_Sector+0x8c>)
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	4a0c      	ldr	r2, [pc, #48]	; (8004114 <FLASH_Erase_Sector+0x8c>)
 80040e4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80040e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80040ea:	4b0a      	ldr	r3, [pc, #40]	; (8004114 <FLASH_Erase_Sector+0x8c>)
 80040ec:	691a      	ldr	r2, [r3, #16]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	4313      	orrs	r3, r2
 80040f4:	4a07      	ldr	r2, [pc, #28]	; (8004114 <FLASH_Erase_Sector+0x8c>)
 80040f6:	f043 0302 	orr.w	r3, r3, #2
 80040fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80040fc:	4b05      	ldr	r3, [pc, #20]	; (8004114 <FLASH_Erase_Sector+0x8c>)
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	4a04      	ldr	r2, [pc, #16]	; (8004114 <FLASH_Erase_Sector+0x8c>)
 8004102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004106:	6113      	str	r3, [r2, #16]
}
 8004108:	bf00      	nop
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	40023c00 	.word	0x40023c00

08004118 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800411c:	4b20      	ldr	r3, [pc, #128]	; (80041a0 <FLASH_FlushCaches+0x88>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004124:	2b00      	cmp	r3, #0
 8004126:	d017      	beq.n	8004158 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004128:	4b1d      	ldr	r3, [pc, #116]	; (80041a0 <FLASH_FlushCaches+0x88>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a1c      	ldr	r2, [pc, #112]	; (80041a0 <FLASH_FlushCaches+0x88>)
 800412e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004132:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004134:	4b1a      	ldr	r3, [pc, #104]	; (80041a0 <FLASH_FlushCaches+0x88>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a19      	ldr	r2, [pc, #100]	; (80041a0 <FLASH_FlushCaches+0x88>)
 800413a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800413e:	6013      	str	r3, [r2, #0]
 8004140:	4b17      	ldr	r3, [pc, #92]	; (80041a0 <FLASH_FlushCaches+0x88>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a16      	ldr	r2, [pc, #88]	; (80041a0 <FLASH_FlushCaches+0x88>)
 8004146:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800414a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800414c:	4b14      	ldr	r3, [pc, #80]	; (80041a0 <FLASH_FlushCaches+0x88>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a13      	ldr	r2, [pc, #76]	; (80041a0 <FLASH_FlushCaches+0x88>)
 8004152:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004156:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004158:	4b11      	ldr	r3, [pc, #68]	; (80041a0 <FLASH_FlushCaches+0x88>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004160:	2b00      	cmp	r3, #0
 8004162:	d017      	beq.n	8004194 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004164:	4b0e      	ldr	r3, [pc, #56]	; (80041a0 <FLASH_FlushCaches+0x88>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a0d      	ldr	r2, [pc, #52]	; (80041a0 <FLASH_FlushCaches+0x88>)
 800416a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800416e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004170:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <FLASH_FlushCaches+0x88>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a0a      	ldr	r2, [pc, #40]	; (80041a0 <FLASH_FlushCaches+0x88>)
 8004176:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800417a:	6013      	str	r3, [r2, #0]
 800417c:	4b08      	ldr	r3, [pc, #32]	; (80041a0 <FLASH_FlushCaches+0x88>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a07      	ldr	r2, [pc, #28]	; (80041a0 <FLASH_FlushCaches+0x88>)
 8004182:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004186:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004188:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <FLASH_FlushCaches+0x88>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a04      	ldr	r2, [pc, #16]	; (80041a0 <FLASH_FlushCaches+0x88>)
 800418e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004192:	6013      	str	r3, [r2, #0]
  }
}
 8004194:	bf00      	nop
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	40023c00 	.word	0x40023c00

080041a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b089      	sub	sp, #36	; 0x24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041ba:	2300      	movs	r3, #0
 80041bc:	61fb      	str	r3, [r7, #28]
 80041be:	e16b      	b.n	8004498 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041c0:	2201      	movs	r2, #1
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	4013      	ands	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	429a      	cmp	r2, r3
 80041da:	f040 815a 	bne.w	8004492 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d005      	beq.n	80041f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d130      	bne.n	8004258 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	2203      	movs	r2, #3
 8004202:	fa02 f303 	lsl.w	r3, r2, r3
 8004206:	43db      	mvns	r3, r3
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	4013      	ands	r3, r2
 800420c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	4313      	orrs	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800422c:	2201      	movs	r2, #1
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	fa02 f303 	lsl.w	r3, r2, r3
 8004234:	43db      	mvns	r3, r3
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	4013      	ands	r3, r2
 800423a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	091b      	lsrs	r3, r3, #4
 8004242:	f003 0201 	and.w	r2, r3, #1
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	fa02 f303 	lsl.w	r3, r2, r3
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	4313      	orrs	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f003 0303 	and.w	r3, r3, #3
 8004260:	2b03      	cmp	r3, #3
 8004262:	d017      	beq.n	8004294 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	2203      	movs	r2, #3
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	43db      	mvns	r3, r3
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	4013      	ands	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	4313      	orrs	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 0303 	and.w	r3, r3, #3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d123      	bne.n	80042e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	08da      	lsrs	r2, r3, #3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3208      	adds	r2, #8
 80042a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	220f      	movs	r2, #15
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	43db      	mvns	r3, r3
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	4013      	ands	r3, r2
 80042c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	691a      	ldr	r2, [r3, #16]
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	08da      	lsrs	r2, r3, #3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	3208      	adds	r2, #8
 80042e2:	69b9      	ldr	r1, [r7, #24]
 80042e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	2203      	movs	r2, #3
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	43db      	mvns	r3, r3
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	4013      	ands	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f003 0203 	and.w	r2, r3, #3
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	4313      	orrs	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 80b4 	beq.w	8004492 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800432a:	2300      	movs	r3, #0
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	4b60      	ldr	r3, [pc, #384]	; (80044b0 <HAL_GPIO_Init+0x30c>)
 8004330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004332:	4a5f      	ldr	r2, [pc, #380]	; (80044b0 <HAL_GPIO_Init+0x30c>)
 8004334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004338:	6453      	str	r3, [r2, #68]	; 0x44
 800433a:	4b5d      	ldr	r3, [pc, #372]	; (80044b0 <HAL_GPIO_Init+0x30c>)
 800433c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004346:	4a5b      	ldr	r2, [pc, #364]	; (80044b4 <HAL_GPIO_Init+0x310>)
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	089b      	lsrs	r3, r3, #2
 800434c:	3302      	adds	r3, #2
 800434e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004352:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	220f      	movs	r2, #15
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	43db      	mvns	r3, r3
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	4013      	ands	r3, r2
 8004368:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a52      	ldr	r2, [pc, #328]	; (80044b8 <HAL_GPIO_Init+0x314>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d02b      	beq.n	80043ca <HAL_GPIO_Init+0x226>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a51      	ldr	r2, [pc, #324]	; (80044bc <HAL_GPIO_Init+0x318>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d025      	beq.n	80043c6 <HAL_GPIO_Init+0x222>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a50      	ldr	r2, [pc, #320]	; (80044c0 <HAL_GPIO_Init+0x31c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d01f      	beq.n	80043c2 <HAL_GPIO_Init+0x21e>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a4f      	ldr	r2, [pc, #316]	; (80044c4 <HAL_GPIO_Init+0x320>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d019      	beq.n	80043be <HAL_GPIO_Init+0x21a>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a4e      	ldr	r2, [pc, #312]	; (80044c8 <HAL_GPIO_Init+0x324>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d013      	beq.n	80043ba <HAL_GPIO_Init+0x216>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a4d      	ldr	r2, [pc, #308]	; (80044cc <HAL_GPIO_Init+0x328>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00d      	beq.n	80043b6 <HAL_GPIO_Init+0x212>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a4c      	ldr	r2, [pc, #304]	; (80044d0 <HAL_GPIO_Init+0x32c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d007      	beq.n	80043b2 <HAL_GPIO_Init+0x20e>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a4b      	ldr	r2, [pc, #300]	; (80044d4 <HAL_GPIO_Init+0x330>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d101      	bne.n	80043ae <HAL_GPIO_Init+0x20a>
 80043aa:	2307      	movs	r3, #7
 80043ac:	e00e      	b.n	80043cc <HAL_GPIO_Init+0x228>
 80043ae:	2308      	movs	r3, #8
 80043b0:	e00c      	b.n	80043cc <HAL_GPIO_Init+0x228>
 80043b2:	2306      	movs	r3, #6
 80043b4:	e00a      	b.n	80043cc <HAL_GPIO_Init+0x228>
 80043b6:	2305      	movs	r3, #5
 80043b8:	e008      	b.n	80043cc <HAL_GPIO_Init+0x228>
 80043ba:	2304      	movs	r3, #4
 80043bc:	e006      	b.n	80043cc <HAL_GPIO_Init+0x228>
 80043be:	2303      	movs	r3, #3
 80043c0:	e004      	b.n	80043cc <HAL_GPIO_Init+0x228>
 80043c2:	2302      	movs	r3, #2
 80043c4:	e002      	b.n	80043cc <HAL_GPIO_Init+0x228>
 80043c6:	2301      	movs	r3, #1
 80043c8:	e000      	b.n	80043cc <HAL_GPIO_Init+0x228>
 80043ca:	2300      	movs	r3, #0
 80043cc:	69fa      	ldr	r2, [r7, #28]
 80043ce:	f002 0203 	and.w	r2, r2, #3
 80043d2:	0092      	lsls	r2, r2, #2
 80043d4:	4093      	lsls	r3, r2
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	4313      	orrs	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043dc:	4935      	ldr	r1, [pc, #212]	; (80044b4 <HAL_GPIO_Init+0x310>)
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	089b      	lsrs	r3, r3, #2
 80043e2:	3302      	adds	r3, #2
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043ea:	4b3b      	ldr	r3, [pc, #236]	; (80044d8 <HAL_GPIO_Init+0x334>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	43db      	mvns	r3, r3
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	4013      	ands	r3, r2
 80043f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800440e:	4a32      	ldr	r2, [pc, #200]	; (80044d8 <HAL_GPIO_Init+0x334>)
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004414:	4b30      	ldr	r3, [pc, #192]	; (80044d8 <HAL_GPIO_Init+0x334>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	43db      	mvns	r3, r3
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	4013      	ands	r3, r2
 8004422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	4313      	orrs	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004438:	4a27      	ldr	r2, [pc, #156]	; (80044d8 <HAL_GPIO_Init+0x334>)
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800443e:	4b26      	ldr	r3, [pc, #152]	; (80044d8 <HAL_GPIO_Init+0x334>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	43db      	mvns	r3, r3
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	4013      	ands	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004462:	4a1d      	ldr	r2, [pc, #116]	; (80044d8 <HAL_GPIO_Init+0x334>)
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004468:	4b1b      	ldr	r3, [pc, #108]	; (80044d8 <HAL_GPIO_Init+0x334>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	43db      	mvns	r3, r3
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4013      	ands	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d003      	beq.n	800448c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800448c:	4a12      	ldr	r2, [pc, #72]	; (80044d8 <HAL_GPIO_Init+0x334>)
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	3301      	adds	r3, #1
 8004496:	61fb      	str	r3, [r7, #28]
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	2b0f      	cmp	r3, #15
 800449c:	f67f ae90 	bls.w	80041c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044a0:	bf00      	nop
 80044a2:	bf00      	nop
 80044a4:	3724      	adds	r7, #36	; 0x24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	40023800 	.word	0x40023800
 80044b4:	40013800 	.word	0x40013800
 80044b8:	40020000 	.word	0x40020000
 80044bc:	40020400 	.word	0x40020400
 80044c0:	40020800 	.word	0x40020800
 80044c4:	40020c00 	.word	0x40020c00
 80044c8:	40021000 	.word	0x40021000
 80044cc:	40021400 	.word	0x40021400
 80044d0:	40021800 	.word	0x40021800
 80044d4:	40021c00 	.word	0x40021c00
 80044d8:	40013c00 	.word	0x40013c00

080044dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	460b      	mov	r3, r1
 80044e6:	807b      	strh	r3, [r7, #2]
 80044e8:	4613      	mov	r3, r2
 80044ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044ec:	787b      	ldrb	r3, [r7, #1]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044f2:	887a      	ldrh	r2, [r7, #2]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044f8:	e003      	b.n	8004502 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044fa:	887b      	ldrh	r3, [r7, #2]
 80044fc:	041a      	lsls	r2, r3, #16
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	619a      	str	r2, [r3, #24]
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800450e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004510:	b08f      	sub	sp, #60	; 0x3c
 8004512:	af0a      	add	r7, sp, #40	; 0x28
 8004514:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e054      	b.n	80045ca <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d106      	bne.n	8004540 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f00f fdf4 	bl	8014128 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2203      	movs	r2, #3
 8004544:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800454c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004550:	2b00      	cmp	r3, #0
 8004552:	d102      	bne.n	800455a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4618      	mov	r0, r3
 8004560:	f004 fe04 	bl	800916c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	603b      	str	r3, [r7, #0]
 800456a:	687e      	ldr	r6, [r7, #4]
 800456c:	466d      	mov	r5, sp
 800456e:	f106 0410 	add.w	r4, r6, #16
 8004572:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004574:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004576:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004578:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800457a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800457e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004582:	1d33      	adds	r3, r6, #4
 8004584:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004586:	6838      	ldr	r0, [r7, #0]
 8004588:	f004 fd7e 	bl	8009088 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2101      	movs	r1, #1
 8004592:	4618      	mov	r0, r3
 8004594:	f004 fdfb 	bl	800918e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	603b      	str	r3, [r7, #0]
 800459e:	687e      	ldr	r6, [r7, #4]
 80045a0:	466d      	mov	r5, sp
 80045a2:	f106 0410 	add.w	r4, r6, #16
 80045a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80045b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80045b6:	1d33      	adds	r3, r6, #4
 80045b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045ba:	6838      	ldr	r0, [r7, #0]
 80045bc:	f004 ff84 	bl	80094c8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045d2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80045d2:	b590      	push	{r4, r7, lr}
 80045d4:	b089      	sub	sp, #36	; 0x24
 80045d6:	af04      	add	r7, sp, #16
 80045d8:	6078      	str	r0, [r7, #4]
 80045da:	4608      	mov	r0, r1
 80045dc:	4611      	mov	r1, r2
 80045de:	461a      	mov	r2, r3
 80045e0:	4603      	mov	r3, r0
 80045e2:	70fb      	strb	r3, [r7, #3]
 80045e4:	460b      	mov	r3, r1
 80045e6:	70bb      	strb	r3, [r7, #2]
 80045e8:	4613      	mov	r3, r2
 80045ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d101      	bne.n	80045fa <HAL_HCD_HC_Init+0x28>
 80045f6:	2302      	movs	r3, #2
 80045f8:	e076      	b.n	80046e8 <HAL_HCD_HC_Init+0x116>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8004602:	78fb      	ldrb	r3, [r7, #3]
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	212c      	movs	r1, #44	; 0x2c
 8004608:	fb01 f303 	mul.w	r3, r1, r3
 800460c:	4413      	add	r3, r2
 800460e:	333d      	adds	r3, #61	; 0x3d
 8004610:	2200      	movs	r2, #0
 8004612:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004614:	78fb      	ldrb	r3, [r7, #3]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	212c      	movs	r1, #44	; 0x2c
 800461a:	fb01 f303 	mul.w	r3, r1, r3
 800461e:	4413      	add	r3, r2
 8004620:	3338      	adds	r3, #56	; 0x38
 8004622:	787a      	ldrb	r2, [r7, #1]
 8004624:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004626:	78fb      	ldrb	r3, [r7, #3]
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	212c      	movs	r1, #44	; 0x2c
 800462c:	fb01 f303 	mul.w	r3, r1, r3
 8004630:	4413      	add	r3, r2
 8004632:	3340      	adds	r3, #64	; 0x40
 8004634:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004636:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004638:	78fb      	ldrb	r3, [r7, #3]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	212c      	movs	r1, #44	; 0x2c
 800463e:	fb01 f303 	mul.w	r3, r1, r3
 8004642:	4413      	add	r3, r2
 8004644:	3339      	adds	r3, #57	; 0x39
 8004646:	78fa      	ldrb	r2, [r7, #3]
 8004648:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800464a:	78fb      	ldrb	r3, [r7, #3]
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	212c      	movs	r1, #44	; 0x2c
 8004650:	fb01 f303 	mul.w	r3, r1, r3
 8004654:	4413      	add	r3, r2
 8004656:	333f      	adds	r3, #63	; 0x3f
 8004658:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800465c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800465e:	78fb      	ldrb	r3, [r7, #3]
 8004660:	78ba      	ldrb	r2, [r7, #2]
 8004662:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004666:	b2d0      	uxtb	r0, r2
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	212c      	movs	r1, #44	; 0x2c
 800466c:	fb01 f303 	mul.w	r3, r1, r3
 8004670:	4413      	add	r3, r2
 8004672:	333a      	adds	r3, #58	; 0x3a
 8004674:	4602      	mov	r2, r0
 8004676:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004678:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800467c:	2b00      	cmp	r3, #0
 800467e:	da09      	bge.n	8004694 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004680:	78fb      	ldrb	r3, [r7, #3]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	212c      	movs	r1, #44	; 0x2c
 8004686:	fb01 f303 	mul.w	r3, r1, r3
 800468a:	4413      	add	r3, r2
 800468c:	333b      	adds	r3, #59	; 0x3b
 800468e:	2201      	movs	r2, #1
 8004690:	701a      	strb	r2, [r3, #0]
 8004692:	e008      	b.n	80046a6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004694:	78fb      	ldrb	r3, [r7, #3]
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	212c      	movs	r1, #44	; 0x2c
 800469a:	fb01 f303 	mul.w	r3, r1, r3
 800469e:	4413      	add	r3, r2
 80046a0:	333b      	adds	r3, #59	; 0x3b
 80046a2:	2200      	movs	r2, #0
 80046a4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80046a6:	78fb      	ldrb	r3, [r7, #3]
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	212c      	movs	r1, #44	; 0x2c
 80046ac:	fb01 f303 	mul.w	r3, r1, r3
 80046b0:	4413      	add	r3, r2
 80046b2:	333c      	adds	r3, #60	; 0x3c
 80046b4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80046b8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6818      	ldr	r0, [r3, #0]
 80046be:	787c      	ldrb	r4, [r7, #1]
 80046c0:	78ba      	ldrb	r2, [r7, #2]
 80046c2:	78f9      	ldrb	r1, [r7, #3]
 80046c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80046c6:	9302      	str	r3, [sp, #8]
 80046c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80046cc:	9301      	str	r3, [sp, #4]
 80046ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	4623      	mov	r3, r4
 80046d6:	f005 f87d 	bl	80097d4 <USB_HC_Init>
 80046da:	4603      	mov	r3, r0
 80046dc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80046e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd90      	pop	{r4, r7, pc}

080046f0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	460b      	mov	r3, r1
 80046fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004706:	2b01      	cmp	r3, #1
 8004708:	d101      	bne.n	800470e <HAL_HCD_HC_Halt+0x1e>
 800470a:	2302      	movs	r3, #2
 800470c:	e00f      	b.n	800472e <HAL_HCD_HC_Halt+0x3e>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	78fa      	ldrb	r2, [r7, #3]
 800471c:	4611      	mov	r1, r2
 800471e:	4618      	mov	r0, r3
 8004720:	f005 facd 	bl	8009cbe <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800472c:	7bfb      	ldrb	r3, [r7, #15]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
	...

08004738 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	4608      	mov	r0, r1
 8004742:	4611      	mov	r1, r2
 8004744:	461a      	mov	r2, r3
 8004746:	4603      	mov	r3, r0
 8004748:	70fb      	strb	r3, [r7, #3]
 800474a:	460b      	mov	r3, r1
 800474c:	70bb      	strb	r3, [r7, #2]
 800474e:	4613      	mov	r3, r2
 8004750:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004752:	78fb      	ldrb	r3, [r7, #3]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	212c      	movs	r1, #44	; 0x2c
 8004758:	fb01 f303 	mul.w	r3, r1, r3
 800475c:	4413      	add	r3, r2
 800475e:	333b      	adds	r3, #59	; 0x3b
 8004760:	78ba      	ldrb	r2, [r7, #2]
 8004762:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004764:	78fb      	ldrb	r3, [r7, #3]
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	212c      	movs	r1, #44	; 0x2c
 800476a:	fb01 f303 	mul.w	r3, r1, r3
 800476e:	4413      	add	r3, r2
 8004770:	333f      	adds	r3, #63	; 0x3f
 8004772:	787a      	ldrb	r2, [r7, #1]
 8004774:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004776:	7c3b      	ldrb	r3, [r7, #16]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d112      	bne.n	80047a2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800477c:	78fb      	ldrb	r3, [r7, #3]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	212c      	movs	r1, #44	; 0x2c
 8004782:	fb01 f303 	mul.w	r3, r1, r3
 8004786:	4413      	add	r3, r2
 8004788:	3342      	adds	r3, #66	; 0x42
 800478a:	2203      	movs	r2, #3
 800478c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800478e:	78fb      	ldrb	r3, [r7, #3]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	212c      	movs	r1, #44	; 0x2c
 8004794:	fb01 f303 	mul.w	r3, r1, r3
 8004798:	4413      	add	r3, r2
 800479a:	333d      	adds	r3, #61	; 0x3d
 800479c:	7f3a      	ldrb	r2, [r7, #28]
 800479e:	701a      	strb	r2, [r3, #0]
 80047a0:	e008      	b.n	80047b4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80047a2:	78fb      	ldrb	r3, [r7, #3]
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	212c      	movs	r1, #44	; 0x2c
 80047a8:	fb01 f303 	mul.w	r3, r1, r3
 80047ac:	4413      	add	r3, r2
 80047ae:	3342      	adds	r3, #66	; 0x42
 80047b0:	2202      	movs	r2, #2
 80047b2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80047b4:	787b      	ldrb	r3, [r7, #1]
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	f200 80c6 	bhi.w	8004948 <HAL_HCD_HC_SubmitRequest+0x210>
 80047bc:	a201      	add	r2, pc, #4	; (adr r2, 80047c4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80047be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c2:	bf00      	nop
 80047c4:	080047d5 	.word	0x080047d5
 80047c8:	08004935 	.word	0x08004935
 80047cc:	08004839 	.word	0x08004839
 80047d0:	080048b7 	.word	0x080048b7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80047d4:	7c3b      	ldrb	r3, [r7, #16]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	f040 80b8 	bne.w	800494c <HAL_HCD_HC_SubmitRequest+0x214>
 80047dc:	78bb      	ldrb	r3, [r7, #2]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f040 80b4 	bne.w	800494c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80047e4:	8b3b      	ldrh	r3, [r7, #24]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d108      	bne.n	80047fc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80047ea:	78fb      	ldrb	r3, [r7, #3]
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	212c      	movs	r1, #44	; 0x2c
 80047f0:	fb01 f303 	mul.w	r3, r1, r3
 80047f4:	4413      	add	r3, r2
 80047f6:	3355      	adds	r3, #85	; 0x55
 80047f8:	2201      	movs	r2, #1
 80047fa:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80047fc:	78fb      	ldrb	r3, [r7, #3]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	212c      	movs	r1, #44	; 0x2c
 8004802:	fb01 f303 	mul.w	r3, r1, r3
 8004806:	4413      	add	r3, r2
 8004808:	3355      	adds	r3, #85	; 0x55
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d109      	bne.n	8004824 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004810:	78fb      	ldrb	r3, [r7, #3]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	212c      	movs	r1, #44	; 0x2c
 8004816:	fb01 f303 	mul.w	r3, r1, r3
 800481a:	4413      	add	r3, r2
 800481c:	3342      	adds	r3, #66	; 0x42
 800481e:	2200      	movs	r2, #0
 8004820:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004822:	e093      	b.n	800494c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004824:	78fb      	ldrb	r3, [r7, #3]
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	212c      	movs	r1, #44	; 0x2c
 800482a:	fb01 f303 	mul.w	r3, r1, r3
 800482e:	4413      	add	r3, r2
 8004830:	3342      	adds	r3, #66	; 0x42
 8004832:	2202      	movs	r2, #2
 8004834:	701a      	strb	r2, [r3, #0]
      break;
 8004836:	e089      	b.n	800494c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004838:	78bb      	ldrb	r3, [r7, #2]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d11d      	bne.n	800487a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800483e:	78fb      	ldrb	r3, [r7, #3]
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	212c      	movs	r1, #44	; 0x2c
 8004844:	fb01 f303 	mul.w	r3, r1, r3
 8004848:	4413      	add	r3, r2
 800484a:	3355      	adds	r3, #85	; 0x55
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d109      	bne.n	8004866 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004852:	78fb      	ldrb	r3, [r7, #3]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	212c      	movs	r1, #44	; 0x2c
 8004858:	fb01 f303 	mul.w	r3, r1, r3
 800485c:	4413      	add	r3, r2
 800485e:	3342      	adds	r3, #66	; 0x42
 8004860:	2200      	movs	r2, #0
 8004862:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004864:	e073      	b.n	800494e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004866:	78fb      	ldrb	r3, [r7, #3]
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	212c      	movs	r1, #44	; 0x2c
 800486c:	fb01 f303 	mul.w	r3, r1, r3
 8004870:	4413      	add	r3, r2
 8004872:	3342      	adds	r3, #66	; 0x42
 8004874:	2202      	movs	r2, #2
 8004876:	701a      	strb	r2, [r3, #0]
      break;
 8004878:	e069      	b.n	800494e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800487a:	78fb      	ldrb	r3, [r7, #3]
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	212c      	movs	r1, #44	; 0x2c
 8004880:	fb01 f303 	mul.w	r3, r1, r3
 8004884:	4413      	add	r3, r2
 8004886:	3354      	adds	r3, #84	; 0x54
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d109      	bne.n	80048a2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800488e:	78fb      	ldrb	r3, [r7, #3]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	212c      	movs	r1, #44	; 0x2c
 8004894:	fb01 f303 	mul.w	r3, r1, r3
 8004898:	4413      	add	r3, r2
 800489a:	3342      	adds	r3, #66	; 0x42
 800489c:	2200      	movs	r2, #0
 800489e:	701a      	strb	r2, [r3, #0]
      break;
 80048a0:	e055      	b.n	800494e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80048a2:	78fb      	ldrb	r3, [r7, #3]
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	212c      	movs	r1, #44	; 0x2c
 80048a8:	fb01 f303 	mul.w	r3, r1, r3
 80048ac:	4413      	add	r3, r2
 80048ae:	3342      	adds	r3, #66	; 0x42
 80048b0:	2202      	movs	r2, #2
 80048b2:	701a      	strb	r2, [r3, #0]
      break;
 80048b4:	e04b      	b.n	800494e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80048b6:	78bb      	ldrb	r3, [r7, #2]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d11d      	bne.n	80048f8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80048bc:	78fb      	ldrb	r3, [r7, #3]
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	212c      	movs	r1, #44	; 0x2c
 80048c2:	fb01 f303 	mul.w	r3, r1, r3
 80048c6:	4413      	add	r3, r2
 80048c8:	3355      	adds	r3, #85	; 0x55
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d109      	bne.n	80048e4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80048d0:	78fb      	ldrb	r3, [r7, #3]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	212c      	movs	r1, #44	; 0x2c
 80048d6:	fb01 f303 	mul.w	r3, r1, r3
 80048da:	4413      	add	r3, r2
 80048dc:	3342      	adds	r3, #66	; 0x42
 80048de:	2200      	movs	r2, #0
 80048e0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80048e2:	e034      	b.n	800494e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80048e4:	78fb      	ldrb	r3, [r7, #3]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	212c      	movs	r1, #44	; 0x2c
 80048ea:	fb01 f303 	mul.w	r3, r1, r3
 80048ee:	4413      	add	r3, r2
 80048f0:	3342      	adds	r3, #66	; 0x42
 80048f2:	2202      	movs	r2, #2
 80048f4:	701a      	strb	r2, [r3, #0]
      break;
 80048f6:	e02a      	b.n	800494e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80048f8:	78fb      	ldrb	r3, [r7, #3]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	212c      	movs	r1, #44	; 0x2c
 80048fe:	fb01 f303 	mul.w	r3, r1, r3
 8004902:	4413      	add	r3, r2
 8004904:	3354      	adds	r3, #84	; 0x54
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d109      	bne.n	8004920 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800490c:	78fb      	ldrb	r3, [r7, #3]
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	212c      	movs	r1, #44	; 0x2c
 8004912:	fb01 f303 	mul.w	r3, r1, r3
 8004916:	4413      	add	r3, r2
 8004918:	3342      	adds	r3, #66	; 0x42
 800491a:	2200      	movs	r2, #0
 800491c:	701a      	strb	r2, [r3, #0]
      break;
 800491e:	e016      	b.n	800494e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004920:	78fb      	ldrb	r3, [r7, #3]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	212c      	movs	r1, #44	; 0x2c
 8004926:	fb01 f303 	mul.w	r3, r1, r3
 800492a:	4413      	add	r3, r2
 800492c:	3342      	adds	r3, #66	; 0x42
 800492e:	2202      	movs	r2, #2
 8004930:	701a      	strb	r2, [r3, #0]
      break;
 8004932:	e00c      	b.n	800494e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004934:	78fb      	ldrb	r3, [r7, #3]
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	212c      	movs	r1, #44	; 0x2c
 800493a:	fb01 f303 	mul.w	r3, r1, r3
 800493e:	4413      	add	r3, r2
 8004940:	3342      	adds	r3, #66	; 0x42
 8004942:	2200      	movs	r2, #0
 8004944:	701a      	strb	r2, [r3, #0]
      break;
 8004946:	e002      	b.n	800494e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004948:	bf00      	nop
 800494a:	e000      	b.n	800494e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800494c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800494e:	78fb      	ldrb	r3, [r7, #3]
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	212c      	movs	r1, #44	; 0x2c
 8004954:	fb01 f303 	mul.w	r3, r1, r3
 8004958:	4413      	add	r3, r2
 800495a:	3344      	adds	r3, #68	; 0x44
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004960:	78fb      	ldrb	r3, [r7, #3]
 8004962:	8b3a      	ldrh	r2, [r7, #24]
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	202c      	movs	r0, #44	; 0x2c
 8004968:	fb00 f303 	mul.w	r3, r0, r3
 800496c:	440b      	add	r3, r1
 800496e:	334c      	adds	r3, #76	; 0x4c
 8004970:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004972:	78fb      	ldrb	r3, [r7, #3]
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	212c      	movs	r1, #44	; 0x2c
 8004978:	fb01 f303 	mul.w	r3, r1, r3
 800497c:	4413      	add	r3, r2
 800497e:	3360      	adds	r3, #96	; 0x60
 8004980:	2200      	movs	r2, #0
 8004982:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004984:	78fb      	ldrb	r3, [r7, #3]
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	212c      	movs	r1, #44	; 0x2c
 800498a:	fb01 f303 	mul.w	r3, r1, r3
 800498e:	4413      	add	r3, r2
 8004990:	3350      	adds	r3, #80	; 0x50
 8004992:	2200      	movs	r2, #0
 8004994:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004996:	78fb      	ldrb	r3, [r7, #3]
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	212c      	movs	r1, #44	; 0x2c
 800499c:	fb01 f303 	mul.w	r3, r1, r3
 80049a0:	4413      	add	r3, r2
 80049a2:	3339      	adds	r3, #57	; 0x39
 80049a4:	78fa      	ldrb	r2, [r7, #3]
 80049a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80049a8:	78fb      	ldrb	r3, [r7, #3]
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	212c      	movs	r1, #44	; 0x2c
 80049ae:	fb01 f303 	mul.w	r3, r1, r3
 80049b2:	4413      	add	r3, r2
 80049b4:	3361      	adds	r3, #97	; 0x61
 80049b6:	2200      	movs	r2, #0
 80049b8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6818      	ldr	r0, [r3, #0]
 80049be:	78fb      	ldrb	r3, [r7, #3]
 80049c0:	222c      	movs	r2, #44	; 0x2c
 80049c2:	fb02 f303 	mul.w	r3, r2, r3
 80049c6:	3338      	adds	r3, #56	; 0x38
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	18d1      	adds	r1, r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	461a      	mov	r2, r3
 80049d4:	f005 f820 	bl	8009a18 <USB_HC_StartXfer>
 80049d8:	4603      	mov	r3, r0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop

080049e4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f004 fd21 	bl	8009442 <USB_GetMode>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	f040 80f6 	bne.w	8004bf4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f004 fd05 	bl	800941c <USB_ReadInterrupts>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 80ec 	beq.w	8004bf2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f004 fcfc 	bl	800941c <USB_ReadInterrupts>
 8004a24:	4603      	mov	r3, r0
 8004a26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a2e:	d104      	bne.n	8004a3a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004a38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f004 fcec 	bl	800941c <USB_ReadInterrupts>
 8004a44:	4603      	mov	r3, r0
 8004a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a4e:	d104      	bne.n	8004a5a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a58:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f004 fcdc 	bl	800941c <USB_ReadInterrupts>
 8004a64:	4603      	mov	r3, r0
 8004a66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a6e:	d104      	bne.n	8004a7a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004a78:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f004 fccc 	bl	800941c <USB_ReadInterrupts>
 8004a84:	4603      	mov	r3, r0
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d103      	bne.n	8004a96 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2202      	movs	r2, #2
 8004a94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f004 fcbe 	bl	800941c <USB_ReadInterrupts>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004aa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aaa:	d11c      	bne.n	8004ae6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004ab4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10f      	bne.n	8004ae6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004ac6:	2110      	movs	r1, #16
 8004ac8:	6938      	ldr	r0, [r7, #16]
 8004aca:	f004 fbad 	bl	8009228 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004ace:	6938      	ldr	r0, [r7, #16]
 8004ad0:	f004 fbde 	bl	8009290 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2101      	movs	r1, #1
 8004ada:	4618      	mov	r0, r3
 8004adc:	f004 fdb4 	bl	8009648 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f00f fb91 	bl	8014208 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f004 fc96 	bl	800941c <USB_ReadInterrupts>
 8004af0:	4603      	mov	r3, r0
 8004af2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004af6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004afa:	d102      	bne.n	8004b02 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f001 f89e 	bl	8005c3e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f004 fc88 	bl	800941c <USB_ReadInterrupts>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	2b08      	cmp	r3, #8
 8004b14:	d106      	bne.n	8004b24 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f00f fb5a 	bl	80141d0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2208      	movs	r2, #8
 8004b22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f004 fc77 	bl	800941c <USB_ReadInterrupts>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	f003 0310 	and.w	r3, r3, #16
 8004b34:	2b10      	cmp	r3, #16
 8004b36:	d101      	bne.n	8004b3c <HAL_HCD_IRQHandler+0x158>
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e000      	b.n	8004b3e <HAL_HCD_IRQHandler+0x15a>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d012      	beq.n	8004b68 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	699a      	ldr	r2, [r3, #24]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0210 	bic.w	r2, r2, #16
 8004b50:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 ffa1 	bl	8005a9a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	699a      	ldr	r2, [r3, #24]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f042 0210 	orr.w	r2, r2, #16
 8004b66:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f004 fc55 	bl	800941c <USB_ReadInterrupts>
 8004b72:	4603      	mov	r3, r0
 8004b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b7c:	d13a      	bne.n	8004bf4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f005 f88a 	bl	8009c9c <USB_HC_ReadInterrupt>
 8004b88:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	617b      	str	r3, [r7, #20]
 8004b8e:	e025      	b.n	8004bdc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f003 030f 	and.w	r3, r3, #15
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	fa22 f303 	lsr.w	r3, r2, r3
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d018      	beq.n	8004bd6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bba:	d106      	bne.n	8004bca <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f8ab 	bl	8004d1e <HCD_HC_IN_IRQHandler>
 8004bc8:	e005      	b.n	8004bd6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	4619      	mov	r1, r3
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 fbf9 	bl	80053c8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d3d4      	bcc.n	8004b90 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bee:	615a      	str	r2, [r3, #20]
 8004bf0:	e000      	b.n	8004bf4 <HAL_HCD_IRQHandler+0x210>
      return;
 8004bf2:	bf00      	nop
    }
  }
}
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b082      	sub	sp, #8
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d101      	bne.n	8004c10 <HAL_HCD_Start+0x16>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	e013      	b.n	8004c38 <HAL_HCD_Start+0x3e>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2101      	movs	r1, #1
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f004 fd76 	bl	8009710 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f004 fa8e 	bl	800914a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3708      	adds	r7, #8
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d101      	bne.n	8004c56 <HAL_HCD_Stop+0x16>
 8004c52:	2302      	movs	r3, #2
 8004c54:	e00d      	b.n	8004c72 <HAL_HCD_Stop+0x32>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f005 f964 	bl	8009f30 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b082      	sub	sp, #8
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f004 fd18 	bl	80096bc <USB_ResetPort>
 8004c8c:	4603      	mov	r3, r0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004ca2:	78fb      	ldrb	r3, [r7, #3]
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	212c      	movs	r1, #44	; 0x2c
 8004ca8:	fb01 f303 	mul.w	r3, r1, r3
 8004cac:	4413      	add	r3, r2
 8004cae:	3360      	adds	r3, #96	; 0x60
 8004cb0:	781b      	ldrb	r3, [r3, #0]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b083      	sub	sp, #12
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004cca:	78fb      	ldrb	r3, [r7, #3]
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	212c      	movs	r1, #44	; 0x2c
 8004cd0:	fb01 f303 	mul.w	r3, r1, r3
 8004cd4:	4413      	add	r3, r2
 8004cd6:	3350      	adds	r3, #80	; 0x50
 8004cd8:	681b      	ldr	r3, [r3, #0]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b082      	sub	sp, #8
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f004 fd5c 	bl	80097b0 <USB_GetCurrentFrame>
 8004cf8:	4603      	mov	r3, r0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b082      	sub	sp, #8
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f004 fd37 	bl	8009782 <USB_GetHostSpeed>
 8004d14:	4603      	mov	r3, r0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b086      	sub	sp, #24
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	460b      	mov	r3, r1
 8004d28:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004d34:	78fb      	ldrb	r3, [r7, #3]
 8004d36:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f003 0304 	and.w	r3, r3, #4
 8004d4a:	2b04      	cmp	r3, #4
 8004d4c:	d11a      	bne.n	8004d84 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	2304      	movs	r3, #4
 8004d5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	212c      	movs	r1, #44	; 0x2c
 8004d66:	fb01 f303 	mul.w	r3, r1, r3
 8004d6a:	4413      	add	r3, r2
 8004d6c:	3361      	adds	r3, #97	; 0x61
 8004d6e:	2206      	movs	r2, #6
 8004d70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	b2d2      	uxtb	r2, r2
 8004d7a:	4611      	mov	r1, r2
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f004 ff9e 	bl	8009cbe <USB_HC_Halt>
 8004d82:	e0af      	b.n	8004ee4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d9a:	d11b      	bne.n	8004dd4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da8:	461a      	mov	r2, r3
 8004daa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	212c      	movs	r1, #44	; 0x2c
 8004db6:	fb01 f303 	mul.w	r3, r1, r3
 8004dba:	4413      	add	r3, r2
 8004dbc:	3361      	adds	r3, #97	; 0x61
 8004dbe:	2207      	movs	r2, #7
 8004dc0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	4611      	mov	r1, r2
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f004 ff76 	bl	8009cbe <USB_HC_Halt>
 8004dd2:	e087      	b.n	8004ee4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f003 0320 	and.w	r3, r3, #32
 8004de6:	2b20      	cmp	r3, #32
 8004de8:	d109      	bne.n	8004dfe <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	015a      	lsls	r2, r3, #5
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df6:	461a      	mov	r2, r3
 8004df8:	2320      	movs	r3, #32
 8004dfa:	6093      	str	r3, [r2, #8]
 8004dfc:	e072      	b.n	8004ee4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f003 0308 	and.w	r3, r3, #8
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d11a      	bne.n	8004e4a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e20:	461a      	mov	r2, r3
 8004e22:	2308      	movs	r3, #8
 8004e24:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	212c      	movs	r1, #44	; 0x2c
 8004e2c:	fb01 f303 	mul.w	r3, r1, r3
 8004e30:	4413      	add	r3, r2
 8004e32:	3361      	adds	r3, #97	; 0x61
 8004e34:	2205      	movs	r2, #5
 8004e36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	4611      	mov	r1, r2
 8004e42:	4618      	mov	r0, r3
 8004e44:	f004 ff3b 	bl	8009cbe <USB_HC_Halt>
 8004e48:	e04c      	b.n	8004ee4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e60:	d11b      	bne.n	8004e9a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	015a      	lsls	r2, r3, #5
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e6e:	461a      	mov	r2, r3
 8004e70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e74:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	212c      	movs	r1, #44	; 0x2c
 8004e7c:	fb01 f303 	mul.w	r3, r1, r3
 8004e80:	4413      	add	r3, r2
 8004e82:	3361      	adds	r3, #97	; 0x61
 8004e84:	2208      	movs	r2, #8
 8004e86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	b2d2      	uxtb	r2, r2
 8004e90:	4611      	mov	r1, r2
 8004e92:	4618      	mov	r0, r3
 8004e94:	f004 ff13 	bl	8009cbe <USB_HC_Halt>
 8004e98:	e024      	b.n	8004ee4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eac:	2b80      	cmp	r3, #128	; 0x80
 8004eae:	d119      	bne.n	8004ee4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	2380      	movs	r3, #128	; 0x80
 8004ec0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	212c      	movs	r1, #44	; 0x2c
 8004ec8:	fb01 f303 	mul.w	r3, r1, r3
 8004ecc:	4413      	add	r3, r2
 8004ece:	3361      	adds	r3, #97	; 0x61
 8004ed0:	2206      	movs	r2, #6
 8004ed2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	b2d2      	uxtb	r2, r2
 8004edc:	4611      	mov	r1, r2
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f004 feed 	bl	8009cbe <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004efa:	d112      	bne.n	8004f22 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	4611      	mov	r1, r2
 8004f06:	4618      	mov	r0, r3
 8004f08:	f004 fed9 	bl	8009cbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f18:	461a      	mov	r2, r3
 8004f1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f1e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004f20:	e24e      	b.n	80053c0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	015a      	lsls	r2, r3, #5
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	f040 80df 	bne.w	80050f8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d019      	beq.n	8004f76 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	212c      	movs	r1, #44	; 0x2c
 8004f48:	fb01 f303 	mul.w	r3, r1, r3
 8004f4c:	4413      	add	r3, r2
 8004f4e:	3348      	adds	r3, #72	; 0x48
 8004f50:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	0159      	lsls	r1, r3, #5
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	440b      	add	r3, r1
 8004f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004f64:	1ad2      	subs	r2, r2, r3
 8004f66:	6879      	ldr	r1, [r7, #4]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	202c      	movs	r0, #44	; 0x2c
 8004f6c:	fb00 f303 	mul.w	r3, r0, r3
 8004f70:	440b      	add	r3, r1
 8004f72:	3350      	adds	r3, #80	; 0x50
 8004f74:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	212c      	movs	r1, #44	; 0x2c
 8004f7c:	fb01 f303 	mul.w	r3, r1, r3
 8004f80:	4413      	add	r3, r2
 8004f82:	3361      	adds	r3, #97	; 0x61
 8004f84:	2201      	movs	r2, #1
 8004f86:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	212c      	movs	r1, #44	; 0x2c
 8004f8e:	fb01 f303 	mul.w	r3, r1, r3
 8004f92:	4413      	add	r3, r2
 8004f94:	335c      	adds	r3, #92	; 0x5c
 8004f96:	2200      	movs	r2, #0
 8004f98:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	2301      	movs	r3, #1
 8004faa:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	212c      	movs	r1, #44	; 0x2c
 8004fb2:	fb01 f303 	mul.w	r3, r1, r3
 8004fb6:	4413      	add	r3, r2
 8004fb8:	333f      	adds	r3, #63	; 0x3f
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d009      	beq.n	8004fd4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	212c      	movs	r1, #44	; 0x2c
 8004fc6:	fb01 f303 	mul.w	r3, r1, r3
 8004fca:	4413      	add	r3, r2
 8004fcc:	333f      	adds	r3, #63	; 0x3f
 8004fce:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d111      	bne.n	8004ff8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	4611      	mov	r1, r2
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f004 fe6d 	bl	8009cbe <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	015a      	lsls	r2, r3, #5
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	2310      	movs	r3, #16
 8004ff4:	6093      	str	r3, [r2, #8]
 8004ff6:	e03a      	b.n	800506e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	212c      	movs	r1, #44	; 0x2c
 8004ffe:	fb01 f303 	mul.w	r3, r1, r3
 8005002:	4413      	add	r3, r2
 8005004:	333f      	adds	r3, #63	; 0x3f
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	2b03      	cmp	r3, #3
 800500a:	d009      	beq.n	8005020 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	212c      	movs	r1, #44	; 0x2c
 8005012:	fb01 f303 	mul.w	r3, r1, r3
 8005016:	4413      	add	r3, r2
 8005018:	333f      	adds	r3, #63	; 0x3f
 800501a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800501c:	2b01      	cmp	r3, #1
 800501e:	d126      	bne.n	800506e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	4413      	add	r3, r2
 8005028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	0151      	lsls	r1, r2, #5
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	440a      	add	r2, r1
 8005036:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800503a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800503e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	212c      	movs	r1, #44	; 0x2c
 8005046:	fb01 f303 	mul.w	r3, r1, r3
 800504a:	4413      	add	r3, r2
 800504c:	3360      	adds	r3, #96	; 0x60
 800504e:	2201      	movs	r2, #1
 8005050:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	b2d9      	uxtb	r1, r3
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	202c      	movs	r0, #44	; 0x2c
 800505c:	fb00 f303 	mul.w	r3, r0, r3
 8005060:	4413      	add	r3, r2
 8005062:	3360      	adds	r3, #96	; 0x60
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f00f f8db 	bl	8014224 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d12b      	bne.n	80050ce <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	212c      	movs	r1, #44	; 0x2c
 800507c:	fb01 f303 	mul.w	r3, r1, r3
 8005080:	4413      	add	r3, r2
 8005082:	3348      	adds	r3, #72	; 0x48
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6879      	ldr	r1, [r7, #4]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	202c      	movs	r0, #44	; 0x2c
 800508c:	fb00 f202 	mul.w	r2, r0, r2
 8005090:	440a      	add	r2, r1
 8005092:	3240      	adds	r2, #64	; 0x40
 8005094:	8812      	ldrh	r2, [r2, #0]
 8005096:	fbb3 f3f2 	udiv	r3, r3, r2
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 818e 	beq.w	80053c0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	212c      	movs	r1, #44	; 0x2c
 80050aa:	fb01 f303 	mul.w	r3, r1, r3
 80050ae:	4413      	add	r3, r2
 80050b0:	3354      	adds	r3, #84	; 0x54
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	f083 0301 	eor.w	r3, r3, #1
 80050b8:	b2d8      	uxtb	r0, r3
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	212c      	movs	r1, #44	; 0x2c
 80050c0:	fb01 f303 	mul.w	r3, r1, r3
 80050c4:	4413      	add	r3, r2
 80050c6:	3354      	adds	r3, #84	; 0x54
 80050c8:	4602      	mov	r2, r0
 80050ca:	701a      	strb	r2, [r3, #0]
}
 80050cc:	e178      	b.n	80053c0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	212c      	movs	r1, #44	; 0x2c
 80050d4:	fb01 f303 	mul.w	r3, r1, r3
 80050d8:	4413      	add	r3, r2
 80050da:	3354      	adds	r3, #84	; 0x54
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	f083 0301 	eor.w	r3, r3, #1
 80050e2:	b2d8      	uxtb	r0, r3
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	212c      	movs	r1, #44	; 0x2c
 80050ea:	fb01 f303 	mul.w	r3, r1, r3
 80050ee:	4413      	add	r3, r2
 80050f0:	3354      	adds	r3, #84	; 0x54
 80050f2:	4602      	mov	r2, r0
 80050f4:	701a      	strb	r2, [r3, #0]
}
 80050f6:	e163      	b.n	80053c0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b02      	cmp	r3, #2
 800510c:	f040 80f6 	bne.w	80052fc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	212c      	movs	r1, #44	; 0x2c
 8005116:	fb01 f303 	mul.w	r3, r1, r3
 800511a:	4413      	add	r3, r2
 800511c:	3361      	adds	r3, #97	; 0x61
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d109      	bne.n	8005138 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	212c      	movs	r1, #44	; 0x2c
 800512a:	fb01 f303 	mul.w	r3, r1, r3
 800512e:	4413      	add	r3, r2
 8005130:	3360      	adds	r3, #96	; 0x60
 8005132:	2201      	movs	r2, #1
 8005134:	701a      	strb	r2, [r3, #0]
 8005136:	e0c9      	b.n	80052cc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	212c      	movs	r1, #44	; 0x2c
 800513e:	fb01 f303 	mul.w	r3, r1, r3
 8005142:	4413      	add	r3, r2
 8005144:	3361      	adds	r3, #97	; 0x61
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	2b05      	cmp	r3, #5
 800514a:	d109      	bne.n	8005160 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	212c      	movs	r1, #44	; 0x2c
 8005152:	fb01 f303 	mul.w	r3, r1, r3
 8005156:	4413      	add	r3, r2
 8005158:	3360      	adds	r3, #96	; 0x60
 800515a:	2205      	movs	r2, #5
 800515c:	701a      	strb	r2, [r3, #0]
 800515e:	e0b5      	b.n	80052cc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	212c      	movs	r1, #44	; 0x2c
 8005166:	fb01 f303 	mul.w	r3, r1, r3
 800516a:	4413      	add	r3, r2
 800516c:	3361      	adds	r3, #97	; 0x61
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	2b06      	cmp	r3, #6
 8005172:	d009      	beq.n	8005188 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	212c      	movs	r1, #44	; 0x2c
 800517a:	fb01 f303 	mul.w	r3, r1, r3
 800517e:	4413      	add	r3, r2
 8005180:	3361      	adds	r3, #97	; 0x61
 8005182:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005184:	2b08      	cmp	r3, #8
 8005186:	d150      	bne.n	800522a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	212c      	movs	r1, #44	; 0x2c
 800518e:	fb01 f303 	mul.w	r3, r1, r3
 8005192:	4413      	add	r3, r2
 8005194:	335c      	adds	r3, #92	; 0x5c
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	6879      	ldr	r1, [r7, #4]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	202c      	movs	r0, #44	; 0x2c
 80051a0:	fb00 f303 	mul.w	r3, r0, r3
 80051a4:	440b      	add	r3, r1
 80051a6:	335c      	adds	r3, #92	; 0x5c
 80051a8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	212c      	movs	r1, #44	; 0x2c
 80051b0:	fb01 f303 	mul.w	r3, r1, r3
 80051b4:	4413      	add	r3, r2
 80051b6:	335c      	adds	r3, #92	; 0x5c
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d912      	bls.n	80051e4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	212c      	movs	r1, #44	; 0x2c
 80051c4:	fb01 f303 	mul.w	r3, r1, r3
 80051c8:	4413      	add	r3, r2
 80051ca:	335c      	adds	r3, #92	; 0x5c
 80051cc:	2200      	movs	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	212c      	movs	r1, #44	; 0x2c
 80051d6:	fb01 f303 	mul.w	r3, r1, r3
 80051da:	4413      	add	r3, r2
 80051dc:	3360      	adds	r3, #96	; 0x60
 80051de:	2204      	movs	r2, #4
 80051e0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80051e2:	e073      	b.n	80052cc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	212c      	movs	r1, #44	; 0x2c
 80051ea:	fb01 f303 	mul.w	r3, r1, r3
 80051ee:	4413      	add	r3, r2
 80051f0:	3360      	adds	r3, #96	; 0x60
 80051f2:	2202      	movs	r2, #2
 80051f4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800520c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005214:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	4413      	add	r3, r2
 800521e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005222:	461a      	mov	r2, r3
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005228:	e050      	b.n	80052cc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	212c      	movs	r1, #44	; 0x2c
 8005230:	fb01 f303 	mul.w	r3, r1, r3
 8005234:	4413      	add	r3, r2
 8005236:	3361      	adds	r3, #97	; 0x61
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	2b03      	cmp	r3, #3
 800523c:	d122      	bne.n	8005284 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	212c      	movs	r1, #44	; 0x2c
 8005244:	fb01 f303 	mul.w	r3, r1, r3
 8005248:	4413      	add	r3, r2
 800524a:	3360      	adds	r3, #96	; 0x60
 800524c:	2202      	movs	r2, #2
 800524e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	4413      	add	r3, r2
 8005258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005266:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800526e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	4413      	add	r3, r2
 8005278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800527c:	461a      	mov	r2, r3
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	6013      	str	r3, [r2, #0]
 8005282:	e023      	b.n	80052cc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	212c      	movs	r1, #44	; 0x2c
 800528a:	fb01 f303 	mul.w	r3, r1, r3
 800528e:	4413      	add	r3, r2
 8005290:	3361      	adds	r3, #97	; 0x61
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	2b07      	cmp	r3, #7
 8005296:	d119      	bne.n	80052cc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	212c      	movs	r1, #44	; 0x2c
 800529e:	fb01 f303 	mul.w	r3, r1, r3
 80052a2:	4413      	add	r3, r2
 80052a4:	335c      	adds	r3, #92	; 0x5c
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	1c5a      	adds	r2, r3, #1
 80052aa:	6879      	ldr	r1, [r7, #4]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	202c      	movs	r0, #44	; 0x2c
 80052b0:	fb00 f303 	mul.w	r3, r0, r3
 80052b4:	440b      	add	r3, r1
 80052b6:	335c      	adds	r3, #92	; 0x5c
 80052b8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	212c      	movs	r1, #44	; 0x2c
 80052c0:	fb01 f303 	mul.w	r3, r1, r3
 80052c4:	4413      	add	r3, r2
 80052c6:	3360      	adds	r3, #96	; 0x60
 80052c8:	2204      	movs	r2, #4
 80052ca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d8:	461a      	mov	r2, r3
 80052da:	2302      	movs	r3, #2
 80052dc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	b2d9      	uxtb	r1, r3
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	202c      	movs	r0, #44	; 0x2c
 80052e8:	fb00 f303 	mul.w	r3, r0, r3
 80052ec:	4413      	add	r3, r2
 80052ee:	3360      	adds	r3, #96	; 0x60
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	461a      	mov	r2, r3
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f00e ff95 	bl	8014224 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80052fa:	e061      	b.n	80053c0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	4413      	add	r3, r2
 8005304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f003 0310 	and.w	r3, r3, #16
 800530e:	2b10      	cmp	r3, #16
 8005310:	d156      	bne.n	80053c0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	212c      	movs	r1, #44	; 0x2c
 8005318:	fb01 f303 	mul.w	r3, r1, r3
 800531c:	4413      	add	r3, r2
 800531e:	333f      	adds	r3, #63	; 0x3f
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b03      	cmp	r3, #3
 8005324:	d111      	bne.n	800534a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	212c      	movs	r1, #44	; 0x2c
 800532c:	fb01 f303 	mul.w	r3, r1, r3
 8005330:	4413      	add	r3, r2
 8005332:	335c      	adds	r3, #92	; 0x5c
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	b2d2      	uxtb	r2, r2
 8005340:	4611      	mov	r1, r2
 8005342:	4618      	mov	r0, r3
 8005344:	f004 fcbb 	bl	8009cbe <USB_HC_Halt>
 8005348:	e031      	b.n	80053ae <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	212c      	movs	r1, #44	; 0x2c
 8005350:	fb01 f303 	mul.w	r3, r1, r3
 8005354:	4413      	add	r3, r2
 8005356:	333f      	adds	r3, #63	; 0x3f
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d009      	beq.n	8005372 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	212c      	movs	r1, #44	; 0x2c
 8005364:	fb01 f303 	mul.w	r3, r1, r3
 8005368:	4413      	add	r3, r2
 800536a:	333f      	adds	r3, #63	; 0x3f
 800536c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800536e:	2b02      	cmp	r3, #2
 8005370:	d11d      	bne.n	80053ae <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	212c      	movs	r1, #44	; 0x2c
 8005378:	fb01 f303 	mul.w	r3, r1, r3
 800537c:	4413      	add	r3, r2
 800537e:	335c      	adds	r3, #92	; 0x5c
 8005380:	2200      	movs	r2, #0
 8005382:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d110      	bne.n	80053ae <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	212c      	movs	r1, #44	; 0x2c
 8005392:	fb01 f303 	mul.w	r3, r1, r3
 8005396:	4413      	add	r3, r2
 8005398:	3361      	adds	r3, #97	; 0x61
 800539a:	2203      	movs	r2, #3
 800539c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	b2d2      	uxtb	r2, r2
 80053a6:	4611      	mov	r1, r2
 80053a8:	4618      	mov	r0, r3
 80053aa:	f004 fc88 	bl	8009cbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ba:	461a      	mov	r2, r3
 80053bc:	2310      	movs	r3, #16
 80053be:	6093      	str	r3, [r2, #8]
}
 80053c0:	bf00      	nop
 80053c2:	3718      	adds	r7, #24
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b088      	sub	sp, #32
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	460b      	mov	r3, r1
 80053d2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80053de:	78fb      	ldrb	r3, [r7, #3]
 80053e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f003 0304 	and.w	r3, r3, #4
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d11a      	bne.n	800542e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005404:	461a      	mov	r2, r3
 8005406:	2304      	movs	r3, #4
 8005408:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	212c      	movs	r1, #44	; 0x2c
 8005410:	fb01 f303 	mul.w	r3, r1, r3
 8005414:	4413      	add	r3, r2
 8005416:	3361      	adds	r3, #97	; 0x61
 8005418:	2206      	movs	r2, #6
 800541a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	4611      	mov	r1, r2
 8005426:	4618      	mov	r0, r3
 8005428:	f004 fc49 	bl	8009cbe <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800542c:	e331      	b.n	8005a92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	4413      	add	r3, r2
 8005436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f003 0320 	and.w	r3, r3, #32
 8005440:	2b20      	cmp	r3, #32
 8005442:	d12e      	bne.n	80054a2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	4413      	add	r3, r2
 800544c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005450:	461a      	mov	r2, r3
 8005452:	2320      	movs	r3, #32
 8005454:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	212c      	movs	r1, #44	; 0x2c
 800545c:	fb01 f303 	mul.w	r3, r1, r3
 8005460:	4413      	add	r3, r2
 8005462:	333d      	adds	r3, #61	; 0x3d
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	2b01      	cmp	r3, #1
 8005468:	f040 8313 	bne.w	8005a92 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	212c      	movs	r1, #44	; 0x2c
 8005472:	fb01 f303 	mul.w	r3, r1, r3
 8005476:	4413      	add	r3, r2
 8005478:	333d      	adds	r3, #61	; 0x3d
 800547a:	2200      	movs	r2, #0
 800547c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	212c      	movs	r1, #44	; 0x2c
 8005484:	fb01 f303 	mul.w	r3, r1, r3
 8005488:	4413      	add	r3, r2
 800548a:	3360      	adds	r3, #96	; 0x60
 800548c:	2202      	movs	r2, #2
 800548e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	4611      	mov	r1, r2
 800549a:	4618      	mov	r0, r3
 800549c:	f004 fc0f 	bl	8009cbe <USB_HC_Halt>
}
 80054a0:	e2f7      	b.n	8005a92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	015a      	lsls	r2, r3, #5
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054b8:	d112      	bne.n	80054e0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c6:	461a      	mov	r2, r3
 80054c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054cc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	4611      	mov	r1, r2
 80054d8:	4618      	mov	r0, r3
 80054da:	f004 fbf0 	bl	8009cbe <USB_HC_Halt>
}
 80054de:	e2d8      	b.n	8005a92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d140      	bne.n	8005578 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	212c      	movs	r1, #44	; 0x2c
 80054fc:	fb01 f303 	mul.w	r3, r1, r3
 8005500:	4413      	add	r3, r2
 8005502:	335c      	adds	r3, #92	; 0x5c
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	015a      	lsls	r2, r3, #5
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	4413      	add	r3, r2
 8005510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551a:	2b40      	cmp	r3, #64	; 0x40
 800551c:	d111      	bne.n	8005542 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	212c      	movs	r1, #44	; 0x2c
 8005524:	fb01 f303 	mul.w	r3, r1, r3
 8005528:	4413      	add	r3, r2
 800552a:	333d      	adds	r3, #61	; 0x3d
 800552c:	2201      	movs	r2, #1
 800552e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	4413      	add	r3, r2
 8005538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800553c:	461a      	mov	r2, r3
 800553e:	2340      	movs	r3, #64	; 0x40
 8005540:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	4413      	add	r3, r2
 800554a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800554e:	461a      	mov	r2, r3
 8005550:	2301      	movs	r3, #1
 8005552:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	212c      	movs	r1, #44	; 0x2c
 800555a:	fb01 f303 	mul.w	r3, r1, r3
 800555e:	4413      	add	r3, r2
 8005560:	3361      	adds	r3, #97	; 0x61
 8005562:	2201      	movs	r2, #1
 8005564:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	b2d2      	uxtb	r2, r2
 800556e:	4611      	mov	r1, r2
 8005570:	4618      	mov	r0, r3
 8005572:	f004 fba4 	bl	8009cbe <USB_HC_Halt>
}
 8005576:	e28c      	b.n	8005a92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	4413      	add	r3, r2
 8005580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558a:	2b40      	cmp	r3, #64	; 0x40
 800558c:	d12c      	bne.n	80055e8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	212c      	movs	r1, #44	; 0x2c
 8005594:	fb01 f303 	mul.w	r3, r1, r3
 8005598:	4413      	add	r3, r2
 800559a:	3361      	adds	r3, #97	; 0x61
 800559c:	2204      	movs	r2, #4
 800559e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	212c      	movs	r1, #44	; 0x2c
 80055a6:	fb01 f303 	mul.w	r3, r1, r3
 80055aa:	4413      	add	r3, r2
 80055ac:	333d      	adds	r3, #61	; 0x3d
 80055ae:	2201      	movs	r2, #1
 80055b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	212c      	movs	r1, #44	; 0x2c
 80055b8:	fb01 f303 	mul.w	r3, r1, r3
 80055bc:	4413      	add	r3, r2
 80055be:	335c      	adds	r3, #92	; 0x5c
 80055c0:	2200      	movs	r2, #0
 80055c2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	b2d2      	uxtb	r2, r2
 80055cc:	4611      	mov	r1, r2
 80055ce:	4618      	mov	r0, r3
 80055d0:	f004 fb75 	bl	8009cbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e0:	461a      	mov	r2, r3
 80055e2:	2340      	movs	r3, #64	; 0x40
 80055e4:	6093      	str	r3, [r2, #8]
}
 80055e6:	e254      	b.n	8005a92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f003 0308 	and.w	r3, r3, #8
 80055fa:	2b08      	cmp	r3, #8
 80055fc:	d11a      	bne.n	8005634 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	4413      	add	r3, r2
 8005606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800560a:	461a      	mov	r2, r3
 800560c:	2308      	movs	r3, #8
 800560e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	212c      	movs	r1, #44	; 0x2c
 8005616:	fb01 f303 	mul.w	r3, r1, r3
 800561a:	4413      	add	r3, r2
 800561c:	3361      	adds	r3, #97	; 0x61
 800561e:	2205      	movs	r2, #5
 8005620:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	b2d2      	uxtb	r2, r2
 800562a:	4611      	mov	r1, r2
 800562c:	4618      	mov	r0, r3
 800562e:	f004 fb46 	bl	8009cbe <USB_HC_Halt>
}
 8005632:	e22e      	b.n	8005a92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	4413      	add	r3, r2
 800563c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f003 0310 	and.w	r3, r3, #16
 8005646:	2b10      	cmp	r3, #16
 8005648:	d140      	bne.n	80056cc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	212c      	movs	r1, #44	; 0x2c
 8005650:	fb01 f303 	mul.w	r3, r1, r3
 8005654:	4413      	add	r3, r2
 8005656:	335c      	adds	r3, #92	; 0x5c
 8005658:	2200      	movs	r2, #0
 800565a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	212c      	movs	r1, #44	; 0x2c
 8005662:	fb01 f303 	mul.w	r3, r1, r3
 8005666:	4413      	add	r3, r2
 8005668:	3361      	adds	r3, #97	; 0x61
 800566a:	2203      	movs	r2, #3
 800566c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	212c      	movs	r1, #44	; 0x2c
 8005674:	fb01 f303 	mul.w	r3, r1, r3
 8005678:	4413      	add	r3, r2
 800567a:	333d      	adds	r3, #61	; 0x3d
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d112      	bne.n	80056a8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	212c      	movs	r1, #44	; 0x2c
 8005688:	fb01 f303 	mul.w	r3, r1, r3
 800568c:	4413      	add	r3, r2
 800568e:	333c      	adds	r3, #60	; 0x3c
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d108      	bne.n	80056a8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	212c      	movs	r1, #44	; 0x2c
 800569c:	fb01 f303 	mul.w	r3, r1, r3
 80056a0:	4413      	add	r3, r2
 80056a2:	333d      	adds	r3, #61	; 0x3d
 80056a4:	2201      	movs	r2, #1
 80056a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	b2d2      	uxtb	r2, r2
 80056b0:	4611      	mov	r1, r2
 80056b2:	4618      	mov	r0, r3
 80056b4:	f004 fb03 	bl	8009cbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	015a      	lsls	r2, r3, #5
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c4:	461a      	mov	r2, r3
 80056c6:	2310      	movs	r3, #16
 80056c8:	6093      	str	r3, [r2, #8]
}
 80056ca:	e1e2      	b.n	8005a92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056de:	2b80      	cmp	r3, #128	; 0x80
 80056e0:	d164      	bne.n	80057ac <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d111      	bne.n	800570e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	212c      	movs	r1, #44	; 0x2c
 80056f0:	fb01 f303 	mul.w	r3, r1, r3
 80056f4:	4413      	add	r3, r2
 80056f6:	3361      	adds	r3, #97	; 0x61
 80056f8:	2206      	movs	r2, #6
 80056fa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	4611      	mov	r1, r2
 8005706:	4618      	mov	r0, r3
 8005708:	f004 fad9 	bl	8009cbe <USB_HC_Halt>
 800570c:	e044      	b.n	8005798 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	212c      	movs	r1, #44	; 0x2c
 8005714:	fb01 f303 	mul.w	r3, r1, r3
 8005718:	4413      	add	r3, r2
 800571a:	335c      	adds	r3, #92	; 0x5c
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	1c5a      	adds	r2, r3, #1
 8005720:	6879      	ldr	r1, [r7, #4]
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	202c      	movs	r0, #44	; 0x2c
 8005726:	fb00 f303 	mul.w	r3, r0, r3
 800572a:	440b      	add	r3, r1
 800572c:	335c      	adds	r3, #92	; 0x5c
 800572e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	212c      	movs	r1, #44	; 0x2c
 8005736:	fb01 f303 	mul.w	r3, r1, r3
 800573a:	4413      	add	r3, r2
 800573c:	335c      	adds	r3, #92	; 0x5c
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2b02      	cmp	r3, #2
 8005742:	d920      	bls.n	8005786 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	212c      	movs	r1, #44	; 0x2c
 800574a:	fb01 f303 	mul.w	r3, r1, r3
 800574e:	4413      	add	r3, r2
 8005750:	335c      	adds	r3, #92	; 0x5c
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	212c      	movs	r1, #44	; 0x2c
 800575c:	fb01 f303 	mul.w	r3, r1, r3
 8005760:	4413      	add	r3, r2
 8005762:	3360      	adds	r3, #96	; 0x60
 8005764:	2204      	movs	r2, #4
 8005766:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	b2d9      	uxtb	r1, r3
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	202c      	movs	r0, #44	; 0x2c
 8005772:	fb00 f303 	mul.w	r3, r0, r3
 8005776:	4413      	add	r3, r2
 8005778:	3360      	adds	r3, #96	; 0x60
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	461a      	mov	r2, r3
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f00e fd50 	bl	8014224 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005784:	e008      	b.n	8005798 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	212c      	movs	r1, #44	; 0x2c
 800578c:	fb01 f303 	mul.w	r3, r1, r3
 8005790:	4413      	add	r3, r2
 8005792:	3360      	adds	r3, #96	; 0x60
 8005794:	2202      	movs	r2, #2
 8005796:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057a4:	461a      	mov	r2, r3
 80057a6:	2380      	movs	r3, #128	; 0x80
 80057a8:	6093      	str	r3, [r2, #8]
}
 80057aa:	e172      	b.n	8005a92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057c2:	d11b      	bne.n	80057fc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	212c      	movs	r1, #44	; 0x2c
 80057ca:	fb01 f303 	mul.w	r3, r1, r3
 80057ce:	4413      	add	r3, r2
 80057d0:	3361      	adds	r3, #97	; 0x61
 80057d2:	2208      	movs	r2, #8
 80057d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	b2d2      	uxtb	r2, r2
 80057de:	4611      	mov	r1, r2
 80057e0:	4618      	mov	r0, r3
 80057e2:	f004 fa6c 	bl	8009cbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f2:	461a      	mov	r2, r3
 80057f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057f8:	6093      	str	r3, [r2, #8]
}
 80057fa:	e14a      	b.n	8005a92 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	4413      	add	r3, r2
 8005804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b02      	cmp	r3, #2
 8005810:	f040 813f 	bne.w	8005a92 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	212c      	movs	r1, #44	; 0x2c
 800581a:	fb01 f303 	mul.w	r3, r1, r3
 800581e:	4413      	add	r3, r2
 8005820:	3361      	adds	r3, #97	; 0x61
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d17d      	bne.n	8005924 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	212c      	movs	r1, #44	; 0x2c
 800582e:	fb01 f303 	mul.w	r3, r1, r3
 8005832:	4413      	add	r3, r2
 8005834:	3360      	adds	r3, #96	; 0x60
 8005836:	2201      	movs	r2, #1
 8005838:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	212c      	movs	r1, #44	; 0x2c
 8005840:	fb01 f303 	mul.w	r3, r1, r3
 8005844:	4413      	add	r3, r2
 8005846:	333f      	adds	r3, #63	; 0x3f
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	2b02      	cmp	r3, #2
 800584c:	d00a      	beq.n	8005864 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	212c      	movs	r1, #44	; 0x2c
 8005854:	fb01 f303 	mul.w	r3, r1, r3
 8005858:	4413      	add	r3, r2
 800585a:	333f      	adds	r3, #63	; 0x3f
 800585c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800585e:	2b03      	cmp	r3, #3
 8005860:	f040 8100 	bne.w	8005a64 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d113      	bne.n	8005894 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	212c      	movs	r1, #44	; 0x2c
 8005872:	fb01 f303 	mul.w	r3, r1, r3
 8005876:	4413      	add	r3, r2
 8005878:	3355      	adds	r3, #85	; 0x55
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	f083 0301 	eor.w	r3, r3, #1
 8005880:	b2d8      	uxtb	r0, r3
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	212c      	movs	r1, #44	; 0x2c
 8005888:	fb01 f303 	mul.w	r3, r1, r3
 800588c:	4413      	add	r3, r2
 800588e:	3355      	adds	r3, #85	; 0x55
 8005890:	4602      	mov	r2, r0
 8005892:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	2b01      	cmp	r3, #1
 800589a:	f040 80e3 	bne.w	8005a64 <HCD_HC_OUT_IRQHandler+0x69c>
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	212c      	movs	r1, #44	; 0x2c
 80058a4:	fb01 f303 	mul.w	r3, r1, r3
 80058a8:	4413      	add	r3, r2
 80058aa:	334c      	adds	r3, #76	; 0x4c
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f000 80d8 	beq.w	8005a64 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	212c      	movs	r1, #44	; 0x2c
 80058ba:	fb01 f303 	mul.w	r3, r1, r3
 80058be:	4413      	add	r3, r2
 80058c0:	334c      	adds	r3, #76	; 0x4c
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6879      	ldr	r1, [r7, #4]
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	202c      	movs	r0, #44	; 0x2c
 80058ca:	fb00 f202 	mul.w	r2, r0, r2
 80058ce:	440a      	add	r2, r1
 80058d0:	3240      	adds	r2, #64	; 0x40
 80058d2:	8812      	ldrh	r2, [r2, #0]
 80058d4:	4413      	add	r3, r2
 80058d6:	3b01      	subs	r3, #1
 80058d8:	6879      	ldr	r1, [r7, #4]
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	202c      	movs	r0, #44	; 0x2c
 80058de:	fb00 f202 	mul.w	r2, r0, r2
 80058e2:	440a      	add	r2, r1
 80058e4:	3240      	adds	r2, #64	; 0x40
 80058e6:	8812      	ldrh	r2, [r2, #0]
 80058e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 80b5 	beq.w	8005a64 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	212c      	movs	r1, #44	; 0x2c
 8005900:	fb01 f303 	mul.w	r3, r1, r3
 8005904:	4413      	add	r3, r2
 8005906:	3355      	adds	r3, #85	; 0x55
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	f083 0301 	eor.w	r3, r3, #1
 800590e:	b2d8      	uxtb	r0, r3
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	212c      	movs	r1, #44	; 0x2c
 8005916:	fb01 f303 	mul.w	r3, r1, r3
 800591a:	4413      	add	r3, r2
 800591c:	3355      	adds	r3, #85	; 0x55
 800591e:	4602      	mov	r2, r0
 8005920:	701a      	strb	r2, [r3, #0]
 8005922:	e09f      	b.n	8005a64 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	212c      	movs	r1, #44	; 0x2c
 800592a:	fb01 f303 	mul.w	r3, r1, r3
 800592e:	4413      	add	r3, r2
 8005930:	3361      	adds	r3, #97	; 0x61
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	2b03      	cmp	r3, #3
 8005936:	d109      	bne.n	800594c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	212c      	movs	r1, #44	; 0x2c
 800593e:	fb01 f303 	mul.w	r3, r1, r3
 8005942:	4413      	add	r3, r2
 8005944:	3360      	adds	r3, #96	; 0x60
 8005946:	2202      	movs	r2, #2
 8005948:	701a      	strb	r2, [r3, #0]
 800594a:	e08b      	b.n	8005a64 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	212c      	movs	r1, #44	; 0x2c
 8005952:	fb01 f303 	mul.w	r3, r1, r3
 8005956:	4413      	add	r3, r2
 8005958:	3361      	adds	r3, #97	; 0x61
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	2b04      	cmp	r3, #4
 800595e:	d109      	bne.n	8005974 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	212c      	movs	r1, #44	; 0x2c
 8005966:	fb01 f303 	mul.w	r3, r1, r3
 800596a:	4413      	add	r3, r2
 800596c:	3360      	adds	r3, #96	; 0x60
 800596e:	2202      	movs	r2, #2
 8005970:	701a      	strb	r2, [r3, #0]
 8005972:	e077      	b.n	8005a64 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	212c      	movs	r1, #44	; 0x2c
 800597a:	fb01 f303 	mul.w	r3, r1, r3
 800597e:	4413      	add	r3, r2
 8005980:	3361      	adds	r3, #97	; 0x61
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	2b05      	cmp	r3, #5
 8005986:	d109      	bne.n	800599c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	212c      	movs	r1, #44	; 0x2c
 800598e:	fb01 f303 	mul.w	r3, r1, r3
 8005992:	4413      	add	r3, r2
 8005994:	3360      	adds	r3, #96	; 0x60
 8005996:	2205      	movs	r2, #5
 8005998:	701a      	strb	r2, [r3, #0]
 800599a:	e063      	b.n	8005a64 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	212c      	movs	r1, #44	; 0x2c
 80059a2:	fb01 f303 	mul.w	r3, r1, r3
 80059a6:	4413      	add	r3, r2
 80059a8:	3361      	adds	r3, #97	; 0x61
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b06      	cmp	r3, #6
 80059ae:	d009      	beq.n	80059c4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	212c      	movs	r1, #44	; 0x2c
 80059b6:	fb01 f303 	mul.w	r3, r1, r3
 80059ba:	4413      	add	r3, r2
 80059bc:	3361      	adds	r3, #97	; 0x61
 80059be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80059c0:	2b08      	cmp	r3, #8
 80059c2:	d14f      	bne.n	8005a64 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	212c      	movs	r1, #44	; 0x2c
 80059ca:	fb01 f303 	mul.w	r3, r1, r3
 80059ce:	4413      	add	r3, r2
 80059d0:	335c      	adds	r3, #92	; 0x5c
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	1c5a      	adds	r2, r3, #1
 80059d6:	6879      	ldr	r1, [r7, #4]
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	202c      	movs	r0, #44	; 0x2c
 80059dc:	fb00 f303 	mul.w	r3, r0, r3
 80059e0:	440b      	add	r3, r1
 80059e2:	335c      	adds	r3, #92	; 0x5c
 80059e4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	212c      	movs	r1, #44	; 0x2c
 80059ec:	fb01 f303 	mul.w	r3, r1, r3
 80059f0:	4413      	add	r3, r2
 80059f2:	335c      	adds	r3, #92	; 0x5c
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d912      	bls.n	8005a20 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	212c      	movs	r1, #44	; 0x2c
 8005a00:	fb01 f303 	mul.w	r3, r1, r3
 8005a04:	4413      	add	r3, r2
 8005a06:	335c      	adds	r3, #92	; 0x5c
 8005a08:	2200      	movs	r2, #0
 8005a0a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	212c      	movs	r1, #44	; 0x2c
 8005a12:	fb01 f303 	mul.w	r3, r1, r3
 8005a16:	4413      	add	r3, r2
 8005a18:	3360      	adds	r3, #96	; 0x60
 8005a1a:	2204      	movs	r2, #4
 8005a1c:	701a      	strb	r2, [r3, #0]
 8005a1e:	e021      	b.n	8005a64 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	212c      	movs	r1, #44	; 0x2c
 8005a26:	fb01 f303 	mul.w	r3, r1, r3
 8005a2a:	4413      	add	r3, r2
 8005a2c:	3360      	adds	r3, #96	; 0x60
 8005a2e:	2202      	movs	r2, #2
 8005a30:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	015a      	lsls	r2, r3, #5
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a48:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a50:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	015a      	lsls	r2, r3, #5
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	4413      	add	r3, r2
 8005a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a5e:	461a      	mov	r2, r3
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a70:	461a      	mov	r2, r3
 8005a72:	2302      	movs	r3, #2
 8005a74:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	b2d9      	uxtb	r1, r3
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	202c      	movs	r0, #44	; 0x2c
 8005a80:	fb00 f303 	mul.w	r3, r0, r3
 8005a84:	4413      	add	r3, r2
 8005a86:	3360      	adds	r3, #96	; 0x60
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f00e fbc9 	bl	8014224 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005a92:	bf00      	nop
 8005a94:	3720      	adds	r7, #32
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b08a      	sub	sp, #40	; 0x28
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	f003 030f 	and.w	r3, r3, #15
 8005aba:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	0c5b      	lsrs	r3, r3, #17
 8005ac0:	f003 030f 	and.w	r3, r3, #15
 8005ac4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	091b      	lsrs	r3, r3, #4
 8005aca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ace:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d004      	beq.n	8005ae0 <HCD_RXQLVL_IRQHandler+0x46>
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	2b05      	cmp	r3, #5
 8005ada:	f000 80a9 	beq.w	8005c30 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005ade:	e0aa      	b.n	8005c36 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f000 80a6 	beq.w	8005c34 <HCD_RXQLVL_IRQHandler+0x19a>
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	212c      	movs	r1, #44	; 0x2c
 8005aee:	fb01 f303 	mul.w	r3, r1, r3
 8005af2:	4413      	add	r3, r2
 8005af4:	3344      	adds	r3, #68	; 0x44
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 809b 	beq.w	8005c34 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	212c      	movs	r1, #44	; 0x2c
 8005b04:	fb01 f303 	mul.w	r3, r1, r3
 8005b08:	4413      	add	r3, r2
 8005b0a:	3350      	adds	r3, #80	; 0x50
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	441a      	add	r2, r3
 8005b12:	6879      	ldr	r1, [r7, #4]
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	202c      	movs	r0, #44	; 0x2c
 8005b18:	fb00 f303 	mul.w	r3, r0, r3
 8005b1c:	440b      	add	r3, r1
 8005b1e:	334c      	adds	r3, #76	; 0x4c
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d87a      	bhi.n	8005c1c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6818      	ldr	r0, [r3, #0]
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	212c      	movs	r1, #44	; 0x2c
 8005b30:	fb01 f303 	mul.w	r3, r1, r3
 8005b34:	4413      	add	r3, r2
 8005b36:	3344      	adds	r3, #68	; 0x44
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	b292      	uxth	r2, r2
 8005b3e:	4619      	mov	r1, r3
 8005b40:	f003 fc14 	bl	800936c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	212c      	movs	r1, #44	; 0x2c
 8005b4a:	fb01 f303 	mul.w	r3, r1, r3
 8005b4e:	4413      	add	r3, r2
 8005b50:	3344      	adds	r3, #68	; 0x44
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	441a      	add	r2, r3
 8005b58:	6879      	ldr	r1, [r7, #4]
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	202c      	movs	r0, #44	; 0x2c
 8005b5e:	fb00 f303 	mul.w	r3, r0, r3
 8005b62:	440b      	add	r3, r1
 8005b64:	3344      	adds	r3, #68	; 0x44
 8005b66:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	212c      	movs	r1, #44	; 0x2c
 8005b6e:	fb01 f303 	mul.w	r3, r1, r3
 8005b72:	4413      	add	r3, r2
 8005b74:	3350      	adds	r3, #80	; 0x50
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	441a      	add	r2, r3
 8005b7c:	6879      	ldr	r1, [r7, #4]
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	202c      	movs	r0, #44	; 0x2c
 8005b82:	fb00 f303 	mul.w	r3, r0, r3
 8005b86:	440b      	add	r3, r1
 8005b88:	3350      	adds	r3, #80	; 0x50
 8005b8a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	6a3b      	ldr	r3, [r7, #32]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	0cdb      	lsrs	r3, r3, #19
 8005b9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ba0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	212c      	movs	r1, #44	; 0x2c
 8005ba8:	fb01 f303 	mul.w	r3, r1, r3
 8005bac:	4413      	add	r3, r2
 8005bae:	3340      	adds	r3, #64	; 0x40
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d13c      	bne.n	8005c34 <HCD_RXQLVL_IRQHandler+0x19a>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d039      	beq.n	8005c34 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005bd6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bde:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	6a3b      	ldr	r3, [r7, #32]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bec:	461a      	mov	r2, r3
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	212c      	movs	r1, #44	; 0x2c
 8005bf8:	fb01 f303 	mul.w	r3, r1, r3
 8005bfc:	4413      	add	r3, r2
 8005bfe:	3354      	adds	r3, #84	; 0x54
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	f083 0301 	eor.w	r3, r3, #1
 8005c06:	b2d8      	uxtb	r0, r3
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	212c      	movs	r1, #44	; 0x2c
 8005c0e:	fb01 f303 	mul.w	r3, r1, r3
 8005c12:	4413      	add	r3, r2
 8005c14:	3354      	adds	r3, #84	; 0x54
 8005c16:	4602      	mov	r2, r0
 8005c18:	701a      	strb	r2, [r3, #0]
      break;
 8005c1a:	e00b      	b.n	8005c34 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	212c      	movs	r1, #44	; 0x2c
 8005c22:	fb01 f303 	mul.w	r3, r1, r3
 8005c26:	4413      	add	r3, r2
 8005c28:	3360      	adds	r3, #96	; 0x60
 8005c2a:	2204      	movs	r2, #4
 8005c2c:	701a      	strb	r2, [r3, #0]
      break;
 8005c2e:	e001      	b.n	8005c34 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005c30:	bf00      	nop
 8005c32:	e000      	b.n	8005c36 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005c34:	bf00      	nop
  }
}
 8005c36:	bf00      	nop
 8005c38:	3728      	adds	r7, #40	; 0x28
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b086      	sub	sp, #24
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005c6a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d10b      	bne.n	8005c8e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d102      	bne.n	8005c86 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f00e fab3 	bl	80141ec <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	f043 0302 	orr.w	r3, r3, #2
 8005c8c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f003 0308 	and.w	r3, r3, #8
 8005c94:	2b08      	cmp	r3, #8
 8005c96:	d132      	bne.n	8005cfe <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f043 0308 	orr.w	r3, r3, #8
 8005c9e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f003 0304 	and.w	r3, r3, #4
 8005ca6:	2b04      	cmp	r3, #4
 8005ca8:	d126      	bne.n	8005cf8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d113      	bne.n	8005cda <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005cb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cbc:	d106      	bne.n	8005ccc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2102      	movs	r1, #2
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f003 fcbf 	bl	8009648 <USB_InitFSLSPClkSel>
 8005cca:	e011      	b.n	8005cf0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2101      	movs	r1, #1
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f003 fcb8 	bl	8009648 <USB_InitFSLSPClkSel>
 8005cd8:	e00a      	b.n	8005cf0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d106      	bne.n	8005cf0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ce8:	461a      	mov	r2, r3
 8005cea:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005cee:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f00e faa9 	bl	8014248 <HAL_HCD_PortEnabled_Callback>
 8005cf6:	e002      	b.n	8005cfe <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f00e fab3 	bl	8014264 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f003 0320 	and.w	r3, r3, #32
 8005d04:	2b20      	cmp	r3, #32
 8005d06:	d103      	bne.n	8005d10 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	f043 0320 	orr.w	r3, r3, #32
 8005d0e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d16:	461a      	mov	r2, r3
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	6013      	str	r3, [r2, #0]
}
 8005d1c:	bf00      	nop
 8005d1e:	3718      	adds	r7, #24
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e267      	b.n	8006206 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d075      	beq.n	8005e2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d42:	4b88      	ldr	r3, [pc, #544]	; (8005f64 <HAL_RCC_OscConfig+0x240>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 030c 	and.w	r3, r3, #12
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	d00c      	beq.n	8005d68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d4e:	4b85      	ldr	r3, [pc, #532]	; (8005f64 <HAL_RCC_OscConfig+0x240>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d56:	2b08      	cmp	r3, #8
 8005d58:	d112      	bne.n	8005d80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d5a:	4b82      	ldr	r3, [pc, #520]	; (8005f64 <HAL_RCC_OscConfig+0x240>)
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d66:	d10b      	bne.n	8005d80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d68:	4b7e      	ldr	r3, [pc, #504]	; (8005f64 <HAL_RCC_OscConfig+0x240>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d05b      	beq.n	8005e2c <HAL_RCC_OscConfig+0x108>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d157      	bne.n	8005e2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e242      	b.n	8006206 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d88:	d106      	bne.n	8005d98 <HAL_RCC_OscConfig+0x74>
 8005d8a:	4b76      	ldr	r3, [pc, #472]	; (8005f64 <HAL_RCC_OscConfig+0x240>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a75      	ldr	r2, [pc, #468]	; (8005f64 <HAL_RCC_OscConfig+0x240>)
 8005d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d94:	6013      	str	r3, [r2, #0]
 8005d96:	e01d      	b.n	8005dd4 <HAL_RCC_OscConfig+0xb0>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005da0:	d10c      	bne.n	8005dbc <HAL_RCC_OscConfig+0x98>
 8005da2:	4b70      	ldr	r3, [pc, #448]	; (8005f64 <HAL_RCC_OscConfig+0x240>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a6f      	ldr	r2, [pc, #444]	; (8005f64 <HAL_RCC_OscConfig+0x240>)
 8005da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dac:	6013      	str	r3, [r2, #0]
 8005dae:	4b6d      	ldr	r3, [pc, #436]	; (8005f64 <HAL_RCC_OscConfig+0x240>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a6c      	ldr	r2, [pc, #432]	; (8005f64 <HAL_RCC_OscConfig+0x240>)
 8005db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005db8:	6013      	str	r3, [r2, #0]
 8005dba:	e00b      	b.n	8005dd4 <HAL_RCC_OscConfig+0xb0>
 8005dbc:	4b69      	ldr	r3, [pc, #420]	; (8005f64 <HAL_RCC_OscConfig+0x240>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a68      	ldr	r2, [pc, #416]	; (8005f64 <HAL_RCC_OscConfig+0x240>)
 8005dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dc6:	6013      	str	r3, [r2, #0]
 8005dc8:	4b66      	ldr	r3, [pc, #408]	; (8005f64 <HAL_RCC_OscConfig+0x240>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a65      	ldr	r2, [pc, #404]	; (8005f64 <HAL_RCC_OscConfig+0x240>)
 8005dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d013      	beq.n	8005e04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ddc:	f7fd fa7c 	bl	80032d8 <HAL_GetTick>
 8005de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005de2:	e008      	b.n	8005df6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005de4:	f7fd fa78 	bl	80032d8 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	2b64      	cmp	r3, #100	; 0x64
 8005df0:	d901      	bls.n	8005df6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e207      	b.n	8006206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005df6:	4b5b      	ldr	r3, [pc, #364]	; (8005f64 <HAL_RCC_OscConfig+0x240>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d0f0      	beq.n	8005de4 <HAL_RCC_OscConfig+0xc0>
 8005e02:	e014      	b.n	8005e2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e04:	f7fd fa68 	bl	80032d8 <HAL_GetTick>
 8005e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e0a:	e008      	b.n	8005e1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e0c:	f7fd fa64 	bl	80032d8 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	2b64      	cmp	r3, #100	; 0x64
 8005e18:	d901      	bls.n	8005e1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e1f3      	b.n	8006206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e1e:	4b51      	ldr	r3, [pc, #324]	; (8005f64 <HAL_RCC_OscConfig+0x240>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1f0      	bne.n	8005e0c <HAL_RCC_OscConfig+0xe8>
 8005e2a:	e000      	b.n	8005e2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d063      	beq.n	8005f02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e3a:	4b4a      	ldr	r3, [pc, #296]	; (8005f64 <HAL_RCC_OscConfig+0x240>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f003 030c 	and.w	r3, r3, #12
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00b      	beq.n	8005e5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e46:	4b47      	ldr	r3, [pc, #284]	; (8005f64 <HAL_RCC_OscConfig+0x240>)
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e4e:	2b08      	cmp	r3, #8
 8005e50:	d11c      	bne.n	8005e8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e52:	4b44      	ldr	r3, [pc, #272]	; (8005f64 <HAL_RCC_OscConfig+0x240>)
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d116      	bne.n	8005e8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e5e:	4b41      	ldr	r3, [pc, #260]	; (8005f64 <HAL_RCC_OscConfig+0x240>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d005      	beq.n	8005e76 <HAL_RCC_OscConfig+0x152>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d001      	beq.n	8005e76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e1c7      	b.n	8006206 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e76:	4b3b      	ldr	r3, [pc, #236]	; (8005f64 <HAL_RCC_OscConfig+0x240>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	00db      	lsls	r3, r3, #3
 8005e84:	4937      	ldr	r1, [pc, #220]	; (8005f64 <HAL_RCC_OscConfig+0x240>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e8a:	e03a      	b.n	8005f02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d020      	beq.n	8005ed6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e94:	4b34      	ldr	r3, [pc, #208]	; (8005f68 <HAL_RCC_OscConfig+0x244>)
 8005e96:	2201      	movs	r2, #1
 8005e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e9a:	f7fd fa1d 	bl	80032d8 <HAL_GetTick>
 8005e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ea0:	e008      	b.n	8005eb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ea2:	f7fd fa19 	bl	80032d8 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d901      	bls.n	8005eb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e1a8      	b.n	8006206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eb4:	4b2b      	ldr	r3, [pc, #172]	; (8005f64 <HAL_RCC_OscConfig+0x240>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0302 	and.w	r3, r3, #2
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d0f0      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ec0:	4b28      	ldr	r3, [pc, #160]	; (8005f64 <HAL_RCC_OscConfig+0x240>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	00db      	lsls	r3, r3, #3
 8005ece:	4925      	ldr	r1, [pc, #148]	; (8005f64 <HAL_RCC_OscConfig+0x240>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	600b      	str	r3, [r1, #0]
 8005ed4:	e015      	b.n	8005f02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ed6:	4b24      	ldr	r3, [pc, #144]	; (8005f68 <HAL_RCC_OscConfig+0x244>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005edc:	f7fd f9fc 	bl	80032d8 <HAL_GetTick>
 8005ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ee2:	e008      	b.n	8005ef6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ee4:	f7fd f9f8 	bl	80032d8 <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d901      	bls.n	8005ef6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e187      	b.n	8006206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ef6:	4b1b      	ldr	r3, [pc, #108]	; (8005f64 <HAL_RCC_OscConfig+0x240>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0302 	and.w	r3, r3, #2
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1f0      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0308 	and.w	r3, r3, #8
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d036      	beq.n	8005f7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d016      	beq.n	8005f44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f16:	4b15      	ldr	r3, [pc, #84]	; (8005f6c <HAL_RCC_OscConfig+0x248>)
 8005f18:	2201      	movs	r2, #1
 8005f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f1c:	f7fd f9dc 	bl	80032d8 <HAL_GetTick>
 8005f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f22:	e008      	b.n	8005f36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f24:	f7fd f9d8 	bl	80032d8 <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d901      	bls.n	8005f36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e167      	b.n	8006206 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f36:	4b0b      	ldr	r3, [pc, #44]	; (8005f64 <HAL_RCC_OscConfig+0x240>)
 8005f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d0f0      	beq.n	8005f24 <HAL_RCC_OscConfig+0x200>
 8005f42:	e01b      	b.n	8005f7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f44:	4b09      	ldr	r3, [pc, #36]	; (8005f6c <HAL_RCC_OscConfig+0x248>)
 8005f46:	2200      	movs	r2, #0
 8005f48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f4a:	f7fd f9c5 	bl	80032d8 <HAL_GetTick>
 8005f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f50:	e00e      	b.n	8005f70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f52:	f7fd f9c1 	bl	80032d8 <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d907      	bls.n	8005f70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e150      	b.n	8006206 <HAL_RCC_OscConfig+0x4e2>
 8005f64:	40023800 	.word	0x40023800
 8005f68:	42470000 	.word	0x42470000
 8005f6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f70:	4b88      	ldr	r3, [pc, #544]	; (8006194 <HAL_RCC_OscConfig+0x470>)
 8005f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f74:	f003 0302 	and.w	r3, r3, #2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1ea      	bne.n	8005f52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0304 	and.w	r3, r3, #4
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f000 8097 	beq.w	80060b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f8e:	4b81      	ldr	r3, [pc, #516]	; (8006194 <HAL_RCC_OscConfig+0x470>)
 8005f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10f      	bne.n	8005fba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60bb      	str	r3, [r7, #8]
 8005f9e:	4b7d      	ldr	r3, [pc, #500]	; (8006194 <HAL_RCC_OscConfig+0x470>)
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa2:	4a7c      	ldr	r2, [pc, #496]	; (8006194 <HAL_RCC_OscConfig+0x470>)
 8005fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8005faa:	4b7a      	ldr	r3, [pc, #488]	; (8006194 <HAL_RCC_OscConfig+0x470>)
 8005fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fb2:	60bb      	str	r3, [r7, #8]
 8005fb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fba:	4b77      	ldr	r3, [pc, #476]	; (8006198 <HAL_RCC_OscConfig+0x474>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d118      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fc6:	4b74      	ldr	r3, [pc, #464]	; (8006198 <HAL_RCC_OscConfig+0x474>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a73      	ldr	r2, [pc, #460]	; (8006198 <HAL_RCC_OscConfig+0x474>)
 8005fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fd2:	f7fd f981 	bl	80032d8 <HAL_GetTick>
 8005fd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fd8:	e008      	b.n	8005fec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fda:	f7fd f97d 	bl	80032d8 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d901      	bls.n	8005fec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e10c      	b.n	8006206 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fec:	4b6a      	ldr	r3, [pc, #424]	; (8006198 <HAL_RCC_OscConfig+0x474>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d0f0      	beq.n	8005fda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d106      	bne.n	800600e <HAL_RCC_OscConfig+0x2ea>
 8006000:	4b64      	ldr	r3, [pc, #400]	; (8006194 <HAL_RCC_OscConfig+0x470>)
 8006002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006004:	4a63      	ldr	r2, [pc, #396]	; (8006194 <HAL_RCC_OscConfig+0x470>)
 8006006:	f043 0301 	orr.w	r3, r3, #1
 800600a:	6713      	str	r3, [r2, #112]	; 0x70
 800600c:	e01c      	b.n	8006048 <HAL_RCC_OscConfig+0x324>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	2b05      	cmp	r3, #5
 8006014:	d10c      	bne.n	8006030 <HAL_RCC_OscConfig+0x30c>
 8006016:	4b5f      	ldr	r3, [pc, #380]	; (8006194 <HAL_RCC_OscConfig+0x470>)
 8006018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601a:	4a5e      	ldr	r2, [pc, #376]	; (8006194 <HAL_RCC_OscConfig+0x470>)
 800601c:	f043 0304 	orr.w	r3, r3, #4
 8006020:	6713      	str	r3, [r2, #112]	; 0x70
 8006022:	4b5c      	ldr	r3, [pc, #368]	; (8006194 <HAL_RCC_OscConfig+0x470>)
 8006024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006026:	4a5b      	ldr	r2, [pc, #364]	; (8006194 <HAL_RCC_OscConfig+0x470>)
 8006028:	f043 0301 	orr.w	r3, r3, #1
 800602c:	6713      	str	r3, [r2, #112]	; 0x70
 800602e:	e00b      	b.n	8006048 <HAL_RCC_OscConfig+0x324>
 8006030:	4b58      	ldr	r3, [pc, #352]	; (8006194 <HAL_RCC_OscConfig+0x470>)
 8006032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006034:	4a57      	ldr	r2, [pc, #348]	; (8006194 <HAL_RCC_OscConfig+0x470>)
 8006036:	f023 0301 	bic.w	r3, r3, #1
 800603a:	6713      	str	r3, [r2, #112]	; 0x70
 800603c:	4b55      	ldr	r3, [pc, #340]	; (8006194 <HAL_RCC_OscConfig+0x470>)
 800603e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006040:	4a54      	ldr	r2, [pc, #336]	; (8006194 <HAL_RCC_OscConfig+0x470>)
 8006042:	f023 0304 	bic.w	r3, r3, #4
 8006046:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d015      	beq.n	800607c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006050:	f7fd f942 	bl	80032d8 <HAL_GetTick>
 8006054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006056:	e00a      	b.n	800606e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006058:	f7fd f93e 	bl	80032d8 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	f241 3288 	movw	r2, #5000	; 0x1388
 8006066:	4293      	cmp	r3, r2
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e0cb      	b.n	8006206 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800606e:	4b49      	ldr	r3, [pc, #292]	; (8006194 <HAL_RCC_OscConfig+0x470>)
 8006070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006072:	f003 0302 	and.w	r3, r3, #2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0ee      	beq.n	8006058 <HAL_RCC_OscConfig+0x334>
 800607a:	e014      	b.n	80060a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800607c:	f7fd f92c 	bl	80032d8 <HAL_GetTick>
 8006080:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006082:	e00a      	b.n	800609a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006084:	f7fd f928 	bl	80032d8 <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006092:	4293      	cmp	r3, r2
 8006094:	d901      	bls.n	800609a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e0b5      	b.n	8006206 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800609a:	4b3e      	ldr	r3, [pc, #248]	; (8006194 <HAL_RCC_OscConfig+0x470>)
 800609c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1ee      	bne.n	8006084 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060a6:	7dfb      	ldrb	r3, [r7, #23]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d105      	bne.n	80060b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060ac:	4b39      	ldr	r3, [pc, #228]	; (8006194 <HAL_RCC_OscConfig+0x470>)
 80060ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b0:	4a38      	ldr	r2, [pc, #224]	; (8006194 <HAL_RCC_OscConfig+0x470>)
 80060b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 80a1 	beq.w	8006204 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060c2:	4b34      	ldr	r3, [pc, #208]	; (8006194 <HAL_RCC_OscConfig+0x470>)
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f003 030c 	and.w	r3, r3, #12
 80060ca:	2b08      	cmp	r3, #8
 80060cc:	d05c      	beq.n	8006188 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d141      	bne.n	800615a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060d6:	4b31      	ldr	r3, [pc, #196]	; (800619c <HAL_RCC_OscConfig+0x478>)
 80060d8:	2200      	movs	r2, #0
 80060da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060dc:	f7fd f8fc 	bl	80032d8 <HAL_GetTick>
 80060e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060e2:	e008      	b.n	80060f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060e4:	f7fd f8f8 	bl	80032d8 <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e087      	b.n	8006206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060f6:	4b27      	ldr	r3, [pc, #156]	; (8006194 <HAL_RCC_OscConfig+0x470>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1f0      	bne.n	80060e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	69da      	ldr	r2, [r3, #28]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	431a      	orrs	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	019b      	lsls	r3, r3, #6
 8006112:	431a      	orrs	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006118:	085b      	lsrs	r3, r3, #1
 800611a:	3b01      	subs	r3, #1
 800611c:	041b      	lsls	r3, r3, #16
 800611e:	431a      	orrs	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006124:	061b      	lsls	r3, r3, #24
 8006126:	491b      	ldr	r1, [pc, #108]	; (8006194 <HAL_RCC_OscConfig+0x470>)
 8006128:	4313      	orrs	r3, r2
 800612a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800612c:	4b1b      	ldr	r3, [pc, #108]	; (800619c <HAL_RCC_OscConfig+0x478>)
 800612e:	2201      	movs	r2, #1
 8006130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006132:	f7fd f8d1 	bl	80032d8 <HAL_GetTick>
 8006136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006138:	e008      	b.n	800614c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800613a:	f7fd f8cd 	bl	80032d8 <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	2b02      	cmp	r3, #2
 8006146:	d901      	bls.n	800614c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e05c      	b.n	8006206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800614c:	4b11      	ldr	r3, [pc, #68]	; (8006194 <HAL_RCC_OscConfig+0x470>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d0f0      	beq.n	800613a <HAL_RCC_OscConfig+0x416>
 8006158:	e054      	b.n	8006204 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800615a:	4b10      	ldr	r3, [pc, #64]	; (800619c <HAL_RCC_OscConfig+0x478>)
 800615c:	2200      	movs	r2, #0
 800615e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006160:	f7fd f8ba 	bl	80032d8 <HAL_GetTick>
 8006164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006166:	e008      	b.n	800617a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006168:	f7fd f8b6 	bl	80032d8 <HAL_GetTick>
 800616c:	4602      	mov	r2, r0
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	2b02      	cmp	r3, #2
 8006174:	d901      	bls.n	800617a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e045      	b.n	8006206 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800617a:	4b06      	ldr	r3, [pc, #24]	; (8006194 <HAL_RCC_OscConfig+0x470>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1f0      	bne.n	8006168 <HAL_RCC_OscConfig+0x444>
 8006186:	e03d      	b.n	8006204 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d107      	bne.n	80061a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e038      	b.n	8006206 <HAL_RCC_OscConfig+0x4e2>
 8006194:	40023800 	.word	0x40023800
 8006198:	40007000 	.word	0x40007000
 800619c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061a0:	4b1b      	ldr	r3, [pc, #108]	; (8006210 <HAL_RCC_OscConfig+0x4ec>)
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d028      	beq.n	8006200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d121      	bne.n	8006200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d11a      	bne.n	8006200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80061d0:	4013      	ands	r3, r2
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061d8:	4293      	cmp	r3, r2
 80061da:	d111      	bne.n	8006200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e6:	085b      	lsrs	r3, r3, #1
 80061e8:	3b01      	subs	r3, #1
 80061ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d107      	bne.n	8006200 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d001      	beq.n	8006204 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e000      	b.n	8006206 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3718      	adds	r7, #24
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	40023800 	.word	0x40023800

08006214 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d101      	bne.n	8006228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e0cc      	b.n	80063c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006228:	4b68      	ldr	r3, [pc, #416]	; (80063cc <HAL_RCC_ClockConfig+0x1b8>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0307 	and.w	r3, r3, #7
 8006230:	683a      	ldr	r2, [r7, #0]
 8006232:	429a      	cmp	r2, r3
 8006234:	d90c      	bls.n	8006250 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006236:	4b65      	ldr	r3, [pc, #404]	; (80063cc <HAL_RCC_ClockConfig+0x1b8>)
 8006238:	683a      	ldr	r2, [r7, #0]
 800623a:	b2d2      	uxtb	r2, r2
 800623c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800623e:	4b63      	ldr	r3, [pc, #396]	; (80063cc <HAL_RCC_ClockConfig+0x1b8>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0307 	and.w	r3, r3, #7
 8006246:	683a      	ldr	r2, [r7, #0]
 8006248:	429a      	cmp	r2, r3
 800624a:	d001      	beq.n	8006250 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e0b8      	b.n	80063c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0302 	and.w	r3, r3, #2
 8006258:	2b00      	cmp	r3, #0
 800625a:	d020      	beq.n	800629e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0304 	and.w	r3, r3, #4
 8006264:	2b00      	cmp	r3, #0
 8006266:	d005      	beq.n	8006274 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006268:	4b59      	ldr	r3, [pc, #356]	; (80063d0 <HAL_RCC_ClockConfig+0x1bc>)
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	4a58      	ldr	r2, [pc, #352]	; (80063d0 <HAL_RCC_ClockConfig+0x1bc>)
 800626e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006272:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0308 	and.w	r3, r3, #8
 800627c:	2b00      	cmp	r3, #0
 800627e:	d005      	beq.n	800628c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006280:	4b53      	ldr	r3, [pc, #332]	; (80063d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	4a52      	ldr	r2, [pc, #328]	; (80063d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006286:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800628a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800628c:	4b50      	ldr	r3, [pc, #320]	; (80063d0 <HAL_RCC_ClockConfig+0x1bc>)
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	494d      	ldr	r1, [pc, #308]	; (80063d0 <HAL_RCC_ClockConfig+0x1bc>)
 800629a:	4313      	orrs	r3, r2
 800629c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d044      	beq.n	8006334 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d107      	bne.n	80062c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062b2:	4b47      	ldr	r3, [pc, #284]	; (80063d0 <HAL_RCC_ClockConfig+0x1bc>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d119      	bne.n	80062f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e07f      	b.n	80063c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d003      	beq.n	80062d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062ce:	2b03      	cmp	r3, #3
 80062d0:	d107      	bne.n	80062e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062d2:	4b3f      	ldr	r3, [pc, #252]	; (80063d0 <HAL_RCC_ClockConfig+0x1bc>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d109      	bne.n	80062f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e06f      	b.n	80063c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062e2:	4b3b      	ldr	r3, [pc, #236]	; (80063d0 <HAL_RCC_ClockConfig+0x1bc>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e067      	b.n	80063c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062f2:	4b37      	ldr	r3, [pc, #220]	; (80063d0 <HAL_RCC_ClockConfig+0x1bc>)
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f023 0203 	bic.w	r2, r3, #3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	4934      	ldr	r1, [pc, #208]	; (80063d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006300:	4313      	orrs	r3, r2
 8006302:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006304:	f7fc ffe8 	bl	80032d8 <HAL_GetTick>
 8006308:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800630a:	e00a      	b.n	8006322 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800630c:	f7fc ffe4 	bl	80032d8 <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	f241 3288 	movw	r2, #5000	; 0x1388
 800631a:	4293      	cmp	r3, r2
 800631c:	d901      	bls.n	8006322 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e04f      	b.n	80063c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006322:	4b2b      	ldr	r3, [pc, #172]	; (80063d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f003 020c 	and.w	r2, r3, #12
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	429a      	cmp	r2, r3
 8006332:	d1eb      	bne.n	800630c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006334:	4b25      	ldr	r3, [pc, #148]	; (80063cc <HAL_RCC_ClockConfig+0x1b8>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0307 	and.w	r3, r3, #7
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	429a      	cmp	r2, r3
 8006340:	d20c      	bcs.n	800635c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006342:	4b22      	ldr	r3, [pc, #136]	; (80063cc <HAL_RCC_ClockConfig+0x1b8>)
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	b2d2      	uxtb	r2, r2
 8006348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800634a:	4b20      	ldr	r3, [pc, #128]	; (80063cc <HAL_RCC_ClockConfig+0x1b8>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0307 	and.w	r3, r3, #7
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	429a      	cmp	r2, r3
 8006356:	d001      	beq.n	800635c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e032      	b.n	80063c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0304 	and.w	r3, r3, #4
 8006364:	2b00      	cmp	r3, #0
 8006366:	d008      	beq.n	800637a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006368:	4b19      	ldr	r3, [pc, #100]	; (80063d0 <HAL_RCC_ClockConfig+0x1bc>)
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	4916      	ldr	r1, [pc, #88]	; (80063d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006376:	4313      	orrs	r3, r2
 8006378:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0308 	and.w	r3, r3, #8
 8006382:	2b00      	cmp	r3, #0
 8006384:	d009      	beq.n	800639a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006386:	4b12      	ldr	r3, [pc, #72]	; (80063d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	00db      	lsls	r3, r3, #3
 8006394:	490e      	ldr	r1, [pc, #56]	; (80063d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006396:	4313      	orrs	r3, r2
 8006398:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800639a:	f000 f821 	bl	80063e0 <HAL_RCC_GetSysClockFreq>
 800639e:	4602      	mov	r2, r0
 80063a0:	4b0b      	ldr	r3, [pc, #44]	; (80063d0 <HAL_RCC_ClockConfig+0x1bc>)
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	091b      	lsrs	r3, r3, #4
 80063a6:	f003 030f 	and.w	r3, r3, #15
 80063aa:	490a      	ldr	r1, [pc, #40]	; (80063d4 <HAL_RCC_ClockConfig+0x1c0>)
 80063ac:	5ccb      	ldrb	r3, [r1, r3]
 80063ae:	fa22 f303 	lsr.w	r3, r2, r3
 80063b2:	4a09      	ldr	r2, [pc, #36]	; (80063d8 <HAL_RCC_ClockConfig+0x1c4>)
 80063b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80063b6:	4b09      	ldr	r3, [pc, #36]	; (80063dc <HAL_RCC_ClockConfig+0x1c8>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7fc fcd0 	bl	8002d60 <HAL_InitTick>

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	40023c00 	.word	0x40023c00
 80063d0:	40023800 	.word	0x40023800
 80063d4:	08017484 	.word	0x08017484
 80063d8:	20000234 	.word	0x20000234
 80063dc:	20000238 	.word	0x20000238

080063e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063e4:	b090      	sub	sp, #64	; 0x40
 80063e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80063e8:	2300      	movs	r3, #0
 80063ea:	637b      	str	r3, [r7, #52]	; 0x34
 80063ec:	2300      	movs	r3, #0
 80063ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063f0:	2300      	movs	r3, #0
 80063f2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80063f4:	2300      	movs	r3, #0
 80063f6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063f8:	4b59      	ldr	r3, [pc, #356]	; (8006560 <HAL_RCC_GetSysClockFreq+0x180>)
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f003 030c 	and.w	r3, r3, #12
 8006400:	2b08      	cmp	r3, #8
 8006402:	d00d      	beq.n	8006420 <HAL_RCC_GetSysClockFreq+0x40>
 8006404:	2b08      	cmp	r3, #8
 8006406:	f200 80a1 	bhi.w	800654c <HAL_RCC_GetSysClockFreq+0x16c>
 800640a:	2b00      	cmp	r3, #0
 800640c:	d002      	beq.n	8006414 <HAL_RCC_GetSysClockFreq+0x34>
 800640e:	2b04      	cmp	r3, #4
 8006410:	d003      	beq.n	800641a <HAL_RCC_GetSysClockFreq+0x3a>
 8006412:	e09b      	b.n	800654c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006414:	4b53      	ldr	r3, [pc, #332]	; (8006564 <HAL_RCC_GetSysClockFreq+0x184>)
 8006416:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006418:	e09b      	b.n	8006552 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800641a:	4b53      	ldr	r3, [pc, #332]	; (8006568 <HAL_RCC_GetSysClockFreq+0x188>)
 800641c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800641e:	e098      	b.n	8006552 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006420:	4b4f      	ldr	r3, [pc, #316]	; (8006560 <HAL_RCC_GetSysClockFreq+0x180>)
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006428:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800642a:	4b4d      	ldr	r3, [pc, #308]	; (8006560 <HAL_RCC_GetSysClockFreq+0x180>)
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d028      	beq.n	8006488 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006436:	4b4a      	ldr	r3, [pc, #296]	; (8006560 <HAL_RCC_GetSysClockFreq+0x180>)
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	099b      	lsrs	r3, r3, #6
 800643c:	2200      	movs	r2, #0
 800643e:	623b      	str	r3, [r7, #32]
 8006440:	627a      	str	r2, [r7, #36]	; 0x24
 8006442:	6a3b      	ldr	r3, [r7, #32]
 8006444:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006448:	2100      	movs	r1, #0
 800644a:	4b47      	ldr	r3, [pc, #284]	; (8006568 <HAL_RCC_GetSysClockFreq+0x188>)
 800644c:	fb03 f201 	mul.w	r2, r3, r1
 8006450:	2300      	movs	r3, #0
 8006452:	fb00 f303 	mul.w	r3, r0, r3
 8006456:	4413      	add	r3, r2
 8006458:	4a43      	ldr	r2, [pc, #268]	; (8006568 <HAL_RCC_GetSysClockFreq+0x188>)
 800645a:	fba0 1202 	umull	r1, r2, r0, r2
 800645e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006460:	460a      	mov	r2, r1
 8006462:	62ba      	str	r2, [r7, #40]	; 0x28
 8006464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006466:	4413      	add	r3, r2
 8006468:	62fb      	str	r3, [r7, #44]	; 0x2c
 800646a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800646c:	2200      	movs	r2, #0
 800646e:	61bb      	str	r3, [r7, #24]
 8006470:	61fa      	str	r2, [r7, #28]
 8006472:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006476:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800647a:	f7f9 ff11 	bl	80002a0 <__aeabi_uldivmod>
 800647e:	4602      	mov	r2, r0
 8006480:	460b      	mov	r3, r1
 8006482:	4613      	mov	r3, r2
 8006484:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006486:	e053      	b.n	8006530 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006488:	4b35      	ldr	r3, [pc, #212]	; (8006560 <HAL_RCC_GetSysClockFreq+0x180>)
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	099b      	lsrs	r3, r3, #6
 800648e:	2200      	movs	r2, #0
 8006490:	613b      	str	r3, [r7, #16]
 8006492:	617a      	str	r2, [r7, #20]
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800649a:	f04f 0b00 	mov.w	fp, #0
 800649e:	4652      	mov	r2, sl
 80064a0:	465b      	mov	r3, fp
 80064a2:	f04f 0000 	mov.w	r0, #0
 80064a6:	f04f 0100 	mov.w	r1, #0
 80064aa:	0159      	lsls	r1, r3, #5
 80064ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064b0:	0150      	lsls	r0, r2, #5
 80064b2:	4602      	mov	r2, r0
 80064b4:	460b      	mov	r3, r1
 80064b6:	ebb2 080a 	subs.w	r8, r2, sl
 80064ba:	eb63 090b 	sbc.w	r9, r3, fp
 80064be:	f04f 0200 	mov.w	r2, #0
 80064c2:	f04f 0300 	mov.w	r3, #0
 80064c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80064ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80064ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80064d2:	ebb2 0408 	subs.w	r4, r2, r8
 80064d6:	eb63 0509 	sbc.w	r5, r3, r9
 80064da:	f04f 0200 	mov.w	r2, #0
 80064de:	f04f 0300 	mov.w	r3, #0
 80064e2:	00eb      	lsls	r3, r5, #3
 80064e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064e8:	00e2      	lsls	r2, r4, #3
 80064ea:	4614      	mov	r4, r2
 80064ec:	461d      	mov	r5, r3
 80064ee:	eb14 030a 	adds.w	r3, r4, sl
 80064f2:	603b      	str	r3, [r7, #0]
 80064f4:	eb45 030b 	adc.w	r3, r5, fp
 80064f8:	607b      	str	r3, [r7, #4]
 80064fa:	f04f 0200 	mov.w	r2, #0
 80064fe:	f04f 0300 	mov.w	r3, #0
 8006502:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006506:	4629      	mov	r1, r5
 8006508:	028b      	lsls	r3, r1, #10
 800650a:	4621      	mov	r1, r4
 800650c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006510:	4621      	mov	r1, r4
 8006512:	028a      	lsls	r2, r1, #10
 8006514:	4610      	mov	r0, r2
 8006516:	4619      	mov	r1, r3
 8006518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800651a:	2200      	movs	r2, #0
 800651c:	60bb      	str	r3, [r7, #8]
 800651e:	60fa      	str	r2, [r7, #12]
 8006520:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006524:	f7f9 febc 	bl	80002a0 <__aeabi_uldivmod>
 8006528:	4602      	mov	r2, r0
 800652a:	460b      	mov	r3, r1
 800652c:	4613      	mov	r3, r2
 800652e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006530:	4b0b      	ldr	r3, [pc, #44]	; (8006560 <HAL_RCC_GetSysClockFreq+0x180>)
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	0c1b      	lsrs	r3, r3, #16
 8006536:	f003 0303 	and.w	r3, r3, #3
 800653a:	3301      	adds	r3, #1
 800653c:	005b      	lsls	r3, r3, #1
 800653e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006540:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006544:	fbb2 f3f3 	udiv	r3, r2, r3
 8006548:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800654a:	e002      	b.n	8006552 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800654c:	4b05      	ldr	r3, [pc, #20]	; (8006564 <HAL_RCC_GetSysClockFreq+0x184>)
 800654e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006550:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006554:	4618      	mov	r0, r3
 8006556:	3740      	adds	r7, #64	; 0x40
 8006558:	46bd      	mov	sp, r7
 800655a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800655e:	bf00      	nop
 8006560:	40023800 	.word	0x40023800
 8006564:	00f42400 	.word	0x00f42400
 8006568:	017d7840 	.word	0x017d7840

0800656c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800656c:	b480      	push	{r7}
 800656e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006570:	4b03      	ldr	r3, [pc, #12]	; (8006580 <HAL_RCC_GetHCLKFreq+0x14>)
 8006572:	681b      	ldr	r3, [r3, #0]
}
 8006574:	4618      	mov	r0, r3
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	20000234 	.word	0x20000234

08006584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006588:	f7ff fff0 	bl	800656c <HAL_RCC_GetHCLKFreq>
 800658c:	4602      	mov	r2, r0
 800658e:	4b05      	ldr	r3, [pc, #20]	; (80065a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	0a9b      	lsrs	r3, r3, #10
 8006594:	f003 0307 	and.w	r3, r3, #7
 8006598:	4903      	ldr	r1, [pc, #12]	; (80065a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800659a:	5ccb      	ldrb	r3, [r1, r3]
 800659c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	40023800 	.word	0x40023800
 80065a8:	08017494 	.word	0x08017494

080065ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80065b0:	f7ff ffdc 	bl	800656c <HAL_RCC_GetHCLKFreq>
 80065b4:	4602      	mov	r2, r0
 80065b6:	4b05      	ldr	r3, [pc, #20]	; (80065cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	0b5b      	lsrs	r3, r3, #13
 80065bc:	f003 0307 	and.w	r3, r3, #7
 80065c0:	4903      	ldr	r1, [pc, #12]	; (80065d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065c2:	5ccb      	ldrb	r3, [r1, r3]
 80065c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	40023800 	.word	0x40023800
 80065d0:	08017494 	.word	0x08017494

080065d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	220f      	movs	r2, #15
 80065e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80065e4:	4b12      	ldr	r3, [pc, #72]	; (8006630 <HAL_RCC_GetClockConfig+0x5c>)
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	f003 0203 	and.w	r2, r3, #3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80065f0:	4b0f      	ldr	r3, [pc, #60]	; (8006630 <HAL_RCC_GetClockConfig+0x5c>)
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80065fc:	4b0c      	ldr	r3, [pc, #48]	; (8006630 <HAL_RCC_GetClockConfig+0x5c>)
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006608:	4b09      	ldr	r3, [pc, #36]	; (8006630 <HAL_RCC_GetClockConfig+0x5c>)
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	08db      	lsrs	r3, r3, #3
 800660e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006616:	4b07      	ldr	r3, [pc, #28]	; (8006634 <HAL_RCC_GetClockConfig+0x60>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0207 	and.w	r2, r3, #7
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	601a      	str	r2, [r3, #0]
}
 8006622:	bf00      	nop
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	40023800 	.word	0x40023800
 8006634:	40023c00 	.word	0x40023c00

08006638 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006644:	2300      	movs	r3, #0
 8006646:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	2b00      	cmp	r3, #0
 8006652:	d105      	bne.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800665c:	2b00      	cmp	r3, #0
 800665e:	d035      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006660:	4b62      	ldr	r3, [pc, #392]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006662:	2200      	movs	r2, #0
 8006664:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006666:	f7fc fe37 	bl	80032d8 <HAL_GetTick>
 800666a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800666c:	e008      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800666e:	f7fc fe33 	bl	80032d8 <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	2b02      	cmp	r3, #2
 800667a:	d901      	bls.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e0b0      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006680:	4b5b      	ldr	r3, [pc, #364]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1f0      	bne.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	019a      	lsls	r2, r3, #6
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	071b      	lsls	r3, r3, #28
 8006698:	4955      	ldr	r1, [pc, #340]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800669a:	4313      	orrs	r3, r2
 800669c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80066a0:	4b52      	ldr	r3, [pc, #328]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80066a2:	2201      	movs	r2, #1
 80066a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066a6:	f7fc fe17 	bl	80032d8 <HAL_GetTick>
 80066aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066ac:	e008      	b.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80066ae:	f7fc fe13 	bl	80032d8 <HAL_GetTick>
 80066b2:	4602      	mov	r2, r0
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d901      	bls.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e090      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066c0:	4b4b      	ldr	r3, [pc, #300]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d0f0      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0302 	and.w	r3, r3, #2
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f000 8083 	beq.w	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80066da:	2300      	movs	r3, #0
 80066dc:	60fb      	str	r3, [r7, #12]
 80066de:	4b44      	ldr	r3, [pc, #272]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e2:	4a43      	ldr	r2, [pc, #268]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066e8:	6413      	str	r3, [r2, #64]	; 0x40
 80066ea:	4b41      	ldr	r3, [pc, #260]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066f2:	60fb      	str	r3, [r7, #12]
 80066f4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80066f6:	4b3f      	ldr	r3, [pc, #252]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a3e      	ldr	r2, [pc, #248]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80066fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006700:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006702:	f7fc fde9 	bl	80032d8 <HAL_GetTick>
 8006706:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006708:	e008      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800670a:	f7fc fde5 	bl	80032d8 <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	2b02      	cmp	r3, #2
 8006716:	d901      	bls.n	800671c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e062      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800671c:	4b35      	ldr	r3, [pc, #212]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006724:	2b00      	cmp	r3, #0
 8006726:	d0f0      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006728:	4b31      	ldr	r3, [pc, #196]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800672a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800672c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006730:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d02f      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	429a      	cmp	r2, r3
 8006744:	d028      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006746:	4b2a      	ldr	r3, [pc, #168]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800674e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006750:	4b29      	ldr	r3, [pc, #164]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006752:	2201      	movs	r2, #1
 8006754:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006756:	4b28      	ldr	r3, [pc, #160]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006758:	2200      	movs	r2, #0
 800675a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800675c:	4a24      	ldr	r2, [pc, #144]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006762:	4b23      	ldr	r3, [pc, #140]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	2b01      	cmp	r3, #1
 800676c:	d114      	bne.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800676e:	f7fc fdb3 	bl	80032d8 <HAL_GetTick>
 8006772:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006774:	e00a      	b.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006776:	f7fc fdaf 	bl	80032d8 <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	f241 3288 	movw	r2, #5000	; 0x1388
 8006784:	4293      	cmp	r3, r2
 8006786:	d901      	bls.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e02a      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800678c:	4b18      	ldr	r3, [pc, #96]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800678e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006790:	f003 0302 	and.w	r3, r3, #2
 8006794:	2b00      	cmp	r3, #0
 8006796:	d0ee      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067a4:	d10d      	bne.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80067a6:	4b12      	ldr	r3, [pc, #72]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80067b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ba:	490d      	ldr	r1, [pc, #52]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	608b      	str	r3, [r1, #8]
 80067c0:	e005      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x196>
 80067c2:	4b0b      	ldr	r3, [pc, #44]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	4a0a      	ldr	r2, [pc, #40]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067c8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80067cc:	6093      	str	r3, [r2, #8]
 80067ce:	4b08      	ldr	r3, [pc, #32]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067da:	4905      	ldr	r1, [pc, #20]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3718      	adds	r7, #24
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	42470068 	.word	0x42470068
 80067f0:	40023800 	.word	0x40023800
 80067f4:	40007000 	.word	0x40007000
 80067f8:	42470e40 	.word	0x42470e40

080067fc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d101      	bne.n	8006812 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e066      	b.n	80068e0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	7f5b      	ldrb	r3, [r3, #29]
 8006816:	b2db      	uxtb	r3, r3
 8006818:	2b00      	cmp	r3, #0
 800681a:	d105      	bne.n	8006828 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f7fc f97a 	bl	8002b1c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2202      	movs	r2, #2
 800682c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	22ca      	movs	r2, #202	; 0xca
 8006834:	625a      	str	r2, [r3, #36]	; 0x24
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2253      	movs	r2, #83	; 0x53
 800683c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fa45 	bl	8006cce <RTC_EnterInitMode>
 8006844:	4603      	mov	r3, r0
 8006846:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006848:	7bfb      	ldrb	r3, [r7, #15]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d12c      	bne.n	80068a8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	6812      	ldr	r2, [r2, #0]
 8006858:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800685c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006860:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6899      	ldr	r1, [r3, #8]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	431a      	orrs	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	431a      	orrs	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	430a      	orrs	r2, r1
 800687e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	68d2      	ldr	r2, [r2, #12]
 8006888:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6919      	ldr	r1, [r3, #16]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	041a      	lsls	r2, r3, #16
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	430a      	orrs	r2, r1
 800689c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fa4c 	bl	8006d3c <RTC_ExitInitMode>
 80068a4:	4603      	mov	r3, r0
 80068a6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d113      	bne.n	80068d6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80068bc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	699a      	ldr	r2, [r3, #24]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	22ff      	movs	r2, #255	; 0xff
 80068dc:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80068de:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80068e8:	b590      	push	{r4, r7, lr}
 80068ea:	b087      	sub	sp, #28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80068f4:	2300      	movs	r3, #0
 80068f6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	7f1b      	ldrb	r3, [r3, #28]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d101      	bne.n	8006904 <HAL_RTC_SetTime+0x1c>
 8006900:	2302      	movs	r3, #2
 8006902:	e087      	b.n	8006a14 <HAL_RTC_SetTime+0x12c>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2201      	movs	r2, #1
 8006908:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2202      	movs	r2, #2
 800690e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d126      	bne.n	8006964 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006920:	2b00      	cmp	r3, #0
 8006922:	d102      	bne.n	800692a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	2200      	movs	r2, #0
 8006928:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	4618      	mov	r0, r3
 8006930:	f000 fa29 	bl	8006d86 <RTC_ByteToBcd2>
 8006934:	4603      	mov	r3, r0
 8006936:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	785b      	ldrb	r3, [r3, #1]
 800693c:	4618      	mov	r0, r3
 800693e:	f000 fa22 	bl	8006d86 <RTC_ByteToBcd2>
 8006942:	4603      	mov	r3, r0
 8006944:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006946:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	789b      	ldrb	r3, [r3, #2]
 800694c:	4618      	mov	r0, r3
 800694e:	f000 fa1a 	bl	8006d86 <RTC_ByteToBcd2>
 8006952:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006954:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	78db      	ldrb	r3, [r3, #3]
 800695c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800695e:	4313      	orrs	r3, r2
 8006960:	617b      	str	r3, [r7, #20]
 8006962:	e018      	b.n	8006996 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800696e:	2b00      	cmp	r3, #0
 8006970:	d102      	bne.n	8006978 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	2200      	movs	r2, #0
 8006976:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	785b      	ldrb	r3, [r3, #1]
 8006982:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006984:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800698a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	78db      	ldrb	r3, [r3, #3]
 8006990:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006992:	4313      	orrs	r3, r2
 8006994:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	22ca      	movs	r2, #202	; 0xca
 800699c:	625a      	str	r2, [r3, #36]	; 0x24
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2253      	movs	r2, #83	; 0x53
 80069a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 f991 	bl	8006cce <RTC_EnterInitMode>
 80069ac:	4603      	mov	r3, r0
 80069ae:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80069b0:	7cfb      	ldrb	r3, [r7, #19]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d120      	bne.n	80069f8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80069c0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80069c4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	689a      	ldr	r2, [r3, #8]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80069d4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6899      	ldr	r1, [r3, #8]
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	68da      	ldr	r2, [r3, #12]
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	431a      	orrs	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f000 f9a4 	bl	8006d3c <RTC_ExitInitMode>
 80069f4:	4603      	mov	r3, r0
 80069f6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80069f8:	7cfb      	ldrb	r3, [r7, #19]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d102      	bne.n	8006a04 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2201      	movs	r2, #1
 8006a02:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	22ff      	movs	r2, #255	; 0xff
 8006a0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	771a      	strb	r2, [r3, #28]

  return status;
 8006a12:	7cfb      	ldrb	r3, [r7, #19]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	371c      	adds	r7, #28
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd90      	pop	{r4, r7, pc}

08006a1c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006a4e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006a52:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	0c1b      	lsrs	r3, r3, #16
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	0a1b      	lsrs	r3, r3, #8
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a7c:	b2da      	uxtb	r2, r3
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	0d9b      	lsrs	r3, r3, #22
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	f003 0301 	and.w	r3, r3, #1
 8006a8c:	b2da      	uxtb	r2, r3
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d11a      	bne.n	8006ace <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f000 f98f 	bl	8006dc0 <RTC_Bcd2ToByte>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	785b      	ldrb	r3, [r3, #1]
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f000 f986 	bl	8006dc0 <RTC_Bcd2ToByte>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	789b      	ldrb	r3, [r3, #2]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f000 f97d 	bl	8006dc0 <RTC_Bcd2ToByte>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	461a      	mov	r2, r3
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3718      	adds	r7, #24
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006ad8:	b590      	push	{r4, r7, lr}
 8006ada:	b087      	sub	sp, #28
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	7f1b      	ldrb	r3, [r3, #28]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d101      	bne.n	8006af4 <HAL_RTC_SetDate+0x1c>
 8006af0:	2302      	movs	r3, #2
 8006af2:	e071      	b.n	8006bd8 <HAL_RTC_SetDate+0x100>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2201      	movs	r2, #1
 8006af8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2202      	movs	r2, #2
 8006afe:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10e      	bne.n	8006b24 <HAL_RTC_SetDate+0x4c>
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	785b      	ldrb	r3, [r3, #1]
 8006b0a:	f003 0310 	and.w	r3, r3, #16
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d008      	beq.n	8006b24 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	785b      	ldrb	r3, [r3, #1]
 8006b16:	f023 0310 	bic.w	r3, r3, #16
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	330a      	adds	r3, #10
 8006b1e:	b2da      	uxtb	r2, r3
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d11c      	bne.n	8006b64 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	78db      	ldrb	r3, [r3, #3]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f000 f929 	bl	8006d86 <RTC_ByteToBcd2>
 8006b34:	4603      	mov	r3, r0
 8006b36:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	785b      	ldrb	r3, [r3, #1]
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f000 f922 	bl	8006d86 <RTC_ByteToBcd2>
 8006b42:	4603      	mov	r3, r0
 8006b44:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006b46:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	789b      	ldrb	r3, [r3, #2]
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f000 f91a 	bl	8006d86 <RTC_ByteToBcd2>
 8006b52:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006b54:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	617b      	str	r3, [r7, #20]
 8006b62:	e00e      	b.n	8006b82 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	78db      	ldrb	r3, [r3, #3]
 8006b68:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	785b      	ldrb	r3, [r3, #1]
 8006b6e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006b70:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006b72:	68ba      	ldr	r2, [r7, #8]
 8006b74:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006b76:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	22ca      	movs	r2, #202	; 0xca
 8006b88:	625a      	str	r2, [r3, #36]	; 0x24
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2253      	movs	r2, #83	; 0x53
 8006b90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f000 f89b 	bl	8006cce <RTC_EnterInitMode>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006b9c:	7cfb      	ldrb	r3, [r7, #19]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d10c      	bne.n	8006bbc <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006bac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006bb0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f000 f8c2 	bl	8006d3c <RTC_ExitInitMode>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006bbc:	7cfb      	ldrb	r3, [r7, #19]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d102      	bne.n	8006bc8 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	22ff      	movs	r2, #255	; 0xff
 8006bce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	771a      	strb	r2, [r3, #28]

  return status;
 8006bd6:	7cfb      	ldrb	r3, [r7, #19]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	371c      	adds	r7, #28
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd90      	pop	{r4, r7, pc}

08006be0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006bfa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006bfe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	0c1b      	lsrs	r3, r3, #16
 8006c04:	b2da      	uxtb	r2, r3
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	0a1b      	lsrs	r3, r3, #8
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	f003 031f 	and.w	r3, r3, #31
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c22:	b2da      	uxtb	r2, r3
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	0b5b      	lsrs	r3, r3, #13
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	f003 0307 	and.w	r3, r3, #7
 8006c32:	b2da      	uxtb	r2, r3
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d11a      	bne.n	8006c74 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	78db      	ldrb	r3, [r3, #3]
 8006c42:	4618      	mov	r0, r3
 8006c44:	f000 f8bc 	bl	8006dc0 <RTC_Bcd2ToByte>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	785b      	ldrb	r3, [r3, #1]
 8006c54:	4618      	mov	r0, r3
 8006c56:	f000 f8b3 	bl	8006dc0 <RTC_Bcd2ToByte>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	789b      	ldrb	r3, [r3, #2]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 f8aa 	bl	8006dc0 <RTC_Bcd2ToByte>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	461a      	mov	r2, r3
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b084      	sub	sp, #16
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c86:	2300      	movs	r3, #0
 8006c88:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68da      	ldr	r2, [r3, #12]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006c98:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c9a:	f7fc fb1d 	bl	80032d8 <HAL_GetTick>
 8006c9e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006ca0:	e009      	b.n	8006cb6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ca2:	f7fc fb19 	bl	80032d8 <HAL_GetTick>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cb0:	d901      	bls.n	8006cb6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	e007      	b.n	8006cc6 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	f003 0320 	and.w	r3, r3, #32
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d0ee      	beq.n	8006ca2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b084      	sub	sp, #16
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d122      	bne.n	8006d32 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68da      	ldr	r2, [r3, #12]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006cfa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006cfc:	f7fc faec 	bl	80032d8 <HAL_GetTick>
 8006d00:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006d02:	e00c      	b.n	8006d1e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006d04:	f7fc fae8 	bl	80032d8 <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d12:	d904      	bls.n	8006d1e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2204      	movs	r2, #4
 8006d18:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d102      	bne.n	8006d32 <RTC_EnterInitMode+0x64>
 8006d2c:	7bfb      	ldrb	r3, [r7, #15]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d1e8      	bne.n	8006d04 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d44:	2300      	movs	r3, #0
 8006d46:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68da      	ldr	r2, [r3, #12]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d56:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f003 0320 	and.w	r3, r3, #32
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10a      	bne.n	8006d7c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f7ff ff89 	bl	8006c7e <HAL_RTC_WaitForSynchro>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d004      	beq.n	8006d7c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2204      	movs	r2, #4
 8006d76:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b085      	sub	sp, #20
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006d90:	2300      	movs	r3, #0
 8006d92:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006d94:	e005      	b.n	8006da2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006d96:	7bfb      	ldrb	r3, [r7, #15]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006d9c:	79fb      	ldrb	r3, [r7, #7]
 8006d9e:	3b0a      	subs	r3, #10
 8006da0:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006da2:	79fb      	ldrb	r3, [r7, #7]
 8006da4:	2b09      	cmp	r3, #9
 8006da6:	d8f6      	bhi.n	8006d96 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006da8:	7bfb      	ldrb	r3, [r7, #15]
 8006daa:	011b      	lsls	r3, r3, #4
 8006dac:	b2da      	uxtb	r2, r3
 8006dae:	79fb      	ldrb	r3, [r7, #7]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	b2db      	uxtb	r3, r3
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3714      	adds	r7, #20
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006dce:	79fb      	ldrb	r3, [r7, #7]
 8006dd0:	091b      	lsrs	r3, r3, #4
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	0092      	lsls	r2, r2, #2
 8006dd8:	4413      	add	r3, r2
 8006dda:	005b      	lsls	r3, r3, #1
 8006ddc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006dde:	79fb      	ldrb	r3, [r7, #7]
 8006de0:	f003 030f 	and.w	r3, r3, #15
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
 8006de8:	4413      	add	r3, r2
 8006dea:	b2db      	uxtb	r3, r3
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3714      	adds	r7, #20
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d101      	bne.n	8006e0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e07b      	b.n	8006f02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d108      	bne.n	8006e24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e1a:	d009      	beq.n	8006e30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	61da      	str	r2, [r3, #28]
 8006e22:	e005      	b.n	8006e30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d106      	bne.n	8006e50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f7fb fe90 	bl	8002b70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2202      	movs	r2, #2
 8006e54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e78:	431a      	orrs	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e82:	431a      	orrs	r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	f003 0302 	and.w	r3, r3, #2
 8006e8c:	431a      	orrs	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	431a      	orrs	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ea0:	431a      	orrs	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006eaa:	431a      	orrs	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a1b      	ldr	r3, [r3, #32]
 8006eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eb4:	ea42 0103 	orr.w	r1, r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ebc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	430a      	orrs	r2, r1
 8006ec6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	0c1b      	lsrs	r3, r3, #16
 8006ece:	f003 0104 	and.w	r1, r3, #4
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed6:	f003 0210 	and.w	r2, r3, #16
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	69da      	ldr	r2, [r3, #28]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ef0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b08c      	sub	sp, #48	; 0x30
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	60f8      	str	r0, [r7, #12]
 8006f12:	60b9      	str	r1, [r7, #8]
 8006f14:	607a      	str	r2, [r7, #4]
 8006f16:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d101      	bne.n	8006f30 <HAL_SPI_TransmitReceive+0x26>
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	e18a      	b.n	8007246 <HAL_SPI_TransmitReceive+0x33c>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f38:	f7fc f9ce 	bl	80032d8 <HAL_GetTick>
 8006f3c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006f4e:	887b      	ldrh	r3, [r7, #2]
 8006f50:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006f52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d00f      	beq.n	8006f7a <HAL_SPI_TransmitReceive+0x70>
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f60:	d107      	bne.n	8006f72 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d103      	bne.n	8006f72 <HAL_SPI_TransmitReceive+0x68>
 8006f6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f6e:	2b04      	cmp	r3, #4
 8006f70:	d003      	beq.n	8006f7a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006f72:	2302      	movs	r3, #2
 8006f74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006f78:	e15b      	b.n	8007232 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d005      	beq.n	8006f8c <HAL_SPI_TransmitReceive+0x82>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d002      	beq.n	8006f8c <HAL_SPI_TransmitReceive+0x82>
 8006f86:	887b      	ldrh	r3, [r7, #2]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d103      	bne.n	8006f94 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006f92:	e14e      	b.n	8007232 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	2b04      	cmp	r3, #4
 8006f9e:	d003      	beq.n	8006fa8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2205      	movs	r2, #5
 8006fa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	887a      	ldrh	r2, [r7, #2]
 8006fb8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	887a      	ldrh	r2, [r7, #2]
 8006fbe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	887a      	ldrh	r2, [r7, #2]
 8006fca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	887a      	ldrh	r2, [r7, #2]
 8006fd0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe8:	2b40      	cmp	r3, #64	; 0x40
 8006fea:	d007      	beq.n	8006ffc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ffa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007004:	d178      	bne.n	80070f8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d002      	beq.n	8007014 <HAL_SPI_TransmitReceive+0x10a>
 800700e:	8b7b      	ldrh	r3, [r7, #26]
 8007010:	2b01      	cmp	r3, #1
 8007012:	d166      	bne.n	80070e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007018:	881a      	ldrh	r2, [r3, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007024:	1c9a      	adds	r2, r3, #2
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800702e:	b29b      	uxth	r3, r3
 8007030:	3b01      	subs	r3, #1
 8007032:	b29a      	uxth	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007038:	e053      	b.n	80070e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f003 0302 	and.w	r3, r3, #2
 8007044:	2b02      	cmp	r3, #2
 8007046:	d11b      	bne.n	8007080 <HAL_SPI_TransmitReceive+0x176>
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800704c:	b29b      	uxth	r3, r3
 800704e:	2b00      	cmp	r3, #0
 8007050:	d016      	beq.n	8007080 <HAL_SPI_TransmitReceive+0x176>
 8007052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007054:	2b01      	cmp	r3, #1
 8007056:	d113      	bne.n	8007080 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705c:	881a      	ldrh	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007068:	1c9a      	adds	r2, r3, #2
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007072:	b29b      	uxth	r3, r3
 8007074:	3b01      	subs	r3, #1
 8007076:	b29a      	uxth	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800707c:	2300      	movs	r3, #0
 800707e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	2b01      	cmp	r3, #1
 800708c:	d119      	bne.n	80070c2 <HAL_SPI_TransmitReceive+0x1b8>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007092:	b29b      	uxth	r3, r3
 8007094:	2b00      	cmp	r3, #0
 8007096:	d014      	beq.n	80070c2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68da      	ldr	r2, [r3, #12]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a2:	b292      	uxth	r2, r2
 80070a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070aa:	1c9a      	adds	r2, r3, #2
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	3b01      	subs	r3, #1
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80070be:	2301      	movs	r3, #1
 80070c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80070c2:	f7fc f909 	bl	80032d8 <HAL_GetTick>
 80070c6:	4602      	mov	r2, r0
 80070c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d807      	bhi.n	80070e2 <HAL_SPI_TransmitReceive+0x1d8>
 80070d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d8:	d003      	beq.n	80070e2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80070e0:	e0a7      	b.n	8007232 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1a6      	bne.n	800703a <HAL_SPI_TransmitReceive+0x130>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1a1      	bne.n	800703a <HAL_SPI_TransmitReceive+0x130>
 80070f6:	e07c      	b.n	80071f2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d002      	beq.n	8007106 <HAL_SPI_TransmitReceive+0x1fc>
 8007100:	8b7b      	ldrh	r3, [r7, #26]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d16b      	bne.n	80071de <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	330c      	adds	r3, #12
 8007110:	7812      	ldrb	r2, [r2, #0]
 8007112:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007118:	1c5a      	adds	r2, r3, #1
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007122:	b29b      	uxth	r3, r3
 8007124:	3b01      	subs	r3, #1
 8007126:	b29a      	uxth	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800712c:	e057      	b.n	80071de <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f003 0302 	and.w	r3, r3, #2
 8007138:	2b02      	cmp	r3, #2
 800713a:	d11c      	bne.n	8007176 <HAL_SPI_TransmitReceive+0x26c>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007140:	b29b      	uxth	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d017      	beq.n	8007176 <HAL_SPI_TransmitReceive+0x26c>
 8007146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007148:	2b01      	cmp	r3, #1
 800714a:	d114      	bne.n	8007176 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	330c      	adds	r3, #12
 8007156:	7812      	ldrb	r2, [r2, #0]
 8007158:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715e:	1c5a      	adds	r2, r3, #1
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007168:	b29b      	uxth	r3, r3
 800716a:	3b01      	subs	r3, #1
 800716c:	b29a      	uxth	r2, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007172:	2300      	movs	r3, #0
 8007174:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	2b01      	cmp	r3, #1
 8007182:	d119      	bne.n	80071b8 <HAL_SPI_TransmitReceive+0x2ae>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007188:	b29b      	uxth	r3, r3
 800718a:	2b00      	cmp	r3, #0
 800718c:	d014      	beq.n	80071b8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68da      	ldr	r2, [r3, #12]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007198:	b2d2      	uxtb	r2, r2
 800719a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a0:	1c5a      	adds	r2, r3, #1
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	3b01      	subs	r3, #1
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80071b4:	2301      	movs	r3, #1
 80071b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80071b8:	f7fc f88e 	bl	80032d8 <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d803      	bhi.n	80071d0 <HAL_SPI_TransmitReceive+0x2c6>
 80071c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ce:	d102      	bne.n	80071d6 <HAL_SPI_TransmitReceive+0x2cc>
 80071d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d103      	bne.n	80071de <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80071dc:	e029      	b.n	8007232 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1a2      	bne.n	800712e <HAL_SPI_TransmitReceive+0x224>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d19d      	bne.n	800712e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f000 f9d0 	bl	800759c <SPI_EndRxTxTransaction>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d006      	beq.n	8007210 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2220      	movs	r2, #32
 800720c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800720e:	e010      	b.n	8007232 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10b      	bne.n	8007230 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007218:	2300      	movs	r3, #0
 800721a:	617b      	str	r3, [r7, #20]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	617b      	str	r3, [r7, #20]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	617b      	str	r3, [r7, #20]
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	e000      	b.n	8007232 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007230:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007242:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007246:	4618      	mov	r0, r3
 8007248:	3730      	adds	r7, #48	; 0x30
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
	...

08007250 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b088      	sub	sp, #32
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	099b      	lsrs	r3, r3, #6
 800726c:	f003 0301 	and.w	r3, r3, #1
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10f      	bne.n	8007294 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00a      	beq.n	8007294 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	099b      	lsrs	r3, r3, #6
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	2b00      	cmp	r3, #0
 8007288:	d004      	beq.n	8007294 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	4798      	blx	r3
    return;
 8007292:	e0d7      	b.n	8007444 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	085b      	lsrs	r3, r3, #1
 8007298:	f003 0301 	and.w	r3, r3, #1
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00a      	beq.n	80072b6 <HAL_SPI_IRQHandler+0x66>
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	09db      	lsrs	r3, r3, #7
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d004      	beq.n	80072b6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	4798      	blx	r3
    return;
 80072b4:	e0c6      	b.n	8007444 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	095b      	lsrs	r3, r3, #5
 80072ba:	f003 0301 	and.w	r3, r3, #1
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d10c      	bne.n	80072dc <HAL_SPI_IRQHandler+0x8c>
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	099b      	lsrs	r3, r3, #6
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d106      	bne.n	80072dc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	0a1b      	lsrs	r3, r3, #8
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f000 80b4 	beq.w	8007444 <HAL_SPI_IRQHandler+0x1f4>
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	095b      	lsrs	r3, r3, #5
 80072e0:	f003 0301 	and.w	r3, r3, #1
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 80ad 	beq.w	8007444 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	099b      	lsrs	r3, r3, #6
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d023      	beq.n	800733e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	2b03      	cmp	r3, #3
 8007300:	d011      	beq.n	8007326 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007306:	f043 0204 	orr.w	r2, r3, #4
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800730e:	2300      	movs	r3, #0
 8007310:	617b      	str	r3, [r7, #20]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	617b      	str	r3, [r7, #20]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	617b      	str	r3, [r7, #20]
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	e00b      	b.n	800733e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007326:	2300      	movs	r3, #0
 8007328:	613b      	str	r3, [r7, #16]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	613b      	str	r3, [r7, #16]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	613b      	str	r3, [r7, #16]
 800733a:	693b      	ldr	r3, [r7, #16]
        return;
 800733c:	e082      	b.n	8007444 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	095b      	lsrs	r3, r3, #5
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	2b00      	cmp	r3, #0
 8007348:	d014      	beq.n	8007374 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800734e:	f043 0201 	orr.w	r2, r3, #1
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007356:	2300      	movs	r3, #0
 8007358:	60fb      	str	r3, [r7, #12]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	60fb      	str	r3, [r7, #12]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007370:	601a      	str	r2, [r3, #0]
 8007372:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	0a1b      	lsrs	r3, r3, #8
 8007378:	f003 0301 	and.w	r3, r3, #1
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00c      	beq.n	800739a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007384:	f043 0208 	orr.w	r2, r3, #8
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800738c:	2300      	movs	r3, #0
 800738e:	60bb      	str	r3, [r7, #8]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	60bb      	str	r3, [r7, #8]
 8007398:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d04f      	beq.n	8007442 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	685a      	ldr	r2, [r3, #4]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80073b0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	f003 0302 	and.w	r3, r3, #2
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d104      	bne.n	80073ce <HAL_SPI_IRQHandler+0x17e>
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d034      	beq.n	8007438 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	685a      	ldr	r2, [r3, #4]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f022 0203 	bic.w	r2, r2, #3
 80073dc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d011      	beq.n	800740a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073ea:	4a18      	ldr	r2, [pc, #96]	; (800744c <HAL_SPI_IRQHandler+0x1fc>)
 80073ec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7fc f9a0 	bl	8003738 <HAL_DMA_Abort_IT>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d005      	beq.n	800740a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007402:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800740e:	2b00      	cmp	r3, #0
 8007410:	d016      	beq.n	8007440 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007416:	4a0d      	ldr	r2, [pc, #52]	; (800744c <HAL_SPI_IRQHandler+0x1fc>)
 8007418:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800741e:	4618      	mov	r0, r3
 8007420:	f7fc f98a 	bl	8003738 <HAL_DMA_Abort_IT>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00a      	beq.n	8007440 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800742e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007436:	e003      	b.n	8007440 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f809 	bl	8007450 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800743e:	e000      	b.n	8007442 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007440:	bf00      	nop
    return;
 8007442:	bf00      	nop
  }
}
 8007444:	3720      	adds	r7, #32
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	08007465 	.word	0x08007465

08007450 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007470:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2200      	movs	r2, #0
 800747c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f7ff ffe6 	bl	8007450 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007484:	bf00      	nop
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b088      	sub	sp, #32
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	603b      	str	r3, [r7, #0]
 8007498:	4613      	mov	r3, r2
 800749a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800749c:	f7fb ff1c 	bl	80032d8 <HAL_GetTick>
 80074a0:	4602      	mov	r2, r0
 80074a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a4:	1a9b      	subs	r3, r3, r2
 80074a6:	683a      	ldr	r2, [r7, #0]
 80074a8:	4413      	add	r3, r2
 80074aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80074ac:	f7fb ff14 	bl	80032d8 <HAL_GetTick>
 80074b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80074b2:	4b39      	ldr	r3, [pc, #228]	; (8007598 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	015b      	lsls	r3, r3, #5
 80074b8:	0d1b      	lsrs	r3, r3, #20
 80074ba:	69fa      	ldr	r2, [r7, #28]
 80074bc:	fb02 f303 	mul.w	r3, r2, r3
 80074c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074c2:	e054      	b.n	800756e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ca:	d050      	beq.n	800756e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80074cc:	f7fb ff04 	bl	80032d8 <HAL_GetTick>
 80074d0:	4602      	mov	r2, r0
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	69fa      	ldr	r2, [r7, #28]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d902      	bls.n	80074e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d13d      	bne.n	800755e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	685a      	ldr	r2, [r3, #4]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80074f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074fa:	d111      	bne.n	8007520 <SPI_WaitFlagStateUntilTimeout+0x94>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007504:	d004      	beq.n	8007510 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800750e:	d107      	bne.n	8007520 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800751e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007528:	d10f      	bne.n	800754a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007538:	601a      	str	r2, [r3, #0]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007548:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800755a:	2303      	movs	r3, #3
 800755c:	e017      	b.n	800758e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d101      	bne.n	8007568 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007564:	2300      	movs	r3, #0
 8007566:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	3b01      	subs	r3, #1
 800756c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	689a      	ldr	r2, [r3, #8]
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	4013      	ands	r3, r2
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	429a      	cmp	r2, r3
 800757c:	bf0c      	ite	eq
 800757e:	2301      	moveq	r3, #1
 8007580:	2300      	movne	r3, #0
 8007582:	b2db      	uxtb	r3, r3
 8007584:	461a      	mov	r2, r3
 8007586:	79fb      	ldrb	r3, [r7, #7]
 8007588:	429a      	cmp	r2, r3
 800758a:	d19b      	bne.n	80074c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3720      	adds	r7, #32
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	20000234 	.word	0x20000234

0800759c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b088      	sub	sp, #32
 80075a0:	af02      	add	r7, sp, #8
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80075a8:	4b1b      	ldr	r3, [pc, #108]	; (8007618 <SPI_EndRxTxTransaction+0x7c>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a1b      	ldr	r2, [pc, #108]	; (800761c <SPI_EndRxTxTransaction+0x80>)
 80075ae:	fba2 2303 	umull	r2, r3, r2, r3
 80075b2:	0d5b      	lsrs	r3, r3, #21
 80075b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80075b8:	fb02 f303 	mul.w	r3, r2, r3
 80075bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075c6:	d112      	bne.n	80075ee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	9300      	str	r3, [sp, #0]
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	2200      	movs	r2, #0
 80075d0:	2180      	movs	r1, #128	; 0x80
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f7ff ff5a 	bl	800748c <SPI_WaitFlagStateUntilTimeout>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d016      	beq.n	800760c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075e2:	f043 0220 	orr.w	r2, r3, #32
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e00f      	b.n	800760e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00a      	beq.n	800760a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	3b01      	subs	r3, #1
 80075f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007604:	2b80      	cmp	r3, #128	; 0x80
 8007606:	d0f2      	beq.n	80075ee <SPI_EndRxTxTransaction+0x52>
 8007608:	e000      	b.n	800760c <SPI_EndRxTxTransaction+0x70>
        break;
 800760a:	bf00      	nop
  }

  return HAL_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3718      	adds	r7, #24
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	20000234 	.word	0x20000234
 800761c:	165e9f81 	.word	0x165e9f81

08007620 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d101      	bne.n	8007632 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e041      	b.n	80076b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007638:	b2db      	uxtb	r3, r3
 800763a:	2b00      	cmp	r3, #0
 800763c:	d106      	bne.n	800764c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f7fb fb14 	bl	8002c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2202      	movs	r2, #2
 8007650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	3304      	adds	r3, #4
 800765c:	4619      	mov	r1, r3
 800765e:	4610      	mov	r0, r2
 8007660:	f000 fa96 	bl	8007b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
	...

080076c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d001      	beq.n	80076d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e04e      	b.n	8007776 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2202      	movs	r2, #2
 80076dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68da      	ldr	r2, [r3, #12]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f042 0201 	orr.w	r2, r2, #1
 80076ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a23      	ldr	r2, [pc, #140]	; (8007784 <HAL_TIM_Base_Start_IT+0xc4>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d022      	beq.n	8007740 <HAL_TIM_Base_Start_IT+0x80>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007702:	d01d      	beq.n	8007740 <HAL_TIM_Base_Start_IT+0x80>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a1f      	ldr	r2, [pc, #124]	; (8007788 <HAL_TIM_Base_Start_IT+0xc8>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d018      	beq.n	8007740 <HAL_TIM_Base_Start_IT+0x80>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a1e      	ldr	r2, [pc, #120]	; (800778c <HAL_TIM_Base_Start_IT+0xcc>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d013      	beq.n	8007740 <HAL_TIM_Base_Start_IT+0x80>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a1c      	ldr	r2, [pc, #112]	; (8007790 <HAL_TIM_Base_Start_IT+0xd0>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d00e      	beq.n	8007740 <HAL_TIM_Base_Start_IT+0x80>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a1b      	ldr	r2, [pc, #108]	; (8007794 <HAL_TIM_Base_Start_IT+0xd4>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d009      	beq.n	8007740 <HAL_TIM_Base_Start_IT+0x80>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a19      	ldr	r2, [pc, #100]	; (8007798 <HAL_TIM_Base_Start_IT+0xd8>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d004      	beq.n	8007740 <HAL_TIM_Base_Start_IT+0x80>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a18      	ldr	r2, [pc, #96]	; (800779c <HAL_TIM_Base_Start_IT+0xdc>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d111      	bne.n	8007764 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	f003 0307 	and.w	r3, r3, #7
 800774a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2b06      	cmp	r3, #6
 8007750:	d010      	beq.n	8007774 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f042 0201 	orr.w	r2, r2, #1
 8007760:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007762:	e007      	b.n	8007774 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f042 0201 	orr.w	r2, r2, #1
 8007772:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	40010000 	.word	0x40010000
 8007788:	40000400 	.word	0x40000400
 800778c:	40000800 	.word	0x40000800
 8007790:	40000c00 	.word	0x40000c00
 8007794:	40010400 	.word	0x40010400
 8007798:	40014000 	.word	0x40014000
 800779c:	40001800 	.word	0x40001800

080077a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	f003 0302 	and.w	r3, r3, #2
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d122      	bne.n	80077fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	f003 0302 	and.w	r3, r3, #2
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d11b      	bne.n	80077fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f06f 0202 	mvn.w	r2, #2
 80077cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2201      	movs	r2, #1
 80077d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	f003 0303 	and.w	r3, r3, #3
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d003      	beq.n	80077ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f9b5 	bl	8007b52 <HAL_TIM_IC_CaptureCallback>
 80077e8:	e005      	b.n	80077f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f9a7 	bl	8007b3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 f9b8 	bl	8007b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	f003 0304 	and.w	r3, r3, #4
 8007806:	2b04      	cmp	r3, #4
 8007808:	d122      	bne.n	8007850 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	f003 0304 	and.w	r3, r3, #4
 8007814:	2b04      	cmp	r3, #4
 8007816:	d11b      	bne.n	8007850 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f06f 0204 	mvn.w	r2, #4
 8007820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2202      	movs	r2, #2
 8007826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	699b      	ldr	r3, [r3, #24]
 800782e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007832:	2b00      	cmp	r3, #0
 8007834:	d003      	beq.n	800783e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f98b 	bl	8007b52 <HAL_TIM_IC_CaptureCallback>
 800783c:	e005      	b.n	800784a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f97d 	bl	8007b3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 f98e 	bl	8007b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	f003 0308 	and.w	r3, r3, #8
 800785a:	2b08      	cmp	r3, #8
 800785c:	d122      	bne.n	80078a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	f003 0308 	and.w	r3, r3, #8
 8007868:	2b08      	cmp	r3, #8
 800786a:	d11b      	bne.n	80078a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f06f 0208 	mvn.w	r2, #8
 8007874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2204      	movs	r2, #4
 800787a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	69db      	ldr	r3, [r3, #28]
 8007882:	f003 0303 	and.w	r3, r3, #3
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f961 	bl	8007b52 <HAL_TIM_IC_CaptureCallback>
 8007890:	e005      	b.n	800789e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f953 	bl	8007b3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f964 	bl	8007b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	f003 0310 	and.w	r3, r3, #16
 80078ae:	2b10      	cmp	r3, #16
 80078b0:	d122      	bne.n	80078f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	f003 0310 	and.w	r3, r3, #16
 80078bc:	2b10      	cmp	r3, #16
 80078be:	d11b      	bne.n	80078f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f06f 0210 	mvn.w	r2, #16
 80078c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2208      	movs	r2, #8
 80078ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	69db      	ldr	r3, [r3, #28]
 80078d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d003      	beq.n	80078e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f937 	bl	8007b52 <HAL_TIM_IC_CaptureCallback>
 80078e4:	e005      	b.n	80078f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f929 	bl	8007b3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f93a 	bl	8007b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b01      	cmp	r3, #1
 8007904:	d10e      	bne.n	8007924 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	f003 0301 	and.w	r3, r3, #1
 8007910:	2b01      	cmp	r3, #1
 8007912:	d107      	bne.n	8007924 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f06f 0201 	mvn.w	r2, #1
 800791c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f7fa fcf0 	bl	8002304 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800792e:	2b80      	cmp	r3, #128	; 0x80
 8007930:	d10e      	bne.n	8007950 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800793c:	2b80      	cmp	r3, #128	; 0x80
 800793e:	d107      	bne.n	8007950 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fae0 	bl	8007f10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800795a:	2b40      	cmp	r3, #64	; 0x40
 800795c:	d10e      	bne.n	800797c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007968:	2b40      	cmp	r3, #64	; 0x40
 800796a:	d107      	bne.n	800797c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f8ff 	bl	8007b7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	f003 0320 	and.w	r3, r3, #32
 8007986:	2b20      	cmp	r3, #32
 8007988:	d10e      	bne.n	80079a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	f003 0320 	and.w	r3, r3, #32
 8007994:	2b20      	cmp	r3, #32
 8007996:	d107      	bne.n	80079a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f06f 0220 	mvn.w	r2, #32
 80079a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 faaa 	bl	8007efc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079a8:	bf00      	nop
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d101      	bne.n	80079cc <HAL_TIM_ConfigClockSource+0x1c>
 80079c8:	2302      	movs	r3, #2
 80079ca:	e0b4      	b.n	8007b36 <HAL_TIM_ConfigClockSource+0x186>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2202      	movs	r2, #2
 80079d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80079ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a04:	d03e      	beq.n	8007a84 <HAL_TIM_ConfigClockSource+0xd4>
 8007a06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a0a:	f200 8087 	bhi.w	8007b1c <HAL_TIM_ConfigClockSource+0x16c>
 8007a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a12:	f000 8086 	beq.w	8007b22 <HAL_TIM_ConfigClockSource+0x172>
 8007a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a1a:	d87f      	bhi.n	8007b1c <HAL_TIM_ConfigClockSource+0x16c>
 8007a1c:	2b70      	cmp	r3, #112	; 0x70
 8007a1e:	d01a      	beq.n	8007a56 <HAL_TIM_ConfigClockSource+0xa6>
 8007a20:	2b70      	cmp	r3, #112	; 0x70
 8007a22:	d87b      	bhi.n	8007b1c <HAL_TIM_ConfigClockSource+0x16c>
 8007a24:	2b60      	cmp	r3, #96	; 0x60
 8007a26:	d050      	beq.n	8007aca <HAL_TIM_ConfigClockSource+0x11a>
 8007a28:	2b60      	cmp	r3, #96	; 0x60
 8007a2a:	d877      	bhi.n	8007b1c <HAL_TIM_ConfigClockSource+0x16c>
 8007a2c:	2b50      	cmp	r3, #80	; 0x50
 8007a2e:	d03c      	beq.n	8007aaa <HAL_TIM_ConfigClockSource+0xfa>
 8007a30:	2b50      	cmp	r3, #80	; 0x50
 8007a32:	d873      	bhi.n	8007b1c <HAL_TIM_ConfigClockSource+0x16c>
 8007a34:	2b40      	cmp	r3, #64	; 0x40
 8007a36:	d058      	beq.n	8007aea <HAL_TIM_ConfigClockSource+0x13a>
 8007a38:	2b40      	cmp	r3, #64	; 0x40
 8007a3a:	d86f      	bhi.n	8007b1c <HAL_TIM_ConfigClockSource+0x16c>
 8007a3c:	2b30      	cmp	r3, #48	; 0x30
 8007a3e:	d064      	beq.n	8007b0a <HAL_TIM_ConfigClockSource+0x15a>
 8007a40:	2b30      	cmp	r3, #48	; 0x30
 8007a42:	d86b      	bhi.n	8007b1c <HAL_TIM_ConfigClockSource+0x16c>
 8007a44:	2b20      	cmp	r3, #32
 8007a46:	d060      	beq.n	8007b0a <HAL_TIM_ConfigClockSource+0x15a>
 8007a48:	2b20      	cmp	r3, #32
 8007a4a:	d867      	bhi.n	8007b1c <HAL_TIM_ConfigClockSource+0x16c>
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d05c      	beq.n	8007b0a <HAL_TIM_ConfigClockSource+0x15a>
 8007a50:	2b10      	cmp	r3, #16
 8007a52:	d05a      	beq.n	8007b0a <HAL_TIM_ConfigClockSource+0x15a>
 8007a54:	e062      	b.n	8007b1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6818      	ldr	r0, [r3, #0]
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	6899      	ldr	r1, [r3, #8]
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	685a      	ldr	r2, [r3, #4]
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	f000 f9ad 	bl	8007dc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68ba      	ldr	r2, [r7, #8]
 8007a80:	609a      	str	r2, [r3, #8]
      break;
 8007a82:	e04f      	b.n	8007b24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6818      	ldr	r0, [r3, #0]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	6899      	ldr	r1, [r3, #8]
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	f000 f996 	bl	8007dc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	689a      	ldr	r2, [r3, #8]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007aa6:	609a      	str	r2, [r3, #8]
      break;
 8007aa8:	e03c      	b.n	8007b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6818      	ldr	r0, [r3, #0]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	6859      	ldr	r1, [r3, #4]
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	f000 f90a 	bl	8007cd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2150      	movs	r1, #80	; 0x50
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f000 f963 	bl	8007d8e <TIM_ITRx_SetConfig>
      break;
 8007ac8:	e02c      	b.n	8007b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6818      	ldr	r0, [r3, #0]
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	6859      	ldr	r1, [r3, #4]
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	f000 f929 	bl	8007d2e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2160      	movs	r1, #96	; 0x60
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f000 f953 	bl	8007d8e <TIM_ITRx_SetConfig>
      break;
 8007ae8:	e01c      	b.n	8007b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6818      	ldr	r0, [r3, #0]
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	6859      	ldr	r1, [r3, #4]
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	461a      	mov	r2, r3
 8007af8:	f000 f8ea 	bl	8007cd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2140      	movs	r1, #64	; 0x40
 8007b02:	4618      	mov	r0, r3
 8007b04:	f000 f943 	bl	8007d8e <TIM_ITRx_SetConfig>
      break;
 8007b08:	e00c      	b.n	8007b24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4619      	mov	r1, r3
 8007b14:	4610      	mov	r0, r2
 8007b16:	f000 f93a 	bl	8007d8e <TIM_ITRx_SetConfig>
      break;
 8007b1a:	e003      	b.n	8007b24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8007b20:	e000      	b.n	8007b24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007b22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b083      	sub	sp, #12
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b46:	bf00      	nop
 8007b48:	370c      	adds	r7, #12
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b083      	sub	sp, #12
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b5a:	bf00      	nop
 8007b5c:	370c      	adds	r7, #12
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b66:	b480      	push	{r7}
 8007b68:	b083      	sub	sp, #12
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b6e:	bf00      	nop
 8007b70:	370c      	adds	r7, #12
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr

08007b7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b083      	sub	sp, #12
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b82:	bf00      	nop
 8007b84:	370c      	adds	r7, #12
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
	...

08007b90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a40      	ldr	r2, [pc, #256]	; (8007ca4 <TIM_Base_SetConfig+0x114>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d013      	beq.n	8007bd0 <TIM_Base_SetConfig+0x40>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bae:	d00f      	beq.n	8007bd0 <TIM_Base_SetConfig+0x40>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4a3d      	ldr	r2, [pc, #244]	; (8007ca8 <TIM_Base_SetConfig+0x118>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d00b      	beq.n	8007bd0 <TIM_Base_SetConfig+0x40>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4a3c      	ldr	r2, [pc, #240]	; (8007cac <TIM_Base_SetConfig+0x11c>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d007      	beq.n	8007bd0 <TIM_Base_SetConfig+0x40>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a3b      	ldr	r2, [pc, #236]	; (8007cb0 <TIM_Base_SetConfig+0x120>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d003      	beq.n	8007bd0 <TIM_Base_SetConfig+0x40>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a3a      	ldr	r2, [pc, #232]	; (8007cb4 <TIM_Base_SetConfig+0x124>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d108      	bne.n	8007be2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a2f      	ldr	r2, [pc, #188]	; (8007ca4 <TIM_Base_SetConfig+0x114>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d02b      	beq.n	8007c42 <TIM_Base_SetConfig+0xb2>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bf0:	d027      	beq.n	8007c42 <TIM_Base_SetConfig+0xb2>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a2c      	ldr	r2, [pc, #176]	; (8007ca8 <TIM_Base_SetConfig+0x118>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d023      	beq.n	8007c42 <TIM_Base_SetConfig+0xb2>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a2b      	ldr	r2, [pc, #172]	; (8007cac <TIM_Base_SetConfig+0x11c>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d01f      	beq.n	8007c42 <TIM_Base_SetConfig+0xb2>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a2a      	ldr	r2, [pc, #168]	; (8007cb0 <TIM_Base_SetConfig+0x120>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d01b      	beq.n	8007c42 <TIM_Base_SetConfig+0xb2>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a29      	ldr	r2, [pc, #164]	; (8007cb4 <TIM_Base_SetConfig+0x124>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d017      	beq.n	8007c42 <TIM_Base_SetConfig+0xb2>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a28      	ldr	r2, [pc, #160]	; (8007cb8 <TIM_Base_SetConfig+0x128>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d013      	beq.n	8007c42 <TIM_Base_SetConfig+0xb2>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a27      	ldr	r2, [pc, #156]	; (8007cbc <TIM_Base_SetConfig+0x12c>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d00f      	beq.n	8007c42 <TIM_Base_SetConfig+0xb2>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a26      	ldr	r2, [pc, #152]	; (8007cc0 <TIM_Base_SetConfig+0x130>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d00b      	beq.n	8007c42 <TIM_Base_SetConfig+0xb2>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a25      	ldr	r2, [pc, #148]	; (8007cc4 <TIM_Base_SetConfig+0x134>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d007      	beq.n	8007c42 <TIM_Base_SetConfig+0xb2>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a24      	ldr	r2, [pc, #144]	; (8007cc8 <TIM_Base_SetConfig+0x138>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d003      	beq.n	8007c42 <TIM_Base_SetConfig+0xb2>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a23      	ldr	r2, [pc, #140]	; (8007ccc <TIM_Base_SetConfig+0x13c>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d108      	bne.n	8007c54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	695b      	ldr	r3, [r3, #20]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	689a      	ldr	r2, [r3, #8]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4a0a      	ldr	r2, [pc, #40]	; (8007ca4 <TIM_Base_SetConfig+0x114>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d003      	beq.n	8007c88 <TIM_Base_SetConfig+0xf8>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4a0c      	ldr	r2, [pc, #48]	; (8007cb4 <TIM_Base_SetConfig+0x124>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d103      	bne.n	8007c90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	691a      	ldr	r2, [r3, #16]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	615a      	str	r2, [r3, #20]
}
 8007c96:	bf00      	nop
 8007c98:	3714      	adds	r7, #20
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop
 8007ca4:	40010000 	.word	0x40010000
 8007ca8:	40000400 	.word	0x40000400
 8007cac:	40000800 	.word	0x40000800
 8007cb0:	40000c00 	.word	0x40000c00
 8007cb4:	40010400 	.word	0x40010400
 8007cb8:	40014000 	.word	0x40014000
 8007cbc:	40014400 	.word	0x40014400
 8007cc0:	40014800 	.word	0x40014800
 8007cc4:	40001800 	.word	0x40001800
 8007cc8:	40001c00 	.word	0x40001c00
 8007ccc:	40002000 	.word	0x40002000

08007cd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b087      	sub	sp, #28
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6a1b      	ldr	r3, [r3, #32]
 8007ce0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	f023 0201 	bic.w	r2, r3, #1
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	699b      	ldr	r3, [r3, #24]
 8007cf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	011b      	lsls	r3, r3, #4
 8007d00:	693a      	ldr	r2, [r7, #16]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	f023 030a 	bic.w	r3, r3, #10
 8007d0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d0e:	697a      	ldr	r2, [r7, #20]
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	693a      	ldr	r2, [r7, #16]
 8007d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	621a      	str	r2, [r3, #32]
}
 8007d22:	bf00      	nop
 8007d24:	371c      	adds	r7, #28
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b087      	sub	sp, #28
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	60f8      	str	r0, [r7, #12]
 8007d36:	60b9      	str	r1, [r7, #8]
 8007d38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6a1b      	ldr	r3, [r3, #32]
 8007d3e:	f023 0210 	bic.w	r2, r3, #16
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	699b      	ldr	r3, [r3, #24]
 8007d4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6a1b      	ldr	r3, [r3, #32]
 8007d50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	031b      	lsls	r3, r3, #12
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	011b      	lsls	r3, r3, #4
 8007d70:	693a      	ldr	r2, [r7, #16]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	697a      	ldr	r2, [r7, #20]
 8007d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	693a      	ldr	r2, [r7, #16]
 8007d80:	621a      	str	r2, [r3, #32]
}
 8007d82:	bf00      	nop
 8007d84:	371c      	adds	r7, #28
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b085      	sub	sp, #20
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
 8007d96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007da4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007da6:	683a      	ldr	r2, [r7, #0]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	f043 0307 	orr.w	r3, r3, #7
 8007db0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	609a      	str	r2, [r3, #8]
}
 8007db8:	bf00      	nop
 8007dba:	3714      	adds	r7, #20
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b087      	sub	sp, #28
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
 8007dd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007dde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	021a      	lsls	r2, r3, #8
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	431a      	orrs	r2, r3
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	697a      	ldr	r2, [r7, #20]
 8007df6:	609a      	str	r2, [r3, #8]
}
 8007df8:	bf00      	nop
 8007dfa:	371c      	adds	r7, #28
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d101      	bne.n	8007e1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e18:	2302      	movs	r3, #2
 8007e1a:	e05a      	b.n	8007ed2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2202      	movs	r2, #2
 8007e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a21      	ldr	r2, [pc, #132]	; (8007ee0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d022      	beq.n	8007ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e68:	d01d      	beq.n	8007ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a1d      	ldr	r2, [pc, #116]	; (8007ee4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d018      	beq.n	8007ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a1b      	ldr	r2, [pc, #108]	; (8007ee8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d013      	beq.n	8007ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a1a      	ldr	r2, [pc, #104]	; (8007eec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d00e      	beq.n	8007ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a18      	ldr	r2, [pc, #96]	; (8007ef0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d009      	beq.n	8007ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a17      	ldr	r2, [pc, #92]	; (8007ef4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d004      	beq.n	8007ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a15      	ldr	r2, [pc, #84]	; (8007ef8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d10c      	bne.n	8007ec0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007eac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3714      	adds	r7, #20
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	40010000 	.word	0x40010000
 8007ee4:	40000400 	.word	0x40000400
 8007ee8:	40000800 	.word	0x40000800
 8007eec:	40000c00 	.word	0x40000c00
 8007ef0:	40010400 	.word	0x40010400
 8007ef4:	40014000 	.word	0x40014000
 8007ef8:	40001800 	.word	0x40001800

08007efc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d101      	bne.n	8007f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	e03f      	b.n	8007fb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d106      	bne.n	8007f50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7fa feb8 	bl	8002cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2224      	movs	r2, #36	; 0x24
 8007f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68da      	ldr	r2, [r3, #12]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fe19 	bl	8008ba0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	691a      	ldr	r2, [r3, #16]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	695a      	ldr	r2, [r3, #20]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68da      	ldr	r2, [r3, #12]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2220      	movs	r2, #32
 8007fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2220      	movs	r2, #32
 8007fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3708      	adds	r7, #8
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}

08007fbe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b08a      	sub	sp, #40	; 0x28
 8007fc2:	af02      	add	r7, sp, #8
 8007fc4:	60f8      	str	r0, [r7, #12]
 8007fc6:	60b9      	str	r1, [r7, #8]
 8007fc8:	603b      	str	r3, [r7, #0]
 8007fca:	4613      	mov	r3, r2
 8007fcc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	2b20      	cmp	r3, #32
 8007fdc:	d17c      	bne.n	80080d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d002      	beq.n	8007fea <HAL_UART_Transmit+0x2c>
 8007fe4:	88fb      	ldrh	r3, [r7, #6]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d101      	bne.n	8007fee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e075      	b.n	80080da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d101      	bne.n	8007ffc <HAL_UART_Transmit+0x3e>
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	e06e      	b.n	80080da <HAL_UART_Transmit+0x11c>
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2221      	movs	r2, #33	; 0x21
 800800e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008012:	f7fb f961 	bl	80032d8 <HAL_GetTick>
 8008016:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	88fa      	ldrh	r2, [r7, #6]
 800801c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	88fa      	ldrh	r2, [r7, #6]
 8008022:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800802c:	d108      	bne.n	8008040 <HAL_UART_Transmit+0x82>
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d104      	bne.n	8008040 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008036:	2300      	movs	r3, #0
 8008038:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	61bb      	str	r3, [r7, #24]
 800803e:	e003      	b.n	8008048 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008044:	2300      	movs	r3, #0
 8008046:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2200      	movs	r2, #0
 800804c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008050:	e02a      	b.n	80080a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	9300      	str	r3, [sp, #0]
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	2200      	movs	r2, #0
 800805a:	2180      	movs	r1, #128	; 0x80
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f000 fb59 	bl	8008714 <UART_WaitOnFlagUntilTimeout>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d001      	beq.n	800806c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008068:	2303      	movs	r3, #3
 800806a:	e036      	b.n	80080da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d10b      	bne.n	800808a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	881b      	ldrh	r3, [r3, #0]
 8008076:	461a      	mov	r2, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008080:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	3302      	adds	r3, #2
 8008086:	61bb      	str	r3, [r7, #24]
 8008088:	e007      	b.n	800809a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	781a      	ldrb	r2, [r3, #0]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	3301      	adds	r3, #1
 8008098:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800809e:	b29b      	uxth	r3, r3
 80080a0:	3b01      	subs	r3, #1
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1cf      	bne.n	8008052 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	2200      	movs	r2, #0
 80080ba:	2140      	movs	r1, #64	; 0x40
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f000 fb29 	bl	8008714 <UART_WaitOnFlagUntilTimeout>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d001      	beq.n	80080cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80080c8:	2303      	movs	r3, #3
 80080ca:	e006      	b.n	80080da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2220      	movs	r2, #32
 80080d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	e000      	b.n	80080da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80080d8:	2302      	movs	r3, #2
  }
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3720      	adds	r7, #32
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80080e2:	b480      	push	{r7}
 80080e4:	b085      	sub	sp, #20
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	60f8      	str	r0, [r7, #12]
 80080ea:	60b9      	str	r1, [r7, #8]
 80080ec:	4613      	mov	r3, r2
 80080ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	2b20      	cmp	r3, #32
 80080fa:	d130      	bne.n	800815e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d002      	beq.n	8008108 <HAL_UART_Transmit_IT+0x26>
 8008102:	88fb      	ldrh	r3, [r7, #6]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d101      	bne.n	800810c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e029      	b.n	8008160 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008112:	2b01      	cmp	r3, #1
 8008114:	d101      	bne.n	800811a <HAL_UART_Transmit_IT+0x38>
 8008116:	2302      	movs	r3, #2
 8008118:	e022      	b.n	8008160 <HAL_UART_Transmit_IT+0x7e>
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2201      	movs	r2, #1
 800811e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	68ba      	ldr	r2, [r7, #8]
 8008126:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	88fa      	ldrh	r2, [r7, #6]
 800812c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	88fa      	ldrh	r2, [r7, #6]
 8008132:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2221      	movs	r2, #33	; 0x21
 800813e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	68da      	ldr	r2, [r3, #12]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008158:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800815a:	2300      	movs	r3, #0
 800815c:	e000      	b.n	8008160 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800815e:	2302      	movs	r3, #2
  }
}
 8008160:	4618      	mov	r0, r3
 8008162:	3714      	adds	r7, #20
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	4613      	mov	r3, r2
 8008178:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008180:	b2db      	uxtb	r3, r3
 8008182:	2b20      	cmp	r3, #32
 8008184:	d11d      	bne.n	80081c2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d002      	beq.n	8008192 <HAL_UART_Receive_IT+0x26>
 800818c:	88fb      	ldrh	r3, [r7, #6]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d101      	bne.n	8008196 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	e016      	b.n	80081c4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800819c:	2b01      	cmp	r3, #1
 800819e:	d101      	bne.n	80081a4 <HAL_UART_Receive_IT+0x38>
 80081a0:	2302      	movs	r3, #2
 80081a2:	e00f      	b.n	80081c4 <HAL_UART_Receive_IT+0x58>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80081b2:	88fb      	ldrh	r3, [r7, #6]
 80081b4:	461a      	mov	r2, r3
 80081b6:	68b9      	ldr	r1, [r7, #8]
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f000 fb19 	bl	80087f0 <UART_Start_Receive_IT>
 80081be:	4603      	mov	r3, r0
 80081c0:	e000      	b.n	80081c4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80081c2:	2302      	movs	r3, #2
  }
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3710      	adds	r7, #16
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b0ba      	sub	sp, #232	; 0xe8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	695b      	ldr	r3, [r3, #20]
 80081ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80081f2:	2300      	movs	r3, #0
 80081f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80081f8:	2300      	movs	r3, #0
 80081fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80081fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008202:	f003 030f 	and.w	r3, r3, #15
 8008206:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800820a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800820e:	2b00      	cmp	r3, #0
 8008210:	d10f      	bne.n	8008232 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008216:	f003 0320 	and.w	r3, r3, #32
 800821a:	2b00      	cmp	r3, #0
 800821c:	d009      	beq.n	8008232 <HAL_UART_IRQHandler+0x66>
 800821e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008222:	f003 0320 	and.w	r3, r3, #32
 8008226:	2b00      	cmp	r3, #0
 8008228:	d003      	beq.n	8008232 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 fbfd 	bl	8008a2a <UART_Receive_IT>
      return;
 8008230:	e256      	b.n	80086e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008232:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008236:	2b00      	cmp	r3, #0
 8008238:	f000 80de 	beq.w	80083f8 <HAL_UART_IRQHandler+0x22c>
 800823c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008240:	f003 0301 	and.w	r3, r3, #1
 8008244:	2b00      	cmp	r3, #0
 8008246:	d106      	bne.n	8008256 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800824c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 80d1 	beq.w	80083f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800825a:	f003 0301 	and.w	r3, r3, #1
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00b      	beq.n	800827a <HAL_UART_IRQHandler+0xae>
 8008262:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800826a:	2b00      	cmp	r3, #0
 800826c:	d005      	beq.n	800827a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008272:	f043 0201 	orr.w	r2, r3, #1
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800827a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800827e:	f003 0304 	and.w	r3, r3, #4
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00b      	beq.n	800829e <HAL_UART_IRQHandler+0xd2>
 8008286:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800828a:	f003 0301 	and.w	r3, r3, #1
 800828e:	2b00      	cmp	r3, #0
 8008290:	d005      	beq.n	800829e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008296:	f043 0202 	orr.w	r2, r3, #2
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800829e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082a2:	f003 0302 	and.w	r3, r3, #2
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00b      	beq.n	80082c2 <HAL_UART_IRQHandler+0xf6>
 80082aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082ae:	f003 0301 	and.w	r3, r3, #1
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d005      	beq.n	80082c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ba:	f043 0204 	orr.w	r2, r3, #4
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80082c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082c6:	f003 0308 	and.w	r3, r3, #8
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d011      	beq.n	80082f2 <HAL_UART_IRQHandler+0x126>
 80082ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082d2:	f003 0320 	and.w	r3, r3, #32
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d105      	bne.n	80082e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80082da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d005      	beq.n	80082f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ea:	f043 0208 	orr.w	r2, r3, #8
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f000 81ed 	beq.w	80086d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80082fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008300:	f003 0320 	and.w	r3, r3, #32
 8008304:	2b00      	cmp	r3, #0
 8008306:	d008      	beq.n	800831a <HAL_UART_IRQHandler+0x14e>
 8008308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800830c:	f003 0320 	and.w	r3, r3, #32
 8008310:	2b00      	cmp	r3, #0
 8008312:	d002      	beq.n	800831a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fb88 	bl	8008a2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	695b      	ldr	r3, [r3, #20]
 8008320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008324:	2b40      	cmp	r3, #64	; 0x40
 8008326:	bf0c      	ite	eq
 8008328:	2301      	moveq	r3, #1
 800832a:	2300      	movne	r3, #0
 800832c:	b2db      	uxtb	r3, r3
 800832e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008336:	f003 0308 	and.w	r3, r3, #8
 800833a:	2b00      	cmp	r3, #0
 800833c:	d103      	bne.n	8008346 <HAL_UART_IRQHandler+0x17a>
 800833e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008342:	2b00      	cmp	r3, #0
 8008344:	d04f      	beq.n	80083e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 fa90 	bl	800886c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	695b      	ldr	r3, [r3, #20]
 8008352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008356:	2b40      	cmp	r3, #64	; 0x40
 8008358:	d141      	bne.n	80083de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	3314      	adds	r3, #20
 8008360:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008364:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008368:	e853 3f00 	ldrex	r3, [r3]
 800836c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008370:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008378:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	3314      	adds	r3, #20
 8008382:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008386:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800838a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008392:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008396:	e841 2300 	strex	r3, r2, [r1]
 800839a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800839e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1d9      	bne.n	800835a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d013      	beq.n	80083d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b2:	4a7d      	ldr	r2, [pc, #500]	; (80085a8 <HAL_UART_IRQHandler+0x3dc>)
 80083b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7fb f9bc 	bl	8003738 <HAL_DMA_Abort_IT>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d016      	beq.n	80083f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80083d0:	4610      	mov	r0, r2
 80083d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083d4:	e00e      	b.n	80083f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f986 	bl	80086e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083dc:	e00a      	b.n	80083f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 f982 	bl	80086e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083e4:	e006      	b.n	80083f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 f97e 	bl	80086e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80083f2:	e170      	b.n	80086d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083f4:	bf00      	nop
    return;
 80083f6:	e16e      	b.n	80086d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	f040 814a 	bne.w	8008696 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008406:	f003 0310 	and.w	r3, r3, #16
 800840a:	2b00      	cmp	r3, #0
 800840c:	f000 8143 	beq.w	8008696 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008414:	f003 0310 	and.w	r3, r3, #16
 8008418:	2b00      	cmp	r3, #0
 800841a:	f000 813c 	beq.w	8008696 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800841e:	2300      	movs	r3, #0
 8008420:	60bb      	str	r3, [r7, #8]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	60bb      	str	r3, [r7, #8]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	60bb      	str	r3, [r7, #8]
 8008432:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	695b      	ldr	r3, [r3, #20]
 800843a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800843e:	2b40      	cmp	r3, #64	; 0x40
 8008440:	f040 80b4 	bne.w	80085ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008450:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008454:	2b00      	cmp	r3, #0
 8008456:	f000 8140 	beq.w	80086da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800845e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008462:	429a      	cmp	r2, r3
 8008464:	f080 8139 	bcs.w	80086da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800846e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008474:	69db      	ldr	r3, [r3, #28]
 8008476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800847a:	f000 8088 	beq.w	800858e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	330c      	adds	r3, #12
 8008484:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008488:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800848c:	e853 3f00 	ldrex	r3, [r3]
 8008490:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008494:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800849c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	330c      	adds	r3, #12
 80084a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80084aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80084ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80084b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80084ba:	e841 2300 	strex	r3, r2, [r1]
 80084be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80084c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1d9      	bne.n	800847e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	3314      	adds	r3, #20
 80084d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084d4:	e853 3f00 	ldrex	r3, [r3]
 80084d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80084da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084dc:	f023 0301 	bic.w	r3, r3, #1
 80084e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	3314      	adds	r3, #20
 80084ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80084ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80084f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80084f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80084fa:	e841 2300 	strex	r3, r2, [r1]
 80084fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008500:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1e1      	bne.n	80084ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	3314      	adds	r3, #20
 800850c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008510:	e853 3f00 	ldrex	r3, [r3]
 8008514:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008518:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800851c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	3314      	adds	r3, #20
 8008526:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800852a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800852c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008530:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008532:	e841 2300 	strex	r3, r2, [r1]
 8008536:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008538:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1e3      	bne.n	8008506 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2220      	movs	r2, #32
 8008542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	330c      	adds	r3, #12
 8008552:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008556:	e853 3f00 	ldrex	r3, [r3]
 800855a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800855c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800855e:	f023 0310 	bic.w	r3, r3, #16
 8008562:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	330c      	adds	r3, #12
 800856c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008570:	65ba      	str	r2, [r7, #88]	; 0x58
 8008572:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008574:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008576:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008578:	e841 2300 	strex	r3, r2, [r1]
 800857c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800857e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1e3      	bne.n	800854c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008588:	4618      	mov	r0, r3
 800858a:	f7fb f865 	bl	8003658 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008596:	b29b      	uxth	r3, r3
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	b29b      	uxth	r3, r3
 800859c:	4619      	mov	r1, r3
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 f8ac 	bl	80086fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80085a4:	e099      	b.n	80086da <HAL_UART_IRQHandler+0x50e>
 80085a6:	bf00      	nop
 80085a8:	08008933 	.word	0x08008933
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f000 808b 	beq.w	80086de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80085c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f000 8086 	beq.w	80086de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	330c      	adds	r3, #12
 80085d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085dc:	e853 3f00 	ldrex	r3, [r3]
 80085e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	330c      	adds	r3, #12
 80085f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80085f6:	647a      	str	r2, [r7, #68]	; 0x44
 80085f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085fe:	e841 2300 	strex	r3, r2, [r1]
 8008602:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1e3      	bne.n	80085d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	3314      	adds	r3, #20
 8008610:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008614:	e853 3f00 	ldrex	r3, [r3]
 8008618:	623b      	str	r3, [r7, #32]
   return(result);
 800861a:	6a3b      	ldr	r3, [r7, #32]
 800861c:	f023 0301 	bic.w	r3, r3, #1
 8008620:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	3314      	adds	r3, #20
 800862a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800862e:	633a      	str	r2, [r7, #48]	; 0x30
 8008630:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008632:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008636:	e841 2300 	strex	r3, r2, [r1]
 800863a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800863c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863e:	2b00      	cmp	r3, #0
 8008640:	d1e3      	bne.n	800860a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2220      	movs	r2, #32
 8008646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	330c      	adds	r3, #12
 8008656:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	e853 3f00 	ldrex	r3, [r3]
 800865e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f023 0310 	bic.w	r3, r3, #16
 8008666:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	330c      	adds	r3, #12
 8008670:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008674:	61fa      	str	r2, [r7, #28]
 8008676:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008678:	69b9      	ldr	r1, [r7, #24]
 800867a:	69fa      	ldr	r2, [r7, #28]
 800867c:	e841 2300 	strex	r3, r2, [r1]
 8008680:	617b      	str	r3, [r7, #20]
   return(result);
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d1e3      	bne.n	8008650 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008688:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800868c:	4619      	mov	r1, r3
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 f834 	bl	80086fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008694:	e023      	b.n	80086de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800869a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d009      	beq.n	80086b6 <HAL_UART_IRQHandler+0x4ea>
 80086a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d003      	beq.n	80086b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f953 	bl	800895a <UART_Transmit_IT>
    return;
 80086b4:	e014      	b.n	80086e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80086b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00e      	beq.n	80086e0 <HAL_UART_IRQHandler+0x514>
 80086c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d008      	beq.n	80086e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 f993 	bl	80089fa <UART_EndTransmit_IT>
    return;
 80086d4:	e004      	b.n	80086e0 <HAL_UART_IRQHandler+0x514>
    return;
 80086d6:	bf00      	nop
 80086d8:	e002      	b.n	80086e0 <HAL_UART_IRQHandler+0x514>
      return;
 80086da:	bf00      	nop
 80086dc:	e000      	b.n	80086e0 <HAL_UART_IRQHandler+0x514>
      return;
 80086de:	bf00      	nop
  }
}
 80086e0:	37e8      	adds	r7, #232	; 0xe8
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop

080086e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80086f0:	bf00      	nop
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	460b      	mov	r3, r1
 8008706:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008708:	bf00      	nop
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b090      	sub	sp, #64	; 0x40
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	603b      	str	r3, [r7, #0]
 8008720:	4613      	mov	r3, r2
 8008722:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008724:	e050      	b.n	80087c8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800872c:	d04c      	beq.n	80087c8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800872e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008730:	2b00      	cmp	r3, #0
 8008732:	d007      	beq.n	8008744 <UART_WaitOnFlagUntilTimeout+0x30>
 8008734:	f7fa fdd0 	bl	80032d8 <HAL_GetTick>
 8008738:	4602      	mov	r2, r0
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	1ad3      	subs	r3, r2, r3
 800873e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008740:	429a      	cmp	r2, r3
 8008742:	d241      	bcs.n	80087c8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	330c      	adds	r3, #12
 800874a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874e:	e853 3f00 	ldrex	r3, [r3]
 8008752:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008756:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800875a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	330c      	adds	r3, #12
 8008762:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008764:	637a      	str	r2, [r7, #52]	; 0x34
 8008766:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008768:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800876a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800876c:	e841 2300 	strex	r3, r2, [r1]
 8008770:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008774:	2b00      	cmp	r3, #0
 8008776:	d1e5      	bne.n	8008744 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	3314      	adds	r3, #20
 800877e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	e853 3f00 	ldrex	r3, [r3]
 8008786:	613b      	str	r3, [r7, #16]
   return(result);
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	f023 0301 	bic.w	r3, r3, #1
 800878e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	3314      	adds	r3, #20
 8008796:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008798:	623a      	str	r2, [r7, #32]
 800879a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879c:	69f9      	ldr	r1, [r7, #28]
 800879e:	6a3a      	ldr	r2, [r7, #32]
 80087a0:	e841 2300 	strex	r3, r2, [r1]
 80087a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1e5      	bne.n	8008778 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2220      	movs	r2, #32
 80087b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2220      	movs	r2, #32
 80087b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e00f      	b.n	80087e8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	4013      	ands	r3, r2
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	bf0c      	ite	eq
 80087d8:	2301      	moveq	r3, #1
 80087da:	2300      	movne	r3, #0
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	461a      	mov	r2, r3
 80087e0:	79fb      	ldrb	r3, [r7, #7]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d09f      	beq.n	8008726 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3740      	adds	r7, #64	; 0x40
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b085      	sub	sp, #20
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	4613      	mov	r3, r2
 80087fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	68ba      	ldr	r2, [r7, #8]
 8008802:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	88fa      	ldrh	r2, [r7, #6]
 8008808:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	88fa      	ldrh	r2, [r7, #6]
 800880e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2200      	movs	r2, #0
 8008814:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2222      	movs	r2, #34	; 0x22
 800881a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2200      	movs	r2, #0
 8008822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	691b      	ldr	r3, [r3, #16]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d007      	beq.n	800883e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68da      	ldr	r2, [r3, #12]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800883c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	695a      	ldr	r2, [r3, #20]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f042 0201 	orr.w	r2, r2, #1
 800884c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68da      	ldr	r2, [r3, #12]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f042 0220 	orr.w	r2, r2, #32
 800885c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3714      	adds	r7, #20
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800886c:	b480      	push	{r7}
 800886e:	b095      	sub	sp, #84	; 0x54
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	330c      	adds	r3, #12
 800887a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800887e:	e853 3f00 	ldrex	r3, [r3]
 8008882:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008886:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800888a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	330c      	adds	r3, #12
 8008892:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008894:	643a      	str	r2, [r7, #64]	; 0x40
 8008896:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008898:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800889a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800889c:	e841 2300 	strex	r3, r2, [r1]
 80088a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1e5      	bne.n	8008874 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	3314      	adds	r3, #20
 80088ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b0:	6a3b      	ldr	r3, [r7, #32]
 80088b2:	e853 3f00 	ldrex	r3, [r3]
 80088b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	f023 0301 	bic.w	r3, r3, #1
 80088be:	64bb      	str	r3, [r7, #72]	; 0x48
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	3314      	adds	r3, #20
 80088c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088d0:	e841 2300 	strex	r3, r2, [r1]
 80088d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d1e5      	bne.n	80088a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d119      	bne.n	8008918 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	330c      	adds	r3, #12
 80088ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	e853 3f00 	ldrex	r3, [r3]
 80088f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	f023 0310 	bic.w	r3, r3, #16
 80088fa:	647b      	str	r3, [r7, #68]	; 0x44
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	330c      	adds	r3, #12
 8008902:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008904:	61ba      	str	r2, [r7, #24]
 8008906:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008908:	6979      	ldr	r1, [r7, #20]
 800890a:	69ba      	ldr	r2, [r7, #24]
 800890c:	e841 2300 	strex	r3, r2, [r1]
 8008910:	613b      	str	r3, [r7, #16]
   return(result);
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1e5      	bne.n	80088e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2220      	movs	r2, #32
 800891c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008926:	bf00      	nop
 8008928:	3754      	adds	r7, #84	; 0x54
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr

08008932 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b084      	sub	sp, #16
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2200      	movs	r2, #0
 8008944:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2200      	movs	r2, #0
 800894a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f7ff fecb 	bl	80086e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008952:	bf00      	nop
 8008954:	3710      	adds	r7, #16
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800895a:	b480      	push	{r7}
 800895c:	b085      	sub	sp, #20
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008968:	b2db      	uxtb	r3, r3
 800896a:	2b21      	cmp	r3, #33	; 0x21
 800896c:	d13e      	bne.n	80089ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008976:	d114      	bne.n	80089a2 <UART_Transmit_IT+0x48>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d110      	bne.n	80089a2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a1b      	ldr	r3, [r3, #32]
 8008984:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	881b      	ldrh	r3, [r3, #0]
 800898a:	461a      	mov	r2, r3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008994:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a1b      	ldr	r3, [r3, #32]
 800899a:	1c9a      	adds	r2, r3, #2
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	621a      	str	r2, [r3, #32]
 80089a0:	e008      	b.n	80089b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a1b      	ldr	r3, [r3, #32]
 80089a6:	1c59      	adds	r1, r3, #1
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	6211      	str	r1, [r2, #32]
 80089ac:	781a      	ldrb	r2, [r3, #0]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	3b01      	subs	r3, #1
 80089bc:	b29b      	uxth	r3, r3
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	4619      	mov	r1, r3
 80089c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d10f      	bne.n	80089e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	68da      	ldr	r2, [r3, #12]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	68da      	ldr	r2, [r3, #12]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80089e8:	2300      	movs	r3, #0
 80089ea:	e000      	b.n	80089ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80089ec:	2302      	movs	r3, #2
  }
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3714      	adds	r7, #20
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr

080089fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b082      	sub	sp, #8
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68da      	ldr	r2, [r3, #12]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2220      	movs	r2, #32
 8008a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f7f9 f8ee 	bl	8001bfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3708      	adds	r7, #8
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b08c      	sub	sp, #48	; 0x30
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	2b22      	cmp	r3, #34	; 0x22
 8008a3c:	f040 80ab 	bne.w	8008b96 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a48:	d117      	bne.n	8008a7a <UART_Receive_IT+0x50>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d113      	bne.n	8008a7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008a52:	2300      	movs	r3, #0
 8008a54:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a5a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a68:	b29a      	uxth	r2, r3
 8008a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a72:	1c9a      	adds	r2, r3, #2
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	629a      	str	r2, [r3, #40]	; 0x28
 8008a78:	e026      	b.n	8008ac8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008a80:	2300      	movs	r3, #0
 8008a82:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a8c:	d007      	beq.n	8008a9e <UART_Receive_IT+0x74>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d10a      	bne.n	8008aac <UART_Receive_IT+0x82>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	691b      	ldr	r3, [r3, #16]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d106      	bne.n	8008aac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	b2da      	uxtb	r2, r3
 8008aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa8:	701a      	strb	r2, [r3, #0]
 8008aaa:	e008      	b.n	8008abe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ab8:	b2da      	uxtb	r2, r3
 8008aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008abc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac2:	1c5a      	adds	r2, r3, #1
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d15a      	bne.n	8008b92 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68da      	ldr	r2, [r3, #12]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f022 0220 	bic.w	r2, r2, #32
 8008aea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	68da      	ldr	r2, [r3, #12]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008afa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	695a      	ldr	r2, [r3, #20]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f022 0201 	bic.w	r2, r2, #1
 8008b0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2220      	movs	r2, #32
 8008b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d135      	bne.n	8008b88 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	330c      	adds	r3, #12
 8008b28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	e853 3f00 	ldrex	r3, [r3]
 8008b30:	613b      	str	r3, [r7, #16]
   return(result);
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	f023 0310 	bic.w	r3, r3, #16
 8008b38:	627b      	str	r3, [r7, #36]	; 0x24
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	330c      	adds	r3, #12
 8008b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b42:	623a      	str	r2, [r7, #32]
 8008b44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b46:	69f9      	ldr	r1, [r7, #28]
 8008b48:	6a3a      	ldr	r2, [r7, #32]
 8008b4a:	e841 2300 	strex	r3, r2, [r1]
 8008b4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b50:	69bb      	ldr	r3, [r7, #24]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d1e5      	bne.n	8008b22 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f003 0310 	and.w	r3, r3, #16
 8008b60:	2b10      	cmp	r3, #16
 8008b62:	d10a      	bne.n	8008b7a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b64:	2300      	movs	r3, #0
 8008b66:	60fb      	str	r3, [r7, #12]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	60fb      	str	r3, [r7, #12]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	60fb      	str	r3, [r7, #12]
 8008b78:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b7e:	4619      	mov	r1, r3
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f7ff fdbb 	bl	80086fc <HAL_UARTEx_RxEventCallback>
 8008b86:	e002      	b.n	8008b8e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f7f9 f813 	bl	8001bb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	e002      	b.n	8008b98 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008b92:	2300      	movs	r3, #0
 8008b94:	e000      	b.n	8008b98 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008b96:	2302      	movs	r3, #2
  }
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3730      	adds	r7, #48	; 0x30
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ba4:	b0c0      	sub	sp, #256	; 0x100
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	691b      	ldr	r3, [r3, #16]
 8008bb4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bbc:	68d9      	ldr	r1, [r3, #12]
 8008bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	ea40 0301 	orr.w	r3, r0, r1
 8008bc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bce:	689a      	ldr	r2, [r3, #8]
 8008bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	431a      	orrs	r2, r3
 8008bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bdc:	695b      	ldr	r3, [r3, #20]
 8008bde:	431a      	orrs	r2, r3
 8008be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008be4:	69db      	ldr	r3, [r3, #28]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008bf8:	f021 010c 	bic.w	r1, r1, #12
 8008bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c06:	430b      	orrs	r3, r1
 8008c08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	695b      	ldr	r3, [r3, #20]
 8008c12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c1a:	6999      	ldr	r1, [r3, #24]
 8008c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	ea40 0301 	orr.w	r3, r0, r1
 8008c26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	4b8f      	ldr	r3, [pc, #572]	; (8008e6c <UART_SetConfig+0x2cc>)
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d005      	beq.n	8008c40 <UART_SetConfig+0xa0>
 8008c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	4b8d      	ldr	r3, [pc, #564]	; (8008e70 <UART_SetConfig+0x2d0>)
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d104      	bne.n	8008c4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c40:	f7fd fcb4 	bl	80065ac <HAL_RCC_GetPCLK2Freq>
 8008c44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008c48:	e003      	b.n	8008c52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c4a:	f7fd fc9b 	bl	8006584 <HAL_RCC_GetPCLK1Freq>
 8008c4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c56:	69db      	ldr	r3, [r3, #28]
 8008c58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c5c:	f040 810c 	bne.w	8008e78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c64:	2200      	movs	r2, #0
 8008c66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008c6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008c6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008c72:	4622      	mov	r2, r4
 8008c74:	462b      	mov	r3, r5
 8008c76:	1891      	adds	r1, r2, r2
 8008c78:	65b9      	str	r1, [r7, #88]	; 0x58
 8008c7a:	415b      	adcs	r3, r3
 8008c7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008c82:	4621      	mov	r1, r4
 8008c84:	eb12 0801 	adds.w	r8, r2, r1
 8008c88:	4629      	mov	r1, r5
 8008c8a:	eb43 0901 	adc.w	r9, r3, r1
 8008c8e:	f04f 0200 	mov.w	r2, #0
 8008c92:	f04f 0300 	mov.w	r3, #0
 8008c96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008ca2:	4690      	mov	r8, r2
 8008ca4:	4699      	mov	r9, r3
 8008ca6:	4623      	mov	r3, r4
 8008ca8:	eb18 0303 	adds.w	r3, r8, r3
 8008cac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008cb0:	462b      	mov	r3, r5
 8008cb2:	eb49 0303 	adc.w	r3, r9, r3
 8008cb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008cc6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008cca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008cce:	460b      	mov	r3, r1
 8008cd0:	18db      	adds	r3, r3, r3
 8008cd2:	653b      	str	r3, [r7, #80]	; 0x50
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	eb42 0303 	adc.w	r3, r2, r3
 8008cda:	657b      	str	r3, [r7, #84]	; 0x54
 8008cdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008ce0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008ce4:	f7f7 fadc 	bl	80002a0 <__aeabi_uldivmod>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	460b      	mov	r3, r1
 8008cec:	4b61      	ldr	r3, [pc, #388]	; (8008e74 <UART_SetConfig+0x2d4>)
 8008cee:	fba3 2302 	umull	r2, r3, r3, r2
 8008cf2:	095b      	lsrs	r3, r3, #5
 8008cf4:	011c      	lsls	r4, r3, #4
 8008cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008d04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008d08:	4642      	mov	r2, r8
 8008d0a:	464b      	mov	r3, r9
 8008d0c:	1891      	adds	r1, r2, r2
 8008d0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008d10:	415b      	adcs	r3, r3
 8008d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008d18:	4641      	mov	r1, r8
 8008d1a:	eb12 0a01 	adds.w	sl, r2, r1
 8008d1e:	4649      	mov	r1, r9
 8008d20:	eb43 0b01 	adc.w	fp, r3, r1
 8008d24:	f04f 0200 	mov.w	r2, #0
 8008d28:	f04f 0300 	mov.w	r3, #0
 8008d2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008d30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008d34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d38:	4692      	mov	sl, r2
 8008d3a:	469b      	mov	fp, r3
 8008d3c:	4643      	mov	r3, r8
 8008d3e:	eb1a 0303 	adds.w	r3, sl, r3
 8008d42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d46:	464b      	mov	r3, r9
 8008d48:	eb4b 0303 	adc.w	r3, fp, r3
 8008d4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008d60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008d64:	460b      	mov	r3, r1
 8008d66:	18db      	adds	r3, r3, r3
 8008d68:	643b      	str	r3, [r7, #64]	; 0x40
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	eb42 0303 	adc.w	r3, r2, r3
 8008d70:	647b      	str	r3, [r7, #68]	; 0x44
 8008d72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008d76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008d7a:	f7f7 fa91 	bl	80002a0 <__aeabi_uldivmod>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	460b      	mov	r3, r1
 8008d82:	4611      	mov	r1, r2
 8008d84:	4b3b      	ldr	r3, [pc, #236]	; (8008e74 <UART_SetConfig+0x2d4>)
 8008d86:	fba3 2301 	umull	r2, r3, r3, r1
 8008d8a:	095b      	lsrs	r3, r3, #5
 8008d8c:	2264      	movs	r2, #100	; 0x64
 8008d8e:	fb02 f303 	mul.w	r3, r2, r3
 8008d92:	1acb      	subs	r3, r1, r3
 8008d94:	00db      	lsls	r3, r3, #3
 8008d96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008d9a:	4b36      	ldr	r3, [pc, #216]	; (8008e74 <UART_SetConfig+0x2d4>)
 8008d9c:	fba3 2302 	umull	r2, r3, r3, r2
 8008da0:	095b      	lsrs	r3, r3, #5
 8008da2:	005b      	lsls	r3, r3, #1
 8008da4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008da8:	441c      	add	r4, r3
 8008daa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dae:	2200      	movs	r2, #0
 8008db0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008db4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008db8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008dbc:	4642      	mov	r2, r8
 8008dbe:	464b      	mov	r3, r9
 8008dc0:	1891      	adds	r1, r2, r2
 8008dc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8008dc4:	415b      	adcs	r3, r3
 8008dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008dcc:	4641      	mov	r1, r8
 8008dce:	1851      	adds	r1, r2, r1
 8008dd0:	6339      	str	r1, [r7, #48]	; 0x30
 8008dd2:	4649      	mov	r1, r9
 8008dd4:	414b      	adcs	r3, r1
 8008dd6:	637b      	str	r3, [r7, #52]	; 0x34
 8008dd8:	f04f 0200 	mov.w	r2, #0
 8008ddc:	f04f 0300 	mov.w	r3, #0
 8008de0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008de4:	4659      	mov	r1, fp
 8008de6:	00cb      	lsls	r3, r1, #3
 8008de8:	4651      	mov	r1, sl
 8008dea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008dee:	4651      	mov	r1, sl
 8008df0:	00ca      	lsls	r2, r1, #3
 8008df2:	4610      	mov	r0, r2
 8008df4:	4619      	mov	r1, r3
 8008df6:	4603      	mov	r3, r0
 8008df8:	4642      	mov	r2, r8
 8008dfa:	189b      	adds	r3, r3, r2
 8008dfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e00:	464b      	mov	r3, r9
 8008e02:	460a      	mov	r2, r1
 8008e04:	eb42 0303 	adc.w	r3, r2, r3
 8008e08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008e18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008e1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008e20:	460b      	mov	r3, r1
 8008e22:	18db      	adds	r3, r3, r3
 8008e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e26:	4613      	mov	r3, r2
 8008e28:	eb42 0303 	adc.w	r3, r2, r3
 8008e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008e36:	f7f7 fa33 	bl	80002a0 <__aeabi_uldivmod>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	4b0d      	ldr	r3, [pc, #52]	; (8008e74 <UART_SetConfig+0x2d4>)
 8008e40:	fba3 1302 	umull	r1, r3, r3, r2
 8008e44:	095b      	lsrs	r3, r3, #5
 8008e46:	2164      	movs	r1, #100	; 0x64
 8008e48:	fb01 f303 	mul.w	r3, r1, r3
 8008e4c:	1ad3      	subs	r3, r2, r3
 8008e4e:	00db      	lsls	r3, r3, #3
 8008e50:	3332      	adds	r3, #50	; 0x32
 8008e52:	4a08      	ldr	r2, [pc, #32]	; (8008e74 <UART_SetConfig+0x2d4>)
 8008e54:	fba2 2303 	umull	r2, r3, r2, r3
 8008e58:	095b      	lsrs	r3, r3, #5
 8008e5a:	f003 0207 	and.w	r2, r3, #7
 8008e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4422      	add	r2, r4
 8008e66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008e68:	e105      	b.n	8009076 <UART_SetConfig+0x4d6>
 8008e6a:	bf00      	nop
 8008e6c:	40011000 	.word	0x40011000
 8008e70:	40011400 	.word	0x40011400
 8008e74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008e82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008e86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008e8a:	4642      	mov	r2, r8
 8008e8c:	464b      	mov	r3, r9
 8008e8e:	1891      	adds	r1, r2, r2
 8008e90:	6239      	str	r1, [r7, #32]
 8008e92:	415b      	adcs	r3, r3
 8008e94:	627b      	str	r3, [r7, #36]	; 0x24
 8008e96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e9a:	4641      	mov	r1, r8
 8008e9c:	1854      	adds	r4, r2, r1
 8008e9e:	4649      	mov	r1, r9
 8008ea0:	eb43 0501 	adc.w	r5, r3, r1
 8008ea4:	f04f 0200 	mov.w	r2, #0
 8008ea8:	f04f 0300 	mov.w	r3, #0
 8008eac:	00eb      	lsls	r3, r5, #3
 8008eae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008eb2:	00e2      	lsls	r2, r4, #3
 8008eb4:	4614      	mov	r4, r2
 8008eb6:	461d      	mov	r5, r3
 8008eb8:	4643      	mov	r3, r8
 8008eba:	18e3      	adds	r3, r4, r3
 8008ebc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008ec0:	464b      	mov	r3, r9
 8008ec2:	eb45 0303 	adc.w	r3, r5, r3
 8008ec6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ed6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008eda:	f04f 0200 	mov.w	r2, #0
 8008ede:	f04f 0300 	mov.w	r3, #0
 8008ee2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008ee6:	4629      	mov	r1, r5
 8008ee8:	008b      	lsls	r3, r1, #2
 8008eea:	4621      	mov	r1, r4
 8008eec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ef0:	4621      	mov	r1, r4
 8008ef2:	008a      	lsls	r2, r1, #2
 8008ef4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008ef8:	f7f7 f9d2 	bl	80002a0 <__aeabi_uldivmod>
 8008efc:	4602      	mov	r2, r0
 8008efe:	460b      	mov	r3, r1
 8008f00:	4b60      	ldr	r3, [pc, #384]	; (8009084 <UART_SetConfig+0x4e4>)
 8008f02:	fba3 2302 	umull	r2, r3, r3, r2
 8008f06:	095b      	lsrs	r3, r3, #5
 8008f08:	011c      	lsls	r4, r3, #4
 8008f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008f14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008f18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008f1c:	4642      	mov	r2, r8
 8008f1e:	464b      	mov	r3, r9
 8008f20:	1891      	adds	r1, r2, r2
 8008f22:	61b9      	str	r1, [r7, #24]
 8008f24:	415b      	adcs	r3, r3
 8008f26:	61fb      	str	r3, [r7, #28]
 8008f28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f2c:	4641      	mov	r1, r8
 8008f2e:	1851      	adds	r1, r2, r1
 8008f30:	6139      	str	r1, [r7, #16]
 8008f32:	4649      	mov	r1, r9
 8008f34:	414b      	adcs	r3, r1
 8008f36:	617b      	str	r3, [r7, #20]
 8008f38:	f04f 0200 	mov.w	r2, #0
 8008f3c:	f04f 0300 	mov.w	r3, #0
 8008f40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f44:	4659      	mov	r1, fp
 8008f46:	00cb      	lsls	r3, r1, #3
 8008f48:	4651      	mov	r1, sl
 8008f4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f4e:	4651      	mov	r1, sl
 8008f50:	00ca      	lsls	r2, r1, #3
 8008f52:	4610      	mov	r0, r2
 8008f54:	4619      	mov	r1, r3
 8008f56:	4603      	mov	r3, r0
 8008f58:	4642      	mov	r2, r8
 8008f5a:	189b      	adds	r3, r3, r2
 8008f5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f60:	464b      	mov	r3, r9
 8008f62:	460a      	mov	r2, r1
 8008f64:	eb42 0303 	adc.w	r3, r2, r3
 8008f68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008f78:	f04f 0200 	mov.w	r2, #0
 8008f7c:	f04f 0300 	mov.w	r3, #0
 8008f80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008f84:	4649      	mov	r1, r9
 8008f86:	008b      	lsls	r3, r1, #2
 8008f88:	4641      	mov	r1, r8
 8008f8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f8e:	4641      	mov	r1, r8
 8008f90:	008a      	lsls	r2, r1, #2
 8008f92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008f96:	f7f7 f983 	bl	80002a0 <__aeabi_uldivmod>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	4b39      	ldr	r3, [pc, #228]	; (8009084 <UART_SetConfig+0x4e4>)
 8008fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8008fa4:	095b      	lsrs	r3, r3, #5
 8008fa6:	2164      	movs	r1, #100	; 0x64
 8008fa8:	fb01 f303 	mul.w	r3, r1, r3
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	011b      	lsls	r3, r3, #4
 8008fb0:	3332      	adds	r3, #50	; 0x32
 8008fb2:	4a34      	ldr	r2, [pc, #208]	; (8009084 <UART_SetConfig+0x4e4>)
 8008fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8008fb8:	095b      	lsrs	r3, r3, #5
 8008fba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fbe:	441c      	add	r4, r3
 8008fc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	673b      	str	r3, [r7, #112]	; 0x70
 8008fc8:	677a      	str	r2, [r7, #116]	; 0x74
 8008fca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008fce:	4642      	mov	r2, r8
 8008fd0:	464b      	mov	r3, r9
 8008fd2:	1891      	adds	r1, r2, r2
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	415b      	adcs	r3, r3
 8008fd8:	60fb      	str	r3, [r7, #12]
 8008fda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008fde:	4641      	mov	r1, r8
 8008fe0:	1851      	adds	r1, r2, r1
 8008fe2:	6039      	str	r1, [r7, #0]
 8008fe4:	4649      	mov	r1, r9
 8008fe6:	414b      	adcs	r3, r1
 8008fe8:	607b      	str	r3, [r7, #4]
 8008fea:	f04f 0200 	mov.w	r2, #0
 8008fee:	f04f 0300 	mov.w	r3, #0
 8008ff2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008ff6:	4659      	mov	r1, fp
 8008ff8:	00cb      	lsls	r3, r1, #3
 8008ffa:	4651      	mov	r1, sl
 8008ffc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009000:	4651      	mov	r1, sl
 8009002:	00ca      	lsls	r2, r1, #3
 8009004:	4610      	mov	r0, r2
 8009006:	4619      	mov	r1, r3
 8009008:	4603      	mov	r3, r0
 800900a:	4642      	mov	r2, r8
 800900c:	189b      	adds	r3, r3, r2
 800900e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009010:	464b      	mov	r3, r9
 8009012:	460a      	mov	r2, r1
 8009014:	eb42 0303 	adc.w	r3, r2, r3
 8009018:	66fb      	str	r3, [r7, #108]	; 0x6c
 800901a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	663b      	str	r3, [r7, #96]	; 0x60
 8009024:	667a      	str	r2, [r7, #100]	; 0x64
 8009026:	f04f 0200 	mov.w	r2, #0
 800902a:	f04f 0300 	mov.w	r3, #0
 800902e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009032:	4649      	mov	r1, r9
 8009034:	008b      	lsls	r3, r1, #2
 8009036:	4641      	mov	r1, r8
 8009038:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800903c:	4641      	mov	r1, r8
 800903e:	008a      	lsls	r2, r1, #2
 8009040:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009044:	f7f7 f92c 	bl	80002a0 <__aeabi_uldivmod>
 8009048:	4602      	mov	r2, r0
 800904a:	460b      	mov	r3, r1
 800904c:	4b0d      	ldr	r3, [pc, #52]	; (8009084 <UART_SetConfig+0x4e4>)
 800904e:	fba3 1302 	umull	r1, r3, r3, r2
 8009052:	095b      	lsrs	r3, r3, #5
 8009054:	2164      	movs	r1, #100	; 0x64
 8009056:	fb01 f303 	mul.w	r3, r1, r3
 800905a:	1ad3      	subs	r3, r2, r3
 800905c:	011b      	lsls	r3, r3, #4
 800905e:	3332      	adds	r3, #50	; 0x32
 8009060:	4a08      	ldr	r2, [pc, #32]	; (8009084 <UART_SetConfig+0x4e4>)
 8009062:	fba2 2303 	umull	r2, r3, r2, r3
 8009066:	095b      	lsrs	r3, r3, #5
 8009068:	f003 020f 	and.w	r2, r3, #15
 800906c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4422      	add	r2, r4
 8009074:	609a      	str	r2, [r3, #8]
}
 8009076:	bf00      	nop
 8009078:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800907c:	46bd      	mov	sp, r7
 800907e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009082:	bf00      	nop
 8009084:	51eb851f 	.word	0x51eb851f

08009088 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009088:	b084      	sub	sp, #16
 800908a:	b580      	push	{r7, lr}
 800908c:	b084      	sub	sp, #16
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	f107 001c 	add.w	r0, r7, #28
 8009096:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800909a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909c:	2b01      	cmp	r3, #1
 800909e:	d122      	bne.n	80090e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80090b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80090c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d105      	bne.n	80090da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 f9c0 	bl	8009460 <USB_CoreReset>
 80090e0:	4603      	mov	r3, r0
 80090e2:	73fb      	strb	r3, [r7, #15]
 80090e4:	e01a      	b.n	800911c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f9b4 	bl	8009460 <USB_CoreReset>
 80090f8:	4603      	mov	r3, r0
 80090fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80090fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d106      	bne.n	8009110 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009106:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	639a      	str	r2, [r3, #56]	; 0x38
 800910e:	e005      	b.n	800911c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009114:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800911c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911e:	2b01      	cmp	r3, #1
 8009120:	d10b      	bne.n	800913a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	f043 0206 	orr.w	r2, r3, #6
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	f043 0220 	orr.w	r2, r3, #32
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800913a:	7bfb      	ldrb	r3, [r7, #15]
}
 800913c:	4618      	mov	r0, r3
 800913e:	3710      	adds	r7, #16
 8009140:	46bd      	mov	sp, r7
 8009142:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009146:	b004      	add	sp, #16
 8009148:	4770      	bx	lr

0800914a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800914a:	b480      	push	{r7}
 800914c:	b083      	sub	sp, #12
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	f043 0201 	orr.w	r2, r3, #1
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	f023 0201 	bic.w	r2, r3, #1
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	370c      	adds	r7, #12
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr

0800918e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800918e:	b580      	push	{r7, lr}
 8009190:	b084      	sub	sp, #16
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
 8009196:	460b      	mov	r3, r1
 8009198:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800919a:	2300      	movs	r3, #0
 800919c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80091aa:	78fb      	ldrb	r3, [r7, #3]
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d115      	bne.n	80091dc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80091bc:	2001      	movs	r0, #1
 80091be:	f7fa f897 	bl	80032f0 <HAL_Delay>
      ms++;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	3301      	adds	r3, #1
 80091c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 f93a 	bl	8009442 <USB_GetMode>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d01e      	beq.n	8009212 <USB_SetCurrentMode+0x84>
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2b31      	cmp	r3, #49	; 0x31
 80091d8:	d9f0      	bls.n	80091bc <USB_SetCurrentMode+0x2e>
 80091da:	e01a      	b.n	8009212 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80091dc:	78fb      	ldrb	r3, [r7, #3]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d115      	bne.n	800920e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80091ee:	2001      	movs	r0, #1
 80091f0:	f7fa f87e 	bl	80032f0 <HAL_Delay>
      ms++;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	3301      	adds	r3, #1
 80091f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f921 	bl	8009442 <USB_GetMode>
 8009200:	4603      	mov	r3, r0
 8009202:	2b00      	cmp	r3, #0
 8009204:	d005      	beq.n	8009212 <USB_SetCurrentMode+0x84>
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2b31      	cmp	r3, #49	; 0x31
 800920a:	d9f0      	bls.n	80091ee <USB_SetCurrentMode+0x60>
 800920c:	e001      	b.n	8009212 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	e005      	b.n	800921e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2b32      	cmp	r3, #50	; 0x32
 8009216:	d101      	bne.n	800921c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009218:	2301      	movs	r3, #1
 800921a:	e000      	b.n	800921e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
	...

08009228 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009228:	b480      	push	{r7}
 800922a:	b085      	sub	sp, #20
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009232:	2300      	movs	r3, #0
 8009234:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	3301      	adds	r3, #1
 800923a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	4a13      	ldr	r2, [pc, #76]	; (800928c <USB_FlushTxFifo+0x64>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d901      	bls.n	8009248 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009244:	2303      	movs	r3, #3
 8009246:	e01b      	b.n	8009280 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	691b      	ldr	r3, [r3, #16]
 800924c:	2b00      	cmp	r3, #0
 800924e:	daf2      	bge.n	8009236 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009250:	2300      	movs	r3, #0
 8009252:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	019b      	lsls	r3, r3, #6
 8009258:	f043 0220 	orr.w	r2, r3, #32
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	3301      	adds	r3, #1
 8009264:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	4a08      	ldr	r2, [pc, #32]	; (800928c <USB_FlushTxFifo+0x64>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d901      	bls.n	8009272 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800926e:	2303      	movs	r3, #3
 8009270:	e006      	b.n	8009280 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	f003 0320 	and.w	r3, r3, #32
 800927a:	2b20      	cmp	r3, #32
 800927c:	d0f0      	beq.n	8009260 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3714      	adds	r7, #20
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr
 800928c:	00030d40 	.word	0x00030d40

08009290 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009290:	b480      	push	{r7}
 8009292:	b085      	sub	sp, #20
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009298:	2300      	movs	r3, #0
 800929a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	3301      	adds	r3, #1
 80092a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	4a11      	ldr	r2, [pc, #68]	; (80092ec <USB_FlushRxFifo+0x5c>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d901      	bls.n	80092ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80092aa:	2303      	movs	r3, #3
 80092ac:	e018      	b.n	80092e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	daf2      	bge.n	800929c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80092b6:	2300      	movs	r3, #0
 80092b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2210      	movs	r2, #16
 80092be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	3301      	adds	r3, #1
 80092c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	4a08      	ldr	r2, [pc, #32]	; (80092ec <USB_FlushRxFifo+0x5c>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d901      	bls.n	80092d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80092ce:	2303      	movs	r3, #3
 80092d0:	e006      	b.n	80092e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	f003 0310 	and.w	r3, r3, #16
 80092da:	2b10      	cmp	r3, #16
 80092dc:	d0f0      	beq.n	80092c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3714      	adds	r7, #20
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr
 80092ec:	00030d40 	.word	0x00030d40

080092f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b089      	sub	sp, #36	; 0x24
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	4611      	mov	r1, r2
 80092fc:	461a      	mov	r2, r3
 80092fe:	460b      	mov	r3, r1
 8009300:	71fb      	strb	r3, [r7, #7]
 8009302:	4613      	mov	r3, r2
 8009304:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800930e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009312:	2b00      	cmp	r3, #0
 8009314:	d123      	bne.n	800935e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009316:	88bb      	ldrh	r3, [r7, #4]
 8009318:	3303      	adds	r3, #3
 800931a:	089b      	lsrs	r3, r3, #2
 800931c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800931e:	2300      	movs	r3, #0
 8009320:	61bb      	str	r3, [r7, #24]
 8009322:	e018      	b.n	8009356 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009324:	79fb      	ldrb	r3, [r7, #7]
 8009326:	031a      	lsls	r2, r3, #12
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	4413      	add	r3, r2
 800932c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009330:	461a      	mov	r2, r3
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009338:	69fb      	ldr	r3, [r7, #28]
 800933a:	3301      	adds	r3, #1
 800933c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	3301      	adds	r3, #1
 8009342:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	3301      	adds	r3, #1
 8009348:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800934a:	69fb      	ldr	r3, [r7, #28]
 800934c:	3301      	adds	r3, #1
 800934e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	3301      	adds	r3, #1
 8009354:	61bb      	str	r3, [r7, #24]
 8009356:	69ba      	ldr	r2, [r7, #24]
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	429a      	cmp	r2, r3
 800935c:	d3e2      	bcc.n	8009324 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800935e:	2300      	movs	r3, #0
}
 8009360:	4618      	mov	r0, r3
 8009362:	3724      	adds	r7, #36	; 0x24
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800936c:	b480      	push	{r7}
 800936e:	b08b      	sub	sp, #44	; 0x2c
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	60b9      	str	r1, [r7, #8]
 8009376:	4613      	mov	r3, r2
 8009378:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009382:	88fb      	ldrh	r3, [r7, #6]
 8009384:	089b      	lsrs	r3, r3, #2
 8009386:	b29b      	uxth	r3, r3
 8009388:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800938a:	88fb      	ldrh	r3, [r7, #6]
 800938c:	f003 0303 	and.w	r3, r3, #3
 8009390:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009392:	2300      	movs	r3, #0
 8009394:	623b      	str	r3, [r7, #32]
 8009396:	e014      	b.n	80093c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009398:	69bb      	ldr	r3, [r7, #24]
 800939a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80093a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a6:	3301      	adds	r3, #1
 80093a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80093aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ac:	3301      	adds	r3, #1
 80093ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80093b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b2:	3301      	adds	r3, #1
 80093b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80093b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b8:	3301      	adds	r3, #1
 80093ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80093bc:	6a3b      	ldr	r3, [r7, #32]
 80093be:	3301      	adds	r3, #1
 80093c0:	623b      	str	r3, [r7, #32]
 80093c2:	6a3a      	ldr	r2, [r7, #32]
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d3e6      	bcc.n	8009398 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80093ca:	8bfb      	ldrh	r3, [r7, #30]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d01e      	beq.n	800940e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80093d0:	2300      	movs	r3, #0
 80093d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093da:	461a      	mov	r2, r3
 80093dc:	f107 0310 	add.w	r3, r7, #16
 80093e0:	6812      	ldr	r2, [r2, #0]
 80093e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80093e4:	693a      	ldr	r2, [r7, #16]
 80093e6:	6a3b      	ldr	r3, [r7, #32]
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	00db      	lsls	r3, r3, #3
 80093ec:	fa22 f303 	lsr.w	r3, r2, r3
 80093f0:	b2da      	uxtb	r2, r3
 80093f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f4:	701a      	strb	r2, [r3, #0]
      i++;
 80093f6:	6a3b      	ldr	r3, [r7, #32]
 80093f8:	3301      	adds	r3, #1
 80093fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80093fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fe:	3301      	adds	r3, #1
 8009400:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009402:	8bfb      	ldrh	r3, [r7, #30]
 8009404:	3b01      	subs	r3, #1
 8009406:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009408:	8bfb      	ldrh	r3, [r7, #30]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d1ea      	bne.n	80093e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800940e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009410:	4618      	mov	r0, r3
 8009412:	372c      	adds	r7, #44	; 0x2c
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800941c:	b480      	push	{r7}
 800941e:	b085      	sub	sp, #20
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	695b      	ldr	r3, [r3, #20]
 8009428:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	699b      	ldr	r3, [r3, #24]
 800942e:	68fa      	ldr	r2, [r7, #12]
 8009430:	4013      	ands	r3, r2
 8009432:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009434:	68fb      	ldr	r3, [r7, #12]
}
 8009436:	4618      	mov	r0, r3
 8009438:	3714      	adds	r7, #20
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr

08009442 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009442:	b480      	push	{r7}
 8009444:	b083      	sub	sp, #12
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	695b      	ldr	r3, [r3, #20]
 800944e:	f003 0301 	and.w	r3, r3, #1
}
 8009452:	4618      	mov	r0, r3
 8009454:	370c      	adds	r7, #12
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr
	...

08009460 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009460:	b480      	push	{r7}
 8009462:	b085      	sub	sp, #20
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009468:	2300      	movs	r3, #0
 800946a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	3301      	adds	r3, #1
 8009470:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	4a13      	ldr	r2, [pc, #76]	; (80094c4 <USB_CoreReset+0x64>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d901      	bls.n	800947e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800947a:	2303      	movs	r3, #3
 800947c:	e01b      	b.n	80094b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	2b00      	cmp	r3, #0
 8009484:	daf2      	bge.n	800946c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009486:	2300      	movs	r3, #0
 8009488:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	691b      	ldr	r3, [r3, #16]
 800948e:	f043 0201 	orr.w	r2, r3, #1
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	3301      	adds	r3, #1
 800949a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	4a09      	ldr	r2, [pc, #36]	; (80094c4 <USB_CoreReset+0x64>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d901      	bls.n	80094a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80094a4:	2303      	movs	r3, #3
 80094a6:	e006      	b.n	80094b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	691b      	ldr	r3, [r3, #16]
 80094ac:	f003 0301 	and.w	r3, r3, #1
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d0f0      	beq.n	8009496 <USB_CoreReset+0x36>

  return HAL_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3714      	adds	r7, #20
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	00030d40 	.word	0x00030d40

080094c8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80094c8:	b084      	sub	sp, #16
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b086      	sub	sp, #24
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
 80094d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80094d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80094da:	2300      	movs	r3, #0
 80094dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80094e8:	461a      	mov	r2, r3
 80094ea:	2300      	movs	r3, #0
 80094ec:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094fe:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800951a:	2b00      	cmp	r3, #0
 800951c:	d018      	beq.n	8009550 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800951e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009520:	2b01      	cmp	r3, #1
 8009522:	d10a      	bne.n	800953a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	68fa      	ldr	r2, [r7, #12]
 800952e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009532:	f043 0304 	orr.w	r3, r3, #4
 8009536:	6013      	str	r3, [r2, #0]
 8009538:	e014      	b.n	8009564 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68fa      	ldr	r2, [r7, #12]
 8009544:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009548:	f023 0304 	bic.w	r3, r3, #4
 800954c:	6013      	str	r3, [r2, #0]
 800954e:	e009      	b.n	8009564 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	68fa      	ldr	r2, [r7, #12]
 800955a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800955e:	f023 0304 	bic.w	r3, r3, #4
 8009562:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009564:	2110      	movs	r1, #16
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f7ff fe5e 	bl	8009228 <USB_FlushTxFifo>
 800956c:	4603      	mov	r3, r0
 800956e:	2b00      	cmp	r3, #0
 8009570:	d001      	beq.n	8009576 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8009572:	2301      	movs	r3, #1
 8009574:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f7ff fe8a 	bl	8009290 <USB_FlushRxFifo>
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d001      	beq.n	8009586 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009586:	2300      	movs	r3, #0
 8009588:	613b      	str	r3, [r7, #16]
 800958a:	e015      	b.n	80095b8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	015a      	lsls	r2, r3, #5
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	4413      	add	r3, r2
 8009594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009598:	461a      	mov	r2, r3
 800959a:	f04f 33ff 	mov.w	r3, #4294967295
 800959e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	015a      	lsls	r2, r3, #5
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	4413      	add	r3, r2
 80095a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095ac:	461a      	mov	r2, r3
 80095ae:	2300      	movs	r3, #0
 80095b0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	3301      	adds	r3, #1
 80095b6:	613b      	str	r3, [r7, #16]
 80095b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ba:	693a      	ldr	r2, [r7, #16]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d3e5      	bcc.n	800958c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f04f 32ff 	mov.w	r2, #4294967295
 80095cc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d00b      	beq.n	80095f2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095e0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	4a13      	ldr	r2, [pc, #76]	; (8009634 <USB_HostInit+0x16c>)
 80095e6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4a13      	ldr	r2, [pc, #76]	; (8009638 <USB_HostInit+0x170>)
 80095ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80095f0:	e009      	b.n	8009606 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2280      	movs	r2, #128	; 0x80
 80095f6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4a10      	ldr	r2, [pc, #64]	; (800963c <USB_HostInit+0x174>)
 80095fc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4a0f      	ldr	r2, [pc, #60]	; (8009640 <USB_HostInit+0x178>)
 8009602:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009608:	2b00      	cmp	r3, #0
 800960a:	d105      	bne.n	8009618 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	699b      	ldr	r3, [r3, #24]
 8009610:	f043 0210 	orr.w	r2, r3, #16
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	699a      	ldr	r2, [r3, #24]
 800961c:	4b09      	ldr	r3, [pc, #36]	; (8009644 <USB_HostInit+0x17c>)
 800961e:	4313      	orrs	r3, r2
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009624:	7dfb      	ldrb	r3, [r7, #23]
}
 8009626:	4618      	mov	r0, r3
 8009628:	3718      	adds	r7, #24
 800962a:	46bd      	mov	sp, r7
 800962c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009630:	b004      	add	sp, #16
 8009632:	4770      	bx	lr
 8009634:	01000200 	.word	0x01000200
 8009638:	00e00300 	.word	0x00e00300
 800963c:	00600080 	.word	0x00600080
 8009640:	004000e0 	.word	0x004000e0
 8009644:	a3200008 	.word	0xa3200008

08009648 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009648:	b480      	push	{r7}
 800964a:	b085      	sub	sp, #20
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	460b      	mov	r3, r1
 8009652:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	68fa      	ldr	r2, [r7, #12]
 8009662:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009666:	f023 0303 	bic.w	r3, r3, #3
 800966a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	78fb      	ldrb	r3, [r7, #3]
 8009676:	f003 0303 	and.w	r3, r3, #3
 800967a:	68f9      	ldr	r1, [r7, #12]
 800967c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009680:	4313      	orrs	r3, r2
 8009682:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009684:	78fb      	ldrb	r3, [r7, #3]
 8009686:	2b01      	cmp	r3, #1
 8009688:	d107      	bne.n	800969a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009690:	461a      	mov	r2, r3
 8009692:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009696:	6053      	str	r3, [r2, #4]
 8009698:	e009      	b.n	80096ae <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800969a:	78fb      	ldrb	r3, [r7, #3]
 800969c:	2b02      	cmp	r3, #2
 800969e:	d106      	bne.n	80096ae <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096a6:	461a      	mov	r2, r3
 80096a8:	f241 7370 	movw	r3, #6000	; 0x1770
 80096ac:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3714      	adds	r7, #20
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80096c8:	2300      	movs	r3, #0
 80096ca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80096dc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80096e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096ea:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80096ec:	2064      	movs	r0, #100	; 0x64
 80096ee:	f7f9 fdff 	bl	80032f0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	68fa      	ldr	r2, [r7, #12]
 80096f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80096fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096fe:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009700:	200a      	movs	r0, #10
 8009702:	f7f9 fdf5 	bl	80032f0 <HAL_Delay>

  return HAL_OK;
 8009706:	2300      	movs	r3, #0
}
 8009708:	4618      	mov	r0, r3
 800970a:	3710      	adds	r7, #16
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009710:	b480      	push	{r7}
 8009712:	b085      	sub	sp, #20
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	460b      	mov	r3, r1
 800971a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009720:	2300      	movs	r3, #0
 8009722:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009734:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800973c:	2b00      	cmp	r3, #0
 800973e:	d109      	bne.n	8009754 <USB_DriveVbus+0x44>
 8009740:	78fb      	ldrb	r3, [r7, #3]
 8009742:	2b01      	cmp	r3, #1
 8009744:	d106      	bne.n	8009754 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	68fa      	ldr	r2, [r7, #12]
 800974a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800974e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009752:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800975a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800975e:	d109      	bne.n	8009774 <USB_DriveVbus+0x64>
 8009760:	78fb      	ldrb	r3, [r7, #3]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d106      	bne.n	8009774 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	68fa      	ldr	r2, [r7, #12]
 800976a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800976e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009772:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3714      	adds	r7, #20
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr

08009782 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009782:	b480      	push	{r7}
 8009784:	b085      	sub	sp, #20
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800978e:	2300      	movs	r3, #0
 8009790:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	0c5b      	lsrs	r3, r3, #17
 80097a0:	f003 0303 	and.w	r3, r3, #3
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3714      	adds	r7, #20
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b085      	sub	sp, #20
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	b29b      	uxth	r3, r3
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3714      	adds	r7, #20
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr
	...

080097d4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b088      	sub	sp, #32
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	4608      	mov	r0, r1
 80097de:	4611      	mov	r1, r2
 80097e0:	461a      	mov	r2, r3
 80097e2:	4603      	mov	r3, r0
 80097e4:	70fb      	strb	r3, [r7, #3]
 80097e6:	460b      	mov	r3, r1
 80097e8:	70bb      	strb	r3, [r7, #2]
 80097ea:	4613      	mov	r3, r2
 80097ec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80097ee:	2300      	movs	r3, #0
 80097f0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80097f6:	78fb      	ldrb	r3, [r7, #3]
 80097f8:	015a      	lsls	r2, r3, #5
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	4413      	add	r3, r2
 80097fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009802:	461a      	mov	r2, r3
 8009804:	f04f 33ff 	mov.w	r3, #4294967295
 8009808:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800980a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800980e:	2b03      	cmp	r3, #3
 8009810:	d87e      	bhi.n	8009910 <USB_HC_Init+0x13c>
 8009812:	a201      	add	r2, pc, #4	; (adr r2, 8009818 <USB_HC_Init+0x44>)
 8009814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009818:	08009829 	.word	0x08009829
 800981c:	080098d3 	.word	0x080098d3
 8009820:	08009829 	.word	0x08009829
 8009824:	08009895 	.word	0x08009895
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009828:	78fb      	ldrb	r3, [r7, #3]
 800982a:	015a      	lsls	r2, r3, #5
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	4413      	add	r3, r2
 8009830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009834:	461a      	mov	r2, r3
 8009836:	f240 439d 	movw	r3, #1181	; 0x49d
 800983a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800983c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009840:	2b00      	cmp	r3, #0
 8009842:	da10      	bge.n	8009866 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009844:	78fb      	ldrb	r3, [r7, #3]
 8009846:	015a      	lsls	r2, r3, #5
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	4413      	add	r3, r2
 800984c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009850:	68db      	ldr	r3, [r3, #12]
 8009852:	78fa      	ldrb	r2, [r7, #3]
 8009854:	0151      	lsls	r1, r2, #5
 8009856:	693a      	ldr	r2, [r7, #16]
 8009858:	440a      	add	r2, r1
 800985a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800985e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009862:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009864:	e057      	b.n	8009916 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800986a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800986e:	2b00      	cmp	r3, #0
 8009870:	d051      	beq.n	8009916 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009872:	78fb      	ldrb	r3, [r7, #3]
 8009874:	015a      	lsls	r2, r3, #5
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	4413      	add	r3, r2
 800987a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	78fa      	ldrb	r2, [r7, #3]
 8009882:	0151      	lsls	r1, r2, #5
 8009884:	693a      	ldr	r2, [r7, #16]
 8009886:	440a      	add	r2, r1
 8009888:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800988c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009890:	60d3      	str	r3, [r2, #12]
      break;
 8009892:	e040      	b.n	8009916 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009894:	78fb      	ldrb	r3, [r7, #3]
 8009896:	015a      	lsls	r2, r3, #5
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	4413      	add	r3, r2
 800989c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098a0:	461a      	mov	r2, r3
 80098a2:	f240 639d 	movw	r3, #1693	; 0x69d
 80098a6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80098a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	da34      	bge.n	800991a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80098b0:	78fb      	ldrb	r3, [r7, #3]
 80098b2:	015a      	lsls	r2, r3, #5
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	4413      	add	r3, r2
 80098b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098bc:	68db      	ldr	r3, [r3, #12]
 80098be:	78fa      	ldrb	r2, [r7, #3]
 80098c0:	0151      	lsls	r1, r2, #5
 80098c2:	693a      	ldr	r2, [r7, #16]
 80098c4:	440a      	add	r2, r1
 80098c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098ce:	60d3      	str	r3, [r2, #12]
      }

      break;
 80098d0:	e023      	b.n	800991a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80098d2:	78fb      	ldrb	r3, [r7, #3]
 80098d4:	015a      	lsls	r2, r3, #5
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	4413      	add	r3, r2
 80098da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098de:	461a      	mov	r2, r3
 80098e0:	f240 2325 	movw	r3, #549	; 0x225
 80098e4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80098e6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	da17      	bge.n	800991e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80098ee:	78fb      	ldrb	r3, [r7, #3]
 80098f0:	015a      	lsls	r2, r3, #5
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	4413      	add	r3, r2
 80098f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	78fa      	ldrb	r2, [r7, #3]
 80098fe:	0151      	lsls	r1, r2, #5
 8009900:	693a      	ldr	r2, [r7, #16]
 8009902:	440a      	add	r2, r1
 8009904:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009908:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800990c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800990e:	e006      	b.n	800991e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009910:	2301      	movs	r3, #1
 8009912:	77fb      	strb	r3, [r7, #31]
      break;
 8009914:	e004      	b.n	8009920 <USB_HC_Init+0x14c>
      break;
 8009916:	bf00      	nop
 8009918:	e002      	b.n	8009920 <USB_HC_Init+0x14c>
      break;
 800991a:	bf00      	nop
 800991c:	e000      	b.n	8009920 <USB_HC_Init+0x14c>
      break;
 800991e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009920:	78fb      	ldrb	r3, [r7, #3]
 8009922:	015a      	lsls	r2, r3, #5
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	4413      	add	r3, r2
 8009928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800992c:	68db      	ldr	r3, [r3, #12]
 800992e:	78fa      	ldrb	r2, [r7, #3]
 8009930:	0151      	lsls	r1, r2, #5
 8009932:	693a      	ldr	r2, [r7, #16]
 8009934:	440a      	add	r2, r1
 8009936:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800993a:	f043 0302 	orr.w	r3, r3, #2
 800993e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009946:	699a      	ldr	r2, [r3, #24]
 8009948:	78fb      	ldrb	r3, [r7, #3]
 800994a:	f003 030f 	and.w	r3, r3, #15
 800994e:	2101      	movs	r1, #1
 8009950:	fa01 f303 	lsl.w	r3, r1, r3
 8009954:	6939      	ldr	r1, [r7, #16]
 8009956:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800995a:	4313      	orrs	r3, r2
 800995c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	699b      	ldr	r3, [r3, #24]
 8009962:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800996a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800996e:	2b00      	cmp	r3, #0
 8009970:	da03      	bge.n	800997a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009976:	61bb      	str	r3, [r7, #24]
 8009978:	e001      	b.n	800997e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800997a:	2300      	movs	r3, #0
 800997c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f7ff feff 	bl	8009782 <USB_GetHostSpeed>
 8009984:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009986:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800998a:	2b02      	cmp	r3, #2
 800998c:	d106      	bne.n	800999c <USB_HC_Init+0x1c8>
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2b02      	cmp	r3, #2
 8009992:	d003      	beq.n	800999c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009994:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009998:	617b      	str	r3, [r7, #20]
 800999a:	e001      	b.n	80099a0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800999c:	2300      	movs	r3, #0
 800999e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80099a0:	787b      	ldrb	r3, [r7, #1]
 80099a2:	059b      	lsls	r3, r3, #22
 80099a4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80099a8:	78bb      	ldrb	r3, [r7, #2]
 80099aa:	02db      	lsls	r3, r3, #11
 80099ac:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80099b0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80099b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80099b6:	049b      	lsls	r3, r3, #18
 80099b8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80099bc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80099be:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80099c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80099c4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80099c6:	69bb      	ldr	r3, [r7, #24]
 80099c8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80099ca:	78fb      	ldrb	r3, [r7, #3]
 80099cc:	0159      	lsls	r1, r3, #5
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	440b      	add	r3, r1
 80099d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099d6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80099dc:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80099de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80099e2:	2b03      	cmp	r3, #3
 80099e4:	d003      	beq.n	80099ee <USB_HC_Init+0x21a>
 80099e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d10f      	bne.n	8009a0e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80099ee:	78fb      	ldrb	r3, [r7, #3]
 80099f0:	015a      	lsls	r2, r3, #5
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	4413      	add	r3, r2
 80099f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	78fa      	ldrb	r2, [r7, #3]
 80099fe:	0151      	lsls	r1, r2, #5
 8009a00:	693a      	ldr	r2, [r7, #16]
 8009a02:	440a      	add	r2, r1
 8009a04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a0c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009a0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3720      	adds	r7, #32
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b08c      	sub	sp, #48	; 0x30
 8009a1c:	af02      	add	r7, sp, #8
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	4613      	mov	r3, r2
 8009a24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	785b      	ldrb	r3, [r3, #1]
 8009a2e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009a30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a34:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d02d      	beq.n	8009a9e <USB_HC_StartXfer+0x86>
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	791b      	ldrb	r3, [r3, #4]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d129      	bne.n	8009a9e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8009a4a:	79fb      	ldrb	r3, [r7, #7]
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d117      	bne.n	8009a80 <USB_HC_StartXfer+0x68>
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	79db      	ldrb	r3, [r3, #7]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d003      	beq.n	8009a60 <USB_HC_StartXfer+0x48>
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	79db      	ldrb	r3, [r3, #7]
 8009a5c:	2b02      	cmp	r3, #2
 8009a5e:	d10f      	bne.n	8009a80 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	015a      	lsls	r2, r3, #5
 8009a64:	6a3b      	ldr	r3, [r7, #32]
 8009a66:	4413      	add	r3, r2
 8009a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	69fa      	ldr	r2, [r7, #28]
 8009a70:	0151      	lsls	r1, r2, #5
 8009a72:	6a3a      	ldr	r2, [r7, #32]
 8009a74:	440a      	add	r2, r1
 8009a76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a7e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009a80:	79fb      	ldrb	r3, [r7, #7]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d10b      	bne.n	8009a9e <USB_HC_StartXfer+0x86>
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	795b      	ldrb	r3, [r3, #5]
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d107      	bne.n	8009a9e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	785b      	ldrb	r3, [r3, #1]
 8009a92:	4619      	mov	r1, r3
 8009a94:	68f8      	ldr	r0, [r7, #12]
 8009a96:	f000 fa0f 	bl	8009eb8 <USB_DoPing>
      return HAL_OK;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	e0f8      	b.n	8009c90 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	695b      	ldr	r3, [r3, #20]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d018      	beq.n	8009ad8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	695b      	ldr	r3, [r3, #20]
 8009aaa:	68ba      	ldr	r2, [r7, #8]
 8009aac:	8912      	ldrh	r2, [r2, #8]
 8009aae:	4413      	add	r3, r2
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	68ba      	ldr	r2, [r7, #8]
 8009ab4:	8912      	ldrh	r2, [r2, #8]
 8009ab6:	fbb3 f3f2 	udiv	r3, r3, r2
 8009aba:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009abc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009abe:	8b7b      	ldrh	r3, [r7, #26]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d90b      	bls.n	8009adc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009ac4:	8b7b      	ldrh	r3, [r7, #26]
 8009ac6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009ac8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009aca:	68ba      	ldr	r2, [r7, #8]
 8009acc:	8912      	ldrh	r2, [r2, #8]
 8009ace:	fb03 f202 	mul.w	r2, r3, r2
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	611a      	str	r2, [r3, #16]
 8009ad6:	e001      	b.n	8009adc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	78db      	ldrb	r3, [r3, #3]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d007      	beq.n	8009af4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009ae4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009ae6:	68ba      	ldr	r2, [r7, #8]
 8009ae8:	8912      	ldrh	r2, [r2, #8]
 8009aea:	fb03 f202 	mul.w	r2, r3, r2
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	611a      	str	r2, [r3, #16]
 8009af2:	e003      	b.n	8009afc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	695a      	ldr	r2, [r3, #20]
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	691b      	ldr	r3, [r3, #16]
 8009b00:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009b04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009b06:	04d9      	lsls	r1, r3, #19
 8009b08:	4b63      	ldr	r3, [pc, #396]	; (8009c98 <USB_HC_StartXfer+0x280>)
 8009b0a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009b0c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	7a9b      	ldrb	r3, [r3, #10]
 8009b12:	075b      	lsls	r3, r3, #29
 8009b14:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009b18:	69f9      	ldr	r1, [r7, #28]
 8009b1a:	0148      	lsls	r0, r1, #5
 8009b1c:	6a39      	ldr	r1, [r7, #32]
 8009b1e:	4401      	add	r1, r0
 8009b20:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009b24:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009b26:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009b28:	79fb      	ldrb	r3, [r7, #7]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d009      	beq.n	8009b42 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	68d9      	ldr	r1, [r3, #12]
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	015a      	lsls	r2, r3, #5
 8009b36:	6a3b      	ldr	r3, [r7, #32]
 8009b38:	4413      	add	r3, r2
 8009b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b3e:	460a      	mov	r2, r1
 8009b40:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009b42:	6a3b      	ldr	r3, [r7, #32]
 8009b44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	f003 0301 	and.w	r3, r3, #1
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	bf0c      	ite	eq
 8009b52:	2301      	moveq	r3, #1
 8009b54:	2300      	movne	r3, #0
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009b5a:	69fb      	ldr	r3, [r7, #28]
 8009b5c:	015a      	lsls	r2, r3, #5
 8009b5e:	6a3b      	ldr	r3, [r7, #32]
 8009b60:	4413      	add	r3, r2
 8009b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	69fa      	ldr	r2, [r7, #28]
 8009b6a:	0151      	lsls	r1, r2, #5
 8009b6c:	6a3a      	ldr	r2, [r7, #32]
 8009b6e:	440a      	add	r2, r1
 8009b70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b74:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009b78:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009b7a:	69fb      	ldr	r3, [r7, #28]
 8009b7c:	015a      	lsls	r2, r3, #5
 8009b7e:	6a3b      	ldr	r3, [r7, #32]
 8009b80:	4413      	add	r3, r2
 8009b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	7e7b      	ldrb	r3, [r7, #25]
 8009b8a:	075b      	lsls	r3, r3, #29
 8009b8c:	69f9      	ldr	r1, [r7, #28]
 8009b8e:	0148      	lsls	r0, r1, #5
 8009b90:	6a39      	ldr	r1, [r7, #32]
 8009b92:	4401      	add	r1, r0
 8009b94:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	015a      	lsls	r2, r3, #5
 8009ba0:	6a3b      	ldr	r3, [r7, #32]
 8009ba2:	4413      	add	r3, r2
 8009ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009bb2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	78db      	ldrb	r3, [r3, #3]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d004      	beq.n	8009bc6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bc2:	613b      	str	r3, [r7, #16]
 8009bc4:	e003      	b.n	8009bce <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009bcc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009bd4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	015a      	lsls	r2, r3, #5
 8009bda:	6a3b      	ldr	r3, [r7, #32]
 8009bdc:	4413      	add	r3, r2
 8009bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009be2:	461a      	mov	r2, r3
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009be8:	79fb      	ldrb	r3, [r7, #7]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d001      	beq.n	8009bf2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	e04e      	b.n	8009c90 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	78db      	ldrb	r3, [r3, #3]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d149      	bne.n	8009c8e <USB_HC_StartXfer+0x276>
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	695b      	ldr	r3, [r3, #20]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d045      	beq.n	8009c8e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	79db      	ldrb	r3, [r3, #7]
 8009c06:	2b03      	cmp	r3, #3
 8009c08:	d830      	bhi.n	8009c6c <USB_HC_StartXfer+0x254>
 8009c0a:	a201      	add	r2, pc, #4	; (adr r2, 8009c10 <USB_HC_StartXfer+0x1f8>)
 8009c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c10:	08009c21 	.word	0x08009c21
 8009c14:	08009c45 	.word	0x08009c45
 8009c18:	08009c21 	.word	0x08009c21
 8009c1c:	08009c45 	.word	0x08009c45
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	695b      	ldr	r3, [r3, #20]
 8009c24:	3303      	adds	r3, #3
 8009c26:	089b      	lsrs	r3, r3, #2
 8009c28:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009c2a:	8afa      	ldrh	r2, [r7, #22]
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d91c      	bls.n	8009c70 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	699b      	ldr	r3, [r3, #24]
 8009c3a:	f043 0220 	orr.w	r2, r3, #32
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	619a      	str	r2, [r3, #24]
        }
        break;
 8009c42:	e015      	b.n	8009c70 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	695b      	ldr	r3, [r3, #20]
 8009c48:	3303      	adds	r3, #3
 8009c4a:	089b      	lsrs	r3, r3, #2
 8009c4c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009c4e:	8afa      	ldrh	r2, [r7, #22]
 8009c50:	6a3b      	ldr	r3, [r7, #32]
 8009c52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c56:	691b      	ldr	r3, [r3, #16]
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d90a      	bls.n	8009c74 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	699b      	ldr	r3, [r3, #24]
 8009c62:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	619a      	str	r2, [r3, #24]
        }
        break;
 8009c6a:	e003      	b.n	8009c74 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009c6c:	bf00      	nop
 8009c6e:	e002      	b.n	8009c76 <USB_HC_StartXfer+0x25e>
        break;
 8009c70:	bf00      	nop
 8009c72:	e000      	b.n	8009c76 <USB_HC_StartXfer+0x25e>
        break;
 8009c74:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	68d9      	ldr	r1, [r3, #12]
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	785a      	ldrb	r2, [r3, #1]
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	695b      	ldr	r3, [r3, #20]
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	2000      	movs	r0, #0
 8009c86:	9000      	str	r0, [sp, #0]
 8009c88:	68f8      	ldr	r0, [r7, #12]
 8009c8a:	f7ff fb31 	bl	80092f0 <USB_WritePacket>
  }

  return HAL_OK;
 8009c8e:	2300      	movs	r3, #0
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3728      	adds	r7, #40	; 0x28
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}
 8009c98:	1ff80000 	.word	0x1ff80000

08009c9c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b085      	sub	sp, #20
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cae:	695b      	ldr	r3, [r3, #20]
 8009cb0:	b29b      	uxth	r3, r3
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3714      	adds	r7, #20
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr

08009cbe <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009cbe:	b480      	push	{r7}
 8009cc0:	b089      	sub	sp, #36	; 0x24
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009cce:	78fb      	ldrb	r3, [r7, #3]
 8009cd0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	015a      	lsls	r2, r3, #5
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	4413      	add	r3, r2
 8009cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	0c9b      	lsrs	r3, r3, #18
 8009ce6:	f003 0303 	and.w	r3, r3, #3
 8009cea:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	015a      	lsls	r2, r3, #5
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	0fdb      	lsrs	r3, r3, #31
 8009cfc:	f003 0301 	and.w	r3, r3, #1
 8009d00:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	f003 0320 	and.w	r3, r3, #32
 8009d0a:	2b20      	cmp	r3, #32
 8009d0c:	d104      	bne.n	8009d18 <USB_HC_Halt+0x5a>
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d101      	bne.n	8009d18 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009d14:	2300      	movs	r3, #0
 8009d16:	e0c8      	b.n	8009eaa <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d002      	beq.n	8009d24 <USB_HC_Halt+0x66>
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	2b02      	cmp	r3, #2
 8009d22:	d163      	bne.n	8009dec <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	015a      	lsls	r2, r3, #5
 8009d28:	69fb      	ldr	r3, [r7, #28]
 8009d2a:	4413      	add	r3, r2
 8009d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	69ba      	ldr	r2, [r7, #24]
 8009d34:	0151      	lsls	r1, r2, #5
 8009d36:	69fa      	ldr	r2, [r7, #28]
 8009d38:	440a      	add	r2, r1
 8009d3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d42:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	f003 0320 	and.w	r3, r3, #32
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	f040 80ab 	bne.w	8009ea8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d56:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d133      	bne.n	8009dc6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009d5e:	69bb      	ldr	r3, [r7, #24]
 8009d60:	015a      	lsls	r2, r3, #5
 8009d62:	69fb      	ldr	r3, [r7, #28]
 8009d64:	4413      	add	r3, r2
 8009d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	69ba      	ldr	r2, [r7, #24]
 8009d6e:	0151      	lsls	r1, r2, #5
 8009d70:	69fa      	ldr	r2, [r7, #28]
 8009d72:	440a      	add	r2, r1
 8009d74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d7c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009d7e:	69bb      	ldr	r3, [r7, #24]
 8009d80:	015a      	lsls	r2, r3, #5
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	4413      	add	r3, r2
 8009d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	69ba      	ldr	r2, [r7, #24]
 8009d8e:	0151      	lsls	r1, r2, #5
 8009d90:	69fa      	ldr	r2, [r7, #28]
 8009d92:	440a      	add	r2, r1
 8009d94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009d9c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	3301      	adds	r3, #1
 8009da2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009daa:	d81d      	bhi.n	8009de8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009dac:	69bb      	ldr	r3, [r7, #24]
 8009dae:	015a      	lsls	r2, r3, #5
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	4413      	add	r3, r2
 8009db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009dbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009dc2:	d0ec      	beq.n	8009d9e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009dc4:	e070      	b.n	8009ea8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009dc6:	69bb      	ldr	r3, [r7, #24]
 8009dc8:	015a      	lsls	r2, r3, #5
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	4413      	add	r3, r2
 8009dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	69ba      	ldr	r2, [r7, #24]
 8009dd6:	0151      	lsls	r1, r2, #5
 8009dd8:	69fa      	ldr	r2, [r7, #28]
 8009dda:	440a      	add	r2, r1
 8009ddc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009de0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009de4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009de6:	e05f      	b.n	8009ea8 <USB_HC_Halt+0x1ea>
            break;
 8009de8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009dea:	e05d      	b.n	8009ea8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009dec:	69bb      	ldr	r3, [r7, #24]
 8009dee:	015a      	lsls	r2, r3, #5
 8009df0:	69fb      	ldr	r3, [r7, #28]
 8009df2:	4413      	add	r3, r2
 8009df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	69ba      	ldr	r2, [r7, #24]
 8009dfc:	0151      	lsls	r1, r2, #5
 8009dfe:	69fa      	ldr	r2, [r7, #28]
 8009e00:	440a      	add	r2, r1
 8009e02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e0a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009e0c:	69fb      	ldr	r3, [r7, #28]
 8009e0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e12:	691b      	ldr	r3, [r3, #16]
 8009e14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d133      	bne.n	8009e84 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009e1c:	69bb      	ldr	r3, [r7, #24]
 8009e1e:	015a      	lsls	r2, r3, #5
 8009e20:	69fb      	ldr	r3, [r7, #28]
 8009e22:	4413      	add	r3, r2
 8009e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	69ba      	ldr	r2, [r7, #24]
 8009e2c:	0151      	lsls	r1, r2, #5
 8009e2e:	69fa      	ldr	r2, [r7, #28]
 8009e30:	440a      	add	r2, r1
 8009e32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e3a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009e3c:	69bb      	ldr	r3, [r7, #24]
 8009e3e:	015a      	lsls	r2, r3, #5
 8009e40:	69fb      	ldr	r3, [r7, #28]
 8009e42:	4413      	add	r3, r2
 8009e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	69ba      	ldr	r2, [r7, #24]
 8009e4c:	0151      	lsls	r1, r2, #5
 8009e4e:	69fa      	ldr	r2, [r7, #28]
 8009e50:	440a      	add	r2, r1
 8009e52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e5a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	3301      	adds	r3, #1
 8009e60:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e68:	d81d      	bhi.n	8009ea6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009e6a:	69bb      	ldr	r3, [r7, #24]
 8009e6c:	015a      	lsls	r2, r3, #5
 8009e6e:	69fb      	ldr	r3, [r7, #28]
 8009e70:	4413      	add	r3, r2
 8009e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e80:	d0ec      	beq.n	8009e5c <USB_HC_Halt+0x19e>
 8009e82:	e011      	b.n	8009ea8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	015a      	lsls	r2, r3, #5
 8009e88:	69fb      	ldr	r3, [r7, #28]
 8009e8a:	4413      	add	r3, r2
 8009e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	69ba      	ldr	r2, [r7, #24]
 8009e94:	0151      	lsls	r1, r2, #5
 8009e96:	69fa      	ldr	r2, [r7, #28]
 8009e98:	440a      	add	r2, r1
 8009e9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ea2:	6013      	str	r3, [r2, #0]
 8009ea4:	e000      	b.n	8009ea8 <USB_HC_Halt+0x1ea>
          break;
 8009ea6:	bf00      	nop
    }
  }

  return HAL_OK;
 8009ea8:	2300      	movs	r3, #0
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3724      	adds	r7, #36	; 0x24
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr
	...

08009eb8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b087      	sub	sp, #28
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009ec8:	78fb      	ldrb	r3, [r7, #3]
 8009eca:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	04da      	lsls	r2, r3, #19
 8009ed4:	4b15      	ldr	r3, [pc, #84]	; (8009f2c <USB_DoPing+0x74>)
 8009ed6:	4013      	ands	r3, r2
 8009ed8:	693a      	ldr	r2, [r7, #16]
 8009eda:	0151      	lsls	r1, r2, #5
 8009edc:	697a      	ldr	r2, [r7, #20]
 8009ede:	440a      	add	r2, r1
 8009ee0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ee4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ee8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	015a      	lsls	r2, r3, #5
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009f00:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009f08:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	015a      	lsls	r2, r3, #5
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	4413      	add	r3, r2
 8009f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f16:	461a      	mov	r2, r3
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009f1c:	2300      	movs	r3, #0
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	371c      	adds	r7, #28
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop
 8009f2c:	1ff80000 	.word	0x1ff80000

08009f30 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b088      	sub	sp, #32
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009f40:	2300      	movs	r3, #0
 8009f42:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f7ff f911 	bl	800916c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009f4a:	2110      	movs	r1, #16
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f7ff f96b 	bl	8009228 <USB_FlushTxFifo>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d001      	beq.n	8009f5c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f7ff f997 	bl	8009290 <USB_FlushRxFifo>
 8009f62:	4603      	mov	r3, r0
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d001      	beq.n	8009f6c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	61bb      	str	r3, [r7, #24]
 8009f70:	e01f      	b.n	8009fb2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009f72:	69bb      	ldr	r3, [r7, #24]
 8009f74:	015a      	lsls	r2, r3, #5
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	4413      	add	r3, r2
 8009f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f88:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f90:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009f98:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009f9a:	69bb      	ldr	r3, [r7, #24]
 8009f9c:	015a      	lsls	r2, r3, #5
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009fac:	69bb      	ldr	r3, [r7, #24]
 8009fae:	3301      	adds	r3, #1
 8009fb0:	61bb      	str	r3, [r7, #24]
 8009fb2:	69bb      	ldr	r3, [r7, #24]
 8009fb4:	2b0f      	cmp	r3, #15
 8009fb6:	d9dc      	bls.n	8009f72 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009fb8:	2300      	movs	r3, #0
 8009fba:	61bb      	str	r3, [r7, #24]
 8009fbc:	e034      	b.n	800a028 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	015a      	lsls	r2, r3, #5
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009fd4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009fdc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009fe4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009fe6:	69bb      	ldr	r3, [r7, #24]
 8009fe8:	015a      	lsls	r2, r3, #5
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	4413      	add	r3, r2
 8009fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a004:	d80c      	bhi.n	800a020 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a006:	69bb      	ldr	r3, [r7, #24]
 800a008:	015a      	lsls	r2, r3, #5
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	4413      	add	r3, r2
 800a00e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a018:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a01c:	d0ec      	beq.n	8009ff8 <USB_StopHost+0xc8>
 800a01e:	e000      	b.n	800a022 <USB_StopHost+0xf2>
        break;
 800a020:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	3301      	adds	r3, #1
 800a026:	61bb      	str	r3, [r7, #24]
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	2b0f      	cmp	r3, #15
 800a02c:	d9c7      	bls.n	8009fbe <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a034:	461a      	mov	r2, r3
 800a036:	f04f 33ff 	mov.w	r3, #4294967295
 800a03a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f04f 32ff 	mov.w	r2, #4294967295
 800a042:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f7ff f880 	bl	800914a <USB_EnableGlobalInt>

  return ret;
 800a04a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3720      	adds	r7, #32
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  //retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
	FATFS_LinkDriver(&SD0_Driver, SD0Path);
 800a058:	4908      	ldr	r1, [pc, #32]	; (800a07c <MX_FATFS_Init+0x28>)
 800a05a:	4809      	ldr	r0, [pc, #36]	; (800a080 <MX_FATFS_Init+0x2c>)
 800a05c:	f007 fc20 	bl	80118a0 <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD1_Driver, SD1Path);
 800a060:	4908      	ldr	r1, [pc, #32]	; (800a084 <MX_FATFS_Init+0x30>)
 800a062:	4809      	ldr	r0, [pc, #36]	; (800a088 <MX_FATFS_Init+0x34>)
 800a064:	f007 fc1c 	bl	80118a0 <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD2_Driver, SD2Path);
 800a068:	4908      	ldr	r1, [pc, #32]	; (800a08c <MX_FATFS_Init+0x38>)
 800a06a:	4809      	ldr	r0, [pc, #36]	; (800a090 <MX_FATFS_Init+0x3c>)
 800a06c:	f007 fc18 	bl	80118a0 <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD3_Driver, SD3Path);
 800a070:	4908      	ldr	r1, [pc, #32]	; (800a094 <MX_FATFS_Init+0x40>)
 800a072:	4809      	ldr	r0, [pc, #36]	; (800a098 <MX_FATFS_Init+0x44>)
 800a074:	f007 fc14 	bl	80118a0 <FATFS_LinkDriver>


  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a078:	bf00      	nop
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	20001e44 	.word	0x20001e44
 800a080:	20000240 	.word	0x20000240
 800a084:	20001e48 	.word	0x20001e48
 800a088:	20000254 	.word	0x20000254
 800a08c:	20001e4c 	.word	0x20001e4c
 800a090:	20000268 	.word	0x20000268
 800a094:	20001e50 	.word	0x20001e50
 800a098:	2000027c 	.word	0x2000027c

0800a09c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a09c:	b480      	push	{r7}
 800a09e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a0a0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <SD0_initialize>:
  * @brief  Initializes a Drive
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS SD0_initialize (BYTE pdrv)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(0);
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	f7f8 fa64 	bl	8002584 <sd_ss_set_active>
	return USER_initialize(pdrv);
 800a0bc:	79fb      	ldrb	r3, [r7, #7]
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f000 f838 	bl	800a134 <USER_initialize>
 800a0c4:	4603      	mov	r3, r0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3708      	adds	r7, #8
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <SD1_initialize>:
DSTATUS SD1_initialize (BYTE pdrv)
{
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b082      	sub	sp, #8
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(1);
 800a0d8:	2001      	movs	r0, #1
 800a0da:	f7f8 fa53 	bl	8002584 <sd_ss_set_active>
	return USER_initialize(pdrv);
 800a0de:	79fb      	ldrb	r3, [r7, #7]
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f000 f827 	bl	800a134 <USER_initialize>
 800a0e6:	4603      	mov	r3, r0
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3708      	adds	r7, #8
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <SD2_initialize>:
DSTATUS SD2_initialize (BYTE pdrv)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(2);
 800a0fa:	2002      	movs	r0, #2
 800a0fc:	f7f8 fa42 	bl	8002584 <sd_ss_set_active>
	return USER_initialize(pdrv);
 800a100:	79fb      	ldrb	r3, [r7, #7]
 800a102:	4618      	mov	r0, r3
 800a104:	f000 f816 	bl	800a134 <USER_initialize>
 800a108:	4603      	mov	r3, r0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3708      	adds	r7, #8
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}

0800a112 <SD3_initialize>:
DSTATUS SD3_initialize (BYTE pdrv)
{
 800a112:	b580      	push	{r7, lr}
 800a114:	b082      	sub	sp, #8
 800a116:	af00      	add	r7, sp, #0
 800a118:	4603      	mov	r3, r0
 800a11a:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(3);
 800a11c:	2003      	movs	r0, #3
 800a11e:	f7f8 fa31 	bl	8002584 <sd_ss_set_active>
	return USER_initialize(pdrv);
 800a122:	79fb      	ldrb	r3, [r7, #7]
 800a124:	4618      	mov	r0, r3
 800a126:	f000 f805 	bl	800a134 <USER_initialize>
 800a12a:	4603      	mov	r3, r0
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3708      	adds	r7, #8
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <USER_initialize>:

DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
 800a13a:	4603      	mov	r3, r0
 800a13c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	//SD_PowerOn();
	SS_SD_SELECT();
 800a13e:	f7f8 fa3f 	bl	80025c0 <sd_ss_active_pin_down>
	if(sd_ini()==0) {Stat &= ~STA_NOINIT;} // STA_NOINIT
 800a142:	f7f8 fabf 	bl	80026c4 <sd_ini>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d107      	bne.n	800a15c <USER_initialize+0x28>
 800a14c:	4b08      	ldr	r3, [pc, #32]	; (800a170 <USER_initialize+0x3c>)
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	b2db      	uxtb	r3, r3
 800a152:	f023 0301 	bic.w	r3, r3, #1
 800a156:	b2da      	uxtb	r2, r3
 800a158:	4b05      	ldr	r3, [pc, #20]	; (800a170 <USER_initialize+0x3c>)
 800a15a:	701a      	strb	r2, [r3, #0]
	SS_SD_DESELECT();
 800a15c:	f7f8 fa40 	bl	80025e0 <sd_ss_active_pin_up>
    return Stat;
 800a160:	4b03      	ldr	r3, [pc, #12]	; (800a170 <USER_initialize+0x3c>)
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800a166:	4618      	mov	r0, r3
 800a168:	3708      	adds	r7, #8
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	2000023d 	.word	0x2000023d

0800a174 <SD0_status>:
  * @brief  Gets Disk Status
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS SD0_status (BYTE pdrv)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b082      	sub	sp, #8
 800a178:	af00      	add	r7, sp, #0
 800a17a:	4603      	mov	r3, r0
 800a17c:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(0);
 800a17e:	2000      	movs	r0, #0
 800a180:	f7f8 fa00 	bl	8002584 <sd_ss_set_active>
	return USER_status(pdrv);
 800a184:	79fb      	ldrb	r3, [r7, #7]
 800a186:	4618      	mov	r0, r3
 800a188:	f000 f838 	bl	800a1fc <USER_status>
 800a18c:	4603      	mov	r3, r0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3708      	adds	r7, #8
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <SD1_status>:
DSTATUS SD1_status (BYTE pdrv)
{
 800a196:	b580      	push	{r7, lr}
 800a198:	b082      	sub	sp, #8
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	4603      	mov	r3, r0
 800a19e:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(1);
 800a1a0:	2001      	movs	r0, #1
 800a1a2:	f7f8 f9ef 	bl	8002584 <sd_ss_set_active>
	return USER_status(pdrv);
 800a1a6:	79fb      	ldrb	r3, [r7, #7]
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f000 f827 	bl	800a1fc <USER_status>
 800a1ae:	4603      	mov	r3, r0
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3708      	adds	r7, #8
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <SD2_status>:
DSTATUS SD2_status (BYTE pdrv)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	4603      	mov	r3, r0
 800a1c0:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(2);
 800a1c2:	2002      	movs	r0, #2
 800a1c4:	f7f8 f9de 	bl	8002584 <sd_ss_set_active>
	return USER_status(pdrv);
 800a1c8:	79fb      	ldrb	r3, [r7, #7]
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f000 f816 	bl	800a1fc <USER_status>
 800a1d0:	4603      	mov	r3, r0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <SD3_status>:
DSTATUS SD3_status (BYTE pdrv)
{
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b082      	sub	sp, #8
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(3);
 800a1e4:	2003      	movs	r0, #3
 800a1e6:	f7f8 f9cd 	bl	8002584 <sd_ss_set_active>
	return USER_status(pdrv);
 800a1ea:	79fb      	ldrb	r3, [r7, #7]
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f000 f805 	bl	800a1fc <USER_status>
 800a1f2:	4603      	mov	r3, r0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3708      	adds	r7, #8
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <USER_status>:

DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
 800a202:	4603      	mov	r3, r0
 800a204:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	SS_SD_SELECT();
 800a206:	f7f8 f9db 	bl	80025c0 <sd_ss_active_pin_down>
	if (pdrv) return STA_NOINIT;
 800a20a:	79fb      	ldrb	r3, [r7, #7]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d001      	beq.n	800a214 <USER_status+0x18>
 800a210:	2301      	movs	r3, #1
 800a212:	e004      	b.n	800a21e <USER_status+0x22>
	SS_SD_DESELECT();
 800a214:	f7f8 f9e4 	bl	80025e0 <sd_ss_active_pin_up>
    return Stat;
 800a218:	4b03      	ldr	r3, [pc, #12]	; (800a228 <USER_status+0x2c>)
 800a21a:	781b      	ldrb	r3, [r3, #0]
 800a21c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3708      	adds	r7, #8
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	2000023d 	.word	0x2000023d

0800a22c <SD0_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DSTATUS SD0_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	60b9      	str	r1, [r7, #8]
 800a234:	607a      	str	r2, [r7, #4]
 800a236:	603b      	str	r3, [r7, #0]
 800a238:	4603      	mov	r3, r0
 800a23a:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(0);
 800a23c:	2000      	movs	r0, #0
 800a23e:	f7f8 f9a1 	bl	8002584 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 800a242:	7bf8      	ldrb	r0, [r7, #15]
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	687a      	ldr	r2, [r7, #4]
 800a248:	68b9      	ldr	r1, [r7, #8]
 800a24a:	f000 f847 	bl	800a2dc <USER_read>
 800a24e:	4603      	mov	r3, r0
}
 800a250:	4618      	mov	r0, r3
 800a252:	3710      	adds	r7, #16
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <SD1_read>:
DSTATUS SD1_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	60b9      	str	r1, [r7, #8]
 800a260:	607a      	str	r2, [r7, #4]
 800a262:	603b      	str	r3, [r7, #0]
 800a264:	4603      	mov	r3, r0
 800a266:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(1);
 800a268:	2001      	movs	r0, #1
 800a26a:	f7f8 f98b 	bl	8002584 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 800a26e:	7bf8      	ldrb	r0, [r7, #15]
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	68b9      	ldr	r1, [r7, #8]
 800a276:	f000 f831 	bl	800a2dc <USER_read>
 800a27a:	4603      	mov	r3, r0
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3710      	adds	r7, #16
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <SD2_read>:
DSTATUS SD2_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	60b9      	str	r1, [r7, #8]
 800a28c:	607a      	str	r2, [r7, #4]
 800a28e:	603b      	str	r3, [r7, #0]
 800a290:	4603      	mov	r3, r0
 800a292:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(2);
 800a294:	2002      	movs	r0, #2
 800a296:	f7f8 f975 	bl	8002584 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 800a29a:	7bf8      	ldrb	r0, [r7, #15]
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	68b9      	ldr	r1, [r7, #8]
 800a2a2:	f000 f81b 	bl	800a2dc <USER_read>
 800a2a6:	4603      	mov	r3, r0
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3710      	adds	r7, #16
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <SD3_read>:
DSTATUS SD3_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60b9      	str	r1, [r7, #8]
 800a2b8:	607a      	str	r2, [r7, #4]
 800a2ba:	603b      	str	r3, [r7, #0]
 800a2bc:	4603      	mov	r3, r0
 800a2be:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(3);
 800a2c0:	2003      	movs	r0, #3
 800a2c2:	f7f8 f95f 	bl	8002584 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 800a2c6:	7bf8      	ldrb	r0, [r7, #15]
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	68b9      	ldr	r1, [r7, #8]
 800a2ce:	f000 f805 	bl	800a2dc <USER_read>
 800a2d2:	4603      	mov	r3, r0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3710      	adds	r7, #16
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60b9      	str	r1, [r7, #8]
 800a2e4:	607a      	str	r2, [r7, #4]
 800a2e6:	603b      	str	r3, [r7, #0]
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	SS_SD_SELECT();
 800a2ec:	f7f8 f968 	bl	80025c0 <sd_ss_active_pin_down>
	if (pdrv || !count) return RES_PARERR;
 800a2f0:	7bfb      	ldrb	r3, [r7, #15]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d102      	bne.n	800a2fc <USER_read+0x20>
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d101      	bne.n	800a300 <USER_read+0x24>
 800a2fc:	2304      	movs	r3, #4
 800a2fe:	e043      	b.n	800a388 <USER_read+0xac>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a300:	4b23      	ldr	r3, [pc, #140]	; (800a390 <USER_read+0xb4>)
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	b2db      	uxtb	r3, r3
 800a306:	f003 0301 	and.w	r3, r3, #1
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d001      	beq.n	800a312 <USER_read+0x36>
 800a30e:	2303      	movs	r3, #3
 800a310:	e03a      	b.n	800a388 <USER_read+0xac>
	if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 800a312:	4b20      	ldr	r3, [pc, #128]	; (800a394 <USER_read+0xb8>)
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	b2db      	uxtb	r3, r3
 800a318:	f003 0304 	and.w	r3, r3, #4
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d102      	bne.n	800a326 <USER_read+0x4a>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	025b      	lsls	r3, r3, #9
 800a324:	607b      	str	r3, [r7, #4]
	if (count == 1) /* Single block read */
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	2b01      	cmp	r3, #1
 800a32a:	d106      	bne.n	800a33a <USER_read+0x5e>
	{
	  SD_Read_Block(buff,sector); //Ð¡Ñ‡Ð¸Ñ‚Ð°ÐµÐ¼ Ð±Ð»Ð¾Ðº Ð² Ð±ÑƒÑ„ÐµÑ€
 800a32c:	6879      	ldr	r1, [r7, #4]
 800a32e:	68b8      	ldr	r0, [r7, #8]
 800a330:	f7f8 fb01 	bl	8002936 <SD_Read_Block>
	  count = 0;
 800a334:	2300      	movs	r3, #0
 800a336:	603b      	str	r3, [r7, #0]
 800a338:	e01c      	b.n	800a374 <USER_read+0x98>
	}
	else /* Multiple block read */
	{
		do{
			SD_Read_Block((BYTE*)buff,sector);
 800a33a:	6879      	ldr	r1, [r7, #4]
 800a33c:	68b8      	ldr	r0, [r7, #8]
 800a33e:	f7f8 fafa 	bl	8002936 <SD_Read_Block>
			if (!(sdinfo.type & 4)){
 800a342:	4b14      	ldr	r3, [pc, #80]	; (800a394 <USER_read+0xb8>)
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	b2db      	uxtb	r3, r3
 800a348:	f003 0304 	and.w	r3, r3, #4
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d104      	bne.n	800a35a <USER_read+0x7e>
				sector+=512;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a356:	607b      	str	r3, [r7, #4]
 800a358:	e002      	b.n	800a360 <USER_read+0x84>
			}
			else sector++;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	3301      	adds	r3, #1
 800a35e:	607b      	str	r3, [r7, #4]
			buff+=512;
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a366:	60bb      	str	r3, [r7, #8]
			count--;
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	3b01      	subs	r3, #1
 800a36c:	603b      	str	r3, [r7, #0]
		}while(count>0);
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d1e2      	bne.n	800a33a <USER_read+0x5e>
	}
	SPI_Release();
 800a374:	f7f8 fad8 	bl	8002928 <SPI_Release>
	SS_SD_DESELECT();
 800a378:	f7f8 f932 	bl	80025e0 <sd_ss_active_pin_up>
	return count ? RES_ERROR : RES_OK;
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	bf14      	ite	ne
 800a382:	2301      	movne	r3, #1
 800a384:	2300      	moveq	r3, #0
 800a386:	b2db      	uxtb	r3, r3
    return RES_OK;
  /* USER CODE END READ */
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3710      	adds	r7, #16
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}
 800a390:	2000023d 	.word	0x2000023d
 800a394:	20001ba8 	.word	0x20001ba8

0800a398 <SD0_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DSTATUS SD0_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60b9      	str	r1, [r7, #8]
 800a3a0:	607a      	str	r2, [r7, #4]
 800a3a2:	603b      	str	r3, [r7, #0]
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(0);
 800a3a8:	2000      	movs	r0, #0
 800a3aa:	f7f8 f8eb 	bl	8002584 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 800a3ae:	7bf8      	ldrb	r0, [r7, #15]
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	68b9      	ldr	r1, [r7, #8]
 800a3b6:	f000 f847 	bl	800a448 <USER_write>
 800a3ba:	4603      	mov	r3, r0
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3710      	adds	r7, #16
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <SD1_write>:
DSTATUS SD1_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	60b9      	str	r1, [r7, #8]
 800a3cc:	607a      	str	r2, [r7, #4]
 800a3ce:	603b      	str	r3, [r7, #0]
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(1);
 800a3d4:	2001      	movs	r0, #1
 800a3d6:	f7f8 f8d5 	bl	8002584 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 800a3da:	7bf8      	ldrb	r0, [r7, #15]
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	68b9      	ldr	r1, [r7, #8]
 800a3e2:	f000 f831 	bl	800a448 <USER_write>
 800a3e6:	4603      	mov	r3, r0
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3710      	adds	r7, #16
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <SD2_write>:
DSTATUS SD2_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	60b9      	str	r1, [r7, #8]
 800a3f8:	607a      	str	r2, [r7, #4]
 800a3fa:	603b      	str	r3, [r7, #0]
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(2);
 800a400:	2002      	movs	r0, #2
 800a402:	f7f8 f8bf 	bl	8002584 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 800a406:	7bf8      	ldrb	r0, [r7, #15]
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	68b9      	ldr	r1, [r7, #8]
 800a40e:	f000 f81b 	bl	800a448 <USER_write>
 800a412:	4603      	mov	r3, r0
}
 800a414:	4618      	mov	r0, r3
 800a416:	3710      	adds	r7, #16
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <SD3_write>:
DSTATUS SD3_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	60b9      	str	r1, [r7, #8]
 800a424:	607a      	str	r2, [r7, #4]
 800a426:	603b      	str	r3, [r7, #0]
 800a428:	4603      	mov	r3, r0
 800a42a:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(3);
 800a42c:	2003      	movs	r0, #3
 800a42e:	f7f8 f8a9 	bl	8002584 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 800a432:	7bf8      	ldrb	r0, [r7, #15]
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	687a      	ldr	r2, [r7, #4]
 800a438:	68b9      	ldr	r1, [r7, #8]
 800a43a:	f000 f805 	bl	800a448 <USER_write>
 800a43e:	4603      	mov	r3, r0
}
 800a440:	4618      	mov	r0, r3
 800a442:	3710      	adds	r7, #16
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b086      	sub	sp, #24
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60b9      	str	r1, [r7, #8]
 800a450:	607a      	str	r2, [r7, #4]
 800a452:	603b      	str	r3, [r7, #0]
 800a454:	4603      	mov	r3, r0
 800a456:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	uint8_t res;
	SS_SD_SELECT();
 800a458:	f7f8 f8b2 	bl	80025c0 <sd_ss_active_pin_down>
	if (pdrv || !count) return RES_PARERR;
 800a45c:	7bfb      	ldrb	r3, [r7, #15]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d102      	bne.n	800a468 <USER_write+0x20>
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d101      	bne.n	800a46c <USER_write+0x24>
 800a468:	2304      	movs	r3, #4
 800a46a:	e02c      	b.n	800a4c6 <USER_write+0x7e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a46c:	4b18      	ldr	r3, [pc, #96]	; (800a4d0 <USER_write+0x88>)
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	b2db      	uxtb	r3, r3
 800a472:	f003 0301 	and.w	r3, r3, #1
 800a476:	2b00      	cmp	r3, #0
 800a478:	d001      	beq.n	800a47e <USER_write+0x36>
 800a47a:	2303      	movs	r3, #3
 800a47c:	e023      	b.n	800a4c6 <USER_write+0x7e>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800a47e:	4b14      	ldr	r3, [pc, #80]	; (800a4d0 <USER_write+0x88>)
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	b2db      	uxtb	r3, r3
 800a484:	f003 0304 	and.w	r3, r3, #4
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d001      	beq.n	800a490 <USER_write+0x48>
 800a48c:	2302      	movs	r3, #2
 800a48e:	e01a      	b.n	800a4c6 <USER_write+0x7e>
	if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 800a490:	4b10      	ldr	r3, [pc, #64]	; (800a4d4 <USER_write+0x8c>)
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	b2db      	uxtb	r3, r3
 800a496:	f003 0304 	and.w	r3, r3, #4
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d102      	bne.n	800a4a4 <USER_write+0x5c>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	025b      	lsls	r3, r3, #9
 800a4a2:	607b      	str	r3, [r7, #4]
  	res=SD_Write_Blocks((BYTE*)buff,sector,count);
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	6879      	ldr	r1, [r7, #4]
 800a4ac:	68b8      	ldr	r0, [r7, #8]
 800a4ae:	f7f8 fa87 	bl	80029c0 <SD_Write_Blocks>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	75fb      	strb	r3, [r7, #23]
	SS_SD_DESELECT();
 800a4b6:	f7f8 f893 	bl	80025e0 <sd_ss_active_pin_up>

	return res ? RES_ERROR : RES_OK;
 800a4ba:	7dfb      	ldrb	r3, [r7, #23]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	bf14      	ite	ne
 800a4c0:	2301      	movne	r3, #1
 800a4c2:	2300      	moveq	r3, #0
 800a4c4:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3718      	adds	r7, #24
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	2000023d 	.word	0x2000023d
 800a4d4:	20001ba8 	.word	0x20001ba8

0800a4d8 <SD0_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DSTATUS SD0_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	4603      	mov	r3, r0
 800a4e0:	603a      	str	r2, [r7, #0]
 800a4e2:	71fb      	strb	r3, [r7, #7]
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(0);
 800a4e8:	2000      	movs	r0, #0
 800a4ea:	f7f8 f84b 	bl	8002584 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 800a4ee:	79b9      	ldrb	r1, [r7, #6]
 800a4f0:	79fb      	ldrb	r3, [r7, #7]
 800a4f2:	683a      	ldr	r2, [r7, #0]
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f000 f847 	bl	800a588 <USER_ioctl>
 800a4fa:	4603      	mov	r3, r0
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3708      	adds	r7, #8
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <SD1_ioctl>:
DSTATUS SD1_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	4603      	mov	r3, r0
 800a50c:	603a      	str	r2, [r7, #0]
 800a50e:	71fb      	strb	r3, [r7, #7]
 800a510:	460b      	mov	r3, r1
 800a512:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(1);
 800a514:	2001      	movs	r0, #1
 800a516:	f7f8 f835 	bl	8002584 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 800a51a:	79b9      	ldrb	r1, [r7, #6]
 800a51c:	79fb      	ldrb	r3, [r7, #7]
 800a51e:	683a      	ldr	r2, [r7, #0]
 800a520:	4618      	mov	r0, r3
 800a522:	f000 f831 	bl	800a588 <USER_ioctl>
 800a526:	4603      	mov	r3, r0
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3708      	adds	r7, #8
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <SD2_ioctl>:
DSTATUS SD2_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b082      	sub	sp, #8
 800a534:	af00      	add	r7, sp, #0
 800a536:	4603      	mov	r3, r0
 800a538:	603a      	str	r2, [r7, #0]
 800a53a:	71fb      	strb	r3, [r7, #7]
 800a53c:	460b      	mov	r3, r1
 800a53e:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(2);
 800a540:	2002      	movs	r0, #2
 800a542:	f7f8 f81f 	bl	8002584 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 800a546:	79b9      	ldrb	r1, [r7, #6]
 800a548:	79fb      	ldrb	r3, [r7, #7]
 800a54a:	683a      	ldr	r2, [r7, #0]
 800a54c:	4618      	mov	r0, r3
 800a54e:	f000 f81b 	bl	800a588 <USER_ioctl>
 800a552:	4603      	mov	r3, r0
}
 800a554:	4618      	mov	r0, r3
 800a556:	3708      	adds	r7, #8
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <SD3_ioctl>:
DSTATUS SD3_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b082      	sub	sp, #8
 800a560:	af00      	add	r7, sp, #0
 800a562:	4603      	mov	r3, r0
 800a564:	603a      	str	r2, [r7, #0]
 800a566:	71fb      	strb	r3, [r7, #7]
 800a568:	460b      	mov	r3, r1
 800a56a:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(3);
 800a56c:	2003      	movs	r0, #3
 800a56e:	f7f8 f809 	bl	8002584 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 800a572:	79b9      	ldrb	r1, [r7, #6]
 800a574:	79fb      	ldrb	r3, [r7, #7]
 800a576:	683a      	ldr	r2, [r7, #0]
 800a578:	4618      	mov	r0, r3
 800a57a:	f000 f805 	bl	800a588 <USER_ioctl>
 800a57e:	4603      	mov	r3, r0
}
 800a580:	4618      	mov	r0, r3
 800a582:	3708      	adds	r7, #8
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b084      	sub	sp, #16
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	4603      	mov	r3, r0
 800a590:	603a      	str	r2, [r7, #0]
 800a592:	71fb      	strb	r3, [r7, #7]
 800a594:	460b      	mov	r3, r1
 800a596:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res;
	sd_ss_set_active(pdrv);
 800a598:	79fb      	ldrb	r3, [r7, #7]
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7f7 fff2 	bl	8002584 <sd_ss_set_active>
	SS_SD_SELECT();
 800a5a0:	f7f8 f80e 	bl	80025c0 <sd_ss_active_pin_down>
	if (pdrv) return RES_PARERR;
 800a5a4:	79fb      	ldrb	r3, [r7, #7]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d001      	beq.n	800a5ae <USER_ioctl+0x26>
 800a5aa:	2304      	movs	r3, #4
 800a5ac:	e02a      	b.n	800a604 <USER_ioctl+0x7c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a5ae:	4b17      	ldr	r3, [pc, #92]	; (800a60c <USER_ioctl+0x84>)
 800a5b0:	781b      	ldrb	r3, [r3, #0]
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	f003 0301 	and.w	r3, r3, #1
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d001      	beq.n	800a5c0 <USER_ioctl+0x38>
 800a5bc:	2303      	movs	r3, #3
 800a5be:	e021      	b.n	800a604 <USER_ioctl+0x7c>
	res = RES_ERROR;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	73fb      	strb	r3, [r7, #15]
	switch (cmd)
 800a5c4:	79bb      	ldrb	r3, [r7, #6]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d002      	beq.n	800a5d0 <USER_ioctl+0x48>
 800a5ca:	2b02      	cmp	r3, #2
 800a5cc:	d00a      	beq.n	800a5e4 <USER_ioctl+0x5c>
 800a5ce:	e010      	b.n	800a5f2 <USER_ioctl+0x6a>
	{
	  case CTRL_SYNC : /* Flush dirty buffer if present */
	    SS_SD_SELECT();
 800a5d0:	f7f7 fff6 	bl	80025c0 <sd_ss_active_pin_down>
	    if (SPI_wait_ready() == 0xFF)
 800a5d4:	f7f8 f931 	bl	800283a <SPI_wait_ready>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	2bff      	cmp	r3, #255	; 0xff
 800a5dc:	d10c      	bne.n	800a5f8 <USER_ioctl+0x70>
	    res = RES_OK;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	73fb      	strb	r3, [r7, #15]
	    break;
 800a5e2:	e009      	b.n	800a5f8 <USER_ioctl+0x70>
	  case GET_SECTOR_SIZE : /* Get sectors on the disk (WORD) */
	    *(WORD*)buff = 512;
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a5ea:	801a      	strh	r2, [r3, #0]
	    res = RES_OK;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	73fb      	strb	r3, [r7, #15]
	    break;
 800a5f0:	e003      	b.n	800a5fa <USER_ioctl+0x72>
	  default:
	    res = RES_PARERR;
 800a5f2:	2304      	movs	r3, #4
 800a5f4:	73fb      	strb	r3, [r7, #15]
 800a5f6:	e000      	b.n	800a5fa <USER_ioctl+0x72>
	    break;
 800a5f8:	bf00      	nop
	}
	SPI_Release();
 800a5fa:	f7f8 f995 	bl	8002928 <SPI_Release>
	SS_SD_DESELECT();
 800a5fe:	f7f7 ffef 	bl	80025e0 <sd_ss_active_pin_up>
    return res;
 800a602:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800a604:	4618      	mov	r0, r3
 800a606:	3710      	adds	r7, #16
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}
 800a60c:	2000023d 	.word	0x2000023d

0800a610 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a610:	b590      	push	{r4, r7, lr}
 800a612:	b089      	sub	sp, #36	; 0x24
 800a614:	af04      	add	r7, sp, #16
 800a616:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a618:	2301      	movs	r3, #1
 800a61a:	2202      	movs	r2, #2
 800a61c:	2102      	movs	r1, #2
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 fdb0 	bl	800b184 <USBH_FindInterface>
 800a624:	4603      	mov	r3, r0
 800a626:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a628:	7bfb      	ldrb	r3, [r7, #15]
 800a62a:	2bff      	cmp	r3, #255	; 0xff
 800a62c:	d002      	beq.n	800a634 <USBH_CDC_InterfaceInit+0x24>
 800a62e:	7bfb      	ldrb	r3, [r7, #15]
 800a630:	2b01      	cmp	r3, #1
 800a632:	d901      	bls.n	800a638 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a634:	2302      	movs	r3, #2
 800a636:	e13d      	b.n	800a8b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a638:	7bfb      	ldrb	r3, [r7, #15]
 800a63a:	4619      	mov	r1, r3
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 fd85 	bl	800b14c <USBH_SelectInterface>
 800a642:	4603      	mov	r3, r0
 800a644:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a646:	7bbb      	ldrb	r3, [r7, #14]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d001      	beq.n	800a650 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a64c:	2302      	movs	r3, #2
 800a64e:	e131      	b.n	800a8b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a656:	2050      	movs	r0, #80	; 0x50
 800a658:	f00a f930 	bl	80148bc <malloc>
 800a65c:	4603      	mov	r3, r0
 800a65e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a666:	69db      	ldr	r3, [r3, #28]
 800a668:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d101      	bne.n	800a674 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a670:	2302      	movs	r3, #2
 800a672:	e11f      	b.n	800a8b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a674:	2250      	movs	r2, #80	; 0x50
 800a676:	2100      	movs	r1, #0
 800a678:	68b8      	ldr	r0, [r7, #8]
 800a67a:	f00a f93d 	bl	80148f8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a67e:	7bfb      	ldrb	r3, [r7, #15]
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	211a      	movs	r1, #26
 800a684:	fb01 f303 	mul.w	r3, r1, r3
 800a688:	4413      	add	r3, r2
 800a68a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a68e:	781b      	ldrb	r3, [r3, #0]
 800a690:	b25b      	sxtb	r3, r3
 800a692:	2b00      	cmp	r3, #0
 800a694:	da15      	bge.n	800a6c2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a696:	7bfb      	ldrb	r3, [r7, #15]
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	211a      	movs	r1, #26
 800a69c:	fb01 f303 	mul.w	r3, r1, r3
 800a6a0:	4413      	add	r3, r2
 800a6a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a6a6:	781a      	ldrb	r2, [r3, #0]
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a6ac:	7bfb      	ldrb	r3, [r7, #15]
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	211a      	movs	r1, #26
 800a6b2:	fb01 f303 	mul.w	r3, r1, r3
 800a6b6:	4413      	add	r3, r2
 800a6b8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a6bc:	881a      	ldrh	r2, [r3, #0]
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	785b      	ldrb	r3, [r3, #1]
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f002 fa80 	bl	800cbce <USBH_AllocPipe>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	7819      	ldrb	r1, [r3, #0]
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	7858      	ldrb	r0, [r3, #1]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a6ea:	68ba      	ldr	r2, [r7, #8]
 800a6ec:	8952      	ldrh	r2, [r2, #10]
 800a6ee:	9202      	str	r2, [sp, #8]
 800a6f0:	2203      	movs	r2, #3
 800a6f2:	9201      	str	r2, [sp, #4]
 800a6f4:	9300      	str	r3, [sp, #0]
 800a6f6:	4623      	mov	r3, r4
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f002 fa38 	bl	800cb70 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	2200      	movs	r2, #0
 800a706:	4619      	mov	r1, r3
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f009 ff29 	bl	8014560 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a70e:	2300      	movs	r3, #0
 800a710:	2200      	movs	r2, #0
 800a712:	210a      	movs	r1, #10
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 fd35 	bl	800b184 <USBH_FindInterface>
 800a71a:	4603      	mov	r3, r0
 800a71c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a71e:	7bfb      	ldrb	r3, [r7, #15]
 800a720:	2bff      	cmp	r3, #255	; 0xff
 800a722:	d002      	beq.n	800a72a <USBH_CDC_InterfaceInit+0x11a>
 800a724:	7bfb      	ldrb	r3, [r7, #15]
 800a726:	2b01      	cmp	r3, #1
 800a728:	d901      	bls.n	800a72e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a72a:	2302      	movs	r3, #2
 800a72c:	e0c2      	b.n	800a8b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a72e:	7bfb      	ldrb	r3, [r7, #15]
 800a730:	687a      	ldr	r2, [r7, #4]
 800a732:	211a      	movs	r1, #26
 800a734:	fb01 f303 	mul.w	r3, r1, r3
 800a738:	4413      	add	r3, r2
 800a73a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	b25b      	sxtb	r3, r3
 800a742:	2b00      	cmp	r3, #0
 800a744:	da16      	bge.n	800a774 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a746:	7bfb      	ldrb	r3, [r7, #15]
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	211a      	movs	r1, #26
 800a74c:	fb01 f303 	mul.w	r3, r1, r3
 800a750:	4413      	add	r3, r2
 800a752:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a756:	781a      	ldrb	r2, [r3, #0]
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a75c:	7bfb      	ldrb	r3, [r7, #15]
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	211a      	movs	r1, #26
 800a762:	fb01 f303 	mul.w	r3, r1, r3
 800a766:	4413      	add	r3, r2
 800a768:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a76c:	881a      	ldrh	r2, [r3, #0]
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	835a      	strh	r2, [r3, #26]
 800a772:	e015      	b.n	800a7a0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a774:	7bfb      	ldrb	r3, [r7, #15]
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	211a      	movs	r1, #26
 800a77a:	fb01 f303 	mul.w	r3, r1, r3
 800a77e:	4413      	add	r3, r2
 800a780:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a784:	781a      	ldrb	r2, [r3, #0]
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a78a:	7bfb      	ldrb	r3, [r7, #15]
 800a78c:	687a      	ldr	r2, [r7, #4]
 800a78e:	211a      	movs	r1, #26
 800a790:	fb01 f303 	mul.w	r3, r1, r3
 800a794:	4413      	add	r3, r2
 800a796:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a79a:	881a      	ldrh	r2, [r3, #0]
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800a7a0:	7bfb      	ldrb	r3, [r7, #15]
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	211a      	movs	r1, #26
 800a7a6:	fb01 f303 	mul.w	r3, r1, r3
 800a7aa:	4413      	add	r3, r2
 800a7ac:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	b25b      	sxtb	r3, r3
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	da16      	bge.n	800a7e6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a7b8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	211a      	movs	r1, #26
 800a7be:	fb01 f303 	mul.w	r3, r1, r3
 800a7c2:	4413      	add	r3, r2
 800a7c4:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a7c8:	781a      	ldrb	r2, [r3, #0]
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a7ce:	7bfb      	ldrb	r3, [r7, #15]
 800a7d0:	687a      	ldr	r2, [r7, #4]
 800a7d2:	211a      	movs	r1, #26
 800a7d4:	fb01 f303 	mul.w	r3, r1, r3
 800a7d8:	4413      	add	r3, r2
 800a7da:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a7de:	881a      	ldrh	r2, [r3, #0]
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	835a      	strh	r2, [r3, #26]
 800a7e4:	e015      	b.n	800a812 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a7e6:	7bfb      	ldrb	r3, [r7, #15]
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	211a      	movs	r1, #26
 800a7ec:	fb01 f303 	mul.w	r3, r1, r3
 800a7f0:	4413      	add	r3, r2
 800a7f2:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a7f6:	781a      	ldrb	r2, [r3, #0]
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a7fc:	7bfb      	ldrb	r3, [r7, #15]
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	211a      	movs	r1, #26
 800a802:	fb01 f303 	mul.w	r3, r1, r3
 800a806:	4413      	add	r3, r2
 800a808:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a80c:	881a      	ldrh	r2, [r3, #0]
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	7b9b      	ldrb	r3, [r3, #14]
 800a816:	4619      	mov	r1, r3
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f002 f9d8 	bl	800cbce <USBH_AllocPipe>
 800a81e:	4603      	mov	r3, r0
 800a820:	461a      	mov	r2, r3
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	7bdb      	ldrb	r3, [r3, #15]
 800a82a:	4619      	mov	r1, r3
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f002 f9ce 	bl	800cbce <USBH_AllocPipe>
 800a832:	4603      	mov	r3, r0
 800a834:	461a      	mov	r2, r3
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	7b59      	ldrb	r1, [r3, #13]
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	7b98      	ldrb	r0, [r3, #14]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a84e:	68ba      	ldr	r2, [r7, #8]
 800a850:	8b12      	ldrh	r2, [r2, #24]
 800a852:	9202      	str	r2, [sp, #8]
 800a854:	2202      	movs	r2, #2
 800a856:	9201      	str	r2, [sp, #4]
 800a858:	9300      	str	r3, [sp, #0]
 800a85a:	4623      	mov	r3, r4
 800a85c:	4602      	mov	r2, r0
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f002 f986 	bl	800cb70 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	7b19      	ldrb	r1, [r3, #12]
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	7bd8      	ldrb	r0, [r3, #15]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a878:	68ba      	ldr	r2, [r7, #8]
 800a87a:	8b52      	ldrh	r2, [r2, #26]
 800a87c:	9202      	str	r2, [sp, #8]
 800a87e:	2202      	movs	r2, #2
 800a880:	9201      	str	r2, [sp, #4]
 800a882:	9300      	str	r3, [sp, #0]
 800a884:	4623      	mov	r3, r4
 800a886:	4602      	mov	r2, r0
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f002 f971 	bl	800cb70 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	2200      	movs	r2, #0
 800a892:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	7b5b      	ldrb	r3, [r3, #13]
 800a89a:	2200      	movs	r2, #0
 800a89c:	4619      	mov	r1, r3
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f009 fe5e 	bl	8014560 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	7b1b      	ldrb	r3, [r3, #12]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f009 fe57 	bl	8014560 <USBH_LL_SetToggle>

  return USBH_OK;
 800a8b2:	2300      	movs	r3, #0
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3714      	adds	r7, #20
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd90      	pop	{r4, r7, pc}

0800a8bc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8ca:	69db      	ldr	r3, [r3, #28]
 800a8cc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d00e      	beq.n	800a8f4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	4619      	mov	r1, r3
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f002 f966 	bl	800cbae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	781b      	ldrb	r3, [r3, #0]
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f002 f991 	bl	800cc10 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	7b1b      	ldrb	r3, [r3, #12]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d00e      	beq.n	800a91a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	7b1b      	ldrb	r3, [r3, #12]
 800a900:	4619      	mov	r1, r3
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f002 f953 	bl	800cbae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	7b1b      	ldrb	r3, [r3, #12]
 800a90c:	4619      	mov	r1, r3
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f002 f97e 	bl	800cc10 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2200      	movs	r2, #0
 800a918:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	7b5b      	ldrb	r3, [r3, #13]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d00e      	beq.n	800a940 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	7b5b      	ldrb	r3, [r3, #13]
 800a926:	4619      	mov	r1, r3
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f002 f940 	bl	800cbae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	7b5b      	ldrb	r3, [r3, #13]
 800a932:	4619      	mov	r1, r3
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f002 f96b 	bl	800cc10 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2200      	movs	r2, #0
 800a93e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a946:	69db      	ldr	r3, [r3, #28]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d00b      	beq.n	800a964 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a952:	69db      	ldr	r3, [r3, #28]
 800a954:	4618      	mov	r0, r3
 800a956:	f009 ffb9 	bl	80148cc <free>
    phost->pActiveClass->pData = 0U;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a960:	2200      	movs	r2, #0
 800a962:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a964:	2300      	movs	r3, #0
}
 800a966:	4618      	mov	r0, r3
 800a968:	3710      	adds	r7, #16
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}

0800a96e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	b084      	sub	sp, #16
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a97c:	69db      	ldr	r3, [r3, #28]
 800a97e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	3340      	adds	r3, #64	; 0x40
 800a984:	4619      	mov	r1, r3
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 f8da 	bl	800ab40 <GetLineCoding>
 800a98c:	4603      	mov	r3, r0
 800a98e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a990:	7afb      	ldrb	r3, [r7, #11]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d105      	bne.n	800a9a2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a99c:	2102      	movs	r1, #2
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a9a2:	7afb      	ldrb	r3, [r7, #11]
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3710      	adds	r7, #16
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9c2:	69db      	ldr	r3, [r3, #28]
 800a9c4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a9cc:	2b04      	cmp	r3, #4
 800a9ce:	d877      	bhi.n	800aac0 <USBH_CDC_Process+0x114>
 800a9d0:	a201      	add	r2, pc, #4	; (adr r2, 800a9d8 <USBH_CDC_Process+0x2c>)
 800a9d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d6:	bf00      	nop
 800a9d8:	0800a9ed 	.word	0x0800a9ed
 800a9dc:	0800a9f3 	.word	0x0800a9f3
 800a9e0:	0800aa23 	.word	0x0800aa23
 800a9e4:	0800aa97 	.word	0x0800aa97
 800a9e8:	0800aaa5 	.word	0x0800aaa5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	73fb      	strb	r3, [r7, #15]
      break;
 800a9f0:	e06d      	b.n	800aace <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 f8c0 	bl	800ab7e <SetLineCoding>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800aa02:	7bbb      	ldrb	r3, [r7, #14]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d104      	bne.n	800aa12 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	2202      	movs	r2, #2
 800aa0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800aa10:	e058      	b.n	800aac4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800aa12:	7bbb      	ldrb	r3, [r7, #14]
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d055      	beq.n	800aac4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	2204      	movs	r2, #4
 800aa1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800aa20:	e050      	b.n	800aac4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	3340      	adds	r3, #64	; 0x40
 800aa26:	4619      	mov	r1, r3
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 f889 	bl	800ab40 <GetLineCoding>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800aa32:	7bbb      	ldrb	r3, [r7, #14]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d126      	bne.n	800aa86 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa4a:	791b      	ldrb	r3, [r3, #4]
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d13b      	bne.n	800aac8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa5a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d133      	bne.n	800aac8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa6a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d12b      	bne.n	800aac8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa78:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d124      	bne.n	800aac8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 fa7a 	bl	800af78 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800aa84:	e020      	b.n	800aac8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800aa86:	7bbb      	ldrb	r3, [r7, #14]
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	d01d      	beq.n	800aac8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	2204      	movs	r2, #4
 800aa90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800aa94:	e018      	b.n	800aac8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 f934 	bl	800ad04 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 f9c3 	bl	800ae28 <CDC_ProcessReception>
      break;
 800aaa2:	e014      	b.n	800aace <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800aaa4:	2100      	movs	r1, #0
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f001 fa53 	bl	800bf52 <USBH_ClrFeature>
 800aaac:	4603      	mov	r3, r0
 800aaae:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800aab0:	7bbb      	ldrb	r3, [r7, #14]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d10a      	bne.n	800aacc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	2200      	movs	r2, #0
 800aaba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800aabe:	e005      	b.n	800aacc <USBH_CDC_Process+0x120>

    default:
      break;
 800aac0:	bf00      	nop
 800aac2:	e004      	b.n	800aace <USBH_CDC_Process+0x122>
      break;
 800aac4:	bf00      	nop
 800aac6:	e002      	b.n	800aace <USBH_CDC_Process+0x122>
      break;
 800aac8:	bf00      	nop
 800aaca:	e000      	b.n	800aace <USBH_CDC_Process+0x122>
      break;
 800aacc:	bf00      	nop

  }

  return status;
 800aace:	7bfb      	ldrb	r3, [r7, #15]
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3710      	adds	r7, #16
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800aae0:	2300      	movs	r3, #0
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	370c      	adds	r7, #12
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr

0800aaee <USBH_CDC_Stop>:
  *         Stop current CDC Transmission
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_CDC_Stop(USBH_HandleTypeDef *phost)
{
 800aaee:	b580      	push	{r7, lr}
 800aaf0:	b084      	sub	sp, #16
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aafc:	69db      	ldr	r3, [r3, #28]
 800aafe:	60fb      	str	r3, [r7, #12]

  if (phost->gState == HOST_CLASS)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	2b0b      	cmp	r3, #11
 800ab08:	d115      	bne.n	800ab36 <USBH_CDC_Stop+0x48>
  {
    CDC_Handle->state = CDC_IDLE_STATE;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	4619      	mov	r1, r3
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f002 f848 	bl	800cbae <USBH_ClosePipe>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	7b1b      	ldrb	r3, [r3, #12]
 800ab22:	4619      	mov	r1, r3
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f002 f842 	bl	800cbae <USBH_ClosePipe>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	7b5b      	ldrb	r3, [r3, #13]
 800ab2e:	4619      	mov	r1, r3
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f002 f83c 	bl	800cbae <USBH_ClosePipe>
  }
  return USBH_OK;
 800ab36:	2300      	movs	r3, #0
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3710      	adds	r7, #16
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	22a1      	movs	r2, #161	; 0xa1
 800ab4e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2221      	movs	r2, #33	; 0x21
 800ab54:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2207      	movs	r2, #7
 800ab66:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	2207      	movs	r2, #7
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f001 fcbc 	bl	800c4ec <USBH_CtlReq>
 800ab74:	4603      	mov	r3, r0
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3708      	adds	r7, #8
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}

0800ab7e <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800ab7e:	b580      	push	{r7, lr}
 800ab80:	b082      	sub	sp, #8
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
 800ab86:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2221      	movs	r2, #33	; 0x21
 800ab8c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2220      	movs	r2, #32
 800ab92:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2200      	movs	r2, #0
 800ab98:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2207      	movs	r2, #7
 800aba4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	2207      	movs	r2, #7
 800abaa:	4619      	mov	r1, r3
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f001 fc9d 	bl	800c4ec <USBH_CtlReq>
 800abb2:	4603      	mov	r3, r0
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3708      	adds	r7, #8
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <USBH_CDC_SetLineCoding>:
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef USBH_CDC_SetLineCoding(USBH_HandleTypeDef *phost,
                                          CDC_LineCodingTypeDef *linecoding)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b084      	sub	sp, #16
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800abcc:	69db      	ldr	r3, [r3, #28]
 800abce:	60fb      	str	r3, [r7, #12]

  if (phost->gState == HOST_CLASS)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	2b0b      	cmp	r3, #11
 800abd8:	d114      	bne.n	800ac04 <USBH_CDC_SetLineCoding+0x48>
  {
    CDC_Handle->state = CDC_SET_LINE_CODING_STATE;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2201      	movs	r2, #1
 800abde:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->pUserLineCoding = linecoding;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	683a      	ldr	r2, [r7, #0]
 800abe6:	649a      	str	r2, [r3, #72]	; 0x48

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2204      	movs	r2, #4
 800abec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800abfc:	2200      	movs	r2, #0
 800abfe:	4619      	mov	r1, r3
 800ac00:	f006 ffde 	bl	8011bc0 <osMessagePut>
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }

  return USBH_OK;
 800ac04:	2300      	movs	r3, #0
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3710      	adds	r7, #16
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}

0800ac0e <USBH_CDC_Transmit>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Transmit(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 800ac0e:	b580      	push	{r7, lr}
 800ac10:	b086      	sub	sp, #24
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	60f8      	str	r0, [r7, #12]
 800ac16:	60b9      	str	r1, [r7, #8]
 800ac18:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac24:	69db      	ldr	r3, [r3, #28]
 800ac26:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d004      	beq.n	800ac3c <USBH_CDC_Transmit+0x2e>
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ac38:	2b03      	cmp	r3, #3
 800ac3a:	d11d      	bne.n	800ac78 <USBH_CDC_Transmit+0x6a>
  {
    CDC_Handle->pTxData = pbuff;
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	68ba      	ldr	r2, [r7, #8]
 800ac40:	61da      	str	r2, [r3, #28]
    CDC_Handle->TxDataLength = length;
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	625a      	str	r2, [r3, #36]	; 0x24
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	2203      	movs	r2, #3
 800ac4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	2201      	movs	r2, #1
 800ac54:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    Status = USBH_OK;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2204      	movs	r2, #4
 800ac60:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ac70:	2200      	movs	r2, #0
 800ac72:	4619      	mov	r1, r3
 800ac74:	f006 ffa4 	bl	8011bc0 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }
  return Status;
 800ac78:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3718      	adds	r7, #24
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
	...

0800ac84 <USBH_CDC_Receive>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b086      	sub	sp, #24
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	60f8      	str	r0, [r7, #12]
 800ac8c:	60b9      	str	r1, [r7, #8]
 800ac8e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ac90:	2301      	movs	r3, #1
 800ac92:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac9a:	69db      	ldr	r3, [r3, #28]
 800ac9c:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d004      	beq.n	800acb2 <USBH_CDC_Receive+0x2e>
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800acae:	2b03      	cmp	r3, #3
 800acb0:	d120      	bne.n	800acf4 <USBH_CDC_Receive+0x70>
  {
	icListen_rx_msg_basic_header=(icListen_wav_full_header*)pbuff;
 800acb2:	4a13      	ldr	r2, [pc, #76]	; (800ad00 <USBH_CDC_Receive+0x7c>)
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	6013      	str	r3, [r2, #0]
    CDC_Handle->pRxData = pbuff;
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	68ba      	ldr	r2, [r7, #8]
 800acbc:	621a      	str	r2, [r3, #32]
    CDC_Handle->RxDataLength = length;
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	629a      	str	r2, [r3, #40]	; 0x28
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	2203      	movs	r2, #3
 800acc8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	2203      	movs	r2, #3
 800acd0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    Status = USBH_OK;
 800acd4:	2300      	movs	r3, #0
 800acd6:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2204      	movs	r2, #4
 800acdc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800acec:	2200      	movs	r2, #0
 800acee:	4619      	mov	r1, r3
 800acf0:	f006 ff66 	bl	8011bc0 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }
  return Status;
 800acf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3718      	adds	r7, #24
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	20001e54 	.word	0x20001e54

0800ad04 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b086      	sub	sp, #24
 800ad08:	af02      	add	r7, sp, #8
 800ad0a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad12:	69db      	ldr	r3, [r3, #28]
 800ad14:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ad16:	2300      	movs	r3, #0
 800ad18:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	d002      	beq.n	800ad2a <CDC_ProcessTransmission+0x26>
 800ad24:	2b02      	cmp	r3, #2
 800ad26:	d023      	beq.n	800ad70 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800ad28:	e07a      	b.n	800ae20 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2e:	68fa      	ldr	r2, [r7, #12]
 800ad30:	8b12      	ldrh	r2, [r2, #24]
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d90b      	bls.n	800ad4e <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	69d9      	ldr	r1, [r3, #28]
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	8b1a      	ldrh	r2, [r3, #24]
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	7b5b      	ldrb	r3, [r3, #13]
 800ad42:	2001      	movs	r0, #1
 800ad44:	9000      	str	r0, [sp, #0]
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f001 fecf 	bl	800caea <USBH_BulkSendData>
 800ad4c:	e00b      	b.n	800ad66 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800ad56:	b29a      	uxth	r2, r3
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	7b5b      	ldrb	r3, [r3, #13]
 800ad5c:	2001      	movs	r0, #1
 800ad5e:	9000      	str	r0, [sp, #0]
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f001 fec2 	bl	800caea <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2202      	movs	r2, #2
 800ad6a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ad6e:	e057      	b.n	800ae20 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	7b5b      	ldrb	r3, [r3, #13]
 800ad74:	4619      	mov	r1, r3
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f009 fbc8 	bl	801450c <USBH_LL_GetURBState>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800ad80:	7afb      	ldrb	r3, [r7, #11]
 800ad82:	2b01      	cmp	r3, #1
 800ad84:	d136      	bne.n	800adf4 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad8a:	68fa      	ldr	r2, [r7, #12]
 800ad8c:	8b12      	ldrh	r2, [r2, #24]
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d90e      	bls.n	800adb0 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad96:	68fa      	ldr	r2, [r7, #12]
 800ad98:	8b12      	ldrh	r2, [r2, #24]
 800ad9a:	1a9a      	subs	r2, r3, r2
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	69db      	ldr	r3, [r3, #28]
 800ada4:	68fa      	ldr	r2, [r7, #12]
 800ada6:	8b12      	ldrh	r2, [r2, #24]
 800ada8:	441a      	add	r2, r3
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	61da      	str	r2, [r3, #28]
 800adae:	e002      	b.n	800adb6 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2200      	movs	r2, #0
 800adb4:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d004      	beq.n	800adc8 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	2201      	movs	r2, #1
 800adc2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800adc6:	e006      	b.n	800add6 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2200      	movs	r2, #0
 800adcc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f009 f92d 	bl	8014030 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2204      	movs	r2, #4
 800adda:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800adea:	2200      	movs	r2, #0
 800adec:	4619      	mov	r1, r3
 800adee:	f006 fee7 	bl	8011bc0 <osMessagePut>
      break;
 800adf2:	e014      	b.n	800ae1e <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800adf4:	7afb      	ldrb	r3, [r7, #11]
 800adf6:	2b02      	cmp	r3, #2
 800adf8:	d111      	bne.n	800ae1e <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2201      	movs	r2, #1
 800adfe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2204      	movs	r2, #4
 800ae06:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae16:	2200      	movs	r2, #0
 800ae18:	4619      	mov	r1, r3
 800ae1a:	f006 fed1 	bl	8011bc0 <osMessagePut>
      break;
 800ae1e:	bf00      	nop
  }
}
 800ae20:	bf00      	nop
 800ae22:	3710      	adds	r7, #16
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b086      	sub	sp, #24
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae36:	69db      	ldr	r3, [r3, #28]
 800ae38:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ae44:	2b03      	cmp	r3, #3
 800ae46:	d002      	beq.n	800ae4e <CDC_ProcessReception+0x26>
 800ae48:	2b04      	cmp	r3, #4
 800ae4a:	d00e      	beq.n	800ae6a <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800ae4c:	e086      	b.n	800af5c <CDC_ProcessReception+0x134>
      (void)USBH_BulkReceiveData(phost,
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	6a19      	ldr	r1, [r3, #32]
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	8b5a      	ldrh	r2, [r3, #26]
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	7b1b      	ldrb	r3, [r3, #12]
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f001 fe6a 	bl	800cb34 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	2204      	movs	r2, #4
 800ae64:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800ae68:	e078      	b.n	800af5c <CDC_ProcessReception+0x134>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	7b1b      	ldrb	r3, [r3, #12]
 800ae6e:	4619      	mov	r1, r3
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f009 fb4b 	bl	801450c <USBH_LL_GetURBState>
 800ae76:	4603      	mov	r3, r0
 800ae78:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800ae7a:	7cfb      	ldrb	r3, [r7, #19]
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d16c      	bne.n	800af5a <CDC_ProcessReception+0x132>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	7b1b      	ldrb	r3, [r3, #12]
 800ae84:	4619      	mov	r1, r3
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f009 faae 	bl	80143e8 <USBH_LL_GetLastXferSize>
 800ae8c:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (CDC_Handle->RxDataLength > CDC_Handle->DataItf.InEpSize))
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae92:	68fa      	ldr	r2, [r7, #12]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d04b      	beq.n	800af30 <CDC_ProcessReception+0x108>
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae9c:	697a      	ldr	r2, [r7, #20]
 800ae9e:	8b52      	ldrh	r2, [r2, #26]
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d945      	bls.n	800af30 <CDC_ProcessReception+0x108>
           CDC_Handle->RxDataLength -= length ;
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	1ad2      	subs	r2, r2, r3
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	629a      	str	r2, [r3, #40]	; 0x28
           CDC_Handle->pRxData += length;
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	6a1a      	ldr	r2, [r3, #32]
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	441a      	add	r2, r3
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	621a      	str	r2, [r3, #32]
           if((icListen_rx_msg_basic_header->length+6)==(USB_RX_BUFF_SIZE-CDC_Handle->RxDataLength))
 800aebc:	4b29      	ldr	r3, [pc, #164]	; (800af64 <CDC_ProcessReception+0x13c>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	885b      	ldrh	r3, [r3, #2]
 800aec2:	b29b      	uxth	r3, r3
 800aec4:	3306      	adds	r3, #6
 800aec6:	461a      	mov	r2, r3
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aecc:	f5c3 635a 	rsb	r3, r3, #3488	; 0xda0
 800aed0:	330c      	adds	r3, #12
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d127      	bne.n	800af26 <CDC_ProcessReception+0xfe>
               CDC_Handle->data_rx_state = CDC_IDLE;
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	2200      	movs	r2, #0
 800aeda:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
               osMessagePut(USB_rxHandle, (uint8_t*)usb_rx_buff[usb_rx_buff_active], 0U);
 800aede:	4b22      	ldr	r3, [pc, #136]	; (800af68 <CDC_ProcessReception+0x140>)
 800aee0:	6818      	ldr	r0, [r3, #0]
 800aee2:	4b22      	ldr	r3, [pc, #136]	; (800af6c <CDC_ProcessReception+0x144>)
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	461a      	mov	r2, r3
 800aee8:	f640 53ac 	movw	r3, #3500	; 0xdac
 800aeec:	fb02 f303 	mul.w	r3, r2, r3
 800aef0:	4a1f      	ldr	r2, [pc, #124]	; (800af70 <CDC_ProcessReception+0x148>)
 800aef2:	4413      	add	r3, r2
 800aef4:	2200      	movs	r2, #0
 800aef6:	4619      	mov	r1, r3
 800aef8:	f006 fe62 	bl	8011bc0 <osMessagePut>
               usb_rx_buff_active++;
 800aefc:	4b1b      	ldr	r3, [pc, #108]	; (800af6c <CDC_ProcessReception+0x144>)
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	3301      	adds	r3, #1
 800af02:	b2da      	uxtb	r2, r3
 800af04:	4b19      	ldr	r3, [pc, #100]	; (800af6c <CDC_ProcessReception+0x144>)
 800af06:	701a      	strb	r2, [r3, #0]
               usb_rx_buff_active%=USB_RX_NUM_OF_BUFFERS;
 800af08:	4b18      	ldr	r3, [pc, #96]	; (800af6c <CDC_ProcessReception+0x144>)
 800af0a:	781a      	ldrb	r2, [r3, #0]
 800af0c:	4b19      	ldr	r3, [pc, #100]	; (800af74 <CDC_ProcessReception+0x14c>)
 800af0e:	fba3 1302 	umull	r1, r3, r3, r2
 800af12:	0899      	lsrs	r1, r3, #2
 800af14:	460b      	mov	r3, r1
 800af16:	005b      	lsls	r3, r3, #1
 800af18:	440b      	add	r3, r1
 800af1a:	005b      	lsls	r3, r3, #1
 800af1c:	1ad3      	subs	r3, r2, r3
 800af1e:	b2da      	uxtb	r2, r3
 800af20:	4b12      	ldr	r3, [pc, #72]	; (800af6c <CDC_ProcessReception+0x144>)
 800af22:	701a      	strb	r2, [r3, #0]
           if((icListen_rx_msg_basic_header->length+6)==(USB_RX_BUFF_SIZE-CDC_Handle->RxDataLength))
 800af24:	e00b      	b.n	800af3e <CDC_ProcessReception+0x116>
         	CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	2203      	movs	r2, #3
 800af2a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
           if((icListen_rx_msg_basic_header->length+6)==(USB_RX_BUFF_SIZE-CDC_Handle->RxDataLength))
 800af2e:	e006      	b.n	800af3e <CDC_ProcessReception+0x116>
           CDC_Handle->data_rx_state = CDC_IDLE;
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	2200      	movs	r2, #0
 800af34:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
           USBH_CDC_ReceiveCallback(phost);
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f009 f883 	bl	8014044 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2204      	movs	r2, #4
 800af42:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800af52:	2200      	movs	r2, #0
 800af54:	4619      	mov	r1, r3
 800af56:	f006 fe33 	bl	8011bc0 <osMessagePut>
      break;
 800af5a:	bf00      	nop
  }
}
 800af5c:	bf00      	nop
 800af5e:	3718      	adds	r7, #24
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}
 800af64:	20001e54 	.word	0x20001e54
 800af68:	200009ac 	.word	0x200009ac
 800af6c:	2000d42c 	.word	0x2000d42c
 800af70:	20008224 	.word	0x20008224
 800af74:	aaaaaaab 	.word	0xaaaaaaab

0800af78 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800af78:	b480      	push	{r7}
 800af7a:	b083      	sub	sp, #12
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800af80:	bf00      	nop
 800af82:	370c      	adds	r7, #12
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800af8c:	b5b0      	push	{r4, r5, r7, lr}
 800af8e:	b090      	sub	sp, #64	; 0x40
 800af90:	af00      	add	r7, sp, #0
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	4613      	mov	r3, r2
 800af98:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d101      	bne.n	800afa4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800afa0:	2302      	movs	r3, #2
 800afa2:	e04d      	b.n	800b040 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	79fa      	ldrb	r2, [r7, #7]
 800afa8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2200      	movs	r2, #0
 800afb0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800afbc:	68f8      	ldr	r0, [r7, #12]
 800afbe:	f000 f847 	bl	800b050 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2200      	movs	r2, #0
 800afc6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2200      	movs	r2, #0
 800afce:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	2200      	movs	r2, #0
 800afd6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2200      	movs	r2, #0
 800afde:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d003      	beq.n	800aff0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	68ba      	ldr	r2, [r7, #8]
 800afec:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800aff0:	4b15      	ldr	r3, [pc, #84]	; (800b048 <USBH_Init+0xbc>)
 800aff2:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800aff6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aff8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800affc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b000:	2100      	movs	r1, #0
 800b002:	4618      	mov	r0, r3
 800b004:	f006 fdb3 	bl	8011b6e <osMessageCreate>
 800b008:	4602      	mov	r2, r0
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800b010:	4b0e      	ldr	r3, [pc, #56]	; (800b04c <USBH_Init+0xc0>)
 800b012:	f107 0414 	add.w	r4, r7, #20
 800b016:	461d      	mov	r5, r3
 800b018:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b01a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b01c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b020:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800b024:	f107 0314 	add.w	r3, r7, #20
 800b028:	68f9      	ldr	r1, [r7, #12]
 800b02a:	4618      	mov	r0, r3
 800b02c:	f006 fd3f 	bl	8011aae <osThreadCreate>
 800b030:	4602      	mov	r2, r0
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800b038:	68f8      	ldr	r0, [r7, #12]
 800b03a:	f009 f921 	bl	8014280 <USBH_LL_Init>

  return USBH_OK;
 800b03e:	2300      	movs	r3, #0
}
 800b040:	4618      	mov	r0, r3
 800b042:	3740      	adds	r7, #64	; 0x40
 800b044:	46bd      	mov	sp, r7
 800b046:	bdb0      	pop	{r4, r5, r7, pc}
 800b048:	080173f0 	.word	0x080173f0
 800b04c:	08017400 	.word	0x08017400

0800b050 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b050:	b480      	push	{r7}
 800b052:	b085      	sub	sp, #20
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b058:	2300      	movs	r3, #0
 800b05a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b05c:	2300      	movs	r3, #0
 800b05e:	60fb      	str	r3, [r7, #12]
 800b060:	e009      	b.n	800b076 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b062:	687a      	ldr	r2, [r7, #4]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	33e0      	adds	r3, #224	; 0xe0
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	4413      	add	r3, r2
 800b06c:	2200      	movs	r2, #0
 800b06e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	3301      	adds	r3, #1
 800b074:	60fb      	str	r3, [r7, #12]
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2b0f      	cmp	r3, #15
 800b07a:	d9f2      	bls.n	800b062 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b07c:	2300      	movs	r3, #0
 800b07e:	60fb      	str	r3, [r7, #12]
 800b080:	e009      	b.n	800b096 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b082:	687a      	ldr	r2, [r7, #4]
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	4413      	add	r3, r2
 800b088:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b08c:	2200      	movs	r2, #0
 800b08e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	3301      	adds	r3, #1
 800b094:	60fb      	str	r3, [r7, #12]
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b09c:	d3f1      	bcc.n	800b082 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2240      	movs	r2, #64	; 0x40
 800b0c2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800b0ea:	2300      	movs	r3, #0
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3714      	adds	r7, #20
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f6:	4770      	bx	lr

0800b0f8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b085      	sub	sp, #20
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b102:	2300      	movs	r3, #0
 800b104:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d016      	beq.n	800b13a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b112:	2b00      	cmp	r3, #0
 800b114:	d10e      	bne.n	800b134 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b11c:	1c59      	adds	r1, r3, #1
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b124:	687a      	ldr	r2, [r7, #4]
 800b126:	33de      	adds	r3, #222	; 0xde
 800b128:	6839      	ldr	r1, [r7, #0]
 800b12a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b12e:	2300      	movs	r3, #0
 800b130:	73fb      	strb	r3, [r7, #15]
 800b132:	e004      	b.n	800b13e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b134:	2302      	movs	r3, #2
 800b136:	73fb      	strb	r3, [r7, #15]
 800b138:	e001      	b.n	800b13e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b13a:	2302      	movs	r3, #2
 800b13c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b140:	4618      	mov	r0, r3
 800b142:	3714      	adds	r7, #20
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr

0800b14c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b085      	sub	sp, #20
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	460b      	mov	r3, r1
 800b156:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b158:	2300      	movs	r3, #0
 800b15a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b162:	78fa      	ldrb	r2, [r7, #3]
 800b164:	429a      	cmp	r2, r3
 800b166:	d204      	bcs.n	800b172 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	78fa      	ldrb	r2, [r7, #3]
 800b16c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b170:	e001      	b.n	800b176 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b172:	2302      	movs	r3, #2
 800b174:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b176:	7bfb      	ldrb	r3, [r7, #15]
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3714      	adds	r7, #20
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr

0800b184 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b184:	b480      	push	{r7}
 800b186:	b087      	sub	sp, #28
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	4608      	mov	r0, r1
 800b18e:	4611      	mov	r1, r2
 800b190:	461a      	mov	r2, r3
 800b192:	4603      	mov	r3, r0
 800b194:	70fb      	strb	r3, [r7, #3]
 800b196:	460b      	mov	r3, r1
 800b198:	70bb      	strb	r3, [r7, #2]
 800b19a:	4613      	mov	r3, r2
 800b19c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b1ac:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b1ae:	e025      	b.n	800b1fc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b1b0:	7dfb      	ldrb	r3, [r7, #23]
 800b1b2:	221a      	movs	r2, #26
 800b1b4:	fb02 f303 	mul.w	r3, r2, r3
 800b1b8:	3308      	adds	r3, #8
 800b1ba:	68fa      	ldr	r2, [r7, #12]
 800b1bc:	4413      	add	r3, r2
 800b1be:	3302      	adds	r3, #2
 800b1c0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	795b      	ldrb	r3, [r3, #5]
 800b1c6:	78fa      	ldrb	r2, [r7, #3]
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d002      	beq.n	800b1d2 <USBH_FindInterface+0x4e>
 800b1cc:	78fb      	ldrb	r3, [r7, #3]
 800b1ce:	2bff      	cmp	r3, #255	; 0xff
 800b1d0:	d111      	bne.n	800b1f6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b1d6:	78ba      	ldrb	r2, [r7, #2]
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d002      	beq.n	800b1e2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b1dc:	78bb      	ldrb	r3, [r7, #2]
 800b1de:	2bff      	cmp	r3, #255	; 0xff
 800b1e0:	d109      	bne.n	800b1f6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b1e6:	787a      	ldrb	r2, [r7, #1]
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d002      	beq.n	800b1f2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b1ec:	787b      	ldrb	r3, [r7, #1]
 800b1ee:	2bff      	cmp	r3, #255	; 0xff
 800b1f0:	d101      	bne.n	800b1f6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b1f2:	7dfb      	ldrb	r3, [r7, #23]
 800b1f4:	e006      	b.n	800b204 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b1f6:	7dfb      	ldrb	r3, [r7, #23]
 800b1f8:	3301      	adds	r3, #1
 800b1fa:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b1fc:	7dfb      	ldrb	r3, [r7, #23]
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	d9d6      	bls.n	800b1b0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b202:	23ff      	movs	r3, #255	; 0xff
}
 800b204:	4618      	mov	r0, r3
 800b206:	371c      	adds	r7, #28
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr

0800b210 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b082      	sub	sp, #8
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f009 f86d 	bl	80142f8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800b21e:	2101      	movs	r1, #1
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f009 f986 	bl	8014532 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b226:	2300      	movs	r3, #0
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3708      	adds	r7, #8
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b088      	sub	sp, #32
 800b234:	af04      	add	r7, sp, #16
 800b236:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b238:	2302      	movs	r3, #2
 800b23a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b23c:	2300      	movs	r3, #0
 800b23e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b246:	b2db      	uxtb	r3, r3
 800b248:	2b01      	cmp	r3, #1
 800b24a:	d102      	bne.n	800b252 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2203      	movs	r2, #3
 800b250:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	b2db      	uxtb	r3, r3
 800b258:	2b0b      	cmp	r3, #11
 800b25a:	f200 8247 	bhi.w	800b6ec <USBH_Process+0x4bc>
 800b25e:	a201      	add	r2, pc, #4	; (adr r2, 800b264 <USBH_Process+0x34>)
 800b260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b264:	0800b295 	.word	0x0800b295
 800b268:	0800b2e3 	.word	0x0800b2e3
 800b26c:	0800b367 	.word	0x0800b367
 800b270:	0800b66b 	.word	0x0800b66b
 800b274:	0800b6ed 	.word	0x0800b6ed
 800b278:	0800b427 	.word	0x0800b427
 800b27c:	0800b5f5 	.word	0x0800b5f5
 800b280:	0800b479 	.word	0x0800b479
 800b284:	0800b4b5 	.word	0x0800b4b5
 800b288:	0800b4ef 	.word	0x0800b4ef
 800b28c:	0800b54d 	.word	0x0800b54d
 800b290:	0800b653 	.word	0x0800b653
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b29a:	b2db      	uxtb	r3, r3
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	f000 8227 	beq.w	800b6f0 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2201      	movs	r2, #1
 800b2a6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b2a8:	20c8      	movs	r0, #200	; 0xc8
 800b2aa:	f009 f989 	bl	80145c0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f009 f87f 	bl	80143b2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b2d8:	2200      	movs	r2, #0
 800b2da:	4619      	mov	r1, r3
 800b2dc:	f006 fc70 	bl	8011bc0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b2e0:	e206      	b.n	800b6f0 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d107      	bne.n	800b2fc <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2202      	movs	r2, #2
 800b2f8:	701a      	strb	r2, [r3, #0]
 800b2fa:	e025      	b.n	800b348 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b302:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b306:	d914      	bls.n	800b332 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b30e:	3301      	adds	r3, #1
 800b310:	b2da      	uxtb	r2, r3
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b31e:	2b03      	cmp	r3, #3
 800b320:	d903      	bls.n	800b32a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	220d      	movs	r2, #13
 800b326:	701a      	strb	r2, [r3, #0]
 800b328:	e00e      	b.n	800b348 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2200      	movs	r2, #0
 800b32e:	701a      	strb	r2, [r3, #0]
 800b330:	e00a      	b.n	800b348 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b338:	f103 020a 	add.w	r2, r3, #10
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b342:	200a      	movs	r0, #10
 800b344:	f009 f93c 	bl	80145c0 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2201      	movs	r2, #1
 800b34c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b35c:	2200      	movs	r2, #0
 800b35e:	4619      	mov	r1, r3
 800b360:	f006 fc2e 	bl	8011bc0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b364:	e1cb      	b.n	800b6fe <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d005      	beq.n	800b37c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b376:	2104      	movs	r1, #4
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b37c:	2064      	movs	r0, #100	; 0x64
 800b37e:	f009 f91f 	bl	80145c0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f008 ffee 	bl	8014364 <USBH_LL_GetSpeed>
 800b388:	4603      	mov	r3, r0
 800b38a:	461a      	mov	r2, r3
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2205      	movs	r2, #5
 800b396:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b398:	2100      	movs	r1, #0
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f001 fc17 	bl	800cbce <USBH_AllocPipe>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b3a8:	2180      	movs	r1, #128	; 0x80
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f001 fc0f 	bl	800cbce <USBH_AllocPipe>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	7919      	ldrb	r1, [r3, #4]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b3cc:	b292      	uxth	r2, r2
 800b3ce:	9202      	str	r2, [sp, #8]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	9201      	str	r2, [sp, #4]
 800b3d4:	9300      	str	r3, [sp, #0]
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	2280      	movs	r2, #128	; 0x80
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f001 fbc8 	bl	800cb70 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	7959      	ldrb	r1, [r3, #5]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b3f4:	b292      	uxth	r2, r2
 800b3f6:	9202      	str	r2, [sp, #8]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	9201      	str	r2, [sp, #4]
 800b3fc:	9300      	str	r3, [sp, #0]
 800b3fe:	4603      	mov	r3, r0
 800b400:	2200      	movs	r2, #0
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f001 fbb4 	bl	800cb70 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2201      	movs	r2, #1
 800b40c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b41c:	2200      	movs	r2, #0
 800b41e:	4619      	mov	r1, r3
 800b420:	f006 fbce 	bl	8011bc0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b424:	e16b      	b.n	800b6fe <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f000 f96e 	bl	800b708 <USBH_HandleEnum>
 800b42c:	4603      	mov	r3, r0
 800b42e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b430:	7bbb      	ldrb	r3, [r7, #14]
 800b432:	b2db      	uxtb	r3, r3
 800b434:	2b00      	cmp	r3, #0
 800b436:	f040 815d 	bne.w	800b6f4 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2200      	movs	r2, #0
 800b43e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d103      	bne.n	800b454 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2208      	movs	r2, #8
 800b450:	701a      	strb	r2, [r3, #0]
 800b452:	e002      	b.n	800b45a <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2207      	movs	r2, #7
 800b458:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2205      	movs	r2, #5
 800b45e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b46e:	2200      	movs	r2, #0
 800b470:	4619      	mov	r1, r3
 800b472:	f006 fba5 	bl	8011bc0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b476:	e13d      	b.n	800b6f4 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b47e:	2b00      	cmp	r3, #0
 800b480:	f000 813a 	beq.w	800b6f8 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b48a:	2101      	movs	r1, #1
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2208      	movs	r2, #8
 800b494:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2205      	movs	r2, #5
 800b49a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	f006 fb87 	bl	8011bc0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800b4b2:	e121      	b.n	800b6f8 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	4619      	mov	r1, r3
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 fd00 	bl	800bec4 <USBH_SetCfg>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d102      	bne.n	800b4d0 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2209      	movs	r2, #9
 800b4ce:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	f006 fb6a 	bl	8011bc0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b4ec:	e107      	b.n	800b6fe <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b4f4:	f003 0320 	and.w	r3, r3, #32
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d015      	beq.n	800b528 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b4fc:	2101      	movs	r1, #1
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 fd03 	bl	800bf0a <USBH_SetFeature>
 800b504:	4603      	mov	r3, r0
 800b506:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b508:	7bbb      	ldrb	r3, [r7, #14]
 800b50a:	b2db      	uxtb	r3, r3
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d103      	bne.n	800b518 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	220a      	movs	r2, #10
 800b514:	701a      	strb	r2, [r3, #0]
 800b516:	e00a      	b.n	800b52e <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800b518:	7bbb      	ldrb	r3, [r7, #14]
 800b51a:	b2db      	uxtb	r3, r3
 800b51c:	2b03      	cmp	r3, #3
 800b51e:	d106      	bne.n	800b52e <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	220a      	movs	r2, #10
 800b524:	701a      	strb	r2, [r3, #0]
 800b526:	e002      	b.n	800b52e <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	220a      	movs	r2, #10
 800b52c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2201      	movs	r2, #1
 800b532:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b542:	2200      	movs	r2, #0
 800b544:	4619      	mov	r1, r3
 800b546:	f006 fb3b 	bl	8011bc0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b54a:	e0d8      	b.n	800b6fe <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b552:	2b00      	cmp	r3, #0
 800b554:	d03f      	beq.n	800b5d6 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2200      	movs	r2, #0
 800b55a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b55e:	2300      	movs	r3, #0
 800b560:	73fb      	strb	r3, [r7, #15]
 800b562:	e016      	b.n	800b592 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b564:	7bfa      	ldrb	r2, [r7, #15]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	32de      	adds	r2, #222	; 0xde
 800b56a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b56e:	791a      	ldrb	r2, [r3, #4]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b576:	429a      	cmp	r2, r3
 800b578:	d108      	bne.n	800b58c <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b57a:	7bfa      	ldrb	r2, [r7, #15]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	32de      	adds	r2, #222	; 0xde
 800b580:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b58a:	e005      	b.n	800b598 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b58c:	7bfb      	ldrb	r3, [r7, #15]
 800b58e:	3301      	adds	r3, #1
 800b590:	73fb      	strb	r3, [r7, #15]
 800b592:	7bfb      	ldrb	r3, [r7, #15]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d0e5      	beq.n	800b564 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d016      	beq.n	800b5d0 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5a8:	689b      	ldr	r3, [r3, #8]
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	4798      	blx	r3
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d109      	bne.n	800b5c8 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2206      	movs	r2, #6
 800b5b8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b5c0:	2103      	movs	r1, #3
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	4798      	blx	r3
 800b5c6:	e006      	b.n	800b5d6 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	220d      	movs	r2, #13
 800b5cc:	701a      	strb	r2, [r3, #0]
 800b5ce:	e002      	b.n	800b5d6 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	220d      	movs	r2, #13
 800b5d4:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2205      	movs	r2, #5
 800b5da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	4619      	mov	r1, r3
 800b5ee:	f006 fae7 	bl	8011bc0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b5f2:	e084      	b.n	800b6fe <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d017      	beq.n	800b62e <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b604:	691b      	ldr	r3, [r3, #16]
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	4798      	blx	r3
 800b60a:	4603      	mov	r3, r0
 800b60c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b60e:	7bbb      	ldrb	r3, [r7, #14]
 800b610:	b2db      	uxtb	r3, r3
 800b612:	2b00      	cmp	r3, #0
 800b614:	d103      	bne.n	800b61e <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	220b      	movs	r2, #11
 800b61a:	701a      	strb	r2, [r3, #0]
 800b61c:	e00a      	b.n	800b634 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 800b61e:	7bbb      	ldrb	r3, [r7, #14]
 800b620:	b2db      	uxtb	r3, r3
 800b622:	2b02      	cmp	r3, #2
 800b624:	d106      	bne.n	800b634 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	220d      	movs	r2, #13
 800b62a:	701a      	strb	r2, [r3, #0]
 800b62c:	e002      	b.n	800b634 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	220d      	movs	r2, #13
 800b632:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2205      	movs	r2, #5
 800b638:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b648:	2200      	movs	r2, #0
 800b64a:	4619      	mov	r1, r3
 800b64c:	f006 fab8 	bl	8011bc0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b650:	e055      	b.n	800b6fe <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d04f      	beq.n	800b6fc <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b662:	695b      	ldr	r3, [r3, #20]
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	4798      	blx	r3
      }
      break;
 800b668:	e048      	b.n	800b6fc <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2200      	movs	r2, #0
 800b66e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f7ff fcec 	bl	800b050 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d009      	beq.n	800b696 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b688:	68db      	ldr	r3, [r3, #12]
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2200      	movs	r2, #0
 800b692:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d005      	beq.n	800b6ac <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b6a6:	2105      	movs	r1, #5
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d107      	bne.n	800b6c8 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f7ff fda5 	bl	800b210 <USBH_Start>
 800b6c6:	e002      	b.n	800b6ce <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f008 fe15 	bl	80142f8 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2201      	movs	r2, #1
 800b6d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	f006 fa6b 	bl	8011bc0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b6ea:	e008      	b.n	800b6fe <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 800b6ec:	bf00      	nop
 800b6ee:	e006      	b.n	800b6fe <USBH_Process+0x4ce>
      break;
 800b6f0:	bf00      	nop
 800b6f2:	e004      	b.n	800b6fe <USBH_Process+0x4ce>
      break;
 800b6f4:	bf00      	nop
 800b6f6:	e002      	b.n	800b6fe <USBH_Process+0x4ce>
    break;
 800b6f8:	bf00      	nop
 800b6fa:	e000      	b.n	800b6fe <USBH_Process+0x4ce>
      break;
 800b6fc:	bf00      	nop
  }
  return USBH_OK;
 800b6fe:	2300      	movs	r3, #0
}
 800b700:	4618      	mov	r0, r3
 800b702:	3710      	adds	r7, #16
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b088      	sub	sp, #32
 800b70c:	af04      	add	r7, sp, #16
 800b70e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b710:	2301      	movs	r3, #1
 800b712:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b714:	2301      	movs	r3, #1
 800b716:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	785b      	ldrb	r3, [r3, #1]
 800b71c:	2b07      	cmp	r3, #7
 800b71e:	f200 8208 	bhi.w	800bb32 <USBH_HandleEnum+0x42a>
 800b722:	a201      	add	r2, pc, #4	; (adr r2, 800b728 <USBH_HandleEnum+0x20>)
 800b724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b728:	0800b749 	.word	0x0800b749
 800b72c:	0800b807 	.word	0x0800b807
 800b730:	0800b871 	.word	0x0800b871
 800b734:	0800b8ff 	.word	0x0800b8ff
 800b738:	0800b969 	.word	0x0800b969
 800b73c:	0800b9d9 	.word	0x0800b9d9
 800b740:	0800ba75 	.word	0x0800ba75
 800b744:	0800baf3 	.word	0x0800baf3
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b748:	2108      	movs	r1, #8
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 faea 	bl	800bd24 <USBH_Get_DevDesc>
 800b750:	4603      	mov	r3, r0
 800b752:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b754:	7bbb      	ldrb	r3, [r7, #14]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d130      	bne.n	800b7bc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2201      	movs	r2, #1
 800b768:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	7919      	ldrb	r1, [r3, #4]
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b77a:	687a      	ldr	r2, [r7, #4]
 800b77c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b77e:	b292      	uxth	r2, r2
 800b780:	9202      	str	r2, [sp, #8]
 800b782:	2200      	movs	r2, #0
 800b784:	9201      	str	r2, [sp, #4]
 800b786:	9300      	str	r3, [sp, #0]
 800b788:	4603      	mov	r3, r0
 800b78a:	2280      	movs	r2, #128	; 0x80
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f001 f9ef 	bl	800cb70 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	7959      	ldrb	r1, [r3, #5]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b7a2:	687a      	ldr	r2, [r7, #4]
 800b7a4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b7a6:	b292      	uxth	r2, r2
 800b7a8:	9202      	str	r2, [sp, #8]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	9201      	str	r2, [sp, #4]
 800b7ae:	9300      	str	r3, [sp, #0]
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f001 f9db 	bl	800cb70 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b7ba:	e1bc      	b.n	800bb36 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b7bc:	7bbb      	ldrb	r3, [r7, #14]
 800b7be:	2b03      	cmp	r3, #3
 800b7c0:	f040 81b9 	bne.w	800bb36 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b7ca:	3301      	adds	r3, #1
 800b7cc:	b2da      	uxtb	r2, r3
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b7da:	2b03      	cmp	r3, #3
 800b7dc:	d903      	bls.n	800b7e6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	220d      	movs	r2, #13
 800b7e2:	701a      	strb	r2, [r3, #0]
      break;
 800b7e4:	e1a7      	b.n	800bb36 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	795b      	ldrb	r3, [r3, #5]
 800b7ea:	4619      	mov	r1, r3
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f001 fa0f 	bl	800cc10 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	791b      	ldrb	r3, [r3, #4]
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f001 fa09 	bl	800cc10 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2200      	movs	r2, #0
 800b802:	701a      	strb	r2, [r3, #0]
      break;
 800b804:	e197      	b.n	800bb36 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b806:	2112      	movs	r1, #18
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 fa8b 	bl	800bd24 <USBH_Get_DevDesc>
 800b80e:	4603      	mov	r3, r0
 800b810:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b812:	7bbb      	ldrb	r3, [r7, #14]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d103      	bne.n	800b820 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2202      	movs	r2, #2
 800b81c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b81e:	e18c      	b.n	800bb3a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b820:	7bbb      	ldrb	r3, [r7, #14]
 800b822:	2b03      	cmp	r3, #3
 800b824:	f040 8189 	bne.w	800bb3a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b82e:	3301      	adds	r3, #1
 800b830:	b2da      	uxtb	r2, r3
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b83e:	2b03      	cmp	r3, #3
 800b840:	d903      	bls.n	800b84a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	220d      	movs	r2, #13
 800b846:	701a      	strb	r2, [r3, #0]
      break;
 800b848:	e177      	b.n	800bb3a <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	795b      	ldrb	r3, [r3, #5]
 800b84e:	4619      	mov	r1, r3
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f001 f9dd 	bl	800cc10 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	791b      	ldrb	r3, [r3, #4]
 800b85a:	4619      	mov	r1, r3
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f001 f9d7 	bl	800cc10 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2200      	movs	r2, #0
 800b866:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2200      	movs	r2, #0
 800b86c:	701a      	strb	r2, [r3, #0]
      break;
 800b86e:	e164      	b.n	800bb3a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b870:	2101      	movs	r1, #1
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f000 fb02 	bl	800be7c <USBH_SetAddress>
 800b878:	4603      	mov	r3, r0
 800b87a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b87c:	7bbb      	ldrb	r3, [r7, #14]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d132      	bne.n	800b8e8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b882:	2002      	movs	r0, #2
 800b884:	f008 fe9c 	bl	80145c0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2201      	movs	r2, #1
 800b88c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2203      	movs	r2, #3
 800b894:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	7919      	ldrb	r1, [r3, #4]
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b8aa:	b292      	uxth	r2, r2
 800b8ac:	9202      	str	r2, [sp, #8]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	9201      	str	r2, [sp, #4]
 800b8b2:	9300      	str	r3, [sp, #0]
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	2280      	movs	r2, #128	; 0x80
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f001 f959 	bl	800cb70 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	7959      	ldrb	r1, [r3, #5]
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b8ce:	687a      	ldr	r2, [r7, #4]
 800b8d0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b8d2:	b292      	uxth	r2, r2
 800b8d4:	9202      	str	r2, [sp, #8]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	9201      	str	r2, [sp, #4]
 800b8da:	9300      	str	r3, [sp, #0]
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2200      	movs	r2, #0
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f001 f945 	bl	800cb70 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b8e6:	e12a      	b.n	800bb3e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b8e8:	7bbb      	ldrb	r3, [r7, #14]
 800b8ea:	2b03      	cmp	r3, #3
 800b8ec:	f040 8127 	bne.w	800bb3e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	220d      	movs	r2, #13
 800b8f4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	705a      	strb	r2, [r3, #1]
      break;
 800b8fc:	e11f      	b.n	800bb3e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b8fe:	2109      	movs	r1, #9
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f000 fa37 	bl	800bd74 <USBH_Get_CfgDesc>
 800b906:	4603      	mov	r3, r0
 800b908:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b90a:	7bbb      	ldrb	r3, [r7, #14]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d103      	bne.n	800b918 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2204      	movs	r2, #4
 800b914:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b916:	e114      	b.n	800bb42 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b918:	7bbb      	ldrb	r3, [r7, #14]
 800b91a:	2b03      	cmp	r3, #3
 800b91c:	f040 8111 	bne.w	800bb42 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b926:	3301      	adds	r3, #1
 800b928:	b2da      	uxtb	r2, r3
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b936:	2b03      	cmp	r3, #3
 800b938:	d903      	bls.n	800b942 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	220d      	movs	r2, #13
 800b93e:	701a      	strb	r2, [r3, #0]
      break;
 800b940:	e0ff      	b.n	800bb42 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	795b      	ldrb	r3, [r3, #5]
 800b946:	4619      	mov	r1, r3
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f001 f961 	bl	800cc10 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	791b      	ldrb	r3, [r3, #4]
 800b952:	4619      	mov	r1, r3
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f001 f95b 	bl	800cc10 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2200      	movs	r2, #0
 800b95e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2200      	movs	r2, #0
 800b964:	701a      	strb	r2, [r3, #0]
      break;
 800b966:	e0ec      	b.n	800bb42 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b96e:	4619      	mov	r1, r3
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 f9ff 	bl	800bd74 <USBH_Get_CfgDesc>
 800b976:	4603      	mov	r3, r0
 800b978:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b97a:	7bbb      	ldrb	r3, [r7, #14]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d103      	bne.n	800b988 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2205      	movs	r2, #5
 800b984:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b986:	e0de      	b.n	800bb46 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b988:	7bbb      	ldrb	r3, [r7, #14]
 800b98a:	2b03      	cmp	r3, #3
 800b98c:	f040 80db 	bne.w	800bb46 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b996:	3301      	adds	r3, #1
 800b998:	b2da      	uxtb	r2, r3
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b9a6:	2b03      	cmp	r3, #3
 800b9a8:	d903      	bls.n	800b9b2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	220d      	movs	r2, #13
 800b9ae:	701a      	strb	r2, [r3, #0]
      break;
 800b9b0:	e0c9      	b.n	800bb46 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	795b      	ldrb	r3, [r3, #5]
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f001 f929 	bl	800cc10 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	791b      	ldrb	r3, [r3, #4]
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f001 f923 	bl	800cc10 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	701a      	strb	r2, [r3, #0]
      break;
 800b9d6:	e0b6      	b.n	800bb46 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d036      	beq.n	800ba50 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b9ee:	23ff      	movs	r3, #255	; 0xff
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 f9e3 	bl	800bdbc <USBH_Get_StringDesc>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b9fa:	7bbb      	ldrb	r3, [r7, #14]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d111      	bne.n	800ba24 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2206      	movs	r2, #6
 800ba04:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2205      	movs	r2, #5
 800ba0a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	f006 f8cf 	bl	8011bc0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ba22:	e092      	b.n	800bb4a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ba24:	7bbb      	ldrb	r3, [r7, #14]
 800ba26:	2b03      	cmp	r3, #3
 800ba28:	f040 808f 	bne.w	800bb4a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2206      	movs	r2, #6
 800ba30:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2205      	movs	r2, #5
 800ba36:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ba46:	2200      	movs	r2, #0
 800ba48:	4619      	mov	r1, r3
 800ba4a:	f006 f8b9 	bl	8011bc0 <osMessagePut>
      break;
 800ba4e:	e07c      	b.n	800bb4a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2206      	movs	r2, #6
 800ba54:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2205      	movs	r2, #5
 800ba5a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	4619      	mov	r1, r3
 800ba6e:	f006 f8a7 	bl	8011bc0 <osMessagePut>
      break;
 800ba72:	e06a      	b.n	800bb4a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d027      	beq.n	800bace <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ba8a:	23ff      	movs	r3, #255	; 0xff
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 f995 	bl	800bdbc <USBH_Get_StringDesc>
 800ba92:	4603      	mov	r3, r0
 800ba94:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ba96:	7bbb      	ldrb	r3, [r7, #14]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d103      	bne.n	800baa4 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2207      	movs	r2, #7
 800baa0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800baa2:	e054      	b.n	800bb4e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800baa4:	7bbb      	ldrb	r3, [r7, #14]
 800baa6:	2b03      	cmp	r3, #3
 800baa8:	d151      	bne.n	800bb4e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2207      	movs	r2, #7
 800baae:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2205      	movs	r2, #5
 800bab4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bac4:	2200      	movs	r2, #0
 800bac6:	4619      	mov	r1, r3
 800bac8:	f006 f87a 	bl	8011bc0 <osMessagePut>
      break;
 800bacc:	e03f      	b.n	800bb4e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2207      	movs	r2, #7
 800bad2:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2205      	movs	r2, #5
 800bad8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bae8:	2200      	movs	r2, #0
 800baea:	4619      	mov	r1, r3
 800baec:	f006 f868 	bl	8011bc0 <osMessagePut>
      break;
 800baf0:	e02d      	b.n	800bb4e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d017      	beq.n	800bb2c <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bb08:	23ff      	movs	r3, #255	; 0xff
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 f956 	bl	800bdbc <USBH_Get_StringDesc>
 800bb10:	4603      	mov	r3, r0
 800bb12:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bb14:	7bbb      	ldrb	r3, [r7, #14]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d102      	bne.n	800bb20 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800bb1e:	e018      	b.n	800bb52 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bb20:	7bbb      	ldrb	r3, [r7, #14]
 800bb22:	2b03      	cmp	r3, #3
 800bb24:	d115      	bne.n	800bb52 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800bb26:	2300      	movs	r3, #0
 800bb28:	73fb      	strb	r3, [r7, #15]
      break;
 800bb2a:	e012      	b.n	800bb52 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	73fb      	strb	r3, [r7, #15]
      break;
 800bb30:	e00f      	b.n	800bb52 <USBH_HandleEnum+0x44a>

    default:
      break;
 800bb32:	bf00      	nop
 800bb34:	e00e      	b.n	800bb54 <USBH_HandleEnum+0x44c>
      break;
 800bb36:	bf00      	nop
 800bb38:	e00c      	b.n	800bb54 <USBH_HandleEnum+0x44c>
      break;
 800bb3a:	bf00      	nop
 800bb3c:	e00a      	b.n	800bb54 <USBH_HandleEnum+0x44c>
      break;
 800bb3e:	bf00      	nop
 800bb40:	e008      	b.n	800bb54 <USBH_HandleEnum+0x44c>
      break;
 800bb42:	bf00      	nop
 800bb44:	e006      	b.n	800bb54 <USBH_HandleEnum+0x44c>
      break;
 800bb46:	bf00      	nop
 800bb48:	e004      	b.n	800bb54 <USBH_HandleEnum+0x44c>
      break;
 800bb4a:	bf00      	nop
 800bb4c:	e002      	b.n	800bb54 <USBH_HandleEnum+0x44c>
      break;
 800bb4e:	bf00      	nop
 800bb50:	e000      	b.n	800bb54 <USBH_HandleEnum+0x44c>
      break;
 800bb52:	bf00      	nop
  }
  return Status;
 800bb54:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3710      	adds	r7, #16
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}
 800bb5e:	bf00      	nop

0800bb60 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b083      	sub	sp, #12
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
 800bb68:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	683a      	ldr	r2, [r7, #0]
 800bb6e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800bb72:	bf00      	nop
 800bb74:	370c      	adds	r7, #12
 800bb76:	46bd      	mov	sp, r7
 800bb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7c:	4770      	bx	lr

0800bb7e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800bb7e:	b580      	push	{r7, lr}
 800bb80:	b082      	sub	sp, #8
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bb8c:	1c5a      	adds	r2, r3, #1
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f000 f804 	bl	800bba2 <USBH_HandleSof>
}
 800bb9a:	bf00      	nop
 800bb9c:	3708      	adds	r7, #8
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}

0800bba2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800bba2:	b580      	push	{r7, lr}
 800bba4:	b082      	sub	sp, #8
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	2b0b      	cmp	r3, #11
 800bbb2:	d10a      	bne.n	800bbca <USBH_HandleSof+0x28>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d005      	beq.n	800bbca <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bbc4:	699b      	ldr	r3, [r3, #24]
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	4798      	blx	r3
  }
}
 800bbca:	bf00      	nop
 800bbcc:	3708      	adds	r7, #8
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}

0800bbd2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800bbd2:	b580      	push	{r7, lr}
 800bbd4:	b082      	sub	sp, #8
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2201      	movs	r2, #1
 800bbde:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	4619      	mov	r1, r3
 800bbfa:	f005 ffe1 	bl	8011bc0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800bbfe:	bf00      	nop
}
 800bc00:	3708      	adds	r7, #8
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}

0800bc06 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800bc06:	b480      	push	{r7}
 800bc08:	b083      	sub	sp, #12
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2200      	movs	r2, #0
 800bc12:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800bc16:	bf00      	nop
}
 800bc18:	370c      	adds	r7, #12
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr

0800bc22 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800bc22:	b580      	push	{r7, lr}
 800bc24:	b082      	sub	sp, #8
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2201      	movs	r2, #1
 800bc2e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2200      	movs	r2, #0
 800bc36:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2201      	movs	r2, #1
 800bc46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bc56:	2200      	movs	r2, #0
 800bc58:	4619      	mov	r1, r3
 800bc5a:	f005 ffb1 	bl	8011bc0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800bc5e:	2300      	movs	r3, #0
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3708      	adds	r7, #8
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b082      	sub	sp, #8
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2201      	movs	r2, #1
 800bc74:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2200      	movs	r2, #0
 800bc84:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f008 fb50 	bl	801432e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	791b      	ldrb	r3, [r3, #4]
 800bc92:	4619      	mov	r1, r3
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f000 ffbb 	bl	800cc10 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	795b      	ldrb	r3, [r3, #5]
 800bc9e:	4619      	mov	r1, r3
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f000 ffb5 	bl	800cc10 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2201      	movs	r2, #1
 800bcaa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bcba:	2200      	movs	r2, #0
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	f005 ff7f 	bl	8011bc0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800bcc2:	2300      	movs	r3, #0
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3708      	adds	r7, #8
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b086      	sub	sp, #24
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800bcda:	f107 030c 	add.w	r3, r7, #12
 800bcde:	f04f 32ff 	mov.w	r2, #4294967295
 800bce2:	4618      	mov	r0, r3
 800bce4:	f005 ffac 	bl	8011c40 <osMessageGet>
    if (event.status == osEventMessage)
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2b10      	cmp	r3, #16
 800bcec:	d1f2      	bne.n	800bcd4 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f7ff fa9e 	bl	800b230 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800bcf4:	e7ee      	b.n	800bcd4 <USBH_Process_OS+0x8>

0800bcf6 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800bcf6:	b580      	push	{r7, lr}
 800bcf8:	b082      	sub	sp, #8
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2201      	movs	r2, #1
 800bd02:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bd12:	2200      	movs	r2, #0
 800bd14:	4619      	mov	r1, r3
 800bd16:	f005 ff53 	bl	8011bc0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800bd1a:	2300      	movs	r3, #0
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3708      	adds	r7, #8
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b086      	sub	sp, #24
 800bd28:	af02      	add	r7, sp, #8
 800bd2a:	6078      	str	r0, [r7, #4]
 800bd2c:	460b      	mov	r3, r1
 800bd2e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800bd36:	78fb      	ldrb	r3, [r7, #3]
 800bd38:	b29b      	uxth	r3, r3
 800bd3a:	9300      	str	r3, [sp, #0]
 800bd3c:	4613      	mov	r3, r2
 800bd3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bd42:	2100      	movs	r1, #0
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f000 f864 	bl	800be12 <USBH_GetDescriptor>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800bd4e:	7bfb      	ldrb	r3, [r7, #15]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d10a      	bne.n	800bd6a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f203 3026 	addw	r0, r3, #806	; 0x326
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bd60:	78fa      	ldrb	r2, [r7, #3]
 800bd62:	b292      	uxth	r2, r2
 800bd64:	4619      	mov	r1, r3
 800bd66:	f000 f918 	bl	800bf9a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800bd6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3710      	adds	r7, #16
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}

0800bd74 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b086      	sub	sp, #24
 800bd78:	af02      	add	r7, sp, #8
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	460b      	mov	r3, r1
 800bd7e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	331c      	adds	r3, #28
 800bd84:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800bd86:	887b      	ldrh	r3, [r7, #2]
 800bd88:	9300      	str	r3, [sp, #0]
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd90:	2100      	movs	r1, #0
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f000 f83d 	bl	800be12 <USBH_GetDescriptor>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800bd9c:	7bfb      	ldrb	r3, [r7, #15]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d107      	bne.n	800bdb2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800bda2:	887b      	ldrh	r3, [r7, #2]
 800bda4:	461a      	mov	r2, r3
 800bda6:	68b9      	ldr	r1, [r7, #8]
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f000 f987 	bl	800c0bc <USBH_ParseCfgDesc>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bdb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3710      	adds	r7, #16
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}

0800bdbc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b088      	sub	sp, #32
 800bdc0:	af02      	add	r7, sp, #8
 800bdc2:	60f8      	str	r0, [r7, #12]
 800bdc4:	607a      	str	r2, [r7, #4]
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	460b      	mov	r3, r1
 800bdca:	72fb      	strb	r3, [r7, #11]
 800bdcc:	4613      	mov	r3, r2
 800bdce:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800bdd0:	7afb      	ldrb	r3, [r7, #11]
 800bdd2:	b29b      	uxth	r3, r3
 800bdd4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800bdd8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800bde0:	893b      	ldrh	r3, [r7, #8]
 800bde2:	9300      	str	r3, [sp, #0]
 800bde4:	460b      	mov	r3, r1
 800bde6:	2100      	movs	r1, #0
 800bde8:	68f8      	ldr	r0, [r7, #12]
 800bdea:	f000 f812 	bl	800be12 <USBH_GetDescriptor>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800bdf2:	7dfb      	ldrb	r3, [r7, #23]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d107      	bne.n	800be08 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bdfe:	893a      	ldrh	r2, [r7, #8]
 800be00:	6879      	ldr	r1, [r7, #4]
 800be02:	4618      	mov	r0, r3
 800be04:	f000 fb24 	bl	800c450 <USBH_ParseStringDesc>
  }

  return status;
 800be08:	7dfb      	ldrb	r3, [r7, #23]
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3718      	adds	r7, #24
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b084      	sub	sp, #16
 800be16:	af00      	add	r7, sp, #0
 800be18:	60f8      	str	r0, [r7, #12]
 800be1a:	607b      	str	r3, [r7, #4]
 800be1c:	460b      	mov	r3, r1
 800be1e:	72fb      	strb	r3, [r7, #11]
 800be20:	4613      	mov	r3, r2
 800be22:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	789b      	ldrb	r3, [r3, #2]
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d11c      	bne.n	800be66 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800be2c:	7afb      	ldrb	r3, [r7, #11]
 800be2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800be32:	b2da      	uxtb	r2, r3
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2206      	movs	r2, #6
 800be3c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	893a      	ldrh	r2, [r7, #8]
 800be42:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800be44:	893b      	ldrh	r3, [r7, #8]
 800be46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800be4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be4e:	d104      	bne.n	800be5a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	f240 4209 	movw	r2, #1033	; 0x409
 800be56:	829a      	strh	r2, [r3, #20]
 800be58:	e002      	b.n	800be60 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	2200      	movs	r2, #0
 800be5e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	8b3a      	ldrh	r2, [r7, #24]
 800be64:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800be66:	8b3b      	ldrh	r3, [r7, #24]
 800be68:	461a      	mov	r2, r3
 800be6a:	6879      	ldr	r1, [r7, #4]
 800be6c:	68f8      	ldr	r0, [r7, #12]
 800be6e:	f000 fb3d 	bl	800c4ec <USBH_CtlReq>
 800be72:	4603      	mov	r3, r0
}
 800be74:	4618      	mov	r0, r3
 800be76:	3710      	adds	r7, #16
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b082      	sub	sp, #8
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
 800be84:	460b      	mov	r3, r1
 800be86:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	789b      	ldrb	r3, [r3, #2]
 800be8c:	2b01      	cmp	r3, #1
 800be8e:	d10f      	bne.n	800beb0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2200      	movs	r2, #0
 800be94:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2205      	movs	r2, #5
 800be9a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800be9c:	78fb      	ldrb	r3, [r7, #3]
 800be9e:	b29a      	uxth	r2, r3
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2200      	movs	r2, #0
 800bea8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2200      	movs	r2, #0
 800beae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800beb0:	2200      	movs	r2, #0
 800beb2:	2100      	movs	r1, #0
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f000 fb19 	bl	800c4ec <USBH_CtlReq>
 800beba:	4603      	mov	r3, r0
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3708      	adds	r7, #8
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b082      	sub	sp, #8
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	460b      	mov	r3, r1
 800bece:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	789b      	ldrb	r3, [r3, #2]
 800bed4:	2b01      	cmp	r3, #1
 800bed6:	d10e      	bne.n	800bef6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2200      	movs	r2, #0
 800bedc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2209      	movs	r2, #9
 800bee2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	887a      	ldrh	r2, [r7, #2]
 800bee8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2200      	movs	r2, #0
 800beee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2200      	movs	r2, #0
 800bef4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bef6:	2200      	movs	r2, #0
 800bef8:	2100      	movs	r1, #0
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 faf6 	bl	800c4ec <USBH_CtlReq>
 800bf00:	4603      	mov	r3, r0
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3708      	adds	r7, #8
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}

0800bf0a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800bf0a:	b580      	push	{r7, lr}
 800bf0c:	b082      	sub	sp, #8
 800bf0e:	af00      	add	r7, sp, #0
 800bf10:	6078      	str	r0, [r7, #4]
 800bf12:	460b      	mov	r3, r1
 800bf14:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	789b      	ldrb	r3, [r3, #2]
 800bf1a:	2b01      	cmp	r3, #1
 800bf1c:	d10f      	bne.n	800bf3e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2200      	movs	r2, #0
 800bf22:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2203      	movs	r2, #3
 800bf28:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800bf2a:	78fb      	ldrb	r3, [r7, #3]
 800bf2c:	b29a      	uxth	r2, r3
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2200      	movs	r2, #0
 800bf36:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bf3e:	2200      	movs	r2, #0
 800bf40:	2100      	movs	r1, #0
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f000 fad2 	bl	800c4ec <USBH_CtlReq>
 800bf48:	4603      	mov	r3, r0
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3708      	adds	r7, #8
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}

0800bf52 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800bf52:	b580      	push	{r7, lr}
 800bf54:	b082      	sub	sp, #8
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	6078      	str	r0, [r7, #4]
 800bf5a:	460b      	mov	r3, r1
 800bf5c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	789b      	ldrb	r3, [r3, #2]
 800bf62:	2b01      	cmp	r3, #1
 800bf64:	d10f      	bne.n	800bf86 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2202      	movs	r2, #2
 800bf6a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2201      	movs	r2, #1
 800bf70:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2200      	movs	r2, #0
 800bf76:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800bf78:	78fb      	ldrb	r3, [r7, #3]
 800bf7a:	b29a      	uxth	r2, r3
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2200      	movs	r2, #0
 800bf84:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800bf86:	2200      	movs	r2, #0
 800bf88:	2100      	movs	r1, #0
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 faae 	bl	800c4ec <USBH_CtlReq>
 800bf90:	4603      	mov	r3, r0
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3708      	adds	r7, #8
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}

0800bf9a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800bf9a:	b480      	push	{r7}
 800bf9c:	b085      	sub	sp, #20
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	60f8      	str	r0, [r7, #12]
 800bfa2:	60b9      	str	r1, [r7, #8]
 800bfa4:	4613      	mov	r3, r2
 800bfa6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	781a      	ldrb	r2, [r3, #0]
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	785a      	ldrb	r2, [r3, #1]
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	3302      	adds	r3, #2
 800bfbc:	781b      	ldrb	r3, [r3, #0]
 800bfbe:	b29a      	uxth	r2, r3
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	3303      	adds	r3, #3
 800bfc4:	781b      	ldrb	r3, [r3, #0]
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	021b      	lsls	r3, r3, #8
 800bfca:	b29b      	uxth	r3, r3
 800bfcc:	4313      	orrs	r3, r2
 800bfce:	b29a      	uxth	r2, r3
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	791a      	ldrb	r2, [r3, #4]
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	795a      	ldrb	r2, [r3, #5]
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	799a      	ldrb	r2, [r3, #6]
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	79da      	ldrb	r2, [r3, #7]
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	79db      	ldrb	r3, [r3, #7]
 800bff8:	2b20      	cmp	r3, #32
 800bffa:	dc11      	bgt.n	800c020 <USBH_ParseDevDesc+0x86>
 800bffc:	2b08      	cmp	r3, #8
 800bffe:	db16      	blt.n	800c02e <USBH_ParseDevDesc+0x94>
 800c000:	3b08      	subs	r3, #8
 800c002:	2201      	movs	r2, #1
 800c004:	fa02 f303 	lsl.w	r3, r2, r3
 800c008:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800c00c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c010:	2b00      	cmp	r3, #0
 800c012:	bf14      	ite	ne
 800c014:	2301      	movne	r3, #1
 800c016:	2300      	moveq	r3, #0
 800c018:	b2db      	uxtb	r3, r3
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d102      	bne.n	800c024 <USBH_ParseDevDesc+0x8a>
 800c01e:	e006      	b.n	800c02e <USBH_ParseDevDesc+0x94>
 800c020:	2b40      	cmp	r3, #64	; 0x40
 800c022:	d104      	bne.n	800c02e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	79da      	ldrb	r2, [r3, #7]
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	71da      	strb	r2, [r3, #7]
      break;
 800c02c:	e003      	b.n	800c036 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	2240      	movs	r2, #64	; 0x40
 800c032:	71da      	strb	r2, [r3, #7]
      break;
 800c034:	bf00      	nop
  }

  if (length > 8U)
 800c036:	88fb      	ldrh	r3, [r7, #6]
 800c038:	2b08      	cmp	r3, #8
 800c03a:	d939      	bls.n	800c0b0 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	3308      	adds	r3, #8
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	b29a      	uxth	r2, r3
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	3309      	adds	r3, #9
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	b29b      	uxth	r3, r3
 800c04c:	021b      	lsls	r3, r3, #8
 800c04e:	b29b      	uxth	r3, r3
 800c050:	4313      	orrs	r3, r2
 800c052:	b29a      	uxth	r2, r3
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	330a      	adds	r3, #10
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	b29a      	uxth	r2, r3
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	330b      	adds	r3, #11
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	b29b      	uxth	r3, r3
 800c068:	021b      	lsls	r3, r3, #8
 800c06a:	b29b      	uxth	r3, r3
 800c06c:	4313      	orrs	r3, r2
 800c06e:	b29a      	uxth	r2, r3
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	330c      	adds	r3, #12
 800c078:	781b      	ldrb	r3, [r3, #0]
 800c07a:	b29a      	uxth	r2, r3
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	330d      	adds	r3, #13
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	b29b      	uxth	r3, r3
 800c084:	021b      	lsls	r3, r3, #8
 800c086:	b29b      	uxth	r3, r3
 800c088:	4313      	orrs	r3, r2
 800c08a:	b29a      	uxth	r2, r3
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	7b9a      	ldrb	r2, [r3, #14]
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	7bda      	ldrb	r2, [r3, #15]
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	7c1a      	ldrb	r2, [r3, #16]
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	7c5a      	ldrb	r2, [r3, #17]
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	745a      	strb	r2, [r3, #17]
  }
}
 800c0b0:	bf00      	nop
 800c0b2:	3714      	adds	r7, #20
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ba:	4770      	bx	lr

0800c0bc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b08c      	sub	sp, #48	; 0x30
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	60f8      	str	r0, [r7, #12]
 800c0c4:	60b9      	str	r1, [r7, #8]
 800c0c6:	4613      	mov	r3, r2
 800c0c8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c0d0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	781a      	ldrb	r2, [r3, #0]
 800c0f0:	6a3b      	ldr	r3, [r7, #32]
 800c0f2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	785a      	ldrb	r2, [r3, #1]
 800c0f8:	6a3b      	ldr	r3, [r7, #32]
 800c0fa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	3302      	adds	r3, #2
 800c100:	781b      	ldrb	r3, [r3, #0]
 800c102:	b29a      	uxth	r2, r3
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	3303      	adds	r3, #3
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	b29b      	uxth	r3, r3
 800c10c:	021b      	lsls	r3, r3, #8
 800c10e:	b29b      	uxth	r3, r3
 800c110:	4313      	orrs	r3, r2
 800c112:	b29b      	uxth	r3, r3
 800c114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c118:	bf28      	it	cs
 800c11a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800c11e:	b29a      	uxth	r2, r3
 800c120:	6a3b      	ldr	r3, [r7, #32]
 800c122:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	791a      	ldrb	r2, [r3, #4]
 800c128:	6a3b      	ldr	r3, [r7, #32]
 800c12a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	795a      	ldrb	r2, [r3, #5]
 800c130:	6a3b      	ldr	r3, [r7, #32]
 800c132:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	799a      	ldrb	r2, [r3, #6]
 800c138:	6a3b      	ldr	r3, [r7, #32]
 800c13a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	79da      	ldrb	r2, [r3, #7]
 800c140:	6a3b      	ldr	r3, [r7, #32]
 800c142:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	7a1a      	ldrb	r2, [r3, #8]
 800c148:	6a3b      	ldr	r3, [r7, #32]
 800c14a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800c14c:	6a3b      	ldr	r3, [r7, #32]
 800c14e:	781b      	ldrb	r3, [r3, #0]
 800c150:	2b09      	cmp	r3, #9
 800c152:	d002      	beq.n	800c15a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800c154:	6a3b      	ldr	r3, [r7, #32]
 800c156:	2209      	movs	r2, #9
 800c158:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c15a:	88fb      	ldrh	r3, [r7, #6]
 800c15c:	2b09      	cmp	r3, #9
 800c15e:	f240 809d 	bls.w	800c29c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800c162:	2309      	movs	r3, #9
 800c164:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c166:	2300      	movs	r3, #0
 800c168:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c16a:	e081      	b.n	800c270 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c16c:	f107 0316 	add.w	r3, r7, #22
 800c170:	4619      	mov	r1, r3
 800c172:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c174:	f000 f99f 	bl	800c4b6 <USBH_GetNextDesc>
 800c178:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800c17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c17c:	785b      	ldrb	r3, [r3, #1]
 800c17e:	2b04      	cmp	r3, #4
 800c180:	d176      	bne.n	800c270 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800c182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	2b09      	cmp	r3, #9
 800c188:	d002      	beq.n	800c190 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c18c:	2209      	movs	r2, #9
 800c18e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c190:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c194:	221a      	movs	r2, #26
 800c196:	fb02 f303 	mul.w	r3, r2, r3
 800c19a:	3308      	adds	r3, #8
 800c19c:	6a3a      	ldr	r2, [r7, #32]
 800c19e:	4413      	add	r3, r2
 800c1a0:	3302      	adds	r3, #2
 800c1a2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c1a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c1a6:	69f8      	ldr	r0, [r7, #28]
 800c1a8:	f000 f87e 	bl	800c2a8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c1b6:	e043      	b.n	800c240 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c1b8:	f107 0316 	add.w	r3, r7, #22
 800c1bc:	4619      	mov	r1, r3
 800c1be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1c0:	f000 f979 	bl	800c4b6 <USBH_GetNextDesc>
 800c1c4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c8:	785b      	ldrb	r3, [r3, #1]
 800c1ca:	2b05      	cmp	r3, #5
 800c1cc:	d138      	bne.n	800c240 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800c1ce:	69fb      	ldr	r3, [r7, #28]
 800c1d0:	795b      	ldrb	r3, [r3, #5]
 800c1d2:	2b01      	cmp	r3, #1
 800c1d4:	d10f      	bne.n	800c1f6 <USBH_ParseCfgDesc+0x13a>
 800c1d6:	69fb      	ldr	r3, [r7, #28]
 800c1d8:	799b      	ldrb	r3, [r3, #6]
 800c1da:	2b02      	cmp	r3, #2
 800c1dc:	d10b      	bne.n	800c1f6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c1de:	69fb      	ldr	r3, [r7, #28]
 800c1e0:	79db      	ldrb	r3, [r3, #7]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d10f      	bne.n	800c206 <USBH_ParseCfgDesc+0x14a>
 800c1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e8:	781b      	ldrb	r3, [r3, #0]
 800c1ea:	2b09      	cmp	r3, #9
 800c1ec:	d00b      	beq.n	800c206 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800c1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f0:	2209      	movs	r2, #9
 800c1f2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c1f4:	e007      	b.n	800c206 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800c1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f8:	781b      	ldrb	r3, [r3, #0]
 800c1fa:	2b07      	cmp	r3, #7
 800c1fc:	d004      	beq.n	800c208 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c200:	2207      	movs	r2, #7
 800c202:	701a      	strb	r2, [r3, #0]
 800c204:	e000      	b.n	800c208 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c206:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c20c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c210:	3201      	adds	r2, #1
 800c212:	00d2      	lsls	r2, r2, #3
 800c214:	211a      	movs	r1, #26
 800c216:	fb01 f303 	mul.w	r3, r1, r3
 800c21a:	4413      	add	r3, r2
 800c21c:	3308      	adds	r3, #8
 800c21e:	6a3a      	ldr	r2, [r7, #32]
 800c220:	4413      	add	r3, r2
 800c222:	3304      	adds	r3, #4
 800c224:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c228:	69b9      	ldr	r1, [r7, #24]
 800c22a:	68f8      	ldr	r0, [r7, #12]
 800c22c:	f000 f86b 	bl	800c306 <USBH_ParseEPDesc>
 800c230:	4603      	mov	r3, r0
 800c232:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800c236:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c23a:	3301      	adds	r3, #1
 800c23c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c240:	69fb      	ldr	r3, [r7, #28]
 800c242:	791b      	ldrb	r3, [r3, #4]
 800c244:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c248:	429a      	cmp	r2, r3
 800c24a:	d204      	bcs.n	800c256 <USBH_ParseCfgDesc+0x19a>
 800c24c:	6a3b      	ldr	r3, [r7, #32]
 800c24e:	885a      	ldrh	r2, [r3, #2]
 800c250:	8afb      	ldrh	r3, [r7, #22]
 800c252:	429a      	cmp	r2, r3
 800c254:	d8b0      	bhi.n	800c1b8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800c256:	69fb      	ldr	r3, [r7, #28]
 800c258:	791b      	ldrb	r3, [r3, #4]
 800c25a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c25e:	429a      	cmp	r2, r3
 800c260:	d201      	bcs.n	800c266 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800c262:	2303      	movs	r3, #3
 800c264:	e01c      	b.n	800c2a0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800c266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c26a:	3301      	adds	r3, #1
 800c26c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c274:	2b01      	cmp	r3, #1
 800c276:	d805      	bhi.n	800c284 <USBH_ParseCfgDesc+0x1c8>
 800c278:	6a3b      	ldr	r3, [r7, #32]
 800c27a:	885a      	ldrh	r2, [r3, #2]
 800c27c:	8afb      	ldrh	r3, [r7, #22]
 800c27e:	429a      	cmp	r2, r3
 800c280:	f63f af74 	bhi.w	800c16c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800c284:	6a3b      	ldr	r3, [r7, #32]
 800c286:	791b      	ldrb	r3, [r3, #4]
 800c288:	2b02      	cmp	r3, #2
 800c28a:	bf28      	it	cs
 800c28c:	2302      	movcs	r3, #2
 800c28e:	b2db      	uxtb	r3, r3
 800c290:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c294:	429a      	cmp	r2, r3
 800c296:	d201      	bcs.n	800c29c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800c298:	2303      	movs	r3, #3
 800c29a:	e001      	b.n	800c2a0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800c29c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3730      	adds	r7, #48	; 0x30
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b083      	sub	sp, #12
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	781a      	ldrb	r2, [r3, #0]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	785a      	ldrb	r2, [r3, #1]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	789a      	ldrb	r2, [r3, #2]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	78da      	ldrb	r2, [r3, #3]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	791a      	ldrb	r2, [r3, #4]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	795a      	ldrb	r2, [r3, #5]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	799a      	ldrb	r2, [r3, #6]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	79da      	ldrb	r2, [r3, #7]
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	7a1a      	ldrb	r2, [r3, #8]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	721a      	strb	r2, [r3, #8]
}
 800c2fa:	bf00      	nop
 800c2fc:	370c      	adds	r7, #12
 800c2fe:	46bd      	mov	sp, r7
 800c300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c304:	4770      	bx	lr

0800c306 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800c306:	b480      	push	{r7}
 800c308:	b087      	sub	sp, #28
 800c30a:	af00      	add	r7, sp, #0
 800c30c:	60f8      	str	r0, [r7, #12]
 800c30e:	60b9      	str	r1, [r7, #8]
 800c310:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c312:	2300      	movs	r3, #0
 800c314:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	781a      	ldrb	r2, [r3, #0]
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	785a      	ldrb	r2, [r3, #1]
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	789a      	ldrb	r2, [r3, #2]
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	78da      	ldrb	r2, [r3, #3]
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	3304      	adds	r3, #4
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	b29a      	uxth	r2, r3
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	3305      	adds	r3, #5
 800c342:	781b      	ldrb	r3, [r3, #0]
 800c344:	b29b      	uxth	r3, r3
 800c346:	021b      	lsls	r3, r3, #8
 800c348:	b29b      	uxth	r3, r3
 800c34a:	4313      	orrs	r3, r2
 800c34c:	b29a      	uxth	r2, r3
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	799a      	ldrb	r2, [r3, #6]
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	889b      	ldrh	r3, [r3, #4]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d102      	bne.n	800c368 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800c362:	2303      	movs	r3, #3
 800c364:	75fb      	strb	r3, [r7, #23]
 800c366:	e033      	b.n	800c3d0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	889b      	ldrh	r3, [r3, #4]
 800c36c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c370:	f023 0307 	bic.w	r3, r3, #7
 800c374:	b29a      	uxth	r2, r3
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	889b      	ldrh	r3, [r3, #4]
 800c37e:	b21a      	sxth	r2, r3
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	3304      	adds	r3, #4
 800c384:	781b      	ldrb	r3, [r3, #0]
 800c386:	b299      	uxth	r1, r3
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	3305      	adds	r3, #5
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	b29b      	uxth	r3, r3
 800c390:	021b      	lsls	r3, r3, #8
 800c392:	b29b      	uxth	r3, r3
 800c394:	430b      	orrs	r3, r1
 800c396:	b29b      	uxth	r3, r3
 800c398:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d110      	bne.n	800c3c2 <USBH_ParseEPDesc+0xbc>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	3304      	adds	r3, #4
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	b299      	uxth	r1, r3
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	3305      	adds	r3, #5
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	b29b      	uxth	r3, r3
 800c3b0:	021b      	lsls	r3, r3, #8
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	430b      	orrs	r3, r1
 800c3b6:	b29b      	uxth	r3, r3
 800c3b8:	b21b      	sxth	r3, r3
 800c3ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c3be:	b21b      	sxth	r3, r3
 800c3c0:	e001      	b.n	800c3c6 <USBH_ParseEPDesc+0xc0>
 800c3c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	b21b      	sxth	r3, r3
 800c3ca:	b29a      	uxth	r2, r3
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d116      	bne.n	800c408 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	78db      	ldrb	r3, [r3, #3]
 800c3de:	f003 0303 	and.w	r3, r3, #3
 800c3e2:	2b01      	cmp	r3, #1
 800c3e4:	d005      	beq.n	800c3f2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	78db      	ldrb	r3, [r3, #3]
 800c3ea:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c3ee:	2b03      	cmp	r3, #3
 800c3f0:	d127      	bne.n	800c442 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	799b      	ldrb	r3, [r3, #6]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d003      	beq.n	800c402 <USBH_ParseEPDesc+0xfc>
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	799b      	ldrb	r3, [r3, #6]
 800c3fe:	2b10      	cmp	r3, #16
 800c400:	d91f      	bls.n	800c442 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c402:	2303      	movs	r3, #3
 800c404:	75fb      	strb	r3, [r7, #23]
 800c406:	e01c      	b.n	800c442 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	78db      	ldrb	r3, [r3, #3]
 800c40c:	f003 0303 	and.w	r3, r3, #3
 800c410:	2b01      	cmp	r3, #1
 800c412:	d10a      	bne.n	800c42a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	799b      	ldrb	r3, [r3, #6]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d003      	beq.n	800c424 <USBH_ParseEPDesc+0x11e>
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	799b      	ldrb	r3, [r3, #6]
 800c420:	2b10      	cmp	r3, #16
 800c422:	d90e      	bls.n	800c442 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c424:	2303      	movs	r3, #3
 800c426:	75fb      	strb	r3, [r7, #23]
 800c428:	e00b      	b.n	800c442 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	78db      	ldrb	r3, [r3, #3]
 800c42e:	f003 0303 	and.w	r3, r3, #3
 800c432:	2b03      	cmp	r3, #3
 800c434:	d105      	bne.n	800c442 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	799b      	ldrb	r3, [r3, #6]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d101      	bne.n	800c442 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c43e:	2303      	movs	r3, #3
 800c440:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800c442:	7dfb      	ldrb	r3, [r7, #23]
}
 800c444:	4618      	mov	r0, r3
 800c446:	371c      	adds	r7, #28
 800c448:	46bd      	mov	sp, r7
 800c44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44e:	4770      	bx	lr

0800c450 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c450:	b480      	push	{r7}
 800c452:	b087      	sub	sp, #28
 800c454:	af00      	add	r7, sp, #0
 800c456:	60f8      	str	r0, [r7, #12]
 800c458:	60b9      	str	r1, [r7, #8]
 800c45a:	4613      	mov	r3, r2
 800c45c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	3301      	adds	r3, #1
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	2b03      	cmp	r3, #3
 800c466:	d120      	bne.n	800c4aa <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	1e9a      	subs	r2, r3, #2
 800c46e:	88fb      	ldrh	r3, [r7, #6]
 800c470:	4293      	cmp	r3, r2
 800c472:	bf28      	it	cs
 800c474:	4613      	movcs	r3, r2
 800c476:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	3302      	adds	r3, #2
 800c47c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c47e:	2300      	movs	r3, #0
 800c480:	82fb      	strh	r3, [r7, #22]
 800c482:	e00b      	b.n	800c49c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c484:	8afb      	ldrh	r3, [r7, #22]
 800c486:	68fa      	ldr	r2, [r7, #12]
 800c488:	4413      	add	r3, r2
 800c48a:	781a      	ldrb	r2, [r3, #0]
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	3301      	adds	r3, #1
 800c494:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c496:	8afb      	ldrh	r3, [r7, #22]
 800c498:	3302      	adds	r3, #2
 800c49a:	82fb      	strh	r3, [r7, #22]
 800c49c:	8afa      	ldrh	r2, [r7, #22]
 800c49e:	8abb      	ldrh	r3, [r7, #20]
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d3ef      	bcc.n	800c484 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	701a      	strb	r2, [r3, #0]
  }
}
 800c4aa:	bf00      	nop
 800c4ac:	371c      	adds	r7, #28
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b4:	4770      	bx	lr

0800c4b6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800c4b6:	b480      	push	{r7}
 800c4b8:	b085      	sub	sp, #20
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
 800c4be:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	881a      	ldrh	r2, [r3, #0]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	781b      	ldrb	r3, [r3, #0]
 800c4c8:	b29b      	uxth	r3, r3
 800c4ca:	4413      	add	r3, r2
 800c4cc:	b29a      	uxth	r2, r3
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	781b      	ldrb	r3, [r3, #0]
 800c4d6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	4413      	add	r3, r2
 800c4dc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c4de:	68fb      	ldr	r3, [r7, #12]
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3714      	adds	r7, #20
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr

0800c4ec <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b086      	sub	sp, #24
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	60f8      	str	r0, [r7, #12]
 800c4f4:	60b9      	str	r1, [r7, #8]
 800c4f6:	4613      	mov	r3, r2
 800c4f8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	789b      	ldrb	r3, [r3, #2]
 800c502:	2b01      	cmp	r3, #1
 800c504:	d002      	beq.n	800c50c <USBH_CtlReq+0x20>
 800c506:	2b02      	cmp	r3, #2
 800c508:	d01d      	beq.n	800c546 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800c50a:	e043      	b.n	800c594 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	68ba      	ldr	r2, [r7, #8]
 800c510:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	88fa      	ldrh	r2, [r7, #6]
 800c516:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	2201      	movs	r2, #1
 800c51c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	2202      	movs	r2, #2
 800c522:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c524:	2301      	movs	r3, #1
 800c526:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	2203      	movs	r2, #3
 800c52c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c53c:	2200      	movs	r2, #0
 800c53e:	4619      	mov	r1, r3
 800c540:	f005 fb3e 	bl	8011bc0 <osMessagePut>
      break;
 800c544:	e026      	b.n	800c594 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800c546:	68f8      	ldr	r0, [r7, #12]
 800c548:	f000 f82a 	bl	800c5a0 <USBH_HandleControl>
 800c54c:	4603      	mov	r3, r0
 800c54e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c550:	7dfb      	ldrb	r3, [r7, #23]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d002      	beq.n	800c55c <USBH_CtlReq+0x70>
 800c556:	7dfb      	ldrb	r3, [r7, #23]
 800c558:	2b03      	cmp	r3, #3
 800c55a:	d106      	bne.n	800c56a <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2201      	movs	r2, #1
 800c560:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	2200      	movs	r2, #0
 800c566:	761a      	strb	r2, [r3, #24]
 800c568:	e005      	b.n	800c576 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800c56a:	7dfb      	ldrb	r3, [r7, #23]
 800c56c:	2b02      	cmp	r3, #2
 800c56e:	d102      	bne.n	800c576 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	2201      	movs	r2, #1
 800c574:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	2203      	movs	r2, #3
 800c57a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c58a:	2200      	movs	r2, #0
 800c58c:	4619      	mov	r1, r3
 800c58e:	f005 fb17 	bl	8011bc0 <osMessagePut>
      break;
 800c592:	bf00      	nop
  }
  return status;
 800c594:	7dfb      	ldrb	r3, [r7, #23]
}
 800c596:	4618      	mov	r0, r3
 800c598:	3718      	adds	r7, #24
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
	...

0800c5a0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b086      	sub	sp, #24
 800c5a4:	af02      	add	r7, sp, #8
 800c5a6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	7e1b      	ldrb	r3, [r3, #24]
 800c5b4:	3b01      	subs	r3, #1
 800c5b6:	2b0a      	cmp	r3, #10
 800c5b8:	f200 8229 	bhi.w	800ca0e <USBH_HandleControl+0x46e>
 800c5bc:	a201      	add	r2, pc, #4	; (adr r2, 800c5c4 <USBH_HandleControl+0x24>)
 800c5be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5c2:	bf00      	nop
 800c5c4:	0800c5f1 	.word	0x0800c5f1
 800c5c8:	0800c60b 	.word	0x0800c60b
 800c5cc:	0800c6ad 	.word	0x0800c6ad
 800c5d0:	0800c6d3 	.word	0x0800c6d3
 800c5d4:	0800c75f 	.word	0x0800c75f
 800c5d8:	0800c789 	.word	0x0800c789
 800c5dc:	0800c84b 	.word	0x0800c84b
 800c5e0:	0800c86d 	.word	0x0800c86d
 800c5e4:	0800c8ff 	.word	0x0800c8ff
 800c5e8:	0800c925 	.word	0x0800c925
 800c5ec:	0800c9b7 	.word	0x0800c9b7
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f103 0110 	add.w	r1, r3, #16
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	795b      	ldrb	r3, [r3, #5]
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f000 fa17 	bl	800ca30 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2202      	movs	r2, #2
 800c606:	761a      	strb	r2, [r3, #24]
      break;
 800c608:	e20c      	b.n	800ca24 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	795b      	ldrb	r3, [r3, #5]
 800c60e:	4619      	mov	r1, r3
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f007 ff7b 	bl	801450c <USBH_LL_GetURBState>
 800c616:	4603      	mov	r3, r0
 800c618:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c61a:	7bbb      	ldrb	r3, [r7, #14]
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d12c      	bne.n	800c67a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	7c1b      	ldrb	r3, [r3, #16]
 800c624:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c628:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	8adb      	ldrh	r3, [r3, #22]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d00a      	beq.n	800c648 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c632:	7b7b      	ldrb	r3, [r7, #13]
 800c634:	2b80      	cmp	r3, #128	; 0x80
 800c636:	d103      	bne.n	800c640 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2203      	movs	r2, #3
 800c63c:	761a      	strb	r2, [r3, #24]
 800c63e:	e00d      	b.n	800c65c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2205      	movs	r2, #5
 800c644:	761a      	strb	r2, [r3, #24]
 800c646:	e009      	b.n	800c65c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800c648:	7b7b      	ldrb	r3, [r7, #13]
 800c64a:	2b80      	cmp	r3, #128	; 0x80
 800c64c:	d103      	bne.n	800c656 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2209      	movs	r2, #9
 800c652:	761a      	strb	r2, [r3, #24]
 800c654:	e002      	b.n	800c65c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2207      	movs	r2, #7
 800c65a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2203      	movs	r2, #3
 800c660:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c670:	2200      	movs	r2, #0
 800c672:	4619      	mov	r1, r3
 800c674:	f005 faa4 	bl	8011bc0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c678:	e1cb      	b.n	800ca12 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c67a:	7bbb      	ldrb	r3, [r7, #14]
 800c67c:	2b04      	cmp	r3, #4
 800c67e:	d003      	beq.n	800c688 <USBH_HandleControl+0xe8>
 800c680:	7bbb      	ldrb	r3, [r7, #14]
 800c682:	2b02      	cmp	r3, #2
 800c684:	f040 81c5 	bne.w	800ca12 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	220b      	movs	r2, #11
 800c68c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2203      	movs	r2, #3
 800c692:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	4619      	mov	r1, r3
 800c6a6:	f005 fa8b 	bl	8011bc0 <osMessagePut>
      break;
 800c6aa:	e1b2      	b.n	800ca12 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c6b2:	b29a      	uxth	r2, r3
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	6899      	ldr	r1, [r3, #8]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	899a      	ldrh	r2, [r3, #12]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	791b      	ldrb	r3, [r3, #4]
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f000 f9f2 	bl	800caae <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2204      	movs	r2, #4
 800c6ce:	761a      	strb	r2, [r3, #24]
      break;
 800c6d0:	e1a8      	b.n	800ca24 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	791b      	ldrb	r3, [r3, #4]
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f007 ff17 	bl	801450c <USBH_LL_GetURBState>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c6e2:	7bbb      	ldrb	r3, [r7, #14]
 800c6e4:	2b01      	cmp	r3, #1
 800c6e6:	d110      	bne.n	800c70a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2209      	movs	r2, #9
 800c6ec:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2203      	movs	r2, #3
 800c6f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c702:	2200      	movs	r2, #0
 800c704:	4619      	mov	r1, r3
 800c706:	f005 fa5b 	bl	8011bc0 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c70a:	7bbb      	ldrb	r3, [r7, #14]
 800c70c:	2b05      	cmp	r3, #5
 800c70e:	d110      	bne.n	800c732 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c710:	2303      	movs	r3, #3
 800c712:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2203      	movs	r2, #3
 800c718:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c728:	2200      	movs	r2, #0
 800c72a:	4619      	mov	r1, r3
 800c72c:	f005 fa48 	bl	8011bc0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c730:	e171      	b.n	800ca16 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800c732:	7bbb      	ldrb	r3, [r7, #14]
 800c734:	2b04      	cmp	r3, #4
 800c736:	f040 816e 	bne.w	800ca16 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	220b      	movs	r2, #11
 800c73e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2203      	movs	r2, #3
 800c744:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c754:	2200      	movs	r2, #0
 800c756:	4619      	mov	r1, r3
 800c758:	f005 fa32 	bl	8011bc0 <osMessagePut>
      break;
 800c75c:	e15b      	b.n	800ca16 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6899      	ldr	r1, [r3, #8]
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	899a      	ldrh	r2, [r3, #12]
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	795b      	ldrb	r3, [r3, #5]
 800c76a:	2001      	movs	r0, #1
 800c76c:	9000      	str	r0, [sp, #0]
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f000 f978 	bl	800ca64 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c77a:	b29a      	uxth	r2, r3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2206      	movs	r2, #6
 800c784:	761a      	strb	r2, [r3, #24]
      break;
 800c786:	e14d      	b.n	800ca24 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	795b      	ldrb	r3, [r3, #5]
 800c78c:	4619      	mov	r1, r3
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f007 febc 	bl	801450c <USBH_LL_GetURBState>
 800c794:	4603      	mov	r3, r0
 800c796:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c798:	7bbb      	ldrb	r3, [r7, #14]
 800c79a:	2b01      	cmp	r3, #1
 800c79c:	d111      	bne.n	800c7c2 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2207      	movs	r2, #7
 800c7a2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2203      	movs	r2, #3
 800c7a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	f005 fa00 	bl	8011bc0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c7c0:	e12b      	b.n	800ca1a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800c7c2:	7bbb      	ldrb	r3, [r7, #14]
 800c7c4:	2b05      	cmp	r3, #5
 800c7c6:	d113      	bne.n	800c7f0 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	220c      	movs	r2, #12
 800c7cc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c7ce:	2303      	movs	r3, #3
 800c7d0:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2203      	movs	r2, #3
 800c7d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	f005 f9e9 	bl	8011bc0 <osMessagePut>
      break;
 800c7ee:	e114      	b.n	800ca1a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c7f0:	7bbb      	ldrb	r3, [r7, #14]
 800c7f2:	2b02      	cmp	r3, #2
 800c7f4:	d111      	bne.n	800c81a <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2205      	movs	r2, #5
 800c7fa:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2203      	movs	r2, #3
 800c800:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c810:	2200      	movs	r2, #0
 800c812:	4619      	mov	r1, r3
 800c814:	f005 f9d4 	bl	8011bc0 <osMessagePut>
      break;
 800c818:	e0ff      	b.n	800ca1a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800c81a:	7bbb      	ldrb	r3, [r7, #14]
 800c81c:	2b04      	cmp	r3, #4
 800c81e:	f040 80fc 	bne.w	800ca1a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	220b      	movs	r2, #11
 800c826:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c828:	2302      	movs	r3, #2
 800c82a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2203      	movs	r2, #3
 800c830:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c840:	2200      	movs	r2, #0
 800c842:	4619      	mov	r1, r3
 800c844:	f005 f9bc 	bl	8011bc0 <osMessagePut>
      break;
 800c848:	e0e7      	b.n	800ca1a <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	791b      	ldrb	r3, [r3, #4]
 800c84e:	2200      	movs	r2, #0
 800c850:	2100      	movs	r1, #0
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 f92b 	bl	800caae <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c85e:	b29a      	uxth	r2, r3
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2208      	movs	r2, #8
 800c868:	761a      	strb	r2, [r3, #24]

      break;
 800c86a:	e0db      	b.n	800ca24 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	791b      	ldrb	r3, [r3, #4]
 800c870:	4619      	mov	r1, r3
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f007 fe4a 	bl	801450c <USBH_LL_GetURBState>
 800c878:	4603      	mov	r3, r0
 800c87a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c87c:	7bbb      	ldrb	r3, [r7, #14]
 800c87e:	2b01      	cmp	r3, #1
 800c880:	d113      	bne.n	800c8aa <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	220d      	movs	r2, #13
 800c886:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c888:	2300      	movs	r3, #0
 800c88a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2203      	movs	r2, #3
 800c890:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	4619      	mov	r1, r3
 800c8a4:	f005 f98c 	bl	8011bc0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c8a8:	e0b9      	b.n	800ca1e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800c8aa:	7bbb      	ldrb	r3, [r7, #14]
 800c8ac:	2b04      	cmp	r3, #4
 800c8ae:	d111      	bne.n	800c8d4 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	220b      	movs	r2, #11
 800c8b4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2203      	movs	r2, #3
 800c8ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	f005 f977 	bl	8011bc0 <osMessagePut>
      break;
 800c8d2:	e0a4      	b.n	800ca1e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800c8d4:	7bbb      	ldrb	r3, [r7, #14]
 800c8d6:	2b05      	cmp	r3, #5
 800c8d8:	f040 80a1 	bne.w	800ca1e <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800c8dc:	2303      	movs	r3, #3
 800c8de:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2203      	movs	r2, #3
 800c8e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	4619      	mov	r1, r3
 800c8f8:	f005 f962 	bl	8011bc0 <osMessagePut>
      break;
 800c8fc:	e08f      	b.n	800ca1e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	795b      	ldrb	r3, [r3, #5]
 800c902:	2201      	movs	r2, #1
 800c904:	9200      	str	r2, [sp, #0]
 800c906:	2200      	movs	r2, #0
 800c908:	2100      	movs	r1, #0
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f000 f8aa 	bl	800ca64 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c916:	b29a      	uxth	r2, r3
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	220a      	movs	r2, #10
 800c920:	761a      	strb	r2, [r3, #24]
      break;
 800c922:	e07f      	b.n	800ca24 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	795b      	ldrb	r3, [r3, #5]
 800c928:	4619      	mov	r1, r3
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f007 fdee 	bl	801450c <USBH_LL_GetURBState>
 800c930:	4603      	mov	r3, r0
 800c932:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c934:	7bbb      	ldrb	r3, [r7, #14]
 800c936:	2b01      	cmp	r3, #1
 800c938:	d113      	bne.n	800c962 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800c93a:	2300      	movs	r3, #0
 800c93c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	220d      	movs	r2, #13
 800c942:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2203      	movs	r2, #3
 800c948:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c958:	2200      	movs	r2, #0
 800c95a:	4619      	mov	r1, r3
 800c95c:	f005 f930 	bl	8011bc0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c960:	e05f      	b.n	800ca22 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c962:	7bbb      	ldrb	r3, [r7, #14]
 800c964:	2b02      	cmp	r3, #2
 800c966:	d111      	bne.n	800c98c <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2209      	movs	r2, #9
 800c96c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2203      	movs	r2, #3
 800c972:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c982:	2200      	movs	r2, #0
 800c984:	4619      	mov	r1, r3
 800c986:	f005 f91b 	bl	8011bc0 <osMessagePut>
      break;
 800c98a:	e04a      	b.n	800ca22 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800c98c:	7bbb      	ldrb	r3, [r7, #14]
 800c98e:	2b04      	cmp	r3, #4
 800c990:	d147      	bne.n	800ca22 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	220b      	movs	r2, #11
 800c996:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2203      	movs	r2, #3
 800c99c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	4619      	mov	r1, r3
 800c9b0:	f005 f906 	bl	8011bc0 <osMessagePut>
      break;
 800c9b4:	e035      	b.n	800ca22 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	7e5b      	ldrb	r3, [r3, #25]
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	b2da      	uxtb	r2, r3
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	765a      	strb	r2, [r3, #25]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	7e5b      	ldrb	r3, [r3, #25]
 800c9c6:	2b02      	cmp	r3, #2
 800c9c8:	d806      	bhi.n	800c9d8 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2201      	movs	r2, #1
 800c9ce:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c9d6:	e025      	b.n	800ca24 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c9de:	2106      	movs	r1, #6
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	795b      	ldrb	r3, [r3, #5]
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f000 f90d 	bl	800cc10 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	791b      	ldrb	r3, [r3, #4]
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f000 f907 	bl	800cc10 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2200      	movs	r2, #0
 800ca06:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ca08:	2302      	movs	r3, #2
 800ca0a:	73fb      	strb	r3, [r7, #15]
      break;
 800ca0c:	e00a      	b.n	800ca24 <USBH_HandleControl+0x484>

    default:
      break;
 800ca0e:	bf00      	nop
 800ca10:	e008      	b.n	800ca24 <USBH_HandleControl+0x484>
      break;
 800ca12:	bf00      	nop
 800ca14:	e006      	b.n	800ca24 <USBH_HandleControl+0x484>
      break;
 800ca16:	bf00      	nop
 800ca18:	e004      	b.n	800ca24 <USBH_HandleControl+0x484>
      break;
 800ca1a:	bf00      	nop
 800ca1c:	e002      	b.n	800ca24 <USBH_HandleControl+0x484>
      break;
 800ca1e:	bf00      	nop
 800ca20:	e000      	b.n	800ca24 <USBH_HandleControl+0x484>
      break;
 800ca22:	bf00      	nop
  }

  return status;
 800ca24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	3710      	adds	r7, #16
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
 800ca2e:	bf00      	nop

0800ca30 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b088      	sub	sp, #32
 800ca34:	af04      	add	r7, sp, #16
 800ca36:	60f8      	str	r0, [r7, #12]
 800ca38:	60b9      	str	r1, [r7, #8]
 800ca3a:	4613      	mov	r3, r2
 800ca3c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ca3e:	79f9      	ldrb	r1, [r7, #7]
 800ca40:	2300      	movs	r3, #0
 800ca42:	9303      	str	r3, [sp, #12]
 800ca44:	2308      	movs	r3, #8
 800ca46:	9302      	str	r3, [sp, #8]
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	9301      	str	r3, [sp, #4]
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	9300      	str	r3, [sp, #0]
 800ca50:	2300      	movs	r3, #0
 800ca52:	2200      	movs	r2, #0
 800ca54:	68f8      	ldr	r0, [r7, #12]
 800ca56:	f007 fd28 	bl	80144aa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800ca5a:	2300      	movs	r3, #0
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3710      	adds	r7, #16
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}

0800ca64 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b088      	sub	sp, #32
 800ca68:	af04      	add	r7, sp, #16
 800ca6a:	60f8      	str	r0, [r7, #12]
 800ca6c:	60b9      	str	r1, [r7, #8]
 800ca6e:	4611      	mov	r1, r2
 800ca70:	461a      	mov	r2, r3
 800ca72:	460b      	mov	r3, r1
 800ca74:	80fb      	strh	r3, [r7, #6]
 800ca76:	4613      	mov	r3, r2
 800ca78:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d001      	beq.n	800ca88 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ca84:	2300      	movs	r3, #0
 800ca86:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ca88:	7979      	ldrb	r1, [r7, #5]
 800ca8a:	7e3b      	ldrb	r3, [r7, #24]
 800ca8c:	9303      	str	r3, [sp, #12]
 800ca8e:	88fb      	ldrh	r3, [r7, #6]
 800ca90:	9302      	str	r3, [sp, #8]
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	9301      	str	r3, [sp, #4]
 800ca96:	2301      	movs	r3, #1
 800ca98:	9300      	str	r3, [sp, #0]
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	68f8      	ldr	r0, [r7, #12]
 800caa0:	f007 fd03 	bl	80144aa <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800caa4:	2300      	movs	r3, #0
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3710      	adds	r7, #16
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}

0800caae <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800caae:	b580      	push	{r7, lr}
 800cab0:	b088      	sub	sp, #32
 800cab2:	af04      	add	r7, sp, #16
 800cab4:	60f8      	str	r0, [r7, #12]
 800cab6:	60b9      	str	r1, [r7, #8]
 800cab8:	4611      	mov	r1, r2
 800caba:	461a      	mov	r2, r3
 800cabc:	460b      	mov	r3, r1
 800cabe:	80fb      	strh	r3, [r7, #6]
 800cac0:	4613      	mov	r3, r2
 800cac2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cac4:	7979      	ldrb	r1, [r7, #5]
 800cac6:	2300      	movs	r3, #0
 800cac8:	9303      	str	r3, [sp, #12]
 800caca:	88fb      	ldrh	r3, [r7, #6]
 800cacc:	9302      	str	r3, [sp, #8]
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	9301      	str	r3, [sp, #4]
 800cad2:	2301      	movs	r3, #1
 800cad4:	9300      	str	r3, [sp, #0]
 800cad6:	2300      	movs	r3, #0
 800cad8:	2201      	movs	r2, #1
 800cada:	68f8      	ldr	r0, [r7, #12]
 800cadc:	f007 fce5 	bl	80144aa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800cae0:	2300      	movs	r3, #0

}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3710      	adds	r7, #16
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}

0800caea <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800caea:	b580      	push	{r7, lr}
 800caec:	b088      	sub	sp, #32
 800caee:	af04      	add	r7, sp, #16
 800caf0:	60f8      	str	r0, [r7, #12]
 800caf2:	60b9      	str	r1, [r7, #8]
 800caf4:	4611      	mov	r1, r2
 800caf6:	461a      	mov	r2, r3
 800caf8:	460b      	mov	r3, r1
 800cafa:	80fb      	strh	r3, [r7, #6]
 800cafc:	4613      	mov	r3, r2
 800cafe:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d001      	beq.n	800cb0e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cb0e:	7979      	ldrb	r1, [r7, #5]
 800cb10:	7e3b      	ldrb	r3, [r7, #24]
 800cb12:	9303      	str	r3, [sp, #12]
 800cb14:	88fb      	ldrh	r3, [r7, #6]
 800cb16:	9302      	str	r3, [sp, #8]
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	9301      	str	r3, [sp, #4]
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	9300      	str	r3, [sp, #0]
 800cb20:	2302      	movs	r3, #2
 800cb22:	2200      	movs	r2, #0
 800cb24:	68f8      	ldr	r0, [r7, #12]
 800cb26:	f007 fcc0 	bl	80144aa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800cb2a:	2300      	movs	r3, #0
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3710      	adds	r7, #16
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}

0800cb34 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b088      	sub	sp, #32
 800cb38:	af04      	add	r7, sp, #16
 800cb3a:	60f8      	str	r0, [r7, #12]
 800cb3c:	60b9      	str	r1, [r7, #8]
 800cb3e:	4611      	mov	r1, r2
 800cb40:	461a      	mov	r2, r3
 800cb42:	460b      	mov	r3, r1
 800cb44:	80fb      	strh	r3, [r7, #6]
 800cb46:	4613      	mov	r3, r2
 800cb48:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cb4a:	7979      	ldrb	r1, [r7, #5]
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	9303      	str	r3, [sp, #12]
 800cb50:	88fb      	ldrh	r3, [r7, #6]
 800cb52:	9302      	str	r3, [sp, #8]
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	9301      	str	r3, [sp, #4]
 800cb58:	2301      	movs	r3, #1
 800cb5a:	9300      	str	r3, [sp, #0]
 800cb5c:	2302      	movs	r3, #2
 800cb5e:	2201      	movs	r2, #1
 800cb60:	68f8      	ldr	r0, [r7, #12]
 800cb62:	f007 fca2 	bl	80144aa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800cb66:	2300      	movs	r3, #0
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3710      	adds	r7, #16
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b086      	sub	sp, #24
 800cb74:	af04      	add	r7, sp, #16
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	4608      	mov	r0, r1
 800cb7a:	4611      	mov	r1, r2
 800cb7c:	461a      	mov	r2, r3
 800cb7e:	4603      	mov	r3, r0
 800cb80:	70fb      	strb	r3, [r7, #3]
 800cb82:	460b      	mov	r3, r1
 800cb84:	70bb      	strb	r3, [r7, #2]
 800cb86:	4613      	mov	r3, r2
 800cb88:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800cb8a:	7878      	ldrb	r0, [r7, #1]
 800cb8c:	78ba      	ldrb	r2, [r7, #2]
 800cb8e:	78f9      	ldrb	r1, [r7, #3]
 800cb90:	8b3b      	ldrh	r3, [r7, #24]
 800cb92:	9302      	str	r3, [sp, #8]
 800cb94:	7d3b      	ldrb	r3, [r7, #20]
 800cb96:	9301      	str	r3, [sp, #4]
 800cb98:	7c3b      	ldrb	r3, [r7, #16]
 800cb9a:	9300      	str	r3, [sp, #0]
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f007 fc35 	bl	801440e <USBH_LL_OpenPipe>

  return USBH_OK;
 800cba4:	2300      	movs	r3, #0
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3708      	adds	r7, #8
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}

0800cbae <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800cbae:	b580      	push	{r7, lr}
 800cbb0:	b082      	sub	sp, #8
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	6078      	str	r0, [r7, #4]
 800cbb6:	460b      	mov	r3, r1
 800cbb8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800cbba:	78fb      	ldrb	r3, [r7, #3]
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f007 fc54 	bl	801446c <USBH_LL_ClosePipe>

  return USBH_OK;
 800cbc4:	2300      	movs	r3, #0
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3708      	adds	r7, #8
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}

0800cbce <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800cbce:	b580      	push	{r7, lr}
 800cbd0:	b084      	sub	sp, #16
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	6078      	str	r0, [r7, #4]
 800cbd6:	460b      	mov	r3, r1
 800cbd8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f000 f836 	bl	800cc4c <USBH_GetFreePipe>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800cbe4:	89fb      	ldrh	r3, [r7, #14]
 800cbe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cbea:	4293      	cmp	r3, r2
 800cbec:	d00a      	beq.n	800cc04 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800cbee:	78fa      	ldrb	r2, [r7, #3]
 800cbf0:	89fb      	ldrh	r3, [r7, #14]
 800cbf2:	f003 030f 	and.w	r3, r3, #15
 800cbf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cbfa:	6879      	ldr	r1, [r7, #4]
 800cbfc:	33e0      	adds	r3, #224	; 0xe0
 800cbfe:	009b      	lsls	r3, r3, #2
 800cc00:	440b      	add	r3, r1
 800cc02:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800cc04:	89fb      	ldrh	r3, [r7, #14]
 800cc06:	b2db      	uxtb	r3, r3
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3710      	adds	r7, #16
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800cc10:	b480      	push	{r7}
 800cc12:	b083      	sub	sp, #12
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	460b      	mov	r3, r1
 800cc1a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800cc1c:	78fb      	ldrb	r3, [r7, #3]
 800cc1e:	2b0f      	cmp	r3, #15
 800cc20:	d80d      	bhi.n	800cc3e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800cc22:	78fb      	ldrb	r3, [r7, #3]
 800cc24:	687a      	ldr	r2, [r7, #4]
 800cc26:	33e0      	adds	r3, #224	; 0xe0
 800cc28:	009b      	lsls	r3, r3, #2
 800cc2a:	4413      	add	r3, r2
 800cc2c:	685a      	ldr	r2, [r3, #4]
 800cc2e:	78fb      	ldrb	r3, [r7, #3]
 800cc30:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800cc34:	6879      	ldr	r1, [r7, #4]
 800cc36:	33e0      	adds	r3, #224	; 0xe0
 800cc38:	009b      	lsls	r3, r3, #2
 800cc3a:	440b      	add	r3, r1
 800cc3c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800cc3e:	2300      	movs	r3, #0
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	370c      	adds	r7, #12
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr

0800cc4c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b085      	sub	sp, #20
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800cc54:	2300      	movs	r3, #0
 800cc56:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800cc58:	2300      	movs	r3, #0
 800cc5a:	73fb      	strb	r3, [r7, #15]
 800cc5c:	e00f      	b.n	800cc7e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800cc5e:	7bfb      	ldrb	r3, [r7, #15]
 800cc60:	687a      	ldr	r2, [r7, #4]
 800cc62:	33e0      	adds	r3, #224	; 0xe0
 800cc64:	009b      	lsls	r3, r3, #2
 800cc66:	4413      	add	r3, r2
 800cc68:	685b      	ldr	r3, [r3, #4]
 800cc6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d102      	bne.n	800cc78 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800cc72:	7bfb      	ldrb	r3, [r7, #15]
 800cc74:	b29b      	uxth	r3, r3
 800cc76:	e007      	b.n	800cc88 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800cc78:	7bfb      	ldrb	r3, [r7, #15]
 800cc7a:	3301      	adds	r3, #1
 800cc7c:	73fb      	strb	r3, [r7, #15]
 800cc7e:	7bfb      	ldrb	r3, [r7, #15]
 800cc80:	2b0f      	cmp	r3, #15
 800cc82:	d9ec      	bls.n	800cc5e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800cc84:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3714      	adds	r7, #20
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc92:	4770      	bx	lr

0800cc94 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b084      	sub	sp, #16
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cc9e:	79fb      	ldrb	r3, [r7, #7]
 800cca0:	4a08      	ldr	r2, [pc, #32]	; (800ccc4 <disk_status+0x30>)
 800cca2:	009b      	lsls	r3, r3, #2
 800cca4:	4413      	add	r3, r2
 800cca6:	685b      	ldr	r3, [r3, #4]
 800cca8:	685b      	ldr	r3, [r3, #4]
 800ccaa:	79fa      	ldrb	r2, [r7, #7]
 800ccac:	4905      	ldr	r1, [pc, #20]	; (800ccc4 <disk_status+0x30>)
 800ccae:	440a      	add	r2, r1
 800ccb0:	7d12      	ldrb	r2, [r2, #20]
 800ccb2:	4610      	mov	r0, r2
 800ccb4:	4798      	blx	r3
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ccba:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3710      	adds	r7, #16
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}
 800ccc4:	200022ec 	.word	0x200022ec

0800ccc8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b084      	sub	sp, #16
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	4603      	mov	r3, r0
 800ccd0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ccd6:	79fb      	ldrb	r3, [r7, #7]
 800ccd8:	4a0d      	ldr	r2, [pc, #52]	; (800cd10 <disk_initialize+0x48>)
 800ccda:	5cd3      	ldrb	r3, [r2, r3]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d111      	bne.n	800cd04 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800cce0:	79fb      	ldrb	r3, [r7, #7]
 800cce2:	4a0b      	ldr	r2, [pc, #44]	; (800cd10 <disk_initialize+0x48>)
 800cce4:	2101      	movs	r1, #1
 800cce6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cce8:	79fb      	ldrb	r3, [r7, #7]
 800ccea:	4a09      	ldr	r2, [pc, #36]	; (800cd10 <disk_initialize+0x48>)
 800ccec:	009b      	lsls	r3, r3, #2
 800ccee:	4413      	add	r3, r2
 800ccf0:	685b      	ldr	r3, [r3, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	79fa      	ldrb	r2, [r7, #7]
 800ccf6:	4906      	ldr	r1, [pc, #24]	; (800cd10 <disk_initialize+0x48>)
 800ccf8:	440a      	add	r2, r1
 800ccfa:	7d12      	ldrb	r2, [r2, #20]
 800ccfc:	4610      	mov	r0, r2
 800ccfe:	4798      	blx	r3
 800cd00:	4603      	mov	r3, r0
 800cd02:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800cd04:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3710      	adds	r7, #16
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}
 800cd0e:	bf00      	nop
 800cd10:	200022ec 	.word	0x200022ec

0800cd14 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cd14:	b590      	push	{r4, r7, lr}
 800cd16:	b087      	sub	sp, #28
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	60b9      	str	r1, [r7, #8]
 800cd1c:	607a      	str	r2, [r7, #4]
 800cd1e:	603b      	str	r3, [r7, #0]
 800cd20:	4603      	mov	r3, r0
 800cd22:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cd24:	7bfb      	ldrb	r3, [r7, #15]
 800cd26:	4a0a      	ldr	r2, [pc, #40]	; (800cd50 <disk_read+0x3c>)
 800cd28:	009b      	lsls	r3, r3, #2
 800cd2a:	4413      	add	r3, r2
 800cd2c:	685b      	ldr	r3, [r3, #4]
 800cd2e:	689c      	ldr	r4, [r3, #8]
 800cd30:	7bfb      	ldrb	r3, [r7, #15]
 800cd32:	4a07      	ldr	r2, [pc, #28]	; (800cd50 <disk_read+0x3c>)
 800cd34:	4413      	add	r3, r2
 800cd36:	7d18      	ldrb	r0, [r3, #20]
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	687a      	ldr	r2, [r7, #4]
 800cd3c:	68b9      	ldr	r1, [r7, #8]
 800cd3e:	47a0      	blx	r4
 800cd40:	4603      	mov	r3, r0
 800cd42:	75fb      	strb	r3, [r7, #23]
  return res;
 800cd44:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	371c      	adds	r7, #28
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd90      	pop	{r4, r7, pc}
 800cd4e:	bf00      	nop
 800cd50:	200022ec 	.word	0x200022ec

0800cd54 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cd54:	b590      	push	{r4, r7, lr}
 800cd56:	b087      	sub	sp, #28
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	60b9      	str	r1, [r7, #8]
 800cd5c:	607a      	str	r2, [r7, #4]
 800cd5e:	603b      	str	r3, [r7, #0]
 800cd60:	4603      	mov	r3, r0
 800cd62:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cd64:	7bfb      	ldrb	r3, [r7, #15]
 800cd66:	4a0a      	ldr	r2, [pc, #40]	; (800cd90 <disk_write+0x3c>)
 800cd68:	009b      	lsls	r3, r3, #2
 800cd6a:	4413      	add	r3, r2
 800cd6c:	685b      	ldr	r3, [r3, #4]
 800cd6e:	68dc      	ldr	r4, [r3, #12]
 800cd70:	7bfb      	ldrb	r3, [r7, #15]
 800cd72:	4a07      	ldr	r2, [pc, #28]	; (800cd90 <disk_write+0x3c>)
 800cd74:	4413      	add	r3, r2
 800cd76:	7d18      	ldrb	r0, [r3, #20]
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	687a      	ldr	r2, [r7, #4]
 800cd7c:	68b9      	ldr	r1, [r7, #8]
 800cd7e:	47a0      	blx	r4
 800cd80:	4603      	mov	r3, r0
 800cd82:	75fb      	strb	r3, [r7, #23]
  return res;
 800cd84:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	371c      	adds	r7, #28
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd90      	pop	{r4, r7, pc}
 800cd8e:	bf00      	nop
 800cd90:	200022ec 	.word	0x200022ec

0800cd94 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b084      	sub	sp, #16
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	603a      	str	r2, [r7, #0]
 800cd9e:	71fb      	strb	r3, [r7, #7]
 800cda0:	460b      	mov	r3, r1
 800cda2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cda4:	79fb      	ldrb	r3, [r7, #7]
 800cda6:	4a09      	ldr	r2, [pc, #36]	; (800cdcc <disk_ioctl+0x38>)
 800cda8:	009b      	lsls	r3, r3, #2
 800cdaa:	4413      	add	r3, r2
 800cdac:	685b      	ldr	r3, [r3, #4]
 800cdae:	691b      	ldr	r3, [r3, #16]
 800cdb0:	79fa      	ldrb	r2, [r7, #7]
 800cdb2:	4906      	ldr	r1, [pc, #24]	; (800cdcc <disk_ioctl+0x38>)
 800cdb4:	440a      	add	r2, r1
 800cdb6:	7d10      	ldrb	r0, [r2, #20]
 800cdb8:	79b9      	ldrb	r1, [r7, #6]
 800cdba:	683a      	ldr	r2, [r7, #0]
 800cdbc:	4798      	blx	r3
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	73fb      	strb	r3, [r7, #15]
  return res;
 800cdc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3710      	adds	r7, #16
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}
 800cdcc:	200022ec 	.word	0x200022ec

0800cdd0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b085      	sub	sp, #20
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	3301      	adds	r3, #1
 800cddc:	781b      	ldrb	r3, [r3, #0]
 800cdde:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cde0:	89fb      	ldrh	r3, [r7, #14]
 800cde2:	021b      	lsls	r3, r3, #8
 800cde4:	b21a      	sxth	r2, r3
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	b21b      	sxth	r3, r3
 800cdec:	4313      	orrs	r3, r2
 800cdee:	b21b      	sxth	r3, r3
 800cdf0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cdf2:	89fb      	ldrh	r3, [r7, #14]
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3714      	adds	r7, #20
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr

0800ce00 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ce00:	b480      	push	{r7}
 800ce02:	b085      	sub	sp, #20
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	3303      	adds	r3, #3
 800ce0c:	781b      	ldrb	r3, [r3, #0]
 800ce0e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	021b      	lsls	r3, r3, #8
 800ce14:	687a      	ldr	r2, [r7, #4]
 800ce16:	3202      	adds	r2, #2
 800ce18:	7812      	ldrb	r2, [r2, #0]
 800ce1a:	4313      	orrs	r3, r2
 800ce1c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	021b      	lsls	r3, r3, #8
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	3201      	adds	r2, #1
 800ce26:	7812      	ldrb	r2, [r2, #0]
 800ce28:	4313      	orrs	r3, r2
 800ce2a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	021b      	lsls	r3, r3, #8
 800ce30:	687a      	ldr	r2, [r7, #4]
 800ce32:	7812      	ldrb	r2, [r2, #0]
 800ce34:	4313      	orrs	r3, r2
 800ce36:	60fb      	str	r3, [r7, #12]
	return rv;
 800ce38:	68fb      	ldr	r3, [r7, #12]
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3714      	adds	r7, #20
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce44:	4770      	bx	lr

0800ce46 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800ce46:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800ce4a:	b09d      	sub	sp, #116	; 0x74
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 800ce50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce52:	3307      	adds	r3, #7
 800ce54:	781b      	ldrb	r3, [r3, #0]
 800ce56:	b2db      	uxtb	r3, r3
 800ce58:	2200      	movs	r2, #0
 800ce5a:	469a      	mov	sl, r3
 800ce5c:	4693      	mov	fp, r2
 800ce5e:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 800ce62:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800ce66:	f04f 0000 	mov.w	r0, #0
 800ce6a:	f04f 0100 	mov.w	r1, #0
 800ce6e:	0219      	lsls	r1, r3, #8
 800ce70:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800ce74:	0210      	lsls	r0, r2, #8
 800ce76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce78:	3306      	adds	r3, #6
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	b2db      	uxtb	r3, r3
 800ce7e:	2200      	movs	r2, #0
 800ce80:	461c      	mov	r4, r3
 800ce82:	4615      	mov	r5, r2
 800ce84:	ea40 0804 	orr.w	r8, r0, r4
 800ce88:	ea41 0905 	orr.w	r9, r1, r5
 800ce8c:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 800ce90:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800ce94:	f04f 0000 	mov.w	r0, #0
 800ce98:	f04f 0100 	mov.w	r1, #0
 800ce9c:	0219      	lsls	r1, r3, #8
 800ce9e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800cea2:	0210      	lsls	r0, r2, #8
 800cea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cea6:	3305      	adds	r3, #5
 800cea8:	781b      	ldrb	r3, [r3, #0]
 800ceaa:	b2db      	uxtb	r3, r3
 800ceac:	2200      	movs	r2, #0
 800ceae:	65bb      	str	r3, [r7, #88]	; 0x58
 800ceb0:	65fa      	str	r2, [r7, #92]	; 0x5c
 800ceb2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800ceb6:	4623      	mov	r3, r4
 800ceb8:	4303      	orrs	r3, r0
 800ceba:	62bb      	str	r3, [r7, #40]	; 0x28
 800cebc:	462b      	mov	r3, r5
 800cebe:	430b      	orrs	r3, r1
 800cec0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cec2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800cec6:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 800ceca:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800cece:	f04f 0000 	mov.w	r0, #0
 800ced2:	f04f 0100 	mov.w	r1, #0
 800ced6:	0219      	lsls	r1, r3, #8
 800ced8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800cedc:	0210      	lsls	r0, r2, #8
 800cede:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cee0:	3304      	adds	r3, #4
 800cee2:	781b      	ldrb	r3, [r3, #0]
 800cee4:	b2db      	uxtb	r3, r3
 800cee6:	2200      	movs	r2, #0
 800cee8:	653b      	str	r3, [r7, #80]	; 0x50
 800ceea:	657a      	str	r2, [r7, #84]	; 0x54
 800ceec:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800cef0:	4623      	mov	r3, r4
 800cef2:	4303      	orrs	r3, r0
 800cef4:	623b      	str	r3, [r7, #32]
 800cef6:	462b      	mov	r3, r5
 800cef8:	430b      	orrs	r3, r1
 800cefa:	627b      	str	r3, [r7, #36]	; 0x24
 800cefc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800cf00:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 800cf04:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800cf08:	f04f 0000 	mov.w	r0, #0
 800cf0c:	f04f 0100 	mov.w	r1, #0
 800cf10:	0219      	lsls	r1, r3, #8
 800cf12:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800cf16:	0210      	lsls	r0, r2, #8
 800cf18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf1a:	3303      	adds	r3, #3
 800cf1c:	781b      	ldrb	r3, [r3, #0]
 800cf1e:	b2db      	uxtb	r3, r3
 800cf20:	2200      	movs	r2, #0
 800cf22:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf24:	64fa      	str	r2, [r7, #76]	; 0x4c
 800cf26:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800cf2a:	4623      	mov	r3, r4
 800cf2c:	4303      	orrs	r3, r0
 800cf2e:	61bb      	str	r3, [r7, #24]
 800cf30:	462b      	mov	r3, r5
 800cf32:	430b      	orrs	r3, r1
 800cf34:	61fb      	str	r3, [r7, #28]
 800cf36:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800cf3a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 800cf3e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800cf42:	f04f 0000 	mov.w	r0, #0
 800cf46:	f04f 0100 	mov.w	r1, #0
 800cf4a:	0219      	lsls	r1, r3, #8
 800cf4c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800cf50:	0210      	lsls	r0, r2, #8
 800cf52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf54:	3302      	adds	r3, #2
 800cf56:	781b      	ldrb	r3, [r3, #0]
 800cf58:	b2db      	uxtb	r3, r3
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	643b      	str	r3, [r7, #64]	; 0x40
 800cf5e:	647a      	str	r2, [r7, #68]	; 0x44
 800cf60:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800cf64:	4623      	mov	r3, r4
 800cf66:	4303      	orrs	r3, r0
 800cf68:	613b      	str	r3, [r7, #16]
 800cf6a:	462b      	mov	r3, r5
 800cf6c:	430b      	orrs	r3, r1
 800cf6e:	617b      	str	r3, [r7, #20]
 800cf70:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800cf74:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 800cf78:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800cf7c:	f04f 0200 	mov.w	r2, #0
 800cf80:	f04f 0300 	mov.w	r3, #0
 800cf84:	020b      	lsls	r3, r1, #8
 800cf86:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cf8a:	0202      	lsls	r2, r0, #8
 800cf8c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800cf8e:	3101      	adds	r1, #1
 800cf90:	7809      	ldrb	r1, [r1, #0]
 800cf92:	b2c9      	uxtb	r1, r1
 800cf94:	2000      	movs	r0, #0
 800cf96:	63b9      	str	r1, [r7, #56]	; 0x38
 800cf98:	63f8      	str	r0, [r7, #60]	; 0x3c
 800cf9a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800cf9e:	4621      	mov	r1, r4
 800cfa0:	4311      	orrs	r1, r2
 800cfa2:	60b9      	str	r1, [r7, #8]
 800cfa4:	4629      	mov	r1, r5
 800cfa6:	4319      	orrs	r1, r3
 800cfa8:	60f9      	str	r1, [r7, #12]
 800cfaa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800cfae:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 800cfb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800cfb6:	f04f 0200 	mov.w	r2, #0
 800cfba:	f04f 0300 	mov.w	r3, #0
 800cfbe:	020b      	lsls	r3, r1, #8
 800cfc0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cfc4:	0202      	lsls	r2, r0, #8
 800cfc6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800cfc8:	7809      	ldrb	r1, [r1, #0]
 800cfca:	b2c9      	uxtb	r1, r1
 800cfcc:	2000      	movs	r0, #0
 800cfce:	6339      	str	r1, [r7, #48]	; 0x30
 800cfd0:	6378      	str	r0, [r7, #52]	; 0x34
 800cfd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800cfd6:	4621      	mov	r1, r4
 800cfd8:	4311      	orrs	r1, r2
 800cfda:	6039      	str	r1, [r7, #0]
 800cfdc:	4629      	mov	r1, r5
 800cfde:	4319      	orrs	r1, r3
 800cfe0:	6079      	str	r1, [r7, #4]
 800cfe2:	e9d7 3400 	ldrd	r3, r4, [r7]
 800cfe6:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 800cfea:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 800cfee:	4610      	mov	r0, r2
 800cff0:	4619      	mov	r1, r3
 800cff2:	3774      	adds	r7, #116	; 0x74
 800cff4:	46bd      	mov	sp, r7
 800cff6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800cffa:	4770      	bx	lr

0800cffc <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cffc:	b480      	push	{r7}
 800cffe:	b083      	sub	sp, #12
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	460b      	mov	r3, r1
 800d006:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	1c5a      	adds	r2, r3, #1
 800d00c:	607a      	str	r2, [r7, #4]
 800d00e:	887a      	ldrh	r2, [r7, #2]
 800d010:	b2d2      	uxtb	r2, r2
 800d012:	701a      	strb	r2, [r3, #0]
 800d014:	887b      	ldrh	r3, [r7, #2]
 800d016:	0a1b      	lsrs	r3, r3, #8
 800d018:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	1c5a      	adds	r2, r3, #1
 800d01e:	607a      	str	r2, [r7, #4]
 800d020:	887a      	ldrh	r2, [r7, #2]
 800d022:	b2d2      	uxtb	r2, r2
 800d024:	701a      	strb	r2, [r3, #0]
}
 800d026:	bf00      	nop
 800d028:	370c      	adds	r7, #12
 800d02a:	46bd      	mov	sp, r7
 800d02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d030:	4770      	bx	lr

0800d032 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d032:	b480      	push	{r7}
 800d034:	b083      	sub	sp, #12
 800d036:	af00      	add	r7, sp, #0
 800d038:	6078      	str	r0, [r7, #4]
 800d03a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	1c5a      	adds	r2, r3, #1
 800d040:	607a      	str	r2, [r7, #4]
 800d042:	683a      	ldr	r2, [r7, #0]
 800d044:	b2d2      	uxtb	r2, r2
 800d046:	701a      	strb	r2, [r3, #0]
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	0a1b      	lsrs	r3, r3, #8
 800d04c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	1c5a      	adds	r2, r3, #1
 800d052:	607a      	str	r2, [r7, #4]
 800d054:	683a      	ldr	r2, [r7, #0]
 800d056:	b2d2      	uxtb	r2, r2
 800d058:	701a      	strb	r2, [r3, #0]
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	0a1b      	lsrs	r3, r3, #8
 800d05e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	1c5a      	adds	r2, r3, #1
 800d064:	607a      	str	r2, [r7, #4]
 800d066:	683a      	ldr	r2, [r7, #0]
 800d068:	b2d2      	uxtb	r2, r2
 800d06a:	701a      	strb	r2, [r3, #0]
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	0a1b      	lsrs	r3, r3, #8
 800d070:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	1c5a      	adds	r2, r3, #1
 800d076:	607a      	str	r2, [r7, #4]
 800d078:	683a      	ldr	r2, [r7, #0]
 800d07a:	b2d2      	uxtb	r2, r2
 800d07c:	701a      	strb	r2, [r3, #0]
}
 800d07e:	bf00      	nop
 800d080:	370c      	adds	r7, #12
 800d082:	46bd      	mov	sp, r7
 800d084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d088:	4770      	bx	lr

0800d08a <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800d08a:	b480      	push	{r7}
 800d08c:	b085      	sub	sp, #20
 800d08e:	af00      	add	r7, sp, #0
 800d090:	60f8      	str	r0, [r7, #12]
 800d092:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	1c5a      	adds	r2, r3, #1
 800d09a:	60fa      	str	r2, [r7, #12]
 800d09c:	783a      	ldrb	r2, [r7, #0]
 800d09e:	701a      	strb	r2, [r3, #0]
 800d0a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d0a4:	f04f 0200 	mov.w	r2, #0
 800d0a8:	f04f 0300 	mov.w	r3, #0
 800d0ac:	0a02      	lsrs	r2, r0, #8
 800d0ae:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d0b2:	0a0b      	lsrs	r3, r1, #8
 800d0b4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	1c5a      	adds	r2, r3, #1
 800d0bc:	60fa      	str	r2, [r7, #12]
 800d0be:	783a      	ldrb	r2, [r7, #0]
 800d0c0:	701a      	strb	r2, [r3, #0]
 800d0c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d0c6:	f04f 0200 	mov.w	r2, #0
 800d0ca:	f04f 0300 	mov.w	r3, #0
 800d0ce:	0a02      	lsrs	r2, r0, #8
 800d0d0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d0d4:	0a0b      	lsrs	r3, r1, #8
 800d0d6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	1c5a      	adds	r2, r3, #1
 800d0de:	60fa      	str	r2, [r7, #12]
 800d0e0:	783a      	ldrb	r2, [r7, #0]
 800d0e2:	701a      	strb	r2, [r3, #0]
 800d0e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d0e8:	f04f 0200 	mov.w	r2, #0
 800d0ec:	f04f 0300 	mov.w	r3, #0
 800d0f0:	0a02      	lsrs	r2, r0, #8
 800d0f2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d0f6:	0a0b      	lsrs	r3, r1, #8
 800d0f8:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	1c5a      	adds	r2, r3, #1
 800d100:	60fa      	str	r2, [r7, #12]
 800d102:	783a      	ldrb	r2, [r7, #0]
 800d104:	701a      	strb	r2, [r3, #0]
 800d106:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d10a:	f04f 0200 	mov.w	r2, #0
 800d10e:	f04f 0300 	mov.w	r3, #0
 800d112:	0a02      	lsrs	r2, r0, #8
 800d114:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d118:	0a0b      	lsrs	r3, r1, #8
 800d11a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	1c5a      	adds	r2, r3, #1
 800d122:	60fa      	str	r2, [r7, #12]
 800d124:	783a      	ldrb	r2, [r7, #0]
 800d126:	701a      	strb	r2, [r3, #0]
 800d128:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d12c:	f04f 0200 	mov.w	r2, #0
 800d130:	f04f 0300 	mov.w	r3, #0
 800d134:	0a02      	lsrs	r2, r0, #8
 800d136:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d13a:	0a0b      	lsrs	r3, r1, #8
 800d13c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	1c5a      	adds	r2, r3, #1
 800d144:	60fa      	str	r2, [r7, #12]
 800d146:	783a      	ldrb	r2, [r7, #0]
 800d148:	701a      	strb	r2, [r3, #0]
 800d14a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d14e:	f04f 0200 	mov.w	r2, #0
 800d152:	f04f 0300 	mov.w	r3, #0
 800d156:	0a02      	lsrs	r2, r0, #8
 800d158:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d15c:	0a0b      	lsrs	r3, r1, #8
 800d15e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	1c5a      	adds	r2, r3, #1
 800d166:	60fa      	str	r2, [r7, #12]
 800d168:	783a      	ldrb	r2, [r7, #0]
 800d16a:	701a      	strb	r2, [r3, #0]
 800d16c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d170:	f04f 0200 	mov.w	r2, #0
 800d174:	f04f 0300 	mov.w	r3, #0
 800d178:	0a02      	lsrs	r2, r0, #8
 800d17a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d17e:	0a0b      	lsrs	r3, r1, #8
 800d180:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	1c5a      	adds	r2, r3, #1
 800d188:	60fa      	str	r2, [r7, #12]
 800d18a:	783a      	ldrb	r2, [r7, #0]
 800d18c:	701a      	strb	r2, [r3, #0]
}
 800d18e:	bf00      	nop
 800d190:	3714      	adds	r7, #20
 800d192:	46bd      	mov	sp, r7
 800d194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d198:	4770      	bx	lr

0800d19a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d19a:	b480      	push	{r7}
 800d19c:	b087      	sub	sp, #28
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	60f8      	str	r0, [r7, #12]
 800d1a2:	60b9      	str	r1, [r7, #8]
 800d1a4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d00d      	beq.n	800d1d0 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d1b4:	693a      	ldr	r2, [r7, #16]
 800d1b6:	1c53      	adds	r3, r2, #1
 800d1b8:	613b      	str	r3, [r7, #16]
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	1c59      	adds	r1, r3, #1
 800d1be:	6179      	str	r1, [r7, #20]
 800d1c0:	7812      	ldrb	r2, [r2, #0]
 800d1c2:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	3b01      	subs	r3, #1
 800d1c8:	607b      	str	r3, [r7, #4]
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d1f1      	bne.n	800d1b4 <mem_cpy+0x1a>
	}
}
 800d1d0:	bf00      	nop
 800d1d2:	371c      	adds	r7, #28
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1da:	4770      	bx	lr

0800d1dc <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d1dc:	b480      	push	{r7}
 800d1de:	b087      	sub	sp, #28
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	60f8      	str	r0, [r7, #12]
 800d1e4:	60b9      	str	r1, [r7, #8]
 800d1e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	1c5a      	adds	r2, r3, #1
 800d1f0:	617a      	str	r2, [r7, #20]
 800d1f2:	68ba      	ldr	r2, [r7, #8]
 800d1f4:	b2d2      	uxtb	r2, r2
 800d1f6:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	3b01      	subs	r3, #1
 800d1fc:	607b      	str	r3, [r7, #4]
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d1f3      	bne.n	800d1ec <mem_set+0x10>
}
 800d204:	bf00      	nop
 800d206:	bf00      	nop
 800d208:	371c      	adds	r7, #28
 800d20a:	46bd      	mov	sp, r7
 800d20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d210:	4770      	bx	lr

0800d212 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d212:	b480      	push	{r7}
 800d214:	b089      	sub	sp, #36	; 0x24
 800d216:	af00      	add	r7, sp, #0
 800d218:	60f8      	str	r0, [r7, #12]
 800d21a:	60b9      	str	r1, [r7, #8]
 800d21c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	61fb      	str	r3, [r7, #28]
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d226:	2300      	movs	r3, #0
 800d228:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d22a:	69fb      	ldr	r3, [r7, #28]
 800d22c:	1c5a      	adds	r2, r3, #1
 800d22e:	61fa      	str	r2, [r7, #28]
 800d230:	781b      	ldrb	r3, [r3, #0]
 800d232:	4619      	mov	r1, r3
 800d234:	69bb      	ldr	r3, [r7, #24]
 800d236:	1c5a      	adds	r2, r3, #1
 800d238:	61ba      	str	r2, [r7, #24]
 800d23a:	781b      	ldrb	r3, [r3, #0]
 800d23c:	1acb      	subs	r3, r1, r3
 800d23e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	3b01      	subs	r3, #1
 800d244:	607b      	str	r3, [r7, #4]
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d002      	beq.n	800d252 <mem_cmp+0x40>
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d0eb      	beq.n	800d22a <mem_cmp+0x18>

	return r;
 800d252:	697b      	ldr	r3, [r7, #20]
}
 800d254:	4618      	mov	r0, r3
 800d256:	3724      	adds	r7, #36	; 0x24
 800d258:	46bd      	mov	sp, r7
 800d25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25e:	4770      	bx	lr

0800d260 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d260:	b480      	push	{r7}
 800d262:	b083      	sub	sp, #12
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
 800d268:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d26a:	e002      	b.n	800d272 <chk_chr+0x12>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	3301      	adds	r3, #1
 800d270:	607b      	str	r3, [r7, #4]
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	781b      	ldrb	r3, [r3, #0]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d005      	beq.n	800d286 <chk_chr+0x26>
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	781b      	ldrb	r3, [r3, #0]
 800d27e:	461a      	mov	r2, r3
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	4293      	cmp	r3, r2
 800d284:	d1f2      	bne.n	800d26c <chk_chr+0xc>
	return *str;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	781b      	ldrb	r3, [r3, #0]
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	370c      	adds	r7, #12
 800d28e:	46bd      	mov	sp, r7
 800d290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d294:	4770      	bx	lr
	...

0800d298 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d298:	b480      	push	{r7}
 800d29a:	b085      	sub	sp, #20
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
 800d2a0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	60bb      	str	r3, [r7, #8]
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	60fb      	str	r3, [r7, #12]
 800d2aa:	e029      	b.n	800d300 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d2ac:	4a27      	ldr	r2, [pc, #156]	; (800d34c <chk_lock+0xb4>)
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	011b      	lsls	r3, r3, #4
 800d2b2:	4413      	add	r3, r2
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d01d      	beq.n	800d2f6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d2ba:	4a24      	ldr	r2, [pc, #144]	; (800d34c <chk_lock+0xb4>)
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	011b      	lsls	r3, r3, #4
 800d2c0:	4413      	add	r3, r2
 800d2c2:	681a      	ldr	r2, [r3, #0]
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	429a      	cmp	r2, r3
 800d2ca:	d116      	bne.n	800d2fa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d2cc:	4a1f      	ldr	r2, [pc, #124]	; (800d34c <chk_lock+0xb4>)
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	011b      	lsls	r3, r3, #4
 800d2d2:	4413      	add	r3, r2
 800d2d4:	3304      	adds	r3, #4
 800d2d6:	681a      	ldr	r2, [r3, #0]
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	d10c      	bne.n	800d2fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d2e0:	4a1a      	ldr	r2, [pc, #104]	; (800d34c <chk_lock+0xb4>)
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	011b      	lsls	r3, r3, #4
 800d2e6:	4413      	add	r3, r2
 800d2e8:	3308      	adds	r3, #8
 800d2ea:	681a      	ldr	r2, [r3, #0]
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800d2f0:	429a      	cmp	r2, r3
 800d2f2:	d102      	bne.n	800d2fa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d2f4:	e007      	b.n	800d306 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	3301      	adds	r3, #1
 800d2fe:	60fb      	str	r3, [r7, #12]
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	2b01      	cmp	r3, #1
 800d304:	d9d2      	bls.n	800d2ac <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	2b02      	cmp	r3, #2
 800d30a:	d109      	bne.n	800d320 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d102      	bne.n	800d318 <chk_lock+0x80>
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	2b02      	cmp	r3, #2
 800d316:	d101      	bne.n	800d31c <chk_lock+0x84>
 800d318:	2300      	movs	r3, #0
 800d31a:	e010      	b.n	800d33e <chk_lock+0xa6>
 800d31c:	2312      	movs	r3, #18
 800d31e:	e00e      	b.n	800d33e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d108      	bne.n	800d338 <chk_lock+0xa0>
 800d326:	4a09      	ldr	r2, [pc, #36]	; (800d34c <chk_lock+0xb4>)
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	011b      	lsls	r3, r3, #4
 800d32c:	4413      	add	r3, r2
 800d32e:	330c      	adds	r3, #12
 800d330:	881b      	ldrh	r3, [r3, #0]
 800d332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d336:	d101      	bne.n	800d33c <chk_lock+0xa4>
 800d338:	2310      	movs	r3, #16
 800d33a:	e000      	b.n	800d33e <chk_lock+0xa6>
 800d33c:	2300      	movs	r3, #0
}
 800d33e:	4618      	mov	r0, r3
 800d340:	3714      	adds	r7, #20
 800d342:	46bd      	mov	sp, r7
 800d344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d348:	4770      	bx	lr
 800d34a:	bf00      	nop
 800d34c:	20001e6c 	.word	0x20001e6c

0800d350 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d350:	b480      	push	{r7}
 800d352:	b083      	sub	sp, #12
 800d354:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d356:	2300      	movs	r3, #0
 800d358:	607b      	str	r3, [r7, #4]
 800d35a:	e002      	b.n	800d362 <enq_lock+0x12>
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	3301      	adds	r3, #1
 800d360:	607b      	str	r3, [r7, #4]
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2b01      	cmp	r3, #1
 800d366:	d806      	bhi.n	800d376 <enq_lock+0x26>
 800d368:	4a09      	ldr	r2, [pc, #36]	; (800d390 <enq_lock+0x40>)
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	011b      	lsls	r3, r3, #4
 800d36e:	4413      	add	r3, r2
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d1f2      	bne.n	800d35c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2b02      	cmp	r3, #2
 800d37a:	bf14      	ite	ne
 800d37c:	2301      	movne	r3, #1
 800d37e:	2300      	moveq	r3, #0
 800d380:	b2db      	uxtb	r3, r3
}
 800d382:	4618      	mov	r0, r3
 800d384:	370c      	adds	r7, #12
 800d386:	46bd      	mov	sp, r7
 800d388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38c:	4770      	bx	lr
 800d38e:	bf00      	nop
 800d390:	20001e6c 	.word	0x20001e6c

0800d394 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d394:	b480      	push	{r7}
 800d396:	b085      	sub	sp, #20
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d39e:	2300      	movs	r3, #0
 800d3a0:	60fb      	str	r3, [r7, #12]
 800d3a2:	e01f      	b.n	800d3e4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d3a4:	4a41      	ldr	r2, [pc, #260]	; (800d4ac <inc_lock+0x118>)
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	011b      	lsls	r3, r3, #4
 800d3aa:	4413      	add	r3, r2
 800d3ac:	681a      	ldr	r2, [r3, #0]
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	d113      	bne.n	800d3de <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d3b6:	4a3d      	ldr	r2, [pc, #244]	; (800d4ac <inc_lock+0x118>)
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	011b      	lsls	r3, r3, #4
 800d3bc:	4413      	add	r3, r2
 800d3be:	3304      	adds	r3, #4
 800d3c0:	681a      	ldr	r2, [r3, #0]
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d109      	bne.n	800d3de <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d3ca:	4a38      	ldr	r2, [pc, #224]	; (800d4ac <inc_lock+0x118>)
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	011b      	lsls	r3, r3, #4
 800d3d0:	4413      	add	r3, r2
 800d3d2:	3308      	adds	r3, #8
 800d3d4:	681a      	ldr	r2, [r3, #0]
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d006      	beq.n	800d3ec <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	3301      	adds	r3, #1
 800d3e2:	60fb      	str	r3, [r7, #12]
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	2b01      	cmp	r3, #1
 800d3e8:	d9dc      	bls.n	800d3a4 <inc_lock+0x10>
 800d3ea:	e000      	b.n	800d3ee <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d3ec:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	2b02      	cmp	r3, #2
 800d3f2:	d132      	bne.n	800d45a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	60fb      	str	r3, [r7, #12]
 800d3f8:	e002      	b.n	800d400 <inc_lock+0x6c>
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	3301      	adds	r3, #1
 800d3fe:	60fb      	str	r3, [r7, #12]
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	2b01      	cmp	r3, #1
 800d404:	d806      	bhi.n	800d414 <inc_lock+0x80>
 800d406:	4a29      	ldr	r2, [pc, #164]	; (800d4ac <inc_lock+0x118>)
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	011b      	lsls	r3, r3, #4
 800d40c:	4413      	add	r3, r2
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d1f2      	bne.n	800d3fa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	2b02      	cmp	r3, #2
 800d418:	d101      	bne.n	800d41e <inc_lock+0x8a>
 800d41a:	2300      	movs	r3, #0
 800d41c:	e040      	b.n	800d4a0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681a      	ldr	r2, [r3, #0]
 800d422:	4922      	ldr	r1, [pc, #136]	; (800d4ac <inc_lock+0x118>)
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	011b      	lsls	r3, r3, #4
 800d428:	440b      	add	r3, r1
 800d42a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	689a      	ldr	r2, [r3, #8]
 800d430:	491e      	ldr	r1, [pc, #120]	; (800d4ac <inc_lock+0x118>)
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	011b      	lsls	r3, r3, #4
 800d436:	440b      	add	r3, r1
 800d438:	3304      	adds	r3, #4
 800d43a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d440:	491a      	ldr	r1, [pc, #104]	; (800d4ac <inc_lock+0x118>)
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	011b      	lsls	r3, r3, #4
 800d446:	440b      	add	r3, r1
 800d448:	3308      	adds	r3, #8
 800d44a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d44c:	4a17      	ldr	r2, [pc, #92]	; (800d4ac <inc_lock+0x118>)
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	011b      	lsls	r3, r3, #4
 800d452:	4413      	add	r3, r2
 800d454:	330c      	adds	r3, #12
 800d456:	2200      	movs	r2, #0
 800d458:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d009      	beq.n	800d474 <inc_lock+0xe0>
 800d460:	4a12      	ldr	r2, [pc, #72]	; (800d4ac <inc_lock+0x118>)
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	011b      	lsls	r3, r3, #4
 800d466:	4413      	add	r3, r2
 800d468:	330c      	adds	r3, #12
 800d46a:	881b      	ldrh	r3, [r3, #0]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d001      	beq.n	800d474 <inc_lock+0xe0>
 800d470:	2300      	movs	r3, #0
 800d472:	e015      	b.n	800d4a0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d108      	bne.n	800d48c <inc_lock+0xf8>
 800d47a:	4a0c      	ldr	r2, [pc, #48]	; (800d4ac <inc_lock+0x118>)
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	011b      	lsls	r3, r3, #4
 800d480:	4413      	add	r3, r2
 800d482:	330c      	adds	r3, #12
 800d484:	881b      	ldrh	r3, [r3, #0]
 800d486:	3301      	adds	r3, #1
 800d488:	b29a      	uxth	r2, r3
 800d48a:	e001      	b.n	800d490 <inc_lock+0xfc>
 800d48c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d490:	4906      	ldr	r1, [pc, #24]	; (800d4ac <inc_lock+0x118>)
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	011b      	lsls	r3, r3, #4
 800d496:	440b      	add	r3, r1
 800d498:	330c      	adds	r3, #12
 800d49a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	3301      	adds	r3, #1
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3714      	adds	r7, #20
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr
 800d4ac:	20001e6c 	.word	0x20001e6c

0800d4b0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b085      	sub	sp, #20
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	3b01      	subs	r3, #1
 800d4bc:	607b      	str	r3, [r7, #4]
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2b01      	cmp	r3, #1
 800d4c2:	d825      	bhi.n	800d510 <dec_lock+0x60>
		n = Files[i].ctr;
 800d4c4:	4a17      	ldr	r2, [pc, #92]	; (800d524 <dec_lock+0x74>)
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	011b      	lsls	r3, r3, #4
 800d4ca:	4413      	add	r3, r2
 800d4cc:	330c      	adds	r3, #12
 800d4ce:	881b      	ldrh	r3, [r3, #0]
 800d4d0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d4d2:	89fb      	ldrh	r3, [r7, #14]
 800d4d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4d8:	d101      	bne.n	800d4de <dec_lock+0x2e>
 800d4da:	2300      	movs	r3, #0
 800d4dc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d4de:	89fb      	ldrh	r3, [r7, #14]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d002      	beq.n	800d4ea <dec_lock+0x3a>
 800d4e4:	89fb      	ldrh	r3, [r7, #14]
 800d4e6:	3b01      	subs	r3, #1
 800d4e8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d4ea:	4a0e      	ldr	r2, [pc, #56]	; (800d524 <dec_lock+0x74>)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	011b      	lsls	r3, r3, #4
 800d4f0:	4413      	add	r3, r2
 800d4f2:	330c      	adds	r3, #12
 800d4f4:	89fa      	ldrh	r2, [r7, #14]
 800d4f6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d4f8:	89fb      	ldrh	r3, [r7, #14]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d105      	bne.n	800d50a <dec_lock+0x5a>
 800d4fe:	4a09      	ldr	r2, [pc, #36]	; (800d524 <dec_lock+0x74>)
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	011b      	lsls	r3, r3, #4
 800d504:	4413      	add	r3, r2
 800d506:	2200      	movs	r2, #0
 800d508:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d50a:	2300      	movs	r3, #0
 800d50c:	737b      	strb	r3, [r7, #13]
 800d50e:	e001      	b.n	800d514 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d510:	2302      	movs	r3, #2
 800d512:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d514:	7b7b      	ldrb	r3, [r7, #13]
}
 800d516:	4618      	mov	r0, r3
 800d518:	3714      	adds	r7, #20
 800d51a:	46bd      	mov	sp, r7
 800d51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d520:	4770      	bx	lr
 800d522:	bf00      	nop
 800d524:	20001e6c 	.word	0x20001e6c

0800d528 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d528:	b480      	push	{r7}
 800d52a:	b085      	sub	sp, #20
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d530:	2300      	movs	r3, #0
 800d532:	60fb      	str	r3, [r7, #12]
 800d534:	e010      	b.n	800d558 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d536:	4a0d      	ldr	r2, [pc, #52]	; (800d56c <clear_lock+0x44>)
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	011b      	lsls	r3, r3, #4
 800d53c:	4413      	add	r3, r2
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	687a      	ldr	r2, [r7, #4]
 800d542:	429a      	cmp	r2, r3
 800d544:	d105      	bne.n	800d552 <clear_lock+0x2a>
 800d546:	4a09      	ldr	r2, [pc, #36]	; (800d56c <clear_lock+0x44>)
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	011b      	lsls	r3, r3, #4
 800d54c:	4413      	add	r3, r2
 800d54e:	2200      	movs	r2, #0
 800d550:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	3301      	adds	r3, #1
 800d556:	60fb      	str	r3, [r7, #12]
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	2b01      	cmp	r3, #1
 800d55c:	d9eb      	bls.n	800d536 <clear_lock+0xe>
	}
}
 800d55e:	bf00      	nop
 800d560:	bf00      	nop
 800d562:	3714      	adds	r7, #20
 800d564:	46bd      	mov	sp, r7
 800d566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56a:	4770      	bx	lr
 800d56c:	20001e6c 	.word	0x20001e6c

0800d570 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b086      	sub	sp, #24
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d578:	2300      	movs	r3, #0
 800d57a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	78db      	ldrb	r3, [r3, #3]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d034      	beq.n	800d5ee <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d588:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	7858      	ldrb	r0, [r3, #1]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d594:	2301      	movs	r3, #1
 800d596:	697a      	ldr	r2, [r7, #20]
 800d598:	f7ff fbdc 	bl	800cd54 <disk_write>
 800d59c:	4603      	mov	r3, r0
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d002      	beq.n	800d5a8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	73fb      	strb	r3, [r7, #15]
 800d5a6:	e022      	b.n	800d5ee <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5b2:	697a      	ldr	r2, [r7, #20]
 800d5b4:	1ad2      	subs	r2, r2, r3
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	6a1b      	ldr	r3, [r3, #32]
 800d5ba:	429a      	cmp	r2, r3
 800d5bc:	d217      	bcs.n	800d5ee <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	789b      	ldrb	r3, [r3, #2]
 800d5c2:	613b      	str	r3, [r7, #16]
 800d5c4:	e010      	b.n	800d5e8 <sync_window+0x78>
					wsect += fs->fsize;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6a1b      	ldr	r3, [r3, #32]
 800d5ca:	697a      	ldr	r2, [r7, #20]
 800d5cc:	4413      	add	r3, r2
 800d5ce:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	7858      	ldrb	r0, [r3, #1]
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d5da:	2301      	movs	r3, #1
 800d5dc:	697a      	ldr	r2, [r7, #20]
 800d5de:	f7ff fbb9 	bl	800cd54 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	3b01      	subs	r3, #1
 800d5e6:	613b      	str	r3, [r7, #16]
 800d5e8:	693b      	ldr	r3, [r7, #16]
 800d5ea:	2b01      	cmp	r3, #1
 800d5ec:	d8eb      	bhi.n	800d5c6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d5ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3718      	adds	r7, #24
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}

0800d5f8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b084      	sub	sp, #16
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
 800d600:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d602:	2300      	movs	r3, #0
 800d604:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d60a:	683a      	ldr	r2, [r7, #0]
 800d60c:	429a      	cmp	r2, r3
 800d60e:	d01b      	beq.n	800d648 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f7ff ffad 	bl	800d570 <sync_window>
 800d616:	4603      	mov	r3, r0
 800d618:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d61a:	7bfb      	ldrb	r3, [r7, #15]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d113      	bne.n	800d648 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	7858      	ldrb	r0, [r3, #1]
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d62a:	2301      	movs	r3, #1
 800d62c:	683a      	ldr	r2, [r7, #0]
 800d62e:	f7ff fb71 	bl	800cd14 <disk_read>
 800d632:	4603      	mov	r3, r0
 800d634:	2b00      	cmp	r3, #0
 800d636:	d004      	beq.n	800d642 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d638:	f04f 33ff 	mov.w	r3, #4294967295
 800d63c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d63e:	2301      	movs	r3, #1
 800d640:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	683a      	ldr	r2, [r7, #0]
 800d646:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800d648:	7bfb      	ldrb	r3, [r7, #15]
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	3710      	adds	r7, #16
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}
	...

0800d654 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b084      	sub	sp, #16
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f7ff ff87 	bl	800d570 <sync_window>
 800d662:	4603      	mov	r3, r0
 800d664:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d666:	7bfb      	ldrb	r3, [r7, #15]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d158      	bne.n	800d71e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	781b      	ldrb	r3, [r3, #0]
 800d670:	2b03      	cmp	r3, #3
 800d672:	d148      	bne.n	800d706 <sync_fs+0xb2>
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	791b      	ldrb	r3, [r3, #4]
 800d678:	2b01      	cmp	r3, #1
 800d67a:	d144      	bne.n	800d706 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	3338      	adds	r3, #56	; 0x38
 800d680:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d684:	2100      	movs	r1, #0
 800d686:	4618      	mov	r0, r3
 800d688:	f7ff fda8 	bl	800d1dc <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	3338      	adds	r3, #56	; 0x38
 800d690:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d694:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d698:	4618      	mov	r0, r3
 800d69a:	f7ff fcaf 	bl	800cffc <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	3338      	adds	r3, #56	; 0x38
 800d6a2:	4921      	ldr	r1, [pc, #132]	; (800d728 <sync_fs+0xd4>)
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f7ff fcc4 	bl	800d032 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	3338      	adds	r3, #56	; 0x38
 800d6ae:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d6b2:	491e      	ldr	r1, [pc, #120]	; (800d72c <sync_fs+0xd8>)
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f7ff fcbc 	bl	800d032 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	3338      	adds	r3, #56	; 0x38
 800d6be:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	699b      	ldr	r3, [r3, #24]
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	4610      	mov	r0, r2
 800d6ca:	f7ff fcb2 	bl	800d032 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	3338      	adds	r3, #56	; 0x38
 800d6d2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	695b      	ldr	r3, [r3, #20]
 800d6da:	4619      	mov	r1, r3
 800d6dc:	4610      	mov	r0, r2
 800d6de:	f7ff fca8 	bl	800d032 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6e6:	1c5a      	adds	r2, r3, #1
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	7858      	ldrb	r0, [r3, #1]
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	f7ff fb2a 	bl	800cd54 <disk_write>
			fs->fsi_flag = 0;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2200      	movs	r2, #0
 800d704:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	785b      	ldrb	r3, [r3, #1]
 800d70a:	2200      	movs	r2, #0
 800d70c:	2100      	movs	r1, #0
 800d70e:	4618      	mov	r0, r3
 800d710:	f7ff fb40 	bl	800cd94 <disk_ioctl>
 800d714:	4603      	mov	r3, r0
 800d716:	2b00      	cmp	r3, #0
 800d718:	d001      	beq.n	800d71e <sync_fs+0xca>
 800d71a:	2301      	movs	r3, #1
 800d71c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d71e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d720:	4618      	mov	r0, r3
 800d722:	3710      	adds	r7, #16
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}
 800d728:	41615252 	.word	0x41615252
 800d72c:	61417272 	.word	0x61417272

0800d730 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d730:	b480      	push	{r7}
 800d732:	b083      	sub	sp, #12
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
 800d738:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	3b02      	subs	r3, #2
 800d73e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	69db      	ldr	r3, [r3, #28]
 800d744:	3b02      	subs	r3, #2
 800d746:	683a      	ldr	r2, [r7, #0]
 800d748:	429a      	cmp	r2, r3
 800d74a:	d301      	bcc.n	800d750 <clust2sect+0x20>
 800d74c:	2300      	movs	r3, #0
 800d74e:	e008      	b.n	800d762 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	895b      	ldrh	r3, [r3, #10]
 800d754:	461a      	mov	r2, r3
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	fb03 f202 	mul.w	r2, r3, r2
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d760:	4413      	add	r3, r2
}
 800d762:	4618      	mov	r0, r3
 800d764:	370c      	adds	r7, #12
 800d766:	46bd      	mov	sp, r7
 800d768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76c:	4770      	bx	lr
	...

0800d770 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b088      	sub	sp, #32
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
 800d778:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d77a:	6879      	ldr	r1, [r7, #4]
 800d77c:	6809      	ldr	r1, [r1, #0]
 800d77e:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d780:	6839      	ldr	r1, [r7, #0]
 800d782:	2901      	cmp	r1, #1
 800d784:	d904      	bls.n	800d790 <get_fat+0x20>
 800d786:	69b9      	ldr	r1, [r7, #24]
 800d788:	69c9      	ldr	r1, [r1, #28]
 800d78a:	6838      	ldr	r0, [r7, #0]
 800d78c:	4288      	cmp	r0, r1
 800d78e:	d302      	bcc.n	800d796 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d790:	2301      	movs	r3, #1
 800d792:	61fb      	str	r3, [r7, #28]
 800d794:	e101      	b.n	800d99a <get_fat+0x22a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d796:	f04f 31ff 	mov.w	r1, #4294967295
 800d79a:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 800d79c:	69b9      	ldr	r1, [r7, #24]
 800d79e:	7809      	ldrb	r1, [r1, #0]
 800d7a0:	3901      	subs	r1, #1
 800d7a2:	2903      	cmp	r1, #3
 800d7a4:	f200 80ed 	bhi.w	800d982 <get_fat+0x212>
 800d7a8:	a001      	add	r0, pc, #4	; (adr r0, 800d7b0 <get_fat+0x40>)
 800d7aa:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d7ae:	bf00      	nop
 800d7b0:	0800d7c1 	.word	0x0800d7c1
 800d7b4:	0800d849 	.word	0x0800d849
 800d7b8:	0800d87f 	.word	0x0800d87f
 800d7bc:	0800d8b7 	.word	0x0800d8b7
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	60fb      	str	r3, [r7, #12]
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	085b      	lsrs	r3, r3, #1
 800d7c8:	68fa      	ldr	r2, [r7, #12]
 800d7ca:	4413      	add	r3, r2
 800d7cc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d7ce:	69bb      	ldr	r3, [r7, #24]
 800d7d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	0a5b      	lsrs	r3, r3, #9
 800d7d6:	4413      	add	r3, r2
 800d7d8:	4619      	mov	r1, r3
 800d7da:	69b8      	ldr	r0, [r7, #24]
 800d7dc:	f7ff ff0c 	bl	800d5f8 <move_window>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	f040 80d0 	bne.w	800d988 <get_fat+0x218>
			wc = fs->win[bc++ % SS(fs)];
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	1c5a      	adds	r2, r3, #1
 800d7ec:	60fa      	str	r2, [r7, #12]
 800d7ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7f2:	69ba      	ldr	r2, [r7, #24]
 800d7f4:	4413      	add	r3, r2
 800d7f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d7fa:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d7fc:	69bb      	ldr	r3, [r7, #24]
 800d7fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	0a5b      	lsrs	r3, r3, #9
 800d804:	4413      	add	r3, r2
 800d806:	4619      	mov	r1, r3
 800d808:	69b8      	ldr	r0, [r7, #24]
 800d80a:	f7ff fef5 	bl	800d5f8 <move_window>
 800d80e:	4603      	mov	r3, r0
 800d810:	2b00      	cmp	r3, #0
 800d812:	f040 80bb 	bne.w	800d98c <get_fat+0x21c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d81c:	69ba      	ldr	r2, [r7, #24]
 800d81e:	4413      	add	r3, r2
 800d820:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d824:	021b      	lsls	r3, r3, #8
 800d826:	461a      	mov	r2, r3
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	4313      	orrs	r3, r2
 800d82c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	f003 0301 	and.w	r3, r3, #1
 800d834:	2b00      	cmp	r3, #0
 800d836:	d002      	beq.n	800d83e <get_fat+0xce>
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	091b      	lsrs	r3, r3, #4
 800d83c:	e002      	b.n	800d844 <get_fat+0xd4>
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d844:	61fb      	str	r3, [r7, #28]
			break;
 800d846:	e0a8      	b.n	800d99a <get_fat+0x22a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d848:	69bb      	ldr	r3, [r7, #24]
 800d84a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	0a1b      	lsrs	r3, r3, #8
 800d850:	4413      	add	r3, r2
 800d852:	4619      	mov	r1, r3
 800d854:	69b8      	ldr	r0, [r7, #24]
 800d856:	f7ff fecf 	bl	800d5f8 <move_window>
 800d85a:	4603      	mov	r3, r0
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	f040 8097 	bne.w	800d990 <get_fat+0x220>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d862:	69bb      	ldr	r3, [r7, #24]
 800d864:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	005b      	lsls	r3, r3, #1
 800d86c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d870:	4413      	add	r3, r2
 800d872:	4618      	mov	r0, r3
 800d874:	f7ff faac 	bl	800cdd0 <ld_word>
 800d878:	4603      	mov	r3, r0
 800d87a:	61fb      	str	r3, [r7, #28]
			break;
 800d87c:	e08d      	b.n	800d99a <get_fat+0x22a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d87e:	69bb      	ldr	r3, [r7, #24]
 800d880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	09db      	lsrs	r3, r3, #7
 800d886:	4413      	add	r3, r2
 800d888:	4619      	mov	r1, r3
 800d88a:	69b8      	ldr	r0, [r7, #24]
 800d88c:	f7ff feb4 	bl	800d5f8 <move_window>
 800d890:	4603      	mov	r3, r0
 800d892:	2b00      	cmp	r3, #0
 800d894:	d17e      	bne.n	800d994 <get_fat+0x224>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d896:	69bb      	ldr	r3, [r7, #24]
 800d898:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	009b      	lsls	r3, r3, #2
 800d8a0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d8a4:	4413      	add	r3, r2
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f7ff faaa 	bl	800ce00 <ld_dword>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d8b2:	61fb      	str	r3, [r7, #28]
			break;
 800d8b4:	e071      	b.n	800d99a <get_fat+0x22a>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800d8b6:	6879      	ldr	r1, [r7, #4]
 800d8b8:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800d8bc:	4301      	orrs	r1, r0
 800d8be:	d060      	beq.n	800d982 <get_fat+0x212>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800d8c0:	6879      	ldr	r1, [r7, #4]
 800d8c2:	6889      	ldr	r1, [r1, #8]
 800d8c4:	6838      	ldr	r0, [r7, #0]
 800d8c6:	1a41      	subs	r1, r0, r1
 800d8c8:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800d8ca:	6879      	ldr	r1, [r7, #4]
 800d8cc:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800d8d0:	1e42      	subs	r2, r0, #1
 800d8d2:	f141 33ff 	adc.w	r3, r1, #4294967295
 800d8d6:	f04f 0000 	mov.w	r0, #0
 800d8da:	f04f 0100 	mov.w	r1, #0
 800d8de:	0a50      	lsrs	r0, r2, #9
 800d8e0:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800d8e4:	0a59      	lsrs	r1, r3, #9
 800d8e6:	4602      	mov	r2, r0
 800d8e8:	69bb      	ldr	r3, [r7, #24]
 800d8ea:	895b      	ldrh	r3, [r3, #10]
 800d8ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8f0:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	79db      	ldrb	r3, [r3, #7]
 800d8f6:	2b02      	cmp	r3, #2
 800d8f8:	d10e      	bne.n	800d918 <get_fat+0x1a8>
					if (cofs <= clen) {
 800d8fa:	697a      	ldr	r2, [r7, #20]
 800d8fc:	693b      	ldr	r3, [r7, #16]
 800d8fe:	429a      	cmp	r2, r3
 800d900:	d80a      	bhi.n	800d918 <get_fat+0x1a8>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800d902:	697a      	ldr	r2, [r7, #20]
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	429a      	cmp	r2, r3
 800d908:	d002      	beq.n	800d910 <get_fat+0x1a0>
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	3301      	adds	r3, #1
 800d90e:	e001      	b.n	800d914 <get_fat+0x1a4>
 800d910:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d914:	61fb      	str	r3, [r7, #28]
						break;
 800d916:	e040      	b.n	800d99a <get_fat+0x22a>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	79db      	ldrb	r3, [r3, #7]
 800d91c:	2b03      	cmp	r3, #3
 800d91e:	d108      	bne.n	800d932 <get_fat+0x1c2>
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	699b      	ldr	r3, [r3, #24]
 800d924:	697a      	ldr	r2, [r7, #20]
 800d926:	429a      	cmp	r2, r3
 800d928:	d203      	bcs.n	800d932 <get_fat+0x1c2>
					val = clst + 1; 	/* Generate the value */
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	3301      	adds	r3, #1
 800d92e:	61fb      	str	r3, [r7, #28]
					break;
 800d930:	e033      	b.n	800d99a <get_fat+0x22a>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	79db      	ldrb	r3, [r3, #7]
 800d936:	2b02      	cmp	r3, #2
 800d938:	d023      	beq.n	800d982 <get_fat+0x212>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	69db      	ldr	r3, [r3, #28]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d003      	beq.n	800d94a <get_fat+0x1da>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800d942:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d946:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800d948:	e027      	b.n	800d99a <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d94a:	69bb      	ldr	r3, [r7, #24]
 800d94c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	09db      	lsrs	r3, r3, #7
 800d952:	4413      	add	r3, r2
 800d954:	4619      	mov	r1, r3
 800d956:	69b8      	ldr	r0, [r7, #24]
 800d958:	f7ff fe4e 	bl	800d5f8 <move_window>
 800d95c:	4603      	mov	r3, r0
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d11a      	bne.n	800d998 <get_fat+0x228>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800d962:	69bb      	ldr	r3, [r7, #24]
 800d964:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	009b      	lsls	r3, r3, #2
 800d96c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d970:	4413      	add	r3, r2
 800d972:	4618      	mov	r0, r3
 800d974:	f7ff fa44 	bl	800ce00 <ld_dword>
 800d978:	4603      	mov	r3, r0
 800d97a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d97e:	61fb      	str	r3, [r7, #28]
					break;
 800d980:	e00b      	b.n	800d99a <get_fat+0x22a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d982:	2301      	movs	r3, #1
 800d984:	61fb      	str	r3, [r7, #28]
 800d986:	e008      	b.n	800d99a <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d988:	bf00      	nop
 800d98a:	e006      	b.n	800d99a <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d98c:	bf00      	nop
 800d98e:	e004      	b.n	800d99a <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d990:	bf00      	nop
 800d992:	e002      	b.n	800d99a <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d994:	bf00      	nop
 800d996:	e000      	b.n	800d99a <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d998:	bf00      	nop
		}
	}

	return val;
 800d99a:	69fb      	ldr	r3, [r7, #28]
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	3720      	adds	r7, #32
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}

0800d9a4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d9a4:	b590      	push	{r4, r7, lr}
 800d9a6:	b089      	sub	sp, #36	; 0x24
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	60f8      	str	r0, [r7, #12]
 800d9ac:	60b9      	str	r1, [r7, #8]
 800d9ae:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d9b0:	2302      	movs	r3, #2
 800d9b2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	2b01      	cmp	r3, #1
 800d9b8:	f240 80d6 	bls.w	800db68 <put_fat+0x1c4>
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	69db      	ldr	r3, [r3, #28]
 800d9c0:	68ba      	ldr	r2, [r7, #8]
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	f080 80d0 	bcs.w	800db68 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	781b      	ldrb	r3, [r3, #0]
 800d9cc:	2b04      	cmp	r3, #4
 800d9ce:	f300 80d4 	bgt.w	800db7a <put_fat+0x1d6>
 800d9d2:	2b03      	cmp	r3, #3
 800d9d4:	f280 8093 	bge.w	800dafe <put_fat+0x15a>
 800d9d8:	2b01      	cmp	r3, #1
 800d9da:	d002      	beq.n	800d9e2 <put_fat+0x3e>
 800d9dc:	2b02      	cmp	r3, #2
 800d9de:	d06e      	beq.n	800dabe <put_fat+0x11a>
 800d9e0:	e0cb      	b.n	800db7a <put_fat+0x1d6>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	61bb      	str	r3, [r7, #24]
 800d9e6:	69bb      	ldr	r3, [r7, #24]
 800d9e8:	085b      	lsrs	r3, r3, #1
 800d9ea:	69ba      	ldr	r2, [r7, #24]
 800d9ec:	4413      	add	r3, r2
 800d9ee:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d9f4:	69bb      	ldr	r3, [r7, #24]
 800d9f6:	0a5b      	lsrs	r3, r3, #9
 800d9f8:	4413      	add	r3, r2
 800d9fa:	4619      	mov	r1, r3
 800d9fc:	68f8      	ldr	r0, [r7, #12]
 800d9fe:	f7ff fdfb 	bl	800d5f8 <move_window>
 800da02:	4603      	mov	r3, r0
 800da04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800da06:	7ffb      	ldrb	r3, [r7, #31]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	f040 80af 	bne.w	800db6c <put_fat+0x1c8>
			p = fs->win + bc++ % SS(fs);
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800da14:	69bb      	ldr	r3, [r7, #24]
 800da16:	1c59      	adds	r1, r3, #1
 800da18:	61b9      	str	r1, [r7, #24]
 800da1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da1e:	4413      	add	r3, r2
 800da20:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	f003 0301 	and.w	r3, r3, #1
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d00d      	beq.n	800da48 <put_fat+0xa4>
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	781b      	ldrb	r3, [r3, #0]
 800da30:	b25b      	sxtb	r3, r3
 800da32:	f003 030f 	and.w	r3, r3, #15
 800da36:	b25a      	sxtb	r2, r3
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	b2db      	uxtb	r3, r3
 800da3c:	011b      	lsls	r3, r3, #4
 800da3e:	b25b      	sxtb	r3, r3
 800da40:	4313      	orrs	r3, r2
 800da42:	b25b      	sxtb	r3, r3
 800da44:	b2db      	uxtb	r3, r3
 800da46:	e001      	b.n	800da4c <put_fat+0xa8>
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	b2db      	uxtb	r3, r3
 800da4c:	697a      	ldr	r2, [r7, #20]
 800da4e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	2201      	movs	r2, #1
 800da54:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800da5a:	69bb      	ldr	r3, [r7, #24]
 800da5c:	0a5b      	lsrs	r3, r3, #9
 800da5e:	4413      	add	r3, r2
 800da60:	4619      	mov	r1, r3
 800da62:	68f8      	ldr	r0, [r7, #12]
 800da64:	f7ff fdc8 	bl	800d5f8 <move_window>
 800da68:	4603      	mov	r3, r0
 800da6a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800da6c:	7ffb      	ldrb	r3, [r7, #31]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d17e      	bne.n	800db70 <put_fat+0x1cc>
			p = fs->win + bc % SS(fs);
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800da78:	69bb      	ldr	r3, [r7, #24]
 800da7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da7e:	4413      	add	r3, r2
 800da80:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	f003 0301 	and.w	r3, r3, #1
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d003      	beq.n	800da94 <put_fat+0xf0>
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	091b      	lsrs	r3, r3, #4
 800da90:	b2db      	uxtb	r3, r3
 800da92:	e00e      	b.n	800dab2 <put_fat+0x10e>
 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	781b      	ldrb	r3, [r3, #0]
 800da98:	b25b      	sxtb	r3, r3
 800da9a:	f023 030f 	bic.w	r3, r3, #15
 800da9e:	b25a      	sxtb	r2, r3
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	0a1b      	lsrs	r3, r3, #8
 800daa4:	b25b      	sxtb	r3, r3
 800daa6:	f003 030f 	and.w	r3, r3, #15
 800daaa:	b25b      	sxtb	r3, r3
 800daac:	4313      	orrs	r3, r2
 800daae:	b25b      	sxtb	r3, r3
 800dab0:	b2db      	uxtb	r3, r3
 800dab2:	697a      	ldr	r2, [r7, #20]
 800dab4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	2201      	movs	r2, #1
 800daba:	70da      	strb	r2, [r3, #3]
			break;
 800dabc:	e05d      	b.n	800db7a <put_fat+0x1d6>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	0a1b      	lsrs	r3, r3, #8
 800dac6:	4413      	add	r3, r2
 800dac8:	4619      	mov	r1, r3
 800daca:	68f8      	ldr	r0, [r7, #12]
 800dacc:	f7ff fd94 	bl	800d5f8 <move_window>
 800dad0:	4603      	mov	r3, r0
 800dad2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dad4:	7ffb      	ldrb	r3, [r7, #31]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d14c      	bne.n	800db74 <put_fat+0x1d0>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	005b      	lsls	r3, r3, #1
 800dae4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800dae8:	4413      	add	r3, r2
 800daea:	687a      	ldr	r2, [r7, #4]
 800daec:	b292      	uxth	r2, r2
 800daee:	4611      	mov	r1, r2
 800daf0:	4618      	mov	r0, r3
 800daf2:	f7ff fa83 	bl	800cffc <st_word>
			fs->wflag = 1;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	2201      	movs	r2, #1
 800dafa:	70da      	strb	r2, [r3, #3]
			break;
 800dafc:	e03d      	b.n	800db7a <put_fat+0x1d6>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	09db      	lsrs	r3, r3, #7
 800db06:	4413      	add	r3, r2
 800db08:	4619      	mov	r1, r3
 800db0a:	68f8      	ldr	r0, [r7, #12]
 800db0c:	f7ff fd74 	bl	800d5f8 <move_window>
 800db10:	4603      	mov	r3, r0
 800db12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800db14:	7ffb      	ldrb	r3, [r7, #31]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d12e      	bne.n	800db78 <put_fat+0x1d4>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	781b      	ldrb	r3, [r3, #0]
 800db1e:	2b04      	cmp	r3, #4
 800db20:	d012      	beq.n	800db48 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	009b      	lsls	r3, r3, #2
 800db32:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800db36:	4413      	add	r3, r2
 800db38:	4618      	mov	r0, r3
 800db3a:	f7ff f961 	bl	800ce00 <ld_dword>
 800db3e:	4603      	mov	r3, r0
 800db40:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800db44:	4323      	orrs	r3, r4
 800db46:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	009b      	lsls	r3, r3, #2
 800db52:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800db56:	4413      	add	r3, r2
 800db58:	6879      	ldr	r1, [r7, #4]
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7ff fa69 	bl	800d032 <st_dword>
			fs->wflag = 1;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	2201      	movs	r2, #1
 800db64:	70da      	strb	r2, [r3, #3]
			break;
 800db66:	e008      	b.n	800db7a <put_fat+0x1d6>
		}
	}
 800db68:	bf00      	nop
 800db6a:	e006      	b.n	800db7a <put_fat+0x1d6>
			if (res != FR_OK) break;
 800db6c:	bf00      	nop
 800db6e:	e004      	b.n	800db7a <put_fat+0x1d6>
			if (res != FR_OK) break;
 800db70:	bf00      	nop
 800db72:	e002      	b.n	800db7a <put_fat+0x1d6>
			if (res != FR_OK) break;
 800db74:	bf00      	nop
 800db76:	e000      	b.n	800db7a <put_fat+0x1d6>
			if (res != FR_OK) break;
 800db78:	bf00      	nop
	return res;
 800db7a:	7ffb      	ldrb	r3, [r7, #31]
}
 800db7c:	4618      	mov	r0, r3
 800db7e:	3724      	adds	r7, #36	; 0x24
 800db80:	46bd      	mov	sp, r7
 800db82:	bd90      	pop	{r4, r7, pc}

0800db84 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b08a      	sub	sp, #40	; 0x28
 800db88:	af00      	add	r7, sp, #0
 800db8a:	60f8      	str	r0, [r7, #12]
 800db8c:	60b9      	str	r1, [r7, #8]
 800db8e:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	3b02      	subs	r3, #2
 800db94:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	69db      	ldr	r3, [r3, #28]
 800db9a:	3b02      	subs	r3, #2
 800db9c:	68ba      	ldr	r2, [r7, #8]
 800db9e:	429a      	cmp	r2, r3
 800dba0:	d301      	bcc.n	800dba6 <find_bitmap+0x22>
 800dba2:	2300      	movs	r3, #0
 800dba4:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	61fb      	str	r3, [r7, #28]
 800dbaa:	69fb      	ldr	r3, [r7, #28]
 800dbac:	61bb      	str	r3, [r7, #24]
 800dbae:	2300      	movs	r3, #0
 800dbb0:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dbb6:	69fb      	ldr	r3, [r7, #28]
 800dbb8:	0b1b      	lsrs	r3, r3, #12
 800dbba:	4413      	add	r3, r2
 800dbbc:	4619      	mov	r1, r3
 800dbbe:	68f8      	ldr	r0, [r7, #12]
 800dbc0:	f7ff fd1a 	bl	800d5f8 <move_window>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d002      	beq.n	800dbd0 <find_bitmap+0x4c>
 800dbca:	f04f 33ff 	mov.w	r3, #4294967295
 800dbce:	e051      	b.n	800dc74 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800dbd0:	69fb      	ldr	r3, [r7, #28]
 800dbd2:	08db      	lsrs	r3, r3, #3
 800dbd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbd8:	623b      	str	r3, [r7, #32]
 800dbda:	69fb      	ldr	r3, [r7, #28]
 800dbdc:	f003 0307 	and.w	r3, r3, #7
 800dbe0:	2201      	movs	r2, #1
 800dbe2:	fa02 f303 	lsl.w	r3, r2, r3
 800dbe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800dbea:	68fa      	ldr	r2, [r7, #12]
 800dbec:	6a3b      	ldr	r3, [r7, #32]
 800dbee:	4413      	add	r3, r2
 800dbf0:	3338      	adds	r3, #56	; 0x38
 800dbf2:	781a      	ldrb	r2, [r3, #0]
 800dbf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbf8:	4013      	ands	r3, r2
 800dbfa:	74fb      	strb	r3, [r7, #19]
 800dbfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc00:	005b      	lsls	r3, r3, #1
 800dc02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800dc06:	69fb      	ldr	r3, [r7, #28]
 800dc08:	3301      	adds	r3, #1
 800dc0a:	61fb      	str	r3, [r7, #28]
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	69db      	ldr	r3, [r3, #28]
 800dc10:	3b02      	subs	r3, #2
 800dc12:	69fa      	ldr	r2, [r7, #28]
 800dc14:	429a      	cmp	r2, r3
 800dc16:	d307      	bcc.n	800dc28 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 800dc18:	2300      	movs	r3, #0
 800dc1a:	61fb      	str	r3, [r7, #28]
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dc22:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dc26:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800dc28:	7cfb      	ldrb	r3, [r7, #19]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d109      	bne.n	800dc42 <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800dc2e:	697b      	ldr	r3, [r7, #20]
 800dc30:	3301      	adds	r3, #1
 800dc32:	617b      	str	r3, [r7, #20]
 800dc34:	697a      	ldr	r2, [r7, #20]
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d106      	bne.n	800dc4a <find_bitmap+0xc6>
 800dc3c:	69bb      	ldr	r3, [r7, #24]
 800dc3e:	3302      	adds	r3, #2
 800dc40:	e018      	b.n	800dc74 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800dc42:	69fb      	ldr	r3, [r7, #28]
 800dc44:	61bb      	str	r3, [r7, #24]
 800dc46:	2300      	movs	r3, #0
 800dc48:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800dc4a:	69fa      	ldr	r2, [r7, #28]
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	d101      	bne.n	800dc56 <find_bitmap+0xd2>
 800dc52:	2300      	movs	r3, #0
 800dc54:	e00e      	b.n	800dc74 <find_bitmap+0xf0>
			} while (bm);
 800dc56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d1c5      	bne.n	800dbea <find_bitmap+0x66>
			bm = 1;
 800dc5e:	2301      	movs	r3, #1
 800dc60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800dc64:	6a3b      	ldr	r3, [r7, #32]
 800dc66:	3301      	adds	r3, #1
 800dc68:	623b      	str	r3, [r7, #32]
 800dc6a:	6a3b      	ldr	r3, [r7, #32]
 800dc6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc70:	d3bb      	bcc.n	800dbea <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800dc72:	e79e      	b.n	800dbb2 <find_bitmap+0x2e>
	}
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3728      	adds	r7, #40	; 0x28
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}

0800dc7c <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b088      	sub	sp, #32
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	60f8      	str	r0, [r7, #12]
 800dc84:	60b9      	str	r1, [r7, #8]
 800dc86:	607a      	str	r2, [r7, #4]
 800dc88:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800dc8a:	68bb      	ldr	r3, [r7, #8]
 800dc8c:	3b02      	subs	r3, #2
 800dc8e:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	0b1b      	lsrs	r3, r3, #12
 800dc98:	4413      	add	r3, r2
 800dc9a:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	08db      	lsrs	r3, r3, #3
 800dca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dca4:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	f003 0307 	and.w	r3, r3, #7
 800dcac:	2201      	movs	r2, #1
 800dcae:	fa02 f303 	lsl.w	r3, r2, r3
 800dcb2:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800dcb4:	697b      	ldr	r3, [r7, #20]
 800dcb6:	1c5a      	adds	r2, r3, #1
 800dcb8:	617a      	str	r2, [r7, #20]
 800dcba:	4619      	mov	r1, r3
 800dcbc:	68f8      	ldr	r0, [r7, #12]
 800dcbe:	f7ff fc9b 	bl	800d5f8 <move_window>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d001      	beq.n	800dccc <change_bitmap+0x50>
 800dcc8:	2301      	movs	r3, #1
 800dcca:	e03d      	b.n	800dd48 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800dccc:	68fa      	ldr	r2, [r7, #12]
 800dcce:	69bb      	ldr	r3, [r7, #24]
 800dcd0:	4413      	add	r3, r2
 800dcd2:	3338      	adds	r3, #56	; 0x38
 800dcd4:	781a      	ldrb	r2, [r3, #0]
 800dcd6:	7ffb      	ldrb	r3, [r7, #31]
 800dcd8:	4013      	ands	r3, r2
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	bf14      	ite	ne
 800dce0:	2301      	movne	r3, #1
 800dce2:	2300      	moveq	r3, #0
 800dce4:	b2db      	uxtb	r3, r3
 800dce6:	461a      	mov	r2, r3
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	4293      	cmp	r3, r2
 800dcec:	d101      	bne.n	800dcf2 <change_bitmap+0x76>
 800dcee:	2302      	movs	r3, #2
 800dcf0:	e02a      	b.n	800dd48 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 800dcf2:	68fa      	ldr	r2, [r7, #12]
 800dcf4:	69bb      	ldr	r3, [r7, #24]
 800dcf6:	4413      	add	r3, r2
 800dcf8:	3338      	adds	r3, #56	; 0x38
 800dcfa:	781a      	ldrb	r2, [r3, #0]
 800dcfc:	7ffb      	ldrb	r3, [r7, #31]
 800dcfe:	4053      	eors	r3, r2
 800dd00:	b2d9      	uxtb	r1, r3
 800dd02:	68fa      	ldr	r2, [r7, #12]
 800dd04:	69bb      	ldr	r3, [r7, #24]
 800dd06:	4413      	add	r3, r2
 800dd08:	3338      	adds	r3, #56	; 0x38
 800dd0a:	460a      	mov	r2, r1
 800dd0c:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	2201      	movs	r2, #1
 800dd12:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	3b01      	subs	r3, #1
 800dd18:	607b      	str	r3, [r7, #4]
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d101      	bne.n	800dd24 <change_bitmap+0xa8>
 800dd20:	2300      	movs	r3, #0
 800dd22:	e011      	b.n	800dd48 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 800dd24:	7ffb      	ldrb	r3, [r7, #31]
 800dd26:	005b      	lsls	r3, r3, #1
 800dd28:	77fb      	strb	r3, [r7, #31]
 800dd2a:	7ffb      	ldrb	r3, [r7, #31]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d1cd      	bne.n	800dccc <change_bitmap+0x50>
			bm = 1;
 800dd30:	2301      	movs	r3, #1
 800dd32:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800dd34:	69bb      	ldr	r3, [r7, #24]
 800dd36:	3301      	adds	r3, #1
 800dd38:	61bb      	str	r3, [r7, #24]
 800dd3a:	69bb      	ldr	r3, [r7, #24]
 800dd3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd40:	d3c4      	bcc.n	800dccc <change_bitmap+0x50>
		i = 0;
 800dd42:	2300      	movs	r3, #0
 800dd44:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800dd46:	e7b5      	b.n	800dcb4 <change_bitmap+0x38>
	}
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	3720      	adds	r7, #32
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}

0800dd50 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b086      	sub	sp, #24
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	79db      	ldrb	r3, [r3, #7]
 800dd5c:	2b03      	cmp	r3, #3
 800dd5e:	d121      	bne.n	800dda4 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	689b      	ldr	r3, [r3, #8]
 800dd64:	617b      	str	r3, [r7, #20]
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	699b      	ldr	r3, [r3, #24]
 800dd6a:	613b      	str	r3, [r7, #16]
 800dd6c:	e014      	b.n	800dd98 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6818      	ldr	r0, [r3, #0]
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	3301      	adds	r3, #1
 800dd76:	461a      	mov	r2, r3
 800dd78:	6979      	ldr	r1, [r7, #20]
 800dd7a:	f7ff fe13 	bl	800d9a4 <put_fat>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800dd82:	7bfb      	ldrb	r3, [r7, #15]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d001      	beq.n	800dd8c <fill_first_frag+0x3c>
 800dd88:	7bfb      	ldrb	r3, [r7, #15]
 800dd8a:	e00c      	b.n	800dda6 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	3301      	adds	r3, #1
 800dd90:	617b      	str	r3, [r7, #20]
 800dd92:	693b      	ldr	r3, [r7, #16]
 800dd94:	3b01      	subs	r3, #1
 800dd96:	613b      	str	r3, [r7, #16]
 800dd98:	693b      	ldr	r3, [r7, #16]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d1e7      	bne.n	800dd6e <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2200      	movs	r2, #0
 800dda2:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800dda4:	2300      	movs	r3, #0
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	3718      	adds	r7, #24
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}

0800ddae <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800ddae:	b580      	push	{r7, lr}
 800ddb0:	b086      	sub	sp, #24
 800ddb2:	af00      	add	r7, sp, #0
 800ddb4:	60f8      	str	r0, [r7, #12]
 800ddb6:	60b9      	str	r1, [r7, #8]
 800ddb8:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800ddba:	e020      	b.n	800ddfe <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	6818      	ldr	r0, [r3, #0]
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	69db      	ldr	r3, [r3, #28]
 800ddc4:	68ba      	ldr	r2, [r7, #8]
 800ddc6:	1ad3      	subs	r3, r2, r3
 800ddc8:	1c59      	adds	r1, r3, #1
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	69db      	ldr	r3, [r3, #28]
 800ddce:	2b01      	cmp	r3, #1
 800ddd0:	d905      	bls.n	800ddde <fill_last_frag+0x30>
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	69db      	ldr	r3, [r3, #28]
 800ddd6:	68ba      	ldr	r2, [r7, #8]
 800ddd8:	1ad3      	subs	r3, r2, r3
 800ddda:	3302      	adds	r3, #2
 800dddc:	e000      	b.n	800dde0 <fill_last_frag+0x32>
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	461a      	mov	r2, r3
 800dde2:	f7ff fddf 	bl	800d9a4 <put_fat>
 800dde6:	4603      	mov	r3, r0
 800dde8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800ddea:	7dfb      	ldrb	r3, [r7, #23]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d001      	beq.n	800ddf4 <fill_last_frag+0x46>
 800ddf0:	7dfb      	ldrb	r3, [r7, #23]
 800ddf2:	e009      	b.n	800de08 <fill_last_frag+0x5a>
		obj->n_frag--;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	69db      	ldr	r3, [r3, #28]
 800ddf8:	1e5a      	subs	r2, r3, #1
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	69db      	ldr	r3, [r3, #28]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d1da      	bne.n	800ddbc <fill_last_frag+0xe>
	}
	return FR_OK;
 800de06:	2300      	movs	r3, #0
}
 800de08:	4618      	mov	r0, r3
 800de0a:	3718      	adds	r7, #24
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}

0800de10 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b08a      	sub	sp, #40	; 0x28
 800de14:	af00      	add	r7, sp, #0
 800de16:	60f8      	str	r0, [r7, #12]
 800de18:	60b9      	str	r1, [r7, #8]
 800de1a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800de1c:	2300      	movs	r3, #0
 800de1e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	627b      	str	r3, [r7, #36]	; 0x24
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	2b01      	cmp	r3, #1
 800de32:	d904      	bls.n	800de3e <remove_chain+0x2e>
 800de34:	69bb      	ldr	r3, [r7, #24]
 800de36:	69db      	ldr	r3, [r3, #28]
 800de38:	68ba      	ldr	r2, [r7, #8]
 800de3a:	429a      	cmp	r2, r3
 800de3c:	d301      	bcc.n	800de42 <remove_chain+0x32>
 800de3e:	2302      	movs	r3, #2
 800de40:	e096      	b.n	800df70 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d014      	beq.n	800de72 <remove_chain+0x62>
 800de48:	69bb      	ldr	r3, [r7, #24]
 800de4a:	781b      	ldrb	r3, [r3, #0]
 800de4c:	2b04      	cmp	r3, #4
 800de4e:	d103      	bne.n	800de58 <remove_chain+0x48>
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	79db      	ldrb	r3, [r3, #7]
 800de54:	2b02      	cmp	r3, #2
 800de56:	d00c      	beq.n	800de72 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800de58:	f04f 32ff 	mov.w	r2, #4294967295
 800de5c:	6879      	ldr	r1, [r7, #4]
 800de5e:	69b8      	ldr	r0, [r7, #24]
 800de60:	f7ff fda0 	bl	800d9a4 <put_fat>
 800de64:	4603      	mov	r3, r0
 800de66:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800de68:	7ffb      	ldrb	r3, [r7, #31]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d001      	beq.n	800de72 <remove_chain+0x62>
 800de6e:	7ffb      	ldrb	r3, [r7, #31]
 800de70:	e07e      	b.n	800df70 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800de72:	68b9      	ldr	r1, [r7, #8]
 800de74:	68f8      	ldr	r0, [r7, #12]
 800de76:	f7ff fc7b 	bl	800d770 <get_fat>
 800de7a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800de7c:	697b      	ldr	r3, [r7, #20]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d055      	beq.n	800df2e <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	2b01      	cmp	r3, #1
 800de86:	d101      	bne.n	800de8c <remove_chain+0x7c>
 800de88:	2302      	movs	r3, #2
 800de8a:	e071      	b.n	800df70 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de92:	d101      	bne.n	800de98 <remove_chain+0x88>
 800de94:	2301      	movs	r3, #1
 800de96:	e06b      	b.n	800df70 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800de98:	69bb      	ldr	r3, [r7, #24]
 800de9a:	781b      	ldrb	r3, [r3, #0]
 800de9c:	2b04      	cmp	r3, #4
 800de9e:	d00b      	beq.n	800deb8 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800dea0:	2200      	movs	r2, #0
 800dea2:	68b9      	ldr	r1, [r7, #8]
 800dea4:	69b8      	ldr	r0, [r7, #24]
 800dea6:	f7ff fd7d 	bl	800d9a4 <put_fat>
 800deaa:	4603      	mov	r3, r0
 800deac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800deae:	7ffb      	ldrb	r3, [r7, #31]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d001      	beq.n	800deb8 <remove_chain+0xa8>
 800deb4:	7ffb      	ldrb	r3, [r7, #31]
 800deb6:	e05b      	b.n	800df70 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800deb8:	69bb      	ldr	r3, [r7, #24]
 800deba:	699a      	ldr	r2, [r3, #24]
 800debc:	69bb      	ldr	r3, [r7, #24]
 800debe:	69db      	ldr	r3, [r3, #28]
 800dec0:	3b02      	subs	r3, #2
 800dec2:	429a      	cmp	r2, r3
 800dec4:	d20b      	bcs.n	800dede <remove_chain+0xce>
			fs->free_clst++;
 800dec6:	69bb      	ldr	r3, [r7, #24]
 800dec8:	699b      	ldr	r3, [r3, #24]
 800deca:	1c5a      	adds	r2, r3, #1
 800decc:	69bb      	ldr	r3, [r7, #24]
 800dece:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800ded0:	69bb      	ldr	r3, [r7, #24]
 800ded2:	791b      	ldrb	r3, [r3, #4]
 800ded4:	f043 0301 	orr.w	r3, r3, #1
 800ded8:	b2da      	uxtb	r2, r3
 800deda:	69bb      	ldr	r3, [r7, #24]
 800dedc:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800dede:	6a3b      	ldr	r3, [r7, #32]
 800dee0:	3301      	adds	r3, #1
 800dee2:	697a      	ldr	r2, [r7, #20]
 800dee4:	429a      	cmp	r2, r3
 800dee6:	d102      	bne.n	800deee <remove_chain+0xde>
			ecl = nxt;
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	623b      	str	r3, [r7, #32]
 800deec:	e017      	b.n	800df1e <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800deee:	69bb      	ldr	r3, [r7, #24]
 800def0:	781b      	ldrb	r3, [r3, #0]
 800def2:	2b04      	cmp	r3, #4
 800def4:	d10f      	bne.n	800df16 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800def6:	6a3a      	ldr	r2, [r7, #32]
 800def8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800defa:	1ad3      	subs	r3, r2, r3
 800defc:	1c5a      	adds	r2, r3, #1
 800defe:	2300      	movs	r3, #0
 800df00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df02:	69b8      	ldr	r0, [r7, #24]
 800df04:	f7ff feba 	bl	800dc7c <change_bitmap>
 800df08:	4603      	mov	r3, r0
 800df0a:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800df0c:	7ffb      	ldrb	r3, [r7, #31]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d001      	beq.n	800df16 <remove_chain+0x106>
 800df12:	7ffb      	ldrb	r3, [r7, #31]
 800df14:	e02c      	b.n	800df70 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	623b      	str	r3, [r7, #32]
 800df1a:	6a3b      	ldr	r3, [r7, #32]
 800df1c:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800df22:	69bb      	ldr	r3, [r7, #24]
 800df24:	69db      	ldr	r3, [r3, #28]
 800df26:	68ba      	ldr	r2, [r7, #8]
 800df28:	429a      	cmp	r2, r3
 800df2a:	d3a2      	bcc.n	800de72 <remove_chain+0x62>
 800df2c:	e000      	b.n	800df30 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800df2e:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800df30:	69bb      	ldr	r3, [r7, #24]
 800df32:	781b      	ldrb	r3, [r3, #0]
 800df34:	2b04      	cmp	r3, #4
 800df36:	d11a      	bne.n	800df6e <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d103      	bne.n	800df46 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	2200      	movs	r2, #0
 800df42:	71da      	strb	r2, [r3, #7]
 800df44:	e013      	b.n	800df6e <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	79db      	ldrb	r3, [r3, #7]
 800df4a:	2b03      	cmp	r3, #3
 800df4c:	d10f      	bne.n	800df6e <remove_chain+0x15e>
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	689b      	ldr	r3, [r3, #8]
 800df52:	687a      	ldr	r2, [r7, #4]
 800df54:	429a      	cmp	r2, r3
 800df56:	d30a      	bcc.n	800df6e <remove_chain+0x15e>
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	689a      	ldr	r2, [r3, #8]
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	699b      	ldr	r3, [r3, #24]
 800df60:	4413      	add	r3, r2
 800df62:	687a      	ldr	r2, [r7, #4]
 800df64:	429a      	cmp	r2, r3
 800df66:	d802      	bhi.n	800df6e <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	2202      	movs	r2, #2
 800df6c:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800df6e:	2300      	movs	r3, #0
}
 800df70:	4618      	mov	r0, r3
 800df72:	3728      	adds	r7, #40	; 0x28
 800df74:	46bd      	mov	sp, r7
 800df76:	bd80      	pop	{r7, pc}

0800df78 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b088      	sub	sp, #32
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
 800df80:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d10d      	bne.n	800dfaa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800df8e:	693b      	ldr	r3, [r7, #16]
 800df90:	695b      	ldr	r3, [r3, #20]
 800df92:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800df94:	69bb      	ldr	r3, [r7, #24]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d004      	beq.n	800dfa4 <create_chain+0x2c>
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	69db      	ldr	r3, [r3, #28]
 800df9e:	69ba      	ldr	r2, [r7, #24]
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	d31b      	bcc.n	800dfdc <create_chain+0x64>
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	61bb      	str	r3, [r7, #24]
 800dfa8:	e018      	b.n	800dfdc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800dfaa:	6839      	ldr	r1, [r7, #0]
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f7ff fbdf 	bl	800d770 <get_fat>
 800dfb2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	2b01      	cmp	r3, #1
 800dfb8:	d801      	bhi.n	800dfbe <create_chain+0x46>
 800dfba:	2301      	movs	r3, #1
 800dfbc:	e0d9      	b.n	800e172 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfc4:	d101      	bne.n	800dfca <create_chain+0x52>
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	e0d3      	b.n	800e172 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	69db      	ldr	r3, [r3, #28]
 800dfce:	68fa      	ldr	r2, [r7, #12]
 800dfd0:	429a      	cmp	r2, r3
 800dfd2:	d201      	bcs.n	800dfd8 <create_chain+0x60>
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	e0cc      	b.n	800e172 <create_chain+0x1fa>
		scl = clst;
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800dfdc:	693b      	ldr	r3, [r7, #16]
 800dfde:	781b      	ldrb	r3, [r3, #0]
 800dfe0:	2b04      	cmp	r3, #4
 800dfe2:	d164      	bne.n	800e0ae <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800dfe4:	2201      	movs	r2, #1
 800dfe6:	69b9      	ldr	r1, [r7, #24]
 800dfe8:	6938      	ldr	r0, [r7, #16]
 800dfea:	f7ff fdcb 	bl	800db84 <find_bitmap>
 800dfee:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800dff0:	69fb      	ldr	r3, [r7, #28]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d003      	beq.n	800dffe <create_chain+0x86>
 800dff6:	69fb      	ldr	r3, [r7, #28]
 800dff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dffc:	d101      	bne.n	800e002 <create_chain+0x8a>
 800dffe:	69fb      	ldr	r3, [r7, #28]
 800e000:	e0b7      	b.n	800e172 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800e002:	2301      	movs	r3, #1
 800e004:	2201      	movs	r2, #1
 800e006:	69f9      	ldr	r1, [r7, #28]
 800e008:	6938      	ldr	r0, [r7, #16]
 800e00a:	f7ff fe37 	bl	800dc7c <change_bitmap>
 800e00e:	4603      	mov	r3, r0
 800e010:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800e012:	7dfb      	ldrb	r3, [r7, #23]
 800e014:	2b02      	cmp	r3, #2
 800e016:	d101      	bne.n	800e01c <create_chain+0xa4>
 800e018:	2301      	movs	r3, #1
 800e01a:	e0aa      	b.n	800e172 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800e01c:	7dfb      	ldrb	r3, [r7, #23]
 800e01e:	2b01      	cmp	r3, #1
 800e020:	d102      	bne.n	800e028 <create_chain+0xb0>
 800e022:	f04f 33ff 	mov.w	r3, #4294967295
 800e026:	e0a4      	b.n	800e172 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d103      	bne.n	800e036 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	2202      	movs	r2, #2
 800e032:	71da      	strb	r2, [r3, #7]
 800e034:	e011      	b.n	800e05a <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	79db      	ldrb	r3, [r3, #7]
 800e03a:	2b02      	cmp	r3, #2
 800e03c:	d10d      	bne.n	800e05a <create_chain+0xe2>
 800e03e:	69bb      	ldr	r3, [r7, #24]
 800e040:	3301      	adds	r3, #1
 800e042:	69fa      	ldr	r2, [r7, #28]
 800e044:	429a      	cmp	r2, r3
 800e046:	d008      	beq.n	800e05a <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	689b      	ldr	r3, [r3, #8]
 800e04c:	69ba      	ldr	r2, [r7, #24]
 800e04e:	1ad2      	subs	r2, r2, r3
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2203      	movs	r2, #3
 800e058:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	79db      	ldrb	r3, [r3, #7]
 800e05e:	2b02      	cmp	r3, #2
 800e060:	d064      	beq.n	800e12c <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	3301      	adds	r3, #1
 800e066:	69fa      	ldr	r2, [r7, #28]
 800e068:	429a      	cmp	r2, r3
 800e06a:	d10b      	bne.n	800e084 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	69db      	ldr	r3, [r3, #28]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d003      	beq.n	800e07c <create_chain+0x104>
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	69db      	ldr	r3, [r3, #28]
 800e078:	3301      	adds	r3, #1
 800e07a:	e000      	b.n	800e07e <create_chain+0x106>
 800e07c:	2302      	movs	r3, #2
 800e07e:	687a      	ldr	r2, [r7, #4]
 800e080:	61d3      	str	r3, [r2, #28]
 800e082:	e053      	b.n	800e12c <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	69db      	ldr	r3, [r3, #28]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d102      	bne.n	800e092 <create_chain+0x11a>
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2201      	movs	r2, #1
 800e090:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800e092:	69fa      	ldr	r2, [r7, #28]
 800e094:	6839      	ldr	r1, [r7, #0]
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f7ff fe89 	bl	800ddae <fill_last_frag>
 800e09c:	4603      	mov	r3, r0
 800e09e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800e0a0:	7dfb      	ldrb	r3, [r7, #23]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d142      	bne.n	800e12c <create_chain+0x1b4>
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2201      	movs	r2, #1
 800e0aa:	61da      	str	r2, [r3, #28]
 800e0ac:	e03e      	b.n	800e12c <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e0ae:	69bb      	ldr	r3, [r7, #24]
 800e0b0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e0b2:	69fb      	ldr	r3, [r7, #28]
 800e0b4:	3301      	adds	r3, #1
 800e0b6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e0b8:	693b      	ldr	r3, [r7, #16]
 800e0ba:	69db      	ldr	r3, [r3, #28]
 800e0bc:	69fa      	ldr	r2, [r7, #28]
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d307      	bcc.n	800e0d2 <create_chain+0x15a>
				ncl = 2;
 800e0c2:	2302      	movs	r3, #2
 800e0c4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e0c6:	69fa      	ldr	r2, [r7, #28]
 800e0c8:	69bb      	ldr	r3, [r7, #24]
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	d901      	bls.n	800e0d2 <create_chain+0x15a>
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	e04f      	b.n	800e172 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e0d2:	69f9      	ldr	r1, [r7, #28]
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f7ff fb4b 	bl	800d770 <get_fat>
 800e0da:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d00e      	beq.n	800e100 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	2b01      	cmp	r3, #1
 800e0e6:	d003      	beq.n	800e0f0 <create_chain+0x178>
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0ee:	d101      	bne.n	800e0f4 <create_chain+0x17c>
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	e03e      	b.n	800e172 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800e0f4:	69fa      	ldr	r2, [r7, #28]
 800e0f6:	69bb      	ldr	r3, [r7, #24]
 800e0f8:	429a      	cmp	r2, r3
 800e0fa:	d1da      	bne.n	800e0b2 <create_chain+0x13a>
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	e038      	b.n	800e172 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800e100:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e102:	f04f 32ff 	mov.w	r2, #4294967295
 800e106:	69f9      	ldr	r1, [r7, #28]
 800e108:	6938      	ldr	r0, [r7, #16]
 800e10a:	f7ff fc4b 	bl	800d9a4 <put_fat>
 800e10e:	4603      	mov	r3, r0
 800e110:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e112:	7dfb      	ldrb	r3, [r7, #23]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d109      	bne.n	800e12c <create_chain+0x1b4>
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d006      	beq.n	800e12c <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e11e:	69fa      	ldr	r2, [r7, #28]
 800e120:	6839      	ldr	r1, [r7, #0]
 800e122:	6938      	ldr	r0, [r7, #16]
 800e124:	f7ff fc3e 	bl	800d9a4 <put_fat>
 800e128:	4603      	mov	r3, r0
 800e12a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e12c:	7dfb      	ldrb	r3, [r7, #23]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d116      	bne.n	800e160 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800e132:	693b      	ldr	r3, [r7, #16]
 800e134:	69fa      	ldr	r2, [r7, #28]
 800e136:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	699a      	ldr	r2, [r3, #24]
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	69db      	ldr	r3, [r3, #28]
 800e140:	3b02      	subs	r3, #2
 800e142:	429a      	cmp	r2, r3
 800e144:	d804      	bhi.n	800e150 <create_chain+0x1d8>
 800e146:	693b      	ldr	r3, [r7, #16]
 800e148:	699b      	ldr	r3, [r3, #24]
 800e14a:	1e5a      	subs	r2, r3, #1
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	791b      	ldrb	r3, [r3, #4]
 800e154:	f043 0301 	orr.w	r3, r3, #1
 800e158:	b2da      	uxtb	r2, r3
 800e15a:	693b      	ldr	r3, [r7, #16]
 800e15c:	711a      	strb	r2, [r3, #4]
 800e15e:	e007      	b.n	800e170 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e160:	7dfb      	ldrb	r3, [r7, #23]
 800e162:	2b01      	cmp	r3, #1
 800e164:	d102      	bne.n	800e16c <create_chain+0x1f4>
 800e166:	f04f 33ff 	mov.w	r3, #4294967295
 800e16a:	e000      	b.n	800e16e <create_chain+0x1f6>
 800e16c:	2301      	movs	r3, #1
 800e16e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e170:	69fb      	ldr	r3, [r7, #28]
}
 800e172:	4618      	mov	r0, r3
 800e174:	3720      	adds	r7, #32
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}

0800e17a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e17a:	b5b0      	push	{r4, r5, r7, lr}
 800e17c:	b088      	sub	sp, #32
 800e17e:	af00      	add	r7, sp, #0
 800e180:	60f8      	str	r0, [r7, #12]
 800e182:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e190:	3304      	adds	r3, #4
 800e192:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e194:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e198:	f04f 0000 	mov.w	r0, #0
 800e19c:	f04f 0100 	mov.w	r1, #0
 800e1a0:	0a50      	lsrs	r0, r2, #9
 800e1a2:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800e1a6:	0a59      	lsrs	r1, r3, #9
 800e1a8:	697b      	ldr	r3, [r7, #20]
 800e1aa:	895b      	ldrh	r3, [r3, #10]
 800e1ac:	b29b      	uxth	r3, r3
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	461c      	mov	r4, r3
 800e1b2:	4615      	mov	r5, r2
 800e1b4:	4622      	mov	r2, r4
 800e1b6:	462b      	mov	r3, r5
 800e1b8:	f7f2 f872 	bl	80002a0 <__aeabi_uldivmod>
 800e1bc:	4602      	mov	r2, r0
 800e1be:	460b      	mov	r3, r1
 800e1c0:	4613      	mov	r3, r2
 800e1c2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e1c4:	69bb      	ldr	r3, [r7, #24]
 800e1c6:	1d1a      	adds	r2, r3, #4
 800e1c8:	61ba      	str	r2, [r7, #24]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d101      	bne.n	800e1d8 <clmt_clust+0x5e>
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	e010      	b.n	800e1fa <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 800e1d8:	69fa      	ldr	r2, [r7, #28]
 800e1da:	693b      	ldr	r3, [r7, #16]
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d307      	bcc.n	800e1f0 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 800e1e0:	69fa      	ldr	r2, [r7, #28]
 800e1e2:	693b      	ldr	r3, [r7, #16]
 800e1e4:	1ad3      	subs	r3, r2, r3
 800e1e6:	61fb      	str	r3, [r7, #28]
 800e1e8:	69bb      	ldr	r3, [r7, #24]
 800e1ea:	3304      	adds	r3, #4
 800e1ec:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e1ee:	e7e9      	b.n	800e1c4 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 800e1f0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e1f2:	69bb      	ldr	r3, [r7, #24]
 800e1f4:	681a      	ldr	r2, [r3, #0]
 800e1f6:	69fb      	ldr	r3, [r7, #28]
 800e1f8:	4413      	add	r3, r2
}
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	3720      	adds	r7, #32
 800e1fe:	46bd      	mov	sp, r7
 800e200:	bdb0      	pop	{r4, r5, r7, pc}

0800e202 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e202:	b580      	push	{r7, lr}
 800e204:	b086      	sub	sp, #24
 800e206:	af00      	add	r7, sp, #0
 800e208:	6078      	str	r0, [r7, #4]
 800e20a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e212:	693b      	ldr	r3, [r7, #16]
 800e214:	781b      	ldrb	r3, [r3, #0]
 800e216:	2b04      	cmp	r3, #4
 800e218:	d102      	bne.n	800e220 <dir_sdi+0x1e>
 800e21a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e21e:	e001      	b.n	800e224 <dir_sdi+0x22>
 800e220:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	429a      	cmp	r2, r3
 800e228:	d904      	bls.n	800e234 <dir_sdi+0x32>
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	f003 031f 	and.w	r3, r3, #31
 800e230:	2b00      	cmp	r3, #0
 800e232:	d001      	beq.n	800e238 <dir_sdi+0x36>
		return FR_INT_ERR;
 800e234:	2302      	movs	r3, #2
 800e236:	e066      	b.n	800e306 <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	683a      	ldr	r2, [r7, #0]
 800e23c:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	689b      	ldr	r3, [r3, #8]
 800e242:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e244:	697b      	ldr	r3, [r7, #20]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d109      	bne.n	800e25e <dir_sdi+0x5c>
 800e24a:	693b      	ldr	r3, [r7, #16]
 800e24c:	781b      	ldrb	r3, [r3, #0]
 800e24e:	2b02      	cmp	r3, #2
 800e250:	d905      	bls.n	800e25e <dir_sdi+0x5c>
		clst = fs->dirbase;
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e256:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2200      	movs	r2, #0
 800e25c:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d10c      	bne.n	800e27e <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	095b      	lsrs	r3, r3, #5
 800e268:	693a      	ldr	r2, [r7, #16]
 800e26a:	8912      	ldrh	r2, [r2, #8]
 800e26c:	4293      	cmp	r3, r2
 800e26e:	d301      	bcc.n	800e274 <dir_sdi+0x72>
 800e270:	2302      	movs	r3, #2
 800e272:	e048      	b.n	800e306 <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 800e274:	693b      	ldr	r3, [r7, #16]
 800e276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	639a      	str	r2, [r3, #56]	; 0x38
 800e27c:	e029      	b.n	800e2d2 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e27e:	693b      	ldr	r3, [r7, #16]
 800e280:	895b      	ldrh	r3, [r3, #10]
 800e282:	025b      	lsls	r3, r3, #9
 800e284:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e286:	e019      	b.n	800e2bc <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6979      	ldr	r1, [r7, #20]
 800e28c:	4618      	mov	r0, r3
 800e28e:	f7ff fa6f 	bl	800d770 <get_fat>
 800e292:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e294:	697b      	ldr	r3, [r7, #20]
 800e296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e29a:	d101      	bne.n	800e2a0 <dir_sdi+0x9e>
 800e29c:	2301      	movs	r3, #1
 800e29e:	e032      	b.n	800e306 <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e2a0:	697b      	ldr	r3, [r7, #20]
 800e2a2:	2b01      	cmp	r3, #1
 800e2a4:	d904      	bls.n	800e2b0 <dir_sdi+0xae>
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	69db      	ldr	r3, [r3, #28]
 800e2aa:	697a      	ldr	r2, [r7, #20]
 800e2ac:	429a      	cmp	r2, r3
 800e2ae:	d301      	bcc.n	800e2b4 <dir_sdi+0xb2>
 800e2b0:	2302      	movs	r3, #2
 800e2b2:	e028      	b.n	800e306 <dir_sdi+0x104>
			ofs -= csz;
 800e2b4:	683a      	ldr	r2, [r7, #0]
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	1ad3      	subs	r3, r2, r3
 800e2ba:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e2bc:	683a      	ldr	r2, [r7, #0]
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	d2e1      	bcs.n	800e288 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 800e2c4:	6979      	ldr	r1, [r7, #20]
 800e2c6:	6938      	ldr	r0, [r7, #16]
 800e2c8:	f7ff fa32 	bl	800d730 <clust2sect>
 800e2cc:	4602      	mov	r2, r0
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	697a      	ldr	r2, [r7, #20]
 800e2d6:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d101      	bne.n	800e2e4 <dir_sdi+0xe2>
 800e2e0:	2302      	movs	r3, #2
 800e2e2:	e010      	b.n	800e306 <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	0a5b      	lsrs	r3, r3, #9
 800e2ec:	441a      	add	r2, r3
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e2f2:	693b      	ldr	r3, [r7, #16]
 800e2f4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2fe:	441a      	add	r2, r3
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800e304:	2300      	movs	r3, #0
}
 800e306:	4618      	mov	r0, r3
 800e308:	3718      	adds	r7, #24
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}

0800e30e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e30e:	b580      	push	{r7, lr}
 800e310:	b086      	sub	sp, #24
 800e312:	af00      	add	r7, sp, #0
 800e314:	6078      	str	r0, [r7, #4]
 800e316:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e322:	3320      	adds	r3, #32
 800e324:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d00b      	beq.n	800e346 <dir_next+0x38>
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	781b      	ldrb	r3, [r3, #0]
 800e332:	2b04      	cmp	r3, #4
 800e334:	d102      	bne.n	800e33c <dir_next+0x2e>
 800e336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e33a:	e001      	b.n	800e340 <dir_next+0x32>
 800e33c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	429a      	cmp	r2, r3
 800e344:	d801      	bhi.n	800e34a <dir_next+0x3c>
 800e346:	2304      	movs	r3, #4
 800e348:	e0b2      	b.n	800e4b0 <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e34a:	68bb      	ldr	r3, [r7, #8]
 800e34c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e350:	2b00      	cmp	r3, #0
 800e352:	f040 80a0 	bne.w	800e496 <dir_next+0x188>
		dp->sect++;				/* Next sector */
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e35a:	1c5a      	adds	r2, r3, #1
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e364:	2b00      	cmp	r3, #0
 800e366:	d10b      	bne.n	800e380 <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	095b      	lsrs	r3, r3, #5
 800e36c:	68fa      	ldr	r2, [r7, #12]
 800e36e:	8912      	ldrh	r2, [r2, #8]
 800e370:	4293      	cmp	r3, r2
 800e372:	f0c0 8090 	bcc.w	800e496 <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2200      	movs	r2, #0
 800e37a:	639a      	str	r2, [r3, #56]	; 0x38
 800e37c:	2304      	movs	r3, #4
 800e37e:	e097      	b.n	800e4b0 <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	0a5b      	lsrs	r3, r3, #9
 800e384:	68fa      	ldr	r2, [r7, #12]
 800e386:	8952      	ldrh	r2, [r2, #10]
 800e388:	3a01      	subs	r2, #1
 800e38a:	4013      	ands	r3, r2
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	f040 8082 	bne.w	800e496 <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e392:	687a      	ldr	r2, [r7, #4]
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e398:	4619      	mov	r1, r3
 800e39a:	4610      	mov	r0, r2
 800e39c:	f7ff f9e8 	bl	800d770 <get_fat>
 800e3a0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	2b01      	cmp	r3, #1
 800e3a6:	d801      	bhi.n	800e3ac <dir_next+0x9e>
 800e3a8:	2302      	movs	r3, #2
 800e3aa:	e081      	b.n	800e4b0 <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e3ac:	697b      	ldr	r3, [r7, #20]
 800e3ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3b2:	d101      	bne.n	800e3b8 <dir_next+0xaa>
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	e07b      	b.n	800e4b0 <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	69db      	ldr	r3, [r3, #28]
 800e3bc:	697a      	ldr	r2, [r7, #20]
 800e3be:	429a      	cmp	r2, r3
 800e3c0:	d35f      	bcc.n	800e482 <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d104      	bne.n	800e3d2 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	639a      	str	r2, [r3, #56]	; 0x38
 800e3ce:	2304      	movs	r3, #4
 800e3d0:	e06e      	b.n	800e4b0 <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e3d2:	687a      	ldr	r2, [r7, #4]
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3d8:	4619      	mov	r1, r3
 800e3da:	4610      	mov	r0, r2
 800e3dc:	f7ff fdcc 	bl	800df78 <create_chain>
 800e3e0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e3e2:	697b      	ldr	r3, [r7, #20]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d101      	bne.n	800e3ec <dir_next+0xde>
 800e3e8:	2307      	movs	r3, #7
 800e3ea:	e061      	b.n	800e4b0 <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e3ec:	697b      	ldr	r3, [r7, #20]
 800e3ee:	2b01      	cmp	r3, #1
 800e3f0:	d101      	bne.n	800e3f6 <dir_next+0xe8>
 800e3f2:	2302      	movs	r3, #2
 800e3f4:	e05c      	b.n	800e4b0 <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e3f6:	697b      	ldr	r3, [r7, #20]
 800e3f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3fc:	d101      	bne.n	800e402 <dir_next+0xf4>
 800e3fe:	2301      	movs	r3, #1
 800e400:	e056      	b.n	800e4b0 <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	79db      	ldrb	r3, [r3, #7]
 800e406:	f043 0304 	orr.w	r3, r3, #4
 800e40a:	b2da      	uxtb	r2, r3
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e410:	68f8      	ldr	r0, [r7, #12]
 800e412:	f7ff f8ad 	bl	800d570 <sync_window>
 800e416:	4603      	mov	r3, r0
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d001      	beq.n	800e420 <dir_next+0x112>
 800e41c:	2301      	movs	r3, #1
 800e41e:	e047      	b.n	800e4b0 <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	3338      	adds	r3, #56	; 0x38
 800e424:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e428:	2100      	movs	r1, #0
 800e42a:	4618      	mov	r0, r3
 800e42c:	f7fe fed6 	bl	800d1dc <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e430:	2300      	movs	r3, #0
 800e432:	613b      	str	r3, [r7, #16]
 800e434:	6979      	ldr	r1, [r7, #20]
 800e436:	68f8      	ldr	r0, [r7, #12]
 800e438:	f7ff f97a 	bl	800d730 <clust2sect>
 800e43c:	4602      	mov	r2, r0
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	635a      	str	r2, [r3, #52]	; 0x34
 800e442:	e012      	b.n	800e46a <dir_next+0x15c>
						fs->wflag = 1;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	2201      	movs	r2, #1
 800e448:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e44a:	68f8      	ldr	r0, [r7, #12]
 800e44c:	f7ff f890 	bl	800d570 <sync_window>
 800e450:	4603      	mov	r3, r0
 800e452:	2b00      	cmp	r3, #0
 800e454:	d001      	beq.n	800e45a <dir_next+0x14c>
 800e456:	2301      	movs	r3, #1
 800e458:	e02a      	b.n	800e4b0 <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e45a:	693b      	ldr	r3, [r7, #16]
 800e45c:	3301      	adds	r3, #1
 800e45e:	613b      	str	r3, [r7, #16]
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e464:	1c5a      	adds	r2, r3, #1
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	635a      	str	r2, [r3, #52]	; 0x34
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	895b      	ldrh	r3, [r3, #10]
 800e46e:	461a      	mov	r2, r3
 800e470:	693b      	ldr	r3, [r7, #16]
 800e472:	4293      	cmp	r3, r2
 800e474:	d3e6      	bcc.n	800e444 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e47a:	693b      	ldr	r3, [r7, #16]
 800e47c:	1ad2      	subs	r2, r2, r3
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	697a      	ldr	r2, [r7, #20]
 800e486:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800e488:	6979      	ldr	r1, [r7, #20]
 800e48a:	68f8      	ldr	r0, [r7, #12]
 800e48c:	f7ff f950 	bl	800d730 <clust2sect>
 800e490:	4602      	mov	r2, r0
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	68ba      	ldr	r2, [r7, #8]
 800e49a:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4a8:	441a      	add	r2, r3
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800e4ae:	2300      	movs	r3, #0
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	3718      	adds	r7, #24
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd80      	pop	{r7, pc}

0800e4b8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b086      	sub	sp, #24
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
 800e4c0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e4c8:	2100      	movs	r1, #0
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	f7ff fe99 	bl	800e202 <dir_sdi>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e4d4:	7dfb      	ldrb	r3, [r7, #23]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d140      	bne.n	800e55c <dir_alloc+0xa4>
		n = 0;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4e2:	4619      	mov	r1, r3
 800e4e4:	68f8      	ldr	r0, [r7, #12]
 800e4e6:	f7ff f887 	bl	800d5f8 <move_window>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e4ee:	7dfb      	ldrb	r3, [r7, #23]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d132      	bne.n	800e55a <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	781b      	ldrb	r3, [r3, #0]
 800e4f8:	2b04      	cmp	r3, #4
 800e4fa:	d108      	bne.n	800e50e <dir_alloc+0x56>
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e500:	781b      	ldrb	r3, [r3, #0]
 800e502:	b25b      	sxtb	r3, r3
 800e504:	43db      	mvns	r3, r3
 800e506:	b2db      	uxtb	r3, r3
 800e508:	09db      	lsrs	r3, r3, #7
 800e50a:	b2db      	uxtb	r3, r3
 800e50c:	e00f      	b.n	800e52e <dir_alloc+0x76>
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e512:	781b      	ldrb	r3, [r3, #0]
 800e514:	2be5      	cmp	r3, #229	; 0xe5
 800e516:	d004      	beq.n	800e522 <dir_alloc+0x6a>
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e51c:	781b      	ldrb	r3, [r3, #0]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d101      	bne.n	800e526 <dir_alloc+0x6e>
 800e522:	2301      	movs	r3, #1
 800e524:	e000      	b.n	800e528 <dir_alloc+0x70>
 800e526:	2300      	movs	r3, #0
 800e528:	f003 0301 	and.w	r3, r3, #1
 800e52c:	b2db      	uxtb	r3, r3
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d007      	beq.n	800e542 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e532:	693b      	ldr	r3, [r7, #16]
 800e534:	3301      	adds	r3, #1
 800e536:	613b      	str	r3, [r7, #16]
 800e538:	693a      	ldr	r2, [r7, #16]
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	429a      	cmp	r2, r3
 800e53e:	d102      	bne.n	800e546 <dir_alloc+0x8e>
 800e540:	e00c      	b.n	800e55c <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e542:	2300      	movs	r3, #0
 800e544:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e546:	2101      	movs	r1, #1
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f7ff fee0 	bl	800e30e <dir_next>
 800e54e:	4603      	mov	r3, r0
 800e550:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e552:	7dfb      	ldrb	r3, [r7, #23]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d0c2      	beq.n	800e4de <dir_alloc+0x26>
 800e558:	e000      	b.n	800e55c <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800e55a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e55c:	7dfb      	ldrb	r3, [r7, #23]
 800e55e:	2b04      	cmp	r3, #4
 800e560:	d101      	bne.n	800e566 <dir_alloc+0xae>
 800e562:	2307      	movs	r3, #7
 800e564:	75fb      	strb	r3, [r7, #23]
	return res;
 800e566:	7dfb      	ldrb	r3, [r7, #23]
}
 800e568:	4618      	mov	r0, r3
 800e56a:	3718      	adds	r7, #24
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}

0800e570 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b084      	sub	sp, #16
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
 800e578:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	331a      	adds	r3, #26
 800e57e:	4618      	mov	r0, r3
 800e580:	f7fe fc26 	bl	800cdd0 <ld_word>
 800e584:	4603      	mov	r3, r0
 800e586:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	781b      	ldrb	r3, [r3, #0]
 800e58c:	2b03      	cmp	r3, #3
 800e58e:	d109      	bne.n	800e5a4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	3314      	adds	r3, #20
 800e594:	4618      	mov	r0, r3
 800e596:	f7fe fc1b 	bl	800cdd0 <ld_word>
 800e59a:	4603      	mov	r3, r0
 800e59c:	041b      	lsls	r3, r3, #16
 800e59e:	68fa      	ldr	r2, [r7, #12]
 800e5a0:	4313      	orrs	r3, r2
 800e5a2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
}
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	3710      	adds	r7, #16
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	bd80      	pop	{r7, pc}

0800e5ae <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e5ae:	b580      	push	{r7, lr}
 800e5b0:	b084      	sub	sp, #16
 800e5b2:	af00      	add	r7, sp, #0
 800e5b4:	60f8      	str	r0, [r7, #12]
 800e5b6:	60b9      	str	r1, [r7, #8]
 800e5b8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	331a      	adds	r3, #26
 800e5be:	687a      	ldr	r2, [r7, #4]
 800e5c0:	b292      	uxth	r2, r2
 800e5c2:	4611      	mov	r1, r2
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f7fe fd19 	bl	800cffc <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	781b      	ldrb	r3, [r3, #0]
 800e5ce:	2b03      	cmp	r3, #3
 800e5d0:	d109      	bne.n	800e5e6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	f103 0214 	add.w	r2, r3, #20
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	0c1b      	lsrs	r3, r3, #16
 800e5dc:	b29b      	uxth	r3, r3
 800e5de:	4619      	mov	r1, r3
 800e5e0:	4610      	mov	r0, r2
 800e5e2:	f7fe fd0b 	bl	800cffc <st_word>
	}
}
 800e5e6:	bf00      	nop
 800e5e8:	3710      	adds	r7, #16
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}
	...

0800e5f0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e5f0:	b590      	push	{r4, r7, lr}
 800e5f2:	b087      	sub	sp, #28
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
 800e5f8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	331a      	adds	r3, #26
 800e5fe:	4618      	mov	r0, r3
 800e600:	f7fe fbe6 	bl	800cdd0 <ld_word>
 800e604:	4603      	mov	r3, r0
 800e606:	2b00      	cmp	r3, #0
 800e608:	d001      	beq.n	800e60e <cmp_lfn+0x1e>
 800e60a:	2300      	movs	r3, #0
 800e60c:	e059      	b.n	800e6c2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	781b      	ldrb	r3, [r3, #0]
 800e612:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e616:	1e5a      	subs	r2, r3, #1
 800e618:	4613      	mov	r3, r2
 800e61a:	005b      	lsls	r3, r3, #1
 800e61c:	4413      	add	r3, r2
 800e61e:	009b      	lsls	r3, r3, #2
 800e620:	4413      	add	r3, r2
 800e622:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e624:	2301      	movs	r3, #1
 800e626:	81fb      	strh	r3, [r7, #14]
 800e628:	2300      	movs	r3, #0
 800e62a:	613b      	str	r3, [r7, #16]
 800e62c:	e033      	b.n	800e696 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e62e:	4a27      	ldr	r2, [pc, #156]	; (800e6cc <cmp_lfn+0xdc>)
 800e630:	693b      	ldr	r3, [r7, #16]
 800e632:	4413      	add	r3, r2
 800e634:	781b      	ldrb	r3, [r3, #0]
 800e636:	461a      	mov	r2, r3
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	4413      	add	r3, r2
 800e63c:	4618      	mov	r0, r3
 800e63e:	f7fe fbc7 	bl	800cdd0 <ld_word>
 800e642:	4603      	mov	r3, r0
 800e644:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e646:	89fb      	ldrh	r3, [r7, #14]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d01a      	beq.n	800e682 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e64c:	697b      	ldr	r3, [r7, #20]
 800e64e:	2bfe      	cmp	r3, #254	; 0xfe
 800e650:	d812      	bhi.n	800e678 <cmp_lfn+0x88>
 800e652:	89bb      	ldrh	r3, [r7, #12]
 800e654:	4618      	mov	r0, r3
 800e656:	f003 f96f 	bl	8011938 <ff_wtoupper>
 800e65a:	4603      	mov	r3, r0
 800e65c:	461c      	mov	r4, r3
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	1c5a      	adds	r2, r3, #1
 800e662:	617a      	str	r2, [r7, #20]
 800e664:	005b      	lsls	r3, r3, #1
 800e666:	687a      	ldr	r2, [r7, #4]
 800e668:	4413      	add	r3, r2
 800e66a:	881b      	ldrh	r3, [r3, #0]
 800e66c:	4618      	mov	r0, r3
 800e66e:	f003 f963 	bl	8011938 <ff_wtoupper>
 800e672:	4603      	mov	r3, r0
 800e674:	429c      	cmp	r4, r3
 800e676:	d001      	beq.n	800e67c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e678:	2300      	movs	r3, #0
 800e67a:	e022      	b.n	800e6c2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800e67c:	89bb      	ldrh	r3, [r7, #12]
 800e67e:	81fb      	strh	r3, [r7, #14]
 800e680:	e006      	b.n	800e690 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e682:	89bb      	ldrh	r3, [r7, #12]
 800e684:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e688:	4293      	cmp	r3, r2
 800e68a:	d001      	beq.n	800e690 <cmp_lfn+0xa0>
 800e68c:	2300      	movs	r3, #0
 800e68e:	e018      	b.n	800e6c2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e690:	693b      	ldr	r3, [r7, #16]
 800e692:	3301      	adds	r3, #1
 800e694:	613b      	str	r3, [r7, #16]
 800e696:	693b      	ldr	r3, [r7, #16]
 800e698:	2b0c      	cmp	r3, #12
 800e69a:	d9c8      	bls.n	800e62e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	781b      	ldrb	r3, [r3, #0]
 800e6a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d00b      	beq.n	800e6c0 <cmp_lfn+0xd0>
 800e6a8:	89fb      	ldrh	r3, [r7, #14]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d008      	beq.n	800e6c0 <cmp_lfn+0xd0>
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	005b      	lsls	r3, r3, #1
 800e6b2:	687a      	ldr	r2, [r7, #4]
 800e6b4:	4413      	add	r3, r2
 800e6b6:	881b      	ldrh	r3, [r3, #0]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d001      	beq.n	800e6c0 <cmp_lfn+0xd0>
 800e6bc:	2300      	movs	r3, #0
 800e6be:	e000      	b.n	800e6c2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e6c0:	2301      	movs	r3, #1
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	371c      	adds	r7, #28
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd90      	pop	{r4, r7, pc}
 800e6ca:	bf00      	nop
 800e6cc:	08017524 	.word	0x08017524

0800e6d0 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b086      	sub	sp, #24
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
 800e6d8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	331a      	adds	r3, #26
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f7fe fb76 	bl	800cdd0 <ld_word>
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d001      	beq.n	800e6ee <pick_lfn+0x1e>
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	e04d      	b.n	800e78a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	781b      	ldrb	r3, [r3, #0]
 800e6f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e6f6:	1e5a      	subs	r2, r3, #1
 800e6f8:	4613      	mov	r3, r2
 800e6fa:	005b      	lsls	r3, r3, #1
 800e6fc:	4413      	add	r3, r2
 800e6fe:	009b      	lsls	r3, r3, #2
 800e700:	4413      	add	r3, r2
 800e702:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e704:	2301      	movs	r3, #1
 800e706:	81fb      	strh	r3, [r7, #14]
 800e708:	2300      	movs	r3, #0
 800e70a:	613b      	str	r3, [r7, #16]
 800e70c:	e028      	b.n	800e760 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e70e:	4a21      	ldr	r2, [pc, #132]	; (800e794 <pick_lfn+0xc4>)
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	4413      	add	r3, r2
 800e714:	781b      	ldrb	r3, [r3, #0]
 800e716:	461a      	mov	r2, r3
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	4413      	add	r3, r2
 800e71c:	4618      	mov	r0, r3
 800e71e:	f7fe fb57 	bl	800cdd0 <ld_word>
 800e722:	4603      	mov	r3, r0
 800e724:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e726:	89fb      	ldrh	r3, [r7, #14]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d00f      	beq.n	800e74c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	2bfe      	cmp	r3, #254	; 0xfe
 800e730:	d901      	bls.n	800e736 <pick_lfn+0x66>
 800e732:	2300      	movs	r3, #0
 800e734:	e029      	b.n	800e78a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800e736:	89bb      	ldrh	r3, [r7, #12]
 800e738:	81fb      	strh	r3, [r7, #14]
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	1c5a      	adds	r2, r3, #1
 800e73e:	617a      	str	r2, [r7, #20]
 800e740:	005b      	lsls	r3, r3, #1
 800e742:	687a      	ldr	r2, [r7, #4]
 800e744:	4413      	add	r3, r2
 800e746:	89fa      	ldrh	r2, [r7, #14]
 800e748:	801a      	strh	r2, [r3, #0]
 800e74a:	e006      	b.n	800e75a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e74c:	89bb      	ldrh	r3, [r7, #12]
 800e74e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e752:	4293      	cmp	r3, r2
 800e754:	d001      	beq.n	800e75a <pick_lfn+0x8a>
 800e756:	2300      	movs	r3, #0
 800e758:	e017      	b.n	800e78a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	3301      	adds	r3, #1
 800e75e:	613b      	str	r3, [r7, #16]
 800e760:	693b      	ldr	r3, [r7, #16]
 800e762:	2b0c      	cmp	r3, #12
 800e764:	d9d3      	bls.n	800e70e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	781b      	ldrb	r3, [r3, #0]
 800e76a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d00a      	beq.n	800e788 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800e772:	697b      	ldr	r3, [r7, #20]
 800e774:	2bfe      	cmp	r3, #254	; 0xfe
 800e776:	d901      	bls.n	800e77c <pick_lfn+0xac>
 800e778:	2300      	movs	r3, #0
 800e77a:	e006      	b.n	800e78a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800e77c:	697b      	ldr	r3, [r7, #20]
 800e77e:	005b      	lsls	r3, r3, #1
 800e780:	687a      	ldr	r2, [r7, #4]
 800e782:	4413      	add	r3, r2
 800e784:	2200      	movs	r2, #0
 800e786:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800e788:	2301      	movs	r3, #1
}
 800e78a:	4618      	mov	r0, r3
 800e78c:	3718      	adds	r7, #24
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}
 800e792:	bf00      	nop
 800e794:	08017524 	.word	0x08017524

0800e798 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b088      	sub	sp, #32
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	60f8      	str	r0, [r7, #12]
 800e7a0:	60b9      	str	r1, [r7, #8]
 800e7a2:	4611      	mov	r1, r2
 800e7a4:	461a      	mov	r2, r3
 800e7a6:	460b      	mov	r3, r1
 800e7a8:	71fb      	strb	r3, [r7, #7]
 800e7aa:	4613      	mov	r3, r2
 800e7ac:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	330d      	adds	r3, #13
 800e7b2:	79ba      	ldrb	r2, [r7, #6]
 800e7b4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	330b      	adds	r3, #11
 800e7ba:	220f      	movs	r2, #15
 800e7bc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	330c      	adds	r3, #12
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e7c6:	68bb      	ldr	r3, [r7, #8]
 800e7c8:	331a      	adds	r3, #26
 800e7ca:	2100      	movs	r1, #0
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f7fe fc15 	bl	800cffc <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e7d2:	79fb      	ldrb	r3, [r7, #7]
 800e7d4:	1e5a      	subs	r2, r3, #1
 800e7d6:	4613      	mov	r3, r2
 800e7d8:	005b      	lsls	r3, r3, #1
 800e7da:	4413      	add	r3, r2
 800e7dc:	009b      	lsls	r3, r3, #2
 800e7de:	4413      	add	r3, r2
 800e7e0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	82fb      	strh	r3, [r7, #22]
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e7ea:	8afb      	ldrh	r3, [r7, #22]
 800e7ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7f0:	4293      	cmp	r3, r2
 800e7f2:	d007      	beq.n	800e804 <put_lfn+0x6c>
 800e7f4:	69fb      	ldr	r3, [r7, #28]
 800e7f6:	1c5a      	adds	r2, r3, #1
 800e7f8:	61fa      	str	r2, [r7, #28]
 800e7fa:	005b      	lsls	r3, r3, #1
 800e7fc:	68fa      	ldr	r2, [r7, #12]
 800e7fe:	4413      	add	r3, r2
 800e800:	881b      	ldrh	r3, [r3, #0]
 800e802:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e804:	4a17      	ldr	r2, [pc, #92]	; (800e864 <put_lfn+0xcc>)
 800e806:	69bb      	ldr	r3, [r7, #24]
 800e808:	4413      	add	r3, r2
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	461a      	mov	r2, r3
 800e80e:	68bb      	ldr	r3, [r7, #8]
 800e810:	4413      	add	r3, r2
 800e812:	8afa      	ldrh	r2, [r7, #22]
 800e814:	4611      	mov	r1, r2
 800e816:	4618      	mov	r0, r3
 800e818:	f7fe fbf0 	bl	800cffc <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e81c:	8afb      	ldrh	r3, [r7, #22]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d102      	bne.n	800e828 <put_lfn+0x90>
 800e822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e826:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e828:	69bb      	ldr	r3, [r7, #24]
 800e82a:	3301      	adds	r3, #1
 800e82c:	61bb      	str	r3, [r7, #24]
 800e82e:	69bb      	ldr	r3, [r7, #24]
 800e830:	2b0c      	cmp	r3, #12
 800e832:	d9da      	bls.n	800e7ea <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e834:	8afb      	ldrh	r3, [r7, #22]
 800e836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e83a:	4293      	cmp	r3, r2
 800e83c:	d006      	beq.n	800e84c <put_lfn+0xb4>
 800e83e:	69fb      	ldr	r3, [r7, #28]
 800e840:	005b      	lsls	r3, r3, #1
 800e842:	68fa      	ldr	r2, [r7, #12]
 800e844:	4413      	add	r3, r2
 800e846:	881b      	ldrh	r3, [r3, #0]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d103      	bne.n	800e854 <put_lfn+0xbc>
 800e84c:	79fb      	ldrb	r3, [r7, #7]
 800e84e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e852:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	79fa      	ldrb	r2, [r7, #7]
 800e858:	701a      	strb	r2, [r3, #0]
}
 800e85a:	bf00      	nop
 800e85c:	3720      	adds	r7, #32
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}
 800e862:	bf00      	nop
 800e864:	08017524 	.word	0x08017524

0800e868 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b08c      	sub	sp, #48	; 0x30
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	60f8      	str	r0, [r7, #12]
 800e870:	60b9      	str	r1, [r7, #8]
 800e872:	607a      	str	r2, [r7, #4]
 800e874:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e876:	220b      	movs	r2, #11
 800e878:	68b9      	ldr	r1, [r7, #8]
 800e87a:	68f8      	ldr	r0, [r7, #12]
 800e87c:	f7fe fc8d 	bl	800d19a <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	2b05      	cmp	r3, #5
 800e884:	d92b      	bls.n	800e8de <gen_numname+0x76>
		sr = seq;
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e88a:	e022      	b.n	800e8d2 <gen_numname+0x6a>
			wc = *lfn++;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	1c9a      	adds	r2, r3, #2
 800e890:	607a      	str	r2, [r7, #4]
 800e892:	881b      	ldrh	r3, [r3, #0]
 800e894:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800e896:	2300      	movs	r3, #0
 800e898:	62bb      	str	r3, [r7, #40]	; 0x28
 800e89a:	e017      	b.n	800e8cc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e89c:	69fb      	ldr	r3, [r7, #28]
 800e89e:	005a      	lsls	r2, r3, #1
 800e8a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e8a2:	f003 0301 	and.w	r3, r3, #1
 800e8a6:	4413      	add	r3, r2
 800e8a8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e8aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e8ac:	085b      	lsrs	r3, r3, #1
 800e8ae:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e8b0:	69fb      	ldr	r3, [r7, #28]
 800e8b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d005      	beq.n	800e8c6 <gen_numname+0x5e>
 800e8ba:	69fb      	ldr	r3, [r7, #28]
 800e8bc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800e8c0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800e8c4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c8:	3301      	adds	r3, #1
 800e8ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800e8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ce:	2b0f      	cmp	r3, #15
 800e8d0:	d9e4      	bls.n	800e89c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	881b      	ldrh	r3, [r3, #0]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d1d8      	bne.n	800e88c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e8da:	69fb      	ldr	r3, [r7, #28]
 800e8dc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e8de:	2307      	movs	r3, #7
 800e8e0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	b2db      	uxtb	r3, r3
 800e8e6:	f003 030f 	and.w	r3, r3, #15
 800e8ea:	b2db      	uxtb	r3, r3
 800e8ec:	3330      	adds	r3, #48	; 0x30
 800e8ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800e8f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e8f6:	2b39      	cmp	r3, #57	; 0x39
 800e8f8:	d904      	bls.n	800e904 <gen_numname+0x9c>
 800e8fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e8fe:	3307      	adds	r3, #7
 800e900:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800e904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e906:	1e5a      	subs	r2, r3, #1
 800e908:	62ba      	str	r2, [r7, #40]	; 0x28
 800e90a:	3330      	adds	r3, #48	; 0x30
 800e90c:	443b      	add	r3, r7
 800e90e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e912:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	091b      	lsrs	r3, r3, #4
 800e91a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d1df      	bne.n	800e8e2 <gen_numname+0x7a>
	ns[i] = '~';
 800e922:	f107 0214 	add.w	r2, r7, #20
 800e926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e928:	4413      	add	r3, r2
 800e92a:	227e      	movs	r2, #126	; 0x7e
 800e92c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e92e:	2300      	movs	r3, #0
 800e930:	627b      	str	r3, [r7, #36]	; 0x24
 800e932:	e002      	b.n	800e93a <gen_numname+0xd2>
 800e934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e936:	3301      	adds	r3, #1
 800e938:	627b      	str	r3, [r7, #36]	; 0x24
 800e93a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e93e:	429a      	cmp	r2, r3
 800e940:	d205      	bcs.n	800e94e <gen_numname+0xe6>
 800e942:	68fa      	ldr	r2, [r7, #12]
 800e944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e946:	4413      	add	r3, r2
 800e948:	781b      	ldrb	r3, [r3, #0]
 800e94a:	2b20      	cmp	r3, #32
 800e94c:	d1f2      	bne.n	800e934 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e950:	2b07      	cmp	r3, #7
 800e952:	d807      	bhi.n	800e964 <gen_numname+0xfc>
 800e954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e956:	1c5a      	adds	r2, r3, #1
 800e958:	62ba      	str	r2, [r7, #40]	; 0x28
 800e95a:	3330      	adds	r3, #48	; 0x30
 800e95c:	443b      	add	r3, r7
 800e95e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e962:	e000      	b.n	800e966 <gen_numname+0xfe>
 800e964:	2120      	movs	r1, #32
 800e966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e968:	1c5a      	adds	r2, r3, #1
 800e96a:	627a      	str	r2, [r7, #36]	; 0x24
 800e96c:	68fa      	ldr	r2, [r7, #12]
 800e96e:	4413      	add	r3, r2
 800e970:	460a      	mov	r2, r1
 800e972:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e976:	2b07      	cmp	r3, #7
 800e978:	d9e9      	bls.n	800e94e <gen_numname+0xe6>
}
 800e97a:	bf00      	nop
 800e97c:	bf00      	nop
 800e97e:	3730      	adds	r7, #48	; 0x30
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}

0800e984 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e984:	b480      	push	{r7}
 800e986:	b085      	sub	sp, #20
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e98c:	2300      	movs	r3, #0
 800e98e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e990:	230b      	movs	r3, #11
 800e992:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e994:	7bfb      	ldrb	r3, [r7, #15]
 800e996:	b2da      	uxtb	r2, r3
 800e998:	0852      	lsrs	r2, r2, #1
 800e99a:	01db      	lsls	r3, r3, #7
 800e99c:	4313      	orrs	r3, r2
 800e99e:	b2da      	uxtb	r2, r3
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	1c59      	adds	r1, r3, #1
 800e9a4:	6079      	str	r1, [r7, #4]
 800e9a6:	781b      	ldrb	r3, [r3, #0]
 800e9a8:	4413      	add	r3, r2
 800e9aa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e9ac:	68bb      	ldr	r3, [r7, #8]
 800e9ae:	3b01      	subs	r3, #1
 800e9b0:	60bb      	str	r3, [r7, #8]
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d1ed      	bne.n	800e994 <sum_sfn+0x10>
	return sum;
 800e9b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3714      	adds	r7, #20
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c4:	4770      	bx	lr

0800e9c6 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800e9c6:	b480      	push	{r7}
 800e9c8:	b087      	sub	sp, #28
 800e9ca:	af00      	add	r7, sp, #0
 800e9cc:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	3301      	adds	r3, #1
 800e9d2:	781b      	ldrb	r3, [r3, #0]
 800e9d4:	3301      	adds	r3, #1
 800e9d6:	015b      	lsls	r3, r3, #5
 800e9d8:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800e9da:	2300      	movs	r3, #0
 800e9dc:	827b      	strh	r3, [r7, #18]
 800e9de:	2300      	movs	r3, #0
 800e9e0:	617b      	str	r3, [r7, #20]
 800e9e2:	e018      	b.n	800ea16 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	2b02      	cmp	r3, #2
 800e9e8:	d103      	bne.n	800e9f2 <xdir_sum+0x2c>
			i++;
 800e9ea:	697b      	ldr	r3, [r7, #20]
 800e9ec:	3301      	adds	r3, #1
 800e9ee:	617b      	str	r3, [r7, #20]
 800e9f0:	e00e      	b.n	800ea10 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800e9f2:	8a7b      	ldrh	r3, [r7, #18]
 800e9f4:	03db      	lsls	r3, r3, #15
 800e9f6:	b29a      	uxth	r2, r3
 800e9f8:	8a7b      	ldrh	r3, [r7, #18]
 800e9fa:	085b      	lsrs	r3, r3, #1
 800e9fc:	b29b      	uxth	r3, r3
 800e9fe:	4413      	add	r3, r2
 800ea00:	b29a      	uxth	r2, r3
 800ea02:	6879      	ldr	r1, [r7, #4]
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	440b      	add	r3, r1
 800ea08:	781b      	ldrb	r3, [r3, #0]
 800ea0a:	b29b      	uxth	r3, r3
 800ea0c:	4413      	add	r3, r2
 800ea0e:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	3301      	adds	r3, #1
 800ea14:	617b      	str	r3, [r7, #20]
 800ea16:	697a      	ldr	r2, [r7, #20]
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	429a      	cmp	r2, r3
 800ea1c:	d3e2      	bcc.n	800e9e4 <xdir_sum+0x1e>
		}
	}
	return sum;
 800ea1e:	8a7b      	ldrh	r3, [r7, #18]
}
 800ea20:	4618      	mov	r0, r3
 800ea22:	371c      	adds	r7, #28
 800ea24:	46bd      	mov	sp, r7
 800ea26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2a:	4770      	bx	lr

0800ea2c <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b084      	sub	sp, #16
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800ea34:	2300      	movs	r3, #0
 800ea36:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800ea38:	e01f      	b.n	800ea7a <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800ea3a:	89bb      	ldrh	r3, [r7, #12]
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f002 ff7b 	bl	8011938 <ff_wtoupper>
 800ea42:	4603      	mov	r3, r0
 800ea44:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800ea46:	89fb      	ldrh	r3, [r7, #14]
 800ea48:	03db      	lsls	r3, r3, #15
 800ea4a:	b29a      	uxth	r2, r3
 800ea4c:	89fb      	ldrh	r3, [r7, #14]
 800ea4e:	085b      	lsrs	r3, r3, #1
 800ea50:	b29b      	uxth	r3, r3
 800ea52:	4413      	add	r3, r2
 800ea54:	b29a      	uxth	r2, r3
 800ea56:	89bb      	ldrh	r3, [r7, #12]
 800ea58:	b2db      	uxtb	r3, r3
 800ea5a:	b29b      	uxth	r3, r3
 800ea5c:	4413      	add	r3, r2
 800ea5e:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800ea60:	89fb      	ldrh	r3, [r7, #14]
 800ea62:	03db      	lsls	r3, r3, #15
 800ea64:	b29a      	uxth	r2, r3
 800ea66:	89fb      	ldrh	r3, [r7, #14]
 800ea68:	085b      	lsrs	r3, r3, #1
 800ea6a:	b29b      	uxth	r3, r3
 800ea6c:	4413      	add	r3, r2
 800ea6e:	b29a      	uxth	r2, r3
 800ea70:	89bb      	ldrh	r3, [r7, #12]
 800ea72:	0a1b      	lsrs	r3, r3, #8
 800ea74:	b29b      	uxth	r3, r3
 800ea76:	4413      	add	r3, r2
 800ea78:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	1c9a      	adds	r2, r3, #2
 800ea7e:	607a      	str	r2, [r7, #4]
 800ea80:	881b      	ldrh	r3, [r3, #0]
 800ea82:	81bb      	strh	r3, [r7, #12]
 800ea84:	89bb      	ldrh	r3, [r7, #12]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d1d7      	bne.n	800ea3a <xname_sum+0xe>
	}
	return sum;
 800ea8a:	89fb      	ldrh	r3, [r7, #14]
}
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	3710      	adds	r7, #16
 800ea90:	46bd      	mov	sp, r7
 800ea92:	bd80      	pop	{r7, pc}

0800ea94 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800ea94:	b590      	push	{r4, r7, lr}
 800ea96:	b087      	sub	sp, #28
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	691b      	ldr	r3, [r3, #16]
 800eaa2:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681a      	ldr	r2, [r3, #0]
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaac:	4619      	mov	r1, r3
 800eaae:	4610      	mov	r0, r2
 800eab0:	f7fe fda2 	bl	800d5f8 <move_window>
 800eab4:	4603      	mov	r3, r0
 800eab6:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800eab8:	7bfb      	ldrb	r3, [r7, #15]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d001      	beq.n	800eac2 <load_xdir+0x2e>
 800eabe:	7bfb      	ldrb	r3, [r7, #15]
 800eac0:	e09f      	b.n	800ec02 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eac6:	781b      	ldrb	r3, [r3, #0]
 800eac8:	2b85      	cmp	r3, #133	; 0x85
 800eaca:	d001      	beq.n	800ead0 <load_xdir+0x3c>
 800eacc:	2302      	movs	r3, #2
 800eace:	e098      	b.n	800ec02 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ead4:	2220      	movs	r2, #32
 800ead6:	4619      	mov	r1, r3
 800ead8:	6938      	ldr	r0, [r7, #16]
 800eada:	f7fe fb5e 	bl	800d19a <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800eade:	693b      	ldr	r3, [r7, #16]
 800eae0:	3301      	adds	r3, #1
 800eae2:	781b      	ldrb	r3, [r3, #0]
 800eae4:	3301      	adds	r3, #1
 800eae6:	015b      	lsls	r3, r3, #5
 800eae8:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800eaea:	68bb      	ldr	r3, [r7, #8]
 800eaec:	2b5f      	cmp	r3, #95	; 0x5f
 800eaee:	d903      	bls.n	800eaf8 <load_xdir+0x64>
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800eaf6:	d901      	bls.n	800eafc <load_xdir+0x68>
 800eaf8:	2302      	movs	r3, #2
 800eafa:	e082      	b.n	800ec02 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800eafc:	2100      	movs	r1, #0
 800eafe:	6878      	ldr	r0, [r7, #4]
 800eb00:	f7ff fc05 	bl	800e30e <dir_next>
 800eb04:	4603      	mov	r3, r0
 800eb06:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800eb08:	7bfb      	ldrb	r3, [r7, #15]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d001      	beq.n	800eb12 <load_xdir+0x7e>
 800eb0e:	7bfb      	ldrb	r3, [r7, #15]
 800eb10:	e077      	b.n	800ec02 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681a      	ldr	r2, [r3, #0]
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb1a:	4619      	mov	r1, r3
 800eb1c:	4610      	mov	r0, r2
 800eb1e:	f7fe fd6b 	bl	800d5f8 <move_window>
 800eb22:	4603      	mov	r3, r0
 800eb24:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800eb26:	7bfb      	ldrb	r3, [r7, #15]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d001      	beq.n	800eb30 <load_xdir+0x9c>
 800eb2c:	7bfb      	ldrb	r3, [r7, #15]
 800eb2e:	e068      	b.n	800ec02 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb34:	781b      	ldrb	r3, [r3, #0]
 800eb36:	2bc0      	cmp	r3, #192	; 0xc0
 800eb38:	d001      	beq.n	800eb3e <load_xdir+0xaa>
 800eb3a:	2302      	movs	r3, #2
 800eb3c:	e061      	b.n	800ec02 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800eb3e:	693b      	ldr	r3, [r7, #16]
 800eb40:	f103 0020 	add.w	r0, r3, #32
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb48:	2220      	movs	r2, #32
 800eb4a:	4619      	mov	r1, r3
 800eb4c:	f7fe fb25 	bl	800d19a <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800eb50:	693b      	ldr	r3, [r7, #16]
 800eb52:	3323      	adds	r3, #35	; 0x23
 800eb54:	781b      	ldrb	r3, [r3, #0]
 800eb56:	332c      	adds	r3, #44	; 0x2c
 800eb58:	4a2c      	ldr	r2, [pc, #176]	; (800ec0c <load_xdir+0x178>)
 800eb5a:	fba2 2303 	umull	r2, r3, r2, r3
 800eb5e:	08db      	lsrs	r3, r3, #3
 800eb60:	015b      	lsls	r3, r3, #5
 800eb62:	68ba      	ldr	r2, [r7, #8]
 800eb64:	429a      	cmp	r2, r3
 800eb66:	d201      	bcs.n	800eb6c <load_xdir+0xd8>
 800eb68:	2302      	movs	r3, #2
 800eb6a:	e04a      	b.n	800ec02 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800eb6c:	2340      	movs	r3, #64	; 0x40
 800eb6e:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800eb70:	2100      	movs	r1, #0
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f7ff fbcb 	bl	800e30e <dir_next>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800eb7c:	7bfb      	ldrb	r3, [r7, #15]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d001      	beq.n	800eb86 <load_xdir+0xf2>
 800eb82:	7bfb      	ldrb	r3, [r7, #15]
 800eb84:	e03d      	b.n	800ec02 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681a      	ldr	r2, [r3, #0]
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb8e:	4619      	mov	r1, r3
 800eb90:	4610      	mov	r0, r2
 800eb92:	f7fe fd31 	bl	800d5f8 <move_window>
 800eb96:	4603      	mov	r3, r0
 800eb98:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800eb9a:	7bfb      	ldrb	r3, [r7, #15]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d001      	beq.n	800eba4 <load_xdir+0x110>
 800eba0:	7bfb      	ldrb	r3, [r7, #15]
 800eba2:	e02e      	b.n	800ec02 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eba8:	781b      	ldrb	r3, [r3, #0]
 800ebaa:	2bc1      	cmp	r3, #193	; 0xc1
 800ebac:	d001      	beq.n	800ebb2 <load_xdir+0x11e>
 800ebae:	2302      	movs	r3, #2
 800ebb0:	e027      	b.n	800ec02 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800ebb8:	d208      	bcs.n	800ebcc <load_xdir+0x138>
 800ebba:	693a      	ldr	r2, [r7, #16]
 800ebbc:	697b      	ldr	r3, [r7, #20]
 800ebbe:	18d0      	adds	r0, r2, r3
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebc4:	2220      	movs	r2, #32
 800ebc6:	4619      	mov	r1, r3
 800ebc8:	f7fe fae7 	bl	800d19a <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800ebcc:	697b      	ldr	r3, [r7, #20]
 800ebce:	3320      	adds	r3, #32
 800ebd0:	617b      	str	r3, [r7, #20]
 800ebd2:	697a      	ldr	r2, [r7, #20]
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	429a      	cmp	r2, r3
 800ebd8:	d3ca      	bcc.n	800eb70 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800ebe0:	d80e      	bhi.n	800ec00 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800ebe2:	6938      	ldr	r0, [r7, #16]
 800ebe4:	f7ff feef 	bl	800e9c6 <xdir_sum>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	461c      	mov	r4, r3
 800ebec:	693b      	ldr	r3, [r7, #16]
 800ebee:	3302      	adds	r3, #2
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f7fe f8ed 	bl	800cdd0 <ld_word>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	429c      	cmp	r4, r3
 800ebfa:	d001      	beq.n	800ec00 <load_xdir+0x16c>
 800ebfc:	2302      	movs	r3, #2
 800ebfe:	e000      	b.n	800ec02 <load_xdir+0x16e>
	}
	return FR_OK;
 800ec00:	2300      	movs	r3, #0
}
 800ec02:	4618      	mov	r0, r3
 800ec04:	371c      	adds	r7, #28
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd90      	pop	{r4, r7, pc}
 800ec0a:	bf00      	nop
 800ec0c:	88888889 	.word	0x88888889

0800ec10 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800ec10:	b5b0      	push	{r4, r5, r7, lr}
 800ec12:	b084      	sub	sp, #16
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
 800ec18:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800ec1a:	6839      	ldr	r1, [r7, #0]
 800ec1c:	6808      	ldr	r0, [r1, #0]
 800ec1e:	6879      	ldr	r1, [r7, #4]
 800ec20:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800ec22:	6839      	ldr	r1, [r7, #0]
 800ec24:	6a08      	ldr	r0, [r1, #32]
 800ec26:	6879      	ldr	r1, [r7, #4]
 800ec28:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800ec2a:	6839      	ldr	r1, [r7, #0]
 800ec2c:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800ec2e:	b2c8      	uxtb	r0, r1
 800ec30:	6879      	ldr	r1, [r7, #4]
 800ec32:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800ec34:	6839      	ldr	r1, [r7, #0]
 800ec36:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800ec38:	2000      	movs	r0, #0
 800ec3a:	460c      	mov	r4, r1
 800ec3c:	4605      	mov	r5, r0
 800ec3e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800ec42:	2300      	movs	r3, #0
 800ec44:	6879      	ldr	r1, [r7, #4]
 800ec46:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800ec4a:	683b      	ldr	r3, [r7, #0]
 800ec4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec56:	4619      	mov	r1, r3
 800ec58:	6878      	ldr	r0, [r7, #4]
 800ec5a:	f7ff fad2 	bl	800e202 <dir_sdi>
 800ec5e:	4603      	mov	r3, r0
 800ec60:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ec62:	7bfb      	ldrb	r3, [r7, #15]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d104      	bne.n	800ec72 <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800ec68:	6878      	ldr	r0, [r7, #4]
 800ec6a:	f7ff ff13 	bl	800ea94 <load_xdir>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800ec72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec74:	4618      	mov	r0, r3
 800ec76:	3710      	adds	r7, #16
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	bdb0      	pop	{r4, r5, r7, pc}

0800ec7c <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800ec7c:	b590      	push	{r4, r7, lr}
 800ec7e:	b087      	sub	sp, #28
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	691b      	ldr	r3, [r3, #16]
 800ec8a:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	1c9c      	adds	r4, r3, #2
 800ec90:	68f8      	ldr	r0, [r7, #12]
 800ec92:	f7ff fe98 	bl	800e9c6 <xdir_sum>
 800ec96:	4603      	mov	r3, r0
 800ec98:	4619      	mov	r1, r3
 800ec9a:	4620      	mov	r0, r4
 800ec9c:	f7fe f9ae 	bl	800cffc <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	3301      	adds	r3, #1
 800eca4:	781b      	ldrb	r3, [r3, #0]
 800eca6:	3301      	adds	r3, #1
 800eca8:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ecae:	4619      	mov	r1, r3
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f7ff faa6 	bl	800e202 <dir_sdi>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800ecba:	e026      	b.n	800ed0a <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681a      	ldr	r2, [r3, #0]
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecc4:	4619      	mov	r1, r3
 800ecc6:	4610      	mov	r0, r2
 800ecc8:	f7fe fc96 	bl	800d5f8 <move_window>
 800eccc:	4603      	mov	r3, r0
 800ecce:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ecd0:	7dfb      	ldrb	r3, [r7, #23]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d11d      	bne.n	800ed12 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecda:	2220      	movs	r2, #32
 800ecdc:	68f9      	ldr	r1, [r7, #12]
 800ecde:	4618      	mov	r0, r3
 800ece0:	f7fe fa5b 	bl	800d19a <mem_cpy>
		dp->obj.fs->wflag = 1;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	2201      	movs	r2, #1
 800ecea:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800ecec:	693b      	ldr	r3, [r7, #16]
 800ecee:	3b01      	subs	r3, #1
 800ecf0:	613b      	str	r3, [r7, #16]
 800ecf2:	693b      	ldr	r3, [r7, #16]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d00e      	beq.n	800ed16 <store_xdir+0x9a>
		dirb += SZDIRE;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	3320      	adds	r3, #32
 800ecfc:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800ecfe:	2100      	movs	r1, #0
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f7ff fb04 	bl	800e30e <dir_next>
 800ed06:	4603      	mov	r3, r0
 800ed08:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800ed0a:	7dfb      	ldrb	r3, [r7, #23]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d0d5      	beq.n	800ecbc <store_xdir+0x40>
 800ed10:	e002      	b.n	800ed18 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800ed12:	bf00      	nop
 800ed14:	e000      	b.n	800ed18 <store_xdir+0x9c>
		if (--nent == 0) break;
 800ed16:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800ed18:	7dfb      	ldrb	r3, [r7, #23]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d002      	beq.n	800ed24 <store_xdir+0xa8>
 800ed1e:	7dfb      	ldrb	r3, [r7, #23]
 800ed20:	2b01      	cmp	r3, #1
 800ed22:	d101      	bne.n	800ed28 <store_xdir+0xac>
 800ed24:	7dfb      	ldrb	r3, [r7, #23]
 800ed26:	e000      	b.n	800ed2a <store_xdir+0xae>
 800ed28:	2302      	movs	r3, #2
}
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	371c      	adds	r7, #28
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd90      	pop	{r4, r7, pc}

0800ed32 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800ed32:	b590      	push	{r4, r7, lr}
 800ed34:	b085      	sub	sp, #20
 800ed36:	af00      	add	r7, sp, #0
 800ed38:	6078      	str	r0, [r7, #4]
 800ed3a:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800ed3c:	2240      	movs	r2, #64	; 0x40
 800ed3e:	2100      	movs	r1, #0
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f7fe fa4b 	bl	800d1dc <mem_set>
	dirb[XDIR_Type] = 0x85;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2285      	movs	r2, #133	; 0x85
 800ed4a:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	3320      	adds	r3, #32
 800ed50:	22c0      	movs	r2, #192	; 0xc0
 800ed52:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800ed54:	2300      	movs	r3, #0
 800ed56:	72bb      	strb	r3, [r7, #10]
 800ed58:	2301      	movs	r3, #1
 800ed5a:	72fb      	strb	r3, [r7, #11]
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	813b      	strh	r3, [r7, #8]
 800ed60:	2340      	movs	r3, #64	; 0x40
 800ed62:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	1c5a      	adds	r2, r3, #1
 800ed68:	60fa      	str	r2, [r7, #12]
 800ed6a:	687a      	ldr	r2, [r7, #4]
 800ed6c:	4413      	add	r3, r2
 800ed6e:	22c1      	movs	r2, #193	; 0xc1
 800ed70:	701a      	strb	r2, [r3, #0]
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	1c5a      	adds	r2, r3, #1
 800ed76:	60fa      	str	r2, [r7, #12]
 800ed78:	687a      	ldr	r2, [r7, #4]
 800ed7a:	4413      	add	r3, r2
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800ed80:	893b      	ldrh	r3, [r7, #8]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d00b      	beq.n	800ed9e <create_xdir+0x6c>
 800ed86:	7abb      	ldrb	r3, [r7, #10]
 800ed88:	005b      	lsls	r3, r3, #1
 800ed8a:	683a      	ldr	r2, [r7, #0]
 800ed8c:	4413      	add	r3, r2
 800ed8e:	881b      	ldrh	r3, [r3, #0]
 800ed90:	813b      	strh	r3, [r7, #8]
 800ed92:	893b      	ldrh	r3, [r7, #8]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d002      	beq.n	800ed9e <create_xdir+0x6c>
 800ed98:	7abb      	ldrb	r3, [r7, #10]
 800ed9a:	3301      	adds	r3, #1
 800ed9c:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800ed9e:	687a      	ldr	r2, [r7, #4]
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	4413      	add	r3, r2
 800eda4:	893a      	ldrh	r2, [r7, #8]
 800eda6:	4611      	mov	r1, r2
 800eda8:	4618      	mov	r0, r3
 800edaa:	f7fe f927 	bl	800cffc <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	3302      	adds	r3, #2
 800edb2:	60fb      	str	r3, [r7, #12]
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	f003 031f 	and.w	r3, r3, #31
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d1e0      	bne.n	800ed80 <create_xdir+0x4e>
		nb++;
 800edbe:	7afb      	ldrb	r3, [r7, #11]
 800edc0:	3301      	adds	r3, #1
 800edc2:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800edc4:	7abb      	ldrb	r3, [r7, #10]
 800edc6:	005b      	lsls	r3, r3, #1
 800edc8:	683a      	ldr	r2, [r7, #0]
 800edca:	4413      	add	r3, r2
 800edcc:	881b      	ldrh	r3, [r3, #0]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d1c8      	bne.n	800ed64 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	3323      	adds	r3, #35	; 0x23
 800edd6:	7aba      	ldrb	r2, [r7, #10]
 800edd8:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	3301      	adds	r3, #1
 800edde:	7afa      	ldrb	r2, [r7, #11]
 800ede0:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800ede8:	6838      	ldr	r0, [r7, #0]
 800edea:	f7ff fe1f 	bl	800ea2c <xname_sum>
 800edee:	4603      	mov	r3, r0
 800edf0:	4619      	mov	r1, r3
 800edf2:	4620      	mov	r0, r4
 800edf4:	f7fe f902 	bl	800cffc <st_word>
}
 800edf8:	bf00      	nop
 800edfa:	3714      	adds	r7, #20
 800edfc:	46bd      	mov	sp, r7
 800edfe:	bd90      	pop	{r4, r7, pc}

0800ee00 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b086      	sub	sp, #24
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
 800ee08:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800ee0a:	2304      	movs	r3, #4
 800ee0c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800ee14:	23ff      	movs	r3, #255	; 0xff
 800ee16:	757b      	strb	r3, [r7, #21]
 800ee18:	23ff      	movs	r3, #255	; 0xff
 800ee1a:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800ee1c:	e09f      	b.n	800ef5e <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee22:	4619      	mov	r1, r3
 800ee24:	6938      	ldr	r0, [r7, #16]
 800ee26:	f7fe fbe7 	bl	800d5f8 <move_window>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ee2e:	7dfb      	ldrb	r3, [r7, #23]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	f040 809a 	bne.w	800ef6a <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee3a:	781b      	ldrb	r3, [r3, #0]
 800ee3c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800ee3e:	7dbb      	ldrb	r3, [r7, #22]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d102      	bne.n	800ee4a <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800ee44:	2304      	movs	r3, #4
 800ee46:	75fb      	strb	r3, [r7, #23]
 800ee48:	e096      	b.n	800ef78 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800ee4a:	693b      	ldr	r3, [r7, #16]
 800ee4c:	781b      	ldrb	r3, [r3, #0]
 800ee4e:	2b04      	cmp	r3, #4
 800ee50:	d118      	bne.n	800ee84 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800ee52:	7dbb      	ldrb	r3, [r7, #22]
 800ee54:	2b85      	cmp	r3, #133	; 0x85
 800ee56:	d179      	bne.n	800ef4c <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	f7ff fe17 	bl	800ea94 <load_xdir>
 800ee66:	4603      	mov	r3, r0
 800ee68:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800ee6a:	7dfb      	ldrb	r3, [r7, #23]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d17e      	bne.n	800ef6e <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800ee70:	693b      	ldr	r3, [r7, #16]
 800ee72:	691b      	ldr	r3, [r3, #16]
 800ee74:	3304      	adds	r3, #4
 800ee76:	781b      	ldrb	r3, [r3, #0]
 800ee78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ee7c:	b2da      	uxtb	r2, r3
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	719a      	strb	r2, [r3, #6]
					}
					break;
 800ee82:	e074      	b.n	800ef6e <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee88:	330b      	adds	r3, #11
 800ee8a:	781b      	ldrb	r3, [r3, #0]
 800ee8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ee90:	73fb      	strb	r3, [r7, #15]
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	7bfa      	ldrb	r2, [r7, #15]
 800ee96:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800ee98:	7dbb      	ldrb	r3, [r7, #22]
 800ee9a:	2be5      	cmp	r3, #229	; 0xe5
 800ee9c:	d00e      	beq.n	800eebc <dir_read+0xbc>
 800ee9e:	7dbb      	ldrb	r3, [r7, #22]
 800eea0:	2b2e      	cmp	r3, #46	; 0x2e
 800eea2:	d00b      	beq.n	800eebc <dir_read+0xbc>
 800eea4:	7bfb      	ldrb	r3, [r7, #15]
 800eea6:	f023 0320 	bic.w	r3, r3, #32
 800eeaa:	2b08      	cmp	r3, #8
 800eeac:	bf0c      	ite	eq
 800eeae:	2301      	moveq	r3, #1
 800eeb0:	2300      	movne	r3, #0
 800eeb2:	b2db      	uxtb	r3, r3
 800eeb4:	461a      	mov	r2, r3
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	d002      	beq.n	800eec2 <dir_read+0xc2>
				ord = 0xFF;
 800eebc:	23ff      	movs	r3, #255	; 0xff
 800eebe:	757b      	strb	r3, [r7, #21]
 800eec0:	e044      	b.n	800ef4c <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800eec2:	7bfb      	ldrb	r3, [r7, #15]
 800eec4:	2b0f      	cmp	r3, #15
 800eec6:	d12f      	bne.n	800ef28 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800eec8:	7dbb      	ldrb	r3, [r7, #22]
 800eeca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d00d      	beq.n	800eeee <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eed6:	7b5b      	ldrb	r3, [r3, #13]
 800eed8:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800eeda:	7dbb      	ldrb	r3, [r7, #22]
 800eedc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eee0:	75bb      	strb	r3, [r7, #22]
 800eee2:	7dbb      	ldrb	r3, [r7, #22]
 800eee4:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800eeee:	7dba      	ldrb	r2, [r7, #22]
 800eef0:	7d7b      	ldrb	r3, [r7, #21]
 800eef2:	429a      	cmp	r2, r3
 800eef4:	d115      	bne.n	800ef22 <dir_read+0x122>
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eefa:	330d      	adds	r3, #13
 800eefc:	781b      	ldrb	r3, [r3, #0]
 800eefe:	7d3a      	ldrb	r2, [r7, #20]
 800ef00:	429a      	cmp	r2, r3
 800ef02:	d10e      	bne.n	800ef22 <dir_read+0x122>
 800ef04:	693b      	ldr	r3, [r7, #16]
 800ef06:	68da      	ldr	r2, [r3, #12]
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef0c:	4619      	mov	r1, r3
 800ef0e:	4610      	mov	r0, r2
 800ef10:	f7ff fbde 	bl	800e6d0 <pick_lfn>
 800ef14:	4603      	mov	r3, r0
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d003      	beq.n	800ef22 <dir_read+0x122>
 800ef1a:	7d7b      	ldrb	r3, [r7, #21]
 800ef1c:	3b01      	subs	r3, #1
 800ef1e:	b2db      	uxtb	r3, r3
 800ef20:	e000      	b.n	800ef24 <dir_read+0x124>
 800ef22:	23ff      	movs	r3, #255	; 0xff
 800ef24:	757b      	strb	r3, [r7, #21]
 800ef26:	e011      	b.n	800ef4c <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800ef28:	7d7b      	ldrb	r3, [r7, #21]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d109      	bne.n	800ef42 <dir_read+0x142>
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef32:	4618      	mov	r0, r3
 800ef34:	f7ff fd26 	bl	800e984 <sum_sfn>
 800ef38:	4603      	mov	r3, r0
 800ef3a:	461a      	mov	r2, r3
 800ef3c:	7d3b      	ldrb	r3, [r7, #20]
 800ef3e:	4293      	cmp	r3, r2
 800ef40:	d017      	beq.n	800ef72 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	f04f 32ff 	mov.w	r2, #4294967295
 800ef48:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800ef4a:	e012      	b.n	800ef72 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800ef4c:	2100      	movs	r1, #0
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f7ff f9dd 	bl	800e30e <dir_next>
 800ef54:	4603      	mov	r3, r0
 800ef56:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ef58:	7dfb      	ldrb	r3, [r7, #23]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d10b      	bne.n	800ef76 <dir_read+0x176>
	while (dp->sect) {
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	f47f af5b 	bne.w	800ee1e <dir_read+0x1e>
 800ef68:	e006      	b.n	800ef78 <dir_read+0x178>
		if (res != FR_OK) break;
 800ef6a:	bf00      	nop
 800ef6c:	e004      	b.n	800ef78 <dir_read+0x178>
					break;
 800ef6e:	bf00      	nop
 800ef70:	e002      	b.n	800ef78 <dir_read+0x178>
					break;
 800ef72:	bf00      	nop
 800ef74:	e000      	b.n	800ef78 <dir_read+0x178>
		if (res != FR_OK) break;
 800ef76:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ef78:	7dfb      	ldrb	r3, [r7, #23]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d002      	beq.n	800ef84 <dir_read+0x184>
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	2200      	movs	r2, #0
 800ef82:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800ef84:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	3718      	adds	r7, #24
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}

0800ef8e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ef8e:	b590      	push	{r4, r7, lr}
 800ef90:	b089      	sub	sp, #36	; 0x24
 800ef92:	af00      	add	r7, sp, #0
 800ef94:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ef9c:	2100      	movs	r1, #0
 800ef9e:	6878      	ldr	r0, [r7, #4]
 800efa0:	f7ff f92f 	bl	800e202 <dir_sdi>
 800efa4:	4603      	mov	r3, r0
 800efa6:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800efa8:	7ffb      	ldrb	r3, [r7, #31]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d001      	beq.n	800efb2 <dir_find+0x24>
 800efae:	7ffb      	ldrb	r3, [r7, #31]
 800efb0:	e112      	b.n	800f1d8 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	781b      	ldrb	r3, [r3, #0]
 800efb6:	2b04      	cmp	r3, #4
 800efb8:	d164      	bne.n	800f084 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	68db      	ldr	r3, [r3, #12]
 800efbe:	4618      	mov	r0, r3
 800efc0:	f7ff fd34 	bl	800ea2c <xname_sum>
 800efc4:	4603      	mov	r3, r0
 800efc6:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800efc8:	e04f      	b.n	800f06a <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	691b      	ldr	r3, [r3, #16]
 800efce:	3324      	adds	r3, #36	; 0x24
 800efd0:	4618      	mov	r0, r3
 800efd2:	f7fd fefd 	bl	800cdd0 <ld_word>
 800efd6:	4603      	mov	r3, r0
 800efd8:	461a      	mov	r2, r3
 800efda:	893b      	ldrh	r3, [r7, #8]
 800efdc:	4293      	cmp	r3, r2
 800efde:	d000      	beq.n	800efe2 <dir_find+0x54>
 800efe0:	e043      	b.n	800f06a <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	691b      	ldr	r3, [r3, #16]
 800efe6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800efea:	76fb      	strb	r3, [r7, #27]
 800efec:	2340      	movs	r3, #64	; 0x40
 800efee:	617b      	str	r3, [r7, #20]
 800eff0:	2300      	movs	r3, #0
 800eff2:	613b      	str	r3, [r7, #16]
 800eff4:	e029      	b.n	800f04a <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800eff6:	697b      	ldr	r3, [r7, #20]
 800eff8:	f003 031f 	and.w	r3, r3, #31
 800effc:	2b00      	cmp	r3, #0
 800effe:	d102      	bne.n	800f006 <dir_find+0x78>
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	3302      	adds	r3, #2
 800f004:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	691a      	ldr	r2, [r3, #16]
 800f00a:	697b      	ldr	r3, [r7, #20]
 800f00c:	4413      	add	r3, r2
 800f00e:	4618      	mov	r0, r3
 800f010:	f7fd fede 	bl	800cdd0 <ld_word>
 800f014:	4603      	mov	r3, r0
 800f016:	4618      	mov	r0, r3
 800f018:	f002 fc8e 	bl	8011938 <ff_wtoupper>
 800f01c:	4603      	mov	r3, r0
 800f01e:	461c      	mov	r4, r3
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	68da      	ldr	r2, [r3, #12]
 800f024:	693b      	ldr	r3, [r7, #16]
 800f026:	005b      	lsls	r3, r3, #1
 800f028:	4413      	add	r3, r2
 800f02a:	881b      	ldrh	r3, [r3, #0]
 800f02c:	4618      	mov	r0, r3
 800f02e:	f002 fc83 	bl	8011938 <ff_wtoupper>
 800f032:	4603      	mov	r3, r0
 800f034:	429c      	cmp	r4, r3
 800f036:	d10c      	bne.n	800f052 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800f038:	7efb      	ldrb	r3, [r7, #27]
 800f03a:	3b01      	subs	r3, #1
 800f03c:	76fb      	strb	r3, [r7, #27]
 800f03e:	697b      	ldr	r3, [r7, #20]
 800f040:	3302      	adds	r3, #2
 800f042:	617b      	str	r3, [r7, #20]
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	3301      	adds	r3, #1
 800f048:	613b      	str	r3, [r7, #16]
 800f04a:	7efb      	ldrb	r3, [r7, #27]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d1d2      	bne.n	800eff6 <dir_find+0x68>
 800f050:	e000      	b.n	800f054 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800f052:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800f054:	7efb      	ldrb	r3, [r7, #27]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d107      	bne.n	800f06a <dir_find+0xdc>
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	68da      	ldr	r2, [r3, #12]
 800f05e:	693b      	ldr	r3, [r7, #16]
 800f060:	005b      	lsls	r3, r3, #1
 800f062:	4413      	add	r3, r2
 800f064:	881b      	ldrh	r3, [r3, #0]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d009      	beq.n	800f07e <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800f06a:	2100      	movs	r1, #0
 800f06c:	6878      	ldr	r0, [r7, #4]
 800f06e:	f7ff fec7 	bl	800ee00 <dir_read>
 800f072:	4603      	mov	r3, r0
 800f074:	77fb      	strb	r3, [r7, #31]
 800f076:	7ffb      	ldrb	r3, [r7, #31]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d0a6      	beq.n	800efca <dir_find+0x3c>
 800f07c:	e000      	b.n	800f080 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800f07e:	bf00      	nop
		}
		return res;
 800f080:	7ffb      	ldrb	r3, [r7, #31]
 800f082:	e0a9      	b.n	800f1d8 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f084:	23ff      	movs	r3, #255	; 0xff
 800f086:	773b      	strb	r3, [r7, #28]
 800f088:	7f3b      	ldrb	r3, [r7, #28]
 800f08a:	777b      	strb	r3, [r7, #29]
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f04f 32ff 	mov.w	r2, #4294967295
 800f092:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f098:	4619      	mov	r1, r3
 800f09a:	68f8      	ldr	r0, [r7, #12]
 800f09c:	f7fe faac 	bl	800d5f8 <move_window>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800f0a4:	7ffb      	ldrb	r3, [r7, #31]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	f040 8090 	bne.w	800f1cc <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0b0:	781b      	ldrb	r3, [r3, #0]
 800f0b2:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f0b4:	7fbb      	ldrb	r3, [r7, #30]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d102      	bne.n	800f0c0 <dir_find+0x132>
 800f0ba:	2304      	movs	r3, #4
 800f0bc:	77fb      	strb	r3, [r7, #31]
 800f0be:	e08a      	b.n	800f1d6 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0c4:	330b      	adds	r3, #11
 800f0c6:	781b      	ldrb	r3, [r3, #0]
 800f0c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f0cc:	72fb      	strb	r3, [r7, #11]
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	7afa      	ldrb	r2, [r7, #11]
 800f0d2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800f0d4:	7fbb      	ldrb	r3, [r7, #30]
 800f0d6:	2be5      	cmp	r3, #229	; 0xe5
 800f0d8:	d007      	beq.n	800f0ea <dir_find+0x15c>
 800f0da:	7afb      	ldrb	r3, [r7, #11]
 800f0dc:	f003 0308 	and.w	r3, r3, #8
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d009      	beq.n	800f0f8 <dir_find+0x16a>
 800f0e4:	7afb      	ldrb	r3, [r7, #11]
 800f0e6:	2b0f      	cmp	r3, #15
 800f0e8:	d006      	beq.n	800f0f8 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f0ea:	23ff      	movs	r3, #255	; 0xff
 800f0ec:	777b      	strb	r3, [r7, #29]
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f04f 32ff 	mov.w	r2, #4294967295
 800f0f4:	64da      	str	r2, [r3, #76]	; 0x4c
 800f0f6:	e05e      	b.n	800f1b6 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800f0f8:	7afb      	ldrb	r3, [r7, #11]
 800f0fa:	2b0f      	cmp	r3, #15
 800f0fc:	d136      	bne.n	800f16c <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d154      	bne.n	800f1b6 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800f10c:	7fbb      	ldrb	r3, [r7, #30]
 800f10e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f112:	2b00      	cmp	r3, #0
 800f114:	d00d      	beq.n	800f132 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f11a:	7b5b      	ldrb	r3, [r3, #13]
 800f11c:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800f11e:	7fbb      	ldrb	r3, [r7, #30]
 800f120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f124:	77bb      	strb	r3, [r7, #30]
 800f126:	7fbb      	ldrb	r3, [r7, #30]
 800f128:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f132:	7fba      	ldrb	r2, [r7, #30]
 800f134:	7f7b      	ldrb	r3, [r7, #29]
 800f136:	429a      	cmp	r2, r3
 800f138:	d115      	bne.n	800f166 <dir_find+0x1d8>
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f13e:	330d      	adds	r3, #13
 800f140:	781b      	ldrb	r3, [r3, #0]
 800f142:	7f3a      	ldrb	r2, [r7, #28]
 800f144:	429a      	cmp	r2, r3
 800f146:	d10e      	bne.n	800f166 <dir_find+0x1d8>
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	68da      	ldr	r2, [r3, #12]
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f150:	4619      	mov	r1, r3
 800f152:	4610      	mov	r0, r2
 800f154:	f7ff fa4c 	bl	800e5f0 <cmp_lfn>
 800f158:	4603      	mov	r3, r0
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d003      	beq.n	800f166 <dir_find+0x1d8>
 800f15e:	7f7b      	ldrb	r3, [r7, #29]
 800f160:	3b01      	subs	r3, #1
 800f162:	b2db      	uxtb	r3, r3
 800f164:	e000      	b.n	800f168 <dir_find+0x1da>
 800f166:	23ff      	movs	r3, #255	; 0xff
 800f168:	777b      	strb	r3, [r7, #29]
 800f16a:	e024      	b.n	800f1b6 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f16c:	7f7b      	ldrb	r3, [r7, #29]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d109      	bne.n	800f186 <dir_find+0x1f8>
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f176:	4618      	mov	r0, r3
 800f178:	f7ff fc04 	bl	800e984 <sum_sfn>
 800f17c:	4603      	mov	r3, r0
 800f17e:	461a      	mov	r2, r3
 800f180:	7f3b      	ldrb	r3, [r7, #28]
 800f182:	4293      	cmp	r3, r2
 800f184:	d024      	beq.n	800f1d0 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f18c:	f003 0301 	and.w	r3, r3, #1
 800f190:	2b00      	cmp	r3, #0
 800f192:	d10a      	bne.n	800f1aa <dir_find+0x21c>
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	3340      	adds	r3, #64	; 0x40
 800f19c:	220b      	movs	r2, #11
 800f19e:	4619      	mov	r1, r3
 800f1a0:	f7fe f837 	bl	800d212 <mem_cmp>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d014      	beq.n	800f1d4 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f1aa:	23ff      	movs	r3, #255	; 0xff
 800f1ac:	777b      	strb	r3, [r7, #29]
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	f04f 32ff 	mov.w	r2, #4294967295
 800f1b4:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f1b6:	2100      	movs	r1, #0
 800f1b8:	6878      	ldr	r0, [r7, #4]
 800f1ba:	f7ff f8a8 	bl	800e30e <dir_next>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800f1c2:	7ffb      	ldrb	r3, [r7, #31]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	f43f af65 	beq.w	800f094 <dir_find+0x106>
 800f1ca:	e004      	b.n	800f1d6 <dir_find+0x248>
		if (res != FR_OK) break;
 800f1cc:	bf00      	nop
 800f1ce:	e002      	b.n	800f1d6 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f1d0:	bf00      	nop
 800f1d2:	e000      	b.n	800f1d6 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f1d4:	bf00      	nop

	return res;
 800f1d6:	7ffb      	ldrb	r3, [r7, #31]
}
 800f1d8:	4618      	mov	r0, r3
 800f1da:	3724      	adds	r7, #36	; 0x24
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bd90      	pop	{r4, r7, pc}

0800f1e0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f1e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800f1e4:	b0a0      	sub	sp, #128	; 0x80
 800f1e6:	af00      	add	r7, sp, #0
 800f1e8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f1f6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d001      	beq.n	800f202 <dir_register+0x22>
 800f1fe:	2306      	movs	r3, #6
 800f200:	e18e      	b.n	800f520 <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800f202:	2300      	movs	r3, #0
 800f204:	677b      	str	r3, [r7, #116]	; 0x74
 800f206:	e002      	b.n	800f20e <dir_register+0x2e>
 800f208:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f20a:	3301      	adds	r3, #1
 800f20c:	677b      	str	r3, [r7, #116]	; 0x74
 800f20e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f210:	68da      	ldr	r2, [r3, #12]
 800f212:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f214:	005b      	lsls	r3, r3, #1
 800f216:	4413      	add	r3, r2
 800f218:	881b      	ldrh	r3, [r3, #0]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d1f4      	bne.n	800f208 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800f21e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f220:	781b      	ldrb	r3, [r3, #0]
 800f222:	2b04      	cmp	r3, #4
 800f224:	f040 809f 	bne.w	800f366 <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800f228:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f22a:	330e      	adds	r3, #14
 800f22c:	4aa2      	ldr	r2, [pc, #648]	; (800f4b8 <dir_register+0x2d8>)
 800f22e:	fba2 2303 	umull	r2, r3, r2, r3
 800f232:	08db      	lsrs	r3, r3, #3
 800f234:	3302      	adds	r3, #2
 800f236:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800f238:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f7ff f93c 	bl	800e4b8 <dir_alloc>
 800f240:	4603      	mov	r3, r0
 800f242:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800f246:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d002      	beq.n	800f254 <dir_register+0x74>
 800f24e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f252:	e165      	b.n	800f520 <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f258:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f25a:	3b01      	subs	r3, #1
 800f25c:	015b      	lsls	r3, r3, #5
 800f25e:	1ad2      	subs	r2, r2, r3
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	689b      	ldr	r3, [r3, #8]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d072      	beq.n	800f352 <dir_register+0x172>
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	79db      	ldrb	r3, [r3, #7]
 800f270:	f003 0304 	and.w	r3, r3, #4
 800f274:	2b00      	cmp	r3, #0
 800f276:	d06c      	beq.n	800f352 <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f27e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f280:	8949      	ldrh	r1, [r1, #10]
 800f282:	0249      	lsls	r1, r1, #9
 800f284:	2000      	movs	r0, #0
 800f286:	460c      	mov	r4, r1
 800f288:	4605      	mov	r5, r0
 800f28a:	eb12 0804 	adds.w	r8, r2, r4
 800f28e:	eb43 0905 	adc.w	r9, r3, r5
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	4618      	mov	r0, r3
 800f29c:	f7fe fd58 	bl	800dd50 <fill_first_frag>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800f2a6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d002      	beq.n	800f2b4 <dir_register+0xd4>
 800f2ae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f2b2:	e135      	b.n	800f520 <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2ba:	f04f 32ff 	mov.w	r2, #4294967295
 800f2be:	4619      	mov	r1, r3
 800f2c0:	f7fe fd75 	bl	800ddae <fill_last_frag>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800f2ca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d002      	beq.n	800f2d8 <dir_register+0xf8>
 800f2d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f2d6:	e123      	b.n	800f520 <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800f2d8:	687a      	ldr	r2, [r7, #4]
 800f2da:	f107 0308 	add.w	r3, r7, #8
 800f2de:	4611      	mov	r1, r2
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	f7ff fc95 	bl	800ec10 <load_obj_dir>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800f2ec:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d002      	beq.n	800f2fa <dir_register+0x11a>
 800f2f4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f2f8:	e112      	b.n	800f520 <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800f2fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2fc:	691b      	ldr	r3, [r3, #16]
 800f2fe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f308:	4608      	mov	r0, r1
 800f30a:	f7fd febe 	bl	800d08a <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800f30e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f310:	691b      	ldr	r3, [r3, #16]
 800f312:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f31c:	4608      	mov	r0, r1
 800f31e:	f7fd feb4 	bl	800d08a <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	79da      	ldrb	r2, [r3, #7]
 800f326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f328:	691b      	ldr	r3, [r3, #16]
 800f32a:	3321      	adds	r3, #33	; 0x21
 800f32c:	f042 0201 	orr.w	r2, r2, #1
 800f330:	b2d2      	uxtb	r2, r2
 800f332:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800f334:	f107 0308 	add.w	r3, r7, #8
 800f338:	4618      	mov	r0, r3
 800f33a:	f7ff fc9f 	bl	800ec7c <store_xdir>
 800f33e:	4603      	mov	r3, r0
 800f340:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800f344:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d002      	beq.n	800f352 <dir_register+0x172>
 800f34c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f350:	e0e6      	b.n	800f520 <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800f352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f354:	691a      	ldr	r2, [r3, #16]
 800f356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f358:	68db      	ldr	r3, [r3, #12]
 800f35a:	4619      	mov	r1, r3
 800f35c:	4610      	mov	r0, r2
 800f35e:	f7ff fce8 	bl	800ed32 <create_xdir>
		return FR_OK;
 800f362:	2300      	movs	r3, #0
 800f364:	e0dc      	b.n	800f520 <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800f36c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f370:	220c      	movs	r2, #12
 800f372:	4618      	mov	r0, r3
 800f374:	f7fd ff11 	bl	800d19a <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800f378:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f37c:	f003 0301 	and.w	r3, r3, #1
 800f380:	2b00      	cmp	r3, #0
 800f382:	d033      	beq.n	800f3ec <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	2240      	movs	r2, #64	; 0x40
 800f388:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800f38c:	2301      	movs	r3, #1
 800f38e:	67bb      	str	r3, [r7, #120]	; 0x78
 800f390:	e016      	b.n	800f3c0 <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800f398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f39a:	68da      	ldr	r2, [r3, #12]
 800f39c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800f3a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f3a2:	f7ff fa61 	bl	800e868 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800f3a6:	6878      	ldr	r0, [r7, #4]
 800f3a8:	f7ff fdf1 	bl	800ef8e <dir_find>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800f3b2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d106      	bne.n	800f3c8 <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 800f3ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f3bc:	3301      	adds	r3, #1
 800f3be:	67bb      	str	r3, [r7, #120]	; 0x78
 800f3c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f3c2:	2b63      	cmp	r3, #99	; 0x63
 800f3c4:	d9e5      	bls.n	800f392 <dir_register+0x1b2>
 800f3c6:	e000      	b.n	800f3ca <dir_register+0x1ea>
			if (res != FR_OK) break;
 800f3c8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800f3ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f3cc:	2b64      	cmp	r3, #100	; 0x64
 800f3ce:	d101      	bne.n	800f3d4 <dir_register+0x1f4>
 800f3d0:	2307      	movs	r3, #7
 800f3d2:	e0a5      	b.n	800f520 <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800f3d4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f3d8:	2b04      	cmp	r3, #4
 800f3da:	d002      	beq.n	800f3e2 <dir_register+0x202>
 800f3dc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f3e0:	e09e      	b.n	800f520 <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800f3e2:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800f3ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f3f0:	f003 0302 	and.w	r3, r3, #2
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d007      	beq.n	800f408 <dir_register+0x228>
 800f3f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f3fa:	330c      	adds	r3, #12
 800f3fc:	4a2f      	ldr	r2, [pc, #188]	; (800f4bc <dir_register+0x2dc>)
 800f3fe:	fba2 2303 	umull	r2, r3, r2, r3
 800f402:	089b      	lsrs	r3, r3, #2
 800f404:	3301      	adds	r3, #1
 800f406:	e000      	b.n	800f40a <dir_register+0x22a>
 800f408:	2301      	movs	r3, #1
 800f40a:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800f40c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f40e:	6878      	ldr	r0, [r7, #4]
 800f410:	f7ff f852 	bl	800e4b8 <dir_alloc>
 800f414:	4603      	mov	r3, r0
 800f416:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800f41a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d14f      	bne.n	800f4c2 <dir_register+0x2e2>
 800f422:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f424:	3b01      	subs	r3, #1
 800f426:	673b      	str	r3, [r7, #112]	; 0x70
 800f428:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d049      	beq.n	800f4c2 <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f432:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f434:	015b      	lsls	r3, r3, #5
 800f436:	1ad3      	subs	r3, r2, r3
 800f438:	4619      	mov	r1, r3
 800f43a:	6878      	ldr	r0, [r7, #4]
 800f43c:	f7fe fee1 	bl	800e202 <dir_sdi>
 800f440:	4603      	mov	r3, r0
 800f442:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800f446:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d139      	bne.n	800f4c2 <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	3340      	adds	r3, #64	; 0x40
 800f452:	4618      	mov	r0, r3
 800f454:	f7ff fa96 	bl	800e984 <sum_sfn>
 800f458:	4603      	mov	r3, r0
 800f45a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f462:	4619      	mov	r1, r3
 800f464:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f466:	f7fe f8c7 	bl	800d5f8 <move_window>
 800f46a:	4603      	mov	r3, r0
 800f46c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800f470:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f474:	2b00      	cmp	r3, #0
 800f476:	d123      	bne.n	800f4c0 <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800f478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f47a:	68d8      	ldr	r0, [r3, #12]
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800f480:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f482:	b2da      	uxtb	r2, r3
 800f484:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f488:	f7ff f986 	bl	800e798 <put_lfn>
				fs->wflag = 1;
 800f48c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f48e:	2201      	movs	r2, #1
 800f490:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800f492:	2100      	movs	r1, #0
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	f7fe ff3a 	bl	800e30e <dir_next>
 800f49a:	4603      	mov	r3, r0
 800f49c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800f4a0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d10c      	bne.n	800f4c2 <dir_register+0x2e2>
 800f4a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f4aa:	3b01      	subs	r3, #1
 800f4ac:	673b      	str	r3, [r7, #112]	; 0x70
 800f4ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d1d4      	bne.n	800f45e <dir_register+0x27e>
 800f4b4:	e005      	b.n	800f4c2 <dir_register+0x2e2>
 800f4b6:	bf00      	nop
 800f4b8:	88888889 	.word	0x88888889
 800f4bc:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800f4c0:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f4c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d128      	bne.n	800f51c <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4ce:	4619      	mov	r1, r3
 800f4d0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f4d2:	f7fe f891 	bl	800d5f8 <move_window>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800f4dc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d11b      	bne.n	800f51c <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4e8:	2220      	movs	r2, #32
 800f4ea:	2100      	movs	r1, #0
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	f7fd fe75 	bl	800d1dc <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	3340      	adds	r3, #64	; 0x40
 800f4fa:	220b      	movs	r2, #11
 800f4fc:	4619      	mov	r1, r3
 800f4fe:	f7fd fe4c 	bl	800d19a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f50c:	330c      	adds	r3, #12
 800f50e:	f002 0218 	and.w	r2, r2, #24
 800f512:	b2d2      	uxtb	r2, r2
 800f514:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800f516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f518:	2201      	movs	r2, #1
 800f51a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f51c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800f520:	4618      	mov	r0, r3
 800f522:	3780      	adds	r7, #128	; 0x80
 800f524:	46bd      	mov	sp, r7
 800f526:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800f52a:	bf00      	nop

0800f52c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b08a      	sub	sp, #40	; 0x28
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
 800f534:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	613b      	str	r3, [r7, #16]
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	68db      	ldr	r3, [r3, #12]
 800f542:	60fb      	str	r3, [r7, #12]
 800f544:	2300      	movs	r3, #0
 800f546:	617b      	str	r3, [r7, #20]
 800f548:	697b      	ldr	r3, [r7, #20]
 800f54a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800f54c:	69bb      	ldr	r3, [r7, #24]
 800f54e:	1c5a      	adds	r2, r3, #1
 800f550:	61ba      	str	r2, [r7, #24]
 800f552:	693a      	ldr	r2, [r7, #16]
 800f554:	4413      	add	r3, r2
 800f556:	781b      	ldrb	r3, [r3, #0]
 800f558:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800f55a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f55c:	2b1f      	cmp	r3, #31
 800f55e:	d940      	bls.n	800f5e2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800f560:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f562:	2b2f      	cmp	r3, #47	; 0x2f
 800f564:	d006      	beq.n	800f574 <create_name+0x48>
 800f566:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f568:	2b5c      	cmp	r3, #92	; 0x5c
 800f56a:	d110      	bne.n	800f58e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f56c:	e002      	b.n	800f574 <create_name+0x48>
 800f56e:	69bb      	ldr	r3, [r7, #24]
 800f570:	3301      	adds	r3, #1
 800f572:	61bb      	str	r3, [r7, #24]
 800f574:	693a      	ldr	r2, [r7, #16]
 800f576:	69bb      	ldr	r3, [r7, #24]
 800f578:	4413      	add	r3, r2
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	2b2f      	cmp	r3, #47	; 0x2f
 800f57e:	d0f6      	beq.n	800f56e <create_name+0x42>
 800f580:	693a      	ldr	r2, [r7, #16]
 800f582:	69bb      	ldr	r3, [r7, #24]
 800f584:	4413      	add	r3, r2
 800f586:	781b      	ldrb	r3, [r3, #0]
 800f588:	2b5c      	cmp	r3, #92	; 0x5c
 800f58a:	d0f0      	beq.n	800f56e <create_name+0x42>
			break;
 800f58c:	e02a      	b.n	800f5e4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	2bfe      	cmp	r3, #254	; 0xfe
 800f592:	d901      	bls.n	800f598 <create_name+0x6c>
 800f594:	2306      	movs	r3, #6
 800f596:	e17d      	b.n	800f894 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800f598:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f59a:	b2db      	uxtb	r3, r3
 800f59c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800f59e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5a0:	2101      	movs	r1, #1
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f002 f98c 	bl	80118c0 <ff_convert>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800f5ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d101      	bne.n	800f5b6 <create_name+0x8a>
 800f5b2:	2306      	movs	r3, #6
 800f5b4:	e16e      	b.n	800f894 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800f5b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5b8:	2b7f      	cmp	r3, #127	; 0x7f
 800f5ba:	d809      	bhi.n	800f5d0 <create_name+0xa4>
 800f5bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5be:	4619      	mov	r1, r3
 800f5c0:	488d      	ldr	r0, [pc, #564]	; (800f7f8 <create_name+0x2cc>)
 800f5c2:	f7fd fe4d 	bl	800d260 <chk_chr>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d001      	beq.n	800f5d0 <create_name+0xa4>
 800f5cc:	2306      	movs	r3, #6
 800f5ce:	e161      	b.n	800f894 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	1c5a      	adds	r2, r3, #1
 800f5d4:	617a      	str	r2, [r7, #20]
 800f5d6:	005b      	lsls	r3, r3, #1
 800f5d8:	68fa      	ldr	r2, [r7, #12]
 800f5da:	4413      	add	r3, r2
 800f5dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f5de:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800f5e0:	e7b4      	b.n	800f54c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800f5e2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f5e4:	693a      	ldr	r2, [r7, #16]
 800f5e6:	69bb      	ldr	r3, [r7, #24]
 800f5e8:	441a      	add	r2, r3
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f5ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5f0:	2b1f      	cmp	r3, #31
 800f5f2:	d801      	bhi.n	800f5f8 <create_name+0xcc>
 800f5f4:	2304      	movs	r3, #4
 800f5f6:	e000      	b.n	800f5fa <create_name+0xce>
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f5fe:	e011      	b.n	800f624 <create_name+0xf8>
		w = lfn[di - 1];
 800f600:	697b      	ldr	r3, [r7, #20]
 800f602:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f606:	3b01      	subs	r3, #1
 800f608:	005b      	lsls	r3, r3, #1
 800f60a:	68fa      	ldr	r2, [r7, #12]
 800f60c:	4413      	add	r3, r2
 800f60e:	881b      	ldrh	r3, [r3, #0]
 800f610:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800f612:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f614:	2b20      	cmp	r3, #32
 800f616:	d002      	beq.n	800f61e <create_name+0xf2>
 800f618:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f61a:	2b2e      	cmp	r3, #46	; 0x2e
 800f61c:	d106      	bne.n	800f62c <create_name+0x100>
		di--;
 800f61e:	697b      	ldr	r3, [r7, #20]
 800f620:	3b01      	subs	r3, #1
 800f622:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d1ea      	bne.n	800f600 <create_name+0xd4>
 800f62a:	e000      	b.n	800f62e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800f62c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	005b      	lsls	r3, r3, #1
 800f632:	68fa      	ldr	r2, [r7, #12]
 800f634:	4413      	add	r3, r2
 800f636:	2200      	movs	r2, #0
 800f638:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800f63a:	697b      	ldr	r3, [r7, #20]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d101      	bne.n	800f644 <create_name+0x118>
 800f640:	2306      	movs	r3, #6
 800f642:	e127      	b.n	800f894 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	3340      	adds	r3, #64	; 0x40
 800f648:	220b      	movs	r2, #11
 800f64a:	2120      	movs	r1, #32
 800f64c:	4618      	mov	r0, r3
 800f64e:	f7fd fdc5 	bl	800d1dc <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f652:	2300      	movs	r3, #0
 800f654:	61bb      	str	r3, [r7, #24]
 800f656:	e002      	b.n	800f65e <create_name+0x132>
 800f658:	69bb      	ldr	r3, [r7, #24]
 800f65a:	3301      	adds	r3, #1
 800f65c:	61bb      	str	r3, [r7, #24]
 800f65e:	69bb      	ldr	r3, [r7, #24]
 800f660:	005b      	lsls	r3, r3, #1
 800f662:	68fa      	ldr	r2, [r7, #12]
 800f664:	4413      	add	r3, r2
 800f666:	881b      	ldrh	r3, [r3, #0]
 800f668:	2b20      	cmp	r3, #32
 800f66a:	d0f5      	beq.n	800f658 <create_name+0x12c>
 800f66c:	69bb      	ldr	r3, [r7, #24]
 800f66e:	005b      	lsls	r3, r3, #1
 800f670:	68fa      	ldr	r2, [r7, #12]
 800f672:	4413      	add	r3, r2
 800f674:	881b      	ldrh	r3, [r3, #0]
 800f676:	2b2e      	cmp	r3, #46	; 0x2e
 800f678:	d0ee      	beq.n	800f658 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f67a:	69bb      	ldr	r3, [r7, #24]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d009      	beq.n	800f694 <create_name+0x168>
 800f680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f684:	f043 0303 	orr.w	r3, r3, #3
 800f688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f68c:	e002      	b.n	800f694 <create_name+0x168>
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	3b01      	subs	r3, #1
 800f692:	617b      	str	r3, [r7, #20]
 800f694:	697b      	ldr	r3, [r7, #20]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d009      	beq.n	800f6ae <create_name+0x182>
 800f69a:	697b      	ldr	r3, [r7, #20]
 800f69c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f6a0:	3b01      	subs	r3, #1
 800f6a2:	005b      	lsls	r3, r3, #1
 800f6a4:	68fa      	ldr	r2, [r7, #12]
 800f6a6:	4413      	add	r3, r2
 800f6a8:	881b      	ldrh	r3, [r3, #0]
 800f6aa:	2b2e      	cmp	r3, #46	; 0x2e
 800f6ac:	d1ef      	bne.n	800f68e <create_name+0x162>

	i = b = 0; ni = 8;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	623b      	str	r3, [r7, #32]
 800f6b8:	2308      	movs	r3, #8
 800f6ba:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f6bc:	69bb      	ldr	r3, [r7, #24]
 800f6be:	1c5a      	adds	r2, r3, #1
 800f6c0:	61ba      	str	r2, [r7, #24]
 800f6c2:	005b      	lsls	r3, r3, #1
 800f6c4:	68fa      	ldr	r2, [r7, #12]
 800f6c6:	4413      	add	r3, r2
 800f6c8:	881b      	ldrh	r3, [r3, #0]
 800f6ca:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f6cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	f000 8090 	beq.w	800f7f4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f6d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f6d6:	2b20      	cmp	r3, #32
 800f6d8:	d006      	beq.n	800f6e8 <create_name+0x1bc>
 800f6da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f6dc:	2b2e      	cmp	r3, #46	; 0x2e
 800f6de:	d10a      	bne.n	800f6f6 <create_name+0x1ca>
 800f6e0:	69ba      	ldr	r2, [r7, #24]
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	429a      	cmp	r2, r3
 800f6e6:	d006      	beq.n	800f6f6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800f6e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6ec:	f043 0303 	orr.w	r3, r3, #3
 800f6f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f6f4:	e07d      	b.n	800f7f2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f6f6:	6a3a      	ldr	r2, [r7, #32]
 800f6f8:	69fb      	ldr	r3, [r7, #28]
 800f6fa:	429a      	cmp	r2, r3
 800f6fc:	d203      	bcs.n	800f706 <create_name+0x1da>
 800f6fe:	69ba      	ldr	r2, [r7, #24]
 800f700:	697b      	ldr	r3, [r7, #20]
 800f702:	429a      	cmp	r2, r3
 800f704:	d123      	bne.n	800f74e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800f706:	69fb      	ldr	r3, [r7, #28]
 800f708:	2b0b      	cmp	r3, #11
 800f70a:	d106      	bne.n	800f71a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800f70c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f710:	f043 0303 	orr.w	r3, r3, #3
 800f714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f718:	e075      	b.n	800f806 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f71a:	69ba      	ldr	r2, [r7, #24]
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	429a      	cmp	r2, r3
 800f720:	d005      	beq.n	800f72e <create_name+0x202>
 800f722:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f726:	f043 0303 	orr.w	r3, r3, #3
 800f72a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800f72e:	69ba      	ldr	r2, [r7, #24]
 800f730:	697b      	ldr	r3, [r7, #20]
 800f732:	429a      	cmp	r2, r3
 800f734:	d866      	bhi.n	800f804 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f736:	697b      	ldr	r3, [r7, #20]
 800f738:	61bb      	str	r3, [r7, #24]
 800f73a:	2308      	movs	r3, #8
 800f73c:	623b      	str	r3, [r7, #32]
 800f73e:	230b      	movs	r3, #11
 800f740:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f742:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f746:	009b      	lsls	r3, r3, #2
 800f748:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f74c:	e051      	b.n	800f7f2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f74e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f750:	2b7f      	cmp	r3, #127	; 0x7f
 800f752:	d914      	bls.n	800f77e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f754:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f756:	2100      	movs	r1, #0
 800f758:	4618      	mov	r0, r3
 800f75a:	f002 f8b1 	bl	80118c0 <ff_convert>
 800f75e:	4603      	mov	r3, r0
 800f760:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f762:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f764:	2b00      	cmp	r3, #0
 800f766:	d004      	beq.n	800f772 <create_name+0x246>
 800f768:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f76a:	3b80      	subs	r3, #128	; 0x80
 800f76c:	4a23      	ldr	r2, [pc, #140]	; (800f7fc <create_name+0x2d0>)
 800f76e:	5cd3      	ldrb	r3, [r2, r3]
 800f770:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f772:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f776:	f043 0302 	orr.w	r3, r3, #2
 800f77a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f77e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f780:	2b00      	cmp	r3, #0
 800f782:	d007      	beq.n	800f794 <create_name+0x268>
 800f784:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f786:	4619      	mov	r1, r3
 800f788:	481d      	ldr	r0, [pc, #116]	; (800f800 <create_name+0x2d4>)
 800f78a:	f7fd fd69 	bl	800d260 <chk_chr>
 800f78e:	4603      	mov	r3, r0
 800f790:	2b00      	cmp	r3, #0
 800f792:	d008      	beq.n	800f7a6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f794:	235f      	movs	r3, #95	; 0x5f
 800f796:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f798:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f79c:	f043 0303 	orr.w	r3, r3, #3
 800f7a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f7a4:	e01b      	b.n	800f7de <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f7a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7a8:	2b40      	cmp	r3, #64	; 0x40
 800f7aa:	d909      	bls.n	800f7c0 <create_name+0x294>
 800f7ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7ae:	2b5a      	cmp	r3, #90	; 0x5a
 800f7b0:	d806      	bhi.n	800f7c0 <create_name+0x294>
					b |= 2;
 800f7b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f7b6:	f043 0302 	orr.w	r3, r3, #2
 800f7ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f7be:	e00e      	b.n	800f7de <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f7c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7c2:	2b60      	cmp	r3, #96	; 0x60
 800f7c4:	d90b      	bls.n	800f7de <create_name+0x2b2>
 800f7c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7c8:	2b7a      	cmp	r3, #122	; 0x7a
 800f7ca:	d808      	bhi.n	800f7de <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800f7cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f7d0:	f043 0301 	orr.w	r3, r3, #1
 800f7d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f7d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7da:	3b20      	subs	r3, #32
 800f7dc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f7de:	6a3b      	ldr	r3, [r7, #32]
 800f7e0:	1c5a      	adds	r2, r3, #1
 800f7e2:	623a      	str	r2, [r7, #32]
 800f7e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f7e6:	b2d1      	uxtb	r1, r2
 800f7e8:	687a      	ldr	r2, [r7, #4]
 800f7ea:	4413      	add	r3, r2
 800f7ec:	460a      	mov	r2, r1
 800f7ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800f7f2:	e763      	b.n	800f6bc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800f7f4:	bf00      	nop
 800f7f6:	e006      	b.n	800f806 <create_name+0x2da>
 800f7f8:	0801741c 	.word	0x0801741c
 800f7fc:	080174a4 	.word	0x080174a4
 800f800:	08017428 	.word	0x08017428
			if (si > di) break;			/* No extension */
 800f804:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f80c:	2be5      	cmp	r3, #229	; 0xe5
 800f80e:	d103      	bne.n	800f818 <create_name+0x2ec>
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2205      	movs	r2, #5
 800f814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800f818:	69fb      	ldr	r3, [r7, #28]
 800f81a:	2b08      	cmp	r3, #8
 800f81c:	d104      	bne.n	800f828 <create_name+0x2fc>
 800f81e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f822:	009b      	lsls	r3, r3, #2
 800f824:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f828:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f82c:	f003 030c 	and.w	r3, r3, #12
 800f830:	2b0c      	cmp	r3, #12
 800f832:	d005      	beq.n	800f840 <create_name+0x314>
 800f834:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f838:	f003 0303 	and.w	r3, r3, #3
 800f83c:	2b03      	cmp	r3, #3
 800f83e:	d105      	bne.n	800f84c <create_name+0x320>
 800f840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f844:	f043 0302 	orr.w	r3, r3, #2
 800f848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f84c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f850:	f003 0302 	and.w	r3, r3, #2
 800f854:	2b00      	cmp	r3, #0
 800f856:	d117      	bne.n	800f888 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f858:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f85c:	f003 0303 	and.w	r3, r3, #3
 800f860:	2b01      	cmp	r3, #1
 800f862:	d105      	bne.n	800f870 <create_name+0x344>
 800f864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f868:	f043 0310 	orr.w	r3, r3, #16
 800f86c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f870:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f874:	f003 030c 	and.w	r3, r3, #12
 800f878:	2b04      	cmp	r3, #4
 800f87a:	d105      	bne.n	800f888 <create_name+0x35c>
 800f87c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f880:	f043 0308 	orr.w	r3, r3, #8
 800f884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f88e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800f892:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f894:	4618      	mov	r0, r3
 800f896:	3728      	adds	r7, #40	; 0x28
 800f898:	46bd      	mov	sp, r7
 800f89a:	bd80      	pop	{r7, pc}

0800f89c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b086      	sub	sp, #24
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
 800f8a4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f8aa:	693b      	ldr	r3, [r7, #16]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f8b0:	e002      	b.n	800f8b8 <follow_path+0x1c>
 800f8b2:	683b      	ldr	r3, [r7, #0]
 800f8b4:	3301      	adds	r3, #1
 800f8b6:	603b      	str	r3, [r7, #0]
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	781b      	ldrb	r3, [r3, #0]
 800f8bc:	2b2f      	cmp	r3, #47	; 0x2f
 800f8be:	d0f8      	beq.n	800f8b2 <follow_path+0x16>
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	781b      	ldrb	r3, [r3, #0]
 800f8c4:	2b5c      	cmp	r3, #92	; 0x5c
 800f8c6:	d0f4      	beq.n	800f8b2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f8c8:	693b      	ldr	r3, [r7, #16]
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800f8ce:	693b      	ldr	r3, [r7, #16]
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f8d4:	683b      	ldr	r3, [r7, #0]
 800f8d6:	781b      	ldrb	r3, [r3, #0]
 800f8d8:	2b1f      	cmp	r3, #31
 800f8da:	d80a      	bhi.n	800f8f2 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	2280      	movs	r2, #128	; 0x80
 800f8e0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800f8e4:	2100      	movs	r1, #0
 800f8e6:	6878      	ldr	r0, [r7, #4]
 800f8e8:	f7fe fc8b 	bl	800e202 <dir_sdi>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	75fb      	strb	r3, [r7, #23]
 800f8f0:	e078      	b.n	800f9e4 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f8f2:	463b      	mov	r3, r7
 800f8f4:	4619      	mov	r1, r3
 800f8f6:	6878      	ldr	r0, [r7, #4]
 800f8f8:	f7ff fe18 	bl	800f52c <create_name>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f900:	7dfb      	ldrb	r3, [r7, #23]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d169      	bne.n	800f9da <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	f7ff fb41 	bl	800ef8e <dir_find>
 800f90c:	4603      	mov	r3, r0
 800f90e:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f916:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f918:	7dfb      	ldrb	r3, [r7, #23]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d00a      	beq.n	800f934 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f91e:	7dfb      	ldrb	r3, [r7, #23]
 800f920:	2b04      	cmp	r3, #4
 800f922:	d15c      	bne.n	800f9de <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f924:	7afb      	ldrb	r3, [r7, #11]
 800f926:	f003 0304 	and.w	r3, r3, #4
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d157      	bne.n	800f9de <follow_path+0x142>
 800f92e:	2305      	movs	r3, #5
 800f930:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f932:	e054      	b.n	800f9de <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f934:	7afb      	ldrb	r3, [r7, #11]
 800f936:	f003 0304 	and.w	r3, r3, #4
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d151      	bne.n	800f9e2 <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	799b      	ldrb	r3, [r3, #6]
 800f942:	f003 0310 	and.w	r3, r3, #16
 800f946:	2b00      	cmp	r3, #0
 800f948:	d102      	bne.n	800f950 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800f94a:	2305      	movs	r3, #5
 800f94c:	75fb      	strb	r3, [r7, #23]
 800f94e:	e049      	b.n	800f9e4 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	781b      	ldrb	r3, [r3, #0]
 800f954:	2b04      	cmp	r3, #4
 800f956:	d130      	bne.n	800f9ba <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800f958:	693b      	ldr	r3, [r7, #16]
 800f95a:	689a      	ldr	r2, [r3, #8]
 800f95c:	693b      	ldr	r3, [r7, #16]
 800f95e:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800f960:	693b      	ldr	r3, [r7, #16]
 800f962:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f966:	4613      	mov	r3, r2
 800f968:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f96c:	693a      	ldr	r2, [r7, #16]
 800f96e:	79d2      	ldrb	r2, [r2, #7]
 800f970:	431a      	orrs	r2, r3
 800f972:	693b      	ldr	r3, [r7, #16]
 800f974:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f97a:	693b      	ldr	r3, [r7, #16]
 800f97c:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	691b      	ldr	r3, [r3, #16]
 800f982:	3334      	adds	r3, #52	; 0x34
 800f984:	4618      	mov	r0, r3
 800f986:	f7fd fa3b 	bl	800ce00 <ld_dword>
 800f98a:	4602      	mov	r2, r0
 800f98c:	693b      	ldr	r3, [r7, #16]
 800f98e:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	691b      	ldr	r3, [r3, #16]
 800f994:	3321      	adds	r3, #33	; 0x21
 800f996:	781b      	ldrb	r3, [r3, #0]
 800f998:	f003 0302 	and.w	r3, r3, #2
 800f99c:	b2da      	uxtb	r2, r3
 800f99e:	693b      	ldr	r3, [r7, #16]
 800f9a0:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	691b      	ldr	r3, [r3, #16]
 800f9a6:	3338      	adds	r3, #56	; 0x38
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	f7fd fa4c 	bl	800ce46 <ld_qword>
 800f9ae:	4602      	mov	r2, r0
 800f9b0:	460b      	mov	r3, r1
 800f9b2:	6939      	ldr	r1, [r7, #16]
 800f9b4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800f9b8:	e79b      	b.n	800f8f2 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9c8:	4413      	add	r3, r2
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	68f8      	ldr	r0, [r7, #12]
 800f9ce:	f7fe fdcf 	bl	800e570 <ld_clust>
 800f9d2:	4602      	mov	r2, r0
 800f9d4:	693b      	ldr	r3, [r7, #16]
 800f9d6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f9d8:	e78b      	b.n	800f8f2 <follow_path+0x56>
			if (res != FR_OK) break;
 800f9da:	bf00      	nop
 800f9dc:	e002      	b.n	800f9e4 <follow_path+0x148>
				break;
 800f9de:	bf00      	nop
 800f9e0:	e000      	b.n	800f9e4 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f9e2:	bf00      	nop
			}
		}
	}

	return res;
 800f9e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	3718      	adds	r7, #24
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	bd80      	pop	{r7, pc}

0800f9ee <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f9ee:	b480      	push	{r7}
 800f9f0:	b087      	sub	sp, #28
 800f9f2:	af00      	add	r7, sp, #0
 800f9f4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f9f6:	f04f 33ff 	mov.w	r3, #4294967295
 800f9fa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d031      	beq.n	800fa68 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	617b      	str	r3, [r7, #20]
 800fa0a:	e002      	b.n	800fa12 <get_ldnumber+0x24>
 800fa0c:	697b      	ldr	r3, [r7, #20]
 800fa0e:	3301      	adds	r3, #1
 800fa10:	617b      	str	r3, [r7, #20]
 800fa12:	697b      	ldr	r3, [r7, #20]
 800fa14:	781b      	ldrb	r3, [r3, #0]
 800fa16:	2b1f      	cmp	r3, #31
 800fa18:	d903      	bls.n	800fa22 <get_ldnumber+0x34>
 800fa1a:	697b      	ldr	r3, [r7, #20]
 800fa1c:	781b      	ldrb	r3, [r3, #0]
 800fa1e:	2b3a      	cmp	r3, #58	; 0x3a
 800fa20:	d1f4      	bne.n	800fa0c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fa22:	697b      	ldr	r3, [r7, #20]
 800fa24:	781b      	ldrb	r3, [r3, #0]
 800fa26:	2b3a      	cmp	r3, #58	; 0x3a
 800fa28:	d11c      	bne.n	800fa64 <get_ldnumber+0x76>
			tp = *path;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	1c5a      	adds	r2, r3, #1
 800fa34:	60fa      	str	r2, [r7, #12]
 800fa36:	781b      	ldrb	r3, [r3, #0]
 800fa38:	3b30      	subs	r3, #48	; 0x30
 800fa3a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fa3c:	68bb      	ldr	r3, [r7, #8]
 800fa3e:	2b09      	cmp	r3, #9
 800fa40:	d80e      	bhi.n	800fa60 <get_ldnumber+0x72>
 800fa42:	68fa      	ldr	r2, [r7, #12]
 800fa44:	697b      	ldr	r3, [r7, #20]
 800fa46:	429a      	cmp	r2, r3
 800fa48:	d10a      	bne.n	800fa60 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fa4a:	68bb      	ldr	r3, [r7, #8]
 800fa4c:	2b03      	cmp	r3, #3
 800fa4e:	d807      	bhi.n	800fa60 <get_ldnumber+0x72>
					vol = (int)i;
 800fa50:	68bb      	ldr	r3, [r7, #8]
 800fa52:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fa54:	697b      	ldr	r3, [r7, #20]
 800fa56:	3301      	adds	r3, #1
 800fa58:	617b      	str	r3, [r7, #20]
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	697a      	ldr	r2, [r7, #20]
 800fa5e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fa60:	693b      	ldr	r3, [r7, #16]
 800fa62:	e002      	b.n	800fa6a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fa64:	2300      	movs	r3, #0
 800fa66:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fa68:	693b      	ldr	r3, [r7, #16]
}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	371c      	adds	r7, #28
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa74:	4770      	bx	lr
	...

0800fa78 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b082      	sub	sp, #8
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
 800fa80:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	2200      	movs	r2, #0
 800fa86:	70da      	strb	r2, [r3, #3]
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f04f 32ff 	mov.w	r2, #4294967295
 800fa8e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fa90:	6839      	ldr	r1, [r7, #0]
 800fa92:	6878      	ldr	r0, [r7, #4]
 800fa94:	f7fd fdb0 	bl	800d5f8 <move_window>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d001      	beq.n	800faa2 <check_fs+0x2a>
 800fa9e:	2304      	movs	r3, #4
 800faa0:	e044      	b.n	800fb2c <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	3338      	adds	r3, #56	; 0x38
 800faa6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800faaa:	4618      	mov	r0, r3
 800faac:	f7fd f990 	bl	800cdd0 <ld_word>
 800fab0:	4603      	mov	r3, r0
 800fab2:	461a      	mov	r2, r3
 800fab4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fab8:	429a      	cmp	r2, r3
 800faba:	d001      	beq.n	800fac0 <check_fs+0x48>
 800fabc:	2303      	movs	r3, #3
 800fabe:	e035      	b.n	800fb2c <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fac6:	2be9      	cmp	r3, #233	; 0xe9
 800fac8:	d009      	beq.n	800fade <check_fs+0x66>
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fad0:	2beb      	cmp	r3, #235	; 0xeb
 800fad2:	d11e      	bne.n	800fb12 <check_fs+0x9a>
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800fada:	2b90      	cmp	r3, #144	; 0x90
 800fadc:	d119      	bne.n	800fb12 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	3338      	adds	r3, #56	; 0x38
 800fae2:	3336      	adds	r3, #54	; 0x36
 800fae4:	4618      	mov	r0, r3
 800fae6:	f7fd f98b 	bl	800ce00 <ld_dword>
 800faea:	4603      	mov	r3, r0
 800faec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800faf0:	4a10      	ldr	r2, [pc, #64]	; (800fb34 <check_fs+0xbc>)
 800faf2:	4293      	cmp	r3, r2
 800faf4:	d101      	bne.n	800fafa <check_fs+0x82>
 800faf6:	2300      	movs	r3, #0
 800faf8:	e018      	b.n	800fb2c <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	3338      	adds	r3, #56	; 0x38
 800fafe:	3352      	adds	r3, #82	; 0x52
 800fb00:	4618      	mov	r0, r3
 800fb02:	f7fd f97d 	bl	800ce00 <ld_dword>
 800fb06:	4603      	mov	r3, r0
 800fb08:	4a0b      	ldr	r2, [pc, #44]	; (800fb38 <check_fs+0xc0>)
 800fb0a:	4293      	cmp	r3, r2
 800fb0c:	d101      	bne.n	800fb12 <check_fs+0x9a>
 800fb0e:	2300      	movs	r3, #0
 800fb10:	e00c      	b.n	800fb2c <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	3338      	adds	r3, #56	; 0x38
 800fb16:	220b      	movs	r2, #11
 800fb18:	4908      	ldr	r1, [pc, #32]	; (800fb3c <check_fs+0xc4>)
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7fd fb79 	bl	800d212 <mem_cmp>
 800fb20:	4603      	mov	r3, r0
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d101      	bne.n	800fb2a <check_fs+0xb2>
 800fb26:	2301      	movs	r3, #1
 800fb28:	e000      	b.n	800fb2c <check_fs+0xb4>
#endif
	return 2;
 800fb2a:	2302      	movs	r3, #2
}
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	3708      	adds	r7, #8
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}
 800fb34:	00544146 	.word	0x00544146
 800fb38:	33544146 	.word	0x33544146
 800fb3c:	08017430 	.word	0x08017430

0800fb40 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fb40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fb44:	b09c      	sub	sp, #112	; 0x70
 800fb46:	af00      	add	r7, sp, #0
 800fb48:	61f8      	str	r0, [r7, #28]
 800fb4a:	61b9      	str	r1, [r7, #24]
 800fb4c:	4613      	mov	r3, r2
 800fb4e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fb50:	69bb      	ldr	r3, [r7, #24]
 800fb52:	2200      	movs	r2, #0
 800fb54:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fb56:	69f8      	ldr	r0, [r7, #28]
 800fb58:	f7ff ff49 	bl	800f9ee <get_ldnumber>
 800fb5c:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800fb5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	da01      	bge.n	800fb68 <find_volume+0x28>
 800fb64:	230b      	movs	r3, #11
 800fb66:	e337      	b.n	80101d8 <find_volume+0x698>


	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fb68:	4a99      	ldr	r2, [pc, #612]	; (800fdd0 <find_volume+0x290>)
 800fb6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb70:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fb72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d101      	bne.n	800fb7c <find_volume+0x3c>
 800fb78:	230c      	movs	r3, #12
 800fb7a:	e32d      	b.n	80101d8 <find_volume+0x698>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fb7c:	69bb      	ldr	r3, [r7, #24]
 800fb7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fb80:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fb82:	7dfb      	ldrb	r3, [r7, #23]
 800fb84:	f023 0301 	bic.w	r3, r3, #1
 800fb88:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fb8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb8c:	781b      	ldrb	r3, [r3, #0]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d01a      	beq.n	800fbc8 <find_volume+0x88>

		stat = disk_status(fs->drv);
 800fb92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb94:	785b      	ldrb	r3, [r3, #1]
 800fb96:	4618      	mov	r0, r3
 800fb98:	f7fd f87c 	bl	800cc94 <disk_status>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fba2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fba6:	f003 0301 	and.w	r3, r3, #1
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d10c      	bne.n	800fbc8 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fbae:	7dfb      	ldrb	r3, [r7, #23]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d007      	beq.n	800fbc4 <find_volume+0x84>
 800fbb4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fbb8:	f003 0304 	and.w	r3, r3, #4
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d001      	beq.n	800fbc4 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800fbc0:	230a      	movs	r3, #10
 800fbc2:	e309      	b.n	80101d8 <find_volume+0x698>
			}
			return FR_OK;				/* The file system object is valid */
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	e307      	b.n	80101d8 <find_volume+0x698>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fbc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbca:	2200      	movs	r2, #0
 800fbcc:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fbce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbd0:	b2da      	uxtb	r2, r3
 800fbd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbd4:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fbd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbd8:	785b      	ldrb	r3, [r3, #1]
 800fbda:	4618      	mov	r0, r3
 800fbdc:	f7fd f874 	bl	800ccc8 <disk_initialize>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fbe6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fbea:	f003 0301 	and.w	r3, r3, #1
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d001      	beq.n	800fbf6 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fbf2:	2303      	movs	r3, #3
 800fbf4:	e2f0      	b.n	80101d8 <find_volume+0x698>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fbf6:	7dfb      	ldrb	r3, [r7, #23]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d007      	beq.n	800fc0c <find_volume+0xcc>
 800fbfc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fc00:	f003 0304 	and.w	r3, r3, #4
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d001      	beq.n	800fc0c <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800fc08:	230a      	movs	r3, #10
 800fc0a:	e2e5      	b.n	80101d8 <find_volume+0x698>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fc10:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fc12:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800fc14:	f7ff ff30 	bl	800fa78 <check_fs>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fc1e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800fc22:	2b02      	cmp	r3, #2
 800fc24:	d14d      	bne.n	800fcc2 <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fc26:	2300      	movs	r3, #0
 800fc28:	65bb      	str	r3, [r7, #88]	; 0x58
 800fc2a:	e020      	b.n	800fc6e <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fc2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc2e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800fc32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc34:	011b      	lsls	r3, r3, #4
 800fc36:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fc3a:	4413      	add	r3, r2
 800fc3c:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fc3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc40:	3304      	adds	r3, #4
 800fc42:	781b      	ldrb	r3, [r3, #0]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d006      	beq.n	800fc56 <find_volume+0x116>
 800fc48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc4a:	3308      	adds	r3, #8
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	f7fd f8d7 	bl	800ce00 <ld_dword>
 800fc52:	4602      	mov	r2, r0
 800fc54:	e000      	b.n	800fc58 <find_volume+0x118>
 800fc56:	2200      	movs	r2, #0
 800fc58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc5a:	009b      	lsls	r3, r3, #2
 800fc5c:	3360      	adds	r3, #96	; 0x60
 800fc5e:	f107 0110 	add.w	r1, r7, #16
 800fc62:	440b      	add	r3, r1
 800fc64:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fc68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc6a:	3301      	adds	r3, #1
 800fc6c:	65bb      	str	r3, [r7, #88]	; 0x58
 800fc6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc70:	2b03      	cmp	r3, #3
 800fc72:	d9db      	bls.n	800fc2c <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fc74:	2300      	movs	r3, #0
 800fc76:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 800fc78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d002      	beq.n	800fc84 <find_volume+0x144>
 800fc7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc80:	3b01      	subs	r3, #1
 800fc82:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fc84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc86:	009b      	lsls	r3, r3, #2
 800fc88:	3360      	adds	r3, #96	; 0x60
 800fc8a:	f107 0210 	add.w	r2, r7, #16
 800fc8e:	4413      	add	r3, r2
 800fc90:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800fc94:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fc96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d005      	beq.n	800fca8 <find_volume+0x168>
 800fc9c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fc9e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800fca0:	f7ff feea 	bl	800fa78 <check_fs>
 800fca4:	4603      	mov	r3, r0
 800fca6:	e000      	b.n	800fcaa <find_volume+0x16a>
 800fca8:	2303      	movs	r3, #3
 800fcaa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fcae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800fcb2:	2b01      	cmp	r3, #1
 800fcb4:	d905      	bls.n	800fcc2 <find_volume+0x182>
 800fcb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fcb8:	3301      	adds	r3, #1
 800fcba:	65bb      	str	r3, [r7, #88]	; 0x58
 800fcbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fcbe:	2b03      	cmp	r3, #3
 800fcc0:	d9e0      	bls.n	800fc84 <find_volume+0x144>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fcc2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800fcc6:	2b04      	cmp	r3, #4
 800fcc8:	d101      	bne.n	800fcce <find_volume+0x18e>
 800fcca:	2301      	movs	r3, #1
 800fccc:	e284      	b.n	80101d8 <find_volume+0x698>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fcce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800fcd2:	2b01      	cmp	r3, #1
 800fcd4:	d901      	bls.n	800fcda <find_volume+0x19a>
 800fcd6:	230d      	movs	r3, #13
 800fcd8:	e27e      	b.n	80101d8 <find_volume+0x698>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800fcda:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800fcde:	2b01      	cmp	r3, #1
 800fce0:	f040 80fa 	bne.w	800fed8 <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800fce4:	230b      	movs	r3, #11
 800fce6:	65bb      	str	r3, [r7, #88]	; 0x58
 800fce8:	e002      	b.n	800fcf0 <find_volume+0x1b0>
 800fcea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fcec:	3301      	adds	r3, #1
 800fcee:	65bb      	str	r3, [r7, #88]	; 0x58
 800fcf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fcf2:	2b3f      	cmp	r3, #63	; 0x3f
 800fcf4:	d806      	bhi.n	800fd04 <find_volume+0x1c4>
 800fcf6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fcf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fcfa:	4413      	add	r3, r2
 800fcfc:	3338      	adds	r3, #56	; 0x38
 800fcfe:	781b      	ldrb	r3, [r3, #0]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d0f2      	beq.n	800fcea <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800fd04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fd06:	2b3f      	cmp	r3, #63	; 0x3f
 800fd08:	d801      	bhi.n	800fd0e <find_volume+0x1ce>
 800fd0a:	230d      	movs	r3, #13
 800fd0c:	e264      	b.n	80101d8 <find_volume+0x698>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800fd0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd10:	3338      	adds	r3, #56	; 0x38
 800fd12:	3368      	adds	r3, #104	; 0x68
 800fd14:	4618      	mov	r0, r3
 800fd16:	f7fd f85b 	bl	800cdd0 <ld_word>
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd20:	d001      	beq.n	800fd26 <find_volume+0x1e6>
 800fd22:	230d      	movs	r3, #13
 800fd24:	e258      	b.n	80101d8 <find_volume+0x698>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800fd26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd28:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800fd2c:	2b09      	cmp	r3, #9
 800fd2e:	d001      	beq.n	800fd34 <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 800fd30:	230d      	movs	r3, #13
 800fd32:	e251      	b.n	80101d8 <find_volume+0x698>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800fd34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd36:	3338      	adds	r3, #56	; 0x38
 800fd38:	3348      	adds	r3, #72	; 0x48
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f7fd f883 	bl	800ce46 <ld_qword>
 800fd40:	4602      	mov	r2, r0
 800fd42:	460b      	mov	r3, r1
 800fd44:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fd46:	2000      	movs	r0, #0
 800fd48:	60b9      	str	r1, [r7, #8]
 800fd4a:	60f8      	str	r0, [r7, #12]
 800fd4c:	68b9      	ldr	r1, [r7, #8]
 800fd4e:	1851      	adds	r1, r2, r1
 800fd50:	6039      	str	r1, [r7, #0]
 800fd52:	68f9      	ldr	r1, [r7, #12]
 800fd54:	eb43 0101 	adc.w	r1, r3, r1
 800fd58:	6079      	str	r1, [r7, #4]
 800fd5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd5e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800fd62:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800fd66:	2b01      	cmp	r3, #1
 800fd68:	d301      	bcc.n	800fd6e <find_volume+0x22e>
 800fd6a:	230d      	movs	r3, #13
 800fd6c:	e234      	b.n	80101d8 <find_volume+0x698>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800fd6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd70:	3338      	adds	r3, #56	; 0x38
 800fd72:	3354      	adds	r3, #84	; 0x54
 800fd74:	4618      	mov	r0, r3
 800fd76:	f7fd f843 	bl	800ce00 <ld_dword>
 800fd7a:	4602      	mov	r2, r0
 800fd7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd7e:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800fd80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd82:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 800fd86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd88:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800fd8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd8c:	789b      	ldrb	r3, [r3, #2]
 800fd8e:	2b01      	cmp	r3, #1
 800fd90:	d001      	beq.n	800fd96 <find_volume+0x256>
 800fd92:	230d      	movs	r3, #13
 800fd94:	e220      	b.n	80101d8 <find_volume+0x698>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800fd96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd98:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800fd9c:	461a      	mov	r2, r3
 800fd9e:	2301      	movs	r3, #1
 800fda0:	4093      	lsls	r3, r2
 800fda2:	b29a      	uxth	r2, r3
 800fda4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fda6:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800fda8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdaa:	895b      	ldrh	r3, [r3, #10]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d101      	bne.n	800fdb4 <find_volume+0x274>
 800fdb0:	230d      	movs	r3, #13
 800fdb2:	e211      	b.n	80101d8 <find_volume+0x698>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800fdb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdb6:	3338      	adds	r3, #56	; 0x38
 800fdb8:	335c      	adds	r3, #92	; 0x5c
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f7fd f820 	bl	800ce00 <ld_dword>
 800fdc0:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800fdc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdc4:	4a03      	ldr	r2, [pc, #12]	; (800fdd4 <find_volume+0x294>)
 800fdc6:	4293      	cmp	r3, r2
 800fdc8:	d906      	bls.n	800fdd8 <find_volume+0x298>
 800fdca:	230d      	movs	r3, #13
 800fdcc:	e204      	b.n	80101d8 <find_volume+0x698>
 800fdce:	bf00      	nop
 800fdd0:	20001e58 	.word	0x20001e58
 800fdd4:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800fdd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdda:	1c9a      	adds	r2, r3, #2
 800fddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdde:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800fde0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fde2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fde4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800fde6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fde8:	3338      	adds	r3, #56	; 0x38
 800fdea:	3358      	adds	r3, #88	; 0x58
 800fdec:	4618      	mov	r0, r3
 800fdee:	f7fd f807 	bl	800ce00 <ld_dword>
 800fdf2:	4602      	mov	r2, r0
 800fdf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fdf6:	441a      	add	r2, r3
 800fdf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdfa:	631a      	str	r2, [r3, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800fdfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdfe:	3338      	adds	r3, #56	; 0x38
 800fe00:	3350      	adds	r3, #80	; 0x50
 800fe02:	4618      	mov	r0, r3
 800fe04:	f7fc fffc 	bl	800ce00 <ld_dword>
 800fe08:	4602      	mov	r2, r0
 800fe0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe0c:	441a      	add	r2, r3
 800fe0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe10:	629a      	str	r2, [r3, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800fe12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe16:	2200      	movs	r2, #0
 800fe18:	469a      	mov	sl, r3
 800fe1a:	4693      	mov	fp, r2
 800fe1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe1e:	895b      	ldrh	r3, [r3, #10]
 800fe20:	461a      	mov	r2, r3
 800fe22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe24:	fb02 f303 	mul.w	r3, r2, r3
 800fe28:	2200      	movs	r2, #0
 800fe2a:	4698      	mov	r8, r3
 800fe2c:	4691      	mov	r9, r2
 800fe2e:	eb1a 0408 	adds.w	r4, sl, r8
 800fe32:	eb4b 0509 	adc.w	r5, fp, r9
 800fe36:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800fe3a:	42a2      	cmp	r2, r4
 800fe3c:	41ab      	sbcs	r3, r5
 800fe3e:	d201      	bcs.n	800fe44 <find_volume+0x304>
 800fe40:	230d      	movs	r3, #13
 800fe42:	e1c9      	b.n	80101d8 <find_volume+0x698>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800fe44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe46:	3338      	adds	r3, #56	; 0x38
 800fe48:	3360      	adds	r3, #96	; 0x60
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f7fc ffd8 	bl	800ce00 <ld_dword>
 800fe50:	4602      	mov	r2, r0
 800fe52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe54:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800fe56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe5a:	4619      	mov	r1, r3
 800fe5c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800fe5e:	f7fd fc67 	bl	800d730 <clust2sect>
 800fe62:	4603      	mov	r3, r0
 800fe64:	4619      	mov	r1, r3
 800fe66:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800fe68:	f7fd fbc6 	bl	800d5f8 <move_window>
 800fe6c:	4603      	mov	r3, r0
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d001      	beq.n	800fe76 <find_volume+0x336>
 800fe72:	2301      	movs	r3, #1
 800fe74:	e1b0      	b.n	80101d8 <find_volume+0x698>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800fe76:	2300      	movs	r3, #0
 800fe78:	65bb      	str	r3, [r7, #88]	; 0x58
 800fe7a:	e015      	b.n	800fea8 <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800fe7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fe7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fe80:	4413      	add	r3, r2
 800fe82:	3338      	adds	r3, #56	; 0x38
 800fe84:	781b      	ldrb	r3, [r3, #0]
 800fe86:	2b81      	cmp	r3, #129	; 0x81
 800fe88:	d10b      	bne.n	800fea2 <find_volume+0x362>
 800fe8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe8c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800fe90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fe92:	3314      	adds	r3, #20
 800fe94:	4413      	add	r3, r2
 800fe96:	4618      	mov	r0, r3
 800fe98:	f7fc ffb2 	bl	800ce00 <ld_dword>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	2b02      	cmp	r3, #2
 800fea0:	d007      	beq.n	800feb2 <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800fea2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fea4:	3320      	adds	r3, #32
 800fea6:	65bb      	str	r3, [r7, #88]	; 0x58
 800fea8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800feaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800feae:	d3e5      	bcc.n	800fe7c <find_volume+0x33c>
 800feb0:	e000      	b.n	800feb4 <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800feb2:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800feb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800feb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800feba:	d101      	bne.n	800fec0 <find_volume+0x380>
 800febc:	230d      	movs	r3, #13
 800febe:	e18b      	b.n	80101d8 <find_volume+0x698>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fec2:	f04f 32ff 	mov.w	r2, #4294967295
 800fec6:	619a      	str	r2, [r3, #24]
 800fec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800feca:	699a      	ldr	r2, [r3, #24]
 800fecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fece:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800fed0:	2304      	movs	r3, #4
 800fed2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800fed6:	e167      	b.n	80101a8 <find_volume+0x668>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800feda:	3338      	adds	r3, #56	; 0x38
 800fedc:	330b      	adds	r3, #11
 800fede:	4618      	mov	r0, r3
 800fee0:	f7fc ff76 	bl	800cdd0 <ld_word>
 800fee4:	4603      	mov	r3, r0
 800fee6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800feea:	d001      	beq.n	800fef0 <find_volume+0x3b0>
 800feec:	230d      	movs	r3, #13
 800feee:	e173      	b.n	80101d8 <find_volume+0x698>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fef2:	3338      	adds	r3, #56	; 0x38
 800fef4:	3316      	adds	r3, #22
 800fef6:	4618      	mov	r0, r3
 800fef8:	f7fc ff6a 	bl	800cdd0 <ld_word>
 800fefc:	4603      	mov	r3, r0
 800fefe:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ff00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d106      	bne.n	800ff14 <find_volume+0x3d4>
 800ff06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff08:	3338      	adds	r3, #56	; 0x38
 800ff0a:	3324      	adds	r3, #36	; 0x24
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	f7fc ff77 	bl	800ce00 <ld_dword>
 800ff12:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 800ff14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff16:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ff18:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ff1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff1c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800ff20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff22:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ff24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff26:	789b      	ldrb	r3, [r3, #2]
 800ff28:	2b01      	cmp	r3, #1
 800ff2a:	d005      	beq.n	800ff38 <find_volume+0x3f8>
 800ff2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff2e:	789b      	ldrb	r3, [r3, #2]
 800ff30:	2b02      	cmp	r3, #2
 800ff32:	d001      	beq.n	800ff38 <find_volume+0x3f8>
 800ff34:	230d      	movs	r3, #13
 800ff36:	e14f      	b.n	80101d8 <find_volume+0x698>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ff38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff3a:	789b      	ldrb	r3, [r3, #2]
 800ff3c:	461a      	mov	r2, r3
 800ff3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ff40:	fb02 f303 	mul.w	r3, r2, r3
 800ff44:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ff46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ff4c:	b29a      	uxth	r2, r3
 800ff4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff50:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ff52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff54:	895b      	ldrh	r3, [r3, #10]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d008      	beq.n	800ff6c <find_volume+0x42c>
 800ff5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff5c:	895b      	ldrh	r3, [r3, #10]
 800ff5e:	461a      	mov	r2, r3
 800ff60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff62:	895b      	ldrh	r3, [r3, #10]
 800ff64:	3b01      	subs	r3, #1
 800ff66:	4013      	ands	r3, r2
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d001      	beq.n	800ff70 <find_volume+0x430>
 800ff6c:	230d      	movs	r3, #13
 800ff6e:	e133      	b.n	80101d8 <find_volume+0x698>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ff70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff72:	3338      	adds	r3, #56	; 0x38
 800ff74:	3311      	adds	r3, #17
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7fc ff2a 	bl	800cdd0 <ld_word>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	461a      	mov	r2, r3
 800ff80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff82:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ff84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff86:	891b      	ldrh	r3, [r3, #8]
 800ff88:	f003 030f 	and.w	r3, r3, #15
 800ff8c:	b29b      	uxth	r3, r3
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d001      	beq.n	800ff96 <find_volume+0x456>
 800ff92:	230d      	movs	r3, #13
 800ff94:	e120      	b.n	80101d8 <find_volume+0x698>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ff96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff98:	3338      	adds	r3, #56	; 0x38
 800ff9a:	3313      	adds	r3, #19
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	f7fc ff17 	bl	800cdd0 <ld_word>
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ffa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d106      	bne.n	800ffba <find_volume+0x47a>
 800ffac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffae:	3338      	adds	r3, #56	; 0x38
 800ffb0:	3320      	adds	r3, #32
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	f7fc ff24 	bl	800ce00 <ld_dword>
 800ffb8:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ffba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffbc:	3338      	adds	r3, #56	; 0x38
 800ffbe:	330e      	adds	r3, #14
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	f7fc ff05 	bl	800cdd0 <ld_word>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ffcc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d101      	bne.n	800ffd8 <find_volume+0x498>
 800ffd4:	230d      	movs	r3, #13
 800ffd6:	e0ff      	b.n	80101d8 <find_volume+0x698>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ffd8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ffdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ffde:	4413      	add	r3, r2
 800ffe0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ffe2:	8912      	ldrh	r2, [r2, #8]
 800ffe4:	0912      	lsrs	r2, r2, #4
 800ffe6:	b292      	uxth	r2, r2
 800ffe8:	4413      	add	r3, r2
 800ffea:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ffec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ffee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fff0:	429a      	cmp	r2, r3
 800fff2:	d201      	bcs.n	800fff8 <find_volume+0x4b8>
 800fff4:	230d      	movs	r3, #13
 800fff6:	e0ef      	b.n	80101d8 <find_volume+0x698>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fff8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fffc:	1ad3      	subs	r3, r2, r3
 800fffe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010000:	8952      	ldrh	r2, [r2, #10]
 8010002:	fbb3 f3f2 	udiv	r3, r3, r2
 8010006:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801000a:	2b00      	cmp	r3, #0
 801000c:	d101      	bne.n	8010012 <find_volume+0x4d2>
 801000e:	230d      	movs	r3, #13
 8010010:	e0e2      	b.n	80101d8 <find_volume+0x698>
		fmt = FS_FAT32;
 8010012:	2303      	movs	r3, #3
 8010014:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801001a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801001e:	4293      	cmp	r3, r2
 8010020:	d802      	bhi.n	8010028 <find_volume+0x4e8>
 8010022:	2302      	movs	r3, #2
 8010024:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801002a:	f640 72f5 	movw	r2, #4085	; 0xff5
 801002e:	4293      	cmp	r3, r2
 8010030:	d802      	bhi.n	8010038 <find_volume+0x4f8>
 8010032:	2301      	movs	r3, #1
 8010034:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801003a:	1c9a      	adds	r2, r3, #2
 801003c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801003e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8010040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010042:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010044:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010046:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801004a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801004c:	441a      	add	r2, r3
 801004e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010050:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8010052:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010056:	441a      	add	r2, r3
 8010058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801005a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 801005c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010060:	2b03      	cmp	r3, #3
 8010062:	d11e      	bne.n	80100a2 <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010066:	3338      	adds	r3, #56	; 0x38
 8010068:	332a      	adds	r3, #42	; 0x2a
 801006a:	4618      	mov	r0, r3
 801006c:	f7fc feb0 	bl	800cdd0 <ld_word>
 8010070:	4603      	mov	r3, r0
 8010072:	2b00      	cmp	r3, #0
 8010074:	d001      	beq.n	801007a <find_volume+0x53a>
 8010076:	230d      	movs	r3, #13
 8010078:	e0ae      	b.n	80101d8 <find_volume+0x698>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801007a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801007c:	891b      	ldrh	r3, [r3, #8]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d001      	beq.n	8010086 <find_volume+0x546>
 8010082:	230d      	movs	r3, #13
 8010084:	e0a8      	b.n	80101d8 <find_volume+0x698>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010088:	3338      	adds	r3, #56	; 0x38
 801008a:	332c      	adds	r3, #44	; 0x2c
 801008c:	4618      	mov	r0, r3
 801008e:	f7fc feb7 	bl	800ce00 <ld_dword>
 8010092:	4602      	mov	r2, r0
 8010094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010096:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801009a:	69db      	ldr	r3, [r3, #28]
 801009c:	009b      	lsls	r3, r3, #2
 801009e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80100a0:	e01f      	b.n	80100e2 <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80100a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100a4:	891b      	ldrh	r3, [r3, #8]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d101      	bne.n	80100ae <find_volume+0x56e>
 80100aa:	230d      	movs	r3, #13
 80100ac:	e094      	b.n	80101d8 <find_volume+0x698>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80100ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80100b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80100b4:	441a      	add	r2, r3
 80100b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100b8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80100ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80100be:	2b02      	cmp	r3, #2
 80100c0:	d103      	bne.n	80100ca <find_volume+0x58a>
 80100c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100c4:	69db      	ldr	r3, [r3, #28]
 80100c6:	005b      	lsls	r3, r3, #1
 80100c8:	e00a      	b.n	80100e0 <find_volume+0x5a0>
 80100ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100cc:	69da      	ldr	r2, [r3, #28]
 80100ce:	4613      	mov	r3, r2
 80100d0:	005b      	lsls	r3, r3, #1
 80100d2:	4413      	add	r3, r2
 80100d4:	085a      	lsrs	r2, r3, #1
 80100d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100d8:	69db      	ldr	r3, [r3, #28]
 80100da:	f003 0301 	and.w	r3, r3, #1
 80100de:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80100e0:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80100e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100e4:	6a1a      	ldr	r2, [r3, #32]
 80100e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80100e8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80100ec:	0a5b      	lsrs	r3, r3, #9
 80100ee:	429a      	cmp	r2, r3
 80100f0:	d201      	bcs.n	80100f6 <find_volume+0x5b6>
 80100f2:	230d      	movs	r3, #13
 80100f4:	e070      	b.n	80101d8 <find_volume+0x698>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80100f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100f8:	f04f 32ff 	mov.w	r2, #4294967295
 80100fc:	619a      	str	r2, [r3, #24]
 80100fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010100:	699a      	ldr	r2, [r3, #24]
 8010102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010104:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8010106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010108:	2280      	movs	r2, #128	; 0x80
 801010a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801010c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010110:	2b03      	cmp	r3, #3
 8010112:	d149      	bne.n	80101a8 <find_volume+0x668>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010116:	3338      	adds	r3, #56	; 0x38
 8010118:	3330      	adds	r3, #48	; 0x30
 801011a:	4618      	mov	r0, r3
 801011c:	f7fc fe58 	bl	800cdd0 <ld_word>
 8010120:	4603      	mov	r3, r0
 8010122:	2b01      	cmp	r3, #1
 8010124:	d140      	bne.n	80101a8 <find_volume+0x668>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010126:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010128:	3301      	adds	r3, #1
 801012a:	4619      	mov	r1, r3
 801012c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801012e:	f7fd fa63 	bl	800d5f8 <move_window>
 8010132:	4603      	mov	r3, r0
 8010134:	2b00      	cmp	r3, #0
 8010136:	d137      	bne.n	80101a8 <find_volume+0x668>
		{
			fs->fsi_flag = 0;
 8010138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801013a:	2200      	movs	r2, #0
 801013c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801013e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010140:	3338      	adds	r3, #56	; 0x38
 8010142:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010146:	4618      	mov	r0, r3
 8010148:	f7fc fe42 	bl	800cdd0 <ld_word>
 801014c:	4603      	mov	r3, r0
 801014e:	461a      	mov	r2, r3
 8010150:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010154:	429a      	cmp	r2, r3
 8010156:	d127      	bne.n	80101a8 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010158:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801015a:	3338      	adds	r3, #56	; 0x38
 801015c:	4618      	mov	r0, r3
 801015e:	f7fc fe4f 	bl	800ce00 <ld_dword>
 8010162:	4603      	mov	r3, r0
 8010164:	4a1f      	ldr	r2, [pc, #124]	; (80101e4 <find_volume+0x6a4>)
 8010166:	4293      	cmp	r3, r2
 8010168:	d11e      	bne.n	80101a8 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801016a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801016c:	3338      	adds	r3, #56	; 0x38
 801016e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010172:	4618      	mov	r0, r3
 8010174:	f7fc fe44 	bl	800ce00 <ld_dword>
 8010178:	4603      	mov	r3, r0
 801017a:	4a1b      	ldr	r2, [pc, #108]	; (80101e8 <find_volume+0x6a8>)
 801017c:	4293      	cmp	r3, r2
 801017e:	d113      	bne.n	80101a8 <find_volume+0x668>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010182:	3338      	adds	r3, #56	; 0x38
 8010184:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010188:	4618      	mov	r0, r3
 801018a:	f7fc fe39 	bl	800ce00 <ld_dword>
 801018e:	4602      	mov	r2, r0
 8010190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010192:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010196:	3338      	adds	r3, #56	; 0x38
 8010198:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801019c:	4618      	mov	r0, r3
 801019e:	f7fc fe2f 	bl	800ce00 <ld_dword>
 80101a2:	4602      	mov	r2, r0
 80101a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101a6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80101a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101aa:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80101ae:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80101b0:	4b0e      	ldr	r3, [pc, #56]	; (80101ec <find_volume+0x6ac>)
 80101b2:	881b      	ldrh	r3, [r3, #0]
 80101b4:	3301      	adds	r3, #1
 80101b6:	b29a      	uxth	r2, r3
 80101b8:	4b0c      	ldr	r3, [pc, #48]	; (80101ec <find_volume+0x6ac>)
 80101ba:	801a      	strh	r2, [r3, #0]
 80101bc:	4b0b      	ldr	r3, [pc, #44]	; (80101ec <find_volume+0x6ac>)
 80101be:	881a      	ldrh	r2, [r3, #0]
 80101c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101c2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80101c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101c6:	4a0a      	ldr	r2, [pc, #40]	; (80101f0 <find_volume+0x6b0>)
 80101c8:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 80101ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101cc:	4a09      	ldr	r2, [pc, #36]	; (80101f4 <find_volume+0x6b4>)
 80101ce:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80101d0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80101d2:	f7fd f9a9 	bl	800d528 <clear_lock>
#endif
	return FR_OK;
 80101d6:	2300      	movs	r3, #0
}
 80101d8:	4618      	mov	r0, r3
 80101da:	3770      	adds	r7, #112	; 0x70
 80101dc:	46bd      	mov	sp, r7
 80101de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80101e2:	bf00      	nop
 80101e4:	41615252 	.word	0x41615252
 80101e8:	61417272 	.word	0x61417272
 80101ec:	20001e68 	.word	0x20001e68
 80101f0:	200020ec 	.word	0x200020ec
 80101f4:	20001e8c 	.word	0x20001e8c

080101f8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b084      	sub	sp, #16
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
 8010200:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010202:	2309      	movs	r3, #9
 8010204:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d01c      	beq.n	8010246 <validate+0x4e>
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d018      	beq.n	8010246 <validate+0x4e>
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	781b      	ldrb	r3, [r3, #0]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d013      	beq.n	8010246 <validate+0x4e>
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	889a      	ldrh	r2, [r3, #4]
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	88db      	ldrh	r3, [r3, #6]
 8010228:	429a      	cmp	r2, r3
 801022a:	d10c      	bne.n	8010246 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	785b      	ldrb	r3, [r3, #1]
 8010232:	4618      	mov	r0, r3
 8010234:	f7fc fd2e 	bl	800cc94 <disk_status>
 8010238:	4603      	mov	r3, r0
 801023a:	f003 0301 	and.w	r3, r3, #1
 801023e:	2b00      	cmp	r3, #0
 8010240:	d101      	bne.n	8010246 <validate+0x4e>
			res = FR_OK;
 8010242:	2300      	movs	r3, #0
 8010244:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010246:	7bfb      	ldrb	r3, [r7, #15]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d102      	bne.n	8010252 <validate+0x5a>
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	e000      	b.n	8010254 <validate+0x5c>
 8010252:	2300      	movs	r3, #0
 8010254:	683a      	ldr	r2, [r7, #0]
 8010256:	6013      	str	r3, [r2, #0]
	return res;
 8010258:	7bfb      	ldrb	r3, [r7, #15]
}
 801025a:	4618      	mov	r0, r3
 801025c:	3710      	adds	r7, #16
 801025e:	46bd      	mov	sp, r7
 8010260:	bd80      	pop	{r7, pc}
	...

08010264 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b088      	sub	sp, #32
 8010268:	af00      	add	r7, sp, #0
 801026a:	60f8      	str	r0, [r7, #12]
 801026c:	60b9      	str	r1, [r7, #8]
 801026e:	4613      	mov	r3, r2
 8010270:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010272:	68bb      	ldr	r3, [r7, #8]
 8010274:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010276:	f107 0310 	add.w	r3, r7, #16
 801027a:	4618      	mov	r0, r3
 801027c:	f7ff fbb7 	bl	800f9ee <get_ldnumber>
 8010280:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010282:	69fb      	ldr	r3, [r7, #28]
 8010284:	2b00      	cmp	r3, #0
 8010286:	da01      	bge.n	801028c <f_mount+0x28>
 8010288:	230b      	movs	r3, #11
 801028a:	e02b      	b.n	80102e4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801028c:	4a17      	ldr	r2, [pc, #92]	; (80102ec <f_mount+0x88>)
 801028e:	69fb      	ldr	r3, [r7, #28]
 8010290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010294:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010296:	69bb      	ldr	r3, [r7, #24]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d005      	beq.n	80102a8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801029c:	69b8      	ldr	r0, [r7, #24]
 801029e:	f7fd f943 	bl	800d528 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80102a2:	69bb      	ldr	r3, [r7, #24]
 80102a4:	2200      	movs	r2, #0
 80102a6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d002      	beq.n	80102b4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	2200      	movs	r2, #0
 80102b2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80102b4:	68fa      	ldr	r2, [r7, #12]
 80102b6:	490d      	ldr	r1, [pc, #52]	; (80102ec <f_mount+0x88>)
 80102b8:	69fb      	ldr	r3, [r7, #28]
 80102ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d002      	beq.n	80102ca <f_mount+0x66>
 80102c4:	79fb      	ldrb	r3, [r7, #7]
 80102c6:	2b01      	cmp	r3, #1
 80102c8:	d001      	beq.n	80102ce <f_mount+0x6a>
 80102ca:	2300      	movs	r3, #0
 80102cc:	e00a      	b.n	80102e4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80102ce:	f107 010c 	add.w	r1, r7, #12
 80102d2:	f107 0308 	add.w	r3, r7, #8
 80102d6:	2200      	movs	r2, #0
 80102d8:	4618      	mov	r0, r3
 80102da:	f7ff fc31 	bl	800fb40 <find_volume>
 80102de:	4603      	mov	r3, r0
 80102e0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80102e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	3720      	adds	r7, #32
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bd80      	pop	{r7, pc}
 80102ec:	20001e58 	.word	0x20001e58

080102f0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80102f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80102f4:	b0a6      	sub	sp, #152	; 0x98
 80102f6:	af00      	add	r7, sp, #0
 80102f8:	61f8      	str	r0, [r7, #28]
 80102fa:	61b9      	str	r1, [r7, #24]
 80102fc:	4613      	mov	r3, r2
 80102fe:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010300:	69fb      	ldr	r3, [r7, #28]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d101      	bne.n	801030a <f_open+0x1a>
 8010306:	2309      	movs	r3, #9
 8010308:	e2ae      	b.n	8010868 <f_open+0x578>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801030a:	7dfb      	ldrb	r3, [r7, #23]
 801030c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010310:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 8010312:	7dfa      	ldrb	r2, [r7, #23]
 8010314:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8010318:	f107 0318 	add.w	r3, r7, #24
 801031c:	4618      	mov	r0, r3
 801031e:	f7ff fc0f 	bl	800fb40 <find_volume>
 8010322:	4603      	mov	r3, r0
 8010324:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	if (res == FR_OK) {
 8010328:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801032c:	2b00      	cmp	r3, #0
 801032e:	f040 8292 	bne.w	8010856 <f_open+0x566>
		dj.obj.fs = fs;
 8010332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010334:	62bb      	str	r3, [r7, #40]	; 0x28
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010336:	69ba      	ldr	r2, [r7, #24]
 8010338:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801033c:	4611      	mov	r1, r2
 801033e:	4618      	mov	r0, r3
 8010340:	f7ff faac 	bl	800f89c <follow_path>
 8010344:	4603      	mov	r3, r0
 8010346:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801034a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801034e:	2b00      	cmp	r3, #0
 8010350:	d11a      	bne.n	8010388 <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010352:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8010356:	b25b      	sxtb	r3, r3
 8010358:	2b00      	cmp	r3, #0
 801035a:	da03      	bge.n	8010364 <f_open+0x74>
				res = FR_INVALID_NAME;
 801035c:	2306      	movs	r3, #6
 801035e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8010362:	e011      	b.n	8010388 <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010364:	7dfb      	ldrb	r3, [r7, #23]
 8010366:	f023 0301 	bic.w	r3, r3, #1
 801036a:	2b00      	cmp	r3, #0
 801036c:	bf14      	ite	ne
 801036e:	2301      	movne	r3, #1
 8010370:	2300      	moveq	r3, #0
 8010372:	b2db      	uxtb	r3, r3
 8010374:	461a      	mov	r2, r3
 8010376:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801037a:	4611      	mov	r1, r2
 801037c:	4618      	mov	r0, r3
 801037e:	f7fc ff8b 	bl	800d298 <chk_lock>
 8010382:	4603      	mov	r3, r0
 8010384:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010388:	7dfb      	ldrb	r3, [r7, #23]
 801038a:	f003 031c 	and.w	r3, r3, #28
 801038e:	2b00      	cmp	r3, #0
 8010390:	f000 8115 	beq.w	80105be <f_open+0x2ce>
			if (res != FR_OK) {					/* No file, create new */
 8010394:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010398:	2b00      	cmp	r3, #0
 801039a:	d017      	beq.n	80103cc <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801039c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80103a0:	2b04      	cmp	r3, #4
 80103a2:	d10e      	bne.n	80103c2 <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80103a4:	f7fc ffd4 	bl	800d350 <enq_lock>
 80103a8:	4603      	mov	r3, r0
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d006      	beq.n	80103bc <f_open+0xcc>
 80103ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80103b2:	4618      	mov	r0, r3
 80103b4:	f7fe ff14 	bl	800f1e0 <dir_register>
 80103b8:	4603      	mov	r3, r0
 80103ba:	e000      	b.n	80103be <f_open+0xce>
 80103bc:	2312      	movs	r3, #18
 80103be:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80103c2:	7dfb      	ldrb	r3, [r7, #23]
 80103c4:	f043 0308 	orr.w	r3, r3, #8
 80103c8:	75fb      	strb	r3, [r7, #23]
 80103ca:	e011      	b.n	80103f0 <f_open+0x100>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80103cc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80103d0:	f003 0311 	and.w	r3, r3, #17
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d003      	beq.n	80103e0 <f_open+0xf0>
					res = FR_DENIED;
 80103d8:	2307      	movs	r3, #7
 80103da:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80103de:	e007      	b.n	80103f0 <f_open+0x100>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80103e0:	7dfb      	ldrb	r3, [r7, #23]
 80103e2:	f003 0304 	and.w	r3, r3, #4
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d002      	beq.n	80103f0 <f_open+0x100>
 80103ea:	2308      	movs	r3, #8
 80103ec:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80103f0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	f040 80fe 	bne.w	80105f6 <f_open+0x306>
 80103fa:	7dfb      	ldrb	r3, [r7, #23]
 80103fc:	f003 0308 	and.w	r3, r3, #8
 8010400:	2b00      	cmp	r3, #0
 8010402:	f000 80f8 	beq.w	80105f6 <f_open+0x306>
				dw = GET_FATTIME();
 8010406:	f7f9 fe49 	bl	800a09c <get_fattime>
 801040a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 801040e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010410:	781b      	ldrb	r3, [r3, #0]
 8010412:	2b04      	cmp	r3, #4
 8010414:	f040 8084 	bne.w	8010520 <f_open+0x230>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8010418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801041a:	69fb      	ldr	r3, [r7, #28]
 801041c:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 801041e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010420:	691b      	ldr	r3, [r3, #16]
 8010422:	3334      	adds	r3, #52	; 0x34
 8010424:	4618      	mov	r0, r3
 8010426:	f7fc fceb 	bl	800ce00 <ld_dword>
 801042a:	4602      	mov	r2, r0
 801042c:	69fb      	ldr	r3, [r7, #28]
 801042e:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8010430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010432:	691b      	ldr	r3, [r3, #16]
 8010434:	3338      	adds	r3, #56	; 0x38
 8010436:	4618      	mov	r0, r3
 8010438:	f7fc fd05 	bl	800ce46 <ld_qword>
 801043c:	4602      	mov	r2, r0
 801043e:	460b      	mov	r3, r1
 8010440:	69f9      	ldr	r1, [r7, #28]
 8010442:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8010446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010448:	691b      	ldr	r3, [r3, #16]
 801044a:	3321      	adds	r3, #33	; 0x21
 801044c:	781b      	ldrb	r3, [r3, #0]
 801044e:	f003 0302 	and.w	r3, r3, #2
 8010452:	b2da      	uxtb	r2, r3
 8010454:	69fb      	ldr	r3, [r7, #28]
 8010456:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 8010458:	69fb      	ldr	r3, [r7, #28]
 801045a:	2200      	movs	r2, #0
 801045c:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 801045e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010460:	691b      	ldr	r3, [r3, #16]
 8010462:	3308      	adds	r3, #8
 8010464:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8010468:	4618      	mov	r0, r3
 801046a:	f7fc fde2 	bl	800d032 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 801046e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010470:	691b      	ldr	r3, [r3, #16]
 8010472:	3314      	adds	r3, #20
 8010474:	2200      	movs	r2, #0
 8010476:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 8010478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801047a:	691b      	ldr	r3, [r3, #16]
 801047c:	330c      	adds	r3, #12
 801047e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8010482:	4618      	mov	r0, r3
 8010484:	f7fc fdd5 	bl	800d032 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 8010488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801048a:	691b      	ldr	r3, [r3, #16]
 801048c:	3315      	adds	r3, #21
 801048e:	2200      	movs	r2, #0
 8010490:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 8010492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010494:	691b      	ldr	r3, [r3, #16]
 8010496:	3304      	adds	r3, #4
 8010498:	2220      	movs	r2, #32
 801049a:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 801049c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801049e:	691b      	ldr	r3, [r3, #16]
 80104a0:	3334      	adds	r3, #52	; 0x34
 80104a2:	2100      	movs	r1, #0
 80104a4:	4618      	mov	r0, r3
 80104a6:	f7fc fdc4 	bl	800d032 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 80104aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ac:	691b      	ldr	r3, [r3, #16]
 80104ae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80104b2:	f04f 0200 	mov.w	r2, #0
 80104b6:	f04f 0300 	mov.w	r3, #0
 80104ba:	4608      	mov	r0, r1
 80104bc:	f7fc fde5 	bl	800d08a <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 80104c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104c2:	691b      	ldr	r3, [r3, #16]
 80104c4:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80104c8:	f04f 0200 	mov.w	r2, #0
 80104cc:	f04f 0300 	mov.w	r3, #0
 80104d0:	4608      	mov	r0, r1
 80104d2:	f7fc fdda 	bl	800d08a <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 80104d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104d8:	691b      	ldr	r3, [r3, #16]
 80104da:	3321      	adds	r3, #33	; 0x21
 80104dc:	2201      	movs	r2, #1
 80104de:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 80104e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80104e4:	4618      	mov	r0, r3
 80104e6:	f7fe fbc9 	bl	800ec7c <store_xdir>
 80104ea:	4603      	mov	r3, r0
 80104ec:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 80104f0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d17e      	bne.n	80105f6 <f_open+0x306>
 80104f8:	69fb      	ldr	r3, [r7, #28]
 80104fa:	689b      	ldr	r3, [r3, #8]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d07a      	beq.n	80105f6 <f_open+0x306>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8010500:	69f8      	ldr	r0, [r7, #28]
 8010502:	69fb      	ldr	r3, [r7, #28]
 8010504:	689b      	ldr	r3, [r3, #8]
 8010506:	2200      	movs	r2, #0
 8010508:	4619      	mov	r1, r3
 801050a:	f7fd fc81 	bl	800de10 <remove_chain>
 801050e:	4603      	mov	r3, r0
 8010510:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8010514:	69fb      	ldr	r3, [r7, #28]
 8010516:	689a      	ldr	r2, [r3, #8]
 8010518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801051a:	3a01      	subs	r2, #1
 801051c:	615a      	str	r2, [r3, #20]
 801051e:	e06a      	b.n	80105f6 <f_open+0x306>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010520:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010522:	330e      	adds	r3, #14
 8010524:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8010528:	4618      	mov	r0, r3
 801052a:	f7fc fd82 	bl	800d032 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801052e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010530:	3316      	adds	r3, #22
 8010532:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8010536:	4618      	mov	r0, r3
 8010538:	f7fc fd7b 	bl	800d032 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801053c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801053e:	330b      	adds	r3, #11
 8010540:	2220      	movs	r2, #32
 8010542:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010546:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010548:	4611      	mov	r1, r2
 801054a:	4618      	mov	r0, r3
 801054c:	f7fe f810 	bl	800e570 <ld_clust>
 8010550:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010556:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010558:	2200      	movs	r2, #0
 801055a:	4618      	mov	r0, r3
 801055c:	f7fe f827 	bl	800e5ae <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010562:	331c      	adds	r3, #28
 8010564:	2100      	movs	r1, #0
 8010566:	4618      	mov	r0, r3
 8010568:	f7fc fd63 	bl	800d032 <st_dword>
					fs->wflag = 1;
 801056c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801056e:	2201      	movs	r2, #1
 8010570:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010572:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010576:	2b00      	cmp	r3, #0
 8010578:	d03d      	beq.n	80105f6 <f_open+0x306>
						dw = fs->winsect;
 801057a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801057c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801057e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
						res = remove_chain(&dj.obj, cl, 0);
 8010582:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010586:	2200      	movs	r2, #0
 8010588:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 801058c:	4618      	mov	r0, r3
 801058e:	f7fd fc3f 	bl	800de10 <remove_chain>
 8010592:	4603      	mov	r3, r0
 8010594:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						if (res == FR_OK) {
 8010598:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801059c:	2b00      	cmp	r3, #0
 801059e:	d12a      	bne.n	80105f6 <f_open+0x306>
							res = move_window(fs, dw);
 80105a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105a2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80105a6:	4618      	mov	r0, r3
 80105a8:	f7fd f826 	bl	800d5f8 <move_window>
 80105ac:	4603      	mov	r3, r0
 80105ae:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80105b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80105b8:	3a01      	subs	r2, #1
 80105ba:	615a      	str	r2, [r3, #20]
 80105bc:	e01b      	b.n	80105f6 <f_open+0x306>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80105be:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d117      	bne.n	80105f6 <f_open+0x306>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80105c6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80105ca:	f003 0310 	and.w	r3, r3, #16
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d003      	beq.n	80105da <f_open+0x2ea>
					res = FR_NO_FILE;
 80105d2:	2304      	movs	r3, #4
 80105d4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80105d8:	e00d      	b.n	80105f6 <f_open+0x306>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80105da:	7dfb      	ldrb	r3, [r7, #23]
 80105dc:	f003 0302 	and.w	r3, r3, #2
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d008      	beq.n	80105f6 <f_open+0x306>
 80105e4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80105e8:	f003 0301 	and.w	r3, r3, #1
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d002      	beq.n	80105f6 <f_open+0x306>
						res = FR_DENIED;
 80105f0:	2307      	movs	r3, #7
 80105f2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					}
				}
			}
		}
		if (res == FR_OK) {
 80105f6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d128      	bne.n	8010650 <f_open+0x360>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80105fe:	7dfb      	ldrb	r3, [r7, #23]
 8010600:	f003 0308 	and.w	r3, r3, #8
 8010604:	2b00      	cmp	r3, #0
 8010606:	d003      	beq.n	8010610 <f_open+0x320>
				mode |= FA_MODIFIED;
 8010608:	7dfb      	ldrb	r3, [r7, #23]
 801060a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801060e:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010614:	69fb      	ldr	r3, [r7, #28]
 8010616:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 8010618:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801061a:	69fb      	ldr	r3, [r7, #28]
 801061c:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801061e:	7dfb      	ldrb	r3, [r7, #23]
 8010620:	f023 0301 	bic.w	r3, r3, #1
 8010624:	2b00      	cmp	r3, #0
 8010626:	bf14      	ite	ne
 8010628:	2301      	movne	r3, #1
 801062a:	2300      	moveq	r3, #0
 801062c:	b2db      	uxtb	r3, r3
 801062e:	461a      	mov	r2, r3
 8010630:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010634:	4611      	mov	r1, r2
 8010636:	4618      	mov	r0, r3
 8010638:	f7fc feac 	bl	800d394 <inc_lock>
 801063c:	4602      	mov	r2, r0
 801063e:	69fb      	ldr	r3, [r7, #28]
 8010640:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010642:	69fb      	ldr	r3, [r7, #28]
 8010644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010646:	2b00      	cmp	r3, #0
 8010648:	d102      	bne.n	8010650 <f_open+0x360>
 801064a:	2302      	movs	r3, #2
 801064c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010650:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8010654:	2b00      	cmp	r3, #0
 8010656:	f040 80fe 	bne.w	8010856 <f_open+0x566>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 801065a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801065c:	781b      	ldrb	r3, [r3, #0]
 801065e:	2b04      	cmp	r3, #4
 8010660:	d12d      	bne.n	80106be <f_open+0x3ce>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8010662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010664:	69fb      	ldr	r3, [r7, #28]
 8010666:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8010668:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801066c:	4613      	mov	r3, r2
 801066e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010672:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8010676:	431a      	orrs	r2, r3
 8010678:	69fb      	ldr	r3, [r7, #28]
 801067a:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 801067c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801067e:	69fb      	ldr	r3, [r7, #28]
 8010680:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 8010682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010684:	691b      	ldr	r3, [r3, #16]
 8010686:	3334      	adds	r3, #52	; 0x34
 8010688:	4618      	mov	r0, r3
 801068a:	f7fc fbb9 	bl	800ce00 <ld_dword>
 801068e:	4602      	mov	r2, r0
 8010690:	69fb      	ldr	r3, [r7, #28]
 8010692:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8010694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010696:	691b      	ldr	r3, [r3, #16]
 8010698:	3338      	adds	r3, #56	; 0x38
 801069a:	4618      	mov	r0, r3
 801069c:	f7fc fbd3 	bl	800ce46 <ld_qword>
 80106a0:	4602      	mov	r2, r0
 80106a2:	460b      	mov	r3, r1
 80106a4:	69f9      	ldr	r1, [r7, #28]
 80106a6:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80106aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ac:	691b      	ldr	r3, [r3, #16]
 80106ae:	3321      	adds	r3, #33	; 0x21
 80106b0:	781b      	ldrb	r3, [r3, #0]
 80106b2:	f003 0302 	and.w	r3, r3, #2
 80106b6:	b2da      	uxtb	r2, r3
 80106b8:	69fb      	ldr	r3, [r7, #28]
 80106ba:	71da      	strb	r2, [r3, #7]
 80106bc:	e016      	b.n	80106ec <f_open+0x3fc>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80106be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106c0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80106c2:	4611      	mov	r1, r2
 80106c4:	4618      	mov	r0, r3
 80106c6:	f7fd ff53 	bl	800e570 <ld_clust>
 80106ca:	4602      	mov	r2, r0
 80106cc:	69fb      	ldr	r3, [r7, #28]
 80106ce:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80106d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80106d2:	331c      	adds	r3, #28
 80106d4:	4618      	mov	r0, r3
 80106d6:	f7fc fb93 	bl	800ce00 <ld_dword>
 80106da:	4603      	mov	r3, r0
 80106dc:	2200      	movs	r2, #0
 80106de:	60bb      	str	r3, [r7, #8]
 80106e0:	60fa      	str	r2, [r7, #12]
 80106e2:	69fb      	ldr	r3, [r7, #28]
 80106e4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80106e8:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80106ec:	69fb      	ldr	r3, [r7, #28]
 80106ee:	2200      	movs	r2, #0
 80106f0:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80106f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106f4:	69fb      	ldr	r3, [r7, #28]
 80106f6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80106f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106fa:	88da      	ldrh	r2, [r3, #6]
 80106fc:	69fb      	ldr	r3, [r7, #28]
 80106fe:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010700:	69fb      	ldr	r3, [r7, #28]
 8010702:	7dfa      	ldrb	r2, [r7, #23]
 8010704:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 8010708:	69fb      	ldr	r3, [r7, #28]
 801070a:	2200      	movs	r2, #0
 801070c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8010710:	69fb      	ldr	r3, [r7, #28]
 8010712:	2200      	movs	r2, #0
 8010714:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010716:	69f9      	ldr	r1, [r7, #28]
 8010718:	f04f 0200 	mov.w	r2, #0
 801071c:	f04f 0300 	mov.w	r3, #0
 8010720:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010724:	69fb      	ldr	r3, [r7, #28]
 8010726:	3354      	adds	r3, #84	; 0x54
 8010728:	f44f 7200 	mov.w	r2, #512	; 0x200
 801072c:	2100      	movs	r1, #0
 801072e:	4618      	mov	r0, r3
 8010730:	f7fc fd54 	bl	800d1dc <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010734:	7dfb      	ldrb	r3, [r7, #23]
 8010736:	f003 0320 	and.w	r3, r3, #32
 801073a:	2b00      	cmp	r3, #0
 801073c:	f000 808b 	beq.w	8010856 <f_open+0x566>
 8010740:	69fb      	ldr	r3, [r7, #28]
 8010742:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010746:	4313      	orrs	r3, r2
 8010748:	f000 8085 	beq.w	8010856 <f_open+0x566>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801074c:	69fb      	ldr	r3, [r7, #28]
 801074e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010752:	69f9      	ldr	r1, [r7, #28]
 8010754:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801075a:	895b      	ldrh	r3, [r3, #10]
 801075c:	025b      	lsls	r3, r3, #9
 801075e:	67fb      	str	r3, [r7, #124]	; 0x7c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010760:	69fb      	ldr	r3, [r7, #28]
 8010762:	689b      	ldr	r3, [r3, #8]
 8010764:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010768:	69fb      	ldr	r3, [r7, #28]
 801076a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801076e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 8010772:	e026      	b.n	80107c2 <f_open+0x4d2>
					clst = get_fat(&fp->obj, clst);
 8010774:	69fb      	ldr	r3, [r7, #28]
 8010776:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801077a:	4618      	mov	r0, r3
 801077c:	f7fc fff8 	bl	800d770 <get_fat>
 8010780:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
					if (clst <= 1) res = FR_INT_ERR;
 8010784:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010788:	2b01      	cmp	r3, #1
 801078a:	d802      	bhi.n	8010792 <f_open+0x4a2>
 801078c:	2302      	movs	r3, #2
 801078e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010792:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010796:	f1b3 3fff 	cmp.w	r3, #4294967295
 801079a:	d102      	bne.n	80107a2 <f_open+0x4b2>
 801079c:	2301      	movs	r3, #1
 801079e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80107a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80107a4:	2200      	movs	r2, #0
 80107a6:	469a      	mov	sl, r3
 80107a8:	4693      	mov	fp, r2
 80107aa:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80107ae:	ebb2 010a 	subs.w	r1, r2, sl
 80107b2:	6039      	str	r1, [r7, #0]
 80107b4:	eb63 030b 	sbc.w	r3, r3, fp
 80107b8:	607b      	str	r3, [r7, #4]
 80107ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80107be:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 80107c2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d109      	bne.n	80107de <f_open+0x4ee>
 80107ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80107cc:	2200      	movs	r2, #0
 80107ce:	4698      	mov	r8, r3
 80107d0:	4691      	mov	r9, r2
 80107d2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80107d6:	4590      	cmp	r8, r2
 80107d8:	eb79 0303 	sbcs.w	r3, r9, r3
 80107dc:	d3ca      	bcc.n	8010774 <f_open+0x484>
				}
				fp->clust = clst;
 80107de:	69fb      	ldr	r3, [r7, #28]
 80107e0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80107e4:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80107e6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d133      	bne.n	8010856 <f_open+0x566>
 80107ee:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80107f2:	f3c2 0408 	ubfx	r4, r2, #0, #9
 80107f6:	2500      	movs	r5, #0
 80107f8:	ea54 0305 	orrs.w	r3, r4, r5
 80107fc:	d02b      	beq.n	8010856 <f_open+0x566>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80107fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010800:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010804:	4618      	mov	r0, r3
 8010806:	f7fc ff93 	bl	800d730 <clust2sect>
 801080a:	67b8      	str	r0, [r7, #120]	; 0x78
 801080c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801080e:	2b00      	cmp	r3, #0
 8010810:	d103      	bne.n	801081a <f_open+0x52a>
						res = FR_INT_ERR;
 8010812:	2302      	movs	r3, #2
 8010814:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8010818:	e01d      	b.n	8010856 <f_open+0x566>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801081a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 801081e:	f04f 0200 	mov.w	r2, #0
 8010822:	f04f 0300 	mov.w	r3, #0
 8010826:	0a42      	lsrs	r2, r0, #9
 8010828:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 801082c:	0a4b      	lsrs	r3, r1, #9
 801082e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010830:	441a      	add	r2, r3
 8010832:	69fb      	ldr	r3, [r7, #28]
 8010834:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010838:	7858      	ldrb	r0, [r3, #1]
 801083a:	69fb      	ldr	r3, [r7, #28]
 801083c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010840:	69fb      	ldr	r3, [r7, #28]
 8010842:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010844:	2301      	movs	r3, #1
 8010846:	f7fc fa65 	bl	800cd14 <disk_read>
 801084a:	4603      	mov	r3, r0
 801084c:	2b00      	cmp	r3, #0
 801084e:	d002      	beq.n	8010856 <f_open+0x566>
 8010850:	2301      	movs	r3, #1
 8010852:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010856:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801085a:	2b00      	cmp	r3, #0
 801085c:	d002      	beq.n	8010864 <f_open+0x574>
 801085e:	69fb      	ldr	r3, [r7, #28]
 8010860:	2200      	movs	r2, #0
 8010862:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010864:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8010868:	4618      	mov	r0, r3
 801086a:	3798      	adds	r7, #152	; 0x98
 801086c:	46bd      	mov	sp, r7
 801086e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010872 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010872:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010876:	b08c      	sub	sp, #48	; 0x30
 8010878:	af00      	add	r7, sp, #0
 801087a:	60f8      	str	r0, [r7, #12]
 801087c:	60b9      	str	r1, [r7, #8]
 801087e:	607a      	str	r2, [r7, #4]
 8010880:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010882:	68bb      	ldr	r3, [r7, #8]
 8010884:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	2200      	movs	r2, #0
 801088a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	f107 0210 	add.w	r2, r7, #16
 8010892:	4611      	mov	r1, r2
 8010894:	4618      	mov	r0, r3
 8010896:	f7ff fcaf 	bl	80101f8 <validate>
 801089a:	4603      	mov	r3, r0
 801089c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80108a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d108      	bne.n	80108ba <f_write+0x48>
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80108ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80108b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d002      	beq.n	80108c0 <f_write+0x4e>
 80108ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80108be:	e187      	b.n	8010bd0 <f_write+0x35e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80108c6:	f003 0302 	and.w	r3, r3, #2
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d101      	bne.n	80108d2 <f_write+0x60>
 80108ce:	2307      	movs	r3, #7
 80108d0:	e17e      	b.n	8010bd0 <f_write+0x35e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80108d2:	693b      	ldr	r3, [r7, #16]
 80108d4:	781b      	ldrb	r3, [r3, #0]
 80108d6:	2b04      	cmp	r3, #4
 80108d8:	f000 816a 	beq.w	8010bb0 <f_write+0x33e>
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	18d1      	adds	r1, r2, r3
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80108ec:	4613      	mov	r3, r2
 80108ee:	4299      	cmp	r1, r3
 80108f0:	f080 815e 	bcs.w	8010bb0 <f_write+0x33e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80108fa:	4613      	mov	r3, r2
 80108fc:	43db      	mvns	r3, r3
 80108fe:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010900:	e156      	b.n	8010bb0 <f_write+0x33e>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010908:	f3c2 0408 	ubfx	r4, r2, #0, #9
 801090c:	2500      	movs	r5, #0
 801090e:	ea54 0305 	orrs.w	r3, r4, r5
 8010912:	f040 80fb 	bne.w	8010b0c <f_write+0x29a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801091c:	f04f 0200 	mov.w	r2, #0
 8010920:	f04f 0300 	mov.w	r3, #0
 8010924:	0a42      	lsrs	r2, r0, #9
 8010926:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 801092a:	0a4b      	lsrs	r3, r1, #9
 801092c:	693b      	ldr	r3, [r7, #16]
 801092e:	895b      	ldrh	r3, [r3, #10]
 8010930:	3b01      	subs	r3, #1
 8010932:	4013      	ands	r3, r2
 8010934:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010936:	69bb      	ldr	r3, [r7, #24]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d146      	bne.n	80109ca <f_write+0x158>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010942:	4313      	orrs	r3, r2
 8010944:	d10c      	bne.n	8010960 <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	689b      	ldr	r3, [r3, #8]
 801094a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801094c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801094e:	2b00      	cmp	r3, #0
 8010950:	d11a      	bne.n	8010988 <f_write+0x116>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	2100      	movs	r1, #0
 8010956:	4618      	mov	r0, r3
 8010958:	f7fd fb0e 	bl	800df78 <create_chain>
 801095c:	62b8      	str	r0, [r7, #40]	; 0x28
 801095e:	e013      	b.n	8010988 <f_write+0x116>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010964:	2b00      	cmp	r3, #0
 8010966:	d007      	beq.n	8010978 <f_write+0x106>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801096e:	68f8      	ldr	r0, [r7, #12]
 8010970:	f7fd fc03 	bl	800e17a <clmt_clust>
 8010974:	62b8      	str	r0, [r7, #40]	; 0x28
 8010976:	e007      	b.n	8010988 <f_write+0x116>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010978:	68fa      	ldr	r2, [r7, #12]
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801097e:	4619      	mov	r1, r3
 8010980:	4610      	mov	r0, r2
 8010982:	f7fd faf9 	bl	800df78 <create_chain>
 8010986:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801098a:	2b00      	cmp	r3, #0
 801098c:	f000 8115 	beq.w	8010bba <f_write+0x348>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010992:	2b01      	cmp	r3, #1
 8010994:	d105      	bne.n	80109a2 <f_write+0x130>
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	2202      	movs	r2, #2
 801099a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801099e:	2302      	movs	r3, #2
 80109a0:	e116      	b.n	8010bd0 <f_write+0x35e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80109a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109a8:	d105      	bne.n	80109b6 <f_write+0x144>
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	2201      	movs	r2, #1
 80109ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80109b2:	2301      	movs	r3, #1
 80109b4:	e10c      	b.n	8010bd0 <f_write+0x35e>
				fp->clust = clst;			/* Update current cluster */
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80109ba:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	689b      	ldr	r3, [r3, #8]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d102      	bne.n	80109ca <f_write+0x158>
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80109c8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80109d0:	b25b      	sxtb	r3, r3
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	da1b      	bge.n	8010a0e <f_write+0x19c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80109d6:	693b      	ldr	r3, [r7, #16]
 80109d8:	7858      	ldrb	r0, [r3, #1]
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80109e4:	2301      	movs	r3, #1
 80109e6:	f7fc f9b5 	bl	800cd54 <disk_write>
 80109ea:	4603      	mov	r3, r0
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d005      	beq.n	80109fc <f_write+0x18a>
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	2201      	movs	r2, #1
 80109f4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80109f8:	2301      	movs	r3, #1
 80109fa:	e0e9      	b.n	8010bd0 <f_write+0x35e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010a02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a06:	b2da      	uxtb	r2, r3
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010a0e:	693a      	ldr	r2, [r7, #16]
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a14:	4619      	mov	r1, r3
 8010a16:	4610      	mov	r0, r2
 8010a18:	f7fc fe8a 	bl	800d730 <clust2sect>
 8010a1c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010a1e:	697b      	ldr	r3, [r7, #20]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d105      	bne.n	8010a30 <f_write+0x1be>
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	2202      	movs	r2, #2
 8010a28:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010a2c:	2302      	movs	r3, #2
 8010a2e:	e0cf      	b.n	8010bd0 <f_write+0x35e>
			sect += csect;
 8010a30:	697a      	ldr	r2, [r7, #20]
 8010a32:	69bb      	ldr	r3, [r7, #24]
 8010a34:	4413      	add	r3, r2
 8010a36:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	0a5b      	lsrs	r3, r3, #9
 8010a3c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010a3e:	6a3b      	ldr	r3, [r7, #32]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d03f      	beq.n	8010ac4 <f_write+0x252>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010a44:	69ba      	ldr	r2, [r7, #24]
 8010a46:	6a3b      	ldr	r3, [r7, #32]
 8010a48:	4413      	add	r3, r2
 8010a4a:	693a      	ldr	r2, [r7, #16]
 8010a4c:	8952      	ldrh	r2, [r2, #10]
 8010a4e:	4293      	cmp	r3, r2
 8010a50:	d905      	bls.n	8010a5e <f_write+0x1ec>
					cc = fs->csize - csect;
 8010a52:	693b      	ldr	r3, [r7, #16]
 8010a54:	895b      	ldrh	r3, [r3, #10]
 8010a56:	461a      	mov	r2, r3
 8010a58:	69bb      	ldr	r3, [r7, #24]
 8010a5a:	1ad3      	subs	r3, r2, r3
 8010a5c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010a5e:	693b      	ldr	r3, [r7, #16]
 8010a60:	7858      	ldrb	r0, [r3, #1]
 8010a62:	6a3b      	ldr	r3, [r7, #32]
 8010a64:	697a      	ldr	r2, [r7, #20]
 8010a66:	69f9      	ldr	r1, [r7, #28]
 8010a68:	f7fc f974 	bl	800cd54 <disk_write>
 8010a6c:	4603      	mov	r3, r0
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d005      	beq.n	8010a7e <f_write+0x20c>
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	2201      	movs	r2, #1
 8010a76:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010a7a:	2301      	movs	r3, #1
 8010a7c:	e0a8      	b.n	8010bd0 <f_write+0x35e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a82:	697b      	ldr	r3, [r7, #20]
 8010a84:	1ad3      	subs	r3, r2, r3
 8010a86:	6a3a      	ldr	r2, [r7, #32]
 8010a88:	429a      	cmp	r2, r3
 8010a8a:	d917      	bls.n	8010abc <f_write+0x24a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a96:	697b      	ldr	r3, [r7, #20]
 8010a98:	1ad3      	subs	r3, r2, r3
 8010a9a:	025b      	lsls	r3, r3, #9
 8010a9c:	69fa      	ldr	r2, [r7, #28]
 8010a9e:	4413      	add	r3, r2
 8010aa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010aa4:	4619      	mov	r1, r3
 8010aa6:	f7fc fb78 	bl	800d19a <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ab4:	b2da      	uxtb	r2, r3
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010abc:	6a3b      	ldr	r3, [r7, #32]
 8010abe:	025b      	lsls	r3, r3, #9
 8010ac0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010ac2:	e04a      	b.n	8010b5a <f_write+0x2e8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ac8:	697a      	ldr	r2, [r7, #20]
 8010aca:	429a      	cmp	r2, r3
 8010acc:	d01b      	beq.n	8010b06 <f_write+0x294>
				fp->fptr < fp->obj.objsize &&
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010ada:	4290      	cmp	r0, r2
 8010adc:	eb71 0303 	sbcs.w	r3, r1, r3
 8010ae0:	d211      	bcs.n	8010b06 <f_write+0x294>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010ae2:	693b      	ldr	r3, [r7, #16]
 8010ae4:	7858      	ldrb	r0, [r3, #1]
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010aec:	2301      	movs	r3, #1
 8010aee:	697a      	ldr	r2, [r7, #20]
 8010af0:	f7fc f910 	bl	800cd14 <disk_read>
 8010af4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d005      	beq.n	8010b06 <f_write+0x294>
					ABORT(fs, FR_DISK_ERR);
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	2201      	movs	r2, #1
 8010afe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010b02:	2301      	movs	r3, #1
 8010b04:	e064      	b.n	8010bd0 <f_write+0x35e>
			}
#endif
			fp->sect = sect;
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	697a      	ldr	r2, [r7, #20]
 8010b0a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010b12:	4613      	mov	r3, r2
 8010b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b18:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010b1c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	429a      	cmp	r2, r3
 8010b24:	d901      	bls.n	8010b2a <f_write+0x2b8>
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010b36:	4613      	mov	r3, r2
 8010b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b3c:	440b      	add	r3, r1
 8010b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b40:	69f9      	ldr	r1, [r7, #28]
 8010b42:	4618      	mov	r0, r3
 8010b44:	f7fc fb29 	bl	800d19a <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010b4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010b52:	b2da      	uxtb	r2, r3
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010b5a:	69fa      	ldr	r2, [r7, #28]
 8010b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b5e:	4413      	add	r3, r2
 8010b60:	61fb      	str	r3, [r7, #28]
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010b68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010b6a:	2000      	movs	r0, #0
 8010b6c:	4688      	mov	r8, r1
 8010b6e:	4681      	mov	r9, r0
 8010b70:	eb12 0a08 	adds.w	sl, r2, r8
 8010b74:	eb43 0b09 	adc.w	fp, r3, r9
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010b84:	68f9      	ldr	r1, [r7, #12]
 8010b86:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
 8010b8a:	4282      	cmp	r2, r0
 8010b8c:	eb73 0c01 	sbcs.w	ip, r3, r1
 8010b90:	d201      	bcs.n	8010b96 <f_write+0x324>
 8010b92:	4602      	mov	r2, r0
 8010b94:	460b      	mov	r3, r1
 8010b96:	68f9      	ldr	r1, [r7, #12]
 8010b98:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	681a      	ldr	r2, [r3, #0]
 8010ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba2:	441a      	add	r2, r3
 8010ba4:	683b      	ldr	r3, [r7, #0]
 8010ba6:	601a      	str	r2, [r3, #0]
 8010ba8:	687a      	ldr	r2, [r7, #4]
 8010baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bac:	1ad3      	subs	r3, r2, r3
 8010bae:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	f47f aea5 	bne.w	8010902 <f_write+0x90>
 8010bb8:	e000      	b.n	8010bbc <f_write+0x34a>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010bba:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010bc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010bc6:	b2da      	uxtb	r2, r3
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 8010bce:	2300      	movs	r3, #0
}
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	3730      	adds	r7, #48	; 0x30
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010bda <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010bda:	b580      	push	{r7, lr}
 8010bdc:	b09a      	sub	sp, #104	; 0x68
 8010bde:	af00      	add	r7, sp, #0
 8010be0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010be8:	4611      	mov	r1, r2
 8010bea:	4618      	mov	r0, r3
 8010bec:	f7ff fb04 	bl	80101f8 <validate>
 8010bf0:	4603      	mov	r3, r0
 8010bf2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8010bf6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	f040 8105 	bne.w	8010e0a <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	f000 80fd 	beq.w	8010e0a <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010c16:	b25b      	sxtb	r3, r3
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	da17      	bge.n	8010c4c <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010c1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010c1e:	7858      	ldrb	r0, [r3, #1]
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010c2a:	2301      	movs	r3, #1
 8010c2c:	f7fc f892 	bl	800cd54 <disk_write>
 8010c30:	4603      	mov	r3, r0
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d001      	beq.n	8010c3a <f_sync+0x60>
 8010c36:	2301      	movs	r3, #1
 8010c38:	e0e9      	b.n	8010e0e <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c44:	b2da      	uxtb	r2, r3
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010c4c:	f7f9 fa26 	bl	800a09c <get_fattime>
 8010c50:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8010c52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010c54:	781b      	ldrb	r3, [r3, #0]
 8010c56:	2b04      	cmp	r3, #4
 8010c58:	f040 808c 	bne.w	8010d74 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f7fd f876 	bl	800dd50 <fill_first_frag>
 8010c64:	4603      	mov	r3, r0
 8010c66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 8010c6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d10a      	bne.n	8010c88 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8010c72:	6878      	ldr	r0, [r7, #4]
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c78:	f04f 32ff 	mov.w	r2, #4294967295
 8010c7c:	4619      	mov	r1, r3
 8010c7e:	f7fd f896 	bl	800ddae <fill_last_frag>
 8010c82:	4603      	mov	r3, r0
 8010c84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 8010c88:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	f040 80bc 	bne.w	8010e0a <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 8010c92:	687a      	ldr	r2, [r7, #4]
 8010c94:	f107 0308 	add.w	r3, r7, #8
 8010c98:	4611      	mov	r1, r2
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	f7fd ffb8 	bl	800ec10 <load_obj_dir>
 8010ca0:	4603      	mov	r3, r0
 8010ca2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 8010ca6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	f040 80ad 	bne.w	8010e0a <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8010cb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010cb2:	691b      	ldr	r3, [r3, #16]
 8010cb4:	3304      	adds	r3, #4
 8010cb6:	781a      	ldrb	r2, [r3, #0]
 8010cb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010cba:	691b      	ldr	r3, [r3, #16]
 8010cbc:	3304      	adds	r3, #4
 8010cbe:	f042 0220 	orr.w	r2, r2, #32
 8010cc2:	b2d2      	uxtb	r2, r2
 8010cc4:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	79da      	ldrb	r2, [r3, #7]
 8010cca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010ccc:	691b      	ldr	r3, [r3, #16]
 8010cce:	3321      	adds	r3, #33	; 0x21
 8010cd0:	f042 0201 	orr.w	r2, r2, #1
 8010cd4:	b2d2      	uxtb	r2, r2
 8010cd6:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 8010cd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010cda:	691b      	ldr	r3, [r3, #16]
 8010cdc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	689b      	ldr	r3, [r3, #8]
 8010ce4:	4619      	mov	r1, r3
 8010ce6:	4610      	mov	r0, r2
 8010ce8:	f7fc f9a3 	bl	800d032 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8010cec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010cee:	691b      	ldr	r3, [r3, #16]
 8010cf0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010cfa:	4608      	mov	r0, r1
 8010cfc:	f7fc f9c5 	bl	800d08a <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8010d00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010d02:	691b      	ldr	r3, [r3, #16]
 8010d04:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010d0e:	4608      	mov	r0, r1
 8010d10:	f7fc f9bb 	bl	800d08a <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8010d14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010d16:	691b      	ldr	r3, [r3, #16]
 8010d18:	330c      	adds	r3, #12
 8010d1a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	f7fc f988 	bl	800d032 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8010d22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010d24:	691b      	ldr	r3, [r3, #16]
 8010d26:	3315      	adds	r3, #21
 8010d28:	2200      	movs	r2, #0
 8010d2a:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8010d2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010d2e:	691b      	ldr	r3, [r3, #16]
 8010d30:	3310      	adds	r3, #16
 8010d32:	2100      	movs	r1, #0
 8010d34:	4618      	mov	r0, r3
 8010d36:	f7fc f97c 	bl	800d032 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8010d3a:	f107 0308 	add.w	r3, r7, #8
 8010d3e:	4618      	mov	r0, r3
 8010d40:	f7fd ff9c 	bl	800ec7c <store_xdir>
 8010d44:	4603      	mov	r3, r0
 8010d46:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8010d4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d15b      	bne.n	8010e0a <f_sync+0x230>
							res = sync_fs(fs);
 8010d52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010d54:	4618      	mov	r0, r3
 8010d56:	f7fc fc7d 	bl	800d654 <sync_fs>
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010d66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d6a:	b2da      	uxtb	r2, r3
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8010d72:	e04a      	b.n	8010e0a <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010d74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010d7a:	4619      	mov	r1, r3
 8010d7c:	4610      	mov	r0, r2
 8010d7e:	f7fc fc3b 	bl	800d5f8 <move_window>
 8010d82:	4603      	mov	r3, r0
 8010d84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 8010d88:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d13c      	bne.n	8010e0a <f_sync+0x230>
					dir = fp->dir_ptr;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010d94:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010d98:	330b      	adds	r3, #11
 8010d9a:	781a      	ldrb	r2, [r3, #0]
 8010d9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010d9e:	330b      	adds	r3, #11
 8010da0:	f042 0220 	orr.w	r2, r2, #32
 8010da4:	b2d2      	uxtb	r2, r2
 8010da6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	6818      	ldr	r0, [r3, #0]
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	689b      	ldr	r3, [r3, #8]
 8010db0:	461a      	mov	r2, r3
 8010db2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8010db4:	f7fd fbfb 	bl	800e5ae <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010db8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010dba:	f103 001c 	add.w	r0, r3, #28
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010dc4:	4613      	mov	r3, r2
 8010dc6:	4619      	mov	r1, r3
 8010dc8:	f7fc f933 	bl	800d032 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010dcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010dce:	3316      	adds	r3, #22
 8010dd0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	f7fc f92d 	bl	800d032 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010dd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010dda:	3312      	adds	r3, #18
 8010ddc:	2100      	movs	r1, #0
 8010dde:	4618      	mov	r0, r3
 8010de0:	f7fc f90c 	bl	800cffc <st_word>
					fs->wflag = 1;
 8010de4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010de6:	2201      	movs	r2, #1
 8010de8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010dea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010dec:	4618      	mov	r0, r3
 8010dee:	f7fc fc31 	bl	800d654 <sync_fs>
 8010df2:	4603      	mov	r3, r0
 8010df4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010dfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e02:	b2da      	uxtb	r2, r3
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010e0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8010e0e:	4618      	mov	r0, r3
 8010e10:	3768      	adds	r7, #104	; 0x68
 8010e12:	46bd      	mov	sp, r7
 8010e14:	bd80      	pop	{r7, pc}

08010e16 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010e16:	b580      	push	{r7, lr}
 8010e18:	b084      	sub	sp, #16
 8010e1a:	af00      	add	r7, sp, #0
 8010e1c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010e1e:	6878      	ldr	r0, [r7, #4]
 8010e20:	f7ff fedb 	bl	8010bda <f_sync>
 8010e24:	4603      	mov	r3, r0
 8010e26:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010e28:	7bfb      	ldrb	r3, [r7, #15]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d118      	bne.n	8010e60 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	f107 0208 	add.w	r2, r7, #8
 8010e34:	4611      	mov	r1, r2
 8010e36:	4618      	mov	r0, r3
 8010e38:	f7ff f9de 	bl	80101f8 <validate>
 8010e3c:	4603      	mov	r3, r0
 8010e3e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010e40:	7bfb      	ldrb	r3, [r7, #15]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d10c      	bne.n	8010e60 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	f7fc fb30 	bl	800d4b0 <dec_lock>
 8010e50:	4603      	mov	r3, r0
 8010e52:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010e54:	7bfb      	ldrb	r3, [r7, #15]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d102      	bne.n	8010e60 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e62:	4618      	mov	r0, r3
 8010e64:	3710      	adds	r7, #16
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bd80      	pop	{r7, pc}

08010e6a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010e6a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010e6e:	b0b6      	sub	sp, #216	; 0xd8
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8010e76:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010e7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010e7e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8010e82:	4619      	mov	r1, r3
 8010e84:	4610      	mov	r0, r2
 8010e86:	f7ff f9b7 	bl	80101f8 <validate>
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010e90:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d105      	bne.n	8010ea4 <f_lseek+0x3a>
 8010e98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010e9c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010ea0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 8010ea4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d111      	bne.n	8010ed0 <f_lseek+0x66>
 8010eac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010eb0:	781b      	ldrb	r3, [r3, #0]
 8010eb2:	2b04      	cmp	r3, #4
 8010eb4:	d10c      	bne.n	8010ed0 <f_lseek+0x66>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8010eb6:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8010eba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8010ec4:	4619      	mov	r1, r3
 8010ec6:	f7fc ff72 	bl	800ddae <fill_last_frag>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010ed0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d002      	beq.n	8010ede <f_lseek+0x74>
 8010ed8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8010edc:	e38c      	b.n	80115f8 <f_lseek+0x78e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010ede:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	f000 8141 	beq.w	801116c <f_lseek+0x302>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010eea:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ef2:	bf08      	it	eq
 8010ef4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8010ef8:	f040 8087 	bne.w	801100a <f_lseek+0x1a0>
			tbl = fp->cltbl;
 8010efc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010f06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010f0a:	1d1a      	adds	r2, r3, #4
 8010f0c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010f16:	2302      	movs	r3, #2
 8010f18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010f1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010f20:	689b      	ldr	r3, [r3, #8]
 8010f22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
			if (cl) {
 8010f26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d058      	beq.n	8010fe0 <f_lseek+0x176>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010f2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010f32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8010f36:	2300      	movs	r3, #0
 8010f38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010f3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010f40:	3302      	adds	r3, #2
 8010f42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
					do {
						pcl = cl; ncl++;
 8010f46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010f4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010f4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010f52:	3301      	adds	r3, #1
 8010f54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
						cl = get_fat(&fp->obj, cl);
 8010f58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010f5c:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8010f60:	4618      	mov	r0, r3
 8010f62:	f7fc fc05 	bl	800d770 <get_fat>
 8010f66:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010f6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010f6e:	2b01      	cmp	r3, #1
 8010f70:	d806      	bhi.n	8010f80 <f_lseek+0x116>
 8010f72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010f76:	2202      	movs	r2, #2
 8010f78:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010f7c:	2302      	movs	r3, #2
 8010f7e:	e33b      	b.n	80115f8 <f_lseek+0x78e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010f80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f88:	d106      	bne.n	8010f98 <f_lseek+0x12e>
 8010f8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010f8e:	2201      	movs	r2, #1
 8010f90:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010f94:	2301      	movs	r3, #1
 8010f96:	e32f      	b.n	80115f8 <f_lseek+0x78e>
					} while (cl == pcl + 1);
 8010f98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010f9c:	3301      	adds	r3, #1
 8010f9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010fa2:	429a      	cmp	r2, r3
 8010fa4:	d0cf      	beq.n	8010f46 <f_lseek+0xdc>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010fa6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010faa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010fae:	429a      	cmp	r2, r3
 8010fb0:	d80f      	bhi.n	8010fd2 <f_lseek+0x168>
						*tbl++ = ncl; *tbl++ = tcl;
 8010fb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010fb6:	1d1a      	adds	r2, r3, #4
 8010fb8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8010fbc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010fc0:	601a      	str	r2, [r3, #0]
 8010fc2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010fc6:	1d1a      	adds	r2, r3, #4
 8010fc8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8010fcc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8010fd0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010fd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010fd6:	69db      	ldr	r3, [r3, #28]
 8010fd8:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010fdc:	429a      	cmp	r2, r3
 8010fde:	d3a6      	bcc.n	8010f2e <f_lseek+0xc4>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010fe0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010fe6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010fea:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010fec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010ff0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010ff4:	429a      	cmp	r2, r3
 8010ff6:	d804      	bhi.n	8011002 <f_lseek+0x198>
				*tbl = 0;		/* Terminate table */
 8010ff8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	601a      	str	r2, [r3, #0]
 8011000:	e2f8      	b.n	80115f4 <f_lseek+0x78a>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8011002:	2311      	movs	r3, #17
 8011004:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8011008:	e2f4      	b.n	80115f4 <f_lseek+0x78a>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801100a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801100e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8011012:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8011016:	4290      	cmp	r0, r2
 8011018:	eb71 0303 	sbcs.w	r3, r1, r3
 801101c:	d205      	bcs.n	801102a <f_lseek+0x1c0>
 801101e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011022:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8011026:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			fp->fptr = ofs;				/* Set file pointer */
 801102a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 801102e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8011032:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			if (ofs) {
 8011036:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801103a:	4313      	orrs	r3, r2
 801103c:	f000 82da 	beq.w	80115f4 <f_lseek+0x78a>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011040:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8011044:	f112 3aff 	adds.w	sl, r2, #4294967295
 8011048:	f143 3bff 	adc.w	fp, r3, #4294967295
 801104c:	4652      	mov	r2, sl
 801104e:	465b      	mov	r3, fp
 8011050:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8011054:	f7fd f891 	bl	800e17a <clmt_clust>
 8011058:	4602      	mov	r2, r0
 801105a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801105e:	641a      	str	r2, [r3, #64]	; 0x40
				dsc = clust2sect(fs, fp->clust);
 8011060:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011064:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801106a:	4619      	mov	r1, r3
 801106c:	4610      	mov	r0, r2
 801106e:	f7fc fb5f 	bl	800d730 <clust2sect>
 8011072:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011076:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801107a:	2b00      	cmp	r3, #0
 801107c:	d106      	bne.n	801108c <f_lseek+0x222>
 801107e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011082:	2202      	movs	r2, #2
 8011084:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011088:	2302      	movs	r3, #2
 801108a:	e2b5      	b.n	80115f8 <f_lseek+0x78e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801108c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8011090:	1e54      	subs	r4, r2, #1
 8011092:	f143 35ff 	adc.w	r5, r3, #4294967295
 8011096:	f04f 0200 	mov.w	r2, #0
 801109a:	f04f 0300 	mov.w	r3, #0
 801109e:	0a62      	lsrs	r2, r4, #9
 80110a0:	ea42 52c5 	orr.w	r2, r2, r5, lsl #23
 80110a4:	0a6b      	lsrs	r3, r5, #9
 80110a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80110aa:	895b      	ldrh	r3, [r3, #10]
 80110ac:	3b01      	subs	r3, #1
 80110ae:	4013      	ands	r3, r2
 80110b0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80110b4:	4413      	add	r3, r2
 80110b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80110ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80110be:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80110c2:	f3c2 0808 	ubfx	r8, r2, #0, #9
 80110c6:	f04f 0900 	mov.w	r9, #0
 80110ca:	ea58 0309 	orrs.w	r3, r8, r9
 80110ce:	f000 8291 	beq.w	80115f4 <f_lseek+0x78a>
 80110d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80110d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110d8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80110dc:	429a      	cmp	r2, r3
 80110de:	f000 8289 	beq.w	80115f4 <f_lseek+0x78a>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80110e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80110e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80110ea:	b25b      	sxtb	r3, r3
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	da21      	bge.n	8011134 <f_lseek+0x2ca>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80110f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80110f4:	7858      	ldrb	r0, [r3, #1]
 80110f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80110fa:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80110fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011102:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011104:	2301      	movs	r3, #1
 8011106:	f7fb fe25 	bl	800cd54 <disk_write>
 801110a:	4603      	mov	r3, r0
 801110c:	2b00      	cmp	r3, #0
 801110e:	d006      	beq.n	801111e <f_lseek+0x2b4>
 8011110:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011114:	2201      	movs	r2, #1
 8011116:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801111a:	2301      	movs	r3, #1
 801111c:	e26c      	b.n	80115f8 <f_lseek+0x78e>
						fp->flag &= (BYTE)~FA_DIRTY;
 801111e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011122:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801112a:	b2da      	uxtb	r2, r3
 801112c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011130:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011134:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011138:	7858      	ldrb	r0, [r3, #1]
 801113a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801113e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8011142:	2301      	movs	r3, #1
 8011144:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011148:	f7fb fde4 	bl	800cd14 <disk_read>
 801114c:	4603      	mov	r3, r0
 801114e:	2b00      	cmp	r3, #0
 8011150:	d006      	beq.n	8011160 <f_lseek+0x2f6>
 8011152:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011156:	2201      	movs	r2, #1
 8011158:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801115c:	2301      	movs	r3, #1
 801115e:	e24b      	b.n	80115f8 <f_lseek+0x78e>
#endif
					fp->sect = dsc;
 8011160:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011164:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011168:	645a      	str	r2, [r3, #68]	; 0x44
 801116a:	e243      	b.n	80115f4 <f_lseek+0x78a>
#endif

	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 801116c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011170:	781b      	ldrb	r3, [r3, #0]
 8011172:	2b04      	cmp	r3, #4
 8011174:	d009      	beq.n	801118a <f_lseek+0x320>
 8011176:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801117a:	2b01      	cmp	r3, #1
 801117c:	d305      	bcc.n	801118a <f_lseek+0x320>
 801117e:	f04f 32ff 	mov.w	r2, #4294967295
 8011182:	f04f 0300 	mov.w	r3, #0
 8011186:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801118a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801118e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8011192:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8011196:	4290      	cmp	r0, r2
 8011198:	eb71 0303 	sbcs.w	r3, r1, r3
 801119c:	d20d      	bcs.n	80111ba <f_lseek+0x350>
 801119e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80111a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80111a6:	f003 0302 	and.w	r3, r3, #2
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d105      	bne.n	80111ba <f_lseek+0x350>
			ofs = fp->obj.objsize;
 80111ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80111b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80111b6:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		}
		ifptr = fp->fptr;
 80111ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80111be:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80111c2:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
		fp->fptr = nsect = 0;
 80111c6:	2300      	movs	r3, #0
 80111c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80111cc:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80111d0:	f04f 0200 	mov.w	r2, #0
 80111d4:	f04f 0300 	mov.w	r3, #0
 80111d8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		if (ofs) {
 80111dc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80111e0:	4313      	orrs	r3, r2
 80111e2:	f000 818f 	beq.w	8011504 <f_lseek+0x69a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80111e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80111ea:	895b      	ldrh	r3, [r3, #10]
 80111ec:	025b      	lsls	r3, r3, #9
 80111ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			if (ifptr > 0 &&
 80111f2:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80111f6:	4313      	orrs	r3, r2
 80111f8:	d06b      	beq.n	80112d2 <f_lseek+0x468>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80111fa:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80111fe:	1e51      	subs	r1, r2, #1
 8011200:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8011204:	f143 33ff 	adc.w	r3, r3, #4294967295
 8011208:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801120c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011210:	2200      	movs	r2, #0
 8011212:	67bb      	str	r3, [r7, #120]	; 0x78
 8011214:	67fa      	str	r2, [r7, #124]	; 0x7c
 8011216:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 801121a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801121e:	f7ef f83f 	bl	80002a0 <__aeabi_uldivmod>
 8011222:	4602      	mov	r2, r0
 8011224:	460b      	mov	r3, r1
 8011226:	4614      	mov	r4, r2
 8011228:	461d      	mov	r5, r3
 801122a:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 801122e:	1e51      	subs	r1, r2, #1
 8011230:	6739      	str	r1, [r7, #112]	; 0x70
 8011232:	f143 33ff 	adc.w	r3, r3, #4294967295
 8011236:	677b      	str	r3, [r7, #116]	; 0x74
 8011238:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801123c:	2200      	movs	r2, #0
 801123e:	66bb      	str	r3, [r7, #104]	; 0x68
 8011240:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011242:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8011246:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 801124a:	f7ef f829 	bl	80002a0 <__aeabi_uldivmod>
 801124e:	4602      	mov	r2, r0
 8011250:	460b      	mov	r3, r1
			if (ifptr > 0 &&
 8011252:	4294      	cmp	r4, r2
 8011254:	eb75 0303 	sbcs.w	r3, r5, r3
 8011258:	d33b      	bcc.n	80112d2 <f_lseek+0x468>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801125a:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 801125e:	1e51      	subs	r1, r2, #1
 8011260:	6639      	str	r1, [r7, #96]	; 0x60
 8011262:	f143 33ff 	adc.w	r3, r3, #4294967295
 8011266:	667b      	str	r3, [r7, #100]	; 0x64
 8011268:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801126c:	3b01      	subs	r3, #1
 801126e:	2200      	movs	r2, #0
 8011270:	65bb      	str	r3, [r7, #88]	; 0x58
 8011272:	65fa      	str	r2, [r7, #92]	; 0x5c
 8011274:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8011278:	460b      	mov	r3, r1
 801127a:	43db      	mvns	r3, r3
 801127c:	653b      	str	r3, [r7, #80]	; 0x50
 801127e:	4613      	mov	r3, r2
 8011280:	43db      	mvns	r3, r3
 8011282:	657b      	str	r3, [r7, #84]	; 0x54
 8011284:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8011288:	4623      	mov	r3, r4
 801128a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801128e:	4602      	mov	r2, r0
 8011290:	4013      	ands	r3, r2
 8011292:	64bb      	str	r3, [r7, #72]	; 0x48
 8011294:	462b      	mov	r3, r5
 8011296:	460a      	mov	r2, r1
 8011298:	4013      	ands	r3, r2
 801129a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801129c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80112a0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80112a4:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				ofs -= fp->fptr;
 80112a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80112ac:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80112b0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80112b4:	1a14      	subs	r4, r2, r0
 80112b6:	60bc      	str	r4, [r7, #8]
 80112b8:	eb63 0301 	sbc.w	r3, r3, r1
 80112bc:	60fb      	str	r3, [r7, #12]
 80112be:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80112c2:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
				clst = fp->clust;
 80112c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80112ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80112d0:	e031      	b.n	8011336 <f_lseek+0x4cc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80112d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80112d6:	689b      	ldr	r3, [r3, #8]
 80112d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80112dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d123      	bne.n	801132c <f_lseek+0x4c2>
					clst = create_chain(&fp->obj, 0);
 80112e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80112e8:	2100      	movs	r1, #0
 80112ea:	4618      	mov	r0, r3
 80112ec:	f7fc fe44 	bl	800df78 <create_chain>
 80112f0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80112f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80112f8:	2b01      	cmp	r3, #1
 80112fa:	d106      	bne.n	801130a <f_lseek+0x4a0>
 80112fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011300:	2202      	movs	r2, #2
 8011302:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011306:	2302      	movs	r3, #2
 8011308:	e176      	b.n	80115f8 <f_lseek+0x78e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801130a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801130e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011312:	d106      	bne.n	8011322 <f_lseek+0x4b8>
 8011314:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011318:	2201      	movs	r2, #1
 801131a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801131e:	2301      	movs	r3, #1
 8011320:	e16a      	b.n	80115f8 <f_lseek+0x78e>
					fp->obj.sclust = clst;
 8011322:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011326:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801132a:	6093      	str	r3, [r2, #8]
				}
#endif
				fp->clust = clst;
 801132c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011330:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011334:	6413      	str	r3, [r2, #64]	; 0x40
			}
			if (clst != 0) {
 8011336:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801133a:	2b00      	cmp	r3, #0
 801133c:	f000 80e2 	beq.w	8011504 <f_lseek+0x69a>
				while (ofs > bcs) {						/* Cluster following loop */
 8011340:	e090      	b.n	8011464 <f_lseek+0x5fa>
					ofs -= bcs; fp->fptr += bcs;
 8011342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011346:	2200      	movs	r2, #0
 8011348:	643b      	str	r3, [r7, #64]	; 0x40
 801134a:	647a      	str	r2, [r7, #68]	; 0x44
 801134c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8011350:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8011354:	4621      	mov	r1, r4
 8011356:	1a51      	subs	r1, r2, r1
 8011358:	6039      	str	r1, [r7, #0]
 801135a:	4629      	mov	r1, r5
 801135c:	eb63 0301 	sbc.w	r3, r3, r1
 8011360:	607b      	str	r3, [r7, #4]
 8011362:	e9d7 3400 	ldrd	r3, r4, [r7]
 8011366:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
 801136a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801136e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011372:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8011376:	2000      	movs	r0, #0
 8011378:	63b9      	str	r1, [r7, #56]	; 0x38
 801137a:	63f8      	str	r0, [r7, #60]	; 0x3c
 801137c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8011380:	4621      	mov	r1, r4
 8011382:	1851      	adds	r1, r2, r1
 8011384:	6339      	str	r1, [r7, #48]	; 0x30
 8011386:	4629      	mov	r1, r5
 8011388:	414b      	adcs	r3, r1
 801138a:	637b      	str	r3, [r7, #52]	; 0x34
 801138c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011390:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8011394:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8011398:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801139c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80113a0:	f003 0302 	and.w	r3, r3, #2
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d031      	beq.n	801140c <f_lseek+0x5a2>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 80113a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80113ac:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80113b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80113b4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80113b8:	4282      	cmp	r2, r0
 80113ba:	418b      	sbcs	r3, r1
 80113bc:	d212      	bcs.n	80113e4 <f_lseek+0x57a>
							fp->obj.objsize = fp->fptr;
 80113be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80113c2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80113c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80113ca:	e9c3 0104 	strd	r0, r1, [r3, #16]
							fp->flag |= FA_MODIFIED;
 80113ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80113d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80113d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113da:	b2db      	uxtb	r3, r3
 80113dc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80113e0:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80113e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80113e8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80113ec:	4618      	mov	r0, r3
 80113ee:	f7fc fdc3 	bl	800df78 <create_chain>
 80113f2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
						if (clst == 0) {				/* Clip file size in case of disk full */
 80113f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d10f      	bne.n	801141e <f_lseek+0x5b4>
							ofs = 0; break;
 80113fe:	f04f 0200 	mov.w	r2, #0
 8011402:	f04f 0300 	mov.w	r3, #0
 8011406:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 801140a:	e03b      	b.n	8011484 <f_lseek+0x61a>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801140c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011410:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8011414:	4618      	mov	r0, r3
 8011416:	f7fc f9ab 	bl	800d770 <get_fat>
 801141a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801141e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011426:	d106      	bne.n	8011436 <f_lseek+0x5cc>
 8011428:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801142c:	2201      	movs	r2, #1
 801142e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011432:	2301      	movs	r3, #1
 8011434:	e0e0      	b.n	80115f8 <f_lseek+0x78e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8011436:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801143a:	2b01      	cmp	r3, #1
 801143c:	d906      	bls.n	801144c <f_lseek+0x5e2>
 801143e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011442:	69da      	ldr	r2, [r3, #28]
 8011444:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011448:	4293      	cmp	r3, r2
 801144a:	d306      	bcc.n	801145a <f_lseek+0x5f0>
 801144c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011450:	2202      	movs	r2, #2
 8011452:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011456:	2302      	movs	r3, #2
 8011458:	e0ce      	b.n	80115f8 <f_lseek+0x78e>
					fp->clust = clst;
 801145a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801145e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8011462:	6413      	str	r3, [r2, #64]	; 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 8011464:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011468:	2200      	movs	r2, #0
 801146a:	62bb      	str	r3, [r7, #40]	; 0x28
 801146c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801146e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8011472:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8011476:	4621      	mov	r1, r4
 8011478:	4291      	cmp	r1, r2
 801147a:	4629      	mov	r1, r5
 801147c:	eb71 0303 	sbcs.w	r3, r1, r3
 8011480:	f4ff af5f 	bcc.w	8011342 <f_lseek+0x4d8>
				}
				fp->fptr += ofs;
 8011484:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011488:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801148c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8011490:	1884      	adds	r4, r0, r2
 8011492:	623c      	str	r4, [r7, #32]
 8011494:	eb41 0303 	adc.w	r3, r1, r3
 8011498:	627b      	str	r3, [r7, #36]	; 0x24
 801149a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801149e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80114a2:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				if (ofs % SS(fs)) {
 80114a6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80114aa:	f3c2 0308 	ubfx	r3, r2, #0, #9
 80114ae:	61bb      	str	r3, [r7, #24]
 80114b0:	2300      	movs	r3, #0
 80114b2:	61fb      	str	r3, [r7, #28]
 80114b4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80114b8:	460b      	mov	r3, r1
 80114ba:	4313      	orrs	r3, r2
 80114bc:	d022      	beq.n	8011504 <f_lseek+0x69a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80114be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80114c2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80114c6:	4618      	mov	r0, r3
 80114c8:	f7fc f932 	bl	800d730 <clust2sect>
 80114cc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80114d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d106      	bne.n	80114e6 <f_lseek+0x67c>
 80114d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80114dc:	2202      	movs	r2, #2
 80114de:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80114e2:	2302      	movs	r3, #2
 80114e4:	e088      	b.n	80115f8 <f_lseek+0x78e>
					nsect += (DWORD)(ofs / SS(fs));
 80114e6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80114ea:	f04f 0200 	mov.w	r2, #0
 80114ee:	f04f 0300 	mov.w	r3, #0
 80114f2:	0a42      	lsrs	r2, r0, #9
 80114f4:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 80114f8:	0a4b      	lsrs	r3, r1, #9
 80114fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80114fe:	4413      	add	r3, r2
 8011500:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011504:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011508:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801150c:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8011510:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8011514:	4290      	cmp	r0, r2
 8011516:	eb71 0303 	sbcs.w	r3, r1, r3
 801151a:	d212      	bcs.n	8011542 <f_lseek+0x6d8>
			fp->obj.objsize = fp->fptr;
 801151c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011520:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011524:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8011528:	e9c1 2304 	strd	r2, r3, [r1, #16]
			fp->flag |= FA_MODIFIED;
 801152c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011530:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011538:	b2da      	uxtb	r2, r3
 801153a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801153e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011542:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011546:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801154a:	f3c2 0308 	ubfx	r3, r2, #0, #9
 801154e:	613b      	str	r3, [r7, #16]
 8011550:	2300      	movs	r3, #0
 8011552:	617b      	str	r3, [r7, #20]
 8011554:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8011558:	460b      	mov	r3, r1
 801155a:	4313      	orrs	r3, r2
 801155c:	d04a      	beq.n	80115f4 <f_lseek+0x78a>
 801155e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011564:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8011568:	429a      	cmp	r2, r3
 801156a:	d043      	beq.n	80115f4 <f_lseek+0x78a>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801156c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011570:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011574:	b25b      	sxtb	r3, r3
 8011576:	2b00      	cmp	r3, #0
 8011578:	da21      	bge.n	80115be <f_lseek+0x754>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801157a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801157e:	7858      	ldrb	r0, [r3, #1]
 8011580:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011584:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8011588:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801158c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801158e:	2301      	movs	r3, #1
 8011590:	f7fb fbe0 	bl	800cd54 <disk_write>
 8011594:	4603      	mov	r3, r0
 8011596:	2b00      	cmp	r3, #0
 8011598:	d006      	beq.n	80115a8 <f_lseek+0x73e>
 801159a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801159e:	2201      	movs	r2, #1
 80115a0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80115a4:	2301      	movs	r3, #1
 80115a6:	e027      	b.n	80115f8 <f_lseek+0x78e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80115a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80115ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80115b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80115b4:	b2da      	uxtb	r2, r3
 80115b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80115ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80115be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80115c2:	7858      	ldrb	r0, [r3, #1]
 80115c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80115c8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80115cc:	2301      	movs	r3, #1
 80115ce:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80115d2:	f7fb fb9f 	bl	800cd14 <disk_read>
 80115d6:	4603      	mov	r3, r0
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d006      	beq.n	80115ea <f_lseek+0x780>
 80115dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80115e0:	2201      	movs	r2, #1
 80115e2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80115e6:	2301      	movs	r3, #1
 80115e8:	e006      	b.n	80115f8 <f_lseek+0x78e>
#endif
			fp->sect = nsect;
 80115ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80115ee:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80115f2:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}

	LEAVE_FF(fs, res);
 80115f4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80115f8:	4618      	mov	r0, r3
 80115fa:	37d8      	adds	r7, #216	; 0xd8
 80115fc:	46bd      	mov	sp, r7
 80115fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011602 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8011602:	b580      	push	{r7, lr}
 8011604:	b09a      	sub	sp, #104	; 0x68
 8011606:	af00      	add	r7, sp, #0
 8011608:	60f8      	str	r0, [r7, #12]
 801160a:	60b9      	str	r1, [r7, #8]
 801160c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 801160e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8011612:	f107 030c 	add.w	r3, r7, #12
 8011616:	2200      	movs	r2, #0
 8011618:	4618      	mov	r0, r3
 801161a:	f7fe fa91 	bl	800fb40 <find_volume>
 801161e:	4603      	mov	r3, r0
 8011620:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8011624:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011628:	2b00      	cmp	r3, #0
 801162a:	f040 80e6 	bne.w	80117fa <f_getfree+0x1f8>
		*fatfs = fs;				/* Return ptr to the fs object */
 801162e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8011634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011636:	699a      	ldr	r2, [r3, #24]
 8011638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801163a:	69db      	ldr	r3, [r3, #28]
 801163c:	3b02      	subs	r3, #2
 801163e:	429a      	cmp	r2, r3
 8011640:	d804      	bhi.n	801164c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8011642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011644:	699a      	ldr	r2, [r3, #24]
 8011646:	68bb      	ldr	r3, [r7, #8]
 8011648:	601a      	str	r2, [r3, #0]
 801164a:	e0d6      	b.n	80117fa <f_getfree+0x1f8>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 801164c:	2300      	movs	r3, #0
 801164e:	663b      	str	r3, [r7, #96]	; 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8011650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011652:	781b      	ldrb	r3, [r3, #0]
 8011654:	2b01      	cmp	r3, #1
 8011656:	d128      	bne.n	80116aa <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8011658:	2302      	movs	r3, #2
 801165a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801165c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801165e:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 8011660:	f107 0310 	add.w	r3, r7, #16
 8011664:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8011666:	4618      	mov	r0, r3
 8011668:	f7fc f882 	bl	800d770 <get_fat>
 801166c:	6478      	str	r0, [r7, #68]	; 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 801166e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011674:	d103      	bne.n	801167e <f_getfree+0x7c>
 8011676:	2301      	movs	r3, #1
 8011678:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801167c:	e0b0      	b.n	80117e0 <f_getfree+0x1de>
					if (stat == 1) { res = FR_INT_ERR; break; }
 801167e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011680:	2b01      	cmp	r3, #1
 8011682:	d103      	bne.n	801168c <f_getfree+0x8a>
 8011684:	2302      	movs	r3, #2
 8011686:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801168a:	e0a9      	b.n	80117e0 <f_getfree+0x1de>
					if (stat == 0) nfree++;
 801168c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801168e:	2b00      	cmp	r3, #0
 8011690:	d102      	bne.n	8011698 <f_getfree+0x96>
 8011692:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011694:	3301      	adds	r3, #1
 8011696:	663b      	str	r3, [r7, #96]	; 0x60
				} while (++clst < fs->n_fatent);
 8011698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801169a:	3301      	adds	r3, #1
 801169c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801169e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116a0:	69db      	ldr	r3, [r3, #28]
 80116a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80116a4:	429a      	cmp	r2, r3
 80116a6:	d3db      	bcc.n	8011660 <f_getfree+0x5e>
 80116a8:	e09a      	b.n	80117e0 <f_getfree+0x1de>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 80116aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116ac:	781b      	ldrb	r3, [r3, #0]
 80116ae:	2b04      	cmp	r3, #4
 80116b0:	d146      	bne.n	8011740 <f_getfree+0x13e>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 80116b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116b4:	69db      	ldr	r3, [r3, #28]
 80116b6:	3b02      	subs	r3, #2
 80116b8:	65fb      	str	r3, [r7, #92]	; 0x5c
					sect = fs->database;
 80116ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116be:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0;
 80116c0:	2300      	movs	r3, #0
 80116c2:	657b      	str	r3, [r7, #84]	; 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 80116c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d10d      	bne.n	80116e6 <f_getfree+0xe4>
 80116ca:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80116cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80116ce:	1c5a      	adds	r2, r3, #1
 80116d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80116d2:	4619      	mov	r1, r3
 80116d4:	f7fb ff90 	bl	800d5f8 <move_window>
 80116d8:	4603      	mov	r3, r0
 80116da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80116de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d179      	bne.n	80117da <f_getfree+0x1d8>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 80116e6:	2308      	movs	r3, #8
 80116e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80116ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80116ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116ee:	4413      	add	r3, r2
 80116f0:	3338      	adds	r3, #56	; 0x38
 80116f2:	781b      	ldrb	r3, [r3, #0]
 80116f4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80116f8:	e013      	b.n	8011722 <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 80116fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80116fe:	f003 0301 	and.w	r3, r3, #1
 8011702:	2b00      	cmp	r3, #0
 8011704:	d102      	bne.n	801170c <f_getfree+0x10a>
 8011706:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011708:	3301      	adds	r3, #1
 801170a:	663b      	str	r3, [r7, #96]	; 0x60
							bm >>= 1;
 801170c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011710:	085b      	lsrs	r3, r3, #1
 8011712:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 8011716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011718:	3b01      	subs	r3, #1
 801171a:	64bb      	str	r3, [r7, #72]	; 0x48
 801171c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801171e:	3b01      	subs	r3, #1
 8011720:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011724:	2b00      	cmp	r3, #0
 8011726:	d002      	beq.n	801172e <f_getfree+0x12c>
 8011728:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801172a:	2b00      	cmp	r3, #0
 801172c:	d1e5      	bne.n	80116fa <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 801172e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011730:	3301      	adds	r3, #1
 8011732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011736:	657b      	str	r3, [r7, #84]	; 0x54
					} while (clst);
 8011738:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801173a:	2b00      	cmp	r3, #0
 801173c:	d1c2      	bne.n	80116c4 <f_getfree+0xc2>
 801173e:	e04f      	b.n	80117e0 <f_getfree+0x1de>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8011740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011742:	69db      	ldr	r3, [r3, #28]
 8011744:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801174a:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0; p = 0;
 801174c:	2300      	movs	r3, #0
 801174e:	657b      	str	r3, [r7, #84]	; 0x54
 8011750:	2300      	movs	r3, #0
 8011752:	653b      	str	r3, [r7, #80]	; 0x50
					do {
						if (i == 0) {
 8011754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011756:	2b00      	cmp	r3, #0
 8011758:	d113      	bne.n	8011782 <f_getfree+0x180>
							res = move_window(fs, sect++);
 801175a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801175c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801175e:	1c5a      	adds	r2, r3, #1
 8011760:	65ba      	str	r2, [r7, #88]	; 0x58
 8011762:	4619      	mov	r1, r3
 8011764:	f7fb ff48 	bl	800d5f8 <move_window>
 8011768:	4603      	mov	r3, r0
 801176a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							if (res != FR_OK) break;
 801176e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011772:	2b00      	cmp	r3, #0
 8011774:	d133      	bne.n	80117de <f_getfree+0x1dc>
							p = fs->win;
 8011776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011778:	3338      	adds	r3, #56	; 0x38
 801177a:	653b      	str	r3, [r7, #80]	; 0x50
							i = SS(fs);
 801177c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011780:	657b      	str	r3, [r7, #84]	; 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 8011782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011784:	781b      	ldrb	r3, [r3, #0]
 8011786:	2b02      	cmp	r3, #2
 8011788:	d10f      	bne.n	80117aa <f_getfree+0x1a8>
							if (ld_word(p) == 0) nfree++;
 801178a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801178c:	f7fb fb20 	bl	800cdd0 <ld_word>
 8011790:	4603      	mov	r3, r0
 8011792:	2b00      	cmp	r3, #0
 8011794:	d102      	bne.n	801179c <f_getfree+0x19a>
 8011796:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011798:	3301      	adds	r3, #1
 801179a:	663b      	str	r3, [r7, #96]	; 0x60
							p += 2; i -= 2;
 801179c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801179e:	3302      	adds	r3, #2
 80117a0:	653b      	str	r3, [r7, #80]	; 0x50
 80117a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117a4:	3b02      	subs	r3, #2
 80117a6:	657b      	str	r3, [r7, #84]	; 0x54
 80117a8:	e010      	b.n	80117cc <f_getfree+0x1ca>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80117aa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80117ac:	f7fb fb28 	bl	800ce00 <ld_dword>
 80117b0:	4603      	mov	r3, r0
 80117b2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d102      	bne.n	80117c0 <f_getfree+0x1be>
 80117ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80117bc:	3301      	adds	r3, #1
 80117be:	663b      	str	r3, [r7, #96]	; 0x60
							p += 4; i -= 4;
 80117c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117c2:	3304      	adds	r3, #4
 80117c4:	653b      	str	r3, [r7, #80]	; 0x50
 80117c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117c8:	3b04      	subs	r3, #4
 80117ca:	657b      	str	r3, [r7, #84]	; 0x54
						}
					} while (--clst);
 80117cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80117ce:	3b01      	subs	r3, #1
 80117d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80117d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d1bd      	bne.n	8011754 <f_getfree+0x152>
 80117d8:	e002      	b.n	80117e0 <f_getfree+0x1de>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 80117da:	bf00      	nop
 80117dc:	e000      	b.n	80117e0 <f_getfree+0x1de>
							if (res != FR_OK) break;
 80117de:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80117e0:	68bb      	ldr	r3, [r7, #8]
 80117e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80117e4:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80117e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80117e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80117ea:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80117ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80117ee:	791a      	ldrb	r2, [r3, #4]
 80117f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80117f2:	f042 0201 	orr.w	r2, r2, #1
 80117f6:	b2d2      	uxtb	r2, r2
 80117f8:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80117fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80117fe:	4618      	mov	r0, r3
 8011800:	3768      	adds	r7, #104	; 0x68
 8011802:	46bd      	mov	sp, r7
 8011804:	bd80      	pop	{r7, pc}
	...

08011808 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011808:	b480      	push	{r7}
 801180a:	b087      	sub	sp, #28
 801180c:	af00      	add	r7, sp, #0
 801180e:	60f8      	str	r0, [r7, #12]
 8011810:	60b9      	str	r1, [r7, #8]
 8011812:	4613      	mov	r3, r2
 8011814:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011816:	2301      	movs	r3, #1
 8011818:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801181a:	2300      	movs	r3, #0
 801181c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801181e:	4b1f      	ldr	r3, [pc, #124]	; (801189c <FATFS_LinkDriverEx+0x94>)
 8011820:	7e1b      	ldrb	r3, [r3, #24]
 8011822:	b2db      	uxtb	r3, r3
 8011824:	2b03      	cmp	r3, #3
 8011826:	d831      	bhi.n	801188c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011828:	4b1c      	ldr	r3, [pc, #112]	; (801189c <FATFS_LinkDriverEx+0x94>)
 801182a:	7e1b      	ldrb	r3, [r3, #24]
 801182c:	b2db      	uxtb	r3, r3
 801182e:	461a      	mov	r2, r3
 8011830:	4b1a      	ldr	r3, [pc, #104]	; (801189c <FATFS_LinkDriverEx+0x94>)
 8011832:	2100      	movs	r1, #0
 8011834:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011836:	4b19      	ldr	r3, [pc, #100]	; (801189c <FATFS_LinkDriverEx+0x94>)
 8011838:	7e1b      	ldrb	r3, [r3, #24]
 801183a:	b2db      	uxtb	r3, r3
 801183c:	4a17      	ldr	r2, [pc, #92]	; (801189c <FATFS_LinkDriverEx+0x94>)
 801183e:	009b      	lsls	r3, r3, #2
 8011840:	4413      	add	r3, r2
 8011842:	68fa      	ldr	r2, [r7, #12]
 8011844:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011846:	4b15      	ldr	r3, [pc, #84]	; (801189c <FATFS_LinkDriverEx+0x94>)
 8011848:	7e1b      	ldrb	r3, [r3, #24]
 801184a:	b2db      	uxtb	r3, r3
 801184c:	461a      	mov	r2, r3
 801184e:	4b13      	ldr	r3, [pc, #76]	; (801189c <FATFS_LinkDriverEx+0x94>)
 8011850:	4413      	add	r3, r2
 8011852:	79fa      	ldrb	r2, [r7, #7]
 8011854:	751a      	strb	r2, [r3, #20]
    DiskNum = disk.nbr++;
 8011856:	4b11      	ldr	r3, [pc, #68]	; (801189c <FATFS_LinkDriverEx+0x94>)
 8011858:	7e1b      	ldrb	r3, [r3, #24]
 801185a:	b2db      	uxtb	r3, r3
 801185c:	1c5a      	adds	r2, r3, #1
 801185e:	b2d1      	uxtb	r1, r2
 8011860:	4a0e      	ldr	r2, [pc, #56]	; (801189c <FATFS_LinkDriverEx+0x94>)
 8011862:	7611      	strb	r1, [r2, #24]
 8011864:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011866:	7dbb      	ldrb	r3, [r7, #22]
 8011868:	3330      	adds	r3, #48	; 0x30
 801186a:	b2da      	uxtb	r2, r3
 801186c:	68bb      	ldr	r3, [r7, #8]
 801186e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011870:	68bb      	ldr	r3, [r7, #8]
 8011872:	3301      	adds	r3, #1
 8011874:	223a      	movs	r2, #58	; 0x3a
 8011876:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011878:	68bb      	ldr	r3, [r7, #8]
 801187a:	3302      	adds	r3, #2
 801187c:	222f      	movs	r2, #47	; 0x2f
 801187e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011880:	68bb      	ldr	r3, [r7, #8]
 8011882:	3303      	adds	r3, #3
 8011884:	2200      	movs	r2, #0
 8011886:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011888:	2300      	movs	r3, #0
 801188a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801188c:	7dfb      	ldrb	r3, [r7, #23]
}
 801188e:	4618      	mov	r0, r3
 8011890:	371c      	adds	r7, #28
 8011892:	46bd      	mov	sp, r7
 8011894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011898:	4770      	bx	lr
 801189a:	bf00      	nop
 801189c:	200022ec 	.word	0x200022ec

080118a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b082      	sub	sp, #8
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
 80118a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80118aa:	2200      	movs	r2, #0
 80118ac:	6839      	ldr	r1, [r7, #0]
 80118ae:	6878      	ldr	r0, [r7, #4]
 80118b0:	f7ff ffaa 	bl	8011808 <FATFS_LinkDriverEx>
 80118b4:	4603      	mov	r3, r0
}
 80118b6:	4618      	mov	r0, r3
 80118b8:	3708      	adds	r7, #8
 80118ba:	46bd      	mov	sp, r7
 80118bc:	bd80      	pop	{r7, pc}
	...

080118c0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80118c0:	b480      	push	{r7}
 80118c2:	b085      	sub	sp, #20
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	4603      	mov	r3, r0
 80118c8:	6039      	str	r1, [r7, #0]
 80118ca:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80118cc:	88fb      	ldrh	r3, [r7, #6]
 80118ce:	2b7f      	cmp	r3, #127	; 0x7f
 80118d0:	d802      	bhi.n	80118d8 <ff_convert+0x18>
		c = chr;
 80118d2:	88fb      	ldrh	r3, [r7, #6]
 80118d4:	81fb      	strh	r3, [r7, #14]
 80118d6:	e025      	b.n	8011924 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80118d8:	683b      	ldr	r3, [r7, #0]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d00b      	beq.n	80118f6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80118de:	88fb      	ldrh	r3, [r7, #6]
 80118e0:	2bff      	cmp	r3, #255	; 0xff
 80118e2:	d805      	bhi.n	80118f0 <ff_convert+0x30>
 80118e4:	88fb      	ldrh	r3, [r7, #6]
 80118e6:	3b80      	subs	r3, #128	; 0x80
 80118e8:	4a12      	ldr	r2, [pc, #72]	; (8011934 <ff_convert+0x74>)
 80118ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80118ee:	e000      	b.n	80118f2 <ff_convert+0x32>
 80118f0:	2300      	movs	r3, #0
 80118f2:	81fb      	strh	r3, [r7, #14]
 80118f4:	e016      	b.n	8011924 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80118f6:	2300      	movs	r3, #0
 80118f8:	81fb      	strh	r3, [r7, #14]
 80118fa:	e009      	b.n	8011910 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80118fc:	89fb      	ldrh	r3, [r7, #14]
 80118fe:	4a0d      	ldr	r2, [pc, #52]	; (8011934 <ff_convert+0x74>)
 8011900:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011904:	88fa      	ldrh	r2, [r7, #6]
 8011906:	429a      	cmp	r2, r3
 8011908:	d006      	beq.n	8011918 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801190a:	89fb      	ldrh	r3, [r7, #14]
 801190c:	3301      	adds	r3, #1
 801190e:	81fb      	strh	r3, [r7, #14]
 8011910:	89fb      	ldrh	r3, [r7, #14]
 8011912:	2b7f      	cmp	r3, #127	; 0x7f
 8011914:	d9f2      	bls.n	80118fc <ff_convert+0x3c>
 8011916:	e000      	b.n	801191a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8011918:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801191a:	89fb      	ldrh	r3, [r7, #14]
 801191c:	3380      	adds	r3, #128	; 0x80
 801191e:	b29b      	uxth	r3, r3
 8011920:	b2db      	uxtb	r3, r3
 8011922:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8011924:	89fb      	ldrh	r3, [r7, #14]
}
 8011926:	4618      	mov	r0, r3
 8011928:	3714      	adds	r7, #20
 801192a:	46bd      	mov	sp, r7
 801192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011930:	4770      	bx	lr
 8011932:	bf00      	nop
 8011934:	08017534 	.word	0x08017534

08011938 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8011938:	b480      	push	{r7}
 801193a:	b087      	sub	sp, #28
 801193c:	af00      	add	r7, sp, #0
 801193e:	4603      	mov	r3, r0
 8011940:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8011942:	88fb      	ldrh	r3, [r7, #6]
 8011944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011948:	d201      	bcs.n	801194e <ff_wtoupper+0x16>
 801194a:	4b3e      	ldr	r3, [pc, #248]	; (8011a44 <ff_wtoupper+0x10c>)
 801194c:	e000      	b.n	8011950 <ff_wtoupper+0x18>
 801194e:	4b3e      	ldr	r3, [pc, #248]	; (8011a48 <ff_wtoupper+0x110>)
 8011950:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8011952:	697b      	ldr	r3, [r7, #20]
 8011954:	1c9a      	adds	r2, r3, #2
 8011956:	617a      	str	r2, [r7, #20]
 8011958:	881b      	ldrh	r3, [r3, #0]
 801195a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801195c:	8a7b      	ldrh	r3, [r7, #18]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d068      	beq.n	8011a34 <ff_wtoupper+0xfc>
 8011962:	88fa      	ldrh	r2, [r7, #6]
 8011964:	8a7b      	ldrh	r3, [r7, #18]
 8011966:	429a      	cmp	r2, r3
 8011968:	d364      	bcc.n	8011a34 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801196a:	697b      	ldr	r3, [r7, #20]
 801196c:	1c9a      	adds	r2, r3, #2
 801196e:	617a      	str	r2, [r7, #20]
 8011970:	881b      	ldrh	r3, [r3, #0]
 8011972:	823b      	strh	r3, [r7, #16]
 8011974:	8a3b      	ldrh	r3, [r7, #16]
 8011976:	0a1b      	lsrs	r3, r3, #8
 8011978:	81fb      	strh	r3, [r7, #14]
 801197a:	8a3b      	ldrh	r3, [r7, #16]
 801197c:	b2db      	uxtb	r3, r3
 801197e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8011980:	88fa      	ldrh	r2, [r7, #6]
 8011982:	8a79      	ldrh	r1, [r7, #18]
 8011984:	8a3b      	ldrh	r3, [r7, #16]
 8011986:	440b      	add	r3, r1
 8011988:	429a      	cmp	r2, r3
 801198a:	da49      	bge.n	8011a20 <ff_wtoupper+0xe8>
			switch (cmd) {
 801198c:	89fb      	ldrh	r3, [r7, #14]
 801198e:	2b08      	cmp	r3, #8
 8011990:	d84f      	bhi.n	8011a32 <ff_wtoupper+0xfa>
 8011992:	a201      	add	r2, pc, #4	; (adr r2, 8011998 <ff_wtoupper+0x60>)
 8011994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011998:	080119bd 	.word	0x080119bd
 801199c:	080119cf 	.word	0x080119cf
 80119a0:	080119e5 	.word	0x080119e5
 80119a4:	080119ed 	.word	0x080119ed
 80119a8:	080119f5 	.word	0x080119f5
 80119ac:	080119fd 	.word	0x080119fd
 80119b0:	08011a05 	.word	0x08011a05
 80119b4:	08011a0d 	.word	0x08011a0d
 80119b8:	08011a15 	.word	0x08011a15
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80119bc:	88fa      	ldrh	r2, [r7, #6]
 80119be:	8a7b      	ldrh	r3, [r7, #18]
 80119c0:	1ad3      	subs	r3, r2, r3
 80119c2:	005b      	lsls	r3, r3, #1
 80119c4:	697a      	ldr	r2, [r7, #20]
 80119c6:	4413      	add	r3, r2
 80119c8:	881b      	ldrh	r3, [r3, #0]
 80119ca:	80fb      	strh	r3, [r7, #6]
 80119cc:	e027      	b.n	8011a1e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80119ce:	88fa      	ldrh	r2, [r7, #6]
 80119d0:	8a7b      	ldrh	r3, [r7, #18]
 80119d2:	1ad3      	subs	r3, r2, r3
 80119d4:	b29b      	uxth	r3, r3
 80119d6:	f003 0301 	and.w	r3, r3, #1
 80119da:	b29b      	uxth	r3, r3
 80119dc:	88fa      	ldrh	r2, [r7, #6]
 80119de:	1ad3      	subs	r3, r2, r3
 80119e0:	80fb      	strh	r3, [r7, #6]
 80119e2:	e01c      	b.n	8011a1e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80119e4:	88fb      	ldrh	r3, [r7, #6]
 80119e6:	3b10      	subs	r3, #16
 80119e8:	80fb      	strh	r3, [r7, #6]
 80119ea:	e018      	b.n	8011a1e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80119ec:	88fb      	ldrh	r3, [r7, #6]
 80119ee:	3b20      	subs	r3, #32
 80119f0:	80fb      	strh	r3, [r7, #6]
 80119f2:	e014      	b.n	8011a1e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80119f4:	88fb      	ldrh	r3, [r7, #6]
 80119f6:	3b30      	subs	r3, #48	; 0x30
 80119f8:	80fb      	strh	r3, [r7, #6]
 80119fa:	e010      	b.n	8011a1e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80119fc:	88fb      	ldrh	r3, [r7, #6]
 80119fe:	3b1a      	subs	r3, #26
 8011a00:	80fb      	strh	r3, [r7, #6]
 8011a02:	e00c      	b.n	8011a1e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8011a04:	88fb      	ldrh	r3, [r7, #6]
 8011a06:	3308      	adds	r3, #8
 8011a08:	80fb      	strh	r3, [r7, #6]
 8011a0a:	e008      	b.n	8011a1e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8011a0c:	88fb      	ldrh	r3, [r7, #6]
 8011a0e:	3b50      	subs	r3, #80	; 0x50
 8011a10:	80fb      	strh	r3, [r7, #6]
 8011a12:	e004      	b.n	8011a1e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8011a14:	88fb      	ldrh	r3, [r7, #6]
 8011a16:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8011a1a:	80fb      	strh	r3, [r7, #6]
 8011a1c:	bf00      	nop
			}
			break;
 8011a1e:	e008      	b.n	8011a32 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8011a20:	89fb      	ldrh	r3, [r7, #14]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d195      	bne.n	8011952 <ff_wtoupper+0x1a>
 8011a26:	8a3b      	ldrh	r3, [r7, #16]
 8011a28:	005b      	lsls	r3, r3, #1
 8011a2a:	697a      	ldr	r2, [r7, #20]
 8011a2c:	4413      	add	r3, r2
 8011a2e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8011a30:	e78f      	b.n	8011952 <ff_wtoupper+0x1a>
			break;
 8011a32:	bf00      	nop
	}

	return chr;
 8011a34:	88fb      	ldrh	r3, [r7, #6]
}
 8011a36:	4618      	mov	r0, r3
 8011a38:	371c      	adds	r7, #28
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a40:	4770      	bx	lr
 8011a42:	bf00      	nop
 8011a44:	08017634 	.word	0x08017634
 8011a48:	08017828 	.word	0x08017828

08011a4c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011a4c:	b480      	push	{r7}
 8011a4e:	b085      	sub	sp, #20
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	4603      	mov	r3, r0
 8011a54:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011a56:	2300      	movs	r3, #0
 8011a58:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011a5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011a5e:	2b84      	cmp	r3, #132	; 0x84
 8011a60:	d005      	beq.n	8011a6e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011a62:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	4413      	add	r3, r2
 8011a6a:	3303      	adds	r3, #3
 8011a6c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8011a6e:	68fb      	ldr	r3, [r7, #12]
}
 8011a70:	4618      	mov	r0, r3
 8011a72:	3714      	adds	r7, #20
 8011a74:	46bd      	mov	sp, r7
 8011a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a7a:	4770      	bx	lr

08011a7c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8011a7c:	b480      	push	{r7}
 8011a7e:	b083      	sub	sp, #12
 8011a80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011a82:	f3ef 8305 	mrs	r3, IPSR
 8011a86:	607b      	str	r3, [r7, #4]
  return(result);
 8011a88:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	bf14      	ite	ne
 8011a8e:	2301      	movne	r3, #1
 8011a90:	2300      	moveq	r3, #0
 8011a92:	b2db      	uxtb	r3, r3
}
 8011a94:	4618      	mov	r0, r3
 8011a96:	370c      	adds	r7, #12
 8011a98:	46bd      	mov	sp, r7
 8011a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a9e:	4770      	bx	lr

08011aa0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011aa4:	f001 f916 	bl	8012cd4 <vTaskStartScheduler>
  
  return osOK;
 8011aa8:	2300      	movs	r3, #0
}
 8011aaa:	4618      	mov	r0, r3
 8011aac:	bd80      	pop	{r7, pc}

08011aae <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011aae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ab0:	b089      	sub	sp, #36	; 0x24
 8011ab2:	af04      	add	r7, sp, #16
 8011ab4:	6078      	str	r0, [r7, #4]
 8011ab6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	695b      	ldr	r3, [r3, #20]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d020      	beq.n	8011b02 <osThreadCreate+0x54>
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	699b      	ldr	r3, [r3, #24]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d01c      	beq.n	8011b02 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	685c      	ldr	r4, [r3, #4]
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	681d      	ldr	r5, [r3, #0]
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	691e      	ldr	r6, [r3, #16]
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011ada:	4618      	mov	r0, r3
 8011adc:	f7ff ffb6 	bl	8011a4c <makeFreeRtosPriority>
 8011ae0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	695b      	ldr	r3, [r3, #20]
 8011ae6:	687a      	ldr	r2, [r7, #4]
 8011ae8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011aea:	9202      	str	r2, [sp, #8]
 8011aec:	9301      	str	r3, [sp, #4]
 8011aee:	9100      	str	r1, [sp, #0]
 8011af0:	683b      	ldr	r3, [r7, #0]
 8011af2:	4632      	mov	r2, r6
 8011af4:	4629      	mov	r1, r5
 8011af6:	4620      	mov	r0, r4
 8011af8:	f000 ff0e 	bl	8012918 <xTaskCreateStatic>
 8011afc:	4603      	mov	r3, r0
 8011afe:	60fb      	str	r3, [r7, #12]
 8011b00:	e01c      	b.n	8011b3c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	685c      	ldr	r4, [r3, #4]
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011b0e:	b29e      	uxth	r6, r3
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011b16:	4618      	mov	r0, r3
 8011b18:	f7ff ff98 	bl	8011a4c <makeFreeRtosPriority>
 8011b1c:	4602      	mov	r2, r0
 8011b1e:	f107 030c 	add.w	r3, r7, #12
 8011b22:	9301      	str	r3, [sp, #4]
 8011b24:	9200      	str	r2, [sp, #0]
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	4632      	mov	r2, r6
 8011b2a:	4629      	mov	r1, r5
 8011b2c:	4620      	mov	r0, r4
 8011b2e:	f000 ff50 	bl	80129d2 <xTaskCreate>
 8011b32:	4603      	mov	r3, r0
 8011b34:	2b01      	cmp	r3, #1
 8011b36:	d001      	beq.n	8011b3c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8011b38:	2300      	movs	r3, #0
 8011b3a:	e000      	b.n	8011b3e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8011b3c:	68fb      	ldr	r3, [r7, #12]
}
 8011b3e:	4618      	mov	r0, r3
 8011b40:	3714      	adds	r7, #20
 8011b42:	46bd      	mov	sp, r7
 8011b44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011b46 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8011b46:	b580      	push	{r7, lr}
 8011b48:	b084      	sub	sp, #16
 8011b4a:	af00      	add	r7, sp, #0
 8011b4c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d001      	beq.n	8011b5c <osDelay+0x16>
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	e000      	b.n	8011b5e <osDelay+0x18>
 8011b5c:	2301      	movs	r3, #1
 8011b5e:	4618      	mov	r0, r3
 8011b60:	f001 f884 	bl	8012c6c <vTaskDelay>
  
  return osOK;
 8011b64:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011b66:	4618      	mov	r0, r3
 8011b68:	3710      	adds	r7, #16
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	bd80      	pop	{r7, pc}

08011b6e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8011b6e:	b590      	push	{r4, r7, lr}
 8011b70:	b085      	sub	sp, #20
 8011b72:	af02      	add	r7, sp, #8
 8011b74:	6078      	str	r0, [r7, #4]
 8011b76:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	689b      	ldr	r3, [r3, #8]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d011      	beq.n	8011ba4 <osMessageCreate+0x36>
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	68db      	ldr	r3, [r3, #12]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d00d      	beq.n	8011ba4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	6818      	ldr	r0, [r3, #0]
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	6859      	ldr	r1, [r3, #4]
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	689a      	ldr	r2, [r3, #8]
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	68db      	ldr	r3, [r3, #12]
 8011b98:	2400      	movs	r4, #0
 8011b9a:	9400      	str	r4, [sp, #0]
 8011b9c:	f000 f9e0 	bl	8011f60 <xQueueGenericCreateStatic>
 8011ba0:	4603      	mov	r3, r0
 8011ba2:	e008      	b.n	8011bb6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	6818      	ldr	r0, [r3, #0]
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	685b      	ldr	r3, [r3, #4]
 8011bac:	2200      	movs	r2, #0
 8011bae:	4619      	mov	r1, r3
 8011bb0:	f000 fa4e 	bl	8012050 <xQueueGenericCreate>
 8011bb4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	370c      	adds	r7, #12
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	bd90      	pop	{r4, r7, pc}
	...

08011bc0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b086      	sub	sp, #24
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	60f8      	str	r0, [r7, #12]
 8011bc8:	60b9      	str	r1, [r7, #8]
 8011bca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8011bcc:	2300      	movs	r3, #0
 8011bce:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8011bd4:	697b      	ldr	r3, [r7, #20]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d101      	bne.n	8011bde <osMessagePut+0x1e>
    ticks = 1;
 8011bda:	2301      	movs	r3, #1
 8011bdc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8011bde:	f7ff ff4d 	bl	8011a7c <inHandlerMode>
 8011be2:	4603      	mov	r3, r0
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d018      	beq.n	8011c1a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8011be8:	f107 0210 	add.w	r2, r7, #16
 8011bec:	f107 0108 	add.w	r1, r7, #8
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	68f8      	ldr	r0, [r7, #12]
 8011bf4:	f000 fb84 	bl	8012300 <xQueueGenericSendFromISR>
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	2b01      	cmp	r3, #1
 8011bfc:	d001      	beq.n	8011c02 <osMessagePut+0x42>
      return osErrorOS;
 8011bfe:	23ff      	movs	r3, #255	; 0xff
 8011c00:	e018      	b.n	8011c34 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011c02:	693b      	ldr	r3, [r7, #16]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d014      	beq.n	8011c32 <osMessagePut+0x72>
 8011c08:	4b0c      	ldr	r3, [pc, #48]	; (8011c3c <osMessagePut+0x7c>)
 8011c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c0e:	601a      	str	r2, [r3, #0]
 8011c10:	f3bf 8f4f 	dsb	sy
 8011c14:	f3bf 8f6f 	isb	sy
 8011c18:	e00b      	b.n	8011c32 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8011c1a:	f107 0108 	add.w	r1, r7, #8
 8011c1e:	2300      	movs	r3, #0
 8011c20:	697a      	ldr	r2, [r7, #20]
 8011c22:	68f8      	ldr	r0, [r7, #12]
 8011c24:	f000 fa6e 	bl	8012104 <xQueueGenericSend>
 8011c28:	4603      	mov	r3, r0
 8011c2a:	2b01      	cmp	r3, #1
 8011c2c:	d001      	beq.n	8011c32 <osMessagePut+0x72>
      return osErrorOS;
 8011c2e:	23ff      	movs	r3, #255	; 0xff
 8011c30:	e000      	b.n	8011c34 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8011c32:	2300      	movs	r3, #0
}
 8011c34:	4618      	mov	r0, r3
 8011c36:	3718      	adds	r7, #24
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	bd80      	pop	{r7, pc}
 8011c3c:	e000ed04 	.word	0xe000ed04

08011c40 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8011c40:	b590      	push	{r4, r7, lr}
 8011c42:	b08b      	sub	sp, #44	; 0x2c
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	60f8      	str	r0, [r7, #12]
 8011c48:	60b9      	str	r1, [r7, #8]
 8011c4a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8011c4c:	68bb      	ldr	r3, [r7, #8]
 8011c4e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8011c50:	2300      	movs	r3, #0
 8011c52:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8011c54:	68bb      	ldr	r3, [r7, #8]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d10a      	bne.n	8011c70 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8011c5a:	2380      	movs	r3, #128	; 0x80
 8011c5c:	617b      	str	r3, [r7, #20]
    return event;
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	461c      	mov	r4, r3
 8011c62:	f107 0314 	add.w	r3, r7, #20
 8011c66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011c6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011c6e:	e054      	b.n	8011d1a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8011c70:	2300      	movs	r3, #0
 8011c72:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8011c74:	2300      	movs	r3, #0
 8011c76:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c7e:	d103      	bne.n	8011c88 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8011c80:	f04f 33ff 	mov.w	r3, #4294967295
 8011c84:	627b      	str	r3, [r7, #36]	; 0x24
 8011c86:	e009      	b.n	8011c9c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d006      	beq.n	8011c9c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8011c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d101      	bne.n	8011c9c <osMessageGet+0x5c>
      ticks = 1;
 8011c98:	2301      	movs	r3, #1
 8011c9a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8011c9c:	f7ff feee 	bl	8011a7c <inHandlerMode>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d01c      	beq.n	8011ce0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8011ca6:	f107 0220 	add.w	r2, r7, #32
 8011caa:	f107 0314 	add.w	r3, r7, #20
 8011cae:	3304      	adds	r3, #4
 8011cb0:	4619      	mov	r1, r3
 8011cb2:	68b8      	ldr	r0, [r7, #8]
 8011cb4:	f000 fca0 	bl	80125f8 <xQueueReceiveFromISR>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	2b01      	cmp	r3, #1
 8011cbc:	d102      	bne.n	8011cc4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8011cbe:	2310      	movs	r3, #16
 8011cc0:	617b      	str	r3, [r7, #20]
 8011cc2:	e001      	b.n	8011cc8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011cc8:	6a3b      	ldr	r3, [r7, #32]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d01d      	beq.n	8011d0a <osMessageGet+0xca>
 8011cce:	4b15      	ldr	r3, [pc, #84]	; (8011d24 <osMessageGet+0xe4>)
 8011cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cd4:	601a      	str	r2, [r3, #0]
 8011cd6:	f3bf 8f4f 	dsb	sy
 8011cda:	f3bf 8f6f 	isb	sy
 8011cde:	e014      	b.n	8011d0a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8011ce0:	f107 0314 	add.w	r3, r7, #20
 8011ce4:	3304      	adds	r3, #4
 8011ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ce8:	4619      	mov	r1, r3
 8011cea:	68b8      	ldr	r0, [r7, #8]
 8011cec:	f000 fba4 	bl	8012438 <xQueueReceive>
 8011cf0:	4603      	mov	r3, r0
 8011cf2:	2b01      	cmp	r3, #1
 8011cf4:	d102      	bne.n	8011cfc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8011cf6:	2310      	movs	r3, #16
 8011cf8:	617b      	str	r3, [r7, #20]
 8011cfa:	e006      	b.n	8011d0a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8011cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d101      	bne.n	8011d06 <osMessageGet+0xc6>
 8011d02:	2300      	movs	r3, #0
 8011d04:	e000      	b.n	8011d08 <osMessageGet+0xc8>
 8011d06:	2340      	movs	r3, #64	; 0x40
 8011d08:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	461c      	mov	r4, r3
 8011d0e:	f107 0314 	add.w	r3, r7, #20
 8011d12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011d16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011d1a:	68f8      	ldr	r0, [r7, #12]
 8011d1c:	372c      	adds	r7, #44	; 0x2c
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	bd90      	pop	{r4, r7, pc}
 8011d22:	bf00      	nop
 8011d24:	e000ed04 	.word	0xe000ed04

08011d28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011d28:	b480      	push	{r7}
 8011d2a:	b083      	sub	sp, #12
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	f103 0208 	add.w	r2, r3, #8
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8011d40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	f103 0208 	add.w	r2, r3, #8
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	f103 0208 	add.w	r2, r3, #8
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	2200      	movs	r2, #0
 8011d5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011d5c:	bf00      	nop
 8011d5e:	370c      	adds	r7, #12
 8011d60:	46bd      	mov	sp, r7
 8011d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d66:	4770      	bx	lr

08011d68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011d68:	b480      	push	{r7}
 8011d6a:	b083      	sub	sp, #12
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	2200      	movs	r2, #0
 8011d74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011d76:	bf00      	nop
 8011d78:	370c      	adds	r7, #12
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d80:	4770      	bx	lr

08011d82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011d82:	b480      	push	{r7}
 8011d84:	b085      	sub	sp, #20
 8011d86:	af00      	add	r7, sp, #0
 8011d88:	6078      	str	r0, [r7, #4]
 8011d8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	685b      	ldr	r3, [r3, #4]
 8011d90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011d92:	683b      	ldr	r3, [r7, #0]
 8011d94:	68fa      	ldr	r2, [r7, #12]
 8011d96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	689a      	ldr	r2, [r3, #8]
 8011d9c:	683b      	ldr	r3, [r7, #0]
 8011d9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	689b      	ldr	r3, [r3, #8]
 8011da4:	683a      	ldr	r2, [r7, #0]
 8011da6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	683a      	ldr	r2, [r7, #0]
 8011dac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011dae:	683b      	ldr	r3, [r7, #0]
 8011db0:	687a      	ldr	r2, [r7, #4]
 8011db2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	1c5a      	adds	r2, r3, #1
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	601a      	str	r2, [r3, #0]
}
 8011dbe:	bf00      	nop
 8011dc0:	3714      	adds	r7, #20
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc8:	4770      	bx	lr

08011dca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011dca:	b480      	push	{r7}
 8011dcc:	b085      	sub	sp, #20
 8011dce:	af00      	add	r7, sp, #0
 8011dd0:	6078      	str	r0, [r7, #4]
 8011dd2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011dd4:	683b      	ldr	r3, [r7, #0]
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011dda:	68bb      	ldr	r3, [r7, #8]
 8011ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011de0:	d103      	bne.n	8011dea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	691b      	ldr	r3, [r3, #16]
 8011de6:	60fb      	str	r3, [r7, #12]
 8011de8:	e00c      	b.n	8011e04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	3308      	adds	r3, #8
 8011dee:	60fb      	str	r3, [r7, #12]
 8011df0:	e002      	b.n	8011df8 <vListInsert+0x2e>
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	685b      	ldr	r3, [r3, #4]
 8011df6:	60fb      	str	r3, [r7, #12]
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	685b      	ldr	r3, [r3, #4]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	68ba      	ldr	r2, [r7, #8]
 8011e00:	429a      	cmp	r2, r3
 8011e02:	d2f6      	bcs.n	8011df2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	685a      	ldr	r2, [r3, #4]
 8011e08:	683b      	ldr	r3, [r7, #0]
 8011e0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011e0c:	683b      	ldr	r3, [r7, #0]
 8011e0e:	685b      	ldr	r3, [r3, #4]
 8011e10:	683a      	ldr	r2, [r7, #0]
 8011e12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011e14:	683b      	ldr	r3, [r7, #0]
 8011e16:	68fa      	ldr	r2, [r7, #12]
 8011e18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	683a      	ldr	r2, [r7, #0]
 8011e1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011e20:	683b      	ldr	r3, [r7, #0]
 8011e22:	687a      	ldr	r2, [r7, #4]
 8011e24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	1c5a      	adds	r2, r3, #1
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	601a      	str	r2, [r3, #0]
}
 8011e30:	bf00      	nop
 8011e32:	3714      	adds	r7, #20
 8011e34:	46bd      	mov	sp, r7
 8011e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3a:	4770      	bx	lr

08011e3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011e3c:	b480      	push	{r7}
 8011e3e:	b085      	sub	sp, #20
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	691b      	ldr	r3, [r3, #16]
 8011e48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	685b      	ldr	r3, [r3, #4]
 8011e4e:	687a      	ldr	r2, [r7, #4]
 8011e50:	6892      	ldr	r2, [r2, #8]
 8011e52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	689b      	ldr	r3, [r3, #8]
 8011e58:	687a      	ldr	r2, [r7, #4]
 8011e5a:	6852      	ldr	r2, [r2, #4]
 8011e5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	685b      	ldr	r3, [r3, #4]
 8011e62:	687a      	ldr	r2, [r7, #4]
 8011e64:	429a      	cmp	r2, r3
 8011e66:	d103      	bne.n	8011e70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	689a      	ldr	r2, [r3, #8]
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	2200      	movs	r2, #0
 8011e74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	1e5a      	subs	r2, r3, #1
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	681b      	ldr	r3, [r3, #0]
}
 8011e84:	4618      	mov	r0, r3
 8011e86:	3714      	adds	r7, #20
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e8e:	4770      	bx	lr

08011e90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011e90:	b580      	push	{r7, lr}
 8011e92:	b084      	sub	sp, #16
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	6078      	str	r0, [r7, #4]
 8011e98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d10a      	bne.n	8011eba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ea8:	f383 8811 	msr	BASEPRI, r3
 8011eac:	f3bf 8f6f 	isb	sy
 8011eb0:	f3bf 8f4f 	dsb	sy
 8011eb4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011eb6:	bf00      	nop
 8011eb8:	e7fe      	b.n	8011eb8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8011eba:	f001 fd63 	bl	8013984 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	681a      	ldr	r2, [r3, #0]
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ec6:	68f9      	ldr	r1, [r7, #12]
 8011ec8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011eca:	fb01 f303 	mul.w	r3, r1, r3
 8011ece:	441a      	add	r2, r3
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	681a      	ldr	r2, [r3, #0]
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	681a      	ldr	r2, [r3, #0]
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011eea:	3b01      	subs	r3, #1
 8011eec:	68f9      	ldr	r1, [r7, #12]
 8011eee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011ef0:	fb01 f303 	mul.w	r3, r1, r3
 8011ef4:	441a      	add	r2, r3
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	22ff      	movs	r2, #255	; 0xff
 8011efe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	22ff      	movs	r2, #255	; 0xff
 8011f06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011f0a:	683b      	ldr	r3, [r7, #0]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d114      	bne.n	8011f3a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	691b      	ldr	r3, [r3, #16]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d01a      	beq.n	8011f4e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	3310      	adds	r3, #16
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	f001 f93b 	bl	8013198 <xTaskRemoveFromEventList>
 8011f22:	4603      	mov	r3, r0
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d012      	beq.n	8011f4e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011f28:	4b0c      	ldr	r3, [pc, #48]	; (8011f5c <xQueueGenericReset+0xcc>)
 8011f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f2e:	601a      	str	r2, [r3, #0]
 8011f30:	f3bf 8f4f 	dsb	sy
 8011f34:	f3bf 8f6f 	isb	sy
 8011f38:	e009      	b.n	8011f4e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	3310      	adds	r3, #16
 8011f3e:	4618      	mov	r0, r3
 8011f40:	f7ff fef2 	bl	8011d28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	3324      	adds	r3, #36	; 0x24
 8011f48:	4618      	mov	r0, r3
 8011f4a:	f7ff feed 	bl	8011d28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011f4e:	f001 fd49 	bl	80139e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011f52:	2301      	movs	r3, #1
}
 8011f54:	4618      	mov	r0, r3
 8011f56:	3710      	adds	r7, #16
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	bd80      	pop	{r7, pc}
 8011f5c:	e000ed04 	.word	0xe000ed04

08011f60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b08e      	sub	sp, #56	; 0x38
 8011f64:	af02      	add	r7, sp, #8
 8011f66:	60f8      	str	r0, [r7, #12]
 8011f68:	60b9      	str	r1, [r7, #8]
 8011f6a:	607a      	str	r2, [r7, #4]
 8011f6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d10a      	bne.n	8011f8a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8011f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f78:	f383 8811 	msr	BASEPRI, r3
 8011f7c:	f3bf 8f6f 	isb	sy
 8011f80:	f3bf 8f4f 	dsb	sy
 8011f84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011f86:	bf00      	nop
 8011f88:	e7fe      	b.n	8011f88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011f8a:	683b      	ldr	r3, [r7, #0]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d10a      	bne.n	8011fa6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8011f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f94:	f383 8811 	msr	BASEPRI, r3
 8011f98:	f3bf 8f6f 	isb	sy
 8011f9c:	f3bf 8f4f 	dsb	sy
 8011fa0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011fa2:	bf00      	nop
 8011fa4:	e7fe      	b.n	8011fa4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d002      	beq.n	8011fb2 <xQueueGenericCreateStatic+0x52>
 8011fac:	68bb      	ldr	r3, [r7, #8]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d001      	beq.n	8011fb6 <xQueueGenericCreateStatic+0x56>
 8011fb2:	2301      	movs	r3, #1
 8011fb4:	e000      	b.n	8011fb8 <xQueueGenericCreateStatic+0x58>
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d10a      	bne.n	8011fd2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8011fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fc0:	f383 8811 	msr	BASEPRI, r3
 8011fc4:	f3bf 8f6f 	isb	sy
 8011fc8:	f3bf 8f4f 	dsb	sy
 8011fcc:	623b      	str	r3, [r7, #32]
}
 8011fce:	bf00      	nop
 8011fd0:	e7fe      	b.n	8011fd0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d102      	bne.n	8011fde <xQueueGenericCreateStatic+0x7e>
 8011fd8:	68bb      	ldr	r3, [r7, #8]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d101      	bne.n	8011fe2 <xQueueGenericCreateStatic+0x82>
 8011fde:	2301      	movs	r3, #1
 8011fe0:	e000      	b.n	8011fe4 <xQueueGenericCreateStatic+0x84>
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d10a      	bne.n	8011ffe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8011fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fec:	f383 8811 	msr	BASEPRI, r3
 8011ff0:	f3bf 8f6f 	isb	sy
 8011ff4:	f3bf 8f4f 	dsb	sy
 8011ff8:	61fb      	str	r3, [r7, #28]
}
 8011ffa:	bf00      	nop
 8011ffc:	e7fe      	b.n	8011ffc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011ffe:	2348      	movs	r3, #72	; 0x48
 8012000:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012002:	697b      	ldr	r3, [r7, #20]
 8012004:	2b48      	cmp	r3, #72	; 0x48
 8012006:	d00a      	beq.n	801201e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8012008:	f04f 0350 	mov.w	r3, #80	; 0x50
 801200c:	f383 8811 	msr	BASEPRI, r3
 8012010:	f3bf 8f6f 	isb	sy
 8012014:	f3bf 8f4f 	dsb	sy
 8012018:	61bb      	str	r3, [r7, #24]
}
 801201a:	bf00      	nop
 801201c:	e7fe      	b.n	801201c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801201e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012020:	683b      	ldr	r3, [r7, #0]
 8012022:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012026:	2b00      	cmp	r3, #0
 8012028:	d00d      	beq.n	8012046 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801202a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801202c:	2201      	movs	r2, #1
 801202e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012032:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012038:	9300      	str	r3, [sp, #0]
 801203a:	4613      	mov	r3, r2
 801203c:	687a      	ldr	r2, [r7, #4]
 801203e:	68b9      	ldr	r1, [r7, #8]
 8012040:	68f8      	ldr	r0, [r7, #12]
 8012042:	f000 f83f 	bl	80120c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012048:	4618      	mov	r0, r3
 801204a:	3730      	adds	r7, #48	; 0x30
 801204c:	46bd      	mov	sp, r7
 801204e:	bd80      	pop	{r7, pc}

08012050 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012050:	b580      	push	{r7, lr}
 8012052:	b08a      	sub	sp, #40	; 0x28
 8012054:	af02      	add	r7, sp, #8
 8012056:	60f8      	str	r0, [r7, #12]
 8012058:	60b9      	str	r1, [r7, #8]
 801205a:	4613      	mov	r3, r2
 801205c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d10a      	bne.n	801207a <xQueueGenericCreate+0x2a>
	__asm volatile
 8012064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012068:	f383 8811 	msr	BASEPRI, r3
 801206c:	f3bf 8f6f 	isb	sy
 8012070:	f3bf 8f4f 	dsb	sy
 8012074:	613b      	str	r3, [r7, #16]
}
 8012076:	bf00      	nop
 8012078:	e7fe      	b.n	8012078 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	68ba      	ldr	r2, [r7, #8]
 801207e:	fb02 f303 	mul.w	r3, r2, r3
 8012082:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012084:	69fb      	ldr	r3, [r7, #28]
 8012086:	3348      	adds	r3, #72	; 0x48
 8012088:	4618      	mov	r0, r3
 801208a:	f001 fd9d 	bl	8013bc8 <pvPortMalloc>
 801208e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012090:	69bb      	ldr	r3, [r7, #24]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d011      	beq.n	80120ba <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012096:	69bb      	ldr	r3, [r7, #24]
 8012098:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801209a:	697b      	ldr	r3, [r7, #20]
 801209c:	3348      	adds	r3, #72	; 0x48
 801209e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80120a0:	69bb      	ldr	r3, [r7, #24]
 80120a2:	2200      	movs	r2, #0
 80120a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80120a8:	79fa      	ldrb	r2, [r7, #7]
 80120aa:	69bb      	ldr	r3, [r7, #24]
 80120ac:	9300      	str	r3, [sp, #0]
 80120ae:	4613      	mov	r3, r2
 80120b0:	697a      	ldr	r2, [r7, #20]
 80120b2:	68b9      	ldr	r1, [r7, #8]
 80120b4:	68f8      	ldr	r0, [r7, #12]
 80120b6:	f000 f805 	bl	80120c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80120ba:	69bb      	ldr	r3, [r7, #24]
	}
 80120bc:	4618      	mov	r0, r3
 80120be:	3720      	adds	r7, #32
 80120c0:	46bd      	mov	sp, r7
 80120c2:	bd80      	pop	{r7, pc}

080120c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b084      	sub	sp, #16
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	60f8      	str	r0, [r7, #12]
 80120cc:	60b9      	str	r1, [r7, #8]
 80120ce:	607a      	str	r2, [r7, #4]
 80120d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80120d2:	68bb      	ldr	r3, [r7, #8]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d103      	bne.n	80120e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80120d8:	69bb      	ldr	r3, [r7, #24]
 80120da:	69ba      	ldr	r2, [r7, #24]
 80120dc:	601a      	str	r2, [r3, #0]
 80120de:	e002      	b.n	80120e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80120e0:	69bb      	ldr	r3, [r7, #24]
 80120e2:	687a      	ldr	r2, [r7, #4]
 80120e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80120e6:	69bb      	ldr	r3, [r7, #24]
 80120e8:	68fa      	ldr	r2, [r7, #12]
 80120ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80120ec:	69bb      	ldr	r3, [r7, #24]
 80120ee:	68ba      	ldr	r2, [r7, #8]
 80120f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80120f2:	2101      	movs	r1, #1
 80120f4:	69b8      	ldr	r0, [r7, #24]
 80120f6:	f7ff fecb 	bl	8011e90 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80120fa:	bf00      	nop
 80120fc:	3710      	adds	r7, #16
 80120fe:	46bd      	mov	sp, r7
 8012100:	bd80      	pop	{r7, pc}
	...

08012104 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012104:	b580      	push	{r7, lr}
 8012106:	b08e      	sub	sp, #56	; 0x38
 8012108:	af00      	add	r7, sp, #0
 801210a:	60f8      	str	r0, [r7, #12]
 801210c:	60b9      	str	r1, [r7, #8]
 801210e:	607a      	str	r2, [r7, #4]
 8012110:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012112:	2300      	movs	r3, #0
 8012114:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801211a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801211c:	2b00      	cmp	r3, #0
 801211e:	d10a      	bne.n	8012136 <xQueueGenericSend+0x32>
	__asm volatile
 8012120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012124:	f383 8811 	msr	BASEPRI, r3
 8012128:	f3bf 8f6f 	isb	sy
 801212c:	f3bf 8f4f 	dsb	sy
 8012130:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012132:	bf00      	nop
 8012134:	e7fe      	b.n	8012134 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012136:	68bb      	ldr	r3, [r7, #8]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d103      	bne.n	8012144 <xQueueGenericSend+0x40>
 801213c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012140:	2b00      	cmp	r3, #0
 8012142:	d101      	bne.n	8012148 <xQueueGenericSend+0x44>
 8012144:	2301      	movs	r3, #1
 8012146:	e000      	b.n	801214a <xQueueGenericSend+0x46>
 8012148:	2300      	movs	r3, #0
 801214a:	2b00      	cmp	r3, #0
 801214c:	d10a      	bne.n	8012164 <xQueueGenericSend+0x60>
	__asm volatile
 801214e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012152:	f383 8811 	msr	BASEPRI, r3
 8012156:	f3bf 8f6f 	isb	sy
 801215a:	f3bf 8f4f 	dsb	sy
 801215e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012160:	bf00      	nop
 8012162:	e7fe      	b.n	8012162 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012164:	683b      	ldr	r3, [r7, #0]
 8012166:	2b02      	cmp	r3, #2
 8012168:	d103      	bne.n	8012172 <xQueueGenericSend+0x6e>
 801216a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801216c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801216e:	2b01      	cmp	r3, #1
 8012170:	d101      	bne.n	8012176 <xQueueGenericSend+0x72>
 8012172:	2301      	movs	r3, #1
 8012174:	e000      	b.n	8012178 <xQueueGenericSend+0x74>
 8012176:	2300      	movs	r3, #0
 8012178:	2b00      	cmp	r3, #0
 801217a:	d10a      	bne.n	8012192 <xQueueGenericSend+0x8e>
	__asm volatile
 801217c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012180:	f383 8811 	msr	BASEPRI, r3
 8012184:	f3bf 8f6f 	isb	sy
 8012188:	f3bf 8f4f 	dsb	sy
 801218c:	623b      	str	r3, [r7, #32]
}
 801218e:	bf00      	nop
 8012190:	e7fe      	b.n	8012190 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012192:	f001 f9c1 	bl	8013518 <xTaskGetSchedulerState>
 8012196:	4603      	mov	r3, r0
 8012198:	2b00      	cmp	r3, #0
 801219a:	d102      	bne.n	80121a2 <xQueueGenericSend+0x9e>
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d101      	bne.n	80121a6 <xQueueGenericSend+0xa2>
 80121a2:	2301      	movs	r3, #1
 80121a4:	e000      	b.n	80121a8 <xQueueGenericSend+0xa4>
 80121a6:	2300      	movs	r3, #0
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d10a      	bne.n	80121c2 <xQueueGenericSend+0xbe>
	__asm volatile
 80121ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121b0:	f383 8811 	msr	BASEPRI, r3
 80121b4:	f3bf 8f6f 	isb	sy
 80121b8:	f3bf 8f4f 	dsb	sy
 80121bc:	61fb      	str	r3, [r7, #28]
}
 80121be:	bf00      	nop
 80121c0:	e7fe      	b.n	80121c0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80121c2:	f001 fbdf 	bl	8013984 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80121c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80121ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80121ce:	429a      	cmp	r2, r3
 80121d0:	d302      	bcc.n	80121d8 <xQueueGenericSend+0xd4>
 80121d2:	683b      	ldr	r3, [r7, #0]
 80121d4:	2b02      	cmp	r3, #2
 80121d6:	d129      	bne.n	801222c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80121d8:	683a      	ldr	r2, [r7, #0]
 80121da:	68b9      	ldr	r1, [r7, #8]
 80121dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80121de:	f000 fa8b 	bl	80126f8 <prvCopyDataToQueue>
 80121e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80121e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d010      	beq.n	801220e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80121ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ee:	3324      	adds	r3, #36	; 0x24
 80121f0:	4618      	mov	r0, r3
 80121f2:	f000 ffd1 	bl	8013198 <xTaskRemoveFromEventList>
 80121f6:	4603      	mov	r3, r0
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d013      	beq.n	8012224 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80121fc:	4b3f      	ldr	r3, [pc, #252]	; (80122fc <xQueueGenericSend+0x1f8>)
 80121fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012202:	601a      	str	r2, [r3, #0]
 8012204:	f3bf 8f4f 	dsb	sy
 8012208:	f3bf 8f6f 	isb	sy
 801220c:	e00a      	b.n	8012224 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801220e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012210:	2b00      	cmp	r3, #0
 8012212:	d007      	beq.n	8012224 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012214:	4b39      	ldr	r3, [pc, #228]	; (80122fc <xQueueGenericSend+0x1f8>)
 8012216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801221a:	601a      	str	r2, [r3, #0]
 801221c:	f3bf 8f4f 	dsb	sy
 8012220:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012224:	f001 fbde 	bl	80139e4 <vPortExitCritical>
				return pdPASS;
 8012228:	2301      	movs	r3, #1
 801222a:	e063      	b.n	80122f4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d103      	bne.n	801223a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012232:	f001 fbd7 	bl	80139e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012236:	2300      	movs	r3, #0
 8012238:	e05c      	b.n	80122f4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801223a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801223c:	2b00      	cmp	r3, #0
 801223e:	d106      	bne.n	801224e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012240:	f107 0314 	add.w	r3, r7, #20
 8012244:	4618      	mov	r0, r3
 8012246:	f001 f809 	bl	801325c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801224a:	2301      	movs	r3, #1
 801224c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801224e:	f001 fbc9 	bl	80139e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012252:	f000 fda9 	bl	8012da8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012256:	f001 fb95 	bl	8013984 <vPortEnterCritical>
 801225a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801225c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012260:	b25b      	sxtb	r3, r3
 8012262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012266:	d103      	bne.n	8012270 <xQueueGenericSend+0x16c>
 8012268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801226a:	2200      	movs	r2, #0
 801226c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012272:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012276:	b25b      	sxtb	r3, r3
 8012278:	f1b3 3fff 	cmp.w	r3, #4294967295
 801227c:	d103      	bne.n	8012286 <xQueueGenericSend+0x182>
 801227e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012280:	2200      	movs	r2, #0
 8012282:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012286:	f001 fbad 	bl	80139e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801228a:	1d3a      	adds	r2, r7, #4
 801228c:	f107 0314 	add.w	r3, r7, #20
 8012290:	4611      	mov	r1, r2
 8012292:	4618      	mov	r0, r3
 8012294:	f000 fff8 	bl	8013288 <xTaskCheckForTimeOut>
 8012298:	4603      	mov	r3, r0
 801229a:	2b00      	cmp	r3, #0
 801229c:	d124      	bne.n	80122e8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801229e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122a0:	f000 fb22 	bl	80128e8 <prvIsQueueFull>
 80122a4:	4603      	mov	r3, r0
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d018      	beq.n	80122dc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80122aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122ac:	3310      	adds	r3, #16
 80122ae:	687a      	ldr	r2, [r7, #4]
 80122b0:	4611      	mov	r1, r2
 80122b2:	4618      	mov	r0, r3
 80122b4:	f000 ff4c 	bl	8013150 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80122b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122ba:	f000 faad 	bl	8012818 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80122be:	f000 fd81 	bl	8012dc4 <xTaskResumeAll>
 80122c2:	4603      	mov	r3, r0
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	f47f af7c 	bne.w	80121c2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80122ca:	4b0c      	ldr	r3, [pc, #48]	; (80122fc <xQueueGenericSend+0x1f8>)
 80122cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122d0:	601a      	str	r2, [r3, #0]
 80122d2:	f3bf 8f4f 	dsb	sy
 80122d6:	f3bf 8f6f 	isb	sy
 80122da:	e772      	b.n	80121c2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80122dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122de:	f000 fa9b 	bl	8012818 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80122e2:	f000 fd6f 	bl	8012dc4 <xTaskResumeAll>
 80122e6:	e76c      	b.n	80121c2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80122e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122ea:	f000 fa95 	bl	8012818 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80122ee:	f000 fd69 	bl	8012dc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80122f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80122f4:	4618      	mov	r0, r3
 80122f6:	3738      	adds	r7, #56	; 0x38
 80122f8:	46bd      	mov	sp, r7
 80122fa:	bd80      	pop	{r7, pc}
 80122fc:	e000ed04 	.word	0xe000ed04

08012300 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012300:	b580      	push	{r7, lr}
 8012302:	b090      	sub	sp, #64	; 0x40
 8012304:	af00      	add	r7, sp, #0
 8012306:	60f8      	str	r0, [r7, #12]
 8012308:	60b9      	str	r1, [r7, #8]
 801230a:	607a      	str	r2, [r7, #4]
 801230c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8012312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012314:	2b00      	cmp	r3, #0
 8012316:	d10a      	bne.n	801232e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8012318:	f04f 0350 	mov.w	r3, #80	; 0x50
 801231c:	f383 8811 	msr	BASEPRI, r3
 8012320:	f3bf 8f6f 	isb	sy
 8012324:	f3bf 8f4f 	dsb	sy
 8012328:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801232a:	bf00      	nop
 801232c:	e7fe      	b.n	801232c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801232e:	68bb      	ldr	r3, [r7, #8]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d103      	bne.n	801233c <xQueueGenericSendFromISR+0x3c>
 8012334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012338:	2b00      	cmp	r3, #0
 801233a:	d101      	bne.n	8012340 <xQueueGenericSendFromISR+0x40>
 801233c:	2301      	movs	r3, #1
 801233e:	e000      	b.n	8012342 <xQueueGenericSendFromISR+0x42>
 8012340:	2300      	movs	r3, #0
 8012342:	2b00      	cmp	r3, #0
 8012344:	d10a      	bne.n	801235c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8012346:	f04f 0350 	mov.w	r3, #80	; 0x50
 801234a:	f383 8811 	msr	BASEPRI, r3
 801234e:	f3bf 8f6f 	isb	sy
 8012352:	f3bf 8f4f 	dsb	sy
 8012356:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012358:	bf00      	nop
 801235a:	e7fe      	b.n	801235a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801235c:	683b      	ldr	r3, [r7, #0]
 801235e:	2b02      	cmp	r3, #2
 8012360:	d103      	bne.n	801236a <xQueueGenericSendFromISR+0x6a>
 8012362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012366:	2b01      	cmp	r3, #1
 8012368:	d101      	bne.n	801236e <xQueueGenericSendFromISR+0x6e>
 801236a:	2301      	movs	r3, #1
 801236c:	e000      	b.n	8012370 <xQueueGenericSendFromISR+0x70>
 801236e:	2300      	movs	r3, #0
 8012370:	2b00      	cmp	r3, #0
 8012372:	d10a      	bne.n	801238a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8012374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012378:	f383 8811 	msr	BASEPRI, r3
 801237c:	f3bf 8f6f 	isb	sy
 8012380:	f3bf 8f4f 	dsb	sy
 8012384:	623b      	str	r3, [r7, #32]
}
 8012386:	bf00      	nop
 8012388:	e7fe      	b.n	8012388 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801238a:	f001 fbdd 	bl	8013b48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801238e:	f3ef 8211 	mrs	r2, BASEPRI
 8012392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012396:	f383 8811 	msr	BASEPRI, r3
 801239a:	f3bf 8f6f 	isb	sy
 801239e:	f3bf 8f4f 	dsb	sy
 80123a2:	61fa      	str	r2, [r7, #28]
 80123a4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80123a6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80123a8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80123aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80123ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80123b2:	429a      	cmp	r2, r3
 80123b4:	d302      	bcc.n	80123bc <xQueueGenericSendFromISR+0xbc>
 80123b6:	683b      	ldr	r3, [r7, #0]
 80123b8:	2b02      	cmp	r3, #2
 80123ba:	d12f      	bne.n	801241c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80123bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80123c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80123c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123ca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80123cc:	683a      	ldr	r2, [r7, #0]
 80123ce:	68b9      	ldr	r1, [r7, #8]
 80123d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80123d2:	f000 f991 	bl	80126f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80123d6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80123da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123de:	d112      	bne.n	8012406 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80123e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d016      	beq.n	8012416 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80123e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ea:	3324      	adds	r3, #36	; 0x24
 80123ec:	4618      	mov	r0, r3
 80123ee:	f000 fed3 	bl	8013198 <xTaskRemoveFromEventList>
 80123f2:	4603      	mov	r3, r0
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d00e      	beq.n	8012416 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d00b      	beq.n	8012416 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	2201      	movs	r2, #1
 8012402:	601a      	str	r2, [r3, #0]
 8012404:	e007      	b.n	8012416 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012406:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801240a:	3301      	adds	r3, #1
 801240c:	b2db      	uxtb	r3, r3
 801240e:	b25a      	sxtb	r2, r3
 8012410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012416:	2301      	movs	r3, #1
 8012418:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801241a:	e001      	b.n	8012420 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801241c:	2300      	movs	r3, #0
 801241e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012422:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012424:	697b      	ldr	r3, [r7, #20]
 8012426:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801242a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801242c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801242e:	4618      	mov	r0, r3
 8012430:	3740      	adds	r7, #64	; 0x40
 8012432:	46bd      	mov	sp, r7
 8012434:	bd80      	pop	{r7, pc}
	...

08012438 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012438:	b580      	push	{r7, lr}
 801243a:	b08c      	sub	sp, #48	; 0x30
 801243c:	af00      	add	r7, sp, #0
 801243e:	60f8      	str	r0, [r7, #12]
 8012440:	60b9      	str	r1, [r7, #8]
 8012442:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012444:	2300      	movs	r3, #0
 8012446:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801244c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801244e:	2b00      	cmp	r3, #0
 8012450:	d10a      	bne.n	8012468 <xQueueReceive+0x30>
	__asm volatile
 8012452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012456:	f383 8811 	msr	BASEPRI, r3
 801245a:	f3bf 8f6f 	isb	sy
 801245e:	f3bf 8f4f 	dsb	sy
 8012462:	623b      	str	r3, [r7, #32]
}
 8012464:	bf00      	nop
 8012466:	e7fe      	b.n	8012466 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012468:	68bb      	ldr	r3, [r7, #8]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d103      	bne.n	8012476 <xQueueReceive+0x3e>
 801246e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012472:	2b00      	cmp	r3, #0
 8012474:	d101      	bne.n	801247a <xQueueReceive+0x42>
 8012476:	2301      	movs	r3, #1
 8012478:	e000      	b.n	801247c <xQueueReceive+0x44>
 801247a:	2300      	movs	r3, #0
 801247c:	2b00      	cmp	r3, #0
 801247e:	d10a      	bne.n	8012496 <xQueueReceive+0x5e>
	__asm volatile
 8012480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012484:	f383 8811 	msr	BASEPRI, r3
 8012488:	f3bf 8f6f 	isb	sy
 801248c:	f3bf 8f4f 	dsb	sy
 8012490:	61fb      	str	r3, [r7, #28]
}
 8012492:	bf00      	nop
 8012494:	e7fe      	b.n	8012494 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012496:	f001 f83f 	bl	8013518 <xTaskGetSchedulerState>
 801249a:	4603      	mov	r3, r0
 801249c:	2b00      	cmp	r3, #0
 801249e:	d102      	bne.n	80124a6 <xQueueReceive+0x6e>
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d101      	bne.n	80124aa <xQueueReceive+0x72>
 80124a6:	2301      	movs	r3, #1
 80124a8:	e000      	b.n	80124ac <xQueueReceive+0x74>
 80124aa:	2300      	movs	r3, #0
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d10a      	bne.n	80124c6 <xQueueReceive+0x8e>
	__asm volatile
 80124b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124b4:	f383 8811 	msr	BASEPRI, r3
 80124b8:	f3bf 8f6f 	isb	sy
 80124bc:	f3bf 8f4f 	dsb	sy
 80124c0:	61bb      	str	r3, [r7, #24]
}
 80124c2:	bf00      	nop
 80124c4:	e7fe      	b.n	80124c4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80124c6:	f001 fa5d 	bl	8013984 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80124ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124ce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80124d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d01f      	beq.n	8012516 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80124d6:	68b9      	ldr	r1, [r7, #8]
 80124d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80124da:	f000 f977 	bl	80127cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80124de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124e0:	1e5a      	subs	r2, r3, #1
 80124e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80124e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124e8:	691b      	ldr	r3, [r3, #16]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d00f      	beq.n	801250e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80124ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124f0:	3310      	adds	r3, #16
 80124f2:	4618      	mov	r0, r3
 80124f4:	f000 fe50 	bl	8013198 <xTaskRemoveFromEventList>
 80124f8:	4603      	mov	r3, r0
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d007      	beq.n	801250e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80124fe:	4b3d      	ldr	r3, [pc, #244]	; (80125f4 <xQueueReceive+0x1bc>)
 8012500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012504:	601a      	str	r2, [r3, #0]
 8012506:	f3bf 8f4f 	dsb	sy
 801250a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801250e:	f001 fa69 	bl	80139e4 <vPortExitCritical>
				return pdPASS;
 8012512:	2301      	movs	r3, #1
 8012514:	e069      	b.n	80125ea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d103      	bne.n	8012524 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801251c:	f001 fa62 	bl	80139e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012520:	2300      	movs	r3, #0
 8012522:	e062      	b.n	80125ea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012526:	2b00      	cmp	r3, #0
 8012528:	d106      	bne.n	8012538 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801252a:	f107 0310 	add.w	r3, r7, #16
 801252e:	4618      	mov	r0, r3
 8012530:	f000 fe94 	bl	801325c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012534:	2301      	movs	r3, #1
 8012536:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012538:	f001 fa54 	bl	80139e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801253c:	f000 fc34 	bl	8012da8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012540:	f001 fa20 	bl	8013984 <vPortEnterCritical>
 8012544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012546:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801254a:	b25b      	sxtb	r3, r3
 801254c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012550:	d103      	bne.n	801255a <xQueueReceive+0x122>
 8012552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012554:	2200      	movs	r2, #0
 8012556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801255a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801255c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012560:	b25b      	sxtb	r3, r3
 8012562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012566:	d103      	bne.n	8012570 <xQueueReceive+0x138>
 8012568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801256a:	2200      	movs	r2, #0
 801256c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012570:	f001 fa38 	bl	80139e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012574:	1d3a      	adds	r2, r7, #4
 8012576:	f107 0310 	add.w	r3, r7, #16
 801257a:	4611      	mov	r1, r2
 801257c:	4618      	mov	r0, r3
 801257e:	f000 fe83 	bl	8013288 <xTaskCheckForTimeOut>
 8012582:	4603      	mov	r3, r0
 8012584:	2b00      	cmp	r3, #0
 8012586:	d123      	bne.n	80125d0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012588:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801258a:	f000 f997 	bl	80128bc <prvIsQueueEmpty>
 801258e:	4603      	mov	r3, r0
 8012590:	2b00      	cmp	r3, #0
 8012592:	d017      	beq.n	80125c4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012596:	3324      	adds	r3, #36	; 0x24
 8012598:	687a      	ldr	r2, [r7, #4]
 801259a:	4611      	mov	r1, r2
 801259c:	4618      	mov	r0, r3
 801259e:	f000 fdd7 	bl	8013150 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80125a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80125a4:	f000 f938 	bl	8012818 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80125a8:	f000 fc0c 	bl	8012dc4 <xTaskResumeAll>
 80125ac:	4603      	mov	r3, r0
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d189      	bne.n	80124c6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80125b2:	4b10      	ldr	r3, [pc, #64]	; (80125f4 <xQueueReceive+0x1bc>)
 80125b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125b8:	601a      	str	r2, [r3, #0]
 80125ba:	f3bf 8f4f 	dsb	sy
 80125be:	f3bf 8f6f 	isb	sy
 80125c2:	e780      	b.n	80124c6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80125c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80125c6:	f000 f927 	bl	8012818 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80125ca:	f000 fbfb 	bl	8012dc4 <xTaskResumeAll>
 80125ce:	e77a      	b.n	80124c6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80125d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80125d2:	f000 f921 	bl	8012818 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80125d6:	f000 fbf5 	bl	8012dc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80125da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80125dc:	f000 f96e 	bl	80128bc <prvIsQueueEmpty>
 80125e0:	4603      	mov	r3, r0
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	f43f af6f 	beq.w	80124c6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80125e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80125ea:	4618      	mov	r0, r3
 80125ec:	3730      	adds	r7, #48	; 0x30
 80125ee:	46bd      	mov	sp, r7
 80125f0:	bd80      	pop	{r7, pc}
 80125f2:	bf00      	nop
 80125f4:	e000ed04 	.word	0xe000ed04

080125f8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80125f8:	b580      	push	{r7, lr}
 80125fa:	b08e      	sub	sp, #56	; 0x38
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	60f8      	str	r0, [r7, #12]
 8012600:	60b9      	str	r1, [r7, #8]
 8012602:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801260a:	2b00      	cmp	r3, #0
 801260c:	d10a      	bne.n	8012624 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801260e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012612:	f383 8811 	msr	BASEPRI, r3
 8012616:	f3bf 8f6f 	isb	sy
 801261a:	f3bf 8f4f 	dsb	sy
 801261e:	623b      	str	r3, [r7, #32]
}
 8012620:	bf00      	nop
 8012622:	e7fe      	b.n	8012622 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012624:	68bb      	ldr	r3, [r7, #8]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d103      	bne.n	8012632 <xQueueReceiveFromISR+0x3a>
 801262a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801262e:	2b00      	cmp	r3, #0
 8012630:	d101      	bne.n	8012636 <xQueueReceiveFromISR+0x3e>
 8012632:	2301      	movs	r3, #1
 8012634:	e000      	b.n	8012638 <xQueueReceiveFromISR+0x40>
 8012636:	2300      	movs	r3, #0
 8012638:	2b00      	cmp	r3, #0
 801263a:	d10a      	bne.n	8012652 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 801263c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012640:	f383 8811 	msr	BASEPRI, r3
 8012644:	f3bf 8f6f 	isb	sy
 8012648:	f3bf 8f4f 	dsb	sy
 801264c:	61fb      	str	r3, [r7, #28]
}
 801264e:	bf00      	nop
 8012650:	e7fe      	b.n	8012650 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012652:	f001 fa79 	bl	8013b48 <vPortValidateInterruptPriority>
	__asm volatile
 8012656:	f3ef 8211 	mrs	r2, BASEPRI
 801265a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801265e:	f383 8811 	msr	BASEPRI, r3
 8012662:	f3bf 8f6f 	isb	sy
 8012666:	f3bf 8f4f 	dsb	sy
 801266a:	61ba      	str	r2, [r7, #24]
 801266c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801266e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012670:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012676:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801267a:	2b00      	cmp	r3, #0
 801267c:	d02f      	beq.n	80126de <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801267e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012680:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012684:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012688:	68b9      	ldr	r1, [r7, #8]
 801268a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801268c:	f000 f89e 	bl	80127cc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012692:	1e5a      	subs	r2, r3, #1
 8012694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012696:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012698:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801269c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126a0:	d112      	bne.n	80126c8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80126a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126a4:	691b      	ldr	r3, [r3, #16]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d016      	beq.n	80126d8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80126aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126ac:	3310      	adds	r3, #16
 80126ae:	4618      	mov	r0, r3
 80126b0:	f000 fd72 	bl	8013198 <xTaskRemoveFromEventList>
 80126b4:	4603      	mov	r3, r0
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d00e      	beq.n	80126d8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d00b      	beq.n	80126d8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	2201      	movs	r2, #1
 80126c4:	601a      	str	r2, [r3, #0]
 80126c6:	e007      	b.n	80126d8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80126c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80126cc:	3301      	adds	r3, #1
 80126ce:	b2db      	uxtb	r3, r3
 80126d0:	b25a      	sxtb	r2, r3
 80126d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80126d8:	2301      	movs	r3, #1
 80126da:	637b      	str	r3, [r7, #52]	; 0x34
 80126dc:	e001      	b.n	80126e2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80126de:	2300      	movs	r3, #0
 80126e0:	637b      	str	r3, [r7, #52]	; 0x34
 80126e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80126e6:	693b      	ldr	r3, [r7, #16]
 80126e8:	f383 8811 	msr	BASEPRI, r3
}
 80126ec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80126ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80126f0:	4618      	mov	r0, r3
 80126f2:	3738      	adds	r7, #56	; 0x38
 80126f4:	46bd      	mov	sp, r7
 80126f6:	bd80      	pop	{r7, pc}

080126f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b086      	sub	sp, #24
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	60f8      	str	r0, [r7, #12]
 8012700:	60b9      	str	r1, [r7, #8]
 8012702:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012704:	2300      	movs	r3, #0
 8012706:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801270c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012712:	2b00      	cmp	r3, #0
 8012714:	d10d      	bne.n	8012732 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d14d      	bne.n	80127ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	689b      	ldr	r3, [r3, #8]
 8012722:	4618      	mov	r0, r3
 8012724:	f000 ff16 	bl	8013554 <xTaskPriorityDisinherit>
 8012728:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	2200      	movs	r2, #0
 801272e:	609a      	str	r2, [r3, #8]
 8012730:	e043      	b.n	80127ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d119      	bne.n	801276c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	6858      	ldr	r0, [r3, #4]
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012740:	461a      	mov	r2, r3
 8012742:	68b9      	ldr	r1, [r7, #8]
 8012744:	f002 f8ca 	bl	80148dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	685a      	ldr	r2, [r3, #4]
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012750:	441a      	add	r2, r3
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	685a      	ldr	r2, [r3, #4]
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	689b      	ldr	r3, [r3, #8]
 801275e:	429a      	cmp	r2, r3
 8012760:	d32b      	bcc.n	80127ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	681a      	ldr	r2, [r3, #0]
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	605a      	str	r2, [r3, #4]
 801276a:	e026      	b.n	80127ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	68d8      	ldr	r0, [r3, #12]
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012774:	461a      	mov	r2, r3
 8012776:	68b9      	ldr	r1, [r7, #8]
 8012778:	f002 f8b0 	bl	80148dc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	68da      	ldr	r2, [r3, #12]
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012784:	425b      	negs	r3, r3
 8012786:	441a      	add	r2, r3
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	68da      	ldr	r2, [r3, #12]
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	429a      	cmp	r2, r3
 8012796:	d207      	bcs.n	80127a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	689a      	ldr	r2, [r3, #8]
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127a0:	425b      	negs	r3, r3
 80127a2:	441a      	add	r2, r3
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	2b02      	cmp	r3, #2
 80127ac:	d105      	bne.n	80127ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80127ae:	693b      	ldr	r3, [r7, #16]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d002      	beq.n	80127ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80127b4:	693b      	ldr	r3, [r7, #16]
 80127b6:	3b01      	subs	r3, #1
 80127b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80127ba:	693b      	ldr	r3, [r7, #16]
 80127bc:	1c5a      	adds	r2, r3, #1
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80127c2:	697b      	ldr	r3, [r7, #20]
}
 80127c4:	4618      	mov	r0, r3
 80127c6:	3718      	adds	r7, #24
 80127c8:	46bd      	mov	sp, r7
 80127ca:	bd80      	pop	{r7, pc}

080127cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b082      	sub	sp, #8
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
 80127d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d018      	beq.n	8012810 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	68da      	ldr	r2, [r3, #12]
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127e6:	441a      	add	r2, r3
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	68da      	ldr	r2, [r3, #12]
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	689b      	ldr	r3, [r3, #8]
 80127f4:	429a      	cmp	r2, r3
 80127f6:	d303      	bcc.n	8012800 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	681a      	ldr	r2, [r3, #0]
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	68d9      	ldr	r1, [r3, #12]
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012808:	461a      	mov	r2, r3
 801280a:	6838      	ldr	r0, [r7, #0]
 801280c:	f002 f866 	bl	80148dc <memcpy>
	}
}
 8012810:	bf00      	nop
 8012812:	3708      	adds	r7, #8
 8012814:	46bd      	mov	sp, r7
 8012816:	bd80      	pop	{r7, pc}

08012818 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012818:	b580      	push	{r7, lr}
 801281a:	b084      	sub	sp, #16
 801281c:	af00      	add	r7, sp, #0
 801281e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012820:	f001 f8b0 	bl	8013984 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801282a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801282c:	e011      	b.n	8012852 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012832:	2b00      	cmp	r3, #0
 8012834:	d012      	beq.n	801285c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	3324      	adds	r3, #36	; 0x24
 801283a:	4618      	mov	r0, r3
 801283c:	f000 fcac 	bl	8013198 <xTaskRemoveFromEventList>
 8012840:	4603      	mov	r3, r0
 8012842:	2b00      	cmp	r3, #0
 8012844:	d001      	beq.n	801284a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012846:	f000 fd81 	bl	801334c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801284a:	7bfb      	ldrb	r3, [r7, #15]
 801284c:	3b01      	subs	r3, #1
 801284e:	b2db      	uxtb	r3, r3
 8012850:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012856:	2b00      	cmp	r3, #0
 8012858:	dce9      	bgt.n	801282e <prvUnlockQueue+0x16>
 801285a:	e000      	b.n	801285e <prvUnlockQueue+0x46>
					break;
 801285c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	22ff      	movs	r2, #255	; 0xff
 8012862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012866:	f001 f8bd 	bl	80139e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801286a:	f001 f88b 	bl	8013984 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012874:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012876:	e011      	b.n	801289c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	691b      	ldr	r3, [r3, #16]
 801287c:	2b00      	cmp	r3, #0
 801287e:	d012      	beq.n	80128a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	3310      	adds	r3, #16
 8012884:	4618      	mov	r0, r3
 8012886:	f000 fc87 	bl	8013198 <xTaskRemoveFromEventList>
 801288a:	4603      	mov	r3, r0
 801288c:	2b00      	cmp	r3, #0
 801288e:	d001      	beq.n	8012894 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012890:	f000 fd5c 	bl	801334c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012894:	7bbb      	ldrb	r3, [r7, #14]
 8012896:	3b01      	subs	r3, #1
 8012898:	b2db      	uxtb	r3, r3
 801289a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801289c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	dce9      	bgt.n	8012878 <prvUnlockQueue+0x60>
 80128a4:	e000      	b.n	80128a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80128a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	22ff      	movs	r2, #255	; 0xff
 80128ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80128b0:	f001 f898 	bl	80139e4 <vPortExitCritical>
}
 80128b4:	bf00      	nop
 80128b6:	3710      	adds	r7, #16
 80128b8:	46bd      	mov	sp, r7
 80128ba:	bd80      	pop	{r7, pc}

080128bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b084      	sub	sp, #16
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80128c4:	f001 f85e 	bl	8013984 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d102      	bne.n	80128d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80128d0:	2301      	movs	r3, #1
 80128d2:	60fb      	str	r3, [r7, #12]
 80128d4:	e001      	b.n	80128da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80128d6:	2300      	movs	r3, #0
 80128d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80128da:	f001 f883 	bl	80139e4 <vPortExitCritical>

	return xReturn;
 80128de:	68fb      	ldr	r3, [r7, #12]
}
 80128e0:	4618      	mov	r0, r3
 80128e2:	3710      	adds	r7, #16
 80128e4:	46bd      	mov	sp, r7
 80128e6:	bd80      	pop	{r7, pc}

080128e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b084      	sub	sp, #16
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80128f0:	f001 f848 	bl	8013984 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80128fc:	429a      	cmp	r2, r3
 80128fe:	d102      	bne.n	8012906 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012900:	2301      	movs	r3, #1
 8012902:	60fb      	str	r3, [r7, #12]
 8012904:	e001      	b.n	801290a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012906:	2300      	movs	r3, #0
 8012908:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801290a:	f001 f86b 	bl	80139e4 <vPortExitCritical>

	return xReturn;
 801290e:	68fb      	ldr	r3, [r7, #12]
}
 8012910:	4618      	mov	r0, r3
 8012912:	3710      	adds	r7, #16
 8012914:	46bd      	mov	sp, r7
 8012916:	bd80      	pop	{r7, pc}

08012918 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012918:	b580      	push	{r7, lr}
 801291a:	b08e      	sub	sp, #56	; 0x38
 801291c:	af04      	add	r7, sp, #16
 801291e:	60f8      	str	r0, [r7, #12]
 8012920:	60b9      	str	r1, [r7, #8]
 8012922:	607a      	str	r2, [r7, #4]
 8012924:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012928:	2b00      	cmp	r3, #0
 801292a:	d10a      	bne.n	8012942 <xTaskCreateStatic+0x2a>
	__asm volatile
 801292c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012930:	f383 8811 	msr	BASEPRI, r3
 8012934:	f3bf 8f6f 	isb	sy
 8012938:	f3bf 8f4f 	dsb	sy
 801293c:	623b      	str	r3, [r7, #32]
}
 801293e:	bf00      	nop
 8012940:	e7fe      	b.n	8012940 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8012942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012944:	2b00      	cmp	r3, #0
 8012946:	d10a      	bne.n	801295e <xTaskCreateStatic+0x46>
	__asm volatile
 8012948:	f04f 0350 	mov.w	r3, #80	; 0x50
 801294c:	f383 8811 	msr	BASEPRI, r3
 8012950:	f3bf 8f6f 	isb	sy
 8012954:	f3bf 8f4f 	dsb	sy
 8012958:	61fb      	str	r3, [r7, #28]
}
 801295a:	bf00      	nop
 801295c:	e7fe      	b.n	801295c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801295e:	23b4      	movs	r3, #180	; 0xb4
 8012960:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012962:	693b      	ldr	r3, [r7, #16]
 8012964:	2bb4      	cmp	r3, #180	; 0xb4
 8012966:	d00a      	beq.n	801297e <xTaskCreateStatic+0x66>
	__asm volatile
 8012968:	f04f 0350 	mov.w	r3, #80	; 0x50
 801296c:	f383 8811 	msr	BASEPRI, r3
 8012970:	f3bf 8f6f 	isb	sy
 8012974:	f3bf 8f4f 	dsb	sy
 8012978:	61bb      	str	r3, [r7, #24]
}
 801297a:	bf00      	nop
 801297c:	e7fe      	b.n	801297c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801297e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012982:	2b00      	cmp	r3, #0
 8012984:	d01e      	beq.n	80129c4 <xTaskCreateStatic+0xac>
 8012986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012988:	2b00      	cmp	r3, #0
 801298a:	d01b      	beq.n	80129c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801298c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801298e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012992:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012994:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012998:	2202      	movs	r2, #2
 801299a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801299e:	2300      	movs	r3, #0
 80129a0:	9303      	str	r3, [sp, #12]
 80129a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129a4:	9302      	str	r3, [sp, #8]
 80129a6:	f107 0314 	add.w	r3, r7, #20
 80129aa:	9301      	str	r3, [sp, #4]
 80129ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129ae:	9300      	str	r3, [sp, #0]
 80129b0:	683b      	ldr	r3, [r7, #0]
 80129b2:	687a      	ldr	r2, [r7, #4]
 80129b4:	68b9      	ldr	r1, [r7, #8]
 80129b6:	68f8      	ldr	r0, [r7, #12]
 80129b8:	f000 f850 	bl	8012a5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80129bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80129be:	f000 f8eb 	bl	8012b98 <prvAddNewTaskToReadyList>
 80129c2:	e001      	b.n	80129c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80129c4:	2300      	movs	r3, #0
 80129c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80129c8:	697b      	ldr	r3, [r7, #20]
	}
 80129ca:	4618      	mov	r0, r3
 80129cc:	3728      	adds	r7, #40	; 0x28
 80129ce:	46bd      	mov	sp, r7
 80129d0:	bd80      	pop	{r7, pc}

080129d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80129d2:	b580      	push	{r7, lr}
 80129d4:	b08c      	sub	sp, #48	; 0x30
 80129d6:	af04      	add	r7, sp, #16
 80129d8:	60f8      	str	r0, [r7, #12]
 80129da:	60b9      	str	r1, [r7, #8]
 80129dc:	603b      	str	r3, [r7, #0]
 80129de:	4613      	mov	r3, r2
 80129e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80129e2:	88fb      	ldrh	r3, [r7, #6]
 80129e4:	009b      	lsls	r3, r3, #2
 80129e6:	4618      	mov	r0, r3
 80129e8:	f001 f8ee 	bl	8013bc8 <pvPortMalloc>
 80129ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80129ee:	697b      	ldr	r3, [r7, #20]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d00e      	beq.n	8012a12 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80129f4:	20b4      	movs	r0, #180	; 0xb4
 80129f6:	f001 f8e7 	bl	8013bc8 <pvPortMalloc>
 80129fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80129fc:	69fb      	ldr	r3, [r7, #28]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d003      	beq.n	8012a0a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012a02:	69fb      	ldr	r3, [r7, #28]
 8012a04:	697a      	ldr	r2, [r7, #20]
 8012a06:	631a      	str	r2, [r3, #48]	; 0x30
 8012a08:	e005      	b.n	8012a16 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012a0a:	6978      	ldr	r0, [r7, #20]
 8012a0c:	f001 f9a8 	bl	8013d60 <vPortFree>
 8012a10:	e001      	b.n	8012a16 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012a12:	2300      	movs	r3, #0
 8012a14:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012a16:	69fb      	ldr	r3, [r7, #28]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d017      	beq.n	8012a4c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012a1c:	69fb      	ldr	r3, [r7, #28]
 8012a1e:	2200      	movs	r2, #0
 8012a20:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012a24:	88fa      	ldrh	r2, [r7, #6]
 8012a26:	2300      	movs	r3, #0
 8012a28:	9303      	str	r3, [sp, #12]
 8012a2a:	69fb      	ldr	r3, [r7, #28]
 8012a2c:	9302      	str	r3, [sp, #8]
 8012a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a30:	9301      	str	r3, [sp, #4]
 8012a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a34:	9300      	str	r3, [sp, #0]
 8012a36:	683b      	ldr	r3, [r7, #0]
 8012a38:	68b9      	ldr	r1, [r7, #8]
 8012a3a:	68f8      	ldr	r0, [r7, #12]
 8012a3c:	f000 f80e 	bl	8012a5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012a40:	69f8      	ldr	r0, [r7, #28]
 8012a42:	f000 f8a9 	bl	8012b98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012a46:	2301      	movs	r3, #1
 8012a48:	61bb      	str	r3, [r7, #24]
 8012a4a:	e002      	b.n	8012a52 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8012a50:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012a52:	69bb      	ldr	r3, [r7, #24]
	}
 8012a54:	4618      	mov	r0, r3
 8012a56:	3720      	adds	r7, #32
 8012a58:	46bd      	mov	sp, r7
 8012a5a:	bd80      	pop	{r7, pc}

08012a5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b088      	sub	sp, #32
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	60f8      	str	r0, [r7, #12]
 8012a64:	60b9      	str	r1, [r7, #8]
 8012a66:	607a      	str	r2, [r7, #4]
 8012a68:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012a74:	3b01      	subs	r3, #1
 8012a76:	009b      	lsls	r3, r3, #2
 8012a78:	4413      	add	r3, r2
 8012a7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012a7c:	69bb      	ldr	r3, [r7, #24]
 8012a7e:	f023 0307 	bic.w	r3, r3, #7
 8012a82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012a84:	69bb      	ldr	r3, [r7, #24]
 8012a86:	f003 0307 	and.w	r3, r3, #7
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d00a      	beq.n	8012aa4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8012a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a92:	f383 8811 	msr	BASEPRI, r3
 8012a96:	f3bf 8f6f 	isb	sy
 8012a9a:	f3bf 8f4f 	dsb	sy
 8012a9e:	617b      	str	r3, [r7, #20]
}
 8012aa0:	bf00      	nop
 8012aa2:	e7fe      	b.n	8012aa2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012aa4:	68bb      	ldr	r3, [r7, #8]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d01f      	beq.n	8012aea <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012aaa:	2300      	movs	r3, #0
 8012aac:	61fb      	str	r3, [r7, #28]
 8012aae:	e012      	b.n	8012ad6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012ab0:	68ba      	ldr	r2, [r7, #8]
 8012ab2:	69fb      	ldr	r3, [r7, #28]
 8012ab4:	4413      	add	r3, r2
 8012ab6:	7819      	ldrb	r1, [r3, #0]
 8012ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012aba:	69fb      	ldr	r3, [r7, #28]
 8012abc:	4413      	add	r3, r2
 8012abe:	3334      	adds	r3, #52	; 0x34
 8012ac0:	460a      	mov	r2, r1
 8012ac2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012ac4:	68ba      	ldr	r2, [r7, #8]
 8012ac6:	69fb      	ldr	r3, [r7, #28]
 8012ac8:	4413      	add	r3, r2
 8012aca:	781b      	ldrb	r3, [r3, #0]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d006      	beq.n	8012ade <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012ad0:	69fb      	ldr	r3, [r7, #28]
 8012ad2:	3301      	adds	r3, #1
 8012ad4:	61fb      	str	r3, [r7, #28]
 8012ad6:	69fb      	ldr	r3, [r7, #28]
 8012ad8:	2b0f      	cmp	r3, #15
 8012ada:	d9e9      	bls.n	8012ab0 <prvInitialiseNewTask+0x54>
 8012adc:	e000      	b.n	8012ae0 <prvInitialiseNewTask+0x84>
			{
				break;
 8012ade:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ae2:	2200      	movs	r2, #0
 8012ae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012ae8:	e003      	b.n	8012af2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aec:	2200      	movs	r2, #0
 8012aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012af4:	2b06      	cmp	r3, #6
 8012af6:	d901      	bls.n	8012afc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012af8:	2306      	movs	r3, #6
 8012afa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012afe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b00:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b06:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b0a:	2200      	movs	r2, #0
 8012b0c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b10:	3304      	adds	r3, #4
 8012b12:	4618      	mov	r0, r3
 8012b14:	f7ff f928 	bl	8011d68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b1a:	3318      	adds	r3, #24
 8012b1c:	4618      	mov	r0, r3
 8012b1e:	f7ff f923 	bl	8011d68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b26:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b2a:	f1c3 0207 	rsb	r2, r3, #7
 8012b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b30:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b36:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b42:	2200      	movs	r2, #0
 8012b44:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8012b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b4a:	334c      	adds	r3, #76	; 0x4c
 8012b4c:	2260      	movs	r2, #96	; 0x60
 8012b4e:	2100      	movs	r1, #0
 8012b50:	4618      	mov	r0, r3
 8012b52:	f001 fed1 	bl	80148f8 <memset>
 8012b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b58:	4a0c      	ldr	r2, [pc, #48]	; (8012b8c <prvInitialiseNewTask+0x130>)
 8012b5a:	651a      	str	r2, [r3, #80]	; 0x50
 8012b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b5e:	4a0c      	ldr	r2, [pc, #48]	; (8012b90 <prvInitialiseNewTask+0x134>)
 8012b60:	655a      	str	r2, [r3, #84]	; 0x54
 8012b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b64:	4a0b      	ldr	r2, [pc, #44]	; (8012b94 <prvInitialiseNewTask+0x138>)
 8012b66:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012b68:	683a      	ldr	r2, [r7, #0]
 8012b6a:	68f9      	ldr	r1, [r7, #12]
 8012b6c:	69b8      	ldr	r0, [r7, #24]
 8012b6e:	f000 fddd 	bl	801372c <pxPortInitialiseStack>
 8012b72:	4602      	mov	r2, r0
 8012b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b76:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d002      	beq.n	8012b84 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b82:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012b84:	bf00      	nop
 8012b86:	3720      	adds	r7, #32
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	bd80      	pop	{r7, pc}
 8012b8c:	08017904 	.word	0x08017904
 8012b90:	08017924 	.word	0x08017924
 8012b94:	080178e4 	.word	0x080178e4

08012b98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	b082      	sub	sp, #8
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012ba0:	f000 fef0 	bl	8013984 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012ba4:	4b2a      	ldr	r3, [pc, #168]	; (8012c50 <prvAddNewTaskToReadyList+0xb8>)
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	3301      	adds	r3, #1
 8012baa:	4a29      	ldr	r2, [pc, #164]	; (8012c50 <prvAddNewTaskToReadyList+0xb8>)
 8012bac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012bae:	4b29      	ldr	r3, [pc, #164]	; (8012c54 <prvAddNewTaskToReadyList+0xbc>)
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d109      	bne.n	8012bca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012bb6:	4a27      	ldr	r2, [pc, #156]	; (8012c54 <prvAddNewTaskToReadyList+0xbc>)
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012bbc:	4b24      	ldr	r3, [pc, #144]	; (8012c50 <prvAddNewTaskToReadyList+0xb8>)
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	2b01      	cmp	r3, #1
 8012bc2:	d110      	bne.n	8012be6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012bc4:	f000 fbe6 	bl	8013394 <prvInitialiseTaskLists>
 8012bc8:	e00d      	b.n	8012be6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012bca:	4b23      	ldr	r3, [pc, #140]	; (8012c58 <prvAddNewTaskToReadyList+0xc0>)
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d109      	bne.n	8012be6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012bd2:	4b20      	ldr	r3, [pc, #128]	; (8012c54 <prvAddNewTaskToReadyList+0xbc>)
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bdc:	429a      	cmp	r2, r3
 8012bde:	d802      	bhi.n	8012be6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012be0:	4a1c      	ldr	r2, [pc, #112]	; (8012c54 <prvAddNewTaskToReadyList+0xbc>)
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012be6:	4b1d      	ldr	r3, [pc, #116]	; (8012c5c <prvAddNewTaskToReadyList+0xc4>)
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	3301      	adds	r3, #1
 8012bec:	4a1b      	ldr	r2, [pc, #108]	; (8012c5c <prvAddNewTaskToReadyList+0xc4>)
 8012bee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bf4:	2201      	movs	r2, #1
 8012bf6:	409a      	lsls	r2, r3
 8012bf8:	4b19      	ldr	r3, [pc, #100]	; (8012c60 <prvAddNewTaskToReadyList+0xc8>)
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	4313      	orrs	r3, r2
 8012bfe:	4a18      	ldr	r2, [pc, #96]	; (8012c60 <prvAddNewTaskToReadyList+0xc8>)
 8012c00:	6013      	str	r3, [r2, #0]
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c06:	4613      	mov	r3, r2
 8012c08:	009b      	lsls	r3, r3, #2
 8012c0a:	4413      	add	r3, r2
 8012c0c:	009b      	lsls	r3, r3, #2
 8012c0e:	4a15      	ldr	r2, [pc, #84]	; (8012c64 <prvAddNewTaskToReadyList+0xcc>)
 8012c10:	441a      	add	r2, r3
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	3304      	adds	r3, #4
 8012c16:	4619      	mov	r1, r3
 8012c18:	4610      	mov	r0, r2
 8012c1a:	f7ff f8b2 	bl	8011d82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012c1e:	f000 fee1 	bl	80139e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012c22:	4b0d      	ldr	r3, [pc, #52]	; (8012c58 <prvAddNewTaskToReadyList+0xc0>)
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d00e      	beq.n	8012c48 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012c2a:	4b0a      	ldr	r3, [pc, #40]	; (8012c54 <prvAddNewTaskToReadyList+0xbc>)
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c34:	429a      	cmp	r2, r3
 8012c36:	d207      	bcs.n	8012c48 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012c38:	4b0b      	ldr	r3, [pc, #44]	; (8012c68 <prvAddNewTaskToReadyList+0xd0>)
 8012c3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c3e:	601a      	str	r2, [r3, #0]
 8012c40:	f3bf 8f4f 	dsb	sy
 8012c44:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012c48:	bf00      	nop
 8012c4a:	3708      	adds	r7, #8
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	bd80      	pop	{r7, pc}
 8012c50:	20002408 	.word	0x20002408
 8012c54:	20002308 	.word	0x20002308
 8012c58:	20002414 	.word	0x20002414
 8012c5c:	20002424 	.word	0x20002424
 8012c60:	20002410 	.word	0x20002410
 8012c64:	2000230c 	.word	0x2000230c
 8012c68:	e000ed04 	.word	0xe000ed04

08012c6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b084      	sub	sp, #16
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012c74:	2300      	movs	r3, #0
 8012c76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d017      	beq.n	8012cae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012c7e:	4b13      	ldr	r3, [pc, #76]	; (8012ccc <vTaskDelay+0x60>)
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d00a      	beq.n	8012c9c <vTaskDelay+0x30>
	__asm volatile
 8012c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c8a:	f383 8811 	msr	BASEPRI, r3
 8012c8e:	f3bf 8f6f 	isb	sy
 8012c92:	f3bf 8f4f 	dsb	sy
 8012c96:	60bb      	str	r3, [r7, #8]
}
 8012c98:	bf00      	nop
 8012c9a:	e7fe      	b.n	8012c9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012c9c:	f000 f884 	bl	8012da8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012ca0:	2100      	movs	r1, #0
 8012ca2:	6878      	ldr	r0, [r7, #4]
 8012ca4:	f000 fcdc 	bl	8013660 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012ca8:	f000 f88c 	bl	8012dc4 <xTaskResumeAll>
 8012cac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d107      	bne.n	8012cc4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8012cb4:	4b06      	ldr	r3, [pc, #24]	; (8012cd0 <vTaskDelay+0x64>)
 8012cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012cba:	601a      	str	r2, [r3, #0]
 8012cbc:	f3bf 8f4f 	dsb	sy
 8012cc0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012cc4:	bf00      	nop
 8012cc6:	3710      	adds	r7, #16
 8012cc8:	46bd      	mov	sp, r7
 8012cca:	bd80      	pop	{r7, pc}
 8012ccc:	20002430 	.word	0x20002430
 8012cd0:	e000ed04 	.word	0xe000ed04

08012cd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	b08a      	sub	sp, #40	; 0x28
 8012cd8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012cda:	2300      	movs	r3, #0
 8012cdc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012cde:	2300      	movs	r3, #0
 8012ce0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012ce2:	463a      	mov	r2, r7
 8012ce4:	1d39      	adds	r1, r7, #4
 8012ce6:	f107 0308 	add.w	r3, r7, #8
 8012cea:	4618      	mov	r0, r3
 8012cec:	f7ee f9ea 	bl	80010c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012cf0:	6839      	ldr	r1, [r7, #0]
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	68ba      	ldr	r2, [r7, #8]
 8012cf6:	9202      	str	r2, [sp, #8]
 8012cf8:	9301      	str	r3, [sp, #4]
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	9300      	str	r3, [sp, #0]
 8012cfe:	2300      	movs	r3, #0
 8012d00:	460a      	mov	r2, r1
 8012d02:	4921      	ldr	r1, [pc, #132]	; (8012d88 <vTaskStartScheduler+0xb4>)
 8012d04:	4821      	ldr	r0, [pc, #132]	; (8012d8c <vTaskStartScheduler+0xb8>)
 8012d06:	f7ff fe07 	bl	8012918 <xTaskCreateStatic>
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	4a20      	ldr	r2, [pc, #128]	; (8012d90 <vTaskStartScheduler+0xbc>)
 8012d0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012d10:	4b1f      	ldr	r3, [pc, #124]	; (8012d90 <vTaskStartScheduler+0xbc>)
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d002      	beq.n	8012d1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012d18:	2301      	movs	r3, #1
 8012d1a:	617b      	str	r3, [r7, #20]
 8012d1c:	e001      	b.n	8012d22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012d1e:	2300      	movs	r3, #0
 8012d20:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012d22:	697b      	ldr	r3, [r7, #20]
 8012d24:	2b01      	cmp	r3, #1
 8012d26:	d11b      	bne.n	8012d60 <vTaskStartScheduler+0x8c>
	__asm volatile
 8012d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d2c:	f383 8811 	msr	BASEPRI, r3
 8012d30:	f3bf 8f6f 	isb	sy
 8012d34:	f3bf 8f4f 	dsb	sy
 8012d38:	613b      	str	r3, [r7, #16]
}
 8012d3a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012d3c:	4b15      	ldr	r3, [pc, #84]	; (8012d94 <vTaskStartScheduler+0xc0>)
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	334c      	adds	r3, #76	; 0x4c
 8012d42:	4a15      	ldr	r2, [pc, #84]	; (8012d98 <vTaskStartScheduler+0xc4>)
 8012d44:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012d46:	4b15      	ldr	r3, [pc, #84]	; (8012d9c <vTaskStartScheduler+0xc8>)
 8012d48:	f04f 32ff 	mov.w	r2, #4294967295
 8012d4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012d4e:	4b14      	ldr	r3, [pc, #80]	; (8012da0 <vTaskStartScheduler+0xcc>)
 8012d50:	2201      	movs	r2, #1
 8012d52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012d54:	4b13      	ldr	r3, [pc, #76]	; (8012da4 <vTaskStartScheduler+0xd0>)
 8012d56:	2200      	movs	r2, #0
 8012d58:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012d5a:	f000 fd71 	bl	8013840 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012d5e:	e00e      	b.n	8012d7e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012d60:	697b      	ldr	r3, [r7, #20]
 8012d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d66:	d10a      	bne.n	8012d7e <vTaskStartScheduler+0xaa>
	__asm volatile
 8012d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d6c:	f383 8811 	msr	BASEPRI, r3
 8012d70:	f3bf 8f6f 	isb	sy
 8012d74:	f3bf 8f4f 	dsb	sy
 8012d78:	60fb      	str	r3, [r7, #12]
}
 8012d7a:	bf00      	nop
 8012d7c:	e7fe      	b.n	8012d7c <vTaskStartScheduler+0xa8>
}
 8012d7e:	bf00      	nop
 8012d80:	3718      	adds	r7, #24
 8012d82:	46bd      	mov	sp, r7
 8012d84:	bd80      	pop	{r7, pc}
 8012d86:	bf00      	nop
 8012d88:	08017470 	.word	0x08017470
 8012d8c:	08013365 	.word	0x08013365
 8012d90:	2000242c 	.word	0x2000242c
 8012d94:	20002308 	.word	0x20002308
 8012d98:	200002b4 	.word	0x200002b4
 8012d9c:	20002428 	.word	0x20002428
 8012da0:	20002414 	.word	0x20002414
 8012da4:	2000240c 	.word	0x2000240c

08012da8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012da8:	b480      	push	{r7}
 8012daa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012dac:	4b04      	ldr	r3, [pc, #16]	; (8012dc0 <vTaskSuspendAll+0x18>)
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	3301      	adds	r3, #1
 8012db2:	4a03      	ldr	r2, [pc, #12]	; (8012dc0 <vTaskSuspendAll+0x18>)
 8012db4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8012db6:	bf00      	nop
 8012db8:	46bd      	mov	sp, r7
 8012dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dbe:	4770      	bx	lr
 8012dc0:	20002430 	.word	0x20002430

08012dc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012dc4:	b580      	push	{r7, lr}
 8012dc6:	b084      	sub	sp, #16
 8012dc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012dca:	2300      	movs	r3, #0
 8012dcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012dce:	2300      	movs	r3, #0
 8012dd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012dd2:	4b41      	ldr	r3, [pc, #260]	; (8012ed8 <xTaskResumeAll+0x114>)
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d10a      	bne.n	8012df0 <xTaskResumeAll+0x2c>
	__asm volatile
 8012dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dde:	f383 8811 	msr	BASEPRI, r3
 8012de2:	f3bf 8f6f 	isb	sy
 8012de6:	f3bf 8f4f 	dsb	sy
 8012dea:	603b      	str	r3, [r7, #0]
}
 8012dec:	bf00      	nop
 8012dee:	e7fe      	b.n	8012dee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012df0:	f000 fdc8 	bl	8013984 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012df4:	4b38      	ldr	r3, [pc, #224]	; (8012ed8 <xTaskResumeAll+0x114>)
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	3b01      	subs	r3, #1
 8012dfa:	4a37      	ldr	r2, [pc, #220]	; (8012ed8 <xTaskResumeAll+0x114>)
 8012dfc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012dfe:	4b36      	ldr	r3, [pc, #216]	; (8012ed8 <xTaskResumeAll+0x114>)
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d161      	bne.n	8012eca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012e06:	4b35      	ldr	r3, [pc, #212]	; (8012edc <xTaskResumeAll+0x118>)
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d05d      	beq.n	8012eca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012e0e:	e02e      	b.n	8012e6e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e10:	4b33      	ldr	r3, [pc, #204]	; (8012ee0 <xTaskResumeAll+0x11c>)
 8012e12:	68db      	ldr	r3, [r3, #12]
 8012e14:	68db      	ldr	r3, [r3, #12]
 8012e16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	3318      	adds	r3, #24
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	f7ff f80d 	bl	8011e3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	3304      	adds	r3, #4
 8012e26:	4618      	mov	r0, r3
 8012e28:	f7ff f808 	bl	8011e3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e30:	2201      	movs	r2, #1
 8012e32:	409a      	lsls	r2, r3
 8012e34:	4b2b      	ldr	r3, [pc, #172]	; (8012ee4 <xTaskResumeAll+0x120>)
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	4313      	orrs	r3, r2
 8012e3a:	4a2a      	ldr	r2, [pc, #168]	; (8012ee4 <xTaskResumeAll+0x120>)
 8012e3c:	6013      	str	r3, [r2, #0]
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e42:	4613      	mov	r3, r2
 8012e44:	009b      	lsls	r3, r3, #2
 8012e46:	4413      	add	r3, r2
 8012e48:	009b      	lsls	r3, r3, #2
 8012e4a:	4a27      	ldr	r2, [pc, #156]	; (8012ee8 <xTaskResumeAll+0x124>)
 8012e4c:	441a      	add	r2, r3
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	3304      	adds	r3, #4
 8012e52:	4619      	mov	r1, r3
 8012e54:	4610      	mov	r0, r2
 8012e56:	f7fe ff94 	bl	8011d82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e5e:	4b23      	ldr	r3, [pc, #140]	; (8012eec <xTaskResumeAll+0x128>)
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e64:	429a      	cmp	r2, r3
 8012e66:	d302      	bcc.n	8012e6e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8012e68:	4b21      	ldr	r3, [pc, #132]	; (8012ef0 <xTaskResumeAll+0x12c>)
 8012e6a:	2201      	movs	r2, #1
 8012e6c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012e6e:	4b1c      	ldr	r3, [pc, #112]	; (8012ee0 <xTaskResumeAll+0x11c>)
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d1cc      	bne.n	8012e10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d001      	beq.n	8012e80 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012e7c:	f000 fb2c 	bl	80134d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8012e80:	4b1c      	ldr	r3, [pc, #112]	; (8012ef4 <xTaskResumeAll+0x130>)
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d010      	beq.n	8012eae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012e8c:	f000 f846 	bl	8012f1c <xTaskIncrementTick>
 8012e90:	4603      	mov	r3, r0
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d002      	beq.n	8012e9c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8012e96:	4b16      	ldr	r3, [pc, #88]	; (8012ef0 <xTaskResumeAll+0x12c>)
 8012e98:	2201      	movs	r2, #1
 8012e9a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	3b01      	subs	r3, #1
 8012ea0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d1f1      	bne.n	8012e8c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8012ea8:	4b12      	ldr	r3, [pc, #72]	; (8012ef4 <xTaskResumeAll+0x130>)
 8012eaa:	2200      	movs	r2, #0
 8012eac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012eae:	4b10      	ldr	r3, [pc, #64]	; (8012ef0 <xTaskResumeAll+0x12c>)
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d009      	beq.n	8012eca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012eb6:	2301      	movs	r3, #1
 8012eb8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012eba:	4b0f      	ldr	r3, [pc, #60]	; (8012ef8 <xTaskResumeAll+0x134>)
 8012ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ec0:	601a      	str	r2, [r3, #0]
 8012ec2:	f3bf 8f4f 	dsb	sy
 8012ec6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012eca:	f000 fd8b 	bl	80139e4 <vPortExitCritical>

	return xAlreadyYielded;
 8012ece:	68bb      	ldr	r3, [r7, #8]
}
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	3710      	adds	r7, #16
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	bd80      	pop	{r7, pc}
 8012ed8:	20002430 	.word	0x20002430
 8012edc:	20002408 	.word	0x20002408
 8012ee0:	200023c8 	.word	0x200023c8
 8012ee4:	20002410 	.word	0x20002410
 8012ee8:	2000230c 	.word	0x2000230c
 8012eec:	20002308 	.word	0x20002308
 8012ef0:	2000241c 	.word	0x2000241c
 8012ef4:	20002418 	.word	0x20002418
 8012ef8:	e000ed04 	.word	0xe000ed04

08012efc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012efc:	b480      	push	{r7}
 8012efe:	b083      	sub	sp, #12
 8012f00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012f02:	4b05      	ldr	r3, [pc, #20]	; (8012f18 <xTaskGetTickCount+0x1c>)
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012f08:	687b      	ldr	r3, [r7, #4]
}
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	370c      	adds	r7, #12
 8012f0e:	46bd      	mov	sp, r7
 8012f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f14:	4770      	bx	lr
 8012f16:	bf00      	nop
 8012f18:	2000240c 	.word	0x2000240c

08012f1c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b086      	sub	sp, #24
 8012f20:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012f22:	2300      	movs	r3, #0
 8012f24:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012f26:	4b4e      	ldr	r3, [pc, #312]	; (8013060 <xTaskIncrementTick+0x144>)
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	f040 808e 	bne.w	801304c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012f30:	4b4c      	ldr	r3, [pc, #304]	; (8013064 <xTaskIncrementTick+0x148>)
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	3301      	adds	r3, #1
 8012f36:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012f38:	4a4a      	ldr	r2, [pc, #296]	; (8013064 <xTaskIncrementTick+0x148>)
 8012f3a:	693b      	ldr	r3, [r7, #16]
 8012f3c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012f3e:	693b      	ldr	r3, [r7, #16]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d120      	bne.n	8012f86 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8012f44:	4b48      	ldr	r3, [pc, #288]	; (8013068 <xTaskIncrementTick+0x14c>)
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d00a      	beq.n	8012f64 <xTaskIncrementTick+0x48>
	__asm volatile
 8012f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f52:	f383 8811 	msr	BASEPRI, r3
 8012f56:	f3bf 8f6f 	isb	sy
 8012f5a:	f3bf 8f4f 	dsb	sy
 8012f5e:	603b      	str	r3, [r7, #0]
}
 8012f60:	bf00      	nop
 8012f62:	e7fe      	b.n	8012f62 <xTaskIncrementTick+0x46>
 8012f64:	4b40      	ldr	r3, [pc, #256]	; (8013068 <xTaskIncrementTick+0x14c>)
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	60fb      	str	r3, [r7, #12]
 8012f6a:	4b40      	ldr	r3, [pc, #256]	; (801306c <xTaskIncrementTick+0x150>)
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	4a3e      	ldr	r2, [pc, #248]	; (8013068 <xTaskIncrementTick+0x14c>)
 8012f70:	6013      	str	r3, [r2, #0]
 8012f72:	4a3e      	ldr	r2, [pc, #248]	; (801306c <xTaskIncrementTick+0x150>)
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	6013      	str	r3, [r2, #0]
 8012f78:	4b3d      	ldr	r3, [pc, #244]	; (8013070 <xTaskIncrementTick+0x154>)
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	3301      	adds	r3, #1
 8012f7e:	4a3c      	ldr	r2, [pc, #240]	; (8013070 <xTaskIncrementTick+0x154>)
 8012f80:	6013      	str	r3, [r2, #0]
 8012f82:	f000 faa9 	bl	80134d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012f86:	4b3b      	ldr	r3, [pc, #236]	; (8013074 <xTaskIncrementTick+0x158>)
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	693a      	ldr	r2, [r7, #16]
 8012f8c:	429a      	cmp	r2, r3
 8012f8e:	d348      	bcc.n	8013022 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012f90:	4b35      	ldr	r3, [pc, #212]	; (8013068 <xTaskIncrementTick+0x14c>)
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d104      	bne.n	8012fa4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012f9a:	4b36      	ldr	r3, [pc, #216]	; (8013074 <xTaskIncrementTick+0x158>)
 8012f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8012fa0:	601a      	str	r2, [r3, #0]
					break;
 8012fa2:	e03e      	b.n	8013022 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012fa4:	4b30      	ldr	r3, [pc, #192]	; (8013068 <xTaskIncrementTick+0x14c>)
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	68db      	ldr	r3, [r3, #12]
 8012faa:	68db      	ldr	r3, [r3, #12]
 8012fac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012fae:	68bb      	ldr	r3, [r7, #8]
 8012fb0:	685b      	ldr	r3, [r3, #4]
 8012fb2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012fb4:	693a      	ldr	r2, [r7, #16]
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	429a      	cmp	r2, r3
 8012fba:	d203      	bcs.n	8012fc4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012fbc:	4a2d      	ldr	r2, [pc, #180]	; (8013074 <xTaskIncrementTick+0x158>)
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012fc2:	e02e      	b.n	8013022 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012fc4:	68bb      	ldr	r3, [r7, #8]
 8012fc6:	3304      	adds	r3, #4
 8012fc8:	4618      	mov	r0, r3
 8012fca:	f7fe ff37 	bl	8011e3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012fce:	68bb      	ldr	r3, [r7, #8]
 8012fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d004      	beq.n	8012fe0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012fd6:	68bb      	ldr	r3, [r7, #8]
 8012fd8:	3318      	adds	r3, #24
 8012fda:	4618      	mov	r0, r3
 8012fdc:	f7fe ff2e 	bl	8011e3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012fe0:	68bb      	ldr	r3, [r7, #8]
 8012fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fe4:	2201      	movs	r2, #1
 8012fe6:	409a      	lsls	r2, r3
 8012fe8:	4b23      	ldr	r3, [pc, #140]	; (8013078 <xTaskIncrementTick+0x15c>)
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	4313      	orrs	r3, r2
 8012fee:	4a22      	ldr	r2, [pc, #136]	; (8013078 <xTaskIncrementTick+0x15c>)
 8012ff0:	6013      	str	r3, [r2, #0]
 8012ff2:	68bb      	ldr	r3, [r7, #8]
 8012ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ff6:	4613      	mov	r3, r2
 8012ff8:	009b      	lsls	r3, r3, #2
 8012ffa:	4413      	add	r3, r2
 8012ffc:	009b      	lsls	r3, r3, #2
 8012ffe:	4a1f      	ldr	r2, [pc, #124]	; (801307c <xTaskIncrementTick+0x160>)
 8013000:	441a      	add	r2, r3
 8013002:	68bb      	ldr	r3, [r7, #8]
 8013004:	3304      	adds	r3, #4
 8013006:	4619      	mov	r1, r3
 8013008:	4610      	mov	r0, r2
 801300a:	f7fe feba 	bl	8011d82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801300e:	68bb      	ldr	r3, [r7, #8]
 8013010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013012:	4b1b      	ldr	r3, [pc, #108]	; (8013080 <xTaskIncrementTick+0x164>)
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013018:	429a      	cmp	r2, r3
 801301a:	d3b9      	bcc.n	8012f90 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801301c:	2301      	movs	r3, #1
 801301e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013020:	e7b6      	b.n	8012f90 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013022:	4b17      	ldr	r3, [pc, #92]	; (8013080 <xTaskIncrementTick+0x164>)
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013028:	4914      	ldr	r1, [pc, #80]	; (801307c <xTaskIncrementTick+0x160>)
 801302a:	4613      	mov	r3, r2
 801302c:	009b      	lsls	r3, r3, #2
 801302e:	4413      	add	r3, r2
 8013030:	009b      	lsls	r3, r3, #2
 8013032:	440b      	add	r3, r1
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	2b01      	cmp	r3, #1
 8013038:	d901      	bls.n	801303e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 801303a:	2301      	movs	r3, #1
 801303c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801303e:	4b11      	ldr	r3, [pc, #68]	; (8013084 <xTaskIncrementTick+0x168>)
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d007      	beq.n	8013056 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8013046:	2301      	movs	r3, #1
 8013048:	617b      	str	r3, [r7, #20]
 801304a:	e004      	b.n	8013056 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801304c:	4b0e      	ldr	r3, [pc, #56]	; (8013088 <xTaskIncrementTick+0x16c>)
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	3301      	adds	r3, #1
 8013052:	4a0d      	ldr	r2, [pc, #52]	; (8013088 <xTaskIncrementTick+0x16c>)
 8013054:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8013056:	697b      	ldr	r3, [r7, #20]
}
 8013058:	4618      	mov	r0, r3
 801305a:	3718      	adds	r7, #24
 801305c:	46bd      	mov	sp, r7
 801305e:	bd80      	pop	{r7, pc}
 8013060:	20002430 	.word	0x20002430
 8013064:	2000240c 	.word	0x2000240c
 8013068:	200023c0 	.word	0x200023c0
 801306c:	200023c4 	.word	0x200023c4
 8013070:	20002420 	.word	0x20002420
 8013074:	20002428 	.word	0x20002428
 8013078:	20002410 	.word	0x20002410
 801307c:	2000230c 	.word	0x2000230c
 8013080:	20002308 	.word	0x20002308
 8013084:	2000241c 	.word	0x2000241c
 8013088:	20002418 	.word	0x20002418

0801308c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801308c:	b480      	push	{r7}
 801308e:	b087      	sub	sp, #28
 8013090:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013092:	4b29      	ldr	r3, [pc, #164]	; (8013138 <vTaskSwitchContext+0xac>)
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d003      	beq.n	80130a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801309a:	4b28      	ldr	r3, [pc, #160]	; (801313c <vTaskSwitchContext+0xb0>)
 801309c:	2201      	movs	r2, #1
 801309e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80130a0:	e044      	b.n	801312c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80130a2:	4b26      	ldr	r3, [pc, #152]	; (801313c <vTaskSwitchContext+0xb0>)
 80130a4:	2200      	movs	r2, #0
 80130a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80130a8:	4b25      	ldr	r3, [pc, #148]	; (8013140 <vTaskSwitchContext+0xb4>)
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	fab3 f383 	clz	r3, r3
 80130b4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80130b6:	7afb      	ldrb	r3, [r7, #11]
 80130b8:	f1c3 031f 	rsb	r3, r3, #31
 80130bc:	617b      	str	r3, [r7, #20]
 80130be:	4921      	ldr	r1, [pc, #132]	; (8013144 <vTaskSwitchContext+0xb8>)
 80130c0:	697a      	ldr	r2, [r7, #20]
 80130c2:	4613      	mov	r3, r2
 80130c4:	009b      	lsls	r3, r3, #2
 80130c6:	4413      	add	r3, r2
 80130c8:	009b      	lsls	r3, r3, #2
 80130ca:	440b      	add	r3, r1
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d10a      	bne.n	80130e8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80130d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130d6:	f383 8811 	msr	BASEPRI, r3
 80130da:	f3bf 8f6f 	isb	sy
 80130de:	f3bf 8f4f 	dsb	sy
 80130e2:	607b      	str	r3, [r7, #4]
}
 80130e4:	bf00      	nop
 80130e6:	e7fe      	b.n	80130e6 <vTaskSwitchContext+0x5a>
 80130e8:	697a      	ldr	r2, [r7, #20]
 80130ea:	4613      	mov	r3, r2
 80130ec:	009b      	lsls	r3, r3, #2
 80130ee:	4413      	add	r3, r2
 80130f0:	009b      	lsls	r3, r3, #2
 80130f2:	4a14      	ldr	r2, [pc, #80]	; (8013144 <vTaskSwitchContext+0xb8>)
 80130f4:	4413      	add	r3, r2
 80130f6:	613b      	str	r3, [r7, #16]
 80130f8:	693b      	ldr	r3, [r7, #16]
 80130fa:	685b      	ldr	r3, [r3, #4]
 80130fc:	685a      	ldr	r2, [r3, #4]
 80130fe:	693b      	ldr	r3, [r7, #16]
 8013100:	605a      	str	r2, [r3, #4]
 8013102:	693b      	ldr	r3, [r7, #16]
 8013104:	685a      	ldr	r2, [r3, #4]
 8013106:	693b      	ldr	r3, [r7, #16]
 8013108:	3308      	adds	r3, #8
 801310a:	429a      	cmp	r2, r3
 801310c:	d104      	bne.n	8013118 <vTaskSwitchContext+0x8c>
 801310e:	693b      	ldr	r3, [r7, #16]
 8013110:	685b      	ldr	r3, [r3, #4]
 8013112:	685a      	ldr	r2, [r3, #4]
 8013114:	693b      	ldr	r3, [r7, #16]
 8013116:	605a      	str	r2, [r3, #4]
 8013118:	693b      	ldr	r3, [r7, #16]
 801311a:	685b      	ldr	r3, [r3, #4]
 801311c:	68db      	ldr	r3, [r3, #12]
 801311e:	4a0a      	ldr	r2, [pc, #40]	; (8013148 <vTaskSwitchContext+0xbc>)
 8013120:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013122:	4b09      	ldr	r3, [pc, #36]	; (8013148 <vTaskSwitchContext+0xbc>)
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	334c      	adds	r3, #76	; 0x4c
 8013128:	4a08      	ldr	r2, [pc, #32]	; (801314c <vTaskSwitchContext+0xc0>)
 801312a:	6013      	str	r3, [r2, #0]
}
 801312c:	bf00      	nop
 801312e:	371c      	adds	r7, #28
 8013130:	46bd      	mov	sp, r7
 8013132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013136:	4770      	bx	lr
 8013138:	20002430 	.word	0x20002430
 801313c:	2000241c 	.word	0x2000241c
 8013140:	20002410 	.word	0x20002410
 8013144:	2000230c 	.word	0x2000230c
 8013148:	20002308 	.word	0x20002308
 801314c:	200002b4 	.word	0x200002b4

08013150 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013150:	b580      	push	{r7, lr}
 8013152:	b084      	sub	sp, #16
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
 8013158:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d10a      	bne.n	8013176 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8013160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013164:	f383 8811 	msr	BASEPRI, r3
 8013168:	f3bf 8f6f 	isb	sy
 801316c:	f3bf 8f4f 	dsb	sy
 8013170:	60fb      	str	r3, [r7, #12]
}
 8013172:	bf00      	nop
 8013174:	e7fe      	b.n	8013174 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013176:	4b07      	ldr	r3, [pc, #28]	; (8013194 <vTaskPlaceOnEventList+0x44>)
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	3318      	adds	r3, #24
 801317c:	4619      	mov	r1, r3
 801317e:	6878      	ldr	r0, [r7, #4]
 8013180:	f7fe fe23 	bl	8011dca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013184:	2101      	movs	r1, #1
 8013186:	6838      	ldr	r0, [r7, #0]
 8013188:	f000 fa6a 	bl	8013660 <prvAddCurrentTaskToDelayedList>
}
 801318c:	bf00      	nop
 801318e:	3710      	adds	r7, #16
 8013190:	46bd      	mov	sp, r7
 8013192:	bd80      	pop	{r7, pc}
 8013194:	20002308 	.word	0x20002308

08013198 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013198:	b580      	push	{r7, lr}
 801319a:	b086      	sub	sp, #24
 801319c:	af00      	add	r7, sp, #0
 801319e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	68db      	ldr	r3, [r3, #12]
 80131a4:	68db      	ldr	r3, [r3, #12]
 80131a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80131a8:	693b      	ldr	r3, [r7, #16]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d10a      	bne.n	80131c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80131ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131b2:	f383 8811 	msr	BASEPRI, r3
 80131b6:	f3bf 8f6f 	isb	sy
 80131ba:	f3bf 8f4f 	dsb	sy
 80131be:	60fb      	str	r3, [r7, #12]
}
 80131c0:	bf00      	nop
 80131c2:	e7fe      	b.n	80131c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80131c4:	693b      	ldr	r3, [r7, #16]
 80131c6:	3318      	adds	r3, #24
 80131c8:	4618      	mov	r0, r3
 80131ca:	f7fe fe37 	bl	8011e3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80131ce:	4b1d      	ldr	r3, [pc, #116]	; (8013244 <xTaskRemoveFromEventList+0xac>)
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d11c      	bne.n	8013210 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80131d6:	693b      	ldr	r3, [r7, #16]
 80131d8:	3304      	adds	r3, #4
 80131da:	4618      	mov	r0, r3
 80131dc:	f7fe fe2e 	bl	8011e3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80131e0:	693b      	ldr	r3, [r7, #16]
 80131e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131e4:	2201      	movs	r2, #1
 80131e6:	409a      	lsls	r2, r3
 80131e8:	4b17      	ldr	r3, [pc, #92]	; (8013248 <xTaskRemoveFromEventList+0xb0>)
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	4313      	orrs	r3, r2
 80131ee:	4a16      	ldr	r2, [pc, #88]	; (8013248 <xTaskRemoveFromEventList+0xb0>)
 80131f0:	6013      	str	r3, [r2, #0]
 80131f2:	693b      	ldr	r3, [r7, #16]
 80131f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131f6:	4613      	mov	r3, r2
 80131f8:	009b      	lsls	r3, r3, #2
 80131fa:	4413      	add	r3, r2
 80131fc:	009b      	lsls	r3, r3, #2
 80131fe:	4a13      	ldr	r2, [pc, #76]	; (801324c <xTaskRemoveFromEventList+0xb4>)
 8013200:	441a      	add	r2, r3
 8013202:	693b      	ldr	r3, [r7, #16]
 8013204:	3304      	adds	r3, #4
 8013206:	4619      	mov	r1, r3
 8013208:	4610      	mov	r0, r2
 801320a:	f7fe fdba 	bl	8011d82 <vListInsertEnd>
 801320e:	e005      	b.n	801321c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013210:	693b      	ldr	r3, [r7, #16]
 8013212:	3318      	adds	r3, #24
 8013214:	4619      	mov	r1, r3
 8013216:	480e      	ldr	r0, [pc, #56]	; (8013250 <xTaskRemoveFromEventList+0xb8>)
 8013218:	f7fe fdb3 	bl	8011d82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801321c:	693b      	ldr	r3, [r7, #16]
 801321e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013220:	4b0c      	ldr	r3, [pc, #48]	; (8013254 <xTaskRemoveFromEventList+0xbc>)
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013226:	429a      	cmp	r2, r3
 8013228:	d905      	bls.n	8013236 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801322a:	2301      	movs	r3, #1
 801322c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801322e:	4b0a      	ldr	r3, [pc, #40]	; (8013258 <xTaskRemoveFromEventList+0xc0>)
 8013230:	2201      	movs	r2, #1
 8013232:	601a      	str	r2, [r3, #0]
 8013234:	e001      	b.n	801323a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8013236:	2300      	movs	r3, #0
 8013238:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801323a:	697b      	ldr	r3, [r7, #20]
}
 801323c:	4618      	mov	r0, r3
 801323e:	3718      	adds	r7, #24
 8013240:	46bd      	mov	sp, r7
 8013242:	bd80      	pop	{r7, pc}
 8013244:	20002430 	.word	0x20002430
 8013248:	20002410 	.word	0x20002410
 801324c:	2000230c 	.word	0x2000230c
 8013250:	200023c8 	.word	0x200023c8
 8013254:	20002308 	.word	0x20002308
 8013258:	2000241c 	.word	0x2000241c

0801325c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801325c:	b480      	push	{r7}
 801325e:	b083      	sub	sp, #12
 8013260:	af00      	add	r7, sp, #0
 8013262:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013264:	4b06      	ldr	r3, [pc, #24]	; (8013280 <vTaskInternalSetTimeOutState+0x24>)
 8013266:	681a      	ldr	r2, [r3, #0]
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801326c:	4b05      	ldr	r3, [pc, #20]	; (8013284 <vTaskInternalSetTimeOutState+0x28>)
 801326e:	681a      	ldr	r2, [r3, #0]
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	605a      	str	r2, [r3, #4]
}
 8013274:	bf00      	nop
 8013276:	370c      	adds	r7, #12
 8013278:	46bd      	mov	sp, r7
 801327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801327e:	4770      	bx	lr
 8013280:	20002420 	.word	0x20002420
 8013284:	2000240c 	.word	0x2000240c

08013288 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013288:	b580      	push	{r7, lr}
 801328a:	b088      	sub	sp, #32
 801328c:	af00      	add	r7, sp, #0
 801328e:	6078      	str	r0, [r7, #4]
 8013290:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d10a      	bne.n	80132ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8013298:	f04f 0350 	mov.w	r3, #80	; 0x50
 801329c:	f383 8811 	msr	BASEPRI, r3
 80132a0:	f3bf 8f6f 	isb	sy
 80132a4:	f3bf 8f4f 	dsb	sy
 80132a8:	613b      	str	r3, [r7, #16]
}
 80132aa:	bf00      	nop
 80132ac:	e7fe      	b.n	80132ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80132ae:	683b      	ldr	r3, [r7, #0]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d10a      	bne.n	80132ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80132b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132b8:	f383 8811 	msr	BASEPRI, r3
 80132bc:	f3bf 8f6f 	isb	sy
 80132c0:	f3bf 8f4f 	dsb	sy
 80132c4:	60fb      	str	r3, [r7, #12]
}
 80132c6:	bf00      	nop
 80132c8:	e7fe      	b.n	80132c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80132ca:	f000 fb5b 	bl	8013984 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80132ce:	4b1d      	ldr	r3, [pc, #116]	; (8013344 <xTaskCheckForTimeOut+0xbc>)
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	685b      	ldr	r3, [r3, #4]
 80132d8:	69ba      	ldr	r2, [r7, #24]
 80132da:	1ad3      	subs	r3, r2, r3
 80132dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80132de:	683b      	ldr	r3, [r7, #0]
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132e6:	d102      	bne.n	80132ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80132e8:	2300      	movs	r3, #0
 80132ea:	61fb      	str	r3, [r7, #28]
 80132ec:	e023      	b.n	8013336 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	681a      	ldr	r2, [r3, #0]
 80132f2:	4b15      	ldr	r3, [pc, #84]	; (8013348 <xTaskCheckForTimeOut+0xc0>)
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	429a      	cmp	r2, r3
 80132f8:	d007      	beq.n	801330a <xTaskCheckForTimeOut+0x82>
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	685b      	ldr	r3, [r3, #4]
 80132fe:	69ba      	ldr	r2, [r7, #24]
 8013300:	429a      	cmp	r2, r3
 8013302:	d302      	bcc.n	801330a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013304:	2301      	movs	r3, #1
 8013306:	61fb      	str	r3, [r7, #28]
 8013308:	e015      	b.n	8013336 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801330a:	683b      	ldr	r3, [r7, #0]
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	697a      	ldr	r2, [r7, #20]
 8013310:	429a      	cmp	r2, r3
 8013312:	d20b      	bcs.n	801332c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013314:	683b      	ldr	r3, [r7, #0]
 8013316:	681a      	ldr	r2, [r3, #0]
 8013318:	697b      	ldr	r3, [r7, #20]
 801331a:	1ad2      	subs	r2, r2, r3
 801331c:	683b      	ldr	r3, [r7, #0]
 801331e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013320:	6878      	ldr	r0, [r7, #4]
 8013322:	f7ff ff9b 	bl	801325c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013326:	2300      	movs	r3, #0
 8013328:	61fb      	str	r3, [r7, #28]
 801332a:	e004      	b.n	8013336 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801332c:	683b      	ldr	r3, [r7, #0]
 801332e:	2200      	movs	r2, #0
 8013330:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013332:	2301      	movs	r3, #1
 8013334:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013336:	f000 fb55 	bl	80139e4 <vPortExitCritical>

	return xReturn;
 801333a:	69fb      	ldr	r3, [r7, #28]
}
 801333c:	4618      	mov	r0, r3
 801333e:	3720      	adds	r7, #32
 8013340:	46bd      	mov	sp, r7
 8013342:	bd80      	pop	{r7, pc}
 8013344:	2000240c 	.word	0x2000240c
 8013348:	20002420 	.word	0x20002420

0801334c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801334c:	b480      	push	{r7}
 801334e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013350:	4b03      	ldr	r3, [pc, #12]	; (8013360 <vTaskMissedYield+0x14>)
 8013352:	2201      	movs	r2, #1
 8013354:	601a      	str	r2, [r3, #0]
}
 8013356:	bf00      	nop
 8013358:	46bd      	mov	sp, r7
 801335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801335e:	4770      	bx	lr
 8013360:	2000241c 	.word	0x2000241c

08013364 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013364:	b580      	push	{r7, lr}
 8013366:	b082      	sub	sp, #8
 8013368:	af00      	add	r7, sp, #0
 801336a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801336c:	f000 f852 	bl	8013414 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013370:	4b06      	ldr	r3, [pc, #24]	; (801338c <prvIdleTask+0x28>)
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	2b01      	cmp	r3, #1
 8013376:	d9f9      	bls.n	801336c <prvIdleTask+0x8>
			{
				taskYIELD();
 8013378:	4b05      	ldr	r3, [pc, #20]	; (8013390 <prvIdleTask+0x2c>)
 801337a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801337e:	601a      	str	r2, [r3, #0]
 8013380:	f3bf 8f4f 	dsb	sy
 8013384:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013388:	e7f0      	b.n	801336c <prvIdleTask+0x8>
 801338a:	bf00      	nop
 801338c:	2000230c 	.word	0x2000230c
 8013390:	e000ed04 	.word	0xe000ed04

08013394 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013394:	b580      	push	{r7, lr}
 8013396:	b082      	sub	sp, #8
 8013398:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801339a:	2300      	movs	r3, #0
 801339c:	607b      	str	r3, [r7, #4]
 801339e:	e00c      	b.n	80133ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80133a0:	687a      	ldr	r2, [r7, #4]
 80133a2:	4613      	mov	r3, r2
 80133a4:	009b      	lsls	r3, r3, #2
 80133a6:	4413      	add	r3, r2
 80133a8:	009b      	lsls	r3, r3, #2
 80133aa:	4a12      	ldr	r2, [pc, #72]	; (80133f4 <prvInitialiseTaskLists+0x60>)
 80133ac:	4413      	add	r3, r2
 80133ae:	4618      	mov	r0, r3
 80133b0:	f7fe fcba 	bl	8011d28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	3301      	adds	r3, #1
 80133b8:	607b      	str	r3, [r7, #4]
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	2b06      	cmp	r3, #6
 80133be:	d9ef      	bls.n	80133a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80133c0:	480d      	ldr	r0, [pc, #52]	; (80133f8 <prvInitialiseTaskLists+0x64>)
 80133c2:	f7fe fcb1 	bl	8011d28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80133c6:	480d      	ldr	r0, [pc, #52]	; (80133fc <prvInitialiseTaskLists+0x68>)
 80133c8:	f7fe fcae 	bl	8011d28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80133cc:	480c      	ldr	r0, [pc, #48]	; (8013400 <prvInitialiseTaskLists+0x6c>)
 80133ce:	f7fe fcab 	bl	8011d28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80133d2:	480c      	ldr	r0, [pc, #48]	; (8013404 <prvInitialiseTaskLists+0x70>)
 80133d4:	f7fe fca8 	bl	8011d28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80133d8:	480b      	ldr	r0, [pc, #44]	; (8013408 <prvInitialiseTaskLists+0x74>)
 80133da:	f7fe fca5 	bl	8011d28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80133de:	4b0b      	ldr	r3, [pc, #44]	; (801340c <prvInitialiseTaskLists+0x78>)
 80133e0:	4a05      	ldr	r2, [pc, #20]	; (80133f8 <prvInitialiseTaskLists+0x64>)
 80133e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80133e4:	4b0a      	ldr	r3, [pc, #40]	; (8013410 <prvInitialiseTaskLists+0x7c>)
 80133e6:	4a05      	ldr	r2, [pc, #20]	; (80133fc <prvInitialiseTaskLists+0x68>)
 80133e8:	601a      	str	r2, [r3, #0]
}
 80133ea:	bf00      	nop
 80133ec:	3708      	adds	r7, #8
 80133ee:	46bd      	mov	sp, r7
 80133f0:	bd80      	pop	{r7, pc}
 80133f2:	bf00      	nop
 80133f4:	2000230c 	.word	0x2000230c
 80133f8:	20002398 	.word	0x20002398
 80133fc:	200023ac 	.word	0x200023ac
 8013400:	200023c8 	.word	0x200023c8
 8013404:	200023dc 	.word	0x200023dc
 8013408:	200023f4 	.word	0x200023f4
 801340c:	200023c0 	.word	0x200023c0
 8013410:	200023c4 	.word	0x200023c4

08013414 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013414:	b580      	push	{r7, lr}
 8013416:	b082      	sub	sp, #8
 8013418:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801341a:	e019      	b.n	8013450 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801341c:	f000 fab2 	bl	8013984 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013420:	4b10      	ldr	r3, [pc, #64]	; (8013464 <prvCheckTasksWaitingTermination+0x50>)
 8013422:	68db      	ldr	r3, [r3, #12]
 8013424:	68db      	ldr	r3, [r3, #12]
 8013426:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	3304      	adds	r3, #4
 801342c:	4618      	mov	r0, r3
 801342e:	f7fe fd05 	bl	8011e3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013432:	4b0d      	ldr	r3, [pc, #52]	; (8013468 <prvCheckTasksWaitingTermination+0x54>)
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	3b01      	subs	r3, #1
 8013438:	4a0b      	ldr	r2, [pc, #44]	; (8013468 <prvCheckTasksWaitingTermination+0x54>)
 801343a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801343c:	4b0b      	ldr	r3, [pc, #44]	; (801346c <prvCheckTasksWaitingTermination+0x58>)
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	3b01      	subs	r3, #1
 8013442:	4a0a      	ldr	r2, [pc, #40]	; (801346c <prvCheckTasksWaitingTermination+0x58>)
 8013444:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013446:	f000 facd 	bl	80139e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801344a:	6878      	ldr	r0, [r7, #4]
 801344c:	f000 f810 	bl	8013470 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013450:	4b06      	ldr	r3, [pc, #24]	; (801346c <prvCheckTasksWaitingTermination+0x58>)
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d1e1      	bne.n	801341c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013458:	bf00      	nop
 801345a:	bf00      	nop
 801345c:	3708      	adds	r7, #8
 801345e:	46bd      	mov	sp, r7
 8013460:	bd80      	pop	{r7, pc}
 8013462:	bf00      	nop
 8013464:	200023dc 	.word	0x200023dc
 8013468:	20002408 	.word	0x20002408
 801346c:	200023f0 	.word	0x200023f0

08013470 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013470:	b580      	push	{r7, lr}
 8013472:	b084      	sub	sp, #16
 8013474:	af00      	add	r7, sp, #0
 8013476:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	334c      	adds	r3, #76	; 0x4c
 801347c:	4618      	mov	r0, r3
 801347e:	f001 fda3 	bl	8014fc8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8013488:	2b00      	cmp	r3, #0
 801348a:	d108      	bne.n	801349e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013490:	4618      	mov	r0, r3
 8013492:	f000 fc65 	bl	8013d60 <vPortFree>
				vPortFree( pxTCB );
 8013496:	6878      	ldr	r0, [r7, #4]
 8013498:	f000 fc62 	bl	8013d60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801349c:	e018      	b.n	80134d0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80134a4:	2b01      	cmp	r3, #1
 80134a6:	d103      	bne.n	80134b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80134a8:	6878      	ldr	r0, [r7, #4]
 80134aa:	f000 fc59 	bl	8013d60 <vPortFree>
	}
 80134ae:	e00f      	b.n	80134d0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80134b6:	2b02      	cmp	r3, #2
 80134b8:	d00a      	beq.n	80134d0 <prvDeleteTCB+0x60>
	__asm volatile
 80134ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134be:	f383 8811 	msr	BASEPRI, r3
 80134c2:	f3bf 8f6f 	isb	sy
 80134c6:	f3bf 8f4f 	dsb	sy
 80134ca:	60fb      	str	r3, [r7, #12]
}
 80134cc:	bf00      	nop
 80134ce:	e7fe      	b.n	80134ce <prvDeleteTCB+0x5e>
	}
 80134d0:	bf00      	nop
 80134d2:	3710      	adds	r7, #16
 80134d4:	46bd      	mov	sp, r7
 80134d6:	bd80      	pop	{r7, pc}

080134d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80134d8:	b480      	push	{r7}
 80134da:	b083      	sub	sp, #12
 80134dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80134de:	4b0c      	ldr	r3, [pc, #48]	; (8013510 <prvResetNextTaskUnblockTime+0x38>)
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d104      	bne.n	80134f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80134e8:	4b0a      	ldr	r3, [pc, #40]	; (8013514 <prvResetNextTaskUnblockTime+0x3c>)
 80134ea:	f04f 32ff 	mov.w	r2, #4294967295
 80134ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80134f0:	e008      	b.n	8013504 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80134f2:	4b07      	ldr	r3, [pc, #28]	; (8013510 <prvResetNextTaskUnblockTime+0x38>)
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	68db      	ldr	r3, [r3, #12]
 80134f8:	68db      	ldr	r3, [r3, #12]
 80134fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	685b      	ldr	r3, [r3, #4]
 8013500:	4a04      	ldr	r2, [pc, #16]	; (8013514 <prvResetNextTaskUnblockTime+0x3c>)
 8013502:	6013      	str	r3, [r2, #0]
}
 8013504:	bf00      	nop
 8013506:	370c      	adds	r7, #12
 8013508:	46bd      	mov	sp, r7
 801350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801350e:	4770      	bx	lr
 8013510:	200023c0 	.word	0x200023c0
 8013514:	20002428 	.word	0x20002428

08013518 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013518:	b480      	push	{r7}
 801351a:	b083      	sub	sp, #12
 801351c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801351e:	4b0b      	ldr	r3, [pc, #44]	; (801354c <xTaskGetSchedulerState+0x34>)
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d102      	bne.n	801352c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013526:	2301      	movs	r3, #1
 8013528:	607b      	str	r3, [r7, #4]
 801352a:	e008      	b.n	801353e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801352c:	4b08      	ldr	r3, [pc, #32]	; (8013550 <xTaskGetSchedulerState+0x38>)
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d102      	bne.n	801353a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013534:	2302      	movs	r3, #2
 8013536:	607b      	str	r3, [r7, #4]
 8013538:	e001      	b.n	801353e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801353a:	2300      	movs	r3, #0
 801353c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801353e:	687b      	ldr	r3, [r7, #4]
	}
 8013540:	4618      	mov	r0, r3
 8013542:	370c      	adds	r7, #12
 8013544:	46bd      	mov	sp, r7
 8013546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801354a:	4770      	bx	lr
 801354c:	20002414 	.word	0x20002414
 8013550:	20002430 	.word	0x20002430

08013554 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013554:	b580      	push	{r7, lr}
 8013556:	b086      	sub	sp, #24
 8013558:	af00      	add	r7, sp, #0
 801355a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013560:	2300      	movs	r3, #0
 8013562:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d06e      	beq.n	8013648 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801356a:	4b3a      	ldr	r3, [pc, #232]	; (8013654 <xTaskPriorityDisinherit+0x100>)
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	693a      	ldr	r2, [r7, #16]
 8013570:	429a      	cmp	r2, r3
 8013572:	d00a      	beq.n	801358a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8013574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013578:	f383 8811 	msr	BASEPRI, r3
 801357c:	f3bf 8f6f 	isb	sy
 8013580:	f3bf 8f4f 	dsb	sy
 8013584:	60fb      	str	r3, [r7, #12]
}
 8013586:	bf00      	nop
 8013588:	e7fe      	b.n	8013588 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801358a:	693b      	ldr	r3, [r7, #16]
 801358c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801358e:	2b00      	cmp	r3, #0
 8013590:	d10a      	bne.n	80135a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8013592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013596:	f383 8811 	msr	BASEPRI, r3
 801359a:	f3bf 8f6f 	isb	sy
 801359e:	f3bf 8f4f 	dsb	sy
 80135a2:	60bb      	str	r3, [r7, #8]
}
 80135a4:	bf00      	nop
 80135a6:	e7fe      	b.n	80135a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80135a8:	693b      	ldr	r3, [r7, #16]
 80135aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80135ac:	1e5a      	subs	r2, r3, #1
 80135ae:	693b      	ldr	r3, [r7, #16]
 80135b0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80135b2:	693b      	ldr	r3, [r7, #16]
 80135b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135b6:	693b      	ldr	r3, [r7, #16]
 80135b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80135ba:	429a      	cmp	r2, r3
 80135bc:	d044      	beq.n	8013648 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80135be:	693b      	ldr	r3, [r7, #16]
 80135c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d140      	bne.n	8013648 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80135c6:	693b      	ldr	r3, [r7, #16]
 80135c8:	3304      	adds	r3, #4
 80135ca:	4618      	mov	r0, r3
 80135cc:	f7fe fc36 	bl	8011e3c <uxListRemove>
 80135d0:	4603      	mov	r3, r0
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d115      	bne.n	8013602 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80135d6:	693b      	ldr	r3, [r7, #16]
 80135d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135da:	491f      	ldr	r1, [pc, #124]	; (8013658 <xTaskPriorityDisinherit+0x104>)
 80135dc:	4613      	mov	r3, r2
 80135de:	009b      	lsls	r3, r3, #2
 80135e0:	4413      	add	r3, r2
 80135e2:	009b      	lsls	r3, r3, #2
 80135e4:	440b      	add	r3, r1
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d10a      	bne.n	8013602 <xTaskPriorityDisinherit+0xae>
 80135ec:	693b      	ldr	r3, [r7, #16]
 80135ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135f0:	2201      	movs	r2, #1
 80135f2:	fa02 f303 	lsl.w	r3, r2, r3
 80135f6:	43da      	mvns	r2, r3
 80135f8:	4b18      	ldr	r3, [pc, #96]	; (801365c <xTaskPriorityDisinherit+0x108>)
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	4013      	ands	r3, r2
 80135fe:	4a17      	ldr	r2, [pc, #92]	; (801365c <xTaskPriorityDisinherit+0x108>)
 8013600:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013602:	693b      	ldr	r3, [r7, #16]
 8013604:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013606:	693b      	ldr	r3, [r7, #16]
 8013608:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801360a:	693b      	ldr	r3, [r7, #16]
 801360c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801360e:	f1c3 0207 	rsb	r2, r3, #7
 8013612:	693b      	ldr	r3, [r7, #16]
 8013614:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013616:	693b      	ldr	r3, [r7, #16]
 8013618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801361a:	2201      	movs	r2, #1
 801361c:	409a      	lsls	r2, r3
 801361e:	4b0f      	ldr	r3, [pc, #60]	; (801365c <xTaskPriorityDisinherit+0x108>)
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	4313      	orrs	r3, r2
 8013624:	4a0d      	ldr	r2, [pc, #52]	; (801365c <xTaskPriorityDisinherit+0x108>)
 8013626:	6013      	str	r3, [r2, #0]
 8013628:	693b      	ldr	r3, [r7, #16]
 801362a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801362c:	4613      	mov	r3, r2
 801362e:	009b      	lsls	r3, r3, #2
 8013630:	4413      	add	r3, r2
 8013632:	009b      	lsls	r3, r3, #2
 8013634:	4a08      	ldr	r2, [pc, #32]	; (8013658 <xTaskPriorityDisinherit+0x104>)
 8013636:	441a      	add	r2, r3
 8013638:	693b      	ldr	r3, [r7, #16]
 801363a:	3304      	adds	r3, #4
 801363c:	4619      	mov	r1, r3
 801363e:	4610      	mov	r0, r2
 8013640:	f7fe fb9f 	bl	8011d82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013644:	2301      	movs	r3, #1
 8013646:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013648:	697b      	ldr	r3, [r7, #20]
	}
 801364a:	4618      	mov	r0, r3
 801364c:	3718      	adds	r7, #24
 801364e:	46bd      	mov	sp, r7
 8013650:	bd80      	pop	{r7, pc}
 8013652:	bf00      	nop
 8013654:	20002308 	.word	0x20002308
 8013658:	2000230c 	.word	0x2000230c
 801365c:	20002410 	.word	0x20002410

08013660 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013660:	b580      	push	{r7, lr}
 8013662:	b084      	sub	sp, #16
 8013664:	af00      	add	r7, sp, #0
 8013666:	6078      	str	r0, [r7, #4]
 8013668:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801366a:	4b29      	ldr	r3, [pc, #164]	; (8013710 <prvAddCurrentTaskToDelayedList+0xb0>)
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013670:	4b28      	ldr	r3, [pc, #160]	; (8013714 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	3304      	adds	r3, #4
 8013676:	4618      	mov	r0, r3
 8013678:	f7fe fbe0 	bl	8011e3c <uxListRemove>
 801367c:	4603      	mov	r3, r0
 801367e:	2b00      	cmp	r3, #0
 8013680:	d10b      	bne.n	801369a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8013682:	4b24      	ldr	r3, [pc, #144]	; (8013714 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013688:	2201      	movs	r2, #1
 801368a:	fa02 f303 	lsl.w	r3, r2, r3
 801368e:	43da      	mvns	r2, r3
 8013690:	4b21      	ldr	r3, [pc, #132]	; (8013718 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	4013      	ands	r3, r2
 8013696:	4a20      	ldr	r2, [pc, #128]	; (8013718 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013698:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136a0:	d10a      	bne.n	80136b8 <prvAddCurrentTaskToDelayedList+0x58>
 80136a2:	683b      	ldr	r3, [r7, #0]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d007      	beq.n	80136b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80136a8:	4b1a      	ldr	r3, [pc, #104]	; (8013714 <prvAddCurrentTaskToDelayedList+0xb4>)
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	3304      	adds	r3, #4
 80136ae:	4619      	mov	r1, r3
 80136b0:	481a      	ldr	r0, [pc, #104]	; (801371c <prvAddCurrentTaskToDelayedList+0xbc>)
 80136b2:	f7fe fb66 	bl	8011d82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80136b6:	e026      	b.n	8013706 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80136b8:	68fa      	ldr	r2, [r7, #12]
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	4413      	add	r3, r2
 80136be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80136c0:	4b14      	ldr	r3, [pc, #80]	; (8013714 <prvAddCurrentTaskToDelayedList+0xb4>)
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	68ba      	ldr	r2, [r7, #8]
 80136c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80136c8:	68ba      	ldr	r2, [r7, #8]
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	429a      	cmp	r2, r3
 80136ce:	d209      	bcs.n	80136e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80136d0:	4b13      	ldr	r3, [pc, #76]	; (8013720 <prvAddCurrentTaskToDelayedList+0xc0>)
 80136d2:	681a      	ldr	r2, [r3, #0]
 80136d4:	4b0f      	ldr	r3, [pc, #60]	; (8013714 <prvAddCurrentTaskToDelayedList+0xb4>)
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	3304      	adds	r3, #4
 80136da:	4619      	mov	r1, r3
 80136dc:	4610      	mov	r0, r2
 80136de:	f7fe fb74 	bl	8011dca <vListInsert>
}
 80136e2:	e010      	b.n	8013706 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80136e4:	4b0f      	ldr	r3, [pc, #60]	; (8013724 <prvAddCurrentTaskToDelayedList+0xc4>)
 80136e6:	681a      	ldr	r2, [r3, #0]
 80136e8:	4b0a      	ldr	r3, [pc, #40]	; (8013714 <prvAddCurrentTaskToDelayedList+0xb4>)
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	3304      	adds	r3, #4
 80136ee:	4619      	mov	r1, r3
 80136f0:	4610      	mov	r0, r2
 80136f2:	f7fe fb6a 	bl	8011dca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80136f6:	4b0c      	ldr	r3, [pc, #48]	; (8013728 <prvAddCurrentTaskToDelayedList+0xc8>)
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	68ba      	ldr	r2, [r7, #8]
 80136fc:	429a      	cmp	r2, r3
 80136fe:	d202      	bcs.n	8013706 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013700:	4a09      	ldr	r2, [pc, #36]	; (8013728 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013702:	68bb      	ldr	r3, [r7, #8]
 8013704:	6013      	str	r3, [r2, #0]
}
 8013706:	bf00      	nop
 8013708:	3710      	adds	r7, #16
 801370a:	46bd      	mov	sp, r7
 801370c:	bd80      	pop	{r7, pc}
 801370e:	bf00      	nop
 8013710:	2000240c 	.word	0x2000240c
 8013714:	20002308 	.word	0x20002308
 8013718:	20002410 	.word	0x20002410
 801371c:	200023f4 	.word	0x200023f4
 8013720:	200023c4 	.word	0x200023c4
 8013724:	200023c0 	.word	0x200023c0
 8013728:	20002428 	.word	0x20002428

0801372c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801372c:	b480      	push	{r7}
 801372e:	b085      	sub	sp, #20
 8013730:	af00      	add	r7, sp, #0
 8013732:	60f8      	str	r0, [r7, #12]
 8013734:	60b9      	str	r1, [r7, #8]
 8013736:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	3b04      	subs	r3, #4
 801373c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013744:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	3b04      	subs	r3, #4
 801374a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801374c:	68bb      	ldr	r3, [r7, #8]
 801374e:	f023 0201 	bic.w	r2, r3, #1
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	3b04      	subs	r3, #4
 801375a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801375c:	4a0c      	ldr	r2, [pc, #48]	; (8013790 <pxPortInitialiseStack+0x64>)
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	3b14      	subs	r3, #20
 8013766:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013768:	687a      	ldr	r2, [r7, #4]
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	3b04      	subs	r3, #4
 8013772:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	f06f 0202 	mvn.w	r2, #2
 801377a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	3b20      	subs	r3, #32
 8013780:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013782:	68fb      	ldr	r3, [r7, #12]
}
 8013784:	4618      	mov	r0, r3
 8013786:	3714      	adds	r7, #20
 8013788:	46bd      	mov	sp, r7
 801378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801378e:	4770      	bx	lr
 8013790:	08013795 	.word	0x08013795

08013794 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013794:	b480      	push	{r7}
 8013796:	b085      	sub	sp, #20
 8013798:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801379a:	2300      	movs	r3, #0
 801379c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801379e:	4b12      	ldr	r3, [pc, #72]	; (80137e8 <prvTaskExitError+0x54>)
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137a6:	d00a      	beq.n	80137be <prvTaskExitError+0x2a>
	__asm volatile
 80137a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137ac:	f383 8811 	msr	BASEPRI, r3
 80137b0:	f3bf 8f6f 	isb	sy
 80137b4:	f3bf 8f4f 	dsb	sy
 80137b8:	60fb      	str	r3, [r7, #12]
}
 80137ba:	bf00      	nop
 80137bc:	e7fe      	b.n	80137bc <prvTaskExitError+0x28>
	__asm volatile
 80137be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137c2:	f383 8811 	msr	BASEPRI, r3
 80137c6:	f3bf 8f6f 	isb	sy
 80137ca:	f3bf 8f4f 	dsb	sy
 80137ce:	60bb      	str	r3, [r7, #8]
}
 80137d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80137d2:	bf00      	nop
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d0fc      	beq.n	80137d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80137da:	bf00      	nop
 80137dc:	bf00      	nop
 80137de:	3714      	adds	r7, #20
 80137e0:	46bd      	mov	sp, r7
 80137e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e6:	4770      	bx	lr
 80137e8:	200002b0 	.word	0x200002b0
 80137ec:	00000000 	.word	0x00000000

080137f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80137f0:	4b07      	ldr	r3, [pc, #28]	; (8013810 <pxCurrentTCBConst2>)
 80137f2:	6819      	ldr	r1, [r3, #0]
 80137f4:	6808      	ldr	r0, [r1, #0]
 80137f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137fa:	f380 8809 	msr	PSP, r0
 80137fe:	f3bf 8f6f 	isb	sy
 8013802:	f04f 0000 	mov.w	r0, #0
 8013806:	f380 8811 	msr	BASEPRI, r0
 801380a:	4770      	bx	lr
 801380c:	f3af 8000 	nop.w

08013810 <pxCurrentTCBConst2>:
 8013810:	20002308 	.word	0x20002308
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013814:	bf00      	nop
 8013816:	bf00      	nop

08013818 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013818:	4808      	ldr	r0, [pc, #32]	; (801383c <prvPortStartFirstTask+0x24>)
 801381a:	6800      	ldr	r0, [r0, #0]
 801381c:	6800      	ldr	r0, [r0, #0]
 801381e:	f380 8808 	msr	MSP, r0
 8013822:	f04f 0000 	mov.w	r0, #0
 8013826:	f380 8814 	msr	CONTROL, r0
 801382a:	b662      	cpsie	i
 801382c:	b661      	cpsie	f
 801382e:	f3bf 8f4f 	dsb	sy
 8013832:	f3bf 8f6f 	isb	sy
 8013836:	df00      	svc	0
 8013838:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801383a:	bf00      	nop
 801383c:	e000ed08 	.word	0xe000ed08

08013840 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013840:	b580      	push	{r7, lr}
 8013842:	b086      	sub	sp, #24
 8013844:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013846:	4b46      	ldr	r3, [pc, #280]	; (8013960 <xPortStartScheduler+0x120>)
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	4a46      	ldr	r2, [pc, #280]	; (8013964 <xPortStartScheduler+0x124>)
 801384c:	4293      	cmp	r3, r2
 801384e:	d10a      	bne.n	8013866 <xPortStartScheduler+0x26>
	__asm volatile
 8013850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013854:	f383 8811 	msr	BASEPRI, r3
 8013858:	f3bf 8f6f 	isb	sy
 801385c:	f3bf 8f4f 	dsb	sy
 8013860:	613b      	str	r3, [r7, #16]
}
 8013862:	bf00      	nop
 8013864:	e7fe      	b.n	8013864 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013866:	4b3e      	ldr	r3, [pc, #248]	; (8013960 <xPortStartScheduler+0x120>)
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	4a3f      	ldr	r2, [pc, #252]	; (8013968 <xPortStartScheduler+0x128>)
 801386c:	4293      	cmp	r3, r2
 801386e:	d10a      	bne.n	8013886 <xPortStartScheduler+0x46>
	__asm volatile
 8013870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013874:	f383 8811 	msr	BASEPRI, r3
 8013878:	f3bf 8f6f 	isb	sy
 801387c:	f3bf 8f4f 	dsb	sy
 8013880:	60fb      	str	r3, [r7, #12]
}
 8013882:	bf00      	nop
 8013884:	e7fe      	b.n	8013884 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013886:	4b39      	ldr	r3, [pc, #228]	; (801396c <xPortStartScheduler+0x12c>)
 8013888:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801388a:	697b      	ldr	r3, [r7, #20]
 801388c:	781b      	ldrb	r3, [r3, #0]
 801388e:	b2db      	uxtb	r3, r3
 8013890:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013892:	697b      	ldr	r3, [r7, #20]
 8013894:	22ff      	movs	r2, #255	; 0xff
 8013896:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013898:	697b      	ldr	r3, [r7, #20]
 801389a:	781b      	ldrb	r3, [r3, #0]
 801389c:	b2db      	uxtb	r3, r3
 801389e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80138a0:	78fb      	ldrb	r3, [r7, #3]
 80138a2:	b2db      	uxtb	r3, r3
 80138a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80138a8:	b2da      	uxtb	r2, r3
 80138aa:	4b31      	ldr	r3, [pc, #196]	; (8013970 <xPortStartScheduler+0x130>)
 80138ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80138ae:	4b31      	ldr	r3, [pc, #196]	; (8013974 <xPortStartScheduler+0x134>)
 80138b0:	2207      	movs	r2, #7
 80138b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80138b4:	e009      	b.n	80138ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80138b6:	4b2f      	ldr	r3, [pc, #188]	; (8013974 <xPortStartScheduler+0x134>)
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	3b01      	subs	r3, #1
 80138bc:	4a2d      	ldr	r2, [pc, #180]	; (8013974 <xPortStartScheduler+0x134>)
 80138be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80138c0:	78fb      	ldrb	r3, [r7, #3]
 80138c2:	b2db      	uxtb	r3, r3
 80138c4:	005b      	lsls	r3, r3, #1
 80138c6:	b2db      	uxtb	r3, r3
 80138c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80138ca:	78fb      	ldrb	r3, [r7, #3]
 80138cc:	b2db      	uxtb	r3, r3
 80138ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80138d2:	2b80      	cmp	r3, #128	; 0x80
 80138d4:	d0ef      	beq.n	80138b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80138d6:	4b27      	ldr	r3, [pc, #156]	; (8013974 <xPortStartScheduler+0x134>)
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	f1c3 0307 	rsb	r3, r3, #7
 80138de:	2b04      	cmp	r3, #4
 80138e0:	d00a      	beq.n	80138f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80138e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138e6:	f383 8811 	msr	BASEPRI, r3
 80138ea:	f3bf 8f6f 	isb	sy
 80138ee:	f3bf 8f4f 	dsb	sy
 80138f2:	60bb      	str	r3, [r7, #8]
}
 80138f4:	bf00      	nop
 80138f6:	e7fe      	b.n	80138f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80138f8:	4b1e      	ldr	r3, [pc, #120]	; (8013974 <xPortStartScheduler+0x134>)
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	021b      	lsls	r3, r3, #8
 80138fe:	4a1d      	ldr	r2, [pc, #116]	; (8013974 <xPortStartScheduler+0x134>)
 8013900:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013902:	4b1c      	ldr	r3, [pc, #112]	; (8013974 <xPortStartScheduler+0x134>)
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801390a:	4a1a      	ldr	r2, [pc, #104]	; (8013974 <xPortStartScheduler+0x134>)
 801390c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	b2da      	uxtb	r2, r3
 8013912:	697b      	ldr	r3, [r7, #20]
 8013914:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013916:	4b18      	ldr	r3, [pc, #96]	; (8013978 <xPortStartScheduler+0x138>)
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	4a17      	ldr	r2, [pc, #92]	; (8013978 <xPortStartScheduler+0x138>)
 801391c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013920:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013922:	4b15      	ldr	r3, [pc, #84]	; (8013978 <xPortStartScheduler+0x138>)
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	4a14      	ldr	r2, [pc, #80]	; (8013978 <xPortStartScheduler+0x138>)
 8013928:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801392c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801392e:	f000 f8dd 	bl	8013aec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013932:	4b12      	ldr	r3, [pc, #72]	; (801397c <xPortStartScheduler+0x13c>)
 8013934:	2200      	movs	r2, #0
 8013936:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013938:	f000 f8fc 	bl	8013b34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801393c:	4b10      	ldr	r3, [pc, #64]	; (8013980 <xPortStartScheduler+0x140>)
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	4a0f      	ldr	r2, [pc, #60]	; (8013980 <xPortStartScheduler+0x140>)
 8013942:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013946:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013948:	f7ff ff66 	bl	8013818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801394c:	f7ff fb9e 	bl	801308c <vTaskSwitchContext>
	prvTaskExitError();
 8013950:	f7ff ff20 	bl	8013794 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013954:	2300      	movs	r3, #0
}
 8013956:	4618      	mov	r0, r3
 8013958:	3718      	adds	r7, #24
 801395a:	46bd      	mov	sp, r7
 801395c:	bd80      	pop	{r7, pc}
 801395e:	bf00      	nop
 8013960:	e000ed00 	.word	0xe000ed00
 8013964:	410fc271 	.word	0x410fc271
 8013968:	410fc270 	.word	0x410fc270
 801396c:	e000e400 	.word	0xe000e400
 8013970:	20002434 	.word	0x20002434
 8013974:	20002438 	.word	0x20002438
 8013978:	e000ed20 	.word	0xe000ed20
 801397c:	200002b0 	.word	0x200002b0
 8013980:	e000ef34 	.word	0xe000ef34

08013984 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013984:	b480      	push	{r7}
 8013986:	b083      	sub	sp, #12
 8013988:	af00      	add	r7, sp, #0
	__asm volatile
 801398a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801398e:	f383 8811 	msr	BASEPRI, r3
 8013992:	f3bf 8f6f 	isb	sy
 8013996:	f3bf 8f4f 	dsb	sy
 801399a:	607b      	str	r3, [r7, #4]
}
 801399c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801399e:	4b0f      	ldr	r3, [pc, #60]	; (80139dc <vPortEnterCritical+0x58>)
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	3301      	adds	r3, #1
 80139a4:	4a0d      	ldr	r2, [pc, #52]	; (80139dc <vPortEnterCritical+0x58>)
 80139a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80139a8:	4b0c      	ldr	r3, [pc, #48]	; (80139dc <vPortEnterCritical+0x58>)
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	2b01      	cmp	r3, #1
 80139ae:	d10f      	bne.n	80139d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80139b0:	4b0b      	ldr	r3, [pc, #44]	; (80139e0 <vPortEnterCritical+0x5c>)
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	b2db      	uxtb	r3, r3
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d00a      	beq.n	80139d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80139ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139be:	f383 8811 	msr	BASEPRI, r3
 80139c2:	f3bf 8f6f 	isb	sy
 80139c6:	f3bf 8f4f 	dsb	sy
 80139ca:	603b      	str	r3, [r7, #0]
}
 80139cc:	bf00      	nop
 80139ce:	e7fe      	b.n	80139ce <vPortEnterCritical+0x4a>
	}
}
 80139d0:	bf00      	nop
 80139d2:	370c      	adds	r7, #12
 80139d4:	46bd      	mov	sp, r7
 80139d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139da:	4770      	bx	lr
 80139dc:	200002b0 	.word	0x200002b0
 80139e0:	e000ed04 	.word	0xe000ed04

080139e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80139e4:	b480      	push	{r7}
 80139e6:	b083      	sub	sp, #12
 80139e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80139ea:	4b12      	ldr	r3, [pc, #72]	; (8013a34 <vPortExitCritical+0x50>)
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d10a      	bne.n	8013a08 <vPortExitCritical+0x24>
	__asm volatile
 80139f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139f6:	f383 8811 	msr	BASEPRI, r3
 80139fa:	f3bf 8f6f 	isb	sy
 80139fe:	f3bf 8f4f 	dsb	sy
 8013a02:	607b      	str	r3, [r7, #4]
}
 8013a04:	bf00      	nop
 8013a06:	e7fe      	b.n	8013a06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013a08:	4b0a      	ldr	r3, [pc, #40]	; (8013a34 <vPortExitCritical+0x50>)
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	3b01      	subs	r3, #1
 8013a0e:	4a09      	ldr	r2, [pc, #36]	; (8013a34 <vPortExitCritical+0x50>)
 8013a10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013a12:	4b08      	ldr	r3, [pc, #32]	; (8013a34 <vPortExitCritical+0x50>)
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d105      	bne.n	8013a26 <vPortExitCritical+0x42>
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013a1e:	683b      	ldr	r3, [r7, #0]
 8013a20:	f383 8811 	msr	BASEPRI, r3
}
 8013a24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013a26:	bf00      	nop
 8013a28:	370c      	adds	r7, #12
 8013a2a:	46bd      	mov	sp, r7
 8013a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a30:	4770      	bx	lr
 8013a32:	bf00      	nop
 8013a34:	200002b0 	.word	0x200002b0
	...

08013a40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013a40:	f3ef 8009 	mrs	r0, PSP
 8013a44:	f3bf 8f6f 	isb	sy
 8013a48:	4b15      	ldr	r3, [pc, #84]	; (8013aa0 <pxCurrentTCBConst>)
 8013a4a:	681a      	ldr	r2, [r3, #0]
 8013a4c:	f01e 0f10 	tst.w	lr, #16
 8013a50:	bf08      	it	eq
 8013a52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013a56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a5a:	6010      	str	r0, [r2, #0]
 8013a5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013a60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013a64:	f380 8811 	msr	BASEPRI, r0
 8013a68:	f3bf 8f4f 	dsb	sy
 8013a6c:	f3bf 8f6f 	isb	sy
 8013a70:	f7ff fb0c 	bl	801308c <vTaskSwitchContext>
 8013a74:	f04f 0000 	mov.w	r0, #0
 8013a78:	f380 8811 	msr	BASEPRI, r0
 8013a7c:	bc09      	pop	{r0, r3}
 8013a7e:	6819      	ldr	r1, [r3, #0]
 8013a80:	6808      	ldr	r0, [r1, #0]
 8013a82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a86:	f01e 0f10 	tst.w	lr, #16
 8013a8a:	bf08      	it	eq
 8013a8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013a90:	f380 8809 	msr	PSP, r0
 8013a94:	f3bf 8f6f 	isb	sy
 8013a98:	4770      	bx	lr
 8013a9a:	bf00      	nop
 8013a9c:	f3af 8000 	nop.w

08013aa0 <pxCurrentTCBConst>:
 8013aa0:	20002308 	.word	0x20002308
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013aa4:	bf00      	nop
 8013aa6:	bf00      	nop

08013aa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013aa8:	b580      	push	{r7, lr}
 8013aaa:	b082      	sub	sp, #8
 8013aac:	af00      	add	r7, sp, #0
	__asm volatile
 8013aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ab2:	f383 8811 	msr	BASEPRI, r3
 8013ab6:	f3bf 8f6f 	isb	sy
 8013aba:	f3bf 8f4f 	dsb	sy
 8013abe:	607b      	str	r3, [r7, #4]
}
 8013ac0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013ac2:	f7ff fa2b 	bl	8012f1c <xTaskIncrementTick>
 8013ac6:	4603      	mov	r3, r0
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d003      	beq.n	8013ad4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013acc:	4b06      	ldr	r3, [pc, #24]	; (8013ae8 <SysTick_Handler+0x40>)
 8013ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ad2:	601a      	str	r2, [r3, #0]
 8013ad4:	2300      	movs	r3, #0
 8013ad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013ad8:	683b      	ldr	r3, [r7, #0]
 8013ada:	f383 8811 	msr	BASEPRI, r3
}
 8013ade:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013ae0:	bf00      	nop
 8013ae2:	3708      	adds	r7, #8
 8013ae4:	46bd      	mov	sp, r7
 8013ae6:	bd80      	pop	{r7, pc}
 8013ae8:	e000ed04 	.word	0xe000ed04

08013aec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013aec:	b480      	push	{r7}
 8013aee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013af0:	4b0b      	ldr	r3, [pc, #44]	; (8013b20 <vPortSetupTimerInterrupt+0x34>)
 8013af2:	2200      	movs	r2, #0
 8013af4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013af6:	4b0b      	ldr	r3, [pc, #44]	; (8013b24 <vPortSetupTimerInterrupt+0x38>)
 8013af8:	2200      	movs	r2, #0
 8013afa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013afc:	4b0a      	ldr	r3, [pc, #40]	; (8013b28 <vPortSetupTimerInterrupt+0x3c>)
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	4a0a      	ldr	r2, [pc, #40]	; (8013b2c <vPortSetupTimerInterrupt+0x40>)
 8013b02:	fba2 2303 	umull	r2, r3, r2, r3
 8013b06:	099b      	lsrs	r3, r3, #6
 8013b08:	4a09      	ldr	r2, [pc, #36]	; (8013b30 <vPortSetupTimerInterrupt+0x44>)
 8013b0a:	3b01      	subs	r3, #1
 8013b0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013b0e:	4b04      	ldr	r3, [pc, #16]	; (8013b20 <vPortSetupTimerInterrupt+0x34>)
 8013b10:	2207      	movs	r2, #7
 8013b12:	601a      	str	r2, [r3, #0]
}
 8013b14:	bf00      	nop
 8013b16:	46bd      	mov	sp, r7
 8013b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b1c:	4770      	bx	lr
 8013b1e:	bf00      	nop
 8013b20:	e000e010 	.word	0xe000e010
 8013b24:	e000e018 	.word	0xe000e018
 8013b28:	20000234 	.word	0x20000234
 8013b2c:	10624dd3 	.word	0x10624dd3
 8013b30:	e000e014 	.word	0xe000e014

08013b34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013b34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013b44 <vPortEnableVFP+0x10>
 8013b38:	6801      	ldr	r1, [r0, #0]
 8013b3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013b3e:	6001      	str	r1, [r0, #0]
 8013b40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013b42:	bf00      	nop
 8013b44:	e000ed88 	.word	0xe000ed88

08013b48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013b48:	b480      	push	{r7}
 8013b4a:	b085      	sub	sp, #20
 8013b4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013b4e:	f3ef 8305 	mrs	r3, IPSR
 8013b52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	2b0f      	cmp	r3, #15
 8013b58:	d914      	bls.n	8013b84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013b5a:	4a17      	ldr	r2, [pc, #92]	; (8013bb8 <vPortValidateInterruptPriority+0x70>)
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	4413      	add	r3, r2
 8013b60:	781b      	ldrb	r3, [r3, #0]
 8013b62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013b64:	4b15      	ldr	r3, [pc, #84]	; (8013bbc <vPortValidateInterruptPriority+0x74>)
 8013b66:	781b      	ldrb	r3, [r3, #0]
 8013b68:	7afa      	ldrb	r2, [r7, #11]
 8013b6a:	429a      	cmp	r2, r3
 8013b6c:	d20a      	bcs.n	8013b84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8013b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b72:	f383 8811 	msr	BASEPRI, r3
 8013b76:	f3bf 8f6f 	isb	sy
 8013b7a:	f3bf 8f4f 	dsb	sy
 8013b7e:	607b      	str	r3, [r7, #4]
}
 8013b80:	bf00      	nop
 8013b82:	e7fe      	b.n	8013b82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013b84:	4b0e      	ldr	r3, [pc, #56]	; (8013bc0 <vPortValidateInterruptPriority+0x78>)
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013b8c:	4b0d      	ldr	r3, [pc, #52]	; (8013bc4 <vPortValidateInterruptPriority+0x7c>)
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	429a      	cmp	r2, r3
 8013b92:	d90a      	bls.n	8013baa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8013b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b98:	f383 8811 	msr	BASEPRI, r3
 8013b9c:	f3bf 8f6f 	isb	sy
 8013ba0:	f3bf 8f4f 	dsb	sy
 8013ba4:	603b      	str	r3, [r7, #0]
}
 8013ba6:	bf00      	nop
 8013ba8:	e7fe      	b.n	8013ba8 <vPortValidateInterruptPriority+0x60>
	}
 8013baa:	bf00      	nop
 8013bac:	3714      	adds	r7, #20
 8013bae:	46bd      	mov	sp, r7
 8013bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bb4:	4770      	bx	lr
 8013bb6:	bf00      	nop
 8013bb8:	e000e3f0 	.word	0xe000e3f0
 8013bbc:	20002434 	.word	0x20002434
 8013bc0:	e000ed0c 	.word	0xe000ed0c
 8013bc4:	20002438 	.word	0x20002438

08013bc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013bc8:	b580      	push	{r7, lr}
 8013bca:	b08a      	sub	sp, #40	; 0x28
 8013bcc:	af00      	add	r7, sp, #0
 8013bce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013bd4:	f7ff f8e8 	bl	8012da8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013bd8:	4b5b      	ldr	r3, [pc, #364]	; (8013d48 <pvPortMalloc+0x180>)
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d101      	bne.n	8013be4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013be0:	f000 f920 	bl	8013e24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013be4:	4b59      	ldr	r3, [pc, #356]	; (8013d4c <pvPortMalloc+0x184>)
 8013be6:	681a      	ldr	r2, [r3, #0]
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	4013      	ands	r3, r2
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	f040 8093 	bne.w	8013d18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d01d      	beq.n	8013c34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8013bf8:	2208      	movs	r2, #8
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	4413      	add	r3, r2
 8013bfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	f003 0307 	and.w	r3, r3, #7
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d014      	beq.n	8013c34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	f023 0307 	bic.w	r3, r3, #7
 8013c10:	3308      	adds	r3, #8
 8013c12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	f003 0307 	and.w	r3, r3, #7
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d00a      	beq.n	8013c34 <pvPortMalloc+0x6c>
	__asm volatile
 8013c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c22:	f383 8811 	msr	BASEPRI, r3
 8013c26:	f3bf 8f6f 	isb	sy
 8013c2a:	f3bf 8f4f 	dsb	sy
 8013c2e:	617b      	str	r3, [r7, #20]
}
 8013c30:	bf00      	nop
 8013c32:	e7fe      	b.n	8013c32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d06e      	beq.n	8013d18 <pvPortMalloc+0x150>
 8013c3a:	4b45      	ldr	r3, [pc, #276]	; (8013d50 <pvPortMalloc+0x188>)
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	687a      	ldr	r2, [r7, #4]
 8013c40:	429a      	cmp	r2, r3
 8013c42:	d869      	bhi.n	8013d18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013c44:	4b43      	ldr	r3, [pc, #268]	; (8013d54 <pvPortMalloc+0x18c>)
 8013c46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013c48:	4b42      	ldr	r3, [pc, #264]	; (8013d54 <pvPortMalloc+0x18c>)
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013c4e:	e004      	b.n	8013c5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8013c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c5c:	685b      	ldr	r3, [r3, #4]
 8013c5e:	687a      	ldr	r2, [r7, #4]
 8013c60:	429a      	cmp	r2, r3
 8013c62:	d903      	bls.n	8013c6c <pvPortMalloc+0xa4>
 8013c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d1f1      	bne.n	8013c50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013c6c:	4b36      	ldr	r3, [pc, #216]	; (8013d48 <pvPortMalloc+0x180>)
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c72:	429a      	cmp	r2, r3
 8013c74:	d050      	beq.n	8013d18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013c76:	6a3b      	ldr	r3, [r7, #32]
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	2208      	movs	r2, #8
 8013c7c:	4413      	add	r3, r2
 8013c7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c82:	681a      	ldr	r2, [r3, #0]
 8013c84:	6a3b      	ldr	r3, [r7, #32]
 8013c86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c8a:	685a      	ldr	r2, [r3, #4]
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	1ad2      	subs	r2, r2, r3
 8013c90:	2308      	movs	r3, #8
 8013c92:	005b      	lsls	r3, r3, #1
 8013c94:	429a      	cmp	r2, r3
 8013c96:	d91f      	bls.n	8013cd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	4413      	add	r3, r2
 8013c9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013ca0:	69bb      	ldr	r3, [r7, #24]
 8013ca2:	f003 0307 	and.w	r3, r3, #7
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d00a      	beq.n	8013cc0 <pvPortMalloc+0xf8>
	__asm volatile
 8013caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cae:	f383 8811 	msr	BASEPRI, r3
 8013cb2:	f3bf 8f6f 	isb	sy
 8013cb6:	f3bf 8f4f 	dsb	sy
 8013cba:	613b      	str	r3, [r7, #16]
}
 8013cbc:	bf00      	nop
 8013cbe:	e7fe      	b.n	8013cbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cc2:	685a      	ldr	r2, [r3, #4]
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	1ad2      	subs	r2, r2, r3
 8013cc8:	69bb      	ldr	r3, [r7, #24]
 8013cca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cce:	687a      	ldr	r2, [r7, #4]
 8013cd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013cd2:	69b8      	ldr	r0, [r7, #24]
 8013cd4:	f000 f908 	bl	8013ee8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013cd8:	4b1d      	ldr	r3, [pc, #116]	; (8013d50 <pvPortMalloc+0x188>)
 8013cda:	681a      	ldr	r2, [r3, #0]
 8013cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cde:	685b      	ldr	r3, [r3, #4]
 8013ce0:	1ad3      	subs	r3, r2, r3
 8013ce2:	4a1b      	ldr	r2, [pc, #108]	; (8013d50 <pvPortMalloc+0x188>)
 8013ce4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013ce6:	4b1a      	ldr	r3, [pc, #104]	; (8013d50 <pvPortMalloc+0x188>)
 8013ce8:	681a      	ldr	r2, [r3, #0]
 8013cea:	4b1b      	ldr	r3, [pc, #108]	; (8013d58 <pvPortMalloc+0x190>)
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	429a      	cmp	r2, r3
 8013cf0:	d203      	bcs.n	8013cfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013cf2:	4b17      	ldr	r3, [pc, #92]	; (8013d50 <pvPortMalloc+0x188>)
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	4a18      	ldr	r2, [pc, #96]	; (8013d58 <pvPortMalloc+0x190>)
 8013cf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cfc:	685a      	ldr	r2, [r3, #4]
 8013cfe:	4b13      	ldr	r3, [pc, #76]	; (8013d4c <pvPortMalloc+0x184>)
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	431a      	orrs	r2, r3
 8013d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d0a:	2200      	movs	r2, #0
 8013d0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8013d0e:	4b13      	ldr	r3, [pc, #76]	; (8013d5c <pvPortMalloc+0x194>)
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	3301      	adds	r3, #1
 8013d14:	4a11      	ldr	r2, [pc, #68]	; (8013d5c <pvPortMalloc+0x194>)
 8013d16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013d18:	f7ff f854 	bl	8012dc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013d1c:	69fb      	ldr	r3, [r7, #28]
 8013d1e:	f003 0307 	and.w	r3, r3, #7
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d00a      	beq.n	8013d3c <pvPortMalloc+0x174>
	__asm volatile
 8013d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d2a:	f383 8811 	msr	BASEPRI, r3
 8013d2e:	f3bf 8f6f 	isb	sy
 8013d32:	f3bf 8f4f 	dsb	sy
 8013d36:	60fb      	str	r3, [r7, #12]
}
 8013d38:	bf00      	nop
 8013d3a:	e7fe      	b.n	8013d3a <pvPortMalloc+0x172>
	return pvReturn;
 8013d3c:	69fb      	ldr	r3, [r7, #28]
}
 8013d3e:	4618      	mov	r0, r3
 8013d40:	3728      	adds	r7, #40	; 0x28
 8013d42:	46bd      	mov	sp, r7
 8013d44:	bd80      	pop	{r7, pc}
 8013d46:	bf00      	nop
 8013d48:	20008204 	.word	0x20008204
 8013d4c:	20008218 	.word	0x20008218
 8013d50:	20008208 	.word	0x20008208
 8013d54:	200081fc 	.word	0x200081fc
 8013d58:	2000820c 	.word	0x2000820c
 8013d5c:	20008210 	.word	0x20008210

08013d60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b086      	sub	sp, #24
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d04d      	beq.n	8013e0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013d72:	2308      	movs	r3, #8
 8013d74:	425b      	negs	r3, r3
 8013d76:	697a      	ldr	r2, [r7, #20]
 8013d78:	4413      	add	r3, r2
 8013d7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013d7c:	697b      	ldr	r3, [r7, #20]
 8013d7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013d80:	693b      	ldr	r3, [r7, #16]
 8013d82:	685a      	ldr	r2, [r3, #4]
 8013d84:	4b24      	ldr	r3, [pc, #144]	; (8013e18 <vPortFree+0xb8>)
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	4013      	ands	r3, r2
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d10a      	bne.n	8013da4 <vPortFree+0x44>
	__asm volatile
 8013d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d92:	f383 8811 	msr	BASEPRI, r3
 8013d96:	f3bf 8f6f 	isb	sy
 8013d9a:	f3bf 8f4f 	dsb	sy
 8013d9e:	60fb      	str	r3, [r7, #12]
}
 8013da0:	bf00      	nop
 8013da2:	e7fe      	b.n	8013da2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013da4:	693b      	ldr	r3, [r7, #16]
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d00a      	beq.n	8013dc2 <vPortFree+0x62>
	__asm volatile
 8013dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013db0:	f383 8811 	msr	BASEPRI, r3
 8013db4:	f3bf 8f6f 	isb	sy
 8013db8:	f3bf 8f4f 	dsb	sy
 8013dbc:	60bb      	str	r3, [r7, #8]
}
 8013dbe:	bf00      	nop
 8013dc0:	e7fe      	b.n	8013dc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013dc2:	693b      	ldr	r3, [r7, #16]
 8013dc4:	685a      	ldr	r2, [r3, #4]
 8013dc6:	4b14      	ldr	r3, [pc, #80]	; (8013e18 <vPortFree+0xb8>)
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	4013      	ands	r3, r2
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d01e      	beq.n	8013e0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013dd0:	693b      	ldr	r3, [r7, #16]
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d11a      	bne.n	8013e0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013dd8:	693b      	ldr	r3, [r7, #16]
 8013dda:	685a      	ldr	r2, [r3, #4]
 8013ddc:	4b0e      	ldr	r3, [pc, #56]	; (8013e18 <vPortFree+0xb8>)
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	43db      	mvns	r3, r3
 8013de2:	401a      	ands	r2, r3
 8013de4:	693b      	ldr	r3, [r7, #16]
 8013de6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013de8:	f7fe ffde 	bl	8012da8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013dec:	693b      	ldr	r3, [r7, #16]
 8013dee:	685a      	ldr	r2, [r3, #4]
 8013df0:	4b0a      	ldr	r3, [pc, #40]	; (8013e1c <vPortFree+0xbc>)
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	4413      	add	r3, r2
 8013df6:	4a09      	ldr	r2, [pc, #36]	; (8013e1c <vPortFree+0xbc>)
 8013df8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013dfa:	6938      	ldr	r0, [r7, #16]
 8013dfc:	f000 f874 	bl	8013ee8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8013e00:	4b07      	ldr	r3, [pc, #28]	; (8013e20 <vPortFree+0xc0>)
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	3301      	adds	r3, #1
 8013e06:	4a06      	ldr	r2, [pc, #24]	; (8013e20 <vPortFree+0xc0>)
 8013e08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8013e0a:	f7fe ffdb 	bl	8012dc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013e0e:	bf00      	nop
 8013e10:	3718      	adds	r7, #24
 8013e12:	46bd      	mov	sp, r7
 8013e14:	bd80      	pop	{r7, pc}
 8013e16:	bf00      	nop
 8013e18:	20008218 	.word	0x20008218
 8013e1c:	20008208 	.word	0x20008208
 8013e20:	20008214 	.word	0x20008214

08013e24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013e24:	b480      	push	{r7}
 8013e26:	b085      	sub	sp, #20
 8013e28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013e2a:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 8013e2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013e30:	4b27      	ldr	r3, [pc, #156]	; (8013ed0 <prvHeapInit+0xac>)
 8013e32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	f003 0307 	and.w	r3, r3, #7
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d00c      	beq.n	8013e58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	3307      	adds	r3, #7
 8013e42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	f023 0307 	bic.w	r3, r3, #7
 8013e4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013e4c:	68ba      	ldr	r2, [r7, #8]
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	1ad3      	subs	r3, r2, r3
 8013e52:	4a1f      	ldr	r2, [pc, #124]	; (8013ed0 <prvHeapInit+0xac>)
 8013e54:	4413      	add	r3, r2
 8013e56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013e5c:	4a1d      	ldr	r2, [pc, #116]	; (8013ed4 <prvHeapInit+0xb0>)
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013e62:	4b1c      	ldr	r3, [pc, #112]	; (8013ed4 <prvHeapInit+0xb0>)
 8013e64:	2200      	movs	r2, #0
 8013e66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	68ba      	ldr	r2, [r7, #8]
 8013e6c:	4413      	add	r3, r2
 8013e6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013e70:	2208      	movs	r2, #8
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	1a9b      	subs	r3, r3, r2
 8013e76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	f023 0307 	bic.w	r3, r3, #7
 8013e7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	4a15      	ldr	r2, [pc, #84]	; (8013ed8 <prvHeapInit+0xb4>)
 8013e84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013e86:	4b14      	ldr	r3, [pc, #80]	; (8013ed8 <prvHeapInit+0xb4>)
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	2200      	movs	r2, #0
 8013e8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013e8e:	4b12      	ldr	r3, [pc, #72]	; (8013ed8 <prvHeapInit+0xb4>)
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	2200      	movs	r2, #0
 8013e94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013e9a:	683b      	ldr	r3, [r7, #0]
 8013e9c:	68fa      	ldr	r2, [r7, #12]
 8013e9e:	1ad2      	subs	r2, r2, r3
 8013ea0:	683b      	ldr	r3, [r7, #0]
 8013ea2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013ea4:	4b0c      	ldr	r3, [pc, #48]	; (8013ed8 <prvHeapInit+0xb4>)
 8013ea6:	681a      	ldr	r2, [r3, #0]
 8013ea8:	683b      	ldr	r3, [r7, #0]
 8013eaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013eac:	683b      	ldr	r3, [r7, #0]
 8013eae:	685b      	ldr	r3, [r3, #4]
 8013eb0:	4a0a      	ldr	r2, [pc, #40]	; (8013edc <prvHeapInit+0xb8>)
 8013eb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013eb4:	683b      	ldr	r3, [r7, #0]
 8013eb6:	685b      	ldr	r3, [r3, #4]
 8013eb8:	4a09      	ldr	r2, [pc, #36]	; (8013ee0 <prvHeapInit+0xbc>)
 8013eba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013ebc:	4b09      	ldr	r3, [pc, #36]	; (8013ee4 <prvHeapInit+0xc0>)
 8013ebe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013ec2:	601a      	str	r2, [r3, #0]
}
 8013ec4:	bf00      	nop
 8013ec6:	3714      	adds	r7, #20
 8013ec8:	46bd      	mov	sp, r7
 8013eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ece:	4770      	bx	lr
 8013ed0:	2000243c 	.word	0x2000243c
 8013ed4:	200081fc 	.word	0x200081fc
 8013ed8:	20008204 	.word	0x20008204
 8013edc:	2000820c 	.word	0x2000820c
 8013ee0:	20008208 	.word	0x20008208
 8013ee4:	20008218 	.word	0x20008218

08013ee8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013ee8:	b480      	push	{r7}
 8013eea:	b085      	sub	sp, #20
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013ef0:	4b28      	ldr	r3, [pc, #160]	; (8013f94 <prvInsertBlockIntoFreeList+0xac>)
 8013ef2:	60fb      	str	r3, [r7, #12]
 8013ef4:	e002      	b.n	8013efc <prvInsertBlockIntoFreeList+0x14>
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	60fb      	str	r3, [r7, #12]
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	687a      	ldr	r2, [r7, #4]
 8013f02:	429a      	cmp	r2, r3
 8013f04:	d8f7      	bhi.n	8013ef6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	685b      	ldr	r3, [r3, #4]
 8013f0e:	68ba      	ldr	r2, [r7, #8]
 8013f10:	4413      	add	r3, r2
 8013f12:	687a      	ldr	r2, [r7, #4]
 8013f14:	429a      	cmp	r2, r3
 8013f16:	d108      	bne.n	8013f2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	685a      	ldr	r2, [r3, #4]
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	685b      	ldr	r3, [r3, #4]
 8013f20:	441a      	add	r2, r3
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	685b      	ldr	r3, [r3, #4]
 8013f32:	68ba      	ldr	r2, [r7, #8]
 8013f34:	441a      	add	r2, r3
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	429a      	cmp	r2, r3
 8013f3c:	d118      	bne.n	8013f70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	681a      	ldr	r2, [r3, #0]
 8013f42:	4b15      	ldr	r3, [pc, #84]	; (8013f98 <prvInsertBlockIntoFreeList+0xb0>)
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	429a      	cmp	r2, r3
 8013f48:	d00d      	beq.n	8013f66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	685a      	ldr	r2, [r3, #4]
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	685b      	ldr	r3, [r3, #4]
 8013f54:	441a      	add	r2, r3
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	681a      	ldr	r2, [r3, #0]
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	601a      	str	r2, [r3, #0]
 8013f64:	e008      	b.n	8013f78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013f66:	4b0c      	ldr	r3, [pc, #48]	; (8013f98 <prvInsertBlockIntoFreeList+0xb0>)
 8013f68:	681a      	ldr	r2, [r3, #0]
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	601a      	str	r2, [r3, #0]
 8013f6e:	e003      	b.n	8013f78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	681a      	ldr	r2, [r3, #0]
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013f78:	68fa      	ldr	r2, [r7, #12]
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	429a      	cmp	r2, r3
 8013f7e:	d002      	beq.n	8013f86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	687a      	ldr	r2, [r7, #4]
 8013f84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013f86:	bf00      	nop
 8013f88:	3714      	adds	r7, #20
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f90:	4770      	bx	lr
 8013f92:	bf00      	nop
 8013f94:	200081fc 	.word	0x200081fc
 8013f98:	20008204 	.word	0x20008204

08013f9c <USB_transmit_msg>:

/*
 * -- Insert your variables declaration here --
 */
/* USER CODE BEGIN 0 */
void USB_transmit_msg(uint8_t* data,uint32_t size){
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	b082      	sub	sp, #8
 8013fa0:	af00      	add	r7, sp, #0
 8013fa2:	6078      	str	r0, [r7, #4]
 8013fa4:	6039      	str	r1, [r7, #0]
  USBH_CDC_Stop(&hUsbHostFS);
 8013fa6:	4806      	ldr	r0, [pc, #24]	; (8013fc0 <USB_transmit_msg+0x24>)
 8013fa8:	f7f6 fda1 	bl	800aaee <USBH_CDC_Stop>
  USBH_CDC_Transmit(&hUsbHostFS,data, size);
 8013fac:	683a      	ldr	r2, [r7, #0]
 8013fae:	6879      	ldr	r1, [r7, #4]
 8013fb0:	4803      	ldr	r0, [pc, #12]	; (8013fc0 <USB_transmit_msg+0x24>)
 8013fb2:	f7f6 fe2c 	bl	800ac0e <USBH_CDC_Transmit>
}
 8013fb6:	bf00      	nop
 8013fb8:	3708      	adds	r7, #8
 8013fba:	46bd      	mov	sp, r7
 8013fbc:	bd80      	pop	{r7, pc}
 8013fbe:	bf00      	nop
 8013fc0:	2000d430 	.word	0x2000d430

08013fc4 <USB_receive_msg>:

void USB_receive_msg(){
 8013fc4:	b580      	push	{r7, lr}
 8013fc6:	af00      	add	r7, sp, #0
  USBH_CDC_Stop(&hUsbHostFS);
 8013fc8:	4809      	ldr	r0, [pc, #36]	; (8013ff0 <USB_receive_msg+0x2c>)
 8013fca:	f7f6 fd90 	bl	800aaee <USBH_CDC_Stop>
  USBH_CDC_Receive(&hUsbHostFS,usb_rx_buff[usb_rx_buff_active],USB_RX_BUFF_SIZE);
 8013fce:	4b09      	ldr	r3, [pc, #36]	; (8013ff4 <USB_receive_msg+0x30>)
 8013fd0:	781b      	ldrb	r3, [r3, #0]
 8013fd2:	461a      	mov	r2, r3
 8013fd4:	f640 53ac 	movw	r3, #3500	; 0xdac
 8013fd8:	fb02 f303 	mul.w	r3, r2, r3
 8013fdc:	4a06      	ldr	r2, [pc, #24]	; (8013ff8 <USB_receive_msg+0x34>)
 8013fde:	4413      	add	r3, r2
 8013fe0:	f640 52ac 	movw	r2, #3500	; 0xdac
 8013fe4:	4619      	mov	r1, r3
 8013fe6:	4802      	ldr	r0, [pc, #8]	; (8013ff0 <USB_receive_msg+0x2c>)
 8013fe8:	f7f6 fe4c 	bl	800ac84 <USBH_CDC_Receive>
}
 8013fec:	bf00      	nop
 8013fee:	bd80      	pop	{r7, pc}
 8013ff0:	2000d430 	.word	0x2000d430
 8013ff4:	2000d42c 	.word	0x2000d42c
 8013ff8:	20008224 	.word	0x20008224

08013ffc <USB_set_line_coding>:


void USB_set_line_coding(){
 8013ffc:	b580      	push	{r7, lr}
 8013ffe:	af00      	add	r7, sp, #0
	FrameFormat.b.dwDTERate = 1250000;
 8014000:	4b08      	ldr	r3, [pc, #32]	; (8014024 <USB_set_line_coding+0x28>)
 8014002:	4a09      	ldr	r2, [pc, #36]	; (8014028 <USB_set_line_coding+0x2c>)
 8014004:	601a      	str	r2, [r3, #0]
	FrameFormat.b.bCharFormat = 0;
 8014006:	4b07      	ldr	r3, [pc, #28]	; (8014024 <USB_set_line_coding+0x28>)
 8014008:	2200      	movs	r2, #0
 801400a:	711a      	strb	r2, [r3, #4]
	FrameFormat.b.bDataBits = 8;
 801400c:	4b05      	ldr	r3, [pc, #20]	; (8014024 <USB_set_line_coding+0x28>)
 801400e:	2208      	movs	r2, #8
 8014010:	719a      	strb	r2, [r3, #6]
	FrameFormat.b.bParityType = 0;
 8014012:	4b04      	ldr	r3, [pc, #16]	; (8014024 <USB_set_line_coding+0x28>)
 8014014:	2200      	movs	r2, #0
 8014016:	715a      	strb	r2, [r3, #5]

	USBH_CDC_SetLineCoding(&hUsbHostFS, &FrameFormat);
 8014018:	4902      	ldr	r1, [pc, #8]	; (8014024 <USB_set_line_coding+0x28>)
 801401a:	4804      	ldr	r0, [pc, #16]	; (801402c <USB_set_line_coding+0x30>)
 801401c:	f7f6 fdce 	bl	800abbc <USBH_CDC_SetLineCoding>
}
 8014020:	bf00      	nop
 8014022:	bd80      	pop	{r7, pc}
 8014024:	2000821c 	.word	0x2000821c
 8014028:	001312d0 	.word	0x001312d0
 801402c:	2000d430 	.word	0x2000d430

08014030 <USBH_CDC_TransmitCallback>:
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */

void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b082      	sub	sp, #8
 8014034:	af00      	add	r7, sp, #0
 8014036:	6078      	str	r0, [r7, #4]
  USB_receive_msg();
 8014038:	f7ff ffc4 	bl	8013fc4 <USB_receive_msg>
}
 801403c:	bf00      	nop
 801403e:	3708      	adds	r7, #8
 8014040:	46bd      	mov	sp, r7
 8014042:	bd80      	pop	{r7, pc}

08014044 <USBH_CDC_ReceiveCallback>:


void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8014044:	b480      	push	{r7}
 8014046:	b083      	sub	sp, #12
 8014048:	af00      	add	r7, sp, #0
 801404a:	6078      	str	r0, [r7, #4]
}
 801404c:	bf00      	nop
 801404e:	370c      	adds	r7, #12
 8014050:	46bd      	mov	sp, r7
 8014052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014056:	4770      	bx	lr

08014058 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8014058:	b580      	push	{r7, lr}
 801405a:	af00      	add	r7, sp, #0


  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801405c:	2201      	movs	r2, #1
 801405e:	490e      	ldr	r1, [pc, #56]	; (8014098 <MX_USB_HOST_Init+0x40>)
 8014060:	480e      	ldr	r0, [pc, #56]	; (801409c <MX_USB_HOST_Init+0x44>)
 8014062:	f7f6 ff93 	bl	800af8c <USBH_Init>
 8014066:	4603      	mov	r3, r0
 8014068:	2b00      	cmp	r3, #0
 801406a:	d001      	beq.n	8014070 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801406c:	f7ee f95c 	bl	8002328 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8014070:	490b      	ldr	r1, [pc, #44]	; (80140a0 <MX_USB_HOST_Init+0x48>)
 8014072:	480a      	ldr	r0, [pc, #40]	; (801409c <MX_USB_HOST_Init+0x44>)
 8014074:	f7f7 f840 	bl	800b0f8 <USBH_RegisterClass>
 8014078:	4603      	mov	r3, r0
 801407a:	2b00      	cmp	r3, #0
 801407c:	d001      	beq.n	8014082 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801407e:	f7ee f953 	bl	8002328 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8014082:	4806      	ldr	r0, [pc, #24]	; (801409c <MX_USB_HOST_Init+0x44>)
 8014084:	f7f7 f8c4 	bl	800b210 <USBH_Start>
 8014088:	4603      	mov	r3, r0
 801408a:	2b00      	cmp	r3, #0
 801408c:	d001      	beq.n	8014092 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801408e:	f7ee f94b 	bl	8002328 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8014092:	bf00      	nop
 8014094:	bd80      	pop	{r7, pc}
 8014096:	bf00      	nop
 8014098:	080140a5 	.word	0x080140a5
 801409c:	2000d430 	.word	0x2000d430
 80140a0:	20000290 	.word	0x20000290

080140a4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80140a4:	b580      	push	{r7, lr}
 80140a6:	b082      	sub	sp, #8
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	6078      	str	r0, [r7, #4]
 80140ac:	460b      	mov	r3, r1
 80140ae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80140b0:	78fb      	ldrb	r3, [r7, #3]
 80140b2:	3b01      	subs	r3, #1
 80140b4:	2b04      	cmp	r3, #4
 80140b6:	d82e      	bhi.n	8014116 <USBH_UserProcess+0x72>
 80140b8:	a201      	add	r2, pc, #4	; (adr r2, 80140c0 <USBH_UserProcess+0x1c>)
 80140ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140be:	bf00      	nop
 80140c0:	08014117 	.word	0x08014117
 80140c4:	080140eb 	.word	0x080140eb
 80140c8:	08014117 	.word	0x08014117
 80140cc:	08014101 	.word	0x08014101
 80140d0:	080140d5 	.word	0x080140d5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80140d4:	4b12      	ldr	r3, [pc, #72]	; (8014120 <USBH_UserProcess+0x7c>)
 80140d6:	2203      	movs	r2, #3
 80140d8:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_DISCONNECT, 0);
 80140da:	4b12      	ldr	r3, [pc, #72]	; (8014124 <USBH_UserProcess+0x80>)
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	2200      	movs	r2, #0
 80140e0:	2103      	movs	r1, #3
 80140e2:	4618      	mov	r0, r3
 80140e4:	f7fd fd6c 	bl	8011bc0 <osMessagePut>
  break;
 80140e8:	e016      	b.n	8014118 <USBH_UserProcess+0x74>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80140ea:	4b0d      	ldr	r3, [pc, #52]	; (8014120 <USBH_UserProcess+0x7c>)
 80140ec:	2202      	movs	r2, #2
 80140ee:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_READY, 0);
 80140f0:	4b0c      	ldr	r3, [pc, #48]	; (8014124 <USBH_UserProcess+0x80>)
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	2200      	movs	r2, #0
 80140f6:	2102      	movs	r1, #2
 80140f8:	4618      	mov	r0, r3
 80140fa:	f7fd fd61 	bl	8011bc0 <osMessagePut>
  break;
 80140fe:	e00b      	b.n	8014118 <USBH_UserProcess+0x74>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8014100:	4b07      	ldr	r3, [pc, #28]	; (8014120 <USBH_UserProcess+0x7c>)
 8014102:	2201      	movs	r2, #1
 8014104:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_START, 0);
 8014106:	4b07      	ldr	r3, [pc, #28]	; (8014124 <USBH_UserProcess+0x80>)
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	2200      	movs	r2, #0
 801410c:	2101      	movs	r1, #1
 801410e:	4618      	mov	r0, r3
 8014110:	f7fd fd56 	bl	8011bc0 <osMessagePut>
  break;
 8014114:	e000      	b.n	8014118 <USBH_UserProcess+0x74>

  default:
  break;
 8014116:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8014118:	bf00      	nop
 801411a:	3708      	adds	r7, #8
 801411c:	46bd      	mov	sp, r7
 801411e:	bd80      	pop	{r7, pc}
 8014120:	2000d814 	.word	0x2000d814
 8014124:	200009a8 	.word	0x200009a8

08014128 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8014128:	b580      	push	{r7, lr}
 801412a:	b08a      	sub	sp, #40	; 0x28
 801412c:	af00      	add	r7, sp, #0
 801412e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014130:	f107 0314 	add.w	r3, r7, #20
 8014134:	2200      	movs	r2, #0
 8014136:	601a      	str	r2, [r3, #0]
 8014138:	605a      	str	r2, [r3, #4]
 801413a:	609a      	str	r2, [r3, #8]
 801413c:	60da      	str	r2, [r3, #12]
 801413e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8014148:	d13a      	bne.n	80141c0 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801414a:	2300      	movs	r3, #0
 801414c:	613b      	str	r3, [r7, #16]
 801414e:	4b1e      	ldr	r3, [pc, #120]	; (80141c8 <HAL_HCD_MspInit+0xa0>)
 8014150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014152:	4a1d      	ldr	r2, [pc, #116]	; (80141c8 <HAL_HCD_MspInit+0xa0>)
 8014154:	f043 0301 	orr.w	r3, r3, #1
 8014158:	6313      	str	r3, [r2, #48]	; 0x30
 801415a:	4b1b      	ldr	r3, [pc, #108]	; (80141c8 <HAL_HCD_MspInit+0xa0>)
 801415c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801415e:	f003 0301 	and.w	r3, r3, #1
 8014162:	613b      	str	r3, [r7, #16]
 8014164:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8014166:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801416a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801416c:	2302      	movs	r3, #2
 801416e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014170:	2300      	movs	r3, #0
 8014172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014174:	2303      	movs	r3, #3
 8014176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8014178:	230a      	movs	r3, #10
 801417a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801417c:	f107 0314 	add.w	r3, r7, #20
 8014180:	4619      	mov	r1, r3
 8014182:	4812      	ldr	r0, [pc, #72]	; (80141cc <HAL_HCD_MspInit+0xa4>)
 8014184:	f7f0 f80e 	bl	80041a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014188:	4b0f      	ldr	r3, [pc, #60]	; (80141c8 <HAL_HCD_MspInit+0xa0>)
 801418a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801418c:	4a0e      	ldr	r2, [pc, #56]	; (80141c8 <HAL_HCD_MspInit+0xa0>)
 801418e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014192:	6353      	str	r3, [r2, #52]	; 0x34
 8014194:	2300      	movs	r3, #0
 8014196:	60fb      	str	r3, [r7, #12]
 8014198:	4b0b      	ldr	r3, [pc, #44]	; (80141c8 <HAL_HCD_MspInit+0xa0>)
 801419a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801419c:	4a0a      	ldr	r2, [pc, #40]	; (80141c8 <HAL_HCD_MspInit+0xa0>)
 801419e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80141a2:	6453      	str	r3, [r2, #68]	; 0x44
 80141a4:	4b08      	ldr	r3, [pc, #32]	; (80141c8 <HAL_HCD_MspInit+0xa0>)
 80141a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80141a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80141ac:	60fb      	str	r3, [r7, #12]
 80141ae:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80141b0:	2200      	movs	r2, #0
 80141b2:	2105      	movs	r1, #5
 80141b4:	2043      	movs	r0, #67	; 0x43
 80141b6:	f7ef f977 	bl	80034a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80141ba:	2043      	movs	r0, #67	; 0x43
 80141bc:	f7ef f990 	bl	80034e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80141c0:	bf00      	nop
 80141c2:	3728      	adds	r7, #40	; 0x28
 80141c4:	46bd      	mov	sp, r7
 80141c6:	bd80      	pop	{r7, pc}
 80141c8:	40023800 	.word	0x40023800
 80141cc:	40020000 	.word	0x40020000

080141d0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80141d0:	b580      	push	{r7, lr}
 80141d2:	b082      	sub	sp, #8
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80141de:	4618      	mov	r0, r3
 80141e0:	f7f7 fccd 	bl	800bb7e <USBH_LL_IncTimer>
}
 80141e4:	bf00      	nop
 80141e6:	3708      	adds	r7, #8
 80141e8:	46bd      	mov	sp, r7
 80141ea:	bd80      	pop	{r7, pc}

080141ec <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80141ec:	b580      	push	{r7, lr}
 80141ee:	b082      	sub	sp, #8
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80141fa:	4618      	mov	r0, r3
 80141fc:	f7f7 fd11 	bl	800bc22 <USBH_LL_Connect>
}
 8014200:	bf00      	nop
 8014202:	3708      	adds	r7, #8
 8014204:	46bd      	mov	sp, r7
 8014206:	bd80      	pop	{r7, pc}

08014208 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8014208:	b580      	push	{r7, lr}
 801420a:	b082      	sub	sp, #8
 801420c:	af00      	add	r7, sp, #0
 801420e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8014216:	4618      	mov	r0, r3
 8014218:	f7f7 fd26 	bl	800bc68 <USBH_LL_Disconnect>
}
 801421c:	bf00      	nop
 801421e:	3708      	adds	r7, #8
 8014220:	46bd      	mov	sp, r7
 8014222:	bd80      	pop	{r7, pc}

08014224 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b082      	sub	sp, #8
 8014228:	af00      	add	r7, sp, #0
 801422a:	6078      	str	r0, [r7, #4]
 801422c:	460b      	mov	r3, r1
 801422e:	70fb      	strb	r3, [r7, #3]
 8014230:	4613      	mov	r3, r2
 8014232:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801423a:	4618      	mov	r0, r3
 801423c:	f7f7 fd5b 	bl	800bcf6 <USBH_LL_NotifyURBChange>
#endif
}
 8014240:	bf00      	nop
 8014242:	3708      	adds	r7, #8
 8014244:	46bd      	mov	sp, r7
 8014246:	bd80      	pop	{r7, pc}

08014248 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8014248:	b580      	push	{r7, lr}
 801424a:	b082      	sub	sp, #8
 801424c:	af00      	add	r7, sp, #0
 801424e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8014256:	4618      	mov	r0, r3
 8014258:	f7f7 fcbb 	bl	800bbd2 <USBH_LL_PortEnabled>
}
 801425c:	bf00      	nop
 801425e:	3708      	adds	r7, #8
 8014260:	46bd      	mov	sp, r7
 8014262:	bd80      	pop	{r7, pc}

08014264 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8014264:	b580      	push	{r7, lr}
 8014266:	b082      	sub	sp, #8
 8014268:	af00      	add	r7, sp, #0
 801426a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8014272:	4618      	mov	r0, r3
 8014274:	f7f7 fcc7 	bl	800bc06 <USBH_LL_PortDisabled>
}
 8014278:	bf00      	nop
 801427a:	3708      	adds	r7, #8
 801427c:	46bd      	mov	sp, r7
 801427e:	bd80      	pop	{r7, pc}

08014280 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b082      	sub	sp, #8
 8014284:	af00      	add	r7, sp, #0
 8014286:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801428e:	2b01      	cmp	r3, #1
 8014290:	d12a      	bne.n	80142e8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8014292:	4a18      	ldr	r2, [pc, #96]	; (80142f4 <USBH_LL_Init+0x74>)
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	4a15      	ldr	r2, [pc, #84]	; (80142f4 <USBH_LL_Init+0x74>)
 801429e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80142a2:	4b14      	ldr	r3, [pc, #80]	; (80142f4 <USBH_LL_Init+0x74>)
 80142a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80142a8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80142aa:	4b12      	ldr	r3, [pc, #72]	; (80142f4 <USBH_LL_Init+0x74>)
 80142ac:	2208      	movs	r2, #8
 80142ae:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80142b0:	4b10      	ldr	r3, [pc, #64]	; (80142f4 <USBH_LL_Init+0x74>)
 80142b2:	2201      	movs	r2, #1
 80142b4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80142b6:	4b0f      	ldr	r3, [pc, #60]	; (80142f4 <USBH_LL_Init+0x74>)
 80142b8:	2200      	movs	r2, #0
 80142ba:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80142bc:	4b0d      	ldr	r3, [pc, #52]	; (80142f4 <USBH_LL_Init+0x74>)
 80142be:	2202      	movs	r2, #2
 80142c0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80142c2:	4b0c      	ldr	r3, [pc, #48]	; (80142f4 <USBH_LL_Init+0x74>)
 80142c4:	2200      	movs	r2, #0
 80142c6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80142c8:	480a      	ldr	r0, [pc, #40]	; (80142f4 <USBH_LL_Init+0x74>)
 80142ca:	f7f0 f920 	bl	800450e <HAL_HCD_Init>
 80142ce:	4603      	mov	r3, r0
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d001      	beq.n	80142d8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80142d4:	f7ee f828 	bl	8002328 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80142d8:	4806      	ldr	r0, [pc, #24]	; (80142f4 <USBH_LL_Init+0x74>)
 80142da:	f7f0 fd04 	bl	8004ce6 <HAL_HCD_GetCurrentFrame>
 80142de:	4603      	mov	r3, r0
 80142e0:	4619      	mov	r1, r3
 80142e2:	6878      	ldr	r0, [r7, #4]
 80142e4:	f7f7 fc3c 	bl	800bb60 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80142e8:	2300      	movs	r3, #0
}
 80142ea:	4618      	mov	r0, r3
 80142ec:	3708      	adds	r7, #8
 80142ee:	46bd      	mov	sp, r7
 80142f0:	bd80      	pop	{r7, pc}
 80142f2:	bf00      	nop
 80142f4:	2000d818 	.word	0x2000d818

080142f8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80142f8:	b580      	push	{r7, lr}
 80142fa:	b084      	sub	sp, #16
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014300:	2300      	movs	r3, #0
 8014302:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014304:	2300      	movs	r3, #0
 8014306:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801430e:	4618      	mov	r0, r3
 8014310:	f7f0 fc73 	bl	8004bfa <HAL_HCD_Start>
 8014314:	4603      	mov	r3, r0
 8014316:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014318:	7bfb      	ldrb	r3, [r7, #15]
 801431a:	4618      	mov	r0, r3
 801431c:	f000 f95c 	bl	80145d8 <USBH_Get_USB_Status>
 8014320:	4603      	mov	r3, r0
 8014322:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014324:	7bbb      	ldrb	r3, [r7, #14]
}
 8014326:	4618      	mov	r0, r3
 8014328:	3710      	adds	r7, #16
 801432a:	46bd      	mov	sp, r7
 801432c:	bd80      	pop	{r7, pc}

0801432e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801432e:	b580      	push	{r7, lr}
 8014330:	b084      	sub	sp, #16
 8014332:	af00      	add	r7, sp, #0
 8014334:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014336:	2300      	movs	r3, #0
 8014338:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801433a:	2300      	movs	r3, #0
 801433c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8014344:	4618      	mov	r0, r3
 8014346:	f7f0 fc7b 	bl	8004c40 <HAL_HCD_Stop>
 801434a:	4603      	mov	r3, r0
 801434c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801434e:	7bfb      	ldrb	r3, [r7, #15]
 8014350:	4618      	mov	r0, r3
 8014352:	f000 f941 	bl	80145d8 <USBH_Get_USB_Status>
 8014356:	4603      	mov	r3, r0
 8014358:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801435a:	7bbb      	ldrb	r3, [r7, #14]
}
 801435c:	4618      	mov	r0, r3
 801435e:	3710      	adds	r7, #16
 8014360:	46bd      	mov	sp, r7
 8014362:	bd80      	pop	{r7, pc}

08014364 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8014364:	b580      	push	{r7, lr}
 8014366:	b084      	sub	sp, #16
 8014368:	af00      	add	r7, sp, #0
 801436a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801436c:	2301      	movs	r3, #1
 801436e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8014376:	4618      	mov	r0, r3
 8014378:	f7f0 fcc3 	bl	8004d02 <HAL_HCD_GetCurrentSpeed>
 801437c:	4603      	mov	r3, r0
 801437e:	2b02      	cmp	r3, #2
 8014380:	d00c      	beq.n	801439c <USBH_LL_GetSpeed+0x38>
 8014382:	2b02      	cmp	r3, #2
 8014384:	d80d      	bhi.n	80143a2 <USBH_LL_GetSpeed+0x3e>
 8014386:	2b00      	cmp	r3, #0
 8014388:	d002      	beq.n	8014390 <USBH_LL_GetSpeed+0x2c>
 801438a:	2b01      	cmp	r3, #1
 801438c:	d003      	beq.n	8014396 <USBH_LL_GetSpeed+0x32>
 801438e:	e008      	b.n	80143a2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8014390:	2300      	movs	r3, #0
 8014392:	73fb      	strb	r3, [r7, #15]
    break;
 8014394:	e008      	b.n	80143a8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8014396:	2301      	movs	r3, #1
 8014398:	73fb      	strb	r3, [r7, #15]
    break;
 801439a:	e005      	b.n	80143a8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 801439c:	2302      	movs	r3, #2
 801439e:	73fb      	strb	r3, [r7, #15]
    break;
 80143a0:	e002      	b.n	80143a8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80143a2:	2301      	movs	r3, #1
 80143a4:	73fb      	strb	r3, [r7, #15]
    break;
 80143a6:	bf00      	nop
  }
  return  speed;
 80143a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80143aa:	4618      	mov	r0, r3
 80143ac:	3710      	adds	r7, #16
 80143ae:	46bd      	mov	sp, r7
 80143b0:	bd80      	pop	{r7, pc}

080143b2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80143b2:	b580      	push	{r7, lr}
 80143b4:	b084      	sub	sp, #16
 80143b6:	af00      	add	r7, sp, #0
 80143b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80143ba:	2300      	movs	r3, #0
 80143bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80143be:	2300      	movs	r3, #0
 80143c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80143c8:	4618      	mov	r0, r3
 80143ca:	f7f0 fc56 	bl	8004c7a <HAL_HCD_ResetPort>
 80143ce:	4603      	mov	r3, r0
 80143d0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80143d2:	7bfb      	ldrb	r3, [r7, #15]
 80143d4:	4618      	mov	r0, r3
 80143d6:	f000 f8ff 	bl	80145d8 <USBH_Get_USB_Status>
 80143da:	4603      	mov	r3, r0
 80143dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80143de:	7bbb      	ldrb	r3, [r7, #14]
}
 80143e0:	4618      	mov	r0, r3
 80143e2:	3710      	adds	r7, #16
 80143e4:	46bd      	mov	sp, r7
 80143e6:	bd80      	pop	{r7, pc}

080143e8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80143e8:	b580      	push	{r7, lr}
 80143ea:	b082      	sub	sp, #8
 80143ec:	af00      	add	r7, sp, #0
 80143ee:	6078      	str	r0, [r7, #4]
 80143f0:	460b      	mov	r3, r1
 80143f2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80143fa:	78fa      	ldrb	r2, [r7, #3]
 80143fc:	4611      	mov	r1, r2
 80143fe:	4618      	mov	r0, r3
 8014400:	f7f0 fc5d 	bl	8004cbe <HAL_HCD_HC_GetXferCount>
 8014404:	4603      	mov	r3, r0
}
 8014406:	4618      	mov	r0, r3
 8014408:	3708      	adds	r7, #8
 801440a:	46bd      	mov	sp, r7
 801440c:	bd80      	pop	{r7, pc}

0801440e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801440e:	b590      	push	{r4, r7, lr}
 8014410:	b089      	sub	sp, #36	; 0x24
 8014412:	af04      	add	r7, sp, #16
 8014414:	6078      	str	r0, [r7, #4]
 8014416:	4608      	mov	r0, r1
 8014418:	4611      	mov	r1, r2
 801441a:	461a      	mov	r2, r3
 801441c:	4603      	mov	r3, r0
 801441e:	70fb      	strb	r3, [r7, #3]
 8014420:	460b      	mov	r3, r1
 8014422:	70bb      	strb	r3, [r7, #2]
 8014424:	4613      	mov	r3, r2
 8014426:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014428:	2300      	movs	r3, #0
 801442a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801442c:	2300      	movs	r3, #0
 801442e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8014436:	787c      	ldrb	r4, [r7, #1]
 8014438:	78ba      	ldrb	r2, [r7, #2]
 801443a:	78f9      	ldrb	r1, [r7, #3]
 801443c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801443e:	9302      	str	r3, [sp, #8]
 8014440:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014444:	9301      	str	r3, [sp, #4]
 8014446:	f897 3020 	ldrb.w	r3, [r7, #32]
 801444a:	9300      	str	r3, [sp, #0]
 801444c:	4623      	mov	r3, r4
 801444e:	f7f0 f8c0 	bl	80045d2 <HAL_HCD_HC_Init>
 8014452:	4603      	mov	r3, r0
 8014454:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8014456:	7bfb      	ldrb	r3, [r7, #15]
 8014458:	4618      	mov	r0, r3
 801445a:	f000 f8bd 	bl	80145d8 <USBH_Get_USB_Status>
 801445e:	4603      	mov	r3, r0
 8014460:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014462:	7bbb      	ldrb	r3, [r7, #14]
}
 8014464:	4618      	mov	r0, r3
 8014466:	3714      	adds	r7, #20
 8014468:	46bd      	mov	sp, r7
 801446a:	bd90      	pop	{r4, r7, pc}

0801446c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801446c:	b580      	push	{r7, lr}
 801446e:	b084      	sub	sp, #16
 8014470:	af00      	add	r7, sp, #0
 8014472:	6078      	str	r0, [r7, #4]
 8014474:	460b      	mov	r3, r1
 8014476:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014478:	2300      	movs	r3, #0
 801447a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801447c:	2300      	movs	r3, #0
 801447e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8014486:	78fa      	ldrb	r2, [r7, #3]
 8014488:	4611      	mov	r1, r2
 801448a:	4618      	mov	r0, r3
 801448c:	f7f0 f930 	bl	80046f0 <HAL_HCD_HC_Halt>
 8014490:	4603      	mov	r3, r0
 8014492:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014494:	7bfb      	ldrb	r3, [r7, #15]
 8014496:	4618      	mov	r0, r3
 8014498:	f000 f89e 	bl	80145d8 <USBH_Get_USB_Status>
 801449c:	4603      	mov	r3, r0
 801449e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80144a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80144a2:	4618      	mov	r0, r3
 80144a4:	3710      	adds	r7, #16
 80144a6:	46bd      	mov	sp, r7
 80144a8:	bd80      	pop	{r7, pc}

080144aa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80144aa:	b590      	push	{r4, r7, lr}
 80144ac:	b089      	sub	sp, #36	; 0x24
 80144ae:	af04      	add	r7, sp, #16
 80144b0:	6078      	str	r0, [r7, #4]
 80144b2:	4608      	mov	r0, r1
 80144b4:	4611      	mov	r1, r2
 80144b6:	461a      	mov	r2, r3
 80144b8:	4603      	mov	r3, r0
 80144ba:	70fb      	strb	r3, [r7, #3]
 80144bc:	460b      	mov	r3, r1
 80144be:	70bb      	strb	r3, [r7, #2]
 80144c0:	4613      	mov	r3, r2
 80144c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80144c4:	2300      	movs	r3, #0
 80144c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80144c8:	2300      	movs	r3, #0
 80144ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80144d2:	787c      	ldrb	r4, [r7, #1]
 80144d4:	78ba      	ldrb	r2, [r7, #2]
 80144d6:	78f9      	ldrb	r1, [r7, #3]
 80144d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80144dc:	9303      	str	r3, [sp, #12]
 80144de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80144e0:	9302      	str	r3, [sp, #8]
 80144e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144e4:	9301      	str	r3, [sp, #4]
 80144e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80144ea:	9300      	str	r3, [sp, #0]
 80144ec:	4623      	mov	r3, r4
 80144ee:	f7f0 f923 	bl	8004738 <HAL_HCD_HC_SubmitRequest>
 80144f2:	4603      	mov	r3, r0
 80144f4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80144f6:	7bfb      	ldrb	r3, [r7, #15]
 80144f8:	4618      	mov	r0, r3
 80144fa:	f000 f86d 	bl	80145d8 <USBH_Get_USB_Status>
 80144fe:	4603      	mov	r3, r0
 8014500:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014502:	7bbb      	ldrb	r3, [r7, #14]
}
 8014504:	4618      	mov	r0, r3
 8014506:	3714      	adds	r7, #20
 8014508:	46bd      	mov	sp, r7
 801450a:	bd90      	pop	{r4, r7, pc}

0801450c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801450c:	b580      	push	{r7, lr}
 801450e:	b082      	sub	sp, #8
 8014510:	af00      	add	r7, sp, #0
 8014512:	6078      	str	r0, [r7, #4]
 8014514:	460b      	mov	r3, r1
 8014516:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801451e:	78fa      	ldrb	r2, [r7, #3]
 8014520:	4611      	mov	r1, r2
 8014522:	4618      	mov	r0, r3
 8014524:	f7f0 fbb7 	bl	8004c96 <HAL_HCD_HC_GetURBState>
 8014528:	4603      	mov	r3, r0
}
 801452a:	4618      	mov	r0, r3
 801452c:	3708      	adds	r7, #8
 801452e:	46bd      	mov	sp, r7
 8014530:	bd80      	pop	{r7, pc}

08014532 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8014532:	b580      	push	{r7, lr}
 8014534:	b082      	sub	sp, #8
 8014536:	af00      	add	r7, sp, #0
 8014538:	6078      	str	r0, [r7, #4]
 801453a:	460b      	mov	r3, r1
 801453c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8014544:	2b01      	cmp	r3, #1
 8014546:	d103      	bne.n	8014550 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8014548:	78fb      	ldrb	r3, [r7, #3]
 801454a:	4618      	mov	r0, r3
 801454c:	f000 f870 	bl	8014630 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8014550:	20c8      	movs	r0, #200	; 0xc8
 8014552:	f7ee fecd 	bl	80032f0 <HAL_Delay>
  return USBH_OK;
 8014556:	2300      	movs	r3, #0
}
 8014558:	4618      	mov	r0, r3
 801455a:	3708      	adds	r7, #8
 801455c:	46bd      	mov	sp, r7
 801455e:	bd80      	pop	{r7, pc}

08014560 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8014560:	b480      	push	{r7}
 8014562:	b085      	sub	sp, #20
 8014564:	af00      	add	r7, sp, #0
 8014566:	6078      	str	r0, [r7, #4]
 8014568:	460b      	mov	r3, r1
 801456a:	70fb      	strb	r3, [r7, #3]
 801456c:	4613      	mov	r3, r2
 801456e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8014576:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8014578:	78fb      	ldrb	r3, [r7, #3]
 801457a:	68fa      	ldr	r2, [r7, #12]
 801457c:	212c      	movs	r1, #44	; 0x2c
 801457e:	fb01 f303 	mul.w	r3, r1, r3
 8014582:	4413      	add	r3, r2
 8014584:	333b      	adds	r3, #59	; 0x3b
 8014586:	781b      	ldrb	r3, [r3, #0]
 8014588:	2b00      	cmp	r3, #0
 801458a:	d009      	beq.n	80145a0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801458c:	78fb      	ldrb	r3, [r7, #3]
 801458e:	68fa      	ldr	r2, [r7, #12]
 8014590:	212c      	movs	r1, #44	; 0x2c
 8014592:	fb01 f303 	mul.w	r3, r1, r3
 8014596:	4413      	add	r3, r2
 8014598:	3354      	adds	r3, #84	; 0x54
 801459a:	78ba      	ldrb	r2, [r7, #2]
 801459c:	701a      	strb	r2, [r3, #0]
 801459e:	e008      	b.n	80145b2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80145a0:	78fb      	ldrb	r3, [r7, #3]
 80145a2:	68fa      	ldr	r2, [r7, #12]
 80145a4:	212c      	movs	r1, #44	; 0x2c
 80145a6:	fb01 f303 	mul.w	r3, r1, r3
 80145aa:	4413      	add	r3, r2
 80145ac:	3355      	adds	r3, #85	; 0x55
 80145ae:	78ba      	ldrb	r2, [r7, #2]
 80145b0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80145b2:	2300      	movs	r3, #0
}
 80145b4:	4618      	mov	r0, r3
 80145b6:	3714      	adds	r7, #20
 80145b8:	46bd      	mov	sp, r7
 80145ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145be:	4770      	bx	lr

080145c0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80145c0:	b580      	push	{r7, lr}
 80145c2:	b082      	sub	sp, #8
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80145c8:	6878      	ldr	r0, [r7, #4]
 80145ca:	f7ee fe91 	bl	80032f0 <HAL_Delay>
}
 80145ce:	bf00      	nop
 80145d0:	3708      	adds	r7, #8
 80145d2:	46bd      	mov	sp, r7
 80145d4:	bd80      	pop	{r7, pc}
	...

080145d8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80145d8:	b480      	push	{r7}
 80145da:	b085      	sub	sp, #20
 80145dc:	af00      	add	r7, sp, #0
 80145de:	4603      	mov	r3, r0
 80145e0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80145e2:	2300      	movs	r3, #0
 80145e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80145e6:	79fb      	ldrb	r3, [r7, #7]
 80145e8:	2b03      	cmp	r3, #3
 80145ea:	d817      	bhi.n	801461c <USBH_Get_USB_Status+0x44>
 80145ec:	a201      	add	r2, pc, #4	; (adr r2, 80145f4 <USBH_Get_USB_Status+0x1c>)
 80145ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145f2:	bf00      	nop
 80145f4:	08014605 	.word	0x08014605
 80145f8:	0801460b 	.word	0x0801460b
 80145fc:	08014611 	.word	0x08014611
 8014600:	08014617 	.word	0x08014617
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8014604:	2300      	movs	r3, #0
 8014606:	73fb      	strb	r3, [r7, #15]
    break;
 8014608:	e00b      	b.n	8014622 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801460a:	2302      	movs	r3, #2
 801460c:	73fb      	strb	r3, [r7, #15]
    break;
 801460e:	e008      	b.n	8014622 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8014610:	2301      	movs	r3, #1
 8014612:	73fb      	strb	r3, [r7, #15]
    break;
 8014614:	e005      	b.n	8014622 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8014616:	2302      	movs	r3, #2
 8014618:	73fb      	strb	r3, [r7, #15]
    break;
 801461a:	e002      	b.n	8014622 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801461c:	2302      	movs	r3, #2
 801461e:	73fb      	strb	r3, [r7, #15]
    break;
 8014620:	bf00      	nop
  }
  return usb_status;
 8014622:	7bfb      	ldrb	r3, [r7, #15]
}
 8014624:	4618      	mov	r0, r3
 8014626:	3714      	adds	r7, #20
 8014628:	46bd      	mov	sp, r7
 801462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801462e:	4770      	bx	lr

08014630 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8014630:	b580      	push	{r7, lr}
 8014632:	b084      	sub	sp, #16
 8014634:	af00      	add	r7, sp, #0
 8014636:	4603      	mov	r3, r0
 8014638:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801463a:	79fb      	ldrb	r3, [r7, #7]
 801463c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801463e:	79fb      	ldrb	r3, [r7, #7]
 8014640:	2b00      	cmp	r3, #0
 8014642:	d102      	bne.n	801464a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8014644:	2301      	movs	r3, #1
 8014646:	73fb      	strb	r3, [r7, #15]
 8014648:	e001      	b.n	801464e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801464a:	2300      	movs	r3, #0
 801464c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,(GPIO_PinState)data);
 801464e:	7bfb      	ldrb	r3, [r7, #15]
 8014650:	461a      	mov	r2, r3
 8014652:	2101      	movs	r1, #1
 8014654:	4803      	ldr	r0, [pc, #12]	; (8014664 <MX_DriverVbusFS+0x34>)
 8014656:	f7ef ff41 	bl	80044dc <HAL_GPIO_WritePin>
}
 801465a:	bf00      	nop
 801465c:	3710      	adds	r7, #16
 801465e:	46bd      	mov	sp, r7
 8014660:	bd80      	pop	{r7, pc}
 8014662:	bf00      	nop
 8014664:	40020400 	.word	0x40020400

08014668 <atol>:
 8014668:	220a      	movs	r2, #10
 801466a:	2100      	movs	r1, #0
 801466c:	f000 be5e 	b.w	801532c <strtol>

08014670 <__errno>:
 8014670:	4b01      	ldr	r3, [pc, #4]	; (8014678 <__errno+0x8>)
 8014672:	6818      	ldr	r0, [r3, #0]
 8014674:	4770      	bx	lr
 8014676:	bf00      	nop
 8014678:	200002b4 	.word	0x200002b4

0801467c <std>:
 801467c:	2300      	movs	r3, #0
 801467e:	b510      	push	{r4, lr}
 8014680:	4604      	mov	r4, r0
 8014682:	e9c0 3300 	strd	r3, r3, [r0]
 8014686:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801468a:	6083      	str	r3, [r0, #8]
 801468c:	8181      	strh	r1, [r0, #12]
 801468e:	6643      	str	r3, [r0, #100]	; 0x64
 8014690:	81c2      	strh	r2, [r0, #14]
 8014692:	6183      	str	r3, [r0, #24]
 8014694:	4619      	mov	r1, r3
 8014696:	2208      	movs	r2, #8
 8014698:	305c      	adds	r0, #92	; 0x5c
 801469a:	f000 f92d 	bl	80148f8 <memset>
 801469e:	4b05      	ldr	r3, [pc, #20]	; (80146b4 <std+0x38>)
 80146a0:	6263      	str	r3, [r4, #36]	; 0x24
 80146a2:	4b05      	ldr	r3, [pc, #20]	; (80146b8 <std+0x3c>)
 80146a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80146a6:	4b05      	ldr	r3, [pc, #20]	; (80146bc <std+0x40>)
 80146a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80146aa:	4b05      	ldr	r3, [pc, #20]	; (80146c0 <std+0x44>)
 80146ac:	6224      	str	r4, [r4, #32]
 80146ae:	6323      	str	r3, [r4, #48]	; 0x30
 80146b0:	bd10      	pop	{r4, pc}
 80146b2:	bf00      	nop
 80146b4:	080150e1 	.word	0x080150e1
 80146b8:	08015107 	.word	0x08015107
 80146bc:	0801513f 	.word	0x0801513f
 80146c0:	08015163 	.word	0x08015163

080146c4 <_cleanup_r>:
 80146c4:	4901      	ldr	r1, [pc, #4]	; (80146cc <_cleanup_r+0x8>)
 80146c6:	f000 b8af 	b.w	8014828 <_fwalk_reent>
 80146ca:	bf00      	nop
 80146cc:	0801596d 	.word	0x0801596d

080146d0 <__sfmoreglue>:
 80146d0:	b570      	push	{r4, r5, r6, lr}
 80146d2:	2268      	movs	r2, #104	; 0x68
 80146d4:	1e4d      	subs	r5, r1, #1
 80146d6:	4355      	muls	r5, r2
 80146d8:	460e      	mov	r6, r1
 80146da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80146de:	f000 fbf1 	bl	8014ec4 <_malloc_r>
 80146e2:	4604      	mov	r4, r0
 80146e4:	b140      	cbz	r0, 80146f8 <__sfmoreglue+0x28>
 80146e6:	2100      	movs	r1, #0
 80146e8:	e9c0 1600 	strd	r1, r6, [r0]
 80146ec:	300c      	adds	r0, #12
 80146ee:	60a0      	str	r0, [r4, #8]
 80146f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80146f4:	f000 f900 	bl	80148f8 <memset>
 80146f8:	4620      	mov	r0, r4
 80146fa:	bd70      	pop	{r4, r5, r6, pc}

080146fc <__sfp_lock_acquire>:
 80146fc:	4801      	ldr	r0, [pc, #4]	; (8014704 <__sfp_lock_acquire+0x8>)
 80146fe:	f000 b8d9 	b.w	80148b4 <__retarget_lock_acquire_recursive>
 8014702:	bf00      	nop
 8014704:	2000db1e 	.word	0x2000db1e

08014708 <__sfp_lock_release>:
 8014708:	4801      	ldr	r0, [pc, #4]	; (8014710 <__sfp_lock_release+0x8>)
 801470a:	f000 b8d5 	b.w	80148b8 <__retarget_lock_release_recursive>
 801470e:	bf00      	nop
 8014710:	2000db1e 	.word	0x2000db1e

08014714 <__sinit_lock_acquire>:
 8014714:	4801      	ldr	r0, [pc, #4]	; (801471c <__sinit_lock_acquire+0x8>)
 8014716:	f000 b8cd 	b.w	80148b4 <__retarget_lock_acquire_recursive>
 801471a:	bf00      	nop
 801471c:	2000db1f 	.word	0x2000db1f

08014720 <__sinit_lock_release>:
 8014720:	4801      	ldr	r0, [pc, #4]	; (8014728 <__sinit_lock_release+0x8>)
 8014722:	f000 b8c9 	b.w	80148b8 <__retarget_lock_release_recursive>
 8014726:	bf00      	nop
 8014728:	2000db1f 	.word	0x2000db1f

0801472c <__sinit>:
 801472c:	b510      	push	{r4, lr}
 801472e:	4604      	mov	r4, r0
 8014730:	f7ff fff0 	bl	8014714 <__sinit_lock_acquire>
 8014734:	69a3      	ldr	r3, [r4, #24]
 8014736:	b11b      	cbz	r3, 8014740 <__sinit+0x14>
 8014738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801473c:	f7ff bff0 	b.w	8014720 <__sinit_lock_release>
 8014740:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014744:	6523      	str	r3, [r4, #80]	; 0x50
 8014746:	4b13      	ldr	r3, [pc, #76]	; (8014794 <__sinit+0x68>)
 8014748:	4a13      	ldr	r2, [pc, #76]	; (8014798 <__sinit+0x6c>)
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	62a2      	str	r2, [r4, #40]	; 0x28
 801474e:	42a3      	cmp	r3, r4
 8014750:	bf04      	itt	eq
 8014752:	2301      	moveq	r3, #1
 8014754:	61a3      	streq	r3, [r4, #24]
 8014756:	4620      	mov	r0, r4
 8014758:	f000 f820 	bl	801479c <__sfp>
 801475c:	6060      	str	r0, [r4, #4]
 801475e:	4620      	mov	r0, r4
 8014760:	f000 f81c 	bl	801479c <__sfp>
 8014764:	60a0      	str	r0, [r4, #8]
 8014766:	4620      	mov	r0, r4
 8014768:	f000 f818 	bl	801479c <__sfp>
 801476c:	2200      	movs	r2, #0
 801476e:	60e0      	str	r0, [r4, #12]
 8014770:	2104      	movs	r1, #4
 8014772:	6860      	ldr	r0, [r4, #4]
 8014774:	f7ff ff82 	bl	801467c <std>
 8014778:	68a0      	ldr	r0, [r4, #8]
 801477a:	2201      	movs	r2, #1
 801477c:	2109      	movs	r1, #9
 801477e:	f7ff ff7d 	bl	801467c <std>
 8014782:	68e0      	ldr	r0, [r4, #12]
 8014784:	2202      	movs	r2, #2
 8014786:	2112      	movs	r1, #18
 8014788:	f7ff ff78 	bl	801467c <std>
 801478c:	2301      	movs	r3, #1
 801478e:	61a3      	str	r3, [r4, #24]
 8014790:	e7d2      	b.n	8014738 <__sinit+0xc>
 8014792:	bf00      	nop
 8014794:	08017944 	.word	0x08017944
 8014798:	080146c5 	.word	0x080146c5

0801479c <__sfp>:
 801479c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801479e:	4607      	mov	r7, r0
 80147a0:	f7ff ffac 	bl	80146fc <__sfp_lock_acquire>
 80147a4:	4b1e      	ldr	r3, [pc, #120]	; (8014820 <__sfp+0x84>)
 80147a6:	681e      	ldr	r6, [r3, #0]
 80147a8:	69b3      	ldr	r3, [r6, #24]
 80147aa:	b913      	cbnz	r3, 80147b2 <__sfp+0x16>
 80147ac:	4630      	mov	r0, r6
 80147ae:	f7ff ffbd 	bl	801472c <__sinit>
 80147b2:	3648      	adds	r6, #72	; 0x48
 80147b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80147b8:	3b01      	subs	r3, #1
 80147ba:	d503      	bpl.n	80147c4 <__sfp+0x28>
 80147bc:	6833      	ldr	r3, [r6, #0]
 80147be:	b30b      	cbz	r3, 8014804 <__sfp+0x68>
 80147c0:	6836      	ldr	r6, [r6, #0]
 80147c2:	e7f7      	b.n	80147b4 <__sfp+0x18>
 80147c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80147c8:	b9d5      	cbnz	r5, 8014800 <__sfp+0x64>
 80147ca:	4b16      	ldr	r3, [pc, #88]	; (8014824 <__sfp+0x88>)
 80147cc:	60e3      	str	r3, [r4, #12]
 80147ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80147d2:	6665      	str	r5, [r4, #100]	; 0x64
 80147d4:	f000 f86c 	bl	80148b0 <__retarget_lock_init_recursive>
 80147d8:	f7ff ff96 	bl	8014708 <__sfp_lock_release>
 80147dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80147e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80147e4:	6025      	str	r5, [r4, #0]
 80147e6:	61a5      	str	r5, [r4, #24]
 80147e8:	2208      	movs	r2, #8
 80147ea:	4629      	mov	r1, r5
 80147ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80147f0:	f000 f882 	bl	80148f8 <memset>
 80147f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80147f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80147fc:	4620      	mov	r0, r4
 80147fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014800:	3468      	adds	r4, #104	; 0x68
 8014802:	e7d9      	b.n	80147b8 <__sfp+0x1c>
 8014804:	2104      	movs	r1, #4
 8014806:	4638      	mov	r0, r7
 8014808:	f7ff ff62 	bl	80146d0 <__sfmoreglue>
 801480c:	4604      	mov	r4, r0
 801480e:	6030      	str	r0, [r6, #0]
 8014810:	2800      	cmp	r0, #0
 8014812:	d1d5      	bne.n	80147c0 <__sfp+0x24>
 8014814:	f7ff ff78 	bl	8014708 <__sfp_lock_release>
 8014818:	230c      	movs	r3, #12
 801481a:	603b      	str	r3, [r7, #0]
 801481c:	e7ee      	b.n	80147fc <__sfp+0x60>
 801481e:	bf00      	nop
 8014820:	08017944 	.word	0x08017944
 8014824:	ffff0001 	.word	0xffff0001

08014828 <_fwalk_reent>:
 8014828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801482c:	4606      	mov	r6, r0
 801482e:	4688      	mov	r8, r1
 8014830:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014834:	2700      	movs	r7, #0
 8014836:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801483a:	f1b9 0901 	subs.w	r9, r9, #1
 801483e:	d505      	bpl.n	801484c <_fwalk_reent+0x24>
 8014840:	6824      	ldr	r4, [r4, #0]
 8014842:	2c00      	cmp	r4, #0
 8014844:	d1f7      	bne.n	8014836 <_fwalk_reent+0xe>
 8014846:	4638      	mov	r0, r7
 8014848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801484c:	89ab      	ldrh	r3, [r5, #12]
 801484e:	2b01      	cmp	r3, #1
 8014850:	d907      	bls.n	8014862 <_fwalk_reent+0x3a>
 8014852:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014856:	3301      	adds	r3, #1
 8014858:	d003      	beq.n	8014862 <_fwalk_reent+0x3a>
 801485a:	4629      	mov	r1, r5
 801485c:	4630      	mov	r0, r6
 801485e:	47c0      	blx	r8
 8014860:	4307      	orrs	r7, r0
 8014862:	3568      	adds	r5, #104	; 0x68
 8014864:	e7e9      	b.n	801483a <_fwalk_reent+0x12>
	...

08014868 <__libc_init_array>:
 8014868:	b570      	push	{r4, r5, r6, lr}
 801486a:	4d0d      	ldr	r5, [pc, #52]	; (80148a0 <__libc_init_array+0x38>)
 801486c:	4c0d      	ldr	r4, [pc, #52]	; (80148a4 <__libc_init_array+0x3c>)
 801486e:	1b64      	subs	r4, r4, r5
 8014870:	10a4      	asrs	r4, r4, #2
 8014872:	2600      	movs	r6, #0
 8014874:	42a6      	cmp	r6, r4
 8014876:	d109      	bne.n	801488c <__libc_init_array+0x24>
 8014878:	4d0b      	ldr	r5, [pc, #44]	; (80148a8 <__libc_init_array+0x40>)
 801487a:	4c0c      	ldr	r4, [pc, #48]	; (80148ac <__libc_init_array+0x44>)
 801487c:	f002 fbd4 	bl	8017028 <_init>
 8014880:	1b64      	subs	r4, r4, r5
 8014882:	10a4      	asrs	r4, r4, #2
 8014884:	2600      	movs	r6, #0
 8014886:	42a6      	cmp	r6, r4
 8014888:	d105      	bne.n	8014896 <__libc_init_array+0x2e>
 801488a:	bd70      	pop	{r4, r5, r6, pc}
 801488c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014890:	4798      	blx	r3
 8014892:	3601      	adds	r6, #1
 8014894:	e7ee      	b.n	8014874 <__libc_init_array+0xc>
 8014896:	f855 3b04 	ldr.w	r3, [r5], #4
 801489a:	4798      	blx	r3
 801489c:	3601      	adds	r6, #1
 801489e:	e7f2      	b.n	8014886 <__libc_init_array+0x1e>
 80148a0:	08017c50 	.word	0x08017c50
 80148a4:	08017c50 	.word	0x08017c50
 80148a8:	08017c50 	.word	0x08017c50
 80148ac:	08017c54 	.word	0x08017c54

080148b0 <__retarget_lock_init_recursive>:
 80148b0:	4770      	bx	lr

080148b2 <__retarget_lock_acquire>:
 80148b2:	4770      	bx	lr

080148b4 <__retarget_lock_acquire_recursive>:
 80148b4:	4770      	bx	lr

080148b6 <__retarget_lock_release>:
 80148b6:	4770      	bx	lr

080148b8 <__retarget_lock_release_recursive>:
 80148b8:	4770      	bx	lr
	...

080148bc <malloc>:
 80148bc:	4b02      	ldr	r3, [pc, #8]	; (80148c8 <malloc+0xc>)
 80148be:	4601      	mov	r1, r0
 80148c0:	6818      	ldr	r0, [r3, #0]
 80148c2:	f000 baff 	b.w	8014ec4 <_malloc_r>
 80148c6:	bf00      	nop
 80148c8:	200002b4 	.word	0x200002b4

080148cc <free>:
 80148cc:	4b02      	ldr	r3, [pc, #8]	; (80148d8 <free+0xc>)
 80148ce:	4601      	mov	r1, r0
 80148d0:	6818      	ldr	r0, [r3, #0]
 80148d2:	f000 ba8b 	b.w	8014dec <_free_r>
 80148d6:	bf00      	nop
 80148d8:	200002b4 	.word	0x200002b4

080148dc <memcpy>:
 80148dc:	440a      	add	r2, r1
 80148de:	4291      	cmp	r1, r2
 80148e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80148e4:	d100      	bne.n	80148e8 <memcpy+0xc>
 80148e6:	4770      	bx	lr
 80148e8:	b510      	push	{r4, lr}
 80148ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80148ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80148f2:	4291      	cmp	r1, r2
 80148f4:	d1f9      	bne.n	80148ea <memcpy+0xe>
 80148f6:	bd10      	pop	{r4, pc}

080148f8 <memset>:
 80148f8:	4402      	add	r2, r0
 80148fa:	4603      	mov	r3, r0
 80148fc:	4293      	cmp	r3, r2
 80148fe:	d100      	bne.n	8014902 <memset+0xa>
 8014900:	4770      	bx	lr
 8014902:	f803 1b01 	strb.w	r1, [r3], #1
 8014906:	e7f9      	b.n	80148fc <memset+0x4>

08014908 <validate_structure>:
 8014908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801490a:	6801      	ldr	r1, [r0, #0]
 801490c:	293b      	cmp	r1, #59	; 0x3b
 801490e:	4604      	mov	r4, r0
 8014910:	d911      	bls.n	8014936 <validate_structure+0x2e>
 8014912:	223c      	movs	r2, #60	; 0x3c
 8014914:	4668      	mov	r0, sp
 8014916:	f000 ff8f 	bl	8015838 <div>
 801491a:	9a01      	ldr	r2, [sp, #4]
 801491c:	6863      	ldr	r3, [r4, #4]
 801491e:	9900      	ldr	r1, [sp, #0]
 8014920:	2a00      	cmp	r2, #0
 8014922:	440b      	add	r3, r1
 8014924:	6063      	str	r3, [r4, #4]
 8014926:	bfbb      	ittet	lt
 8014928:	323c      	addlt	r2, #60	; 0x3c
 801492a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801492e:	6022      	strge	r2, [r4, #0]
 8014930:	6022      	strlt	r2, [r4, #0]
 8014932:	bfb8      	it	lt
 8014934:	6063      	strlt	r3, [r4, #4]
 8014936:	6861      	ldr	r1, [r4, #4]
 8014938:	293b      	cmp	r1, #59	; 0x3b
 801493a:	d911      	bls.n	8014960 <validate_structure+0x58>
 801493c:	223c      	movs	r2, #60	; 0x3c
 801493e:	4668      	mov	r0, sp
 8014940:	f000 ff7a 	bl	8015838 <div>
 8014944:	9a01      	ldr	r2, [sp, #4]
 8014946:	68a3      	ldr	r3, [r4, #8]
 8014948:	9900      	ldr	r1, [sp, #0]
 801494a:	2a00      	cmp	r2, #0
 801494c:	440b      	add	r3, r1
 801494e:	60a3      	str	r3, [r4, #8]
 8014950:	bfbb      	ittet	lt
 8014952:	323c      	addlt	r2, #60	; 0x3c
 8014954:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8014958:	6062      	strge	r2, [r4, #4]
 801495a:	6062      	strlt	r2, [r4, #4]
 801495c:	bfb8      	it	lt
 801495e:	60a3      	strlt	r3, [r4, #8]
 8014960:	68a1      	ldr	r1, [r4, #8]
 8014962:	2917      	cmp	r1, #23
 8014964:	d911      	bls.n	801498a <validate_structure+0x82>
 8014966:	2218      	movs	r2, #24
 8014968:	4668      	mov	r0, sp
 801496a:	f000 ff65 	bl	8015838 <div>
 801496e:	9a01      	ldr	r2, [sp, #4]
 8014970:	68e3      	ldr	r3, [r4, #12]
 8014972:	9900      	ldr	r1, [sp, #0]
 8014974:	2a00      	cmp	r2, #0
 8014976:	440b      	add	r3, r1
 8014978:	60e3      	str	r3, [r4, #12]
 801497a:	bfbb      	ittet	lt
 801497c:	3218      	addlt	r2, #24
 801497e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8014982:	60a2      	strge	r2, [r4, #8]
 8014984:	60a2      	strlt	r2, [r4, #8]
 8014986:	bfb8      	it	lt
 8014988:	60e3      	strlt	r3, [r4, #12]
 801498a:	6921      	ldr	r1, [r4, #16]
 801498c:	290b      	cmp	r1, #11
 801498e:	d911      	bls.n	80149b4 <validate_structure+0xac>
 8014990:	220c      	movs	r2, #12
 8014992:	4668      	mov	r0, sp
 8014994:	f000 ff50 	bl	8015838 <div>
 8014998:	9a01      	ldr	r2, [sp, #4]
 801499a:	6963      	ldr	r3, [r4, #20]
 801499c:	9900      	ldr	r1, [sp, #0]
 801499e:	2a00      	cmp	r2, #0
 80149a0:	440b      	add	r3, r1
 80149a2:	6163      	str	r3, [r4, #20]
 80149a4:	bfbb      	ittet	lt
 80149a6:	320c      	addlt	r2, #12
 80149a8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80149ac:	6122      	strge	r2, [r4, #16]
 80149ae:	6122      	strlt	r2, [r4, #16]
 80149b0:	bfb8      	it	lt
 80149b2:	6163      	strlt	r3, [r4, #20]
 80149b4:	6963      	ldr	r3, [r4, #20]
 80149b6:	0798      	lsls	r0, r3, #30
 80149b8:	d120      	bne.n	80149fc <validate_structure+0xf4>
 80149ba:	2164      	movs	r1, #100	; 0x64
 80149bc:	fb93 f2f1 	sdiv	r2, r3, r1
 80149c0:	fb01 3212 	mls	r2, r1, r2, r3
 80149c4:	b9e2      	cbnz	r2, 8014a00 <validate_structure+0xf8>
 80149c6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80149ca:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80149ce:	fb93 f1f2 	sdiv	r1, r3, r2
 80149d2:	fb02 3311 	mls	r3, r2, r1, r3
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	bf14      	ite	ne
 80149da:	231c      	movne	r3, #28
 80149dc:	231d      	moveq	r3, #29
 80149de:	68e2      	ldr	r2, [r4, #12]
 80149e0:	2a00      	cmp	r2, #0
 80149e2:	dc0f      	bgt.n	8014a04 <validate_structure+0xfc>
 80149e4:	4f33      	ldr	r7, [pc, #204]	; (8014ab4 <validate_structure+0x1ac>)
 80149e6:	260b      	movs	r6, #11
 80149e8:	2064      	movs	r0, #100	; 0x64
 80149ea:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80149ee:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80149f2:	f1bc 0f00 	cmp.w	ip, #0
 80149f6:	dd31      	ble.n	8014a5c <validate_structure+0x154>
 80149f8:	b003      	add	sp, #12
 80149fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149fc:	231c      	movs	r3, #28
 80149fe:	e7ee      	b.n	80149de <validate_structure+0xd6>
 8014a00:	231d      	movs	r3, #29
 8014a02:	e7ec      	b.n	80149de <validate_structure+0xd6>
 8014a04:	4e2b      	ldr	r6, [pc, #172]	; (8014ab4 <validate_structure+0x1ac>)
 8014a06:	2700      	movs	r7, #0
 8014a08:	2064      	movs	r0, #100	; 0x64
 8014a0a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8014a0e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8014a12:	2a01      	cmp	r2, #1
 8014a14:	bf14      	ite	ne
 8014a16:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 8014a1a:	469c      	moveq	ip, r3
 8014a1c:	4561      	cmp	r1, ip
 8014a1e:	ddeb      	ble.n	80149f8 <validate_structure+0xf0>
 8014a20:	3201      	adds	r2, #1
 8014a22:	eba1 010c 	sub.w	r1, r1, ip
 8014a26:	2a0c      	cmp	r2, #12
 8014a28:	60e1      	str	r1, [r4, #12]
 8014a2a:	6122      	str	r2, [r4, #16]
 8014a2c:	d1ef      	bne.n	8014a0e <validate_structure+0x106>
 8014a2e:	6963      	ldr	r3, [r4, #20]
 8014a30:	1c5a      	adds	r2, r3, #1
 8014a32:	0791      	lsls	r1, r2, #30
 8014a34:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8014a38:	d137      	bne.n	8014aaa <validate_structure+0x1a2>
 8014a3a:	fb92 f1f0 	sdiv	r1, r2, r0
 8014a3e:	fb00 2211 	mls	r2, r0, r1, r2
 8014a42:	2a00      	cmp	r2, #0
 8014a44:	d133      	bne.n	8014aae <validate_structure+0x1a6>
 8014a46:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8014a4a:	fb93 f2f5 	sdiv	r2, r3, r5
 8014a4e:	fb05 3312 	mls	r3, r5, r2, r3
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	bf14      	ite	ne
 8014a56:	231c      	movne	r3, #28
 8014a58:	231d      	moveq	r3, #29
 8014a5a:	e7d8      	b.n	8014a0e <validate_structure+0x106>
 8014a5c:	6921      	ldr	r1, [r4, #16]
 8014a5e:	3901      	subs	r1, #1
 8014a60:	6121      	str	r1, [r4, #16]
 8014a62:	3101      	adds	r1, #1
 8014a64:	d114      	bne.n	8014a90 <validate_structure+0x188>
 8014a66:	6963      	ldr	r3, [r4, #20]
 8014a68:	1e5a      	subs	r2, r3, #1
 8014a6a:	0791      	lsls	r1, r2, #30
 8014a6c:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8014a70:	d117      	bne.n	8014aa2 <validate_structure+0x19a>
 8014a72:	fb92 f1f0 	sdiv	r1, r2, r0
 8014a76:	fb00 2211 	mls	r2, r0, r1, r2
 8014a7a:	b9a2      	cbnz	r2, 8014aa6 <validate_structure+0x19e>
 8014a7c:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8014a80:	fb93 f2f5 	sdiv	r2, r3, r5
 8014a84:	fb05 3312 	mls	r3, r5, r2, r3
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	bf14      	ite	ne
 8014a8c:	231c      	movne	r3, #28
 8014a8e:	231d      	moveq	r3, #29
 8014a90:	6922      	ldr	r2, [r4, #16]
 8014a92:	2a01      	cmp	r2, #1
 8014a94:	bf14      	ite	ne
 8014a96:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8014a9a:	461a      	moveq	r2, r3
 8014a9c:	4462      	add	r2, ip
 8014a9e:	60e2      	str	r2, [r4, #12]
 8014aa0:	e7a5      	b.n	80149ee <validate_structure+0xe6>
 8014aa2:	231c      	movs	r3, #28
 8014aa4:	e7f4      	b.n	8014a90 <validate_structure+0x188>
 8014aa6:	231d      	movs	r3, #29
 8014aa8:	e7f2      	b.n	8014a90 <validate_structure+0x188>
 8014aaa:	231c      	movs	r3, #28
 8014aac:	e7af      	b.n	8014a0e <validate_structure+0x106>
 8014aae:	231d      	movs	r3, #29
 8014ab0:	e7ad      	b.n	8014a0e <validate_structure+0x106>
 8014ab2:	bf00      	nop
 8014ab4:	08017948 	.word	0x08017948

08014ab8 <mktime>:
 8014ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014abc:	b085      	sub	sp, #20
 8014abe:	4607      	mov	r7, r0
 8014ac0:	f000 ffe6 	bl	8015a90 <__gettzinfo>
 8014ac4:	4681      	mov	r9, r0
 8014ac6:	4638      	mov	r0, r7
 8014ac8:	f7ff ff1e 	bl	8014908 <validate_structure>
 8014acc:	e9d7 4000 	ldrd	r4, r0, [r7]
 8014ad0:	233c      	movs	r3, #60	; 0x3c
 8014ad2:	fb03 4400 	mla	r4, r3, r0, r4
 8014ad6:	68b8      	ldr	r0, [r7, #8]
 8014ad8:	4abc      	ldr	r2, [pc, #752]	; (8014dcc <mktime+0x314>)
 8014ada:	697e      	ldr	r6, [r7, #20]
 8014adc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8014ae0:	fb03 4400 	mla	r4, r3, r0, r4
 8014ae4:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8014ae8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8014aec:	3d01      	subs	r5, #1
 8014aee:	2b01      	cmp	r3, #1
 8014af0:	4415      	add	r5, r2
 8014af2:	dd11      	ble.n	8014b18 <mktime+0x60>
 8014af4:	07b1      	lsls	r1, r6, #30
 8014af6:	d10f      	bne.n	8014b18 <mktime+0x60>
 8014af8:	2264      	movs	r2, #100	; 0x64
 8014afa:	fb96 f3f2 	sdiv	r3, r6, r2
 8014afe:	fb02 6313 	mls	r3, r2, r3, r6
 8014b02:	b943      	cbnz	r3, 8014b16 <mktime+0x5e>
 8014b04:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8014b08:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8014b0c:	fb93 f1f2 	sdiv	r1, r3, r2
 8014b10:	fb02 3311 	mls	r3, r2, r1, r3
 8014b14:	b903      	cbnz	r3, 8014b18 <mktime+0x60>
 8014b16:	3501      	adds	r5, #1
 8014b18:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8014b1c:	3310      	adds	r3, #16
 8014b1e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8014b22:	4293      	cmp	r3, r2
 8014b24:	61fd      	str	r5, [r7, #28]
 8014b26:	f200 815d 	bhi.w	8014de4 <mktime+0x32c>
 8014b2a:	2e46      	cmp	r6, #70	; 0x46
 8014b2c:	dd71      	ble.n	8014c12 <mktime+0x15a>
 8014b2e:	2346      	movs	r3, #70	; 0x46
 8014b30:	f240 1c6d 	movw	ip, #365	; 0x16d
 8014b34:	2164      	movs	r1, #100	; 0x64
 8014b36:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8014b3a:	079a      	lsls	r2, r3, #30
 8014b3c:	d163      	bne.n	8014c06 <mktime+0x14e>
 8014b3e:	fb93 f2f1 	sdiv	r2, r3, r1
 8014b42:	fb01 3212 	mls	r2, r1, r2, r3
 8014b46:	2a00      	cmp	r2, #0
 8014b48:	d160      	bne.n	8014c0c <mktime+0x154>
 8014b4a:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8014b4e:	fb92 fef0 	sdiv	lr, r2, r0
 8014b52:	fb00 221e 	mls	r2, r0, lr, r2
 8014b56:	2a00      	cmp	r2, #0
 8014b58:	bf14      	ite	ne
 8014b5a:	4662      	movne	r2, ip
 8014b5c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8014b60:	3301      	adds	r3, #1
 8014b62:	429e      	cmp	r6, r3
 8014b64:	4415      	add	r5, r2
 8014b66:	d1e8      	bne.n	8014b3a <mktime+0x82>
 8014b68:	4b99      	ldr	r3, [pc, #612]	; (8014dd0 <mktime+0x318>)
 8014b6a:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8014b6e:	fbc5 4803 	smlal	r4, r8, r5, r3
 8014b72:	f000 fc8f 	bl	8015494 <__tz_lock>
 8014b76:	f000 fc99 	bl	80154ac <_tzset_unlocked>
 8014b7a:	4b96      	ldr	r3, [pc, #600]	; (8014dd4 <mktime+0x31c>)
 8014b7c:	f8d3 b000 	ldr.w	fp, [r3]
 8014b80:	f1bb 0f00 	cmp.w	fp, #0
 8014b84:	d039      	beq.n	8014bfa <mktime+0x142>
 8014b86:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8014b8a:	6978      	ldr	r0, [r7, #20]
 8014b8c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014b90:	f1bb 0f01 	cmp.w	fp, #1
 8014b94:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8014b98:	46da      	mov	sl, fp
 8014b9a:	bfa8      	it	ge
 8014b9c:	f04f 0a01 	movge.w	sl, #1
 8014ba0:	4283      	cmp	r3, r0
 8014ba2:	d178      	bne.n	8014c96 <mktime+0x1de>
 8014ba4:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8014ba8:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8014bac:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 8014bb0:	1a5b      	subs	r3, r3, r1
 8014bb2:	9302      	str	r3, [sp, #8]
 8014bb4:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8014bb8:	9303      	str	r3, [sp, #12]
 8014bba:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 8014bbe:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8014bc2:	9301      	str	r3, [sp, #4]
 8014bc4:	ebb3 0c02 	subs.w	ip, r3, r2
 8014bc8:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 8014bcc:	4564      	cmp	r4, ip
 8014bce:	eb78 0300 	sbcs.w	r3, r8, r0
 8014bd2:	da66      	bge.n	8014ca2 <mktime+0x1ea>
 8014bd4:	f8d9 3000 	ldr.w	r3, [r9]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d06f      	beq.n	8014cbc <mktime+0x204>
 8014bdc:	9b02      	ldr	r3, [sp, #8]
 8014bde:	429c      	cmp	r4, r3
 8014be0:	9b03      	ldr	r3, [sp, #12]
 8014be2:	eb78 0303 	sbcs.w	r3, r8, r3
 8014be6:	db03      	blt.n	8014bf0 <mktime+0x138>
 8014be8:	4564      	cmp	r4, ip
 8014bea:	eb78 0300 	sbcs.w	r3, r8, r0
 8014bee:	db6b      	blt.n	8014cc8 <mktime+0x210>
 8014bf0:	f1bb 0f00 	cmp.w	fp, #0
 8014bf4:	f04f 0b00 	mov.w	fp, #0
 8014bf8:	da6b      	bge.n	8014cd2 <mktime+0x21a>
 8014bfa:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8014bfe:	190c      	adds	r4, r1, r4
 8014c00:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8014c04:	e0a9      	b.n	8014d5a <mktime+0x2a2>
 8014c06:	f240 126d 	movw	r2, #365	; 0x16d
 8014c0a:	e7a9      	b.n	8014b60 <mktime+0xa8>
 8014c0c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8014c10:	e7a6      	b.n	8014b60 <mktime+0xa8>
 8014c12:	d0a9      	beq.n	8014b68 <mktime+0xb0>
 8014c14:	2345      	movs	r3, #69	; 0x45
 8014c16:	f240 1c6d 	movw	ip, #365	; 0x16d
 8014c1a:	2164      	movs	r1, #100	; 0x64
 8014c1c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8014c20:	e012      	b.n	8014c48 <mktime+0x190>
 8014c22:	bb62      	cbnz	r2, 8014c7e <mktime+0x1c6>
 8014c24:	fb93 f2f1 	sdiv	r2, r3, r1
 8014c28:	fb01 3212 	mls	r2, r1, r2, r3
 8014c2c:	bb52      	cbnz	r2, 8014c84 <mktime+0x1cc>
 8014c2e:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8014c32:	fb92 fef0 	sdiv	lr, r2, r0
 8014c36:	fb00 221e 	mls	r2, r0, lr, r2
 8014c3a:	2a00      	cmp	r2, #0
 8014c3c:	bf14      	ite	ne
 8014c3e:	4662      	movne	r2, ip
 8014c40:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8014c44:	1aad      	subs	r5, r5, r2
 8014c46:	3b01      	subs	r3, #1
 8014c48:	429e      	cmp	r6, r3
 8014c4a:	f003 0203 	and.w	r2, r3, #3
 8014c4e:	dbe8      	blt.n	8014c22 <mktime+0x16a>
 8014c50:	b9da      	cbnz	r2, 8014c8a <mktime+0x1d2>
 8014c52:	2264      	movs	r2, #100	; 0x64
 8014c54:	fb96 f3f2 	sdiv	r3, r6, r2
 8014c58:	fb02 6313 	mls	r3, r2, r3, r6
 8014c5c:	b9c3      	cbnz	r3, 8014c90 <mktime+0x1d8>
 8014c5e:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8014c62:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8014c66:	fb93 f1f2 	sdiv	r1, r3, r2
 8014c6a:	fb02 3311 	mls	r3, r2, r1, r3
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	f240 136d 	movw	r3, #365	; 0x16d
 8014c74:	bf08      	it	eq
 8014c76:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8014c7a:	1aed      	subs	r5, r5, r3
 8014c7c:	e774      	b.n	8014b68 <mktime+0xb0>
 8014c7e:	f240 126d 	movw	r2, #365	; 0x16d
 8014c82:	e7df      	b.n	8014c44 <mktime+0x18c>
 8014c84:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8014c88:	e7dc      	b.n	8014c44 <mktime+0x18c>
 8014c8a:	f240 136d 	movw	r3, #365	; 0x16d
 8014c8e:	e7f4      	b.n	8014c7a <mktime+0x1c2>
 8014c90:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8014c94:	e7f1      	b.n	8014c7a <mktime+0x1c2>
 8014c96:	f000 fb53 	bl	8015340 <__tzcalc_limits>
 8014c9a:	2800      	cmp	r0, #0
 8014c9c:	d182      	bne.n	8014ba4 <mktime+0xec>
 8014c9e:	46d3      	mov	fp, sl
 8014ca0:	e050      	b.n	8014d44 <mktime+0x28c>
 8014ca2:	9b01      	ldr	r3, [sp, #4]
 8014ca4:	1a5b      	subs	r3, r3, r1
 8014ca6:	9301      	str	r3, [sp, #4]
 8014ca8:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8014cac:	eb6e 0e03 	sbc.w	lr, lr, r3
 8014cb0:	9b01      	ldr	r3, [sp, #4]
 8014cb2:	429c      	cmp	r4, r3
 8014cb4:	eb78 030e 	sbcs.w	r3, r8, lr
 8014cb8:	dbf1      	blt.n	8014c9e <mktime+0x1e6>
 8014cba:	e78b      	b.n	8014bd4 <mktime+0x11c>
 8014cbc:	9b02      	ldr	r3, [sp, #8]
 8014cbe:	429c      	cmp	r4, r3
 8014cc0:	9b03      	ldr	r3, [sp, #12]
 8014cc2:	eb78 0303 	sbcs.w	r3, r8, r3
 8014cc6:	db8f      	blt.n	8014be8 <mktime+0x130>
 8014cc8:	f1bb 0f00 	cmp.w	fp, #0
 8014ccc:	db3e      	blt.n	8014d4c <mktime+0x294>
 8014cce:	f04f 0b01 	mov.w	fp, #1
 8014cd2:	ea8a 0a0b 	eor.w	sl, sl, fp
 8014cd6:	f1ba 0f01 	cmp.w	sl, #1
 8014cda:	d133      	bne.n	8014d44 <mktime+0x28c>
 8014cdc:	f1bb 0f00 	cmp.w	fp, #0
 8014ce0:	d04e      	beq.n	8014d80 <mktime+0x2c8>
 8014ce2:	1a52      	subs	r2, r2, r1
 8014ce4:	683b      	ldr	r3, [r7, #0]
 8014ce6:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8014cea:	4413      	add	r3, r2
 8014cec:	1914      	adds	r4, r2, r4
 8014cee:	603b      	str	r3, [r7, #0]
 8014cf0:	4638      	mov	r0, r7
 8014cf2:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 8014cf6:	f7ff fe07 	bl	8014908 <validate_structure>
 8014cfa:	68fa      	ldr	r2, [r7, #12]
 8014cfc:	ebb2 020a 	subs.w	r2, r2, sl
 8014d00:	d020      	beq.n	8014d44 <mktime+0x28c>
 8014d02:	2a01      	cmp	r2, #1
 8014d04:	dc3e      	bgt.n	8014d84 <mktime+0x2cc>
 8014d06:	1c90      	adds	r0, r2, #2
 8014d08:	bfd8      	it	le
 8014d0a:	2201      	movle	r2, #1
 8014d0c:	69fb      	ldr	r3, [r7, #28]
 8014d0e:	18d3      	adds	r3, r2, r3
 8014d10:	4415      	add	r5, r2
 8014d12:	d540      	bpl.n	8014d96 <mktime+0x2de>
 8014d14:	1e73      	subs	r3, r6, #1
 8014d16:	0799      	lsls	r1, r3, #30
 8014d18:	d137      	bne.n	8014d8a <mktime+0x2d2>
 8014d1a:	2264      	movs	r2, #100	; 0x64
 8014d1c:	fb93 f1f2 	sdiv	r1, r3, r2
 8014d20:	fb02 3311 	mls	r3, r2, r1, r3
 8014d24:	bba3      	cbnz	r3, 8014d90 <mktime+0x2d8>
 8014d26:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8014d2a:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8014d2e:	fb96 f2f3 	sdiv	r2, r6, r3
 8014d32:	fb03 6612 	mls	r6, r3, r2, r6
 8014d36:	2e00      	cmp	r6, #0
 8014d38:	f240 136d 	movw	r3, #365	; 0x16d
 8014d3c:	bf18      	it	ne
 8014d3e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8014d42:	61fb      	str	r3, [r7, #28]
 8014d44:	f1bb 0f01 	cmp.w	fp, #1
 8014d48:	f47f af57 	bne.w	8014bfa <mktime+0x142>
 8014d4c:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8014d50:	190c      	adds	r4, r1, r4
 8014d52:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8014d56:	f04f 0b01 	mov.w	fp, #1
 8014d5a:	f000 fba1 	bl	80154a0 <__tz_unlock>
 8014d5e:	3504      	adds	r5, #4
 8014d60:	2307      	movs	r3, #7
 8014d62:	fb95 f3f3 	sdiv	r3, r5, r3
 8014d66:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8014d6a:	1aed      	subs	r5, r5, r3
 8014d6c:	bf48      	it	mi
 8014d6e:	3507      	addmi	r5, #7
 8014d70:	f8c7 b020 	str.w	fp, [r7, #32]
 8014d74:	61bd      	str	r5, [r7, #24]
 8014d76:	4620      	mov	r0, r4
 8014d78:	4641      	mov	r1, r8
 8014d7a:	b005      	add	sp, #20
 8014d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d80:	1a8a      	subs	r2, r1, r2
 8014d82:	e7af      	b.n	8014ce4 <mktime+0x22c>
 8014d84:	f04f 32ff 	mov.w	r2, #4294967295
 8014d88:	e7c0      	b.n	8014d0c <mktime+0x254>
 8014d8a:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8014d8e:	e7d8      	b.n	8014d42 <mktime+0x28a>
 8014d90:	f240 136d 	movw	r3, #365	; 0x16d
 8014d94:	e7d5      	b.n	8014d42 <mktime+0x28a>
 8014d96:	07b2      	lsls	r2, r6, #30
 8014d98:	d11e      	bne.n	8014dd8 <mktime+0x320>
 8014d9a:	2164      	movs	r1, #100	; 0x64
 8014d9c:	fb96 f2f1 	sdiv	r2, r6, r1
 8014da0:	fb01 6212 	mls	r2, r1, r2, r6
 8014da4:	b9da      	cbnz	r2, 8014dde <mktime+0x326>
 8014da6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8014daa:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8014dae:	fb96 f1f2 	sdiv	r1, r6, r2
 8014db2:	fb02 6611 	mls	r6, r2, r1, r6
 8014db6:	2e00      	cmp	r6, #0
 8014db8:	f240 126d 	movw	r2, #365	; 0x16d
 8014dbc:	bf08      	it	eq
 8014dbe:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8014dc2:	4293      	cmp	r3, r2
 8014dc4:	bfa8      	it	ge
 8014dc6:	1a9b      	subge	r3, r3, r2
 8014dc8:	e7bb      	b.n	8014d42 <mktime+0x28a>
 8014dca:	bf00      	nop
 8014dcc:	08017978 	.word	0x08017978
 8014dd0:	00015180 	.word	0x00015180
 8014dd4:	2000db4c 	.word	0x2000db4c
 8014dd8:	f240 126d 	movw	r2, #365	; 0x16d
 8014ddc:	e7f1      	b.n	8014dc2 <mktime+0x30a>
 8014dde:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8014de2:	e7ee      	b.n	8014dc2 <mktime+0x30a>
 8014de4:	f04f 34ff 	mov.w	r4, #4294967295
 8014de8:	46a0      	mov	r8, r4
 8014dea:	e7c4      	b.n	8014d76 <mktime+0x2be>

08014dec <_free_r>:
 8014dec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014dee:	2900      	cmp	r1, #0
 8014df0:	d044      	beq.n	8014e7c <_free_r+0x90>
 8014df2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014df6:	9001      	str	r0, [sp, #4]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	f1a1 0404 	sub.w	r4, r1, #4
 8014dfe:	bfb8      	it	lt
 8014e00:	18e4      	addlt	r4, r4, r3
 8014e02:	f000 fe5b 	bl	8015abc <__malloc_lock>
 8014e06:	4a1e      	ldr	r2, [pc, #120]	; (8014e80 <_free_r+0x94>)
 8014e08:	9801      	ldr	r0, [sp, #4]
 8014e0a:	6813      	ldr	r3, [r2, #0]
 8014e0c:	b933      	cbnz	r3, 8014e1c <_free_r+0x30>
 8014e0e:	6063      	str	r3, [r4, #4]
 8014e10:	6014      	str	r4, [r2, #0]
 8014e12:	b003      	add	sp, #12
 8014e14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014e18:	f000 be56 	b.w	8015ac8 <__malloc_unlock>
 8014e1c:	42a3      	cmp	r3, r4
 8014e1e:	d908      	bls.n	8014e32 <_free_r+0x46>
 8014e20:	6825      	ldr	r5, [r4, #0]
 8014e22:	1961      	adds	r1, r4, r5
 8014e24:	428b      	cmp	r3, r1
 8014e26:	bf01      	itttt	eq
 8014e28:	6819      	ldreq	r1, [r3, #0]
 8014e2a:	685b      	ldreq	r3, [r3, #4]
 8014e2c:	1949      	addeq	r1, r1, r5
 8014e2e:	6021      	streq	r1, [r4, #0]
 8014e30:	e7ed      	b.n	8014e0e <_free_r+0x22>
 8014e32:	461a      	mov	r2, r3
 8014e34:	685b      	ldr	r3, [r3, #4]
 8014e36:	b10b      	cbz	r3, 8014e3c <_free_r+0x50>
 8014e38:	42a3      	cmp	r3, r4
 8014e3a:	d9fa      	bls.n	8014e32 <_free_r+0x46>
 8014e3c:	6811      	ldr	r1, [r2, #0]
 8014e3e:	1855      	adds	r5, r2, r1
 8014e40:	42a5      	cmp	r5, r4
 8014e42:	d10b      	bne.n	8014e5c <_free_r+0x70>
 8014e44:	6824      	ldr	r4, [r4, #0]
 8014e46:	4421      	add	r1, r4
 8014e48:	1854      	adds	r4, r2, r1
 8014e4a:	42a3      	cmp	r3, r4
 8014e4c:	6011      	str	r1, [r2, #0]
 8014e4e:	d1e0      	bne.n	8014e12 <_free_r+0x26>
 8014e50:	681c      	ldr	r4, [r3, #0]
 8014e52:	685b      	ldr	r3, [r3, #4]
 8014e54:	6053      	str	r3, [r2, #4]
 8014e56:	4421      	add	r1, r4
 8014e58:	6011      	str	r1, [r2, #0]
 8014e5a:	e7da      	b.n	8014e12 <_free_r+0x26>
 8014e5c:	d902      	bls.n	8014e64 <_free_r+0x78>
 8014e5e:	230c      	movs	r3, #12
 8014e60:	6003      	str	r3, [r0, #0]
 8014e62:	e7d6      	b.n	8014e12 <_free_r+0x26>
 8014e64:	6825      	ldr	r5, [r4, #0]
 8014e66:	1961      	adds	r1, r4, r5
 8014e68:	428b      	cmp	r3, r1
 8014e6a:	bf04      	itt	eq
 8014e6c:	6819      	ldreq	r1, [r3, #0]
 8014e6e:	685b      	ldreq	r3, [r3, #4]
 8014e70:	6063      	str	r3, [r4, #4]
 8014e72:	bf04      	itt	eq
 8014e74:	1949      	addeq	r1, r1, r5
 8014e76:	6021      	streq	r1, [r4, #0]
 8014e78:	6054      	str	r4, [r2, #4]
 8014e7a:	e7ca      	b.n	8014e12 <_free_r+0x26>
 8014e7c:	b003      	add	sp, #12
 8014e7e:	bd30      	pop	{r4, r5, pc}
 8014e80:	2000db24 	.word	0x2000db24

08014e84 <sbrk_aligned>:
 8014e84:	b570      	push	{r4, r5, r6, lr}
 8014e86:	4e0e      	ldr	r6, [pc, #56]	; (8014ec0 <sbrk_aligned+0x3c>)
 8014e88:	460c      	mov	r4, r1
 8014e8a:	6831      	ldr	r1, [r6, #0]
 8014e8c:	4605      	mov	r5, r0
 8014e8e:	b911      	cbnz	r1, 8014e96 <sbrk_aligned+0x12>
 8014e90:	f000 f8f6 	bl	8015080 <_sbrk_r>
 8014e94:	6030      	str	r0, [r6, #0]
 8014e96:	4621      	mov	r1, r4
 8014e98:	4628      	mov	r0, r5
 8014e9a:	f000 f8f1 	bl	8015080 <_sbrk_r>
 8014e9e:	1c43      	adds	r3, r0, #1
 8014ea0:	d00a      	beq.n	8014eb8 <sbrk_aligned+0x34>
 8014ea2:	1cc4      	adds	r4, r0, #3
 8014ea4:	f024 0403 	bic.w	r4, r4, #3
 8014ea8:	42a0      	cmp	r0, r4
 8014eaa:	d007      	beq.n	8014ebc <sbrk_aligned+0x38>
 8014eac:	1a21      	subs	r1, r4, r0
 8014eae:	4628      	mov	r0, r5
 8014eb0:	f000 f8e6 	bl	8015080 <_sbrk_r>
 8014eb4:	3001      	adds	r0, #1
 8014eb6:	d101      	bne.n	8014ebc <sbrk_aligned+0x38>
 8014eb8:	f04f 34ff 	mov.w	r4, #4294967295
 8014ebc:	4620      	mov	r0, r4
 8014ebe:	bd70      	pop	{r4, r5, r6, pc}
 8014ec0:	2000db28 	.word	0x2000db28

08014ec4 <_malloc_r>:
 8014ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ec8:	1ccd      	adds	r5, r1, #3
 8014eca:	f025 0503 	bic.w	r5, r5, #3
 8014ece:	3508      	adds	r5, #8
 8014ed0:	2d0c      	cmp	r5, #12
 8014ed2:	bf38      	it	cc
 8014ed4:	250c      	movcc	r5, #12
 8014ed6:	2d00      	cmp	r5, #0
 8014ed8:	4607      	mov	r7, r0
 8014eda:	db01      	blt.n	8014ee0 <_malloc_r+0x1c>
 8014edc:	42a9      	cmp	r1, r5
 8014ede:	d905      	bls.n	8014eec <_malloc_r+0x28>
 8014ee0:	230c      	movs	r3, #12
 8014ee2:	603b      	str	r3, [r7, #0]
 8014ee4:	2600      	movs	r6, #0
 8014ee6:	4630      	mov	r0, r6
 8014ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014eec:	4e2e      	ldr	r6, [pc, #184]	; (8014fa8 <_malloc_r+0xe4>)
 8014eee:	f000 fde5 	bl	8015abc <__malloc_lock>
 8014ef2:	6833      	ldr	r3, [r6, #0]
 8014ef4:	461c      	mov	r4, r3
 8014ef6:	bb34      	cbnz	r4, 8014f46 <_malloc_r+0x82>
 8014ef8:	4629      	mov	r1, r5
 8014efa:	4638      	mov	r0, r7
 8014efc:	f7ff ffc2 	bl	8014e84 <sbrk_aligned>
 8014f00:	1c43      	adds	r3, r0, #1
 8014f02:	4604      	mov	r4, r0
 8014f04:	d14d      	bne.n	8014fa2 <_malloc_r+0xde>
 8014f06:	6834      	ldr	r4, [r6, #0]
 8014f08:	4626      	mov	r6, r4
 8014f0a:	2e00      	cmp	r6, #0
 8014f0c:	d140      	bne.n	8014f90 <_malloc_r+0xcc>
 8014f0e:	6823      	ldr	r3, [r4, #0]
 8014f10:	4631      	mov	r1, r6
 8014f12:	4638      	mov	r0, r7
 8014f14:	eb04 0803 	add.w	r8, r4, r3
 8014f18:	f000 f8b2 	bl	8015080 <_sbrk_r>
 8014f1c:	4580      	cmp	r8, r0
 8014f1e:	d13a      	bne.n	8014f96 <_malloc_r+0xd2>
 8014f20:	6821      	ldr	r1, [r4, #0]
 8014f22:	3503      	adds	r5, #3
 8014f24:	1a6d      	subs	r5, r5, r1
 8014f26:	f025 0503 	bic.w	r5, r5, #3
 8014f2a:	3508      	adds	r5, #8
 8014f2c:	2d0c      	cmp	r5, #12
 8014f2e:	bf38      	it	cc
 8014f30:	250c      	movcc	r5, #12
 8014f32:	4629      	mov	r1, r5
 8014f34:	4638      	mov	r0, r7
 8014f36:	f7ff ffa5 	bl	8014e84 <sbrk_aligned>
 8014f3a:	3001      	adds	r0, #1
 8014f3c:	d02b      	beq.n	8014f96 <_malloc_r+0xd2>
 8014f3e:	6823      	ldr	r3, [r4, #0]
 8014f40:	442b      	add	r3, r5
 8014f42:	6023      	str	r3, [r4, #0]
 8014f44:	e00e      	b.n	8014f64 <_malloc_r+0xa0>
 8014f46:	6822      	ldr	r2, [r4, #0]
 8014f48:	1b52      	subs	r2, r2, r5
 8014f4a:	d41e      	bmi.n	8014f8a <_malloc_r+0xc6>
 8014f4c:	2a0b      	cmp	r2, #11
 8014f4e:	d916      	bls.n	8014f7e <_malloc_r+0xba>
 8014f50:	1961      	adds	r1, r4, r5
 8014f52:	42a3      	cmp	r3, r4
 8014f54:	6025      	str	r5, [r4, #0]
 8014f56:	bf18      	it	ne
 8014f58:	6059      	strne	r1, [r3, #4]
 8014f5a:	6863      	ldr	r3, [r4, #4]
 8014f5c:	bf08      	it	eq
 8014f5e:	6031      	streq	r1, [r6, #0]
 8014f60:	5162      	str	r2, [r4, r5]
 8014f62:	604b      	str	r3, [r1, #4]
 8014f64:	4638      	mov	r0, r7
 8014f66:	f104 060b 	add.w	r6, r4, #11
 8014f6a:	f000 fdad 	bl	8015ac8 <__malloc_unlock>
 8014f6e:	f026 0607 	bic.w	r6, r6, #7
 8014f72:	1d23      	adds	r3, r4, #4
 8014f74:	1af2      	subs	r2, r6, r3
 8014f76:	d0b6      	beq.n	8014ee6 <_malloc_r+0x22>
 8014f78:	1b9b      	subs	r3, r3, r6
 8014f7a:	50a3      	str	r3, [r4, r2]
 8014f7c:	e7b3      	b.n	8014ee6 <_malloc_r+0x22>
 8014f7e:	6862      	ldr	r2, [r4, #4]
 8014f80:	42a3      	cmp	r3, r4
 8014f82:	bf0c      	ite	eq
 8014f84:	6032      	streq	r2, [r6, #0]
 8014f86:	605a      	strne	r2, [r3, #4]
 8014f88:	e7ec      	b.n	8014f64 <_malloc_r+0xa0>
 8014f8a:	4623      	mov	r3, r4
 8014f8c:	6864      	ldr	r4, [r4, #4]
 8014f8e:	e7b2      	b.n	8014ef6 <_malloc_r+0x32>
 8014f90:	4634      	mov	r4, r6
 8014f92:	6876      	ldr	r6, [r6, #4]
 8014f94:	e7b9      	b.n	8014f0a <_malloc_r+0x46>
 8014f96:	230c      	movs	r3, #12
 8014f98:	603b      	str	r3, [r7, #0]
 8014f9a:	4638      	mov	r0, r7
 8014f9c:	f000 fd94 	bl	8015ac8 <__malloc_unlock>
 8014fa0:	e7a1      	b.n	8014ee6 <_malloc_r+0x22>
 8014fa2:	6025      	str	r5, [r4, #0]
 8014fa4:	e7de      	b.n	8014f64 <_malloc_r+0xa0>
 8014fa6:	bf00      	nop
 8014fa8:	2000db24 	.word	0x2000db24

08014fac <cleanup_glue>:
 8014fac:	b538      	push	{r3, r4, r5, lr}
 8014fae:	460c      	mov	r4, r1
 8014fb0:	6809      	ldr	r1, [r1, #0]
 8014fb2:	4605      	mov	r5, r0
 8014fb4:	b109      	cbz	r1, 8014fba <cleanup_glue+0xe>
 8014fb6:	f7ff fff9 	bl	8014fac <cleanup_glue>
 8014fba:	4621      	mov	r1, r4
 8014fbc:	4628      	mov	r0, r5
 8014fbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014fc2:	f7ff bf13 	b.w	8014dec <_free_r>
	...

08014fc8 <_reclaim_reent>:
 8014fc8:	4b2c      	ldr	r3, [pc, #176]	; (801507c <_reclaim_reent+0xb4>)
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	4283      	cmp	r3, r0
 8014fce:	b570      	push	{r4, r5, r6, lr}
 8014fd0:	4604      	mov	r4, r0
 8014fd2:	d051      	beq.n	8015078 <_reclaim_reent+0xb0>
 8014fd4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014fd6:	b143      	cbz	r3, 8014fea <_reclaim_reent+0x22>
 8014fd8:	68db      	ldr	r3, [r3, #12]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d14a      	bne.n	8015074 <_reclaim_reent+0xac>
 8014fde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014fe0:	6819      	ldr	r1, [r3, #0]
 8014fe2:	b111      	cbz	r1, 8014fea <_reclaim_reent+0x22>
 8014fe4:	4620      	mov	r0, r4
 8014fe6:	f7ff ff01 	bl	8014dec <_free_r>
 8014fea:	6961      	ldr	r1, [r4, #20]
 8014fec:	b111      	cbz	r1, 8014ff4 <_reclaim_reent+0x2c>
 8014fee:	4620      	mov	r0, r4
 8014ff0:	f7ff fefc 	bl	8014dec <_free_r>
 8014ff4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014ff6:	b111      	cbz	r1, 8014ffe <_reclaim_reent+0x36>
 8014ff8:	4620      	mov	r0, r4
 8014ffa:	f7ff fef7 	bl	8014dec <_free_r>
 8014ffe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015000:	b111      	cbz	r1, 8015008 <_reclaim_reent+0x40>
 8015002:	4620      	mov	r0, r4
 8015004:	f7ff fef2 	bl	8014dec <_free_r>
 8015008:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801500a:	b111      	cbz	r1, 8015012 <_reclaim_reent+0x4a>
 801500c:	4620      	mov	r0, r4
 801500e:	f7ff feed 	bl	8014dec <_free_r>
 8015012:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8015014:	b111      	cbz	r1, 801501c <_reclaim_reent+0x54>
 8015016:	4620      	mov	r0, r4
 8015018:	f7ff fee8 	bl	8014dec <_free_r>
 801501c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801501e:	b111      	cbz	r1, 8015026 <_reclaim_reent+0x5e>
 8015020:	4620      	mov	r0, r4
 8015022:	f7ff fee3 	bl	8014dec <_free_r>
 8015026:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8015028:	b111      	cbz	r1, 8015030 <_reclaim_reent+0x68>
 801502a:	4620      	mov	r0, r4
 801502c:	f7ff fede 	bl	8014dec <_free_r>
 8015030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015032:	b111      	cbz	r1, 801503a <_reclaim_reent+0x72>
 8015034:	4620      	mov	r0, r4
 8015036:	f7ff fed9 	bl	8014dec <_free_r>
 801503a:	69a3      	ldr	r3, [r4, #24]
 801503c:	b1e3      	cbz	r3, 8015078 <_reclaim_reent+0xb0>
 801503e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015040:	4620      	mov	r0, r4
 8015042:	4798      	blx	r3
 8015044:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8015046:	b1b9      	cbz	r1, 8015078 <_reclaim_reent+0xb0>
 8015048:	4620      	mov	r0, r4
 801504a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801504e:	f7ff bfad 	b.w	8014fac <cleanup_glue>
 8015052:	5949      	ldr	r1, [r1, r5]
 8015054:	b941      	cbnz	r1, 8015068 <_reclaim_reent+0xa0>
 8015056:	3504      	adds	r5, #4
 8015058:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801505a:	2d80      	cmp	r5, #128	; 0x80
 801505c:	68d9      	ldr	r1, [r3, #12]
 801505e:	d1f8      	bne.n	8015052 <_reclaim_reent+0x8a>
 8015060:	4620      	mov	r0, r4
 8015062:	f7ff fec3 	bl	8014dec <_free_r>
 8015066:	e7ba      	b.n	8014fde <_reclaim_reent+0x16>
 8015068:	680e      	ldr	r6, [r1, #0]
 801506a:	4620      	mov	r0, r4
 801506c:	f7ff febe 	bl	8014dec <_free_r>
 8015070:	4631      	mov	r1, r6
 8015072:	e7ef      	b.n	8015054 <_reclaim_reent+0x8c>
 8015074:	2500      	movs	r5, #0
 8015076:	e7ef      	b.n	8015058 <_reclaim_reent+0x90>
 8015078:	bd70      	pop	{r4, r5, r6, pc}
 801507a:	bf00      	nop
 801507c:	200002b4 	.word	0x200002b4

08015080 <_sbrk_r>:
 8015080:	b538      	push	{r3, r4, r5, lr}
 8015082:	4d06      	ldr	r5, [pc, #24]	; (801509c <_sbrk_r+0x1c>)
 8015084:	2300      	movs	r3, #0
 8015086:	4604      	mov	r4, r0
 8015088:	4608      	mov	r0, r1
 801508a:	602b      	str	r3, [r5, #0]
 801508c:	f7ed ffa4 	bl	8002fd8 <_sbrk>
 8015090:	1c43      	adds	r3, r0, #1
 8015092:	d102      	bne.n	801509a <_sbrk_r+0x1a>
 8015094:	682b      	ldr	r3, [r5, #0]
 8015096:	b103      	cbz	r3, 801509a <_sbrk_r+0x1a>
 8015098:	6023      	str	r3, [r4, #0]
 801509a:	bd38      	pop	{r3, r4, r5, pc}
 801509c:	2000db2c 	.word	0x2000db2c

080150a0 <siprintf>:
 80150a0:	b40e      	push	{r1, r2, r3}
 80150a2:	b500      	push	{lr}
 80150a4:	b09c      	sub	sp, #112	; 0x70
 80150a6:	ab1d      	add	r3, sp, #116	; 0x74
 80150a8:	9002      	str	r0, [sp, #8]
 80150aa:	9006      	str	r0, [sp, #24]
 80150ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80150b0:	4809      	ldr	r0, [pc, #36]	; (80150d8 <siprintf+0x38>)
 80150b2:	9107      	str	r1, [sp, #28]
 80150b4:	9104      	str	r1, [sp, #16]
 80150b6:	4909      	ldr	r1, [pc, #36]	; (80150dc <siprintf+0x3c>)
 80150b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80150bc:	9105      	str	r1, [sp, #20]
 80150be:	6800      	ldr	r0, [r0, #0]
 80150c0:	9301      	str	r3, [sp, #4]
 80150c2:	a902      	add	r1, sp, #8
 80150c4:	f000 fd62 	bl	8015b8c <_svfiprintf_r>
 80150c8:	9b02      	ldr	r3, [sp, #8]
 80150ca:	2200      	movs	r2, #0
 80150cc:	701a      	strb	r2, [r3, #0]
 80150ce:	b01c      	add	sp, #112	; 0x70
 80150d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80150d4:	b003      	add	sp, #12
 80150d6:	4770      	bx	lr
 80150d8:	200002b4 	.word	0x200002b4
 80150dc:	ffff0208 	.word	0xffff0208

080150e0 <__sread>:
 80150e0:	b510      	push	{r4, lr}
 80150e2:	460c      	mov	r4, r1
 80150e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150e8:	f001 f93e 	bl	8016368 <_read_r>
 80150ec:	2800      	cmp	r0, #0
 80150ee:	bfab      	itete	ge
 80150f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80150f2:	89a3      	ldrhlt	r3, [r4, #12]
 80150f4:	181b      	addge	r3, r3, r0
 80150f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80150fa:	bfac      	ite	ge
 80150fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80150fe:	81a3      	strhlt	r3, [r4, #12]
 8015100:	bd10      	pop	{r4, pc}

08015102 <__seofread>:
 8015102:	2000      	movs	r0, #0
 8015104:	4770      	bx	lr

08015106 <__swrite>:
 8015106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801510a:	461f      	mov	r7, r3
 801510c:	898b      	ldrh	r3, [r1, #12]
 801510e:	05db      	lsls	r3, r3, #23
 8015110:	4605      	mov	r5, r0
 8015112:	460c      	mov	r4, r1
 8015114:	4616      	mov	r6, r2
 8015116:	d505      	bpl.n	8015124 <__swrite+0x1e>
 8015118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801511c:	2302      	movs	r3, #2
 801511e:	2200      	movs	r2, #0
 8015120:	f000 fcba 	bl	8015a98 <_lseek_r>
 8015124:	89a3      	ldrh	r3, [r4, #12]
 8015126:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801512a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801512e:	81a3      	strh	r3, [r4, #12]
 8015130:	4632      	mov	r2, r6
 8015132:	463b      	mov	r3, r7
 8015134:	4628      	mov	r0, r5
 8015136:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801513a:	f000 bb3d 	b.w	80157b8 <_write_r>

0801513e <__sseek>:
 801513e:	b510      	push	{r4, lr}
 8015140:	460c      	mov	r4, r1
 8015142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015146:	f000 fca7 	bl	8015a98 <_lseek_r>
 801514a:	1c43      	adds	r3, r0, #1
 801514c:	89a3      	ldrh	r3, [r4, #12]
 801514e:	bf15      	itete	ne
 8015150:	6560      	strne	r0, [r4, #84]	; 0x54
 8015152:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015156:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801515a:	81a3      	strheq	r3, [r4, #12]
 801515c:	bf18      	it	ne
 801515e:	81a3      	strhne	r3, [r4, #12]
 8015160:	bd10      	pop	{r4, pc}

08015162 <__sclose>:
 8015162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015166:	f000 bb57 	b.w	8015818 <_close_r>
	...

0801516c <strtok>:
 801516c:	4b16      	ldr	r3, [pc, #88]	; (80151c8 <strtok+0x5c>)
 801516e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015170:	681e      	ldr	r6, [r3, #0]
 8015172:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8015174:	4605      	mov	r5, r0
 8015176:	b9fc      	cbnz	r4, 80151b8 <strtok+0x4c>
 8015178:	2050      	movs	r0, #80	; 0x50
 801517a:	9101      	str	r1, [sp, #4]
 801517c:	f7ff fb9e 	bl	80148bc <malloc>
 8015180:	9901      	ldr	r1, [sp, #4]
 8015182:	65b0      	str	r0, [r6, #88]	; 0x58
 8015184:	4602      	mov	r2, r0
 8015186:	b920      	cbnz	r0, 8015192 <strtok+0x26>
 8015188:	4b10      	ldr	r3, [pc, #64]	; (80151cc <strtok+0x60>)
 801518a:	4811      	ldr	r0, [pc, #68]	; (80151d0 <strtok+0x64>)
 801518c:	2157      	movs	r1, #87	; 0x57
 801518e:	f000 fb25 	bl	80157dc <__assert_func>
 8015192:	e9c0 4400 	strd	r4, r4, [r0]
 8015196:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801519a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801519e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80151a2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80151a6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80151aa:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80151ae:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80151b2:	6184      	str	r4, [r0, #24]
 80151b4:	7704      	strb	r4, [r0, #28]
 80151b6:	6244      	str	r4, [r0, #36]	; 0x24
 80151b8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80151ba:	2301      	movs	r3, #1
 80151bc:	4628      	mov	r0, r5
 80151be:	b002      	add	sp, #8
 80151c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80151c4:	f000 b806 	b.w	80151d4 <__strtok_r>
 80151c8:	200002b4 	.word	0x200002b4
 80151cc:	080179a8 	.word	0x080179a8
 80151d0:	080179bf 	.word	0x080179bf

080151d4 <__strtok_r>:
 80151d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151d6:	b908      	cbnz	r0, 80151dc <__strtok_r+0x8>
 80151d8:	6810      	ldr	r0, [r2, #0]
 80151da:	b188      	cbz	r0, 8015200 <__strtok_r+0x2c>
 80151dc:	4604      	mov	r4, r0
 80151de:	4620      	mov	r0, r4
 80151e0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80151e4:	460f      	mov	r7, r1
 80151e6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80151ea:	b91e      	cbnz	r6, 80151f4 <__strtok_r+0x20>
 80151ec:	b965      	cbnz	r5, 8015208 <__strtok_r+0x34>
 80151ee:	6015      	str	r5, [r2, #0]
 80151f0:	4628      	mov	r0, r5
 80151f2:	e005      	b.n	8015200 <__strtok_r+0x2c>
 80151f4:	42b5      	cmp	r5, r6
 80151f6:	d1f6      	bne.n	80151e6 <__strtok_r+0x12>
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d1f0      	bne.n	80151de <__strtok_r+0xa>
 80151fc:	6014      	str	r4, [r2, #0]
 80151fe:	7003      	strb	r3, [r0, #0]
 8015200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015202:	461c      	mov	r4, r3
 8015204:	e00c      	b.n	8015220 <__strtok_r+0x4c>
 8015206:	b915      	cbnz	r5, 801520e <__strtok_r+0x3a>
 8015208:	f814 3b01 	ldrb.w	r3, [r4], #1
 801520c:	460e      	mov	r6, r1
 801520e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8015212:	42ab      	cmp	r3, r5
 8015214:	d1f7      	bne.n	8015206 <__strtok_r+0x32>
 8015216:	2b00      	cmp	r3, #0
 8015218:	d0f3      	beq.n	8015202 <__strtok_r+0x2e>
 801521a:	2300      	movs	r3, #0
 801521c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8015220:	6014      	str	r4, [r2, #0]
 8015222:	e7ed      	b.n	8015200 <__strtok_r+0x2c>

08015224 <_strtol_l.constprop.0>:
 8015224:	2b01      	cmp	r3, #1
 8015226:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801522a:	d001      	beq.n	8015230 <_strtol_l.constprop.0+0xc>
 801522c:	2b24      	cmp	r3, #36	; 0x24
 801522e:	d906      	bls.n	801523e <_strtol_l.constprop.0+0x1a>
 8015230:	f7ff fa1e 	bl	8014670 <__errno>
 8015234:	2316      	movs	r3, #22
 8015236:	6003      	str	r3, [r0, #0]
 8015238:	2000      	movs	r0, #0
 801523a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801523e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8015324 <_strtol_l.constprop.0+0x100>
 8015242:	460d      	mov	r5, r1
 8015244:	462e      	mov	r6, r5
 8015246:	f815 4b01 	ldrb.w	r4, [r5], #1
 801524a:	f814 700c 	ldrb.w	r7, [r4, ip]
 801524e:	f017 0708 	ands.w	r7, r7, #8
 8015252:	d1f7      	bne.n	8015244 <_strtol_l.constprop.0+0x20>
 8015254:	2c2d      	cmp	r4, #45	; 0x2d
 8015256:	d132      	bne.n	80152be <_strtol_l.constprop.0+0x9a>
 8015258:	782c      	ldrb	r4, [r5, #0]
 801525a:	2701      	movs	r7, #1
 801525c:	1cb5      	adds	r5, r6, #2
 801525e:	2b00      	cmp	r3, #0
 8015260:	d05b      	beq.n	801531a <_strtol_l.constprop.0+0xf6>
 8015262:	2b10      	cmp	r3, #16
 8015264:	d109      	bne.n	801527a <_strtol_l.constprop.0+0x56>
 8015266:	2c30      	cmp	r4, #48	; 0x30
 8015268:	d107      	bne.n	801527a <_strtol_l.constprop.0+0x56>
 801526a:	782c      	ldrb	r4, [r5, #0]
 801526c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8015270:	2c58      	cmp	r4, #88	; 0x58
 8015272:	d14d      	bne.n	8015310 <_strtol_l.constprop.0+0xec>
 8015274:	786c      	ldrb	r4, [r5, #1]
 8015276:	2310      	movs	r3, #16
 8015278:	3502      	adds	r5, #2
 801527a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801527e:	f108 38ff 	add.w	r8, r8, #4294967295
 8015282:	f04f 0c00 	mov.w	ip, #0
 8015286:	fbb8 f9f3 	udiv	r9, r8, r3
 801528a:	4666      	mov	r6, ip
 801528c:	fb03 8a19 	mls	sl, r3, r9, r8
 8015290:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8015294:	f1be 0f09 	cmp.w	lr, #9
 8015298:	d816      	bhi.n	80152c8 <_strtol_l.constprop.0+0xa4>
 801529a:	4674      	mov	r4, lr
 801529c:	42a3      	cmp	r3, r4
 801529e:	dd24      	ble.n	80152ea <_strtol_l.constprop.0+0xc6>
 80152a0:	f1bc 0f00 	cmp.w	ip, #0
 80152a4:	db1e      	blt.n	80152e4 <_strtol_l.constprop.0+0xc0>
 80152a6:	45b1      	cmp	r9, r6
 80152a8:	d31c      	bcc.n	80152e4 <_strtol_l.constprop.0+0xc0>
 80152aa:	d101      	bne.n	80152b0 <_strtol_l.constprop.0+0x8c>
 80152ac:	45a2      	cmp	sl, r4
 80152ae:	db19      	blt.n	80152e4 <_strtol_l.constprop.0+0xc0>
 80152b0:	fb06 4603 	mla	r6, r6, r3, r4
 80152b4:	f04f 0c01 	mov.w	ip, #1
 80152b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80152bc:	e7e8      	b.n	8015290 <_strtol_l.constprop.0+0x6c>
 80152be:	2c2b      	cmp	r4, #43	; 0x2b
 80152c0:	bf04      	itt	eq
 80152c2:	782c      	ldrbeq	r4, [r5, #0]
 80152c4:	1cb5      	addeq	r5, r6, #2
 80152c6:	e7ca      	b.n	801525e <_strtol_l.constprop.0+0x3a>
 80152c8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80152cc:	f1be 0f19 	cmp.w	lr, #25
 80152d0:	d801      	bhi.n	80152d6 <_strtol_l.constprop.0+0xb2>
 80152d2:	3c37      	subs	r4, #55	; 0x37
 80152d4:	e7e2      	b.n	801529c <_strtol_l.constprop.0+0x78>
 80152d6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80152da:	f1be 0f19 	cmp.w	lr, #25
 80152de:	d804      	bhi.n	80152ea <_strtol_l.constprop.0+0xc6>
 80152e0:	3c57      	subs	r4, #87	; 0x57
 80152e2:	e7db      	b.n	801529c <_strtol_l.constprop.0+0x78>
 80152e4:	f04f 3cff 	mov.w	ip, #4294967295
 80152e8:	e7e6      	b.n	80152b8 <_strtol_l.constprop.0+0x94>
 80152ea:	f1bc 0f00 	cmp.w	ip, #0
 80152ee:	da05      	bge.n	80152fc <_strtol_l.constprop.0+0xd8>
 80152f0:	2322      	movs	r3, #34	; 0x22
 80152f2:	6003      	str	r3, [r0, #0]
 80152f4:	4646      	mov	r6, r8
 80152f6:	b942      	cbnz	r2, 801530a <_strtol_l.constprop.0+0xe6>
 80152f8:	4630      	mov	r0, r6
 80152fa:	e79e      	b.n	801523a <_strtol_l.constprop.0+0x16>
 80152fc:	b107      	cbz	r7, 8015300 <_strtol_l.constprop.0+0xdc>
 80152fe:	4276      	negs	r6, r6
 8015300:	2a00      	cmp	r2, #0
 8015302:	d0f9      	beq.n	80152f8 <_strtol_l.constprop.0+0xd4>
 8015304:	f1bc 0f00 	cmp.w	ip, #0
 8015308:	d000      	beq.n	801530c <_strtol_l.constprop.0+0xe8>
 801530a:	1e69      	subs	r1, r5, #1
 801530c:	6011      	str	r1, [r2, #0]
 801530e:	e7f3      	b.n	80152f8 <_strtol_l.constprop.0+0xd4>
 8015310:	2430      	movs	r4, #48	; 0x30
 8015312:	2b00      	cmp	r3, #0
 8015314:	d1b1      	bne.n	801527a <_strtol_l.constprop.0+0x56>
 8015316:	2308      	movs	r3, #8
 8015318:	e7af      	b.n	801527a <_strtol_l.constprop.0+0x56>
 801531a:	2c30      	cmp	r4, #48	; 0x30
 801531c:	d0a5      	beq.n	801526a <_strtol_l.constprop.0+0x46>
 801531e:	230a      	movs	r3, #10
 8015320:	e7ab      	b.n	801527a <_strtol_l.constprop.0+0x56>
 8015322:	bf00      	nop
 8015324:	08017a95 	.word	0x08017a95

08015328 <_strtol_r>:
 8015328:	f7ff bf7c 	b.w	8015224 <_strtol_l.constprop.0>

0801532c <strtol>:
 801532c:	4613      	mov	r3, r2
 801532e:	460a      	mov	r2, r1
 8015330:	4601      	mov	r1, r0
 8015332:	4802      	ldr	r0, [pc, #8]	; (801533c <strtol+0x10>)
 8015334:	6800      	ldr	r0, [r0, #0]
 8015336:	f7ff bf75 	b.w	8015224 <_strtol_l.constprop.0>
 801533a:	bf00      	nop
 801533c:	200002b4 	.word	0x200002b4

08015340 <__tzcalc_limits>:
 8015340:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015344:	4605      	mov	r5, r0
 8015346:	f000 fba3 	bl	8015a90 <__gettzinfo>
 801534a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801534e:	429d      	cmp	r5, r3
 8015350:	f340 8099 	ble.w	8015486 <__tzcalc_limits+0x146>
 8015354:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8015358:	18ac      	adds	r4, r5, r2
 801535a:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 801535e:	f240 126d 	movw	r2, #365	; 0x16d
 8015362:	10a4      	asrs	r4, r4, #2
 8015364:	fb02 4403 	mla	r4, r2, r3, r4
 8015368:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801536c:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8015370:	fb93 f3f2 	sdiv	r3, r3, r2
 8015374:	441c      	add	r4, r3
 8015376:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801537a:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 801537e:	fb95 fcf3 	sdiv	ip, r5, r3
 8015382:	fb03 5c1c 	mls	ip, r3, ip, r5
 8015386:	186a      	adds	r2, r5, r1
 8015388:	fabc f68c 	clz	r6, ip
 801538c:	fbb2 f2f3 	udiv	r2, r2, r3
 8015390:	f005 0303 	and.w	r3, r5, #3
 8015394:	4414      	add	r4, r2
 8015396:	2264      	movs	r2, #100	; 0x64
 8015398:	6045      	str	r5, [r0, #4]
 801539a:	fb95 f7f2 	sdiv	r7, r5, r2
 801539e:	0976      	lsrs	r6, r6, #5
 80153a0:	fb02 5717 	mls	r7, r2, r7, r5
 80153a4:	4601      	mov	r1, r0
 80153a6:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80153aa:	9300      	str	r3, [sp, #0]
 80153ac:	f04f 0a07 	mov.w	sl, #7
 80153b0:	7a0d      	ldrb	r5, [r1, #8]
 80153b2:	694b      	ldr	r3, [r1, #20]
 80153b4:	2d4a      	cmp	r5, #74	; 0x4a
 80153b6:	d12d      	bne.n	8015414 <__tzcalc_limits+0xd4>
 80153b8:	9a00      	ldr	r2, [sp, #0]
 80153ba:	eb04 0e03 	add.w	lr, r4, r3
 80153be:	b902      	cbnz	r2, 80153c2 <__tzcalc_limits+0x82>
 80153c0:	b917      	cbnz	r7, 80153c8 <__tzcalc_limits+0x88>
 80153c2:	f1bc 0f00 	cmp.w	ip, #0
 80153c6:	d123      	bne.n	8015410 <__tzcalc_limits+0xd0>
 80153c8:	2b3b      	cmp	r3, #59	; 0x3b
 80153ca:	bfd4      	ite	le
 80153cc:	2300      	movle	r3, #0
 80153ce:	2301      	movgt	r3, #1
 80153d0:	4473      	add	r3, lr
 80153d2:	3b01      	subs	r3, #1
 80153d4:	698d      	ldr	r5, [r1, #24]
 80153d6:	4a2d      	ldr	r2, [pc, #180]	; (801548c <__tzcalc_limits+0x14c>)
 80153d8:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 80153dc:	fbc3 5e02 	smlal	r5, lr, r3, r2
 80153e0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80153e2:	18ed      	adds	r5, r5, r3
 80153e4:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 80153e8:	e9c1 5308 	strd	r5, r3, [r1, #32]
 80153ec:	3128      	adds	r1, #40	; 0x28
 80153ee:	458b      	cmp	fp, r1
 80153f0:	d1de      	bne.n	80153b0 <__tzcalc_limits+0x70>
 80153f2:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 80153f6:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 80153fa:	428c      	cmp	r4, r1
 80153fc:	eb72 0303 	sbcs.w	r3, r2, r3
 8015400:	bfb4      	ite	lt
 8015402:	2301      	movlt	r3, #1
 8015404:	2300      	movge	r3, #0
 8015406:	6003      	str	r3, [r0, #0]
 8015408:	2001      	movs	r0, #1
 801540a:	b003      	add	sp, #12
 801540c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015410:	2300      	movs	r3, #0
 8015412:	e7dd      	b.n	80153d0 <__tzcalc_limits+0x90>
 8015414:	2d44      	cmp	r5, #68	; 0x44
 8015416:	d101      	bne.n	801541c <__tzcalc_limits+0xdc>
 8015418:	4423      	add	r3, r4
 801541a:	e7db      	b.n	80153d4 <__tzcalc_limits+0x94>
 801541c:	9a00      	ldr	r2, [sp, #0]
 801541e:	bb62      	cbnz	r2, 801547a <__tzcalc_limits+0x13a>
 8015420:	2f00      	cmp	r7, #0
 8015422:	bf0c      	ite	eq
 8015424:	4635      	moveq	r5, r6
 8015426:	2501      	movne	r5, #1
 8015428:	68ca      	ldr	r2, [r1, #12]
 801542a:	9201      	str	r2, [sp, #4]
 801542c:	4a18      	ldr	r2, [pc, #96]	; (8015490 <__tzcalc_limits+0x150>)
 801542e:	f04f 0930 	mov.w	r9, #48	; 0x30
 8015432:	fb09 2505 	mla	r5, r9, r5, r2
 8015436:	46a6      	mov	lr, r4
 8015438:	f04f 0800 	mov.w	r8, #0
 801543c:	3d04      	subs	r5, #4
 801543e:	9a01      	ldr	r2, [sp, #4]
 8015440:	f108 0801 	add.w	r8, r8, #1
 8015444:	4542      	cmp	r2, r8
 8015446:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 801544a:	dc18      	bgt.n	801547e <__tzcalc_limits+0x13e>
 801544c:	f10e 0504 	add.w	r5, lr, #4
 8015450:	fb95 f8fa 	sdiv	r8, r5, sl
 8015454:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8015458:	eba5 0808 	sub.w	r8, r5, r8
 801545c:	ebb3 0808 	subs.w	r8, r3, r8
 8015460:	690b      	ldr	r3, [r1, #16]
 8015462:	f103 33ff 	add.w	r3, r3, #4294967295
 8015466:	bf48      	it	mi
 8015468:	f108 0807 	addmi.w	r8, r8, #7
 801546c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8015470:	4443      	add	r3, r8
 8015472:	454b      	cmp	r3, r9
 8015474:	da05      	bge.n	8015482 <__tzcalc_limits+0x142>
 8015476:	4473      	add	r3, lr
 8015478:	e7ac      	b.n	80153d4 <__tzcalc_limits+0x94>
 801547a:	4635      	mov	r5, r6
 801547c:	e7d4      	b.n	8015428 <__tzcalc_limits+0xe8>
 801547e:	44ce      	add	lr, r9
 8015480:	e7dd      	b.n	801543e <__tzcalc_limits+0xfe>
 8015482:	3b07      	subs	r3, #7
 8015484:	e7f5      	b.n	8015472 <__tzcalc_limits+0x132>
 8015486:	2000      	movs	r0, #0
 8015488:	e7bf      	b.n	801540a <__tzcalc_limits+0xca>
 801548a:	bf00      	nop
 801548c:	00015180 	.word	0x00015180
 8015490:	08017b98 	.word	0x08017b98

08015494 <__tz_lock>:
 8015494:	4801      	ldr	r0, [pc, #4]	; (801549c <__tz_lock+0x8>)
 8015496:	f7ff ba0c 	b.w	80148b2 <__retarget_lock_acquire>
 801549a:	bf00      	nop
 801549c:	2000db20 	.word	0x2000db20

080154a0 <__tz_unlock>:
 80154a0:	4801      	ldr	r0, [pc, #4]	; (80154a8 <__tz_unlock+0x8>)
 80154a2:	f7ff ba08 	b.w	80148b6 <__retarget_lock_release>
 80154a6:	bf00      	nop
 80154a8:	2000db20 	.word	0x2000db20

080154ac <_tzset_unlocked>:
 80154ac:	4b01      	ldr	r3, [pc, #4]	; (80154b4 <_tzset_unlocked+0x8>)
 80154ae:	6818      	ldr	r0, [r3, #0]
 80154b0:	f000 b802 	b.w	80154b8 <_tzset_unlocked_r>
 80154b4:	200002b4 	.word	0x200002b4

080154b8 <_tzset_unlocked_r>:
 80154b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154bc:	b08d      	sub	sp, #52	; 0x34
 80154be:	4607      	mov	r7, r0
 80154c0:	f000 fae6 	bl	8015a90 <__gettzinfo>
 80154c4:	49b0      	ldr	r1, [pc, #704]	; (8015788 <_tzset_unlocked_r+0x2d0>)
 80154c6:	4eb1      	ldr	r6, [pc, #708]	; (801578c <_tzset_unlocked_r+0x2d4>)
 80154c8:	4605      	mov	r5, r0
 80154ca:	4638      	mov	r0, r7
 80154cc:	f000 fad8 	bl	8015a80 <_getenv_r>
 80154d0:	4604      	mov	r4, r0
 80154d2:	b970      	cbnz	r0, 80154f2 <_tzset_unlocked_r+0x3a>
 80154d4:	4bae      	ldr	r3, [pc, #696]	; (8015790 <_tzset_unlocked_r+0x2d8>)
 80154d6:	4aaf      	ldr	r2, [pc, #700]	; (8015794 <_tzset_unlocked_r+0x2dc>)
 80154d8:	6018      	str	r0, [r3, #0]
 80154da:	4baf      	ldr	r3, [pc, #700]	; (8015798 <_tzset_unlocked_r+0x2e0>)
 80154dc:	6018      	str	r0, [r3, #0]
 80154de:	4baf      	ldr	r3, [pc, #700]	; (801579c <_tzset_unlocked_r+0x2e4>)
 80154e0:	6830      	ldr	r0, [r6, #0]
 80154e2:	e9c3 2200 	strd	r2, r2, [r3]
 80154e6:	f7ff f9f1 	bl	80148cc <free>
 80154ea:	6034      	str	r4, [r6, #0]
 80154ec:	b00d      	add	sp, #52	; 0x34
 80154ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154f2:	6831      	ldr	r1, [r6, #0]
 80154f4:	2900      	cmp	r1, #0
 80154f6:	d162      	bne.n	80155be <_tzset_unlocked_r+0x106>
 80154f8:	6830      	ldr	r0, [r6, #0]
 80154fa:	f7ff f9e7 	bl	80148cc <free>
 80154fe:	4620      	mov	r0, r4
 8015500:	f7ea fe70 	bl	80001e4 <strlen>
 8015504:	1c41      	adds	r1, r0, #1
 8015506:	4638      	mov	r0, r7
 8015508:	f7ff fcdc 	bl	8014ec4 <_malloc_r>
 801550c:	6030      	str	r0, [r6, #0]
 801550e:	2800      	cmp	r0, #0
 8015510:	d15a      	bne.n	80155c8 <_tzset_unlocked_r+0x110>
 8015512:	7823      	ldrb	r3, [r4, #0]
 8015514:	4aa2      	ldr	r2, [pc, #648]	; (80157a0 <_tzset_unlocked_r+0x2e8>)
 8015516:	49a3      	ldr	r1, [pc, #652]	; (80157a4 <_tzset_unlocked_r+0x2ec>)
 8015518:	2b3a      	cmp	r3, #58	; 0x3a
 801551a:	bf08      	it	eq
 801551c:	3401      	addeq	r4, #1
 801551e:	ae0a      	add	r6, sp, #40	; 0x28
 8015520:	4633      	mov	r3, r6
 8015522:	4620      	mov	r0, r4
 8015524:	f000 ff32 	bl	801638c <siscanf>
 8015528:	2800      	cmp	r0, #0
 801552a:	dddf      	ble.n	80154ec <_tzset_unlocked_r+0x34>
 801552c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801552e:	18e7      	adds	r7, r4, r3
 8015530:	5ce3      	ldrb	r3, [r4, r3]
 8015532:	2b2d      	cmp	r3, #45	; 0x2d
 8015534:	d14c      	bne.n	80155d0 <_tzset_unlocked_r+0x118>
 8015536:	3701      	adds	r7, #1
 8015538:	f04f 38ff 	mov.w	r8, #4294967295
 801553c:	f10d 0a20 	add.w	sl, sp, #32
 8015540:	f10d 0b1e 	add.w	fp, sp, #30
 8015544:	2400      	movs	r4, #0
 8015546:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801554a:	4997      	ldr	r1, [pc, #604]	; (80157a8 <_tzset_unlocked_r+0x2f0>)
 801554c:	9603      	str	r6, [sp, #12]
 801554e:	f8cd b000 	str.w	fp, [sp]
 8015552:	4633      	mov	r3, r6
 8015554:	aa07      	add	r2, sp, #28
 8015556:	4638      	mov	r0, r7
 8015558:	f8ad 401e 	strh.w	r4, [sp, #30]
 801555c:	f8ad 4020 	strh.w	r4, [sp, #32]
 8015560:	f000 ff14 	bl	801638c <siscanf>
 8015564:	42a0      	cmp	r0, r4
 8015566:	ddc1      	ble.n	80154ec <_tzset_unlocked_r+0x34>
 8015568:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801556c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8015570:	f8df 9240 	ldr.w	r9, [pc, #576]	; 80157b4 <_tzset_unlocked_r+0x2fc>
 8015574:	213c      	movs	r1, #60	; 0x3c
 8015576:	fb01 3302 	mla	r3, r1, r2, r3
 801557a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801557e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8015582:	fb01 3302 	mla	r3, r1, r2, r3
 8015586:	fb08 f303 	mul.w	r3, r8, r3
 801558a:	f8df 8210 	ldr.w	r8, [pc, #528]	; 801579c <_tzset_unlocked_r+0x2e4>
 801558e:	62ab      	str	r3, [r5, #40]	; 0x28
 8015590:	4b83      	ldr	r3, [pc, #524]	; (80157a0 <_tzset_unlocked_r+0x2e8>)
 8015592:	f8c8 3000 	str.w	r3, [r8]
 8015596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015598:	4982      	ldr	r1, [pc, #520]	; (80157a4 <_tzset_unlocked_r+0x2ec>)
 801559a:	441f      	add	r7, r3
 801559c:	464a      	mov	r2, r9
 801559e:	4633      	mov	r3, r6
 80155a0:	4638      	mov	r0, r7
 80155a2:	f000 fef3 	bl	801638c <siscanf>
 80155a6:	42a0      	cmp	r0, r4
 80155a8:	dc18      	bgt.n	80155dc <_tzset_unlocked_r+0x124>
 80155aa:	f8d8 3000 	ldr.w	r3, [r8]
 80155ae:	f8c8 3004 	str.w	r3, [r8, #4]
 80155b2:	4b77      	ldr	r3, [pc, #476]	; (8015790 <_tzset_unlocked_r+0x2d8>)
 80155b4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80155b6:	601a      	str	r2, [r3, #0]
 80155b8:	4b77      	ldr	r3, [pc, #476]	; (8015798 <_tzset_unlocked_r+0x2e0>)
 80155ba:	601c      	str	r4, [r3, #0]
 80155bc:	e796      	b.n	80154ec <_tzset_unlocked_r+0x34>
 80155be:	f7ea fe07 	bl	80001d0 <strcmp>
 80155c2:	2800      	cmp	r0, #0
 80155c4:	d198      	bne.n	80154f8 <_tzset_unlocked_r+0x40>
 80155c6:	e791      	b.n	80154ec <_tzset_unlocked_r+0x34>
 80155c8:	4621      	mov	r1, r4
 80155ca:	f000 ff0b 	bl	80163e4 <strcpy>
 80155ce:	e7a0      	b.n	8015512 <_tzset_unlocked_r+0x5a>
 80155d0:	2b2b      	cmp	r3, #43	; 0x2b
 80155d2:	bf08      	it	eq
 80155d4:	3701      	addeq	r7, #1
 80155d6:	f04f 0801 	mov.w	r8, #1
 80155da:	e7af      	b.n	801553c <_tzset_unlocked_r+0x84>
 80155dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155de:	f8c8 9004 	str.w	r9, [r8, #4]
 80155e2:	18fc      	adds	r4, r7, r3
 80155e4:	5cfb      	ldrb	r3, [r7, r3]
 80155e6:	2b2d      	cmp	r3, #45	; 0x2d
 80155e8:	f040 808b 	bne.w	8015702 <_tzset_unlocked_r+0x24a>
 80155ec:	3401      	adds	r4, #1
 80155ee:	f04f 37ff 	mov.w	r7, #4294967295
 80155f2:	2300      	movs	r3, #0
 80155f4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80155f8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80155fc:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015600:	930a      	str	r3, [sp, #40]	; 0x28
 8015602:	e9cd a602 	strd	sl, r6, [sp, #8]
 8015606:	e9cd b600 	strd	fp, r6, [sp]
 801560a:	4967      	ldr	r1, [pc, #412]	; (80157a8 <_tzset_unlocked_r+0x2f0>)
 801560c:	4633      	mov	r3, r6
 801560e:	aa07      	add	r2, sp, #28
 8015610:	4620      	mov	r0, r4
 8015612:	f000 febb 	bl	801638c <siscanf>
 8015616:	2800      	cmp	r0, #0
 8015618:	dc78      	bgt.n	801570c <_tzset_unlocked_r+0x254>
 801561a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801561c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8015620:	652b      	str	r3, [r5, #80]	; 0x50
 8015622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015624:	462f      	mov	r7, r5
 8015626:	441c      	add	r4, r3
 8015628:	f04f 0900 	mov.w	r9, #0
 801562c:	7823      	ldrb	r3, [r4, #0]
 801562e:	2b2c      	cmp	r3, #44	; 0x2c
 8015630:	bf08      	it	eq
 8015632:	3401      	addeq	r4, #1
 8015634:	f894 8000 	ldrb.w	r8, [r4]
 8015638:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801563c:	d178      	bne.n	8015730 <_tzset_unlocked_r+0x278>
 801563e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8015642:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8015646:	ab09      	add	r3, sp, #36	; 0x24
 8015648:	9300      	str	r3, [sp, #0]
 801564a:	4958      	ldr	r1, [pc, #352]	; (80157ac <_tzset_unlocked_r+0x2f4>)
 801564c:	9603      	str	r6, [sp, #12]
 801564e:	4633      	mov	r3, r6
 8015650:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8015654:	4620      	mov	r0, r4
 8015656:	f000 fe99 	bl	801638c <siscanf>
 801565a:	2803      	cmp	r0, #3
 801565c:	f47f af46 	bne.w	80154ec <_tzset_unlocked_r+0x34>
 8015660:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8015664:	1e4b      	subs	r3, r1, #1
 8015666:	2b0b      	cmp	r3, #11
 8015668:	f63f af40 	bhi.w	80154ec <_tzset_unlocked_r+0x34>
 801566c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8015670:	1e53      	subs	r3, r2, #1
 8015672:	2b04      	cmp	r3, #4
 8015674:	f63f af3a 	bhi.w	80154ec <_tzset_unlocked_r+0x34>
 8015678:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801567c:	2b06      	cmp	r3, #6
 801567e:	f63f af35 	bhi.w	80154ec <_tzset_unlocked_r+0x34>
 8015682:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8015686:	f887 8008 	strb.w	r8, [r7, #8]
 801568a:	617b      	str	r3, [r7, #20]
 801568c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801568e:	eb04 0803 	add.w	r8, r4, r3
 8015692:	2302      	movs	r3, #2
 8015694:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015698:	2300      	movs	r3, #0
 801569a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801569e:	f8ad 3020 	strh.w	r3, [sp, #32]
 80156a2:	930a      	str	r3, [sp, #40]	; 0x28
 80156a4:	f898 3000 	ldrb.w	r3, [r8]
 80156a8:	2b2f      	cmp	r3, #47	; 0x2f
 80156aa:	d109      	bne.n	80156c0 <_tzset_unlocked_r+0x208>
 80156ac:	e9cd a602 	strd	sl, r6, [sp, #8]
 80156b0:	e9cd b600 	strd	fp, r6, [sp]
 80156b4:	493e      	ldr	r1, [pc, #248]	; (80157b0 <_tzset_unlocked_r+0x2f8>)
 80156b6:	4633      	mov	r3, r6
 80156b8:	aa07      	add	r2, sp, #28
 80156ba:	4640      	mov	r0, r8
 80156bc:	f000 fe66 	bl	801638c <siscanf>
 80156c0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80156c4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80156c8:	213c      	movs	r1, #60	; 0x3c
 80156ca:	fb01 3302 	mla	r3, r1, r2, r3
 80156ce:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80156d2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80156d6:	fb01 3302 	mla	r3, r1, r2, r3
 80156da:	61bb      	str	r3, [r7, #24]
 80156dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80156de:	3728      	adds	r7, #40	; 0x28
 80156e0:	4444      	add	r4, r8
 80156e2:	f1b9 0f00 	cmp.w	r9, #0
 80156e6:	d020      	beq.n	801572a <_tzset_unlocked_r+0x272>
 80156e8:	6868      	ldr	r0, [r5, #4]
 80156ea:	f7ff fe29 	bl	8015340 <__tzcalc_limits>
 80156ee:	4b28      	ldr	r3, [pc, #160]	; (8015790 <_tzset_unlocked_r+0x2d8>)
 80156f0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80156f2:	601a      	str	r2, [r3, #0]
 80156f4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80156f6:	1a9b      	subs	r3, r3, r2
 80156f8:	4a27      	ldr	r2, [pc, #156]	; (8015798 <_tzset_unlocked_r+0x2e0>)
 80156fa:	bf18      	it	ne
 80156fc:	2301      	movne	r3, #1
 80156fe:	6013      	str	r3, [r2, #0]
 8015700:	e6f4      	b.n	80154ec <_tzset_unlocked_r+0x34>
 8015702:	2b2b      	cmp	r3, #43	; 0x2b
 8015704:	bf08      	it	eq
 8015706:	3401      	addeq	r4, #1
 8015708:	2701      	movs	r7, #1
 801570a:	e772      	b.n	80155f2 <_tzset_unlocked_r+0x13a>
 801570c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8015710:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8015714:	213c      	movs	r1, #60	; 0x3c
 8015716:	fb01 3302 	mla	r3, r1, r2, r3
 801571a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801571e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8015722:	fb01 3302 	mla	r3, r1, r2, r3
 8015726:	437b      	muls	r3, r7
 8015728:	e77a      	b.n	8015620 <_tzset_unlocked_r+0x168>
 801572a:	f04f 0901 	mov.w	r9, #1
 801572e:	e77d      	b.n	801562c <_tzset_unlocked_r+0x174>
 8015730:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8015734:	bf06      	itte	eq
 8015736:	3401      	addeq	r4, #1
 8015738:	4643      	moveq	r3, r8
 801573a:	2344      	movne	r3, #68	; 0x44
 801573c:	220a      	movs	r2, #10
 801573e:	a90b      	add	r1, sp, #44	; 0x2c
 8015740:	4620      	mov	r0, r4
 8015742:	9305      	str	r3, [sp, #20]
 8015744:	f000 fede 	bl	8016504 <strtoul>
 8015748:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801574c:	9b05      	ldr	r3, [sp, #20]
 801574e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8015752:	45a0      	cmp	r8, r4
 8015754:	d114      	bne.n	8015780 <_tzset_unlocked_r+0x2c8>
 8015756:	234d      	movs	r3, #77	; 0x4d
 8015758:	f1b9 0f00 	cmp.w	r9, #0
 801575c:	d107      	bne.n	801576e <_tzset_unlocked_r+0x2b6>
 801575e:	722b      	strb	r3, [r5, #8]
 8015760:	2103      	movs	r1, #3
 8015762:	2302      	movs	r3, #2
 8015764:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8015768:	f8c5 9014 	str.w	r9, [r5, #20]
 801576c:	e791      	b.n	8015692 <_tzset_unlocked_r+0x1da>
 801576e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8015772:	220b      	movs	r2, #11
 8015774:	2301      	movs	r3, #1
 8015776:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 801577a:	2300      	movs	r3, #0
 801577c:	63eb      	str	r3, [r5, #60]	; 0x3c
 801577e:	e788      	b.n	8015692 <_tzset_unlocked_r+0x1da>
 8015780:	b280      	uxth	r0, r0
 8015782:	723b      	strb	r3, [r7, #8]
 8015784:	6178      	str	r0, [r7, #20]
 8015786:	e784      	b.n	8015692 <_tzset_unlocked_r+0x1da>
 8015788:	08017a1c 	.word	0x08017a1c
 801578c:	2000db48 	.word	0x2000db48
 8015790:	2000db50 	.word	0x2000db50
 8015794:	08017a1f 	.word	0x08017a1f
 8015798:	2000db4c 	.word	0x2000db4c
 801579c:	20000318 	.word	0x20000318
 80157a0:	2000db3b 	.word	0x2000db3b
 80157a4:	08017a23 	.word	0x08017a23
 80157a8:	08017a46 	.word	0x08017a46
 80157ac:	08017a32 	.word	0x08017a32
 80157b0:	08017a45 	.word	0x08017a45
 80157b4:	2000db30 	.word	0x2000db30

080157b8 <_write_r>:
 80157b8:	b538      	push	{r3, r4, r5, lr}
 80157ba:	4d07      	ldr	r5, [pc, #28]	; (80157d8 <_write_r+0x20>)
 80157bc:	4604      	mov	r4, r0
 80157be:	4608      	mov	r0, r1
 80157c0:	4611      	mov	r1, r2
 80157c2:	2200      	movs	r2, #0
 80157c4:	602a      	str	r2, [r5, #0]
 80157c6:	461a      	mov	r2, r3
 80157c8:	f7ed fbb5 	bl	8002f36 <_write>
 80157cc:	1c43      	adds	r3, r0, #1
 80157ce:	d102      	bne.n	80157d6 <_write_r+0x1e>
 80157d0:	682b      	ldr	r3, [r5, #0]
 80157d2:	b103      	cbz	r3, 80157d6 <_write_r+0x1e>
 80157d4:	6023      	str	r3, [r4, #0]
 80157d6:	bd38      	pop	{r3, r4, r5, pc}
 80157d8:	2000db2c 	.word	0x2000db2c

080157dc <__assert_func>:
 80157dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80157de:	4614      	mov	r4, r2
 80157e0:	461a      	mov	r2, r3
 80157e2:	4b09      	ldr	r3, [pc, #36]	; (8015808 <__assert_func+0x2c>)
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	4605      	mov	r5, r0
 80157e8:	68d8      	ldr	r0, [r3, #12]
 80157ea:	b14c      	cbz	r4, 8015800 <__assert_func+0x24>
 80157ec:	4b07      	ldr	r3, [pc, #28]	; (801580c <__assert_func+0x30>)
 80157ee:	9100      	str	r1, [sp, #0]
 80157f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80157f4:	4906      	ldr	r1, [pc, #24]	; (8015810 <__assert_func+0x34>)
 80157f6:	462b      	mov	r3, r5
 80157f8:	f000 f8f4 	bl	80159e4 <fiprintf>
 80157fc:	f000 ff4c 	bl	8016698 <abort>
 8015800:	4b04      	ldr	r3, [pc, #16]	; (8015814 <__assert_func+0x38>)
 8015802:	461c      	mov	r4, r3
 8015804:	e7f3      	b.n	80157ee <__assert_func+0x12>
 8015806:	bf00      	nop
 8015808:	200002b4 	.word	0x200002b4
 801580c:	08017a58 	.word	0x08017a58
 8015810:	08017a65 	.word	0x08017a65
 8015814:	08017a93 	.word	0x08017a93

08015818 <_close_r>:
 8015818:	b538      	push	{r3, r4, r5, lr}
 801581a:	4d06      	ldr	r5, [pc, #24]	; (8015834 <_close_r+0x1c>)
 801581c:	2300      	movs	r3, #0
 801581e:	4604      	mov	r4, r0
 8015820:	4608      	mov	r0, r1
 8015822:	602b      	str	r3, [r5, #0]
 8015824:	f7ed fba3 	bl	8002f6e <_close>
 8015828:	1c43      	adds	r3, r0, #1
 801582a:	d102      	bne.n	8015832 <_close_r+0x1a>
 801582c:	682b      	ldr	r3, [r5, #0]
 801582e:	b103      	cbz	r3, 8015832 <_close_r+0x1a>
 8015830:	6023      	str	r3, [r4, #0]
 8015832:	bd38      	pop	{r3, r4, r5, pc}
 8015834:	2000db2c 	.word	0x2000db2c

08015838 <div>:
 8015838:	2900      	cmp	r1, #0
 801583a:	b510      	push	{r4, lr}
 801583c:	fb91 f4f2 	sdiv	r4, r1, r2
 8015840:	fb02 1314 	mls	r3, r2, r4, r1
 8015844:	db06      	blt.n	8015854 <div+0x1c>
 8015846:	2b00      	cmp	r3, #0
 8015848:	da01      	bge.n	801584e <div+0x16>
 801584a:	3401      	adds	r4, #1
 801584c:	1a9b      	subs	r3, r3, r2
 801584e:	e9c0 4300 	strd	r4, r3, [r0]
 8015852:	bd10      	pop	{r4, pc}
 8015854:	2b00      	cmp	r3, #0
 8015856:	bfc4      	itt	gt
 8015858:	f104 34ff 	addgt.w	r4, r4, #4294967295
 801585c:	189b      	addgt	r3, r3, r2
 801585e:	e7f6      	b.n	801584e <div+0x16>

08015860 <__sflush_r>:
 8015860:	898a      	ldrh	r2, [r1, #12]
 8015862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015866:	4605      	mov	r5, r0
 8015868:	0710      	lsls	r0, r2, #28
 801586a:	460c      	mov	r4, r1
 801586c:	d458      	bmi.n	8015920 <__sflush_r+0xc0>
 801586e:	684b      	ldr	r3, [r1, #4]
 8015870:	2b00      	cmp	r3, #0
 8015872:	dc05      	bgt.n	8015880 <__sflush_r+0x20>
 8015874:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015876:	2b00      	cmp	r3, #0
 8015878:	dc02      	bgt.n	8015880 <__sflush_r+0x20>
 801587a:	2000      	movs	r0, #0
 801587c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015880:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015882:	2e00      	cmp	r6, #0
 8015884:	d0f9      	beq.n	801587a <__sflush_r+0x1a>
 8015886:	2300      	movs	r3, #0
 8015888:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801588c:	682f      	ldr	r7, [r5, #0]
 801588e:	602b      	str	r3, [r5, #0]
 8015890:	d032      	beq.n	80158f8 <__sflush_r+0x98>
 8015892:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015894:	89a3      	ldrh	r3, [r4, #12]
 8015896:	075a      	lsls	r2, r3, #29
 8015898:	d505      	bpl.n	80158a6 <__sflush_r+0x46>
 801589a:	6863      	ldr	r3, [r4, #4]
 801589c:	1ac0      	subs	r0, r0, r3
 801589e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80158a0:	b10b      	cbz	r3, 80158a6 <__sflush_r+0x46>
 80158a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80158a4:	1ac0      	subs	r0, r0, r3
 80158a6:	2300      	movs	r3, #0
 80158a8:	4602      	mov	r2, r0
 80158aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80158ac:	6a21      	ldr	r1, [r4, #32]
 80158ae:	4628      	mov	r0, r5
 80158b0:	47b0      	blx	r6
 80158b2:	1c43      	adds	r3, r0, #1
 80158b4:	89a3      	ldrh	r3, [r4, #12]
 80158b6:	d106      	bne.n	80158c6 <__sflush_r+0x66>
 80158b8:	6829      	ldr	r1, [r5, #0]
 80158ba:	291d      	cmp	r1, #29
 80158bc:	d82c      	bhi.n	8015918 <__sflush_r+0xb8>
 80158be:	4a2a      	ldr	r2, [pc, #168]	; (8015968 <__sflush_r+0x108>)
 80158c0:	40ca      	lsrs	r2, r1
 80158c2:	07d6      	lsls	r6, r2, #31
 80158c4:	d528      	bpl.n	8015918 <__sflush_r+0xb8>
 80158c6:	2200      	movs	r2, #0
 80158c8:	6062      	str	r2, [r4, #4]
 80158ca:	04d9      	lsls	r1, r3, #19
 80158cc:	6922      	ldr	r2, [r4, #16]
 80158ce:	6022      	str	r2, [r4, #0]
 80158d0:	d504      	bpl.n	80158dc <__sflush_r+0x7c>
 80158d2:	1c42      	adds	r2, r0, #1
 80158d4:	d101      	bne.n	80158da <__sflush_r+0x7a>
 80158d6:	682b      	ldr	r3, [r5, #0]
 80158d8:	b903      	cbnz	r3, 80158dc <__sflush_r+0x7c>
 80158da:	6560      	str	r0, [r4, #84]	; 0x54
 80158dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80158de:	602f      	str	r7, [r5, #0]
 80158e0:	2900      	cmp	r1, #0
 80158e2:	d0ca      	beq.n	801587a <__sflush_r+0x1a>
 80158e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80158e8:	4299      	cmp	r1, r3
 80158ea:	d002      	beq.n	80158f2 <__sflush_r+0x92>
 80158ec:	4628      	mov	r0, r5
 80158ee:	f7ff fa7d 	bl	8014dec <_free_r>
 80158f2:	2000      	movs	r0, #0
 80158f4:	6360      	str	r0, [r4, #52]	; 0x34
 80158f6:	e7c1      	b.n	801587c <__sflush_r+0x1c>
 80158f8:	6a21      	ldr	r1, [r4, #32]
 80158fa:	2301      	movs	r3, #1
 80158fc:	4628      	mov	r0, r5
 80158fe:	47b0      	blx	r6
 8015900:	1c41      	adds	r1, r0, #1
 8015902:	d1c7      	bne.n	8015894 <__sflush_r+0x34>
 8015904:	682b      	ldr	r3, [r5, #0]
 8015906:	2b00      	cmp	r3, #0
 8015908:	d0c4      	beq.n	8015894 <__sflush_r+0x34>
 801590a:	2b1d      	cmp	r3, #29
 801590c:	d001      	beq.n	8015912 <__sflush_r+0xb2>
 801590e:	2b16      	cmp	r3, #22
 8015910:	d101      	bne.n	8015916 <__sflush_r+0xb6>
 8015912:	602f      	str	r7, [r5, #0]
 8015914:	e7b1      	b.n	801587a <__sflush_r+0x1a>
 8015916:	89a3      	ldrh	r3, [r4, #12]
 8015918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801591c:	81a3      	strh	r3, [r4, #12]
 801591e:	e7ad      	b.n	801587c <__sflush_r+0x1c>
 8015920:	690f      	ldr	r7, [r1, #16]
 8015922:	2f00      	cmp	r7, #0
 8015924:	d0a9      	beq.n	801587a <__sflush_r+0x1a>
 8015926:	0793      	lsls	r3, r2, #30
 8015928:	680e      	ldr	r6, [r1, #0]
 801592a:	bf08      	it	eq
 801592c:	694b      	ldreq	r3, [r1, #20]
 801592e:	600f      	str	r7, [r1, #0]
 8015930:	bf18      	it	ne
 8015932:	2300      	movne	r3, #0
 8015934:	eba6 0807 	sub.w	r8, r6, r7
 8015938:	608b      	str	r3, [r1, #8]
 801593a:	f1b8 0f00 	cmp.w	r8, #0
 801593e:	dd9c      	ble.n	801587a <__sflush_r+0x1a>
 8015940:	6a21      	ldr	r1, [r4, #32]
 8015942:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015944:	4643      	mov	r3, r8
 8015946:	463a      	mov	r2, r7
 8015948:	4628      	mov	r0, r5
 801594a:	47b0      	blx	r6
 801594c:	2800      	cmp	r0, #0
 801594e:	dc06      	bgt.n	801595e <__sflush_r+0xfe>
 8015950:	89a3      	ldrh	r3, [r4, #12]
 8015952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015956:	81a3      	strh	r3, [r4, #12]
 8015958:	f04f 30ff 	mov.w	r0, #4294967295
 801595c:	e78e      	b.n	801587c <__sflush_r+0x1c>
 801595e:	4407      	add	r7, r0
 8015960:	eba8 0800 	sub.w	r8, r8, r0
 8015964:	e7e9      	b.n	801593a <__sflush_r+0xda>
 8015966:	bf00      	nop
 8015968:	20400001 	.word	0x20400001

0801596c <_fflush_r>:
 801596c:	b538      	push	{r3, r4, r5, lr}
 801596e:	690b      	ldr	r3, [r1, #16]
 8015970:	4605      	mov	r5, r0
 8015972:	460c      	mov	r4, r1
 8015974:	b913      	cbnz	r3, 801597c <_fflush_r+0x10>
 8015976:	2500      	movs	r5, #0
 8015978:	4628      	mov	r0, r5
 801597a:	bd38      	pop	{r3, r4, r5, pc}
 801597c:	b118      	cbz	r0, 8015986 <_fflush_r+0x1a>
 801597e:	6983      	ldr	r3, [r0, #24]
 8015980:	b90b      	cbnz	r3, 8015986 <_fflush_r+0x1a>
 8015982:	f7fe fed3 	bl	801472c <__sinit>
 8015986:	4b14      	ldr	r3, [pc, #80]	; (80159d8 <_fflush_r+0x6c>)
 8015988:	429c      	cmp	r4, r3
 801598a:	d11b      	bne.n	80159c4 <_fflush_r+0x58>
 801598c:	686c      	ldr	r4, [r5, #4]
 801598e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015992:	2b00      	cmp	r3, #0
 8015994:	d0ef      	beq.n	8015976 <_fflush_r+0xa>
 8015996:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015998:	07d0      	lsls	r0, r2, #31
 801599a:	d404      	bmi.n	80159a6 <_fflush_r+0x3a>
 801599c:	0599      	lsls	r1, r3, #22
 801599e:	d402      	bmi.n	80159a6 <_fflush_r+0x3a>
 80159a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80159a2:	f7fe ff87 	bl	80148b4 <__retarget_lock_acquire_recursive>
 80159a6:	4628      	mov	r0, r5
 80159a8:	4621      	mov	r1, r4
 80159aa:	f7ff ff59 	bl	8015860 <__sflush_r>
 80159ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80159b0:	07da      	lsls	r2, r3, #31
 80159b2:	4605      	mov	r5, r0
 80159b4:	d4e0      	bmi.n	8015978 <_fflush_r+0xc>
 80159b6:	89a3      	ldrh	r3, [r4, #12]
 80159b8:	059b      	lsls	r3, r3, #22
 80159ba:	d4dd      	bmi.n	8015978 <_fflush_r+0xc>
 80159bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80159be:	f7fe ff7b 	bl	80148b8 <__retarget_lock_release_recursive>
 80159c2:	e7d9      	b.n	8015978 <_fflush_r+0xc>
 80159c4:	4b05      	ldr	r3, [pc, #20]	; (80159dc <_fflush_r+0x70>)
 80159c6:	429c      	cmp	r4, r3
 80159c8:	d101      	bne.n	80159ce <_fflush_r+0x62>
 80159ca:	68ac      	ldr	r4, [r5, #8]
 80159cc:	e7df      	b.n	801598e <_fflush_r+0x22>
 80159ce:	4b04      	ldr	r3, [pc, #16]	; (80159e0 <_fflush_r+0x74>)
 80159d0:	429c      	cmp	r4, r3
 80159d2:	bf08      	it	eq
 80159d4:	68ec      	ldreq	r4, [r5, #12]
 80159d6:	e7da      	b.n	801598e <_fflush_r+0x22>
 80159d8:	08017904 	.word	0x08017904
 80159dc:	08017924 	.word	0x08017924
 80159e0:	080178e4 	.word	0x080178e4

080159e4 <fiprintf>:
 80159e4:	b40e      	push	{r1, r2, r3}
 80159e6:	b503      	push	{r0, r1, lr}
 80159e8:	4601      	mov	r1, r0
 80159ea:	ab03      	add	r3, sp, #12
 80159ec:	4805      	ldr	r0, [pc, #20]	; (8015a04 <fiprintf+0x20>)
 80159ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80159f2:	6800      	ldr	r0, [r0, #0]
 80159f4:	9301      	str	r3, [sp, #4]
 80159f6:	f000 f9f3 	bl	8015de0 <_vfiprintf_r>
 80159fa:	b002      	add	sp, #8
 80159fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8015a00:	b003      	add	sp, #12
 8015a02:	4770      	bx	lr
 8015a04:	200002b4 	.word	0x200002b4

08015a08 <_findenv_r>:
 8015a08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a0c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8015a7c <_findenv_r+0x74>
 8015a10:	4607      	mov	r7, r0
 8015a12:	4689      	mov	r9, r1
 8015a14:	4616      	mov	r6, r2
 8015a16:	f000 fe47 	bl	80166a8 <__env_lock>
 8015a1a:	f8da 4000 	ldr.w	r4, [sl]
 8015a1e:	b134      	cbz	r4, 8015a2e <_findenv_r+0x26>
 8015a20:	464b      	mov	r3, r9
 8015a22:	4698      	mov	r8, r3
 8015a24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015a28:	b13a      	cbz	r2, 8015a3a <_findenv_r+0x32>
 8015a2a:	2a3d      	cmp	r2, #61	; 0x3d
 8015a2c:	d1f9      	bne.n	8015a22 <_findenv_r+0x1a>
 8015a2e:	4638      	mov	r0, r7
 8015a30:	f000 fe40 	bl	80166b4 <__env_unlock>
 8015a34:	2000      	movs	r0, #0
 8015a36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a3a:	eba8 0809 	sub.w	r8, r8, r9
 8015a3e:	46a3      	mov	fp, r4
 8015a40:	f854 0b04 	ldr.w	r0, [r4], #4
 8015a44:	2800      	cmp	r0, #0
 8015a46:	d0f2      	beq.n	8015a2e <_findenv_r+0x26>
 8015a48:	4642      	mov	r2, r8
 8015a4a:	4649      	mov	r1, r9
 8015a4c:	f000 fcd2 	bl	80163f4 <strncmp>
 8015a50:	2800      	cmp	r0, #0
 8015a52:	d1f4      	bne.n	8015a3e <_findenv_r+0x36>
 8015a54:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015a58:	eb03 0508 	add.w	r5, r3, r8
 8015a5c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8015a60:	2b3d      	cmp	r3, #61	; 0x3d
 8015a62:	d1ec      	bne.n	8015a3e <_findenv_r+0x36>
 8015a64:	f8da 3000 	ldr.w	r3, [sl]
 8015a68:	ebab 0303 	sub.w	r3, fp, r3
 8015a6c:	109b      	asrs	r3, r3, #2
 8015a6e:	4638      	mov	r0, r7
 8015a70:	6033      	str	r3, [r6, #0]
 8015a72:	f000 fe1f 	bl	80166b4 <__env_unlock>
 8015a76:	1c68      	adds	r0, r5, #1
 8015a78:	e7dd      	b.n	8015a36 <_findenv_r+0x2e>
 8015a7a:	bf00      	nop
 8015a7c:	20000230 	.word	0x20000230

08015a80 <_getenv_r>:
 8015a80:	b507      	push	{r0, r1, r2, lr}
 8015a82:	aa01      	add	r2, sp, #4
 8015a84:	f7ff ffc0 	bl	8015a08 <_findenv_r>
 8015a88:	b003      	add	sp, #12
 8015a8a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08015a90 <__gettzinfo>:
 8015a90:	4800      	ldr	r0, [pc, #0]	; (8015a94 <__gettzinfo+0x4>)
 8015a92:	4770      	bx	lr
 8015a94:	20000320 	.word	0x20000320

08015a98 <_lseek_r>:
 8015a98:	b538      	push	{r3, r4, r5, lr}
 8015a9a:	4d07      	ldr	r5, [pc, #28]	; (8015ab8 <_lseek_r+0x20>)
 8015a9c:	4604      	mov	r4, r0
 8015a9e:	4608      	mov	r0, r1
 8015aa0:	4611      	mov	r1, r2
 8015aa2:	2200      	movs	r2, #0
 8015aa4:	602a      	str	r2, [r5, #0]
 8015aa6:	461a      	mov	r2, r3
 8015aa8:	f7ed fa88 	bl	8002fbc <_lseek>
 8015aac:	1c43      	adds	r3, r0, #1
 8015aae:	d102      	bne.n	8015ab6 <_lseek_r+0x1e>
 8015ab0:	682b      	ldr	r3, [r5, #0]
 8015ab2:	b103      	cbz	r3, 8015ab6 <_lseek_r+0x1e>
 8015ab4:	6023      	str	r3, [r4, #0]
 8015ab6:	bd38      	pop	{r3, r4, r5, pc}
 8015ab8:	2000db2c 	.word	0x2000db2c

08015abc <__malloc_lock>:
 8015abc:	4801      	ldr	r0, [pc, #4]	; (8015ac4 <__malloc_lock+0x8>)
 8015abe:	f7fe bef9 	b.w	80148b4 <__retarget_lock_acquire_recursive>
 8015ac2:	bf00      	nop
 8015ac4:	2000db1d 	.word	0x2000db1d

08015ac8 <__malloc_unlock>:
 8015ac8:	4801      	ldr	r0, [pc, #4]	; (8015ad0 <__malloc_unlock+0x8>)
 8015aca:	f7fe bef5 	b.w	80148b8 <__retarget_lock_release_recursive>
 8015ace:	bf00      	nop
 8015ad0:	2000db1d 	.word	0x2000db1d

08015ad4 <__ssputs_r>:
 8015ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ad8:	688e      	ldr	r6, [r1, #8]
 8015ada:	429e      	cmp	r6, r3
 8015adc:	4682      	mov	sl, r0
 8015ade:	460c      	mov	r4, r1
 8015ae0:	4690      	mov	r8, r2
 8015ae2:	461f      	mov	r7, r3
 8015ae4:	d838      	bhi.n	8015b58 <__ssputs_r+0x84>
 8015ae6:	898a      	ldrh	r2, [r1, #12]
 8015ae8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015aec:	d032      	beq.n	8015b54 <__ssputs_r+0x80>
 8015aee:	6825      	ldr	r5, [r4, #0]
 8015af0:	6909      	ldr	r1, [r1, #16]
 8015af2:	eba5 0901 	sub.w	r9, r5, r1
 8015af6:	6965      	ldr	r5, [r4, #20]
 8015af8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015afc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015b00:	3301      	adds	r3, #1
 8015b02:	444b      	add	r3, r9
 8015b04:	106d      	asrs	r5, r5, #1
 8015b06:	429d      	cmp	r5, r3
 8015b08:	bf38      	it	cc
 8015b0a:	461d      	movcc	r5, r3
 8015b0c:	0553      	lsls	r3, r2, #21
 8015b0e:	d531      	bpl.n	8015b74 <__ssputs_r+0xa0>
 8015b10:	4629      	mov	r1, r5
 8015b12:	f7ff f9d7 	bl	8014ec4 <_malloc_r>
 8015b16:	4606      	mov	r6, r0
 8015b18:	b950      	cbnz	r0, 8015b30 <__ssputs_r+0x5c>
 8015b1a:	230c      	movs	r3, #12
 8015b1c:	f8ca 3000 	str.w	r3, [sl]
 8015b20:	89a3      	ldrh	r3, [r4, #12]
 8015b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015b26:	81a3      	strh	r3, [r4, #12]
 8015b28:	f04f 30ff 	mov.w	r0, #4294967295
 8015b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b30:	6921      	ldr	r1, [r4, #16]
 8015b32:	464a      	mov	r2, r9
 8015b34:	f7fe fed2 	bl	80148dc <memcpy>
 8015b38:	89a3      	ldrh	r3, [r4, #12]
 8015b3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015b42:	81a3      	strh	r3, [r4, #12]
 8015b44:	6126      	str	r6, [r4, #16]
 8015b46:	6165      	str	r5, [r4, #20]
 8015b48:	444e      	add	r6, r9
 8015b4a:	eba5 0509 	sub.w	r5, r5, r9
 8015b4e:	6026      	str	r6, [r4, #0]
 8015b50:	60a5      	str	r5, [r4, #8]
 8015b52:	463e      	mov	r6, r7
 8015b54:	42be      	cmp	r6, r7
 8015b56:	d900      	bls.n	8015b5a <__ssputs_r+0x86>
 8015b58:	463e      	mov	r6, r7
 8015b5a:	6820      	ldr	r0, [r4, #0]
 8015b5c:	4632      	mov	r2, r6
 8015b5e:	4641      	mov	r1, r8
 8015b60:	f000 fe14 	bl	801678c <memmove>
 8015b64:	68a3      	ldr	r3, [r4, #8]
 8015b66:	1b9b      	subs	r3, r3, r6
 8015b68:	60a3      	str	r3, [r4, #8]
 8015b6a:	6823      	ldr	r3, [r4, #0]
 8015b6c:	4433      	add	r3, r6
 8015b6e:	6023      	str	r3, [r4, #0]
 8015b70:	2000      	movs	r0, #0
 8015b72:	e7db      	b.n	8015b2c <__ssputs_r+0x58>
 8015b74:	462a      	mov	r2, r5
 8015b76:	f000 fe23 	bl	80167c0 <_realloc_r>
 8015b7a:	4606      	mov	r6, r0
 8015b7c:	2800      	cmp	r0, #0
 8015b7e:	d1e1      	bne.n	8015b44 <__ssputs_r+0x70>
 8015b80:	6921      	ldr	r1, [r4, #16]
 8015b82:	4650      	mov	r0, sl
 8015b84:	f7ff f932 	bl	8014dec <_free_r>
 8015b88:	e7c7      	b.n	8015b1a <__ssputs_r+0x46>
	...

08015b8c <_svfiprintf_r>:
 8015b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b90:	4698      	mov	r8, r3
 8015b92:	898b      	ldrh	r3, [r1, #12]
 8015b94:	061b      	lsls	r3, r3, #24
 8015b96:	b09d      	sub	sp, #116	; 0x74
 8015b98:	4607      	mov	r7, r0
 8015b9a:	460d      	mov	r5, r1
 8015b9c:	4614      	mov	r4, r2
 8015b9e:	d50e      	bpl.n	8015bbe <_svfiprintf_r+0x32>
 8015ba0:	690b      	ldr	r3, [r1, #16]
 8015ba2:	b963      	cbnz	r3, 8015bbe <_svfiprintf_r+0x32>
 8015ba4:	2140      	movs	r1, #64	; 0x40
 8015ba6:	f7ff f98d 	bl	8014ec4 <_malloc_r>
 8015baa:	6028      	str	r0, [r5, #0]
 8015bac:	6128      	str	r0, [r5, #16]
 8015bae:	b920      	cbnz	r0, 8015bba <_svfiprintf_r+0x2e>
 8015bb0:	230c      	movs	r3, #12
 8015bb2:	603b      	str	r3, [r7, #0]
 8015bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8015bb8:	e0d1      	b.n	8015d5e <_svfiprintf_r+0x1d2>
 8015bba:	2340      	movs	r3, #64	; 0x40
 8015bbc:	616b      	str	r3, [r5, #20]
 8015bbe:	2300      	movs	r3, #0
 8015bc0:	9309      	str	r3, [sp, #36]	; 0x24
 8015bc2:	2320      	movs	r3, #32
 8015bc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015bc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8015bcc:	2330      	movs	r3, #48	; 0x30
 8015bce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015d78 <_svfiprintf_r+0x1ec>
 8015bd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015bd6:	f04f 0901 	mov.w	r9, #1
 8015bda:	4623      	mov	r3, r4
 8015bdc:	469a      	mov	sl, r3
 8015bde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015be2:	b10a      	cbz	r2, 8015be8 <_svfiprintf_r+0x5c>
 8015be4:	2a25      	cmp	r2, #37	; 0x25
 8015be6:	d1f9      	bne.n	8015bdc <_svfiprintf_r+0x50>
 8015be8:	ebba 0b04 	subs.w	fp, sl, r4
 8015bec:	d00b      	beq.n	8015c06 <_svfiprintf_r+0x7a>
 8015bee:	465b      	mov	r3, fp
 8015bf0:	4622      	mov	r2, r4
 8015bf2:	4629      	mov	r1, r5
 8015bf4:	4638      	mov	r0, r7
 8015bf6:	f7ff ff6d 	bl	8015ad4 <__ssputs_r>
 8015bfa:	3001      	adds	r0, #1
 8015bfc:	f000 80aa 	beq.w	8015d54 <_svfiprintf_r+0x1c8>
 8015c00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015c02:	445a      	add	r2, fp
 8015c04:	9209      	str	r2, [sp, #36]	; 0x24
 8015c06:	f89a 3000 	ldrb.w	r3, [sl]
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	f000 80a2 	beq.w	8015d54 <_svfiprintf_r+0x1c8>
 8015c10:	2300      	movs	r3, #0
 8015c12:	f04f 32ff 	mov.w	r2, #4294967295
 8015c16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015c1a:	f10a 0a01 	add.w	sl, sl, #1
 8015c1e:	9304      	str	r3, [sp, #16]
 8015c20:	9307      	str	r3, [sp, #28]
 8015c22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015c26:	931a      	str	r3, [sp, #104]	; 0x68
 8015c28:	4654      	mov	r4, sl
 8015c2a:	2205      	movs	r2, #5
 8015c2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c30:	4851      	ldr	r0, [pc, #324]	; (8015d78 <_svfiprintf_r+0x1ec>)
 8015c32:	f7ea fae5 	bl	8000200 <memchr>
 8015c36:	9a04      	ldr	r2, [sp, #16]
 8015c38:	b9d8      	cbnz	r0, 8015c72 <_svfiprintf_r+0xe6>
 8015c3a:	06d0      	lsls	r0, r2, #27
 8015c3c:	bf44      	itt	mi
 8015c3e:	2320      	movmi	r3, #32
 8015c40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015c44:	0711      	lsls	r1, r2, #28
 8015c46:	bf44      	itt	mi
 8015c48:	232b      	movmi	r3, #43	; 0x2b
 8015c4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015c4e:	f89a 3000 	ldrb.w	r3, [sl]
 8015c52:	2b2a      	cmp	r3, #42	; 0x2a
 8015c54:	d015      	beq.n	8015c82 <_svfiprintf_r+0xf6>
 8015c56:	9a07      	ldr	r2, [sp, #28]
 8015c58:	4654      	mov	r4, sl
 8015c5a:	2000      	movs	r0, #0
 8015c5c:	f04f 0c0a 	mov.w	ip, #10
 8015c60:	4621      	mov	r1, r4
 8015c62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015c66:	3b30      	subs	r3, #48	; 0x30
 8015c68:	2b09      	cmp	r3, #9
 8015c6a:	d94e      	bls.n	8015d0a <_svfiprintf_r+0x17e>
 8015c6c:	b1b0      	cbz	r0, 8015c9c <_svfiprintf_r+0x110>
 8015c6e:	9207      	str	r2, [sp, #28]
 8015c70:	e014      	b.n	8015c9c <_svfiprintf_r+0x110>
 8015c72:	eba0 0308 	sub.w	r3, r0, r8
 8015c76:	fa09 f303 	lsl.w	r3, r9, r3
 8015c7a:	4313      	orrs	r3, r2
 8015c7c:	9304      	str	r3, [sp, #16]
 8015c7e:	46a2      	mov	sl, r4
 8015c80:	e7d2      	b.n	8015c28 <_svfiprintf_r+0x9c>
 8015c82:	9b03      	ldr	r3, [sp, #12]
 8015c84:	1d19      	adds	r1, r3, #4
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	9103      	str	r1, [sp, #12]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	bfbb      	ittet	lt
 8015c8e:	425b      	neglt	r3, r3
 8015c90:	f042 0202 	orrlt.w	r2, r2, #2
 8015c94:	9307      	strge	r3, [sp, #28]
 8015c96:	9307      	strlt	r3, [sp, #28]
 8015c98:	bfb8      	it	lt
 8015c9a:	9204      	strlt	r2, [sp, #16]
 8015c9c:	7823      	ldrb	r3, [r4, #0]
 8015c9e:	2b2e      	cmp	r3, #46	; 0x2e
 8015ca0:	d10c      	bne.n	8015cbc <_svfiprintf_r+0x130>
 8015ca2:	7863      	ldrb	r3, [r4, #1]
 8015ca4:	2b2a      	cmp	r3, #42	; 0x2a
 8015ca6:	d135      	bne.n	8015d14 <_svfiprintf_r+0x188>
 8015ca8:	9b03      	ldr	r3, [sp, #12]
 8015caa:	1d1a      	adds	r2, r3, #4
 8015cac:	681b      	ldr	r3, [r3, #0]
 8015cae:	9203      	str	r2, [sp, #12]
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	bfb8      	it	lt
 8015cb4:	f04f 33ff 	movlt.w	r3, #4294967295
 8015cb8:	3402      	adds	r4, #2
 8015cba:	9305      	str	r3, [sp, #20]
 8015cbc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015d88 <_svfiprintf_r+0x1fc>
 8015cc0:	7821      	ldrb	r1, [r4, #0]
 8015cc2:	2203      	movs	r2, #3
 8015cc4:	4650      	mov	r0, sl
 8015cc6:	f7ea fa9b 	bl	8000200 <memchr>
 8015cca:	b140      	cbz	r0, 8015cde <_svfiprintf_r+0x152>
 8015ccc:	2340      	movs	r3, #64	; 0x40
 8015cce:	eba0 000a 	sub.w	r0, r0, sl
 8015cd2:	fa03 f000 	lsl.w	r0, r3, r0
 8015cd6:	9b04      	ldr	r3, [sp, #16]
 8015cd8:	4303      	orrs	r3, r0
 8015cda:	3401      	adds	r4, #1
 8015cdc:	9304      	str	r3, [sp, #16]
 8015cde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ce2:	4826      	ldr	r0, [pc, #152]	; (8015d7c <_svfiprintf_r+0x1f0>)
 8015ce4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015ce8:	2206      	movs	r2, #6
 8015cea:	f7ea fa89 	bl	8000200 <memchr>
 8015cee:	2800      	cmp	r0, #0
 8015cf0:	d038      	beq.n	8015d64 <_svfiprintf_r+0x1d8>
 8015cf2:	4b23      	ldr	r3, [pc, #140]	; (8015d80 <_svfiprintf_r+0x1f4>)
 8015cf4:	bb1b      	cbnz	r3, 8015d3e <_svfiprintf_r+0x1b2>
 8015cf6:	9b03      	ldr	r3, [sp, #12]
 8015cf8:	3307      	adds	r3, #7
 8015cfa:	f023 0307 	bic.w	r3, r3, #7
 8015cfe:	3308      	adds	r3, #8
 8015d00:	9303      	str	r3, [sp, #12]
 8015d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d04:	4433      	add	r3, r6
 8015d06:	9309      	str	r3, [sp, #36]	; 0x24
 8015d08:	e767      	b.n	8015bda <_svfiprintf_r+0x4e>
 8015d0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8015d0e:	460c      	mov	r4, r1
 8015d10:	2001      	movs	r0, #1
 8015d12:	e7a5      	b.n	8015c60 <_svfiprintf_r+0xd4>
 8015d14:	2300      	movs	r3, #0
 8015d16:	3401      	adds	r4, #1
 8015d18:	9305      	str	r3, [sp, #20]
 8015d1a:	4619      	mov	r1, r3
 8015d1c:	f04f 0c0a 	mov.w	ip, #10
 8015d20:	4620      	mov	r0, r4
 8015d22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015d26:	3a30      	subs	r2, #48	; 0x30
 8015d28:	2a09      	cmp	r2, #9
 8015d2a:	d903      	bls.n	8015d34 <_svfiprintf_r+0x1a8>
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d0c5      	beq.n	8015cbc <_svfiprintf_r+0x130>
 8015d30:	9105      	str	r1, [sp, #20]
 8015d32:	e7c3      	b.n	8015cbc <_svfiprintf_r+0x130>
 8015d34:	fb0c 2101 	mla	r1, ip, r1, r2
 8015d38:	4604      	mov	r4, r0
 8015d3a:	2301      	movs	r3, #1
 8015d3c:	e7f0      	b.n	8015d20 <_svfiprintf_r+0x194>
 8015d3e:	ab03      	add	r3, sp, #12
 8015d40:	9300      	str	r3, [sp, #0]
 8015d42:	462a      	mov	r2, r5
 8015d44:	4b0f      	ldr	r3, [pc, #60]	; (8015d84 <_svfiprintf_r+0x1f8>)
 8015d46:	a904      	add	r1, sp, #16
 8015d48:	4638      	mov	r0, r7
 8015d4a:	f3af 8000 	nop.w
 8015d4e:	1c42      	adds	r2, r0, #1
 8015d50:	4606      	mov	r6, r0
 8015d52:	d1d6      	bne.n	8015d02 <_svfiprintf_r+0x176>
 8015d54:	89ab      	ldrh	r3, [r5, #12]
 8015d56:	065b      	lsls	r3, r3, #25
 8015d58:	f53f af2c 	bmi.w	8015bb4 <_svfiprintf_r+0x28>
 8015d5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015d5e:	b01d      	add	sp, #116	; 0x74
 8015d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d64:	ab03      	add	r3, sp, #12
 8015d66:	9300      	str	r3, [sp, #0]
 8015d68:	462a      	mov	r2, r5
 8015d6a:	4b06      	ldr	r3, [pc, #24]	; (8015d84 <_svfiprintf_r+0x1f8>)
 8015d6c:	a904      	add	r1, sp, #16
 8015d6e:	4638      	mov	r0, r7
 8015d70:	f000 f9d4 	bl	801611c <_printf_i>
 8015d74:	e7eb      	b.n	8015d4e <_svfiprintf_r+0x1c2>
 8015d76:	bf00      	nop
 8015d78:	08017bf8 	.word	0x08017bf8
 8015d7c:	08017c02 	.word	0x08017c02
 8015d80:	00000000 	.word	0x00000000
 8015d84:	08015ad5 	.word	0x08015ad5
 8015d88:	08017bfe 	.word	0x08017bfe

08015d8c <__sfputc_r>:
 8015d8c:	6893      	ldr	r3, [r2, #8]
 8015d8e:	3b01      	subs	r3, #1
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	b410      	push	{r4}
 8015d94:	6093      	str	r3, [r2, #8]
 8015d96:	da08      	bge.n	8015daa <__sfputc_r+0x1e>
 8015d98:	6994      	ldr	r4, [r2, #24]
 8015d9a:	42a3      	cmp	r3, r4
 8015d9c:	db01      	blt.n	8015da2 <__sfputc_r+0x16>
 8015d9e:	290a      	cmp	r1, #10
 8015da0:	d103      	bne.n	8015daa <__sfputc_r+0x1e>
 8015da2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015da6:	f000 bbb7 	b.w	8016518 <__swbuf_r>
 8015daa:	6813      	ldr	r3, [r2, #0]
 8015dac:	1c58      	adds	r0, r3, #1
 8015dae:	6010      	str	r0, [r2, #0]
 8015db0:	7019      	strb	r1, [r3, #0]
 8015db2:	4608      	mov	r0, r1
 8015db4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015db8:	4770      	bx	lr

08015dba <__sfputs_r>:
 8015dba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015dbc:	4606      	mov	r6, r0
 8015dbe:	460f      	mov	r7, r1
 8015dc0:	4614      	mov	r4, r2
 8015dc2:	18d5      	adds	r5, r2, r3
 8015dc4:	42ac      	cmp	r4, r5
 8015dc6:	d101      	bne.n	8015dcc <__sfputs_r+0x12>
 8015dc8:	2000      	movs	r0, #0
 8015dca:	e007      	b.n	8015ddc <__sfputs_r+0x22>
 8015dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015dd0:	463a      	mov	r2, r7
 8015dd2:	4630      	mov	r0, r6
 8015dd4:	f7ff ffda 	bl	8015d8c <__sfputc_r>
 8015dd8:	1c43      	adds	r3, r0, #1
 8015dda:	d1f3      	bne.n	8015dc4 <__sfputs_r+0xa>
 8015ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015de0 <_vfiprintf_r>:
 8015de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015de4:	460d      	mov	r5, r1
 8015de6:	b09d      	sub	sp, #116	; 0x74
 8015de8:	4614      	mov	r4, r2
 8015dea:	4698      	mov	r8, r3
 8015dec:	4606      	mov	r6, r0
 8015dee:	b118      	cbz	r0, 8015df8 <_vfiprintf_r+0x18>
 8015df0:	6983      	ldr	r3, [r0, #24]
 8015df2:	b90b      	cbnz	r3, 8015df8 <_vfiprintf_r+0x18>
 8015df4:	f7fe fc9a 	bl	801472c <__sinit>
 8015df8:	4b89      	ldr	r3, [pc, #548]	; (8016020 <_vfiprintf_r+0x240>)
 8015dfa:	429d      	cmp	r5, r3
 8015dfc:	d11b      	bne.n	8015e36 <_vfiprintf_r+0x56>
 8015dfe:	6875      	ldr	r5, [r6, #4]
 8015e00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015e02:	07d9      	lsls	r1, r3, #31
 8015e04:	d405      	bmi.n	8015e12 <_vfiprintf_r+0x32>
 8015e06:	89ab      	ldrh	r3, [r5, #12]
 8015e08:	059a      	lsls	r2, r3, #22
 8015e0a:	d402      	bmi.n	8015e12 <_vfiprintf_r+0x32>
 8015e0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015e0e:	f7fe fd51 	bl	80148b4 <__retarget_lock_acquire_recursive>
 8015e12:	89ab      	ldrh	r3, [r5, #12]
 8015e14:	071b      	lsls	r3, r3, #28
 8015e16:	d501      	bpl.n	8015e1c <_vfiprintf_r+0x3c>
 8015e18:	692b      	ldr	r3, [r5, #16]
 8015e1a:	b9eb      	cbnz	r3, 8015e58 <_vfiprintf_r+0x78>
 8015e1c:	4629      	mov	r1, r5
 8015e1e:	4630      	mov	r0, r6
 8015e20:	f000 fbcc 	bl	80165bc <__swsetup_r>
 8015e24:	b1c0      	cbz	r0, 8015e58 <_vfiprintf_r+0x78>
 8015e26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015e28:	07dc      	lsls	r4, r3, #31
 8015e2a:	d50e      	bpl.n	8015e4a <_vfiprintf_r+0x6a>
 8015e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8015e30:	b01d      	add	sp, #116	; 0x74
 8015e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e36:	4b7b      	ldr	r3, [pc, #492]	; (8016024 <_vfiprintf_r+0x244>)
 8015e38:	429d      	cmp	r5, r3
 8015e3a:	d101      	bne.n	8015e40 <_vfiprintf_r+0x60>
 8015e3c:	68b5      	ldr	r5, [r6, #8]
 8015e3e:	e7df      	b.n	8015e00 <_vfiprintf_r+0x20>
 8015e40:	4b79      	ldr	r3, [pc, #484]	; (8016028 <_vfiprintf_r+0x248>)
 8015e42:	429d      	cmp	r5, r3
 8015e44:	bf08      	it	eq
 8015e46:	68f5      	ldreq	r5, [r6, #12]
 8015e48:	e7da      	b.n	8015e00 <_vfiprintf_r+0x20>
 8015e4a:	89ab      	ldrh	r3, [r5, #12]
 8015e4c:	0598      	lsls	r0, r3, #22
 8015e4e:	d4ed      	bmi.n	8015e2c <_vfiprintf_r+0x4c>
 8015e50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015e52:	f7fe fd31 	bl	80148b8 <__retarget_lock_release_recursive>
 8015e56:	e7e9      	b.n	8015e2c <_vfiprintf_r+0x4c>
 8015e58:	2300      	movs	r3, #0
 8015e5a:	9309      	str	r3, [sp, #36]	; 0x24
 8015e5c:	2320      	movs	r3, #32
 8015e5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015e62:	f8cd 800c 	str.w	r8, [sp, #12]
 8015e66:	2330      	movs	r3, #48	; 0x30
 8015e68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801602c <_vfiprintf_r+0x24c>
 8015e6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015e70:	f04f 0901 	mov.w	r9, #1
 8015e74:	4623      	mov	r3, r4
 8015e76:	469a      	mov	sl, r3
 8015e78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015e7c:	b10a      	cbz	r2, 8015e82 <_vfiprintf_r+0xa2>
 8015e7e:	2a25      	cmp	r2, #37	; 0x25
 8015e80:	d1f9      	bne.n	8015e76 <_vfiprintf_r+0x96>
 8015e82:	ebba 0b04 	subs.w	fp, sl, r4
 8015e86:	d00b      	beq.n	8015ea0 <_vfiprintf_r+0xc0>
 8015e88:	465b      	mov	r3, fp
 8015e8a:	4622      	mov	r2, r4
 8015e8c:	4629      	mov	r1, r5
 8015e8e:	4630      	mov	r0, r6
 8015e90:	f7ff ff93 	bl	8015dba <__sfputs_r>
 8015e94:	3001      	adds	r0, #1
 8015e96:	f000 80aa 	beq.w	8015fee <_vfiprintf_r+0x20e>
 8015e9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015e9c:	445a      	add	r2, fp
 8015e9e:	9209      	str	r2, [sp, #36]	; 0x24
 8015ea0:	f89a 3000 	ldrb.w	r3, [sl]
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	f000 80a2 	beq.w	8015fee <_vfiprintf_r+0x20e>
 8015eaa:	2300      	movs	r3, #0
 8015eac:	f04f 32ff 	mov.w	r2, #4294967295
 8015eb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015eb4:	f10a 0a01 	add.w	sl, sl, #1
 8015eb8:	9304      	str	r3, [sp, #16]
 8015eba:	9307      	str	r3, [sp, #28]
 8015ebc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015ec0:	931a      	str	r3, [sp, #104]	; 0x68
 8015ec2:	4654      	mov	r4, sl
 8015ec4:	2205      	movs	r2, #5
 8015ec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015eca:	4858      	ldr	r0, [pc, #352]	; (801602c <_vfiprintf_r+0x24c>)
 8015ecc:	f7ea f998 	bl	8000200 <memchr>
 8015ed0:	9a04      	ldr	r2, [sp, #16]
 8015ed2:	b9d8      	cbnz	r0, 8015f0c <_vfiprintf_r+0x12c>
 8015ed4:	06d1      	lsls	r1, r2, #27
 8015ed6:	bf44      	itt	mi
 8015ed8:	2320      	movmi	r3, #32
 8015eda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015ede:	0713      	lsls	r3, r2, #28
 8015ee0:	bf44      	itt	mi
 8015ee2:	232b      	movmi	r3, #43	; 0x2b
 8015ee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015ee8:	f89a 3000 	ldrb.w	r3, [sl]
 8015eec:	2b2a      	cmp	r3, #42	; 0x2a
 8015eee:	d015      	beq.n	8015f1c <_vfiprintf_r+0x13c>
 8015ef0:	9a07      	ldr	r2, [sp, #28]
 8015ef2:	4654      	mov	r4, sl
 8015ef4:	2000      	movs	r0, #0
 8015ef6:	f04f 0c0a 	mov.w	ip, #10
 8015efa:	4621      	mov	r1, r4
 8015efc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015f00:	3b30      	subs	r3, #48	; 0x30
 8015f02:	2b09      	cmp	r3, #9
 8015f04:	d94e      	bls.n	8015fa4 <_vfiprintf_r+0x1c4>
 8015f06:	b1b0      	cbz	r0, 8015f36 <_vfiprintf_r+0x156>
 8015f08:	9207      	str	r2, [sp, #28]
 8015f0a:	e014      	b.n	8015f36 <_vfiprintf_r+0x156>
 8015f0c:	eba0 0308 	sub.w	r3, r0, r8
 8015f10:	fa09 f303 	lsl.w	r3, r9, r3
 8015f14:	4313      	orrs	r3, r2
 8015f16:	9304      	str	r3, [sp, #16]
 8015f18:	46a2      	mov	sl, r4
 8015f1a:	e7d2      	b.n	8015ec2 <_vfiprintf_r+0xe2>
 8015f1c:	9b03      	ldr	r3, [sp, #12]
 8015f1e:	1d19      	adds	r1, r3, #4
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	9103      	str	r1, [sp, #12]
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	bfbb      	ittet	lt
 8015f28:	425b      	neglt	r3, r3
 8015f2a:	f042 0202 	orrlt.w	r2, r2, #2
 8015f2e:	9307      	strge	r3, [sp, #28]
 8015f30:	9307      	strlt	r3, [sp, #28]
 8015f32:	bfb8      	it	lt
 8015f34:	9204      	strlt	r2, [sp, #16]
 8015f36:	7823      	ldrb	r3, [r4, #0]
 8015f38:	2b2e      	cmp	r3, #46	; 0x2e
 8015f3a:	d10c      	bne.n	8015f56 <_vfiprintf_r+0x176>
 8015f3c:	7863      	ldrb	r3, [r4, #1]
 8015f3e:	2b2a      	cmp	r3, #42	; 0x2a
 8015f40:	d135      	bne.n	8015fae <_vfiprintf_r+0x1ce>
 8015f42:	9b03      	ldr	r3, [sp, #12]
 8015f44:	1d1a      	adds	r2, r3, #4
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	9203      	str	r2, [sp, #12]
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	bfb8      	it	lt
 8015f4e:	f04f 33ff 	movlt.w	r3, #4294967295
 8015f52:	3402      	adds	r4, #2
 8015f54:	9305      	str	r3, [sp, #20]
 8015f56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801603c <_vfiprintf_r+0x25c>
 8015f5a:	7821      	ldrb	r1, [r4, #0]
 8015f5c:	2203      	movs	r2, #3
 8015f5e:	4650      	mov	r0, sl
 8015f60:	f7ea f94e 	bl	8000200 <memchr>
 8015f64:	b140      	cbz	r0, 8015f78 <_vfiprintf_r+0x198>
 8015f66:	2340      	movs	r3, #64	; 0x40
 8015f68:	eba0 000a 	sub.w	r0, r0, sl
 8015f6c:	fa03 f000 	lsl.w	r0, r3, r0
 8015f70:	9b04      	ldr	r3, [sp, #16]
 8015f72:	4303      	orrs	r3, r0
 8015f74:	3401      	adds	r4, #1
 8015f76:	9304      	str	r3, [sp, #16]
 8015f78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f7c:	482c      	ldr	r0, [pc, #176]	; (8016030 <_vfiprintf_r+0x250>)
 8015f7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015f82:	2206      	movs	r2, #6
 8015f84:	f7ea f93c 	bl	8000200 <memchr>
 8015f88:	2800      	cmp	r0, #0
 8015f8a:	d03f      	beq.n	801600c <_vfiprintf_r+0x22c>
 8015f8c:	4b29      	ldr	r3, [pc, #164]	; (8016034 <_vfiprintf_r+0x254>)
 8015f8e:	bb1b      	cbnz	r3, 8015fd8 <_vfiprintf_r+0x1f8>
 8015f90:	9b03      	ldr	r3, [sp, #12]
 8015f92:	3307      	adds	r3, #7
 8015f94:	f023 0307 	bic.w	r3, r3, #7
 8015f98:	3308      	adds	r3, #8
 8015f9a:	9303      	str	r3, [sp, #12]
 8015f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f9e:	443b      	add	r3, r7
 8015fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8015fa2:	e767      	b.n	8015e74 <_vfiprintf_r+0x94>
 8015fa4:	fb0c 3202 	mla	r2, ip, r2, r3
 8015fa8:	460c      	mov	r4, r1
 8015faa:	2001      	movs	r0, #1
 8015fac:	e7a5      	b.n	8015efa <_vfiprintf_r+0x11a>
 8015fae:	2300      	movs	r3, #0
 8015fb0:	3401      	adds	r4, #1
 8015fb2:	9305      	str	r3, [sp, #20]
 8015fb4:	4619      	mov	r1, r3
 8015fb6:	f04f 0c0a 	mov.w	ip, #10
 8015fba:	4620      	mov	r0, r4
 8015fbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015fc0:	3a30      	subs	r2, #48	; 0x30
 8015fc2:	2a09      	cmp	r2, #9
 8015fc4:	d903      	bls.n	8015fce <_vfiprintf_r+0x1ee>
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d0c5      	beq.n	8015f56 <_vfiprintf_r+0x176>
 8015fca:	9105      	str	r1, [sp, #20]
 8015fcc:	e7c3      	b.n	8015f56 <_vfiprintf_r+0x176>
 8015fce:	fb0c 2101 	mla	r1, ip, r1, r2
 8015fd2:	4604      	mov	r4, r0
 8015fd4:	2301      	movs	r3, #1
 8015fd6:	e7f0      	b.n	8015fba <_vfiprintf_r+0x1da>
 8015fd8:	ab03      	add	r3, sp, #12
 8015fda:	9300      	str	r3, [sp, #0]
 8015fdc:	462a      	mov	r2, r5
 8015fde:	4b16      	ldr	r3, [pc, #88]	; (8016038 <_vfiprintf_r+0x258>)
 8015fe0:	a904      	add	r1, sp, #16
 8015fe2:	4630      	mov	r0, r6
 8015fe4:	f3af 8000 	nop.w
 8015fe8:	4607      	mov	r7, r0
 8015fea:	1c78      	adds	r0, r7, #1
 8015fec:	d1d6      	bne.n	8015f9c <_vfiprintf_r+0x1bc>
 8015fee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015ff0:	07d9      	lsls	r1, r3, #31
 8015ff2:	d405      	bmi.n	8016000 <_vfiprintf_r+0x220>
 8015ff4:	89ab      	ldrh	r3, [r5, #12]
 8015ff6:	059a      	lsls	r2, r3, #22
 8015ff8:	d402      	bmi.n	8016000 <_vfiprintf_r+0x220>
 8015ffa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015ffc:	f7fe fc5c 	bl	80148b8 <__retarget_lock_release_recursive>
 8016000:	89ab      	ldrh	r3, [r5, #12]
 8016002:	065b      	lsls	r3, r3, #25
 8016004:	f53f af12 	bmi.w	8015e2c <_vfiprintf_r+0x4c>
 8016008:	9809      	ldr	r0, [sp, #36]	; 0x24
 801600a:	e711      	b.n	8015e30 <_vfiprintf_r+0x50>
 801600c:	ab03      	add	r3, sp, #12
 801600e:	9300      	str	r3, [sp, #0]
 8016010:	462a      	mov	r2, r5
 8016012:	4b09      	ldr	r3, [pc, #36]	; (8016038 <_vfiprintf_r+0x258>)
 8016014:	a904      	add	r1, sp, #16
 8016016:	4630      	mov	r0, r6
 8016018:	f000 f880 	bl	801611c <_printf_i>
 801601c:	e7e4      	b.n	8015fe8 <_vfiprintf_r+0x208>
 801601e:	bf00      	nop
 8016020:	08017904 	.word	0x08017904
 8016024:	08017924 	.word	0x08017924
 8016028:	080178e4 	.word	0x080178e4
 801602c:	08017bf8 	.word	0x08017bf8
 8016030:	08017c02 	.word	0x08017c02
 8016034:	00000000 	.word	0x00000000
 8016038:	08015dbb 	.word	0x08015dbb
 801603c:	08017bfe 	.word	0x08017bfe

08016040 <_printf_common>:
 8016040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016044:	4616      	mov	r6, r2
 8016046:	4699      	mov	r9, r3
 8016048:	688a      	ldr	r2, [r1, #8]
 801604a:	690b      	ldr	r3, [r1, #16]
 801604c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016050:	4293      	cmp	r3, r2
 8016052:	bfb8      	it	lt
 8016054:	4613      	movlt	r3, r2
 8016056:	6033      	str	r3, [r6, #0]
 8016058:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801605c:	4607      	mov	r7, r0
 801605e:	460c      	mov	r4, r1
 8016060:	b10a      	cbz	r2, 8016066 <_printf_common+0x26>
 8016062:	3301      	adds	r3, #1
 8016064:	6033      	str	r3, [r6, #0]
 8016066:	6823      	ldr	r3, [r4, #0]
 8016068:	0699      	lsls	r1, r3, #26
 801606a:	bf42      	ittt	mi
 801606c:	6833      	ldrmi	r3, [r6, #0]
 801606e:	3302      	addmi	r3, #2
 8016070:	6033      	strmi	r3, [r6, #0]
 8016072:	6825      	ldr	r5, [r4, #0]
 8016074:	f015 0506 	ands.w	r5, r5, #6
 8016078:	d106      	bne.n	8016088 <_printf_common+0x48>
 801607a:	f104 0a19 	add.w	sl, r4, #25
 801607e:	68e3      	ldr	r3, [r4, #12]
 8016080:	6832      	ldr	r2, [r6, #0]
 8016082:	1a9b      	subs	r3, r3, r2
 8016084:	42ab      	cmp	r3, r5
 8016086:	dc26      	bgt.n	80160d6 <_printf_common+0x96>
 8016088:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801608c:	1e13      	subs	r3, r2, #0
 801608e:	6822      	ldr	r2, [r4, #0]
 8016090:	bf18      	it	ne
 8016092:	2301      	movne	r3, #1
 8016094:	0692      	lsls	r2, r2, #26
 8016096:	d42b      	bmi.n	80160f0 <_printf_common+0xb0>
 8016098:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801609c:	4649      	mov	r1, r9
 801609e:	4638      	mov	r0, r7
 80160a0:	47c0      	blx	r8
 80160a2:	3001      	adds	r0, #1
 80160a4:	d01e      	beq.n	80160e4 <_printf_common+0xa4>
 80160a6:	6823      	ldr	r3, [r4, #0]
 80160a8:	68e5      	ldr	r5, [r4, #12]
 80160aa:	6832      	ldr	r2, [r6, #0]
 80160ac:	f003 0306 	and.w	r3, r3, #6
 80160b0:	2b04      	cmp	r3, #4
 80160b2:	bf08      	it	eq
 80160b4:	1aad      	subeq	r5, r5, r2
 80160b6:	68a3      	ldr	r3, [r4, #8]
 80160b8:	6922      	ldr	r2, [r4, #16]
 80160ba:	bf0c      	ite	eq
 80160bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80160c0:	2500      	movne	r5, #0
 80160c2:	4293      	cmp	r3, r2
 80160c4:	bfc4      	itt	gt
 80160c6:	1a9b      	subgt	r3, r3, r2
 80160c8:	18ed      	addgt	r5, r5, r3
 80160ca:	2600      	movs	r6, #0
 80160cc:	341a      	adds	r4, #26
 80160ce:	42b5      	cmp	r5, r6
 80160d0:	d11a      	bne.n	8016108 <_printf_common+0xc8>
 80160d2:	2000      	movs	r0, #0
 80160d4:	e008      	b.n	80160e8 <_printf_common+0xa8>
 80160d6:	2301      	movs	r3, #1
 80160d8:	4652      	mov	r2, sl
 80160da:	4649      	mov	r1, r9
 80160dc:	4638      	mov	r0, r7
 80160de:	47c0      	blx	r8
 80160e0:	3001      	adds	r0, #1
 80160e2:	d103      	bne.n	80160ec <_printf_common+0xac>
 80160e4:	f04f 30ff 	mov.w	r0, #4294967295
 80160e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80160ec:	3501      	adds	r5, #1
 80160ee:	e7c6      	b.n	801607e <_printf_common+0x3e>
 80160f0:	18e1      	adds	r1, r4, r3
 80160f2:	1c5a      	adds	r2, r3, #1
 80160f4:	2030      	movs	r0, #48	; 0x30
 80160f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80160fa:	4422      	add	r2, r4
 80160fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016100:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016104:	3302      	adds	r3, #2
 8016106:	e7c7      	b.n	8016098 <_printf_common+0x58>
 8016108:	2301      	movs	r3, #1
 801610a:	4622      	mov	r2, r4
 801610c:	4649      	mov	r1, r9
 801610e:	4638      	mov	r0, r7
 8016110:	47c0      	blx	r8
 8016112:	3001      	adds	r0, #1
 8016114:	d0e6      	beq.n	80160e4 <_printf_common+0xa4>
 8016116:	3601      	adds	r6, #1
 8016118:	e7d9      	b.n	80160ce <_printf_common+0x8e>
	...

0801611c <_printf_i>:
 801611c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016120:	7e0f      	ldrb	r7, [r1, #24]
 8016122:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016124:	2f78      	cmp	r7, #120	; 0x78
 8016126:	4691      	mov	r9, r2
 8016128:	4680      	mov	r8, r0
 801612a:	460c      	mov	r4, r1
 801612c:	469a      	mov	sl, r3
 801612e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8016132:	d807      	bhi.n	8016144 <_printf_i+0x28>
 8016134:	2f62      	cmp	r7, #98	; 0x62
 8016136:	d80a      	bhi.n	801614e <_printf_i+0x32>
 8016138:	2f00      	cmp	r7, #0
 801613a:	f000 80d8 	beq.w	80162ee <_printf_i+0x1d2>
 801613e:	2f58      	cmp	r7, #88	; 0x58
 8016140:	f000 80a3 	beq.w	801628a <_printf_i+0x16e>
 8016144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016148:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801614c:	e03a      	b.n	80161c4 <_printf_i+0xa8>
 801614e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016152:	2b15      	cmp	r3, #21
 8016154:	d8f6      	bhi.n	8016144 <_printf_i+0x28>
 8016156:	a101      	add	r1, pc, #4	; (adr r1, 801615c <_printf_i+0x40>)
 8016158:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801615c:	080161b5 	.word	0x080161b5
 8016160:	080161c9 	.word	0x080161c9
 8016164:	08016145 	.word	0x08016145
 8016168:	08016145 	.word	0x08016145
 801616c:	08016145 	.word	0x08016145
 8016170:	08016145 	.word	0x08016145
 8016174:	080161c9 	.word	0x080161c9
 8016178:	08016145 	.word	0x08016145
 801617c:	08016145 	.word	0x08016145
 8016180:	08016145 	.word	0x08016145
 8016184:	08016145 	.word	0x08016145
 8016188:	080162d5 	.word	0x080162d5
 801618c:	080161f9 	.word	0x080161f9
 8016190:	080162b7 	.word	0x080162b7
 8016194:	08016145 	.word	0x08016145
 8016198:	08016145 	.word	0x08016145
 801619c:	080162f7 	.word	0x080162f7
 80161a0:	08016145 	.word	0x08016145
 80161a4:	080161f9 	.word	0x080161f9
 80161a8:	08016145 	.word	0x08016145
 80161ac:	08016145 	.word	0x08016145
 80161b0:	080162bf 	.word	0x080162bf
 80161b4:	682b      	ldr	r3, [r5, #0]
 80161b6:	1d1a      	adds	r2, r3, #4
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	602a      	str	r2, [r5, #0]
 80161bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80161c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80161c4:	2301      	movs	r3, #1
 80161c6:	e0a3      	b.n	8016310 <_printf_i+0x1f4>
 80161c8:	6820      	ldr	r0, [r4, #0]
 80161ca:	6829      	ldr	r1, [r5, #0]
 80161cc:	0606      	lsls	r6, r0, #24
 80161ce:	f101 0304 	add.w	r3, r1, #4
 80161d2:	d50a      	bpl.n	80161ea <_printf_i+0xce>
 80161d4:	680e      	ldr	r6, [r1, #0]
 80161d6:	602b      	str	r3, [r5, #0]
 80161d8:	2e00      	cmp	r6, #0
 80161da:	da03      	bge.n	80161e4 <_printf_i+0xc8>
 80161dc:	232d      	movs	r3, #45	; 0x2d
 80161de:	4276      	negs	r6, r6
 80161e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80161e4:	485e      	ldr	r0, [pc, #376]	; (8016360 <_printf_i+0x244>)
 80161e6:	230a      	movs	r3, #10
 80161e8:	e019      	b.n	801621e <_printf_i+0x102>
 80161ea:	680e      	ldr	r6, [r1, #0]
 80161ec:	602b      	str	r3, [r5, #0]
 80161ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80161f2:	bf18      	it	ne
 80161f4:	b236      	sxthne	r6, r6
 80161f6:	e7ef      	b.n	80161d8 <_printf_i+0xbc>
 80161f8:	682b      	ldr	r3, [r5, #0]
 80161fa:	6820      	ldr	r0, [r4, #0]
 80161fc:	1d19      	adds	r1, r3, #4
 80161fe:	6029      	str	r1, [r5, #0]
 8016200:	0601      	lsls	r1, r0, #24
 8016202:	d501      	bpl.n	8016208 <_printf_i+0xec>
 8016204:	681e      	ldr	r6, [r3, #0]
 8016206:	e002      	b.n	801620e <_printf_i+0xf2>
 8016208:	0646      	lsls	r6, r0, #25
 801620a:	d5fb      	bpl.n	8016204 <_printf_i+0xe8>
 801620c:	881e      	ldrh	r6, [r3, #0]
 801620e:	4854      	ldr	r0, [pc, #336]	; (8016360 <_printf_i+0x244>)
 8016210:	2f6f      	cmp	r7, #111	; 0x6f
 8016212:	bf0c      	ite	eq
 8016214:	2308      	moveq	r3, #8
 8016216:	230a      	movne	r3, #10
 8016218:	2100      	movs	r1, #0
 801621a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801621e:	6865      	ldr	r5, [r4, #4]
 8016220:	60a5      	str	r5, [r4, #8]
 8016222:	2d00      	cmp	r5, #0
 8016224:	bfa2      	ittt	ge
 8016226:	6821      	ldrge	r1, [r4, #0]
 8016228:	f021 0104 	bicge.w	r1, r1, #4
 801622c:	6021      	strge	r1, [r4, #0]
 801622e:	b90e      	cbnz	r6, 8016234 <_printf_i+0x118>
 8016230:	2d00      	cmp	r5, #0
 8016232:	d04d      	beq.n	80162d0 <_printf_i+0x1b4>
 8016234:	4615      	mov	r5, r2
 8016236:	fbb6 f1f3 	udiv	r1, r6, r3
 801623a:	fb03 6711 	mls	r7, r3, r1, r6
 801623e:	5dc7      	ldrb	r7, [r0, r7]
 8016240:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8016244:	4637      	mov	r7, r6
 8016246:	42bb      	cmp	r3, r7
 8016248:	460e      	mov	r6, r1
 801624a:	d9f4      	bls.n	8016236 <_printf_i+0x11a>
 801624c:	2b08      	cmp	r3, #8
 801624e:	d10b      	bne.n	8016268 <_printf_i+0x14c>
 8016250:	6823      	ldr	r3, [r4, #0]
 8016252:	07de      	lsls	r6, r3, #31
 8016254:	d508      	bpl.n	8016268 <_printf_i+0x14c>
 8016256:	6923      	ldr	r3, [r4, #16]
 8016258:	6861      	ldr	r1, [r4, #4]
 801625a:	4299      	cmp	r1, r3
 801625c:	bfde      	ittt	le
 801625e:	2330      	movle	r3, #48	; 0x30
 8016260:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016264:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016268:	1b52      	subs	r2, r2, r5
 801626a:	6122      	str	r2, [r4, #16]
 801626c:	f8cd a000 	str.w	sl, [sp]
 8016270:	464b      	mov	r3, r9
 8016272:	aa03      	add	r2, sp, #12
 8016274:	4621      	mov	r1, r4
 8016276:	4640      	mov	r0, r8
 8016278:	f7ff fee2 	bl	8016040 <_printf_common>
 801627c:	3001      	adds	r0, #1
 801627e:	d14c      	bne.n	801631a <_printf_i+0x1fe>
 8016280:	f04f 30ff 	mov.w	r0, #4294967295
 8016284:	b004      	add	sp, #16
 8016286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801628a:	4835      	ldr	r0, [pc, #212]	; (8016360 <_printf_i+0x244>)
 801628c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8016290:	6829      	ldr	r1, [r5, #0]
 8016292:	6823      	ldr	r3, [r4, #0]
 8016294:	f851 6b04 	ldr.w	r6, [r1], #4
 8016298:	6029      	str	r1, [r5, #0]
 801629a:	061d      	lsls	r5, r3, #24
 801629c:	d514      	bpl.n	80162c8 <_printf_i+0x1ac>
 801629e:	07df      	lsls	r7, r3, #31
 80162a0:	bf44      	itt	mi
 80162a2:	f043 0320 	orrmi.w	r3, r3, #32
 80162a6:	6023      	strmi	r3, [r4, #0]
 80162a8:	b91e      	cbnz	r6, 80162b2 <_printf_i+0x196>
 80162aa:	6823      	ldr	r3, [r4, #0]
 80162ac:	f023 0320 	bic.w	r3, r3, #32
 80162b0:	6023      	str	r3, [r4, #0]
 80162b2:	2310      	movs	r3, #16
 80162b4:	e7b0      	b.n	8016218 <_printf_i+0xfc>
 80162b6:	6823      	ldr	r3, [r4, #0]
 80162b8:	f043 0320 	orr.w	r3, r3, #32
 80162bc:	6023      	str	r3, [r4, #0]
 80162be:	2378      	movs	r3, #120	; 0x78
 80162c0:	4828      	ldr	r0, [pc, #160]	; (8016364 <_printf_i+0x248>)
 80162c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80162c6:	e7e3      	b.n	8016290 <_printf_i+0x174>
 80162c8:	0659      	lsls	r1, r3, #25
 80162ca:	bf48      	it	mi
 80162cc:	b2b6      	uxthmi	r6, r6
 80162ce:	e7e6      	b.n	801629e <_printf_i+0x182>
 80162d0:	4615      	mov	r5, r2
 80162d2:	e7bb      	b.n	801624c <_printf_i+0x130>
 80162d4:	682b      	ldr	r3, [r5, #0]
 80162d6:	6826      	ldr	r6, [r4, #0]
 80162d8:	6961      	ldr	r1, [r4, #20]
 80162da:	1d18      	adds	r0, r3, #4
 80162dc:	6028      	str	r0, [r5, #0]
 80162de:	0635      	lsls	r5, r6, #24
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	d501      	bpl.n	80162e8 <_printf_i+0x1cc>
 80162e4:	6019      	str	r1, [r3, #0]
 80162e6:	e002      	b.n	80162ee <_printf_i+0x1d2>
 80162e8:	0670      	lsls	r0, r6, #25
 80162ea:	d5fb      	bpl.n	80162e4 <_printf_i+0x1c8>
 80162ec:	8019      	strh	r1, [r3, #0]
 80162ee:	2300      	movs	r3, #0
 80162f0:	6123      	str	r3, [r4, #16]
 80162f2:	4615      	mov	r5, r2
 80162f4:	e7ba      	b.n	801626c <_printf_i+0x150>
 80162f6:	682b      	ldr	r3, [r5, #0]
 80162f8:	1d1a      	adds	r2, r3, #4
 80162fa:	602a      	str	r2, [r5, #0]
 80162fc:	681d      	ldr	r5, [r3, #0]
 80162fe:	6862      	ldr	r2, [r4, #4]
 8016300:	2100      	movs	r1, #0
 8016302:	4628      	mov	r0, r5
 8016304:	f7e9 ff7c 	bl	8000200 <memchr>
 8016308:	b108      	cbz	r0, 801630e <_printf_i+0x1f2>
 801630a:	1b40      	subs	r0, r0, r5
 801630c:	6060      	str	r0, [r4, #4]
 801630e:	6863      	ldr	r3, [r4, #4]
 8016310:	6123      	str	r3, [r4, #16]
 8016312:	2300      	movs	r3, #0
 8016314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016318:	e7a8      	b.n	801626c <_printf_i+0x150>
 801631a:	6923      	ldr	r3, [r4, #16]
 801631c:	462a      	mov	r2, r5
 801631e:	4649      	mov	r1, r9
 8016320:	4640      	mov	r0, r8
 8016322:	47d0      	blx	sl
 8016324:	3001      	adds	r0, #1
 8016326:	d0ab      	beq.n	8016280 <_printf_i+0x164>
 8016328:	6823      	ldr	r3, [r4, #0]
 801632a:	079b      	lsls	r3, r3, #30
 801632c:	d413      	bmi.n	8016356 <_printf_i+0x23a>
 801632e:	68e0      	ldr	r0, [r4, #12]
 8016330:	9b03      	ldr	r3, [sp, #12]
 8016332:	4298      	cmp	r0, r3
 8016334:	bfb8      	it	lt
 8016336:	4618      	movlt	r0, r3
 8016338:	e7a4      	b.n	8016284 <_printf_i+0x168>
 801633a:	2301      	movs	r3, #1
 801633c:	4632      	mov	r2, r6
 801633e:	4649      	mov	r1, r9
 8016340:	4640      	mov	r0, r8
 8016342:	47d0      	blx	sl
 8016344:	3001      	adds	r0, #1
 8016346:	d09b      	beq.n	8016280 <_printf_i+0x164>
 8016348:	3501      	adds	r5, #1
 801634a:	68e3      	ldr	r3, [r4, #12]
 801634c:	9903      	ldr	r1, [sp, #12]
 801634e:	1a5b      	subs	r3, r3, r1
 8016350:	42ab      	cmp	r3, r5
 8016352:	dcf2      	bgt.n	801633a <_printf_i+0x21e>
 8016354:	e7eb      	b.n	801632e <_printf_i+0x212>
 8016356:	2500      	movs	r5, #0
 8016358:	f104 0619 	add.w	r6, r4, #25
 801635c:	e7f5      	b.n	801634a <_printf_i+0x22e>
 801635e:	bf00      	nop
 8016360:	08017c09 	.word	0x08017c09
 8016364:	08017c1a 	.word	0x08017c1a

08016368 <_read_r>:
 8016368:	b538      	push	{r3, r4, r5, lr}
 801636a:	4d07      	ldr	r5, [pc, #28]	; (8016388 <_read_r+0x20>)
 801636c:	4604      	mov	r4, r0
 801636e:	4608      	mov	r0, r1
 8016370:	4611      	mov	r1, r2
 8016372:	2200      	movs	r2, #0
 8016374:	602a      	str	r2, [r5, #0]
 8016376:	461a      	mov	r2, r3
 8016378:	f7ec fdc0 	bl	8002efc <_read>
 801637c:	1c43      	adds	r3, r0, #1
 801637e:	d102      	bne.n	8016386 <_read_r+0x1e>
 8016380:	682b      	ldr	r3, [r5, #0]
 8016382:	b103      	cbz	r3, 8016386 <_read_r+0x1e>
 8016384:	6023      	str	r3, [r4, #0]
 8016386:	bd38      	pop	{r3, r4, r5, pc}
 8016388:	2000db2c 	.word	0x2000db2c

0801638c <siscanf>:
 801638c:	b40e      	push	{r1, r2, r3}
 801638e:	b510      	push	{r4, lr}
 8016390:	b09f      	sub	sp, #124	; 0x7c
 8016392:	ac21      	add	r4, sp, #132	; 0x84
 8016394:	f44f 7101 	mov.w	r1, #516	; 0x204
 8016398:	f854 2b04 	ldr.w	r2, [r4], #4
 801639c:	9201      	str	r2, [sp, #4]
 801639e:	f8ad 101c 	strh.w	r1, [sp, #28]
 80163a2:	9004      	str	r0, [sp, #16]
 80163a4:	9008      	str	r0, [sp, #32]
 80163a6:	f7e9 ff1d 	bl	80001e4 <strlen>
 80163aa:	4b0c      	ldr	r3, [pc, #48]	; (80163dc <siscanf+0x50>)
 80163ac:	9005      	str	r0, [sp, #20]
 80163ae:	9009      	str	r0, [sp, #36]	; 0x24
 80163b0:	930d      	str	r3, [sp, #52]	; 0x34
 80163b2:	480b      	ldr	r0, [pc, #44]	; (80163e0 <siscanf+0x54>)
 80163b4:	9a01      	ldr	r2, [sp, #4]
 80163b6:	6800      	ldr	r0, [r0, #0]
 80163b8:	9403      	str	r4, [sp, #12]
 80163ba:	2300      	movs	r3, #0
 80163bc:	9311      	str	r3, [sp, #68]	; 0x44
 80163be:	9316      	str	r3, [sp, #88]	; 0x58
 80163c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80163c4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80163c8:	a904      	add	r1, sp, #16
 80163ca:	4623      	mov	r3, r4
 80163cc:	f000 fa82 	bl	80168d4 <__ssvfiscanf_r>
 80163d0:	b01f      	add	sp, #124	; 0x7c
 80163d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80163d6:	b003      	add	sp, #12
 80163d8:	4770      	bx	lr
 80163da:	bf00      	nop
 80163dc:	08015103 	.word	0x08015103
 80163e0:	200002b4 	.word	0x200002b4

080163e4 <strcpy>:
 80163e4:	4603      	mov	r3, r0
 80163e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80163ea:	f803 2b01 	strb.w	r2, [r3], #1
 80163ee:	2a00      	cmp	r2, #0
 80163f0:	d1f9      	bne.n	80163e6 <strcpy+0x2>
 80163f2:	4770      	bx	lr

080163f4 <strncmp>:
 80163f4:	b510      	push	{r4, lr}
 80163f6:	b17a      	cbz	r2, 8016418 <strncmp+0x24>
 80163f8:	4603      	mov	r3, r0
 80163fa:	3901      	subs	r1, #1
 80163fc:	1884      	adds	r4, r0, r2
 80163fe:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016402:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016406:	4290      	cmp	r0, r2
 8016408:	d101      	bne.n	801640e <strncmp+0x1a>
 801640a:	42a3      	cmp	r3, r4
 801640c:	d101      	bne.n	8016412 <strncmp+0x1e>
 801640e:	1a80      	subs	r0, r0, r2
 8016410:	bd10      	pop	{r4, pc}
 8016412:	2800      	cmp	r0, #0
 8016414:	d1f3      	bne.n	80163fe <strncmp+0xa>
 8016416:	e7fa      	b.n	801640e <strncmp+0x1a>
 8016418:	4610      	mov	r0, r2
 801641a:	e7f9      	b.n	8016410 <strncmp+0x1c>

0801641c <_strtoul_l.constprop.0>:
 801641c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016420:	4f36      	ldr	r7, [pc, #216]	; (80164fc <_strtoul_l.constprop.0+0xe0>)
 8016422:	4686      	mov	lr, r0
 8016424:	460d      	mov	r5, r1
 8016426:	4628      	mov	r0, r5
 8016428:	f815 4b01 	ldrb.w	r4, [r5], #1
 801642c:	5de6      	ldrb	r6, [r4, r7]
 801642e:	f016 0608 	ands.w	r6, r6, #8
 8016432:	d1f8      	bne.n	8016426 <_strtoul_l.constprop.0+0xa>
 8016434:	2c2d      	cmp	r4, #45	; 0x2d
 8016436:	d12f      	bne.n	8016498 <_strtoul_l.constprop.0+0x7c>
 8016438:	782c      	ldrb	r4, [r5, #0]
 801643a:	2601      	movs	r6, #1
 801643c:	1c85      	adds	r5, r0, #2
 801643e:	2b00      	cmp	r3, #0
 8016440:	d057      	beq.n	80164f2 <_strtoul_l.constprop.0+0xd6>
 8016442:	2b10      	cmp	r3, #16
 8016444:	d109      	bne.n	801645a <_strtoul_l.constprop.0+0x3e>
 8016446:	2c30      	cmp	r4, #48	; 0x30
 8016448:	d107      	bne.n	801645a <_strtoul_l.constprop.0+0x3e>
 801644a:	7828      	ldrb	r0, [r5, #0]
 801644c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8016450:	2858      	cmp	r0, #88	; 0x58
 8016452:	d149      	bne.n	80164e8 <_strtoul_l.constprop.0+0xcc>
 8016454:	786c      	ldrb	r4, [r5, #1]
 8016456:	2310      	movs	r3, #16
 8016458:	3502      	adds	r5, #2
 801645a:	f04f 38ff 	mov.w	r8, #4294967295
 801645e:	2700      	movs	r7, #0
 8016460:	fbb8 f8f3 	udiv	r8, r8, r3
 8016464:	fb03 f908 	mul.w	r9, r3, r8
 8016468:	ea6f 0909 	mvn.w	r9, r9
 801646c:	4638      	mov	r0, r7
 801646e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8016472:	f1bc 0f09 	cmp.w	ip, #9
 8016476:	d814      	bhi.n	80164a2 <_strtoul_l.constprop.0+0x86>
 8016478:	4664      	mov	r4, ip
 801647a:	42a3      	cmp	r3, r4
 801647c:	dd22      	ble.n	80164c4 <_strtoul_l.constprop.0+0xa8>
 801647e:	2f00      	cmp	r7, #0
 8016480:	db1d      	blt.n	80164be <_strtoul_l.constprop.0+0xa2>
 8016482:	4580      	cmp	r8, r0
 8016484:	d31b      	bcc.n	80164be <_strtoul_l.constprop.0+0xa2>
 8016486:	d101      	bne.n	801648c <_strtoul_l.constprop.0+0x70>
 8016488:	45a1      	cmp	r9, r4
 801648a:	db18      	blt.n	80164be <_strtoul_l.constprop.0+0xa2>
 801648c:	fb00 4003 	mla	r0, r0, r3, r4
 8016490:	2701      	movs	r7, #1
 8016492:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016496:	e7ea      	b.n	801646e <_strtoul_l.constprop.0+0x52>
 8016498:	2c2b      	cmp	r4, #43	; 0x2b
 801649a:	bf04      	itt	eq
 801649c:	782c      	ldrbeq	r4, [r5, #0]
 801649e:	1c85      	addeq	r5, r0, #2
 80164a0:	e7cd      	b.n	801643e <_strtoul_l.constprop.0+0x22>
 80164a2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80164a6:	f1bc 0f19 	cmp.w	ip, #25
 80164aa:	d801      	bhi.n	80164b0 <_strtoul_l.constprop.0+0x94>
 80164ac:	3c37      	subs	r4, #55	; 0x37
 80164ae:	e7e4      	b.n	801647a <_strtoul_l.constprop.0+0x5e>
 80164b0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80164b4:	f1bc 0f19 	cmp.w	ip, #25
 80164b8:	d804      	bhi.n	80164c4 <_strtoul_l.constprop.0+0xa8>
 80164ba:	3c57      	subs	r4, #87	; 0x57
 80164bc:	e7dd      	b.n	801647a <_strtoul_l.constprop.0+0x5e>
 80164be:	f04f 37ff 	mov.w	r7, #4294967295
 80164c2:	e7e6      	b.n	8016492 <_strtoul_l.constprop.0+0x76>
 80164c4:	2f00      	cmp	r7, #0
 80164c6:	da07      	bge.n	80164d8 <_strtoul_l.constprop.0+0xbc>
 80164c8:	2322      	movs	r3, #34	; 0x22
 80164ca:	f8ce 3000 	str.w	r3, [lr]
 80164ce:	f04f 30ff 	mov.w	r0, #4294967295
 80164d2:	b932      	cbnz	r2, 80164e2 <_strtoul_l.constprop.0+0xc6>
 80164d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80164d8:	b106      	cbz	r6, 80164dc <_strtoul_l.constprop.0+0xc0>
 80164da:	4240      	negs	r0, r0
 80164dc:	2a00      	cmp	r2, #0
 80164de:	d0f9      	beq.n	80164d4 <_strtoul_l.constprop.0+0xb8>
 80164e0:	b107      	cbz	r7, 80164e4 <_strtoul_l.constprop.0+0xc8>
 80164e2:	1e69      	subs	r1, r5, #1
 80164e4:	6011      	str	r1, [r2, #0]
 80164e6:	e7f5      	b.n	80164d4 <_strtoul_l.constprop.0+0xb8>
 80164e8:	2430      	movs	r4, #48	; 0x30
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d1b5      	bne.n	801645a <_strtoul_l.constprop.0+0x3e>
 80164ee:	2308      	movs	r3, #8
 80164f0:	e7b3      	b.n	801645a <_strtoul_l.constprop.0+0x3e>
 80164f2:	2c30      	cmp	r4, #48	; 0x30
 80164f4:	d0a9      	beq.n	801644a <_strtoul_l.constprop.0+0x2e>
 80164f6:	230a      	movs	r3, #10
 80164f8:	e7af      	b.n	801645a <_strtoul_l.constprop.0+0x3e>
 80164fa:	bf00      	nop
 80164fc:	08017a95 	.word	0x08017a95

08016500 <_strtoul_r>:
 8016500:	f7ff bf8c 	b.w	801641c <_strtoul_l.constprop.0>

08016504 <strtoul>:
 8016504:	4613      	mov	r3, r2
 8016506:	460a      	mov	r2, r1
 8016508:	4601      	mov	r1, r0
 801650a:	4802      	ldr	r0, [pc, #8]	; (8016514 <strtoul+0x10>)
 801650c:	6800      	ldr	r0, [r0, #0]
 801650e:	f7ff bf85 	b.w	801641c <_strtoul_l.constprop.0>
 8016512:	bf00      	nop
 8016514:	200002b4 	.word	0x200002b4

08016518 <__swbuf_r>:
 8016518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801651a:	460e      	mov	r6, r1
 801651c:	4614      	mov	r4, r2
 801651e:	4605      	mov	r5, r0
 8016520:	b118      	cbz	r0, 801652a <__swbuf_r+0x12>
 8016522:	6983      	ldr	r3, [r0, #24]
 8016524:	b90b      	cbnz	r3, 801652a <__swbuf_r+0x12>
 8016526:	f7fe f901 	bl	801472c <__sinit>
 801652a:	4b21      	ldr	r3, [pc, #132]	; (80165b0 <__swbuf_r+0x98>)
 801652c:	429c      	cmp	r4, r3
 801652e:	d12b      	bne.n	8016588 <__swbuf_r+0x70>
 8016530:	686c      	ldr	r4, [r5, #4]
 8016532:	69a3      	ldr	r3, [r4, #24]
 8016534:	60a3      	str	r3, [r4, #8]
 8016536:	89a3      	ldrh	r3, [r4, #12]
 8016538:	071a      	lsls	r2, r3, #28
 801653a:	d52f      	bpl.n	801659c <__swbuf_r+0x84>
 801653c:	6923      	ldr	r3, [r4, #16]
 801653e:	b36b      	cbz	r3, 801659c <__swbuf_r+0x84>
 8016540:	6923      	ldr	r3, [r4, #16]
 8016542:	6820      	ldr	r0, [r4, #0]
 8016544:	1ac0      	subs	r0, r0, r3
 8016546:	6963      	ldr	r3, [r4, #20]
 8016548:	b2f6      	uxtb	r6, r6
 801654a:	4283      	cmp	r3, r0
 801654c:	4637      	mov	r7, r6
 801654e:	dc04      	bgt.n	801655a <__swbuf_r+0x42>
 8016550:	4621      	mov	r1, r4
 8016552:	4628      	mov	r0, r5
 8016554:	f7ff fa0a 	bl	801596c <_fflush_r>
 8016558:	bb30      	cbnz	r0, 80165a8 <__swbuf_r+0x90>
 801655a:	68a3      	ldr	r3, [r4, #8]
 801655c:	3b01      	subs	r3, #1
 801655e:	60a3      	str	r3, [r4, #8]
 8016560:	6823      	ldr	r3, [r4, #0]
 8016562:	1c5a      	adds	r2, r3, #1
 8016564:	6022      	str	r2, [r4, #0]
 8016566:	701e      	strb	r6, [r3, #0]
 8016568:	6963      	ldr	r3, [r4, #20]
 801656a:	3001      	adds	r0, #1
 801656c:	4283      	cmp	r3, r0
 801656e:	d004      	beq.n	801657a <__swbuf_r+0x62>
 8016570:	89a3      	ldrh	r3, [r4, #12]
 8016572:	07db      	lsls	r3, r3, #31
 8016574:	d506      	bpl.n	8016584 <__swbuf_r+0x6c>
 8016576:	2e0a      	cmp	r6, #10
 8016578:	d104      	bne.n	8016584 <__swbuf_r+0x6c>
 801657a:	4621      	mov	r1, r4
 801657c:	4628      	mov	r0, r5
 801657e:	f7ff f9f5 	bl	801596c <_fflush_r>
 8016582:	b988      	cbnz	r0, 80165a8 <__swbuf_r+0x90>
 8016584:	4638      	mov	r0, r7
 8016586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016588:	4b0a      	ldr	r3, [pc, #40]	; (80165b4 <__swbuf_r+0x9c>)
 801658a:	429c      	cmp	r4, r3
 801658c:	d101      	bne.n	8016592 <__swbuf_r+0x7a>
 801658e:	68ac      	ldr	r4, [r5, #8]
 8016590:	e7cf      	b.n	8016532 <__swbuf_r+0x1a>
 8016592:	4b09      	ldr	r3, [pc, #36]	; (80165b8 <__swbuf_r+0xa0>)
 8016594:	429c      	cmp	r4, r3
 8016596:	bf08      	it	eq
 8016598:	68ec      	ldreq	r4, [r5, #12]
 801659a:	e7ca      	b.n	8016532 <__swbuf_r+0x1a>
 801659c:	4621      	mov	r1, r4
 801659e:	4628      	mov	r0, r5
 80165a0:	f000 f80c 	bl	80165bc <__swsetup_r>
 80165a4:	2800      	cmp	r0, #0
 80165a6:	d0cb      	beq.n	8016540 <__swbuf_r+0x28>
 80165a8:	f04f 37ff 	mov.w	r7, #4294967295
 80165ac:	e7ea      	b.n	8016584 <__swbuf_r+0x6c>
 80165ae:	bf00      	nop
 80165b0:	08017904 	.word	0x08017904
 80165b4:	08017924 	.word	0x08017924
 80165b8:	080178e4 	.word	0x080178e4

080165bc <__swsetup_r>:
 80165bc:	4b32      	ldr	r3, [pc, #200]	; (8016688 <__swsetup_r+0xcc>)
 80165be:	b570      	push	{r4, r5, r6, lr}
 80165c0:	681d      	ldr	r5, [r3, #0]
 80165c2:	4606      	mov	r6, r0
 80165c4:	460c      	mov	r4, r1
 80165c6:	b125      	cbz	r5, 80165d2 <__swsetup_r+0x16>
 80165c8:	69ab      	ldr	r3, [r5, #24]
 80165ca:	b913      	cbnz	r3, 80165d2 <__swsetup_r+0x16>
 80165cc:	4628      	mov	r0, r5
 80165ce:	f7fe f8ad 	bl	801472c <__sinit>
 80165d2:	4b2e      	ldr	r3, [pc, #184]	; (801668c <__swsetup_r+0xd0>)
 80165d4:	429c      	cmp	r4, r3
 80165d6:	d10f      	bne.n	80165f8 <__swsetup_r+0x3c>
 80165d8:	686c      	ldr	r4, [r5, #4]
 80165da:	89a3      	ldrh	r3, [r4, #12]
 80165dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80165e0:	0719      	lsls	r1, r3, #28
 80165e2:	d42c      	bmi.n	801663e <__swsetup_r+0x82>
 80165e4:	06dd      	lsls	r5, r3, #27
 80165e6:	d411      	bmi.n	801660c <__swsetup_r+0x50>
 80165e8:	2309      	movs	r3, #9
 80165ea:	6033      	str	r3, [r6, #0]
 80165ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80165f0:	81a3      	strh	r3, [r4, #12]
 80165f2:	f04f 30ff 	mov.w	r0, #4294967295
 80165f6:	e03e      	b.n	8016676 <__swsetup_r+0xba>
 80165f8:	4b25      	ldr	r3, [pc, #148]	; (8016690 <__swsetup_r+0xd4>)
 80165fa:	429c      	cmp	r4, r3
 80165fc:	d101      	bne.n	8016602 <__swsetup_r+0x46>
 80165fe:	68ac      	ldr	r4, [r5, #8]
 8016600:	e7eb      	b.n	80165da <__swsetup_r+0x1e>
 8016602:	4b24      	ldr	r3, [pc, #144]	; (8016694 <__swsetup_r+0xd8>)
 8016604:	429c      	cmp	r4, r3
 8016606:	bf08      	it	eq
 8016608:	68ec      	ldreq	r4, [r5, #12]
 801660a:	e7e6      	b.n	80165da <__swsetup_r+0x1e>
 801660c:	0758      	lsls	r0, r3, #29
 801660e:	d512      	bpl.n	8016636 <__swsetup_r+0x7a>
 8016610:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016612:	b141      	cbz	r1, 8016626 <__swsetup_r+0x6a>
 8016614:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016618:	4299      	cmp	r1, r3
 801661a:	d002      	beq.n	8016622 <__swsetup_r+0x66>
 801661c:	4630      	mov	r0, r6
 801661e:	f7fe fbe5 	bl	8014dec <_free_r>
 8016622:	2300      	movs	r3, #0
 8016624:	6363      	str	r3, [r4, #52]	; 0x34
 8016626:	89a3      	ldrh	r3, [r4, #12]
 8016628:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801662c:	81a3      	strh	r3, [r4, #12]
 801662e:	2300      	movs	r3, #0
 8016630:	6063      	str	r3, [r4, #4]
 8016632:	6923      	ldr	r3, [r4, #16]
 8016634:	6023      	str	r3, [r4, #0]
 8016636:	89a3      	ldrh	r3, [r4, #12]
 8016638:	f043 0308 	orr.w	r3, r3, #8
 801663c:	81a3      	strh	r3, [r4, #12]
 801663e:	6923      	ldr	r3, [r4, #16]
 8016640:	b94b      	cbnz	r3, 8016656 <__swsetup_r+0x9a>
 8016642:	89a3      	ldrh	r3, [r4, #12]
 8016644:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801664c:	d003      	beq.n	8016656 <__swsetup_r+0x9a>
 801664e:	4621      	mov	r1, r4
 8016650:	4630      	mov	r0, r6
 8016652:	f000 f85b 	bl	801670c <__smakebuf_r>
 8016656:	89a0      	ldrh	r0, [r4, #12]
 8016658:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801665c:	f010 0301 	ands.w	r3, r0, #1
 8016660:	d00a      	beq.n	8016678 <__swsetup_r+0xbc>
 8016662:	2300      	movs	r3, #0
 8016664:	60a3      	str	r3, [r4, #8]
 8016666:	6963      	ldr	r3, [r4, #20]
 8016668:	425b      	negs	r3, r3
 801666a:	61a3      	str	r3, [r4, #24]
 801666c:	6923      	ldr	r3, [r4, #16]
 801666e:	b943      	cbnz	r3, 8016682 <__swsetup_r+0xc6>
 8016670:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016674:	d1ba      	bne.n	80165ec <__swsetup_r+0x30>
 8016676:	bd70      	pop	{r4, r5, r6, pc}
 8016678:	0781      	lsls	r1, r0, #30
 801667a:	bf58      	it	pl
 801667c:	6963      	ldrpl	r3, [r4, #20]
 801667e:	60a3      	str	r3, [r4, #8]
 8016680:	e7f4      	b.n	801666c <__swsetup_r+0xb0>
 8016682:	2000      	movs	r0, #0
 8016684:	e7f7      	b.n	8016676 <__swsetup_r+0xba>
 8016686:	bf00      	nop
 8016688:	200002b4 	.word	0x200002b4
 801668c:	08017904 	.word	0x08017904
 8016690:	08017924 	.word	0x08017924
 8016694:	080178e4 	.word	0x080178e4

08016698 <abort>:
 8016698:	b508      	push	{r3, lr}
 801669a:	2006      	movs	r0, #6
 801669c:	f000 fc44 	bl	8016f28 <raise>
 80166a0:	2001      	movs	r0, #1
 80166a2:	f7ec fc21 	bl	8002ee8 <_exit>
	...

080166a8 <__env_lock>:
 80166a8:	4801      	ldr	r0, [pc, #4]	; (80166b0 <__env_lock+0x8>)
 80166aa:	f7fe b903 	b.w	80148b4 <__retarget_lock_acquire_recursive>
 80166ae:	bf00      	nop
 80166b0:	2000db1c 	.word	0x2000db1c

080166b4 <__env_unlock>:
 80166b4:	4801      	ldr	r0, [pc, #4]	; (80166bc <__env_unlock+0x8>)
 80166b6:	f7fe b8ff 	b.w	80148b8 <__retarget_lock_release_recursive>
 80166ba:	bf00      	nop
 80166bc:	2000db1c 	.word	0x2000db1c

080166c0 <__swhatbuf_r>:
 80166c0:	b570      	push	{r4, r5, r6, lr}
 80166c2:	460e      	mov	r6, r1
 80166c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80166c8:	2900      	cmp	r1, #0
 80166ca:	b096      	sub	sp, #88	; 0x58
 80166cc:	4614      	mov	r4, r2
 80166ce:	461d      	mov	r5, r3
 80166d0:	da08      	bge.n	80166e4 <__swhatbuf_r+0x24>
 80166d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80166d6:	2200      	movs	r2, #0
 80166d8:	602a      	str	r2, [r5, #0]
 80166da:	061a      	lsls	r2, r3, #24
 80166dc:	d410      	bmi.n	8016700 <__swhatbuf_r+0x40>
 80166de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80166e2:	e00e      	b.n	8016702 <__swhatbuf_r+0x42>
 80166e4:	466a      	mov	r2, sp
 80166e6:	f000 fc75 	bl	8016fd4 <_fstat_r>
 80166ea:	2800      	cmp	r0, #0
 80166ec:	dbf1      	blt.n	80166d2 <__swhatbuf_r+0x12>
 80166ee:	9a01      	ldr	r2, [sp, #4]
 80166f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80166f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80166f8:	425a      	negs	r2, r3
 80166fa:	415a      	adcs	r2, r3
 80166fc:	602a      	str	r2, [r5, #0]
 80166fe:	e7ee      	b.n	80166de <__swhatbuf_r+0x1e>
 8016700:	2340      	movs	r3, #64	; 0x40
 8016702:	2000      	movs	r0, #0
 8016704:	6023      	str	r3, [r4, #0]
 8016706:	b016      	add	sp, #88	; 0x58
 8016708:	bd70      	pop	{r4, r5, r6, pc}
	...

0801670c <__smakebuf_r>:
 801670c:	898b      	ldrh	r3, [r1, #12]
 801670e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016710:	079d      	lsls	r5, r3, #30
 8016712:	4606      	mov	r6, r0
 8016714:	460c      	mov	r4, r1
 8016716:	d507      	bpl.n	8016728 <__smakebuf_r+0x1c>
 8016718:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801671c:	6023      	str	r3, [r4, #0]
 801671e:	6123      	str	r3, [r4, #16]
 8016720:	2301      	movs	r3, #1
 8016722:	6163      	str	r3, [r4, #20]
 8016724:	b002      	add	sp, #8
 8016726:	bd70      	pop	{r4, r5, r6, pc}
 8016728:	ab01      	add	r3, sp, #4
 801672a:	466a      	mov	r2, sp
 801672c:	f7ff ffc8 	bl	80166c0 <__swhatbuf_r>
 8016730:	9900      	ldr	r1, [sp, #0]
 8016732:	4605      	mov	r5, r0
 8016734:	4630      	mov	r0, r6
 8016736:	f7fe fbc5 	bl	8014ec4 <_malloc_r>
 801673a:	b948      	cbnz	r0, 8016750 <__smakebuf_r+0x44>
 801673c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016740:	059a      	lsls	r2, r3, #22
 8016742:	d4ef      	bmi.n	8016724 <__smakebuf_r+0x18>
 8016744:	f023 0303 	bic.w	r3, r3, #3
 8016748:	f043 0302 	orr.w	r3, r3, #2
 801674c:	81a3      	strh	r3, [r4, #12]
 801674e:	e7e3      	b.n	8016718 <__smakebuf_r+0xc>
 8016750:	4b0d      	ldr	r3, [pc, #52]	; (8016788 <__smakebuf_r+0x7c>)
 8016752:	62b3      	str	r3, [r6, #40]	; 0x28
 8016754:	89a3      	ldrh	r3, [r4, #12]
 8016756:	6020      	str	r0, [r4, #0]
 8016758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801675c:	81a3      	strh	r3, [r4, #12]
 801675e:	9b00      	ldr	r3, [sp, #0]
 8016760:	6163      	str	r3, [r4, #20]
 8016762:	9b01      	ldr	r3, [sp, #4]
 8016764:	6120      	str	r0, [r4, #16]
 8016766:	b15b      	cbz	r3, 8016780 <__smakebuf_r+0x74>
 8016768:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801676c:	4630      	mov	r0, r6
 801676e:	f000 fc43 	bl	8016ff8 <_isatty_r>
 8016772:	b128      	cbz	r0, 8016780 <__smakebuf_r+0x74>
 8016774:	89a3      	ldrh	r3, [r4, #12]
 8016776:	f023 0303 	bic.w	r3, r3, #3
 801677a:	f043 0301 	orr.w	r3, r3, #1
 801677e:	81a3      	strh	r3, [r4, #12]
 8016780:	89a0      	ldrh	r0, [r4, #12]
 8016782:	4305      	orrs	r5, r0
 8016784:	81a5      	strh	r5, [r4, #12]
 8016786:	e7cd      	b.n	8016724 <__smakebuf_r+0x18>
 8016788:	080146c5 	.word	0x080146c5

0801678c <memmove>:
 801678c:	4288      	cmp	r0, r1
 801678e:	b510      	push	{r4, lr}
 8016790:	eb01 0402 	add.w	r4, r1, r2
 8016794:	d902      	bls.n	801679c <memmove+0x10>
 8016796:	4284      	cmp	r4, r0
 8016798:	4623      	mov	r3, r4
 801679a:	d807      	bhi.n	80167ac <memmove+0x20>
 801679c:	1e43      	subs	r3, r0, #1
 801679e:	42a1      	cmp	r1, r4
 80167a0:	d008      	beq.n	80167b4 <memmove+0x28>
 80167a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80167a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80167aa:	e7f8      	b.n	801679e <memmove+0x12>
 80167ac:	4402      	add	r2, r0
 80167ae:	4601      	mov	r1, r0
 80167b0:	428a      	cmp	r2, r1
 80167b2:	d100      	bne.n	80167b6 <memmove+0x2a>
 80167b4:	bd10      	pop	{r4, pc}
 80167b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80167ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80167be:	e7f7      	b.n	80167b0 <memmove+0x24>

080167c0 <_realloc_r>:
 80167c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167c4:	4680      	mov	r8, r0
 80167c6:	4614      	mov	r4, r2
 80167c8:	460e      	mov	r6, r1
 80167ca:	b921      	cbnz	r1, 80167d6 <_realloc_r+0x16>
 80167cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80167d0:	4611      	mov	r1, r2
 80167d2:	f7fe bb77 	b.w	8014ec4 <_malloc_r>
 80167d6:	b92a      	cbnz	r2, 80167e4 <_realloc_r+0x24>
 80167d8:	f7fe fb08 	bl	8014dec <_free_r>
 80167dc:	4625      	mov	r5, r4
 80167de:	4628      	mov	r0, r5
 80167e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167e4:	f000 fc18 	bl	8017018 <_malloc_usable_size_r>
 80167e8:	4284      	cmp	r4, r0
 80167ea:	4607      	mov	r7, r0
 80167ec:	d802      	bhi.n	80167f4 <_realloc_r+0x34>
 80167ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80167f2:	d812      	bhi.n	801681a <_realloc_r+0x5a>
 80167f4:	4621      	mov	r1, r4
 80167f6:	4640      	mov	r0, r8
 80167f8:	f7fe fb64 	bl	8014ec4 <_malloc_r>
 80167fc:	4605      	mov	r5, r0
 80167fe:	2800      	cmp	r0, #0
 8016800:	d0ed      	beq.n	80167de <_realloc_r+0x1e>
 8016802:	42bc      	cmp	r4, r7
 8016804:	4622      	mov	r2, r4
 8016806:	4631      	mov	r1, r6
 8016808:	bf28      	it	cs
 801680a:	463a      	movcs	r2, r7
 801680c:	f7fe f866 	bl	80148dc <memcpy>
 8016810:	4631      	mov	r1, r6
 8016812:	4640      	mov	r0, r8
 8016814:	f7fe faea 	bl	8014dec <_free_r>
 8016818:	e7e1      	b.n	80167de <_realloc_r+0x1e>
 801681a:	4635      	mov	r5, r6
 801681c:	e7df      	b.n	80167de <_realloc_r+0x1e>

0801681e <_sungetc_r>:
 801681e:	b538      	push	{r3, r4, r5, lr}
 8016820:	1c4b      	adds	r3, r1, #1
 8016822:	4614      	mov	r4, r2
 8016824:	d103      	bne.n	801682e <_sungetc_r+0x10>
 8016826:	f04f 35ff 	mov.w	r5, #4294967295
 801682a:	4628      	mov	r0, r5
 801682c:	bd38      	pop	{r3, r4, r5, pc}
 801682e:	8993      	ldrh	r3, [r2, #12]
 8016830:	f023 0320 	bic.w	r3, r3, #32
 8016834:	8193      	strh	r3, [r2, #12]
 8016836:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016838:	6852      	ldr	r2, [r2, #4]
 801683a:	b2cd      	uxtb	r5, r1
 801683c:	b18b      	cbz	r3, 8016862 <_sungetc_r+0x44>
 801683e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016840:	4293      	cmp	r3, r2
 8016842:	dd08      	ble.n	8016856 <_sungetc_r+0x38>
 8016844:	6823      	ldr	r3, [r4, #0]
 8016846:	1e5a      	subs	r2, r3, #1
 8016848:	6022      	str	r2, [r4, #0]
 801684a:	f803 5c01 	strb.w	r5, [r3, #-1]
 801684e:	6863      	ldr	r3, [r4, #4]
 8016850:	3301      	adds	r3, #1
 8016852:	6063      	str	r3, [r4, #4]
 8016854:	e7e9      	b.n	801682a <_sungetc_r+0xc>
 8016856:	4621      	mov	r1, r4
 8016858:	f000 fb82 	bl	8016f60 <__submore>
 801685c:	2800      	cmp	r0, #0
 801685e:	d0f1      	beq.n	8016844 <_sungetc_r+0x26>
 8016860:	e7e1      	b.n	8016826 <_sungetc_r+0x8>
 8016862:	6921      	ldr	r1, [r4, #16]
 8016864:	6823      	ldr	r3, [r4, #0]
 8016866:	b151      	cbz	r1, 801687e <_sungetc_r+0x60>
 8016868:	4299      	cmp	r1, r3
 801686a:	d208      	bcs.n	801687e <_sungetc_r+0x60>
 801686c:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016870:	42a9      	cmp	r1, r5
 8016872:	d104      	bne.n	801687e <_sungetc_r+0x60>
 8016874:	3b01      	subs	r3, #1
 8016876:	3201      	adds	r2, #1
 8016878:	6023      	str	r3, [r4, #0]
 801687a:	6062      	str	r2, [r4, #4]
 801687c:	e7d5      	b.n	801682a <_sungetc_r+0xc>
 801687e:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016882:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016886:	6363      	str	r3, [r4, #52]	; 0x34
 8016888:	2303      	movs	r3, #3
 801688a:	63a3      	str	r3, [r4, #56]	; 0x38
 801688c:	4623      	mov	r3, r4
 801688e:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016892:	6023      	str	r3, [r4, #0]
 8016894:	2301      	movs	r3, #1
 8016896:	e7dc      	b.n	8016852 <_sungetc_r+0x34>

08016898 <__ssrefill_r>:
 8016898:	b510      	push	{r4, lr}
 801689a:	460c      	mov	r4, r1
 801689c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801689e:	b169      	cbz	r1, 80168bc <__ssrefill_r+0x24>
 80168a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80168a4:	4299      	cmp	r1, r3
 80168a6:	d001      	beq.n	80168ac <__ssrefill_r+0x14>
 80168a8:	f7fe faa0 	bl	8014dec <_free_r>
 80168ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80168ae:	6063      	str	r3, [r4, #4]
 80168b0:	2000      	movs	r0, #0
 80168b2:	6360      	str	r0, [r4, #52]	; 0x34
 80168b4:	b113      	cbz	r3, 80168bc <__ssrefill_r+0x24>
 80168b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80168b8:	6023      	str	r3, [r4, #0]
 80168ba:	bd10      	pop	{r4, pc}
 80168bc:	6923      	ldr	r3, [r4, #16]
 80168be:	6023      	str	r3, [r4, #0]
 80168c0:	2300      	movs	r3, #0
 80168c2:	6063      	str	r3, [r4, #4]
 80168c4:	89a3      	ldrh	r3, [r4, #12]
 80168c6:	f043 0320 	orr.w	r3, r3, #32
 80168ca:	81a3      	strh	r3, [r4, #12]
 80168cc:	f04f 30ff 	mov.w	r0, #4294967295
 80168d0:	e7f3      	b.n	80168ba <__ssrefill_r+0x22>
	...

080168d4 <__ssvfiscanf_r>:
 80168d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80168d8:	460c      	mov	r4, r1
 80168da:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80168de:	2100      	movs	r1, #0
 80168e0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80168e4:	49a6      	ldr	r1, [pc, #664]	; (8016b80 <__ssvfiscanf_r+0x2ac>)
 80168e6:	91a0      	str	r1, [sp, #640]	; 0x280
 80168e8:	f10d 0804 	add.w	r8, sp, #4
 80168ec:	49a5      	ldr	r1, [pc, #660]	; (8016b84 <__ssvfiscanf_r+0x2b0>)
 80168ee:	4fa6      	ldr	r7, [pc, #664]	; (8016b88 <__ssvfiscanf_r+0x2b4>)
 80168f0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8016b8c <__ssvfiscanf_r+0x2b8>
 80168f4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80168f8:	4606      	mov	r6, r0
 80168fa:	91a1      	str	r1, [sp, #644]	; 0x284
 80168fc:	9300      	str	r3, [sp, #0]
 80168fe:	7813      	ldrb	r3, [r2, #0]
 8016900:	2b00      	cmp	r3, #0
 8016902:	f000 815a 	beq.w	8016bba <__ssvfiscanf_r+0x2e6>
 8016906:	5dd9      	ldrb	r1, [r3, r7]
 8016908:	f011 0108 	ands.w	r1, r1, #8
 801690c:	f102 0501 	add.w	r5, r2, #1
 8016910:	d019      	beq.n	8016946 <__ssvfiscanf_r+0x72>
 8016912:	6863      	ldr	r3, [r4, #4]
 8016914:	2b00      	cmp	r3, #0
 8016916:	dd0f      	ble.n	8016938 <__ssvfiscanf_r+0x64>
 8016918:	6823      	ldr	r3, [r4, #0]
 801691a:	781a      	ldrb	r2, [r3, #0]
 801691c:	5cba      	ldrb	r2, [r7, r2]
 801691e:	0712      	lsls	r2, r2, #28
 8016920:	d401      	bmi.n	8016926 <__ssvfiscanf_r+0x52>
 8016922:	462a      	mov	r2, r5
 8016924:	e7eb      	b.n	80168fe <__ssvfiscanf_r+0x2a>
 8016926:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016928:	3201      	adds	r2, #1
 801692a:	9245      	str	r2, [sp, #276]	; 0x114
 801692c:	6862      	ldr	r2, [r4, #4]
 801692e:	3301      	adds	r3, #1
 8016930:	3a01      	subs	r2, #1
 8016932:	6062      	str	r2, [r4, #4]
 8016934:	6023      	str	r3, [r4, #0]
 8016936:	e7ec      	b.n	8016912 <__ssvfiscanf_r+0x3e>
 8016938:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801693a:	4621      	mov	r1, r4
 801693c:	4630      	mov	r0, r6
 801693e:	4798      	blx	r3
 8016940:	2800      	cmp	r0, #0
 8016942:	d0e9      	beq.n	8016918 <__ssvfiscanf_r+0x44>
 8016944:	e7ed      	b.n	8016922 <__ssvfiscanf_r+0x4e>
 8016946:	2b25      	cmp	r3, #37	; 0x25
 8016948:	d012      	beq.n	8016970 <__ssvfiscanf_r+0x9c>
 801694a:	469a      	mov	sl, r3
 801694c:	6863      	ldr	r3, [r4, #4]
 801694e:	2b00      	cmp	r3, #0
 8016950:	f340 8091 	ble.w	8016a76 <__ssvfiscanf_r+0x1a2>
 8016954:	6822      	ldr	r2, [r4, #0]
 8016956:	7813      	ldrb	r3, [r2, #0]
 8016958:	4553      	cmp	r3, sl
 801695a:	f040 812e 	bne.w	8016bba <__ssvfiscanf_r+0x2e6>
 801695e:	6863      	ldr	r3, [r4, #4]
 8016960:	3b01      	subs	r3, #1
 8016962:	6063      	str	r3, [r4, #4]
 8016964:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8016966:	3201      	adds	r2, #1
 8016968:	3301      	adds	r3, #1
 801696a:	6022      	str	r2, [r4, #0]
 801696c:	9345      	str	r3, [sp, #276]	; 0x114
 801696e:	e7d8      	b.n	8016922 <__ssvfiscanf_r+0x4e>
 8016970:	9141      	str	r1, [sp, #260]	; 0x104
 8016972:	9143      	str	r1, [sp, #268]	; 0x10c
 8016974:	7853      	ldrb	r3, [r2, #1]
 8016976:	2b2a      	cmp	r3, #42	; 0x2a
 8016978:	bf02      	ittt	eq
 801697a:	2310      	moveq	r3, #16
 801697c:	1c95      	addeq	r5, r2, #2
 801697e:	9341      	streq	r3, [sp, #260]	; 0x104
 8016980:	220a      	movs	r2, #10
 8016982:	46aa      	mov	sl, r5
 8016984:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8016988:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801698c:	2b09      	cmp	r3, #9
 801698e:	d91d      	bls.n	80169cc <__ssvfiscanf_r+0xf8>
 8016990:	487e      	ldr	r0, [pc, #504]	; (8016b8c <__ssvfiscanf_r+0x2b8>)
 8016992:	2203      	movs	r2, #3
 8016994:	f7e9 fc34 	bl	8000200 <memchr>
 8016998:	b140      	cbz	r0, 80169ac <__ssvfiscanf_r+0xd8>
 801699a:	2301      	movs	r3, #1
 801699c:	eba0 0009 	sub.w	r0, r0, r9
 80169a0:	fa03 f000 	lsl.w	r0, r3, r0
 80169a4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80169a6:	4318      	orrs	r0, r3
 80169a8:	9041      	str	r0, [sp, #260]	; 0x104
 80169aa:	4655      	mov	r5, sl
 80169ac:	f815 3b01 	ldrb.w	r3, [r5], #1
 80169b0:	2b78      	cmp	r3, #120	; 0x78
 80169b2:	d806      	bhi.n	80169c2 <__ssvfiscanf_r+0xee>
 80169b4:	2b57      	cmp	r3, #87	; 0x57
 80169b6:	d810      	bhi.n	80169da <__ssvfiscanf_r+0x106>
 80169b8:	2b25      	cmp	r3, #37	; 0x25
 80169ba:	d0c6      	beq.n	801694a <__ssvfiscanf_r+0x76>
 80169bc:	d856      	bhi.n	8016a6c <__ssvfiscanf_r+0x198>
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d064      	beq.n	8016a8c <__ssvfiscanf_r+0x1b8>
 80169c2:	2303      	movs	r3, #3
 80169c4:	9347      	str	r3, [sp, #284]	; 0x11c
 80169c6:	230a      	movs	r3, #10
 80169c8:	9342      	str	r3, [sp, #264]	; 0x108
 80169ca:	e071      	b.n	8016ab0 <__ssvfiscanf_r+0x1dc>
 80169cc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80169ce:	fb02 1103 	mla	r1, r2, r3, r1
 80169d2:	3930      	subs	r1, #48	; 0x30
 80169d4:	9143      	str	r1, [sp, #268]	; 0x10c
 80169d6:	4655      	mov	r5, sl
 80169d8:	e7d3      	b.n	8016982 <__ssvfiscanf_r+0xae>
 80169da:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80169de:	2a20      	cmp	r2, #32
 80169e0:	d8ef      	bhi.n	80169c2 <__ssvfiscanf_r+0xee>
 80169e2:	a101      	add	r1, pc, #4	; (adr r1, 80169e8 <__ssvfiscanf_r+0x114>)
 80169e4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80169e8:	08016a9b 	.word	0x08016a9b
 80169ec:	080169c3 	.word	0x080169c3
 80169f0:	080169c3 	.word	0x080169c3
 80169f4:	08016af9 	.word	0x08016af9
 80169f8:	080169c3 	.word	0x080169c3
 80169fc:	080169c3 	.word	0x080169c3
 8016a00:	080169c3 	.word	0x080169c3
 8016a04:	080169c3 	.word	0x080169c3
 8016a08:	080169c3 	.word	0x080169c3
 8016a0c:	080169c3 	.word	0x080169c3
 8016a10:	080169c3 	.word	0x080169c3
 8016a14:	08016b0f 	.word	0x08016b0f
 8016a18:	08016ae5 	.word	0x08016ae5
 8016a1c:	08016a73 	.word	0x08016a73
 8016a20:	08016a73 	.word	0x08016a73
 8016a24:	08016a73 	.word	0x08016a73
 8016a28:	080169c3 	.word	0x080169c3
 8016a2c:	08016ae9 	.word	0x08016ae9
 8016a30:	080169c3 	.word	0x080169c3
 8016a34:	080169c3 	.word	0x080169c3
 8016a38:	080169c3 	.word	0x080169c3
 8016a3c:	080169c3 	.word	0x080169c3
 8016a40:	08016b1f 	.word	0x08016b1f
 8016a44:	08016af1 	.word	0x08016af1
 8016a48:	08016a93 	.word	0x08016a93
 8016a4c:	080169c3 	.word	0x080169c3
 8016a50:	080169c3 	.word	0x080169c3
 8016a54:	08016b1b 	.word	0x08016b1b
 8016a58:	080169c3 	.word	0x080169c3
 8016a5c:	08016ae5 	.word	0x08016ae5
 8016a60:	080169c3 	.word	0x080169c3
 8016a64:	080169c3 	.word	0x080169c3
 8016a68:	08016a9b 	.word	0x08016a9b
 8016a6c:	3b45      	subs	r3, #69	; 0x45
 8016a6e:	2b02      	cmp	r3, #2
 8016a70:	d8a7      	bhi.n	80169c2 <__ssvfiscanf_r+0xee>
 8016a72:	2305      	movs	r3, #5
 8016a74:	e01b      	b.n	8016aae <__ssvfiscanf_r+0x1da>
 8016a76:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016a78:	4621      	mov	r1, r4
 8016a7a:	4630      	mov	r0, r6
 8016a7c:	4798      	blx	r3
 8016a7e:	2800      	cmp	r0, #0
 8016a80:	f43f af68 	beq.w	8016954 <__ssvfiscanf_r+0x80>
 8016a84:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016a86:	2800      	cmp	r0, #0
 8016a88:	f040 808d 	bne.w	8016ba6 <__ssvfiscanf_r+0x2d2>
 8016a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8016a90:	e08f      	b.n	8016bb2 <__ssvfiscanf_r+0x2de>
 8016a92:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016a94:	f042 0220 	orr.w	r2, r2, #32
 8016a98:	9241      	str	r2, [sp, #260]	; 0x104
 8016a9a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016aa0:	9241      	str	r2, [sp, #260]	; 0x104
 8016aa2:	2210      	movs	r2, #16
 8016aa4:	2b6f      	cmp	r3, #111	; 0x6f
 8016aa6:	9242      	str	r2, [sp, #264]	; 0x108
 8016aa8:	bf34      	ite	cc
 8016aaa:	2303      	movcc	r3, #3
 8016aac:	2304      	movcs	r3, #4
 8016aae:	9347      	str	r3, [sp, #284]	; 0x11c
 8016ab0:	6863      	ldr	r3, [r4, #4]
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	dd42      	ble.n	8016b3c <__ssvfiscanf_r+0x268>
 8016ab6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016ab8:	0659      	lsls	r1, r3, #25
 8016aba:	d404      	bmi.n	8016ac6 <__ssvfiscanf_r+0x1f2>
 8016abc:	6823      	ldr	r3, [r4, #0]
 8016abe:	781a      	ldrb	r2, [r3, #0]
 8016ac0:	5cba      	ldrb	r2, [r7, r2]
 8016ac2:	0712      	lsls	r2, r2, #28
 8016ac4:	d441      	bmi.n	8016b4a <__ssvfiscanf_r+0x276>
 8016ac6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8016ac8:	2b02      	cmp	r3, #2
 8016aca:	dc50      	bgt.n	8016b6e <__ssvfiscanf_r+0x29a>
 8016acc:	466b      	mov	r3, sp
 8016ace:	4622      	mov	r2, r4
 8016ad0:	a941      	add	r1, sp, #260	; 0x104
 8016ad2:	4630      	mov	r0, r6
 8016ad4:	f000 f876 	bl	8016bc4 <_scanf_chars>
 8016ad8:	2801      	cmp	r0, #1
 8016ada:	d06e      	beq.n	8016bba <__ssvfiscanf_r+0x2e6>
 8016adc:	2802      	cmp	r0, #2
 8016ade:	f47f af20 	bne.w	8016922 <__ssvfiscanf_r+0x4e>
 8016ae2:	e7cf      	b.n	8016a84 <__ssvfiscanf_r+0x1b0>
 8016ae4:	220a      	movs	r2, #10
 8016ae6:	e7dd      	b.n	8016aa4 <__ssvfiscanf_r+0x1d0>
 8016ae8:	2300      	movs	r3, #0
 8016aea:	9342      	str	r3, [sp, #264]	; 0x108
 8016aec:	2303      	movs	r3, #3
 8016aee:	e7de      	b.n	8016aae <__ssvfiscanf_r+0x1da>
 8016af0:	2308      	movs	r3, #8
 8016af2:	9342      	str	r3, [sp, #264]	; 0x108
 8016af4:	2304      	movs	r3, #4
 8016af6:	e7da      	b.n	8016aae <__ssvfiscanf_r+0x1da>
 8016af8:	4629      	mov	r1, r5
 8016afa:	4640      	mov	r0, r8
 8016afc:	f000 f9b4 	bl	8016e68 <__sccl>
 8016b00:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016b06:	9341      	str	r3, [sp, #260]	; 0x104
 8016b08:	4605      	mov	r5, r0
 8016b0a:	2301      	movs	r3, #1
 8016b0c:	e7cf      	b.n	8016aae <__ssvfiscanf_r+0x1da>
 8016b0e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016b14:	9341      	str	r3, [sp, #260]	; 0x104
 8016b16:	2300      	movs	r3, #0
 8016b18:	e7c9      	b.n	8016aae <__ssvfiscanf_r+0x1da>
 8016b1a:	2302      	movs	r3, #2
 8016b1c:	e7c7      	b.n	8016aae <__ssvfiscanf_r+0x1da>
 8016b1e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8016b20:	06c3      	lsls	r3, r0, #27
 8016b22:	f53f aefe 	bmi.w	8016922 <__ssvfiscanf_r+0x4e>
 8016b26:	9b00      	ldr	r3, [sp, #0]
 8016b28:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016b2a:	1d19      	adds	r1, r3, #4
 8016b2c:	9100      	str	r1, [sp, #0]
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	f010 0f01 	tst.w	r0, #1
 8016b34:	bf14      	ite	ne
 8016b36:	801a      	strhne	r2, [r3, #0]
 8016b38:	601a      	streq	r2, [r3, #0]
 8016b3a:	e6f2      	b.n	8016922 <__ssvfiscanf_r+0x4e>
 8016b3c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016b3e:	4621      	mov	r1, r4
 8016b40:	4630      	mov	r0, r6
 8016b42:	4798      	blx	r3
 8016b44:	2800      	cmp	r0, #0
 8016b46:	d0b6      	beq.n	8016ab6 <__ssvfiscanf_r+0x1e2>
 8016b48:	e79c      	b.n	8016a84 <__ssvfiscanf_r+0x1b0>
 8016b4a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016b4c:	3201      	adds	r2, #1
 8016b4e:	9245      	str	r2, [sp, #276]	; 0x114
 8016b50:	6862      	ldr	r2, [r4, #4]
 8016b52:	3a01      	subs	r2, #1
 8016b54:	2a00      	cmp	r2, #0
 8016b56:	6062      	str	r2, [r4, #4]
 8016b58:	dd02      	ble.n	8016b60 <__ssvfiscanf_r+0x28c>
 8016b5a:	3301      	adds	r3, #1
 8016b5c:	6023      	str	r3, [r4, #0]
 8016b5e:	e7ad      	b.n	8016abc <__ssvfiscanf_r+0x1e8>
 8016b60:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016b62:	4621      	mov	r1, r4
 8016b64:	4630      	mov	r0, r6
 8016b66:	4798      	blx	r3
 8016b68:	2800      	cmp	r0, #0
 8016b6a:	d0a7      	beq.n	8016abc <__ssvfiscanf_r+0x1e8>
 8016b6c:	e78a      	b.n	8016a84 <__ssvfiscanf_r+0x1b0>
 8016b6e:	2b04      	cmp	r3, #4
 8016b70:	dc0e      	bgt.n	8016b90 <__ssvfiscanf_r+0x2bc>
 8016b72:	466b      	mov	r3, sp
 8016b74:	4622      	mov	r2, r4
 8016b76:	a941      	add	r1, sp, #260	; 0x104
 8016b78:	4630      	mov	r0, r6
 8016b7a:	f000 f87d 	bl	8016c78 <_scanf_i>
 8016b7e:	e7ab      	b.n	8016ad8 <__ssvfiscanf_r+0x204>
 8016b80:	0801681f 	.word	0x0801681f
 8016b84:	08016899 	.word	0x08016899
 8016b88:	08017a95 	.word	0x08017a95
 8016b8c:	08017bfe 	.word	0x08017bfe
 8016b90:	4b0b      	ldr	r3, [pc, #44]	; (8016bc0 <__ssvfiscanf_r+0x2ec>)
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	f43f aec5 	beq.w	8016922 <__ssvfiscanf_r+0x4e>
 8016b98:	466b      	mov	r3, sp
 8016b9a:	4622      	mov	r2, r4
 8016b9c:	a941      	add	r1, sp, #260	; 0x104
 8016b9e:	4630      	mov	r0, r6
 8016ba0:	f3af 8000 	nop.w
 8016ba4:	e798      	b.n	8016ad8 <__ssvfiscanf_r+0x204>
 8016ba6:	89a3      	ldrh	r3, [r4, #12]
 8016ba8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8016bac:	bf18      	it	ne
 8016bae:	f04f 30ff 	movne.w	r0, #4294967295
 8016bb2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8016bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016bba:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016bbc:	e7f9      	b.n	8016bb2 <__ssvfiscanf_r+0x2de>
 8016bbe:	bf00      	nop
 8016bc0:	00000000 	.word	0x00000000

08016bc4 <_scanf_chars>:
 8016bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016bc8:	4615      	mov	r5, r2
 8016bca:	688a      	ldr	r2, [r1, #8]
 8016bcc:	4680      	mov	r8, r0
 8016bce:	460c      	mov	r4, r1
 8016bd0:	b932      	cbnz	r2, 8016be0 <_scanf_chars+0x1c>
 8016bd2:	698a      	ldr	r2, [r1, #24]
 8016bd4:	2a00      	cmp	r2, #0
 8016bd6:	bf0c      	ite	eq
 8016bd8:	2201      	moveq	r2, #1
 8016bda:	f04f 32ff 	movne.w	r2, #4294967295
 8016bde:	608a      	str	r2, [r1, #8]
 8016be0:	6822      	ldr	r2, [r4, #0]
 8016be2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8016c74 <_scanf_chars+0xb0>
 8016be6:	06d1      	lsls	r1, r2, #27
 8016be8:	bf5f      	itttt	pl
 8016bea:	681a      	ldrpl	r2, [r3, #0]
 8016bec:	1d11      	addpl	r1, r2, #4
 8016bee:	6019      	strpl	r1, [r3, #0]
 8016bf0:	6816      	ldrpl	r6, [r2, #0]
 8016bf2:	2700      	movs	r7, #0
 8016bf4:	69a0      	ldr	r0, [r4, #24]
 8016bf6:	b188      	cbz	r0, 8016c1c <_scanf_chars+0x58>
 8016bf8:	2801      	cmp	r0, #1
 8016bfa:	d107      	bne.n	8016c0c <_scanf_chars+0x48>
 8016bfc:	682a      	ldr	r2, [r5, #0]
 8016bfe:	7811      	ldrb	r1, [r2, #0]
 8016c00:	6962      	ldr	r2, [r4, #20]
 8016c02:	5c52      	ldrb	r2, [r2, r1]
 8016c04:	b952      	cbnz	r2, 8016c1c <_scanf_chars+0x58>
 8016c06:	2f00      	cmp	r7, #0
 8016c08:	d031      	beq.n	8016c6e <_scanf_chars+0xaa>
 8016c0a:	e022      	b.n	8016c52 <_scanf_chars+0x8e>
 8016c0c:	2802      	cmp	r0, #2
 8016c0e:	d120      	bne.n	8016c52 <_scanf_chars+0x8e>
 8016c10:	682b      	ldr	r3, [r5, #0]
 8016c12:	781b      	ldrb	r3, [r3, #0]
 8016c14:	f813 3009 	ldrb.w	r3, [r3, r9]
 8016c18:	071b      	lsls	r3, r3, #28
 8016c1a:	d41a      	bmi.n	8016c52 <_scanf_chars+0x8e>
 8016c1c:	6823      	ldr	r3, [r4, #0]
 8016c1e:	06da      	lsls	r2, r3, #27
 8016c20:	bf5e      	ittt	pl
 8016c22:	682b      	ldrpl	r3, [r5, #0]
 8016c24:	781b      	ldrbpl	r3, [r3, #0]
 8016c26:	f806 3b01 	strbpl.w	r3, [r6], #1
 8016c2a:	682a      	ldr	r2, [r5, #0]
 8016c2c:	686b      	ldr	r3, [r5, #4]
 8016c2e:	3201      	adds	r2, #1
 8016c30:	602a      	str	r2, [r5, #0]
 8016c32:	68a2      	ldr	r2, [r4, #8]
 8016c34:	3b01      	subs	r3, #1
 8016c36:	3a01      	subs	r2, #1
 8016c38:	606b      	str	r3, [r5, #4]
 8016c3a:	3701      	adds	r7, #1
 8016c3c:	60a2      	str	r2, [r4, #8]
 8016c3e:	b142      	cbz	r2, 8016c52 <_scanf_chars+0x8e>
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	dcd7      	bgt.n	8016bf4 <_scanf_chars+0x30>
 8016c44:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016c48:	4629      	mov	r1, r5
 8016c4a:	4640      	mov	r0, r8
 8016c4c:	4798      	blx	r3
 8016c4e:	2800      	cmp	r0, #0
 8016c50:	d0d0      	beq.n	8016bf4 <_scanf_chars+0x30>
 8016c52:	6823      	ldr	r3, [r4, #0]
 8016c54:	f013 0310 	ands.w	r3, r3, #16
 8016c58:	d105      	bne.n	8016c66 <_scanf_chars+0xa2>
 8016c5a:	68e2      	ldr	r2, [r4, #12]
 8016c5c:	3201      	adds	r2, #1
 8016c5e:	60e2      	str	r2, [r4, #12]
 8016c60:	69a2      	ldr	r2, [r4, #24]
 8016c62:	b102      	cbz	r2, 8016c66 <_scanf_chars+0xa2>
 8016c64:	7033      	strb	r3, [r6, #0]
 8016c66:	6923      	ldr	r3, [r4, #16]
 8016c68:	443b      	add	r3, r7
 8016c6a:	6123      	str	r3, [r4, #16]
 8016c6c:	2000      	movs	r0, #0
 8016c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c72:	bf00      	nop
 8016c74:	08017a95 	.word	0x08017a95

08016c78 <_scanf_i>:
 8016c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c7c:	4698      	mov	r8, r3
 8016c7e:	4b76      	ldr	r3, [pc, #472]	; (8016e58 <_scanf_i+0x1e0>)
 8016c80:	460c      	mov	r4, r1
 8016c82:	4682      	mov	sl, r0
 8016c84:	4616      	mov	r6, r2
 8016c86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016c8a:	b087      	sub	sp, #28
 8016c8c:	ab03      	add	r3, sp, #12
 8016c8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016c92:	4b72      	ldr	r3, [pc, #456]	; (8016e5c <_scanf_i+0x1e4>)
 8016c94:	69a1      	ldr	r1, [r4, #24]
 8016c96:	4a72      	ldr	r2, [pc, #456]	; (8016e60 <_scanf_i+0x1e8>)
 8016c98:	2903      	cmp	r1, #3
 8016c9a:	bf18      	it	ne
 8016c9c:	461a      	movne	r2, r3
 8016c9e:	68a3      	ldr	r3, [r4, #8]
 8016ca0:	9201      	str	r2, [sp, #4]
 8016ca2:	1e5a      	subs	r2, r3, #1
 8016ca4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016ca8:	bf88      	it	hi
 8016caa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016cae:	4627      	mov	r7, r4
 8016cb0:	bf82      	ittt	hi
 8016cb2:	eb03 0905 	addhi.w	r9, r3, r5
 8016cb6:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016cba:	60a3      	strhi	r3, [r4, #8]
 8016cbc:	f857 3b1c 	ldr.w	r3, [r7], #28
 8016cc0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8016cc4:	bf98      	it	ls
 8016cc6:	f04f 0900 	movls.w	r9, #0
 8016cca:	6023      	str	r3, [r4, #0]
 8016ccc:	463d      	mov	r5, r7
 8016cce:	f04f 0b00 	mov.w	fp, #0
 8016cd2:	6831      	ldr	r1, [r6, #0]
 8016cd4:	ab03      	add	r3, sp, #12
 8016cd6:	7809      	ldrb	r1, [r1, #0]
 8016cd8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8016cdc:	2202      	movs	r2, #2
 8016cde:	f7e9 fa8f 	bl	8000200 <memchr>
 8016ce2:	b328      	cbz	r0, 8016d30 <_scanf_i+0xb8>
 8016ce4:	f1bb 0f01 	cmp.w	fp, #1
 8016ce8:	d159      	bne.n	8016d9e <_scanf_i+0x126>
 8016cea:	6862      	ldr	r2, [r4, #4]
 8016cec:	b92a      	cbnz	r2, 8016cfa <_scanf_i+0x82>
 8016cee:	6822      	ldr	r2, [r4, #0]
 8016cf0:	2308      	movs	r3, #8
 8016cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016cf6:	6063      	str	r3, [r4, #4]
 8016cf8:	6022      	str	r2, [r4, #0]
 8016cfa:	6822      	ldr	r2, [r4, #0]
 8016cfc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8016d00:	6022      	str	r2, [r4, #0]
 8016d02:	68a2      	ldr	r2, [r4, #8]
 8016d04:	1e51      	subs	r1, r2, #1
 8016d06:	60a1      	str	r1, [r4, #8]
 8016d08:	b192      	cbz	r2, 8016d30 <_scanf_i+0xb8>
 8016d0a:	6832      	ldr	r2, [r6, #0]
 8016d0c:	1c51      	adds	r1, r2, #1
 8016d0e:	6031      	str	r1, [r6, #0]
 8016d10:	7812      	ldrb	r2, [r2, #0]
 8016d12:	f805 2b01 	strb.w	r2, [r5], #1
 8016d16:	6872      	ldr	r2, [r6, #4]
 8016d18:	3a01      	subs	r2, #1
 8016d1a:	2a00      	cmp	r2, #0
 8016d1c:	6072      	str	r2, [r6, #4]
 8016d1e:	dc07      	bgt.n	8016d30 <_scanf_i+0xb8>
 8016d20:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8016d24:	4631      	mov	r1, r6
 8016d26:	4650      	mov	r0, sl
 8016d28:	4790      	blx	r2
 8016d2a:	2800      	cmp	r0, #0
 8016d2c:	f040 8085 	bne.w	8016e3a <_scanf_i+0x1c2>
 8016d30:	f10b 0b01 	add.w	fp, fp, #1
 8016d34:	f1bb 0f03 	cmp.w	fp, #3
 8016d38:	d1cb      	bne.n	8016cd2 <_scanf_i+0x5a>
 8016d3a:	6863      	ldr	r3, [r4, #4]
 8016d3c:	b90b      	cbnz	r3, 8016d42 <_scanf_i+0xca>
 8016d3e:	230a      	movs	r3, #10
 8016d40:	6063      	str	r3, [r4, #4]
 8016d42:	6863      	ldr	r3, [r4, #4]
 8016d44:	4947      	ldr	r1, [pc, #284]	; (8016e64 <_scanf_i+0x1ec>)
 8016d46:	6960      	ldr	r0, [r4, #20]
 8016d48:	1ac9      	subs	r1, r1, r3
 8016d4a:	f000 f88d 	bl	8016e68 <__sccl>
 8016d4e:	f04f 0b00 	mov.w	fp, #0
 8016d52:	68a3      	ldr	r3, [r4, #8]
 8016d54:	6822      	ldr	r2, [r4, #0]
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d03d      	beq.n	8016dd6 <_scanf_i+0x15e>
 8016d5a:	6831      	ldr	r1, [r6, #0]
 8016d5c:	6960      	ldr	r0, [r4, #20]
 8016d5e:	f891 c000 	ldrb.w	ip, [r1]
 8016d62:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016d66:	2800      	cmp	r0, #0
 8016d68:	d035      	beq.n	8016dd6 <_scanf_i+0x15e>
 8016d6a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8016d6e:	d124      	bne.n	8016dba <_scanf_i+0x142>
 8016d70:	0510      	lsls	r0, r2, #20
 8016d72:	d522      	bpl.n	8016dba <_scanf_i+0x142>
 8016d74:	f10b 0b01 	add.w	fp, fp, #1
 8016d78:	f1b9 0f00 	cmp.w	r9, #0
 8016d7c:	d003      	beq.n	8016d86 <_scanf_i+0x10e>
 8016d7e:	3301      	adds	r3, #1
 8016d80:	f109 39ff 	add.w	r9, r9, #4294967295
 8016d84:	60a3      	str	r3, [r4, #8]
 8016d86:	6873      	ldr	r3, [r6, #4]
 8016d88:	3b01      	subs	r3, #1
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	6073      	str	r3, [r6, #4]
 8016d8e:	dd1b      	ble.n	8016dc8 <_scanf_i+0x150>
 8016d90:	6833      	ldr	r3, [r6, #0]
 8016d92:	3301      	adds	r3, #1
 8016d94:	6033      	str	r3, [r6, #0]
 8016d96:	68a3      	ldr	r3, [r4, #8]
 8016d98:	3b01      	subs	r3, #1
 8016d9a:	60a3      	str	r3, [r4, #8]
 8016d9c:	e7d9      	b.n	8016d52 <_scanf_i+0xda>
 8016d9e:	f1bb 0f02 	cmp.w	fp, #2
 8016da2:	d1ae      	bne.n	8016d02 <_scanf_i+0x8a>
 8016da4:	6822      	ldr	r2, [r4, #0]
 8016da6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8016daa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8016dae:	d1bf      	bne.n	8016d30 <_scanf_i+0xb8>
 8016db0:	2310      	movs	r3, #16
 8016db2:	6063      	str	r3, [r4, #4]
 8016db4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016db8:	e7a2      	b.n	8016d00 <_scanf_i+0x88>
 8016dba:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8016dbe:	6022      	str	r2, [r4, #0]
 8016dc0:	780b      	ldrb	r3, [r1, #0]
 8016dc2:	f805 3b01 	strb.w	r3, [r5], #1
 8016dc6:	e7de      	b.n	8016d86 <_scanf_i+0x10e>
 8016dc8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016dcc:	4631      	mov	r1, r6
 8016dce:	4650      	mov	r0, sl
 8016dd0:	4798      	blx	r3
 8016dd2:	2800      	cmp	r0, #0
 8016dd4:	d0df      	beq.n	8016d96 <_scanf_i+0x11e>
 8016dd6:	6823      	ldr	r3, [r4, #0]
 8016dd8:	05db      	lsls	r3, r3, #23
 8016dda:	d50d      	bpl.n	8016df8 <_scanf_i+0x180>
 8016ddc:	42bd      	cmp	r5, r7
 8016dde:	d909      	bls.n	8016df4 <_scanf_i+0x17c>
 8016de0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016de4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016de8:	4632      	mov	r2, r6
 8016dea:	4650      	mov	r0, sl
 8016dec:	4798      	blx	r3
 8016dee:	f105 39ff 	add.w	r9, r5, #4294967295
 8016df2:	464d      	mov	r5, r9
 8016df4:	42bd      	cmp	r5, r7
 8016df6:	d02d      	beq.n	8016e54 <_scanf_i+0x1dc>
 8016df8:	6822      	ldr	r2, [r4, #0]
 8016dfa:	f012 0210 	ands.w	r2, r2, #16
 8016dfe:	d113      	bne.n	8016e28 <_scanf_i+0x1b0>
 8016e00:	702a      	strb	r2, [r5, #0]
 8016e02:	6863      	ldr	r3, [r4, #4]
 8016e04:	9e01      	ldr	r6, [sp, #4]
 8016e06:	4639      	mov	r1, r7
 8016e08:	4650      	mov	r0, sl
 8016e0a:	47b0      	blx	r6
 8016e0c:	6821      	ldr	r1, [r4, #0]
 8016e0e:	f8d8 3000 	ldr.w	r3, [r8]
 8016e12:	f011 0f20 	tst.w	r1, #32
 8016e16:	d013      	beq.n	8016e40 <_scanf_i+0x1c8>
 8016e18:	1d1a      	adds	r2, r3, #4
 8016e1a:	f8c8 2000 	str.w	r2, [r8]
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	6018      	str	r0, [r3, #0]
 8016e22:	68e3      	ldr	r3, [r4, #12]
 8016e24:	3301      	adds	r3, #1
 8016e26:	60e3      	str	r3, [r4, #12]
 8016e28:	1bed      	subs	r5, r5, r7
 8016e2a:	44ab      	add	fp, r5
 8016e2c:	6925      	ldr	r5, [r4, #16]
 8016e2e:	445d      	add	r5, fp
 8016e30:	6125      	str	r5, [r4, #16]
 8016e32:	2000      	movs	r0, #0
 8016e34:	b007      	add	sp, #28
 8016e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e3a:	f04f 0b00 	mov.w	fp, #0
 8016e3e:	e7ca      	b.n	8016dd6 <_scanf_i+0x15e>
 8016e40:	1d1a      	adds	r2, r3, #4
 8016e42:	f8c8 2000 	str.w	r2, [r8]
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	f011 0f01 	tst.w	r1, #1
 8016e4c:	bf14      	ite	ne
 8016e4e:	8018      	strhne	r0, [r3, #0]
 8016e50:	6018      	streq	r0, [r3, #0]
 8016e52:	e7e6      	b.n	8016e22 <_scanf_i+0x1aa>
 8016e54:	2001      	movs	r0, #1
 8016e56:	e7ed      	b.n	8016e34 <_scanf_i+0x1bc>
 8016e58:	08017478 	.word	0x08017478
 8016e5c:	08016501 	.word	0x08016501
 8016e60:	08015329 	.word	0x08015329
 8016e64:	08017c44 	.word	0x08017c44

08016e68 <__sccl>:
 8016e68:	b570      	push	{r4, r5, r6, lr}
 8016e6a:	780b      	ldrb	r3, [r1, #0]
 8016e6c:	4604      	mov	r4, r0
 8016e6e:	2b5e      	cmp	r3, #94	; 0x5e
 8016e70:	bf0b      	itete	eq
 8016e72:	784b      	ldrbeq	r3, [r1, #1]
 8016e74:	1c48      	addne	r0, r1, #1
 8016e76:	1c88      	addeq	r0, r1, #2
 8016e78:	2200      	movne	r2, #0
 8016e7a:	bf08      	it	eq
 8016e7c:	2201      	moveq	r2, #1
 8016e7e:	1e61      	subs	r1, r4, #1
 8016e80:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8016e84:	f801 2f01 	strb.w	r2, [r1, #1]!
 8016e88:	42a9      	cmp	r1, r5
 8016e8a:	d1fb      	bne.n	8016e84 <__sccl+0x1c>
 8016e8c:	b90b      	cbnz	r3, 8016e92 <__sccl+0x2a>
 8016e8e:	3801      	subs	r0, #1
 8016e90:	bd70      	pop	{r4, r5, r6, pc}
 8016e92:	f082 0201 	eor.w	r2, r2, #1
 8016e96:	54e2      	strb	r2, [r4, r3]
 8016e98:	4605      	mov	r5, r0
 8016e9a:	4628      	mov	r0, r5
 8016e9c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8016ea0:	292d      	cmp	r1, #45	; 0x2d
 8016ea2:	d006      	beq.n	8016eb2 <__sccl+0x4a>
 8016ea4:	295d      	cmp	r1, #93	; 0x5d
 8016ea6:	d0f3      	beq.n	8016e90 <__sccl+0x28>
 8016ea8:	b909      	cbnz	r1, 8016eae <__sccl+0x46>
 8016eaa:	4628      	mov	r0, r5
 8016eac:	e7f0      	b.n	8016e90 <__sccl+0x28>
 8016eae:	460b      	mov	r3, r1
 8016eb0:	e7f1      	b.n	8016e96 <__sccl+0x2e>
 8016eb2:	786e      	ldrb	r6, [r5, #1]
 8016eb4:	2e5d      	cmp	r6, #93	; 0x5d
 8016eb6:	d0fa      	beq.n	8016eae <__sccl+0x46>
 8016eb8:	42b3      	cmp	r3, r6
 8016eba:	dcf8      	bgt.n	8016eae <__sccl+0x46>
 8016ebc:	3502      	adds	r5, #2
 8016ebe:	4619      	mov	r1, r3
 8016ec0:	3101      	adds	r1, #1
 8016ec2:	428e      	cmp	r6, r1
 8016ec4:	5462      	strb	r2, [r4, r1]
 8016ec6:	dcfb      	bgt.n	8016ec0 <__sccl+0x58>
 8016ec8:	1af1      	subs	r1, r6, r3
 8016eca:	3901      	subs	r1, #1
 8016ecc:	1c58      	adds	r0, r3, #1
 8016ece:	42b3      	cmp	r3, r6
 8016ed0:	bfa8      	it	ge
 8016ed2:	2100      	movge	r1, #0
 8016ed4:	1843      	adds	r3, r0, r1
 8016ed6:	e7e0      	b.n	8016e9a <__sccl+0x32>

08016ed8 <_raise_r>:
 8016ed8:	291f      	cmp	r1, #31
 8016eda:	b538      	push	{r3, r4, r5, lr}
 8016edc:	4604      	mov	r4, r0
 8016ede:	460d      	mov	r5, r1
 8016ee0:	d904      	bls.n	8016eec <_raise_r+0x14>
 8016ee2:	2316      	movs	r3, #22
 8016ee4:	6003      	str	r3, [r0, #0]
 8016ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8016eea:	bd38      	pop	{r3, r4, r5, pc}
 8016eec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016eee:	b112      	cbz	r2, 8016ef6 <_raise_r+0x1e>
 8016ef0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016ef4:	b94b      	cbnz	r3, 8016f0a <_raise_r+0x32>
 8016ef6:	4620      	mov	r0, r4
 8016ef8:	f000 f830 	bl	8016f5c <_getpid_r>
 8016efc:	462a      	mov	r2, r5
 8016efe:	4601      	mov	r1, r0
 8016f00:	4620      	mov	r0, r4
 8016f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016f06:	f000 b817 	b.w	8016f38 <_kill_r>
 8016f0a:	2b01      	cmp	r3, #1
 8016f0c:	d00a      	beq.n	8016f24 <_raise_r+0x4c>
 8016f0e:	1c59      	adds	r1, r3, #1
 8016f10:	d103      	bne.n	8016f1a <_raise_r+0x42>
 8016f12:	2316      	movs	r3, #22
 8016f14:	6003      	str	r3, [r0, #0]
 8016f16:	2001      	movs	r0, #1
 8016f18:	e7e7      	b.n	8016eea <_raise_r+0x12>
 8016f1a:	2400      	movs	r4, #0
 8016f1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016f20:	4628      	mov	r0, r5
 8016f22:	4798      	blx	r3
 8016f24:	2000      	movs	r0, #0
 8016f26:	e7e0      	b.n	8016eea <_raise_r+0x12>

08016f28 <raise>:
 8016f28:	4b02      	ldr	r3, [pc, #8]	; (8016f34 <raise+0xc>)
 8016f2a:	4601      	mov	r1, r0
 8016f2c:	6818      	ldr	r0, [r3, #0]
 8016f2e:	f7ff bfd3 	b.w	8016ed8 <_raise_r>
 8016f32:	bf00      	nop
 8016f34:	200002b4 	.word	0x200002b4

08016f38 <_kill_r>:
 8016f38:	b538      	push	{r3, r4, r5, lr}
 8016f3a:	4d07      	ldr	r5, [pc, #28]	; (8016f58 <_kill_r+0x20>)
 8016f3c:	2300      	movs	r3, #0
 8016f3e:	4604      	mov	r4, r0
 8016f40:	4608      	mov	r0, r1
 8016f42:	4611      	mov	r1, r2
 8016f44:	602b      	str	r3, [r5, #0]
 8016f46:	f7eb ffbf 	bl	8002ec8 <_kill>
 8016f4a:	1c43      	adds	r3, r0, #1
 8016f4c:	d102      	bne.n	8016f54 <_kill_r+0x1c>
 8016f4e:	682b      	ldr	r3, [r5, #0]
 8016f50:	b103      	cbz	r3, 8016f54 <_kill_r+0x1c>
 8016f52:	6023      	str	r3, [r4, #0]
 8016f54:	bd38      	pop	{r3, r4, r5, pc}
 8016f56:	bf00      	nop
 8016f58:	2000db2c 	.word	0x2000db2c

08016f5c <_getpid_r>:
 8016f5c:	f7eb bfac 	b.w	8002eb8 <_getpid>

08016f60 <__submore>:
 8016f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f64:	460c      	mov	r4, r1
 8016f66:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016f68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016f6c:	4299      	cmp	r1, r3
 8016f6e:	d11d      	bne.n	8016fac <__submore+0x4c>
 8016f70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016f74:	f7fd ffa6 	bl	8014ec4 <_malloc_r>
 8016f78:	b918      	cbnz	r0, 8016f82 <__submore+0x22>
 8016f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8016f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016f86:	63a3      	str	r3, [r4, #56]	; 0x38
 8016f88:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8016f8c:	6360      	str	r0, [r4, #52]	; 0x34
 8016f8e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8016f92:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8016f96:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8016f9a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016f9e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8016fa2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8016fa6:	6020      	str	r0, [r4, #0]
 8016fa8:	2000      	movs	r0, #0
 8016faa:	e7e8      	b.n	8016f7e <__submore+0x1e>
 8016fac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8016fae:	0077      	lsls	r7, r6, #1
 8016fb0:	463a      	mov	r2, r7
 8016fb2:	f7ff fc05 	bl	80167c0 <_realloc_r>
 8016fb6:	4605      	mov	r5, r0
 8016fb8:	2800      	cmp	r0, #0
 8016fba:	d0de      	beq.n	8016f7a <__submore+0x1a>
 8016fbc:	eb00 0806 	add.w	r8, r0, r6
 8016fc0:	4601      	mov	r1, r0
 8016fc2:	4632      	mov	r2, r6
 8016fc4:	4640      	mov	r0, r8
 8016fc6:	f7fd fc89 	bl	80148dc <memcpy>
 8016fca:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8016fce:	f8c4 8000 	str.w	r8, [r4]
 8016fd2:	e7e9      	b.n	8016fa8 <__submore+0x48>

08016fd4 <_fstat_r>:
 8016fd4:	b538      	push	{r3, r4, r5, lr}
 8016fd6:	4d07      	ldr	r5, [pc, #28]	; (8016ff4 <_fstat_r+0x20>)
 8016fd8:	2300      	movs	r3, #0
 8016fda:	4604      	mov	r4, r0
 8016fdc:	4608      	mov	r0, r1
 8016fde:	4611      	mov	r1, r2
 8016fe0:	602b      	str	r3, [r5, #0]
 8016fe2:	f7eb ffd0 	bl	8002f86 <_fstat>
 8016fe6:	1c43      	adds	r3, r0, #1
 8016fe8:	d102      	bne.n	8016ff0 <_fstat_r+0x1c>
 8016fea:	682b      	ldr	r3, [r5, #0]
 8016fec:	b103      	cbz	r3, 8016ff0 <_fstat_r+0x1c>
 8016fee:	6023      	str	r3, [r4, #0]
 8016ff0:	bd38      	pop	{r3, r4, r5, pc}
 8016ff2:	bf00      	nop
 8016ff4:	2000db2c 	.word	0x2000db2c

08016ff8 <_isatty_r>:
 8016ff8:	b538      	push	{r3, r4, r5, lr}
 8016ffa:	4d06      	ldr	r5, [pc, #24]	; (8017014 <_isatty_r+0x1c>)
 8016ffc:	2300      	movs	r3, #0
 8016ffe:	4604      	mov	r4, r0
 8017000:	4608      	mov	r0, r1
 8017002:	602b      	str	r3, [r5, #0]
 8017004:	f7eb ffcf 	bl	8002fa6 <_isatty>
 8017008:	1c43      	adds	r3, r0, #1
 801700a:	d102      	bne.n	8017012 <_isatty_r+0x1a>
 801700c:	682b      	ldr	r3, [r5, #0]
 801700e:	b103      	cbz	r3, 8017012 <_isatty_r+0x1a>
 8017010:	6023      	str	r3, [r4, #0]
 8017012:	bd38      	pop	{r3, r4, r5, pc}
 8017014:	2000db2c 	.word	0x2000db2c

08017018 <_malloc_usable_size_r>:
 8017018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801701c:	1f18      	subs	r0, r3, #4
 801701e:	2b00      	cmp	r3, #0
 8017020:	bfbc      	itt	lt
 8017022:	580b      	ldrlt	r3, [r1, r0]
 8017024:	18c0      	addlt	r0, r0, r3
 8017026:	4770      	bx	lr

08017028 <_init>:
 8017028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801702a:	bf00      	nop
 801702c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801702e:	bc08      	pop	{r3}
 8017030:	469e      	mov	lr, r3
 8017032:	4770      	bx	lr

08017034 <_fini>:
 8017034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017036:	bf00      	nop
 8017038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801703a:	bc08      	pop	{r3}
 801703c:	469e      	mov	lr, r3
 801703e:	4770      	bx	lr
