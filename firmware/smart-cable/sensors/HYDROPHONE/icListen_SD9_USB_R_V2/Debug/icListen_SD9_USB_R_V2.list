
icListen_SD9_USB_R_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014fdc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a08  0801516c  0801516c  0002516c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015b74  08015b74  00030314  2**0
                  CONTENTS
  4 .ARM          00000008  08015b74  08015b74  00025b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015b7c  08015b7c  00030314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015b7c  08015b7c  00025b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015b80  08015b80  00025b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000314  20000000  08015b84  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030314  2**0
                  CONTENTS
 10 .bss          0000c91c  20000314  20000314  00030314  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000cc30  2000cc30  00030314  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030314  2**0
                  CONTENTS, READONLY
 13 .debug_info   000322cc  00000000  00000000  00030344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000072e0  00000000  00000000  00062610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002490  00000000  00000000  000698f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000021c8  00000000  00000000  0006bd80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002abf7  00000000  00000000  0006df48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00032f01  00000000  00000000  00098b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dab73  00000000  00000000  000cba40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a65b3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a358  00000000  00000000  001a6604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000314 	.word	0x20000314
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015154 	.word	0x08015154

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000318 	.word	0x20000318
 80001cc:	08015154 	.word	0x08015154

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <UI_init>:
char temp_array[400];
const char* UI_commands_strings[]={"help here\r"};


void UI_init(UI_typedef* UI_obj)
{
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b096      	sub	sp, #88	; 0x58
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	UI_messages_init(UI_obj);
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f000 f967 	bl	8000880 <UI_messages_init>


	osMessageQDef(UI_events_q, 20, uint8_t);
 80005b2:	4b20      	ldr	r3, [pc, #128]	; (8000634 <UI_init+0x90>)
 80005b4:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80005b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UI_obj->events_q= osMessageCreate(osMessageQ(UI_events_q), NULL);
 80005be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005c2:	2100      	movs	r1, #0
 80005c4:	4618      	mov	r0, r3
 80005c6:	f010 fce0 	bl	8010f8a <osMessageCreate>
 80005ca:	4602      	mov	r2, r0
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	609a      	str	r2, [r3, #8]

	osMessageQDef(UI_media_rx_q, 20, uint16_t);
 80005d0:	4b19      	ldr	r3, [pc, #100]	; (8000638 <UI_init+0x94>)
 80005d2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UI_obj->media_rx_messages_q= osMessageCreate(osMessageQ(UI_media_rx_q), NULL);
 80005dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f010 fcd1 	bl	8010f8a <osMessageCreate>
 80005e8:	4602      	mov	r2, r0
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	601a      	str	r2, [r3, #0]

	osMessageQDef(UI_media_tx_q, 200, uint8_t);
 80005ee:	4b13      	ldr	r3, [pc, #76]	; (800063c <UI_init+0x98>)
 80005f0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80005f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UI_obj->media_tx_q = osMessageCreate(osMessageQ(UI_media_tx_q), NULL);
 80005fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f010 fcc2 	bl	8010f8a <osMessageCreate>
 8000606:	4602      	mov	r2, r0
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	605a      	str	r2, [r3, #4]

	osThreadDef(UI_task, UI_loop, osPriorityNormal, 0, 256);
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <UI_init+0x9c>)
 800060e:	f107 040c 	add.w	r4, r7, #12
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(UI_task), UI_obj);
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	6879      	ldr	r1, [r7, #4]
 8000626:	4618      	mov	r0, r3
 8000628:	f010 fc4f 	bl	8010eca <osThreadCreate>
}
 800062c:	bf00      	nop
 800062e:	3758      	adds	r7, #88	; 0x58
 8000630:	46bd      	mov	sp, r7
 8000632:	bdb0      	pop	{r4, r5, r7, pc}
 8000634:	08015180 	.word	0x08015180
 8000638:	08015190 	.word	0x08015190
 800063c:	080151a0 	.word	0x080151a0
 8000640:	080151b0 	.word	0x080151b0

08000644 <UI_loop>:


void UI_loop(UI_typedef* UI_obj)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	 uint16_t msg_indx;
	 for(;;)
	 {
		if(xQueueReceive(UI_obj->media_rx_messages_q,&msg_indx,osWaitForever))
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f107 010a 	add.w	r1, r7, #10
 8000654:	f04f 32ff 	mov.w	r2, #4294967295
 8000658:	4618      	mov	r0, r3
 800065a:	f011 f8fb 	bl	8011854 <xQueueReceive>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0f3      	beq.n	800064c <UI_loop+0x8>
		{   uint8_t* msg=UI_obj->rx_buffer+msg_indx;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	330e      	adds	r3, #14
 8000668:	897a      	ldrh	r2, [r7, #10]
 800066a:	4413      	add	r3, r2
 800066c:	60fb      	str	r3, [r7, #12]
			UI_parse_message(UI_obj,msg);
 800066e:	68f9      	ldr	r1, [r7, #12]
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f000 f8c7 	bl	8000804 <UI_parse_message>
		if(xQueueReceive(UI_obj->media_rx_messages_q,&msg_indx,osWaitForever))
 8000676:	e7e9      	b.n	800064c <UI_loop+0x8>

08000678 <UI_media_process_byte>:

}


void UI_media_process_byte(UI_typedef* UI_obj,uint8_t rx_byte)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
	if(UI_obj->media_status==UI_MEDIA_READY && rx_byte!=0x00)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	7b5b      	ldrb	r3, [r3, #13]
 8000688:	2b0a      	cmp	r3, #10
 800068a:	d160      	bne.n	800074e <UI_media_process_byte+0xd6>
 800068c:	78fb      	ldrb	r3, [r7, #3]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d05d      	beq.n	800074e <UI_media_process_byte+0xd6>
	{
		UI_obj->rx_buffer[UI_obj->rx_buffer_indx]=rx_byte;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000698:	b29b      	uxth	r3, r3
 800069a:	461a      	mov	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4413      	add	r3, r2
 80006a0:	78fa      	ldrb	r2, [r7, #3]
 80006a2:	739a      	strb	r2, [r3, #14]
		if(rx_byte=='\r')
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	2b0d      	cmp	r3, #13
 80006a8:	d132      	bne.n	8000710 <UI_media_process_byte+0x98>
		{
			UI_obj->rx_buffer[UI_obj->rx_buffer_indx]=0x00;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	461a      	mov	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4413      	add	r3, r2
 80006b8:	2200      	movs	r2, #0
 80006ba:	739a      	strb	r2, [r3, #14]
			osMessagePut(UI_obj->media_rx_messages_q,UI_obj->rx_buffer_new_string_indx,0);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	6818      	ldr	r0, [r3, #0]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	2200      	movs	r2, #0
 80006ca:	4619      	mov	r1, r3
 80006cc:	f010 fc86 	bl	8010fdc <osMessagePut>
			if(UI_obj->rx_buffer_indx>UI_RX_BUFFER_THR) UI_obj->rx_buffer_indx=0;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80006dc:	d907      	bls.n	80006ee <UI_media_process_byte+0x76>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 80006e6:	2200      	movs	r2, #0
 80006e8:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
 80006ec:	e008      	b.n	8000700 <UI_media_process_byte+0x88>
			else  UI_obj->rx_buffer_indx++;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	3301      	adds	r3, #1
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
			UI_obj->rx_buffer_new_string_indx=UI_obj->rx_buffer_indx;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000706:	b29a      	uxth	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
 800070e:	e008      	b.n	8000722 <UI_media_process_byte+0xaa>
		}
		else UI_obj->rx_buffer_indx++;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000716:	b29b      	uxth	r3, r3
 8000718:	3301      	adds	r3, #1
 800071a:	b29a      	uxth	r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
		if(UI_obj->rx_buffer_indx==UI_RX_BUFFER_SIZE)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000728:	b29b      	uxth	r3, r3
 800072a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800072e:	d11d      	bne.n	800076c <UI_media_process_byte+0xf4>
		{
			UI_obj->rx_buffer_indx=0;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2200      	movs	r2, #0
 8000734:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 8000738:	2200      	movs	r2, #0
 800073a:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
			UI_obj->rx_buffer_new_string_indx=UI_obj->rx_buffer_indx;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000744:	b29a      	uxth	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
		if(UI_obj->rx_buffer_indx==UI_RX_BUFFER_SIZE)
 800074c:	e00e      	b.n	800076c <UI_media_process_byte+0xf4>
		}
	}
	else
	{
		UI_obj->rx_buffer_indx=0;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2200      	movs	r2, #0
 8000752:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 8000756:	2200      	movs	r2, #0
 8000758:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
		UI_obj->rx_buffer_new_string_indx=UI_obj->rx_buffer_indx;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000762:	b29a      	uxth	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
	}
}
 800076a:	bf00      	nop
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <UI_media_get_byte>:

uint8_t UI_media_get_byte(UI_typedef* UI_obj,uint8_t* tx_byte)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
	osEvent res=osMessageGet(UI_obj->media_tx_q,0);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6859      	ldr	r1, [r3, #4]
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2200      	movs	r2, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f010 fc67 	bl	801105c <osMessageGet>
	if(res.status==osEventMessage)
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	2b10      	cmp	r3, #16
 8000792:	d105      	bne.n	80007a0 <UI_media_get_byte+0x2c>
    {
		*tx_byte=res.value.v;
 8000794:	693b      	ldr	r3, [r7, #16]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	701a      	strb	r2, [r3, #0]
		return UI_F_OK;
 800079c:	2300      	movs	r3, #0
 800079e:	e000      	b.n	80007a2 <UI_media_get_byte+0x2e>
    }
  return UI_F_ERR;
 80007a0:	2301      	movs	r3, #1
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3718      	adds	r7, #24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <UI_send_msg>:


void UI_send_msg(UI_typedef* UI_obj,uint8_t cmd_id,void* arg)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	60f8      	str	r0, [r7, #12]
 80007b2:	460b      	mov	r3, r1
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	72fb      	strb	r3, [r7, #11]
 memory_region_pointer*  ptr=arg;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	613b      	str	r3, [r7, #16]

 switch(cmd_id)
 80007bc:	7afb      	ldrb	r3, [r7, #11]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d01a      	beq.n	80007f8 <UI_send_msg+0x4e>
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d000      	beq.n	80007c8 <UI_send_msg+0x1e>
		   osMessagePut(UI_obj->media_tx_q,*((uint8_t*)(ptr->start_addr)+i),osWaitForever);
	   }
     break;
 }

}
 80007c6:	e018      	b.n	80007fa <UI_send_msg+0x50>
       for(int i=0;i<ptr->size;i++)
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	e00e      	b.n	80007ec <UI_send_msg+0x42>
		   osMessagePut(UI_obj->media_tx_q,*((uint8_t*)(ptr->start_addr)+i),osWaitForever);
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	6858      	ldr	r0, [r3, #4]
 80007d2:	693b      	ldr	r3, [r7, #16]
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	4413      	add	r3, r2
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	f04f 32ff 	mov.w	r2, #4294967295
 80007e0:	4619      	mov	r1, r3
 80007e2:	f010 fbfb 	bl	8010fdc <osMessagePut>
       for(int i=0;i<ptr->size;i++)
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	3301      	adds	r3, #1
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	685a      	ldr	r2, [r3, #4]
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d8eb      	bhi.n	80007ce <UI_send_msg+0x24>
     break;
 80007f6:	e000      	b.n	80007fa <UI_send_msg+0x50>
	 break;
 80007f8:	bf00      	nop
}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <UI_parse_message>:
	return UI_F_ERR;
}


int UI_parse_message(UI_typedef* UI_obj,uint8_t* msg)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
 char* pch;
 pch=strtok(msg," ");
 800080e:	4919      	ldr	r1, [pc, #100]	; (8000874 <UI_parse_message+0x70>)
 8000810:	6838      	ldr	r0, [r7, #0]
 8000812:	f013 fc45 	bl	80140a0 <strtok>
 8000816:	60b8      	str	r0, [r7, #8]
 for(int i=0;i<UI_MSG_NUM_OF_FUNCTIONS;i++)
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	e022      	b.n	8000864 <UI_parse_message+0x60>
 {
	  if(strcmp(pch,UI_messages_strings[i])==0)
 800081e:	4a16      	ldr	r2, [pc, #88]	; (8000878 <UI_parse_message+0x74>)
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000826:	4619      	mov	r1, r3
 8000828:	68b8      	ldr	r0, [r7, #8]
 800082a:	f7ff fcd1 	bl	80001d0 <strcmp>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d114      	bne.n	800085e <UI_parse_message+0x5a>
		{
			if(UI_functions[i](UI_obj,pch+strlen(pch)+1)==UI_F_OK) return UI_F_OK;
 8000834:	4a11      	ldr	r2, [pc, #68]	; (800087c <UI_parse_message+0x78>)
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800083c:	68b8      	ldr	r0, [r7, #8]
 800083e:	f7ff fcd1 	bl	80001e4 <strlen>
 8000842:	4603      	mov	r3, r0
 8000844:	3301      	adds	r3, #1
 8000846:	68ba      	ldr	r2, [r7, #8]
 8000848:	4413      	add	r3, r2
 800084a:	4619      	mov	r1, r3
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	47a0      	blx	r4
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d101      	bne.n	800085a <UI_parse_message+0x56>
 8000856:	2300      	movs	r3, #0
 8000858:	e008      	b.n	800086c <UI_parse_message+0x68>
      else return UI_F_ERR;
 800085a:	2301      	movs	r3, #1
 800085c:	e006      	b.n	800086c <UI_parse_message+0x68>
 for(int i=0;i<UI_MSG_NUM_OF_FUNCTIONS;i++)
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	3301      	adds	r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2b03      	cmp	r3, #3
 8000868:	ddd9      	ble.n	800081e <UI_parse_message+0x1a>
		}

 }
 return UI_F_ERR;
 800086a:	2301      	movs	r3, #1
}
 800086c:	4618      	mov	r0, r3
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	bd90      	pop	{r4, r7, pc}
 8000874:	080151cc 	.word	0x080151cc
 8000878:	20000340 	.word	0x20000340
 800087c:	20000330 	.word	0x20000330

08000880 <UI_messages_init>:

void UI_messages_init(UI_typedef* UI_obj)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	UI_functions[UI_MSG_SET] = UI_MSG_SET_f;
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <UI_messages_init+0x44>)
 800088a:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <UI_messages_init+0x48>)
 800088c:	601a      	str	r2, [r3, #0]
	UI_functions[UI_MSG_SHOW] = UI_MSG_SHOW_f;
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <UI_messages_init+0x44>)
 8000890:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <UI_messages_init+0x4c>)
 8000892:	605a      	str	r2, [r3, #4]
	UI_functions[UI_MSG_RESET] = UI_MSG_RESET_f;
 8000894:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <UI_messages_init+0x44>)
 8000896:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <UI_messages_init+0x50>)
 8000898:	609a      	str	r2, [r3, #8]
	UI_functions[UI_MSG_HELP] = UI_MSG_HELP_f;
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <UI_messages_init+0x44>)
 800089c:	4a0d      	ldr	r2, [pc, #52]	; (80008d4 <UI_messages_init+0x54>)
 800089e:	60da      	str	r2, [r3, #12]

	UI_messages_strings[UI_MSG_SET] = "set";
 80008a0:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <UI_messages_init+0x58>)
 80008a2:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <UI_messages_init+0x5c>)
 80008a4:	601a      	str	r2, [r3, #0]
	UI_messages_strings[UI_MSG_SHOW] = "show";
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <UI_messages_init+0x58>)
 80008a8:	4a0d      	ldr	r2, [pc, #52]	; (80008e0 <UI_messages_init+0x60>)
 80008aa:	605a      	str	r2, [r3, #4]
	UI_messages_strings[UI_MSG_RESET] = "reset";
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <UI_messages_init+0x58>)
 80008ae:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <UI_messages_init+0x64>)
 80008b0:	609a      	str	r2, [r3, #8]
	UI_messages_strings[UI_MSG_HELP] = "help";
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <UI_messages_init+0x58>)
 80008b4:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <UI_messages_init+0x68>)
 80008b6:	60da      	str	r2, [r3, #12]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	20000330 	.word	0x20000330
 80008c8:	08000bb9 	.word	0x08000bb9
 80008cc:	080009b5 	.word	0x080009b5
 80008d0:	0800091d 	.word	0x0800091d
 80008d4:	080008ed 	.word	0x080008ed
 80008d8:	20000340 	.word	0x20000340
 80008dc:	080151d0 	.word	0x080151d0
 80008e0:	080151d4 	.word	0x080151d4
 80008e4:	080151dc 	.word	0x080151dc
 80008e8:	080151e4 	.word	0x080151e4

080008ec <UI_MSG_HELP_f>:

int UI_MSG_HELP_f(UI_typedef* UI_obj,uint8_t* msg)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
	char * pch;
	memory_region_pointer ptr;

	pch = strtok (NULL," ");//subcomand
 80008f6:	4908      	ldr	r1, [pc, #32]	; (8000918 <UI_MSG_HELP_f+0x2c>)
 80008f8:	2000      	movs	r0, #0
 80008fa:	f013 fbd1 	bl	80140a0 <strtok>
 80008fe:	6178      	str	r0, [r7, #20]
	osMessagePut(UI_obj->events_q,UI_EVNT_HELP,1);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	2201      	movs	r2, #1
 8000906:	2103      	movs	r1, #3
 8000908:	4618      	mov	r0, r3
 800090a:	f010 fb67 	bl	8010fdc <osMessagePut>
	return UI_F_OK;
 800090e:	2300      	movs	r3, #0
}
 8000910:	4618      	mov	r0, r3
 8000912:	3718      	adds	r7, #24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	080151cc 	.word	0x080151cc

0800091c <UI_MSG_RESET_f>:

int UI_MSG_RESET_f(UI_typedef* UI_obj,uint8_t* msg)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
	char * pch;
	memory_region_pointer ptr;

	pch = strtok (NULL," ");//subcomand
 8000926:	491f      	ldr	r1, [pc, #124]	; (80009a4 <UI_MSG_RESET_f+0x88>)
 8000928:	2000      	movs	r0, #0
 800092a:	f013 fbb9 	bl	80140a0 <strtok>
 800092e:	6178      	str	r0, [r7, #20]
	if(strcmp(pch,"settings")==0){
 8000930:	491d      	ldr	r1, [pc, #116]	; (80009a8 <UI_MSG_RESET_f+0x8c>)
 8000932:	6978      	ldr	r0, [r7, #20]
 8000934:	f7ff fc4c 	bl	80001d0 <strcmp>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d126      	bne.n	800098c <UI_MSG_RESET_f+0x70>
		icListen.settings->wav_sample_rate=ICLISTEN_DEFAULT_WAV_SAMPLE_RATE;
 800093e:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <UI_MSG_RESET_f+0x90>)
 8000940:	6a1b      	ldr	r3, [r3, #32]
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]
 8000946:	2200      	movs	r2, #0
 8000948:	f042 027d 	orr.w	r2, r2, #125	; 0x7d
 800094c:	705a      	strb	r2, [r3, #1]
 800094e:	2200      	movs	r2, #0
 8000950:	709a      	strb	r2, [r3, #2]
 8000952:	2200      	movs	r2, #0
 8000954:	70da      	strb	r2, [r3, #3]
		icListen.settings->wav_sample_bit_depth=ICLISTEN_DEFAULT_WAV_SAMPLE_BIT_DEPTH;
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <UI_MSG_RESET_f+0x90>)
 8000958:	6a1b      	ldr	r3, [r3, #32]
 800095a:	2200      	movs	r2, #0
 800095c:	f042 0218 	orr.w	r2, r2, #24
 8000960:	711a      	strb	r2, [r3, #4]
 8000962:	2200      	movs	r2, #0
 8000964:	715a      	strb	r2, [r3, #5]
 8000966:	2200      	movs	r2, #0
 8000968:	719a      	strb	r2, [r3, #6]
 800096a:	2200      	movs	r2, #0
 800096c:	71da      	strb	r2, [r3, #7]
		icListen.settings->file_duration=ICLISTEN_DEFAULT_FILE_DURATION;
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <UI_MSG_RESET_f+0x90>)
 8000970:	6a1b      	ldr	r3, [r3, #32]
 8000972:	2200      	movs	r2, #0
 8000974:	f042 0201 	orr.w	r2, r2, #1
 8000978:	721a      	strb	r2, [r3, #8]
 800097a:	2200      	movs	r2, #0
 800097c:	725a      	strb	r2, [r3, #9]
 800097e:	2200      	movs	r2, #0
 8000980:	729a      	strb	r2, [r3, #10]
 8000982:	2200      	movs	r2, #0
 8000984:	72da      	strb	r2, [r3, #11]
		mcu_flash_save(&mcu_flash);
 8000986:	480a      	ldr	r0, [pc, #40]	; (80009b0 <UI_MSG_RESET_f+0x94>)
 8000988:	f001 f8dc 	bl	8001b44 <mcu_flash_save>
	}
	osMessagePut(UI_obj->events_q,UI_EVNT_RESET,1);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	2201      	movs	r2, #1
 8000992:	2102      	movs	r1, #2
 8000994:	4618      	mov	r0, r3
 8000996:	f010 fb21 	bl	8010fdc <osMessagePut>
	return UI_F_OK;
 800099a:	2300      	movs	r3, #0
}
 800099c:	4618      	mov	r0, r3
 800099e:	3718      	adds	r7, #24
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	080151cc 	.word	0x080151cc
 80009a8:	080151ec 	.word	0x080151ec
 80009ac:	2000079c 	.word	0x2000079c
 80009b0:	20000d68 	.word	0x20000d68

080009b4 <UI_MSG_SHOW_f>:

int UI_MSG_SHOW_f(UI_typedef* UI_obj,uint8_t* msg)
{
 80009b4:	b5b0      	push	{r4, r5, r7, lr}
 80009b6:	b090      	sub	sp, #64	; 0x40
 80009b8:	af06      	add	r7, sp, #24
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
	char * pch;

	pch = strtok (NULL," ");//subcomand
 80009be:	496f      	ldr	r1, [pc, #444]	; (8000b7c <UI_MSG_SHOW_f+0x1c8>)
 80009c0:	2000      	movs	r0, #0
 80009c2:	f013 fb6d 	bl	80140a0 <strtok>
 80009c6:	6238      	str	r0, [r7, #32]
	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;

	if(strcmp(pch,"sensor")==0){
 80009c8:	496d      	ldr	r1, [pc, #436]	; (8000b80 <UI_MSG_SHOW_f+0x1cc>)
 80009ca:	6a38      	ldr	r0, [r7, #32]
 80009cc:	f7ff fc00 	bl	80001d0 <strcmp>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d12e      	bne.n	8000a34 <UI_MSG_SHOW_f+0x80>
		sprintf(temp_array,"Device type: %d\rSerial num: %d\rFW version: %s\rBuild date: %s\rStatus: %d\rFile duration: %d\rWAV sample depth: %d\rWAV sample rate: %d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate);
 80009d6:	4b6b      	ldr	r3, [pc, #428]	; (8000b84 <UI_MSG_SHOW_f+0x1d0>)
 80009d8:	7f1b      	ldrb	r3, [r3, #28]
 80009da:	461c      	mov	r4, r3
 80009dc:	4b69      	ldr	r3, [pc, #420]	; (8000b84 <UI_MSG_SHOW_f+0x1d0>)
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	461d      	mov	r5, r3
 80009e2:	4b68      	ldr	r3, [pc, #416]	; (8000b84 <UI_MSG_SHOW_f+0x1d0>)
 80009e4:	7f5b      	ldrb	r3, [r3, #29]
 80009e6:	4618      	mov	r0, r3
 80009e8:	4b66      	ldr	r3, [pc, #408]	; (8000b84 <UI_MSG_SHOW_f+0x1d0>)
 80009ea:	6a1b      	ldr	r3, [r3, #32]
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	4a65      	ldr	r2, [pc, #404]	; (8000b84 <UI_MSG_SHOW_f+0x1d0>)
 80009f0:	6a12      	ldr	r2, [r2, #32]
 80009f2:	6852      	ldr	r2, [r2, #4]
 80009f4:	4963      	ldr	r1, [pc, #396]	; (8000b84 <UI_MSG_SHOW_f+0x1d0>)
 80009f6:	6a09      	ldr	r1, [r1, #32]
 80009f8:	6809      	ldr	r1, [r1, #0]
 80009fa:	9105      	str	r1, [sp, #20]
 80009fc:	9204      	str	r2, [sp, #16]
 80009fe:	9303      	str	r3, [sp, #12]
 8000a00:	9002      	str	r0, [sp, #8]
 8000a02:	4b61      	ldr	r3, [pc, #388]	; (8000b88 <UI_MSG_SHOW_f+0x1d4>)
 8000a04:	9301      	str	r3, [sp, #4]
 8000a06:	4b61      	ldr	r3, [pc, #388]	; (8000b8c <UI_MSG_SHOW_f+0x1d8>)
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	462b      	mov	r3, r5
 8000a0c:	4622      	mov	r2, r4
 8000a0e:	4960      	ldr	r1, [pc, #384]	; (8000b90 <UI_MSG_SHOW_f+0x1dc>)
 8000a10:	4860      	ldr	r0, [pc, #384]	; (8000b94 <UI_MSG_SHOW_f+0x1e0>)
 8000a12:	f013 fae1 	bl	8013fd8 <siprintf>
		temp_ptr.start_addr=temp_array;
 8000a16:	4b60      	ldr	r3, [pc, #384]	; (8000b98 <UI_MSG_SHOW_f+0x1e4>)
 8000a18:	4a5e      	ldr	r2, [pc, #376]	; (8000b94 <UI_MSG_SHOW_f+0x1e0>)
 8000a1a:	601a      	str	r2, [r3, #0]
		temp_ptr.size=strlen(temp_array);
 8000a1c:	485d      	ldr	r0, [pc, #372]	; (8000b94 <UI_MSG_SHOW_f+0x1e0>)
 8000a1e:	f7ff fbe1 	bl	80001e4 <strlen>
 8000a22:	4603      	mov	r3, r0
 8000a24:	4a5c      	ldr	r2, [pc, #368]	; (8000b98 <UI_MSG_SHOW_f+0x1e4>)
 8000a26:	6053      	str	r3, [r2, #4]
		UI_send_msg(UI_obj,UI_CMD_SEND_DATA,&temp_ptr);
 8000a28:	4a5b      	ldr	r2, [pc, #364]	; (8000b98 <UI_MSG_SHOW_f+0x1e4>)
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f7ff febc 	bl	80007aa <UI_send_msg>
 8000a32:	e096      	b.n	8000b62 <UI_MSG_SHOW_f+0x1ae>
	}
	else if(strcmp(pch,"storage")==0){
 8000a34:	4959      	ldr	r1, [pc, #356]	; (8000b9c <UI_MSG_SHOW_f+0x1e8>)
 8000a36:	6a38      	ldr	r0, [r7, #32]
 8000a38:	f7ff fbca 	bl	80001d0 <strcmp>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d146      	bne.n	8000ad0 <UI_MSG_SHOW_f+0x11c>
		temp_array[0]=0x00;
 8000a42:	4b54      	ldr	r3, [pc, #336]	; (8000b94 <UI_MSG_SHOW_f+0x1e0>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a4c:	e02e      	b.n	8000aac <UI_MSG_SHOW_f+0xf8>
		{
		 sprintf(temp_array+strlen(temp_array),"Disk: %d\rStatus: %d\rSize: %d KB\rFree space: %d KB\r",i,microsd_storage.disks[i].status,microsd_storage.disks[i].size,microsd_storage.disks[i].free_space);
 8000a4e:	4851      	ldr	r0, [pc, #324]	; (8000b94 <UI_MSG_SHOW_f+0x1e0>)
 8000a50:	f7ff fbc8 	bl	80001e4 <strlen>
 8000a54:	4603      	mov	r3, r0
 8000a56:	4a4f      	ldr	r2, [pc, #316]	; (8000b94 <UI_MSG_SHOW_f+0x1e0>)
 8000a58:	1898      	adds	r0, r3, r2
 8000a5a:	4a51      	ldr	r2, [pc, #324]	; (8000ba0 <UI_MSG_SHOW_f+0x1ec>)
 8000a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5e:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000a62:	fb01 f303 	mul.w	r3, r1, r3
 8000a66:	4413      	add	r3, r2
 8000a68:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	461d      	mov	r5, r3
 8000a70:	4a4b      	ldr	r2, [pc, #300]	; (8000ba0 <UI_MSG_SHOW_f+0x1ec>)
 8000a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a74:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000a78:	fb01 f303 	mul.w	r3, r1, r3
 8000a7c:	4413      	add	r3, r2
 8000a7e:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4946      	ldr	r1, [pc, #280]	; (8000ba0 <UI_MSG_SHOW_f+0x1ec>)
 8000a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a88:	f44f 7411 	mov.w	r4, #580	; 0x244
 8000a8c:	fb04 f202 	mul.w	r2, r4, r2
 8000a90:	440a      	add	r2, r1
 8000a92:	f502 7210 	add.w	r2, r2, #576	; 0x240
 8000a96:	6812      	ldr	r2, [r2, #0]
 8000a98:	9201      	str	r2, [sp, #4]
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	462b      	mov	r3, r5
 8000a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aa0:	4940      	ldr	r1, [pc, #256]	; (8000ba4 <UI_MSG_SHOW_f+0x1f0>)
 8000aa2:	f013 fa99 	bl	8013fd8 <siprintf>
		for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8000aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aae:	2b03      	cmp	r3, #3
 8000ab0:	ddcd      	ble.n	8000a4e <UI_MSG_SHOW_f+0x9a>
		}
		temp_ptr.start_addr=temp_array;
 8000ab2:	4b39      	ldr	r3, [pc, #228]	; (8000b98 <UI_MSG_SHOW_f+0x1e4>)
 8000ab4:	4a37      	ldr	r2, [pc, #220]	; (8000b94 <UI_MSG_SHOW_f+0x1e0>)
 8000ab6:	601a      	str	r2, [r3, #0]
		temp_ptr.size=strlen(temp_array);
 8000ab8:	4836      	ldr	r0, [pc, #216]	; (8000b94 <UI_MSG_SHOW_f+0x1e0>)
 8000aba:	f7ff fb93 	bl	80001e4 <strlen>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	4a35      	ldr	r2, [pc, #212]	; (8000b98 <UI_MSG_SHOW_f+0x1e4>)
 8000ac2:	6053      	str	r3, [r2, #4]
		UI_send_msg(UI_obj,UI_CMD_SEND_DATA,&temp_ptr);
 8000ac4:	4a34      	ldr	r2, [pc, #208]	; (8000b98 <UI_MSG_SHOW_f+0x1e4>)
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff fe6e 	bl	80007aa <UI_send_msg>
 8000ace:	e048      	b.n	8000b62 <UI_MSG_SHOW_f+0x1ae>
	}
	else if(strcmp(pch,"clock")==0){
 8000ad0:	4935      	ldr	r1, [pc, #212]	; (8000ba8 <UI_MSG_SHOW_f+0x1f4>)
 8000ad2:	6a38      	ldr	r0, [r7, #32]
 8000ad4:	f7ff fb7c 	bl	80001d0 <strcmp>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d12f      	bne.n	8000b3e <UI_MSG_SHOW_f+0x18a>
		temp_array[0]=0x00;
 8000ade:	4b2d      	ldr	r3, [pc, #180]	; (8000b94 <UI_MSG_SHOW_f+0x1e0>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
		HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	2200      	movs	r2, #0
 8000aea:	4619      	mov	r1, r3
 8000aec:	482f      	ldr	r0, [pc, #188]	; (8000bac <UI_MSG_SHOW_f+0x1f8>)
 8000aee:	f005 faa3 	bl	8006038 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8000af2:	f107 0308 	add.w	r3, r7, #8
 8000af6:	2200      	movs	r2, #0
 8000af8:	4619      	mov	r1, r3
 8000afa:	482c      	ldr	r0, [pc, #176]	; (8000bac <UI_MSG_SHOW_f+0x1f8>)
 8000afc:	f005 fb7e 	bl	80061fc <HAL_RTC_GetDate>
        sprintf(temp_array+strlen(temp_array),"Hours: %d\rMinutes: %d\rSeconds: %d\r",time.Hours,time.Minutes,time.Seconds);
 8000b00:	4824      	ldr	r0, [pc, #144]	; (8000b94 <UI_MSG_SHOW_f+0x1e0>)
 8000b02:	f7ff fb6f 	bl	80001e4 <strlen>
 8000b06:	4603      	mov	r3, r0
 8000b08:	4a22      	ldr	r2, [pc, #136]	; (8000b94 <UI_MSG_SHOW_f+0x1e0>)
 8000b0a:	1898      	adds	r0, r3, r2
 8000b0c:	7b3b      	ldrb	r3, [r7, #12]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	7b7b      	ldrb	r3, [r7, #13]
 8000b12:	4619      	mov	r1, r3
 8000b14:	7bbb      	ldrb	r3, [r7, #14]
 8000b16:	9300      	str	r3, [sp, #0]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	4925      	ldr	r1, [pc, #148]	; (8000bb0 <UI_MSG_SHOW_f+0x1fc>)
 8000b1c:	f013 fa5c 	bl	8013fd8 <siprintf>
		temp_ptr.start_addr=temp_array;
 8000b20:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <UI_MSG_SHOW_f+0x1e4>)
 8000b22:	4a1c      	ldr	r2, [pc, #112]	; (8000b94 <UI_MSG_SHOW_f+0x1e0>)
 8000b24:	601a      	str	r2, [r3, #0]
		temp_ptr.size=strlen(temp_array);
 8000b26:	481b      	ldr	r0, [pc, #108]	; (8000b94 <UI_MSG_SHOW_f+0x1e0>)
 8000b28:	f7ff fb5c 	bl	80001e4 <strlen>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	4a1a      	ldr	r2, [pc, #104]	; (8000b98 <UI_MSG_SHOW_f+0x1e4>)
 8000b30:	6053      	str	r3, [r2, #4]
		UI_send_msg(UI_obj,UI_CMD_SEND_DATA,&temp_ptr);
 8000b32:	4a19      	ldr	r2, [pc, #100]	; (8000b98 <UI_MSG_SHOW_f+0x1e4>)
 8000b34:	2101      	movs	r1, #1
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff fe37 	bl	80007aa <UI_send_msg>
 8000b3c:	e011      	b.n	8000b62 <UI_MSG_SHOW_f+0x1ae>
	}
	else{
		sprintf(temp_array,"settings\rsensor\rstorage\r");
 8000b3e:	491d      	ldr	r1, [pc, #116]	; (8000bb4 <UI_MSG_SHOW_f+0x200>)
 8000b40:	4814      	ldr	r0, [pc, #80]	; (8000b94 <UI_MSG_SHOW_f+0x1e0>)
 8000b42:	f013 fa49 	bl	8013fd8 <siprintf>
		temp_ptr.start_addr=temp_array;
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <UI_MSG_SHOW_f+0x1e4>)
 8000b48:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <UI_MSG_SHOW_f+0x1e0>)
 8000b4a:	601a      	str	r2, [r3, #0]
		temp_ptr.size=strlen(temp_array);
 8000b4c:	4811      	ldr	r0, [pc, #68]	; (8000b94 <UI_MSG_SHOW_f+0x1e0>)
 8000b4e:	f7ff fb49 	bl	80001e4 <strlen>
 8000b52:	4603      	mov	r3, r0
 8000b54:	4a10      	ldr	r2, [pc, #64]	; (8000b98 <UI_MSG_SHOW_f+0x1e4>)
 8000b56:	6053      	str	r3, [r2, #4]
		UI_send_msg(UI_obj,UI_CMD_SEND_DATA,&temp_ptr);
 8000b58:	4a0f      	ldr	r2, [pc, #60]	; (8000b98 <UI_MSG_SHOW_f+0x1e4>)
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff fe24 	bl	80007aa <UI_send_msg>
	}
	osMessagePut(UI_obj->events_q,UI_EVNT_SHOW,1);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	2201      	movs	r2, #1
 8000b68:	2101      	movs	r1, #1
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f010 fa36 	bl	8010fdc <osMessagePut>
	return UI_F_OK;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3728      	adds	r7, #40	; 0x28
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bdb0      	pop	{r4, r5, r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	080151cc 	.word	0x080151cc
 8000b80:	080151f8 	.word	0x080151f8
 8000b84:	2000079c 	.word	0x2000079c
 8000b88:	200007a6 	.word	0x200007a6
 8000b8c:	2000079e 	.word	0x2000079e
 8000b90:	08015200 	.word	0x08015200
 8000b94:	20000358 	.word	0x20000358
 8000b98:	20000350 	.word	0x20000350
 8000b9c:	08015284 	.word	0x08015284
 8000ba0:	20000d88 	.word	0x20000d88
 8000ba4:	0801528c 	.word	0x0801528c
 8000ba8:	080152c0 	.word	0x080152c0
 8000bac:	200007c8 	.word	0x200007c8
 8000bb0:	080152c8 	.word	0x080152c8
 8000bb4:	080152ec 	.word	0x080152ec

08000bb8 <UI_MSG_SET_f>:

int UI_MSG_SET_f(UI_typedef* UI_obj,uint8_t* msg)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	; 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
	pch = strtok (NULL,",");//time
	memcpy(UI_obj->time,pch,6);
    */


	pch = strtok (NULL," ");//subcomand
 8000bc2:	4935      	ldr	r1, [pc, #212]	; (8000c98 <UI_MSG_SET_f+0xe0>)
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f013 fa6b 	bl	80140a0 <strtok>
 8000bca:	6278      	str	r0, [r7, #36]	; 0x24
	if(strcmp(pch,"clock")==0){
 8000bcc:	4933      	ldr	r1, [pc, #204]	; (8000c9c <UI_MSG_SET_f+0xe4>)
 8000bce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000bd0:	f7ff fafe 	bl	80001d0 <strcmp>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d151      	bne.n	8000c7e <UI_MSG_SET_f+0xc6>
		pch = strtok (NULL,"-");//seconds
 8000bda:	4931      	ldr	r1, [pc, #196]	; (8000ca0 <UI_MSG_SET_f+0xe8>)
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f013 fa5f 	bl	80140a0 <strtok>
 8000be2:	6278      	str	r0, [r7, #36]	; 0x24
		time.Seconds=atol(pch);
 8000be4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000be6:	f012 ff4f 	bl	8013a88 <atol>
 8000bea:	4603      	mov	r3, r0
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	74bb      	strb	r3, [r7, #18]
		pch = strtok (NULL,"-");//minutes
 8000bf0:	492b      	ldr	r1, [pc, #172]	; (8000ca0 <UI_MSG_SET_f+0xe8>)
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f013 fa54 	bl	80140a0 <strtok>
 8000bf8:	6278      	str	r0, [r7, #36]	; 0x24
		time.Minutes=atol(pch);
 8000bfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000bfc:	f012 ff44 	bl	8013a88 <atol>
 8000c00:	4603      	mov	r3, r0
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	747b      	strb	r3, [r7, #17]
		pch = strtok (NULL," ");//hours
 8000c06:	4924      	ldr	r1, [pc, #144]	; (8000c98 <UI_MSG_SET_f+0xe0>)
 8000c08:	2000      	movs	r0, #0
 8000c0a:	f013 fa49 	bl	80140a0 <strtok>
 8000c0e:	6278      	str	r0, [r7, #36]	; 0x24
		time.Hours=atol(pch);
 8000c10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c12:	f012 ff39 	bl	8013a88 <atol>
 8000c16:	4603      	mov	r3, r0
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	743b      	strb	r3, [r7, #16]
		pch = strtok (NULL,"-");//day
 8000c1c:	4920      	ldr	r1, [pc, #128]	; (8000ca0 <UI_MSG_SET_f+0xe8>)
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f013 fa3e 	bl	80140a0 <strtok>
 8000c24:	6278      	str	r0, [r7, #36]	; 0x24
		date.Date=atol(pch);
 8000c26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c28:	f012 ff2e 	bl	8013a88 <atol>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	73bb      	strb	r3, [r7, #14]
		pch = strtok (NULL,"-");//month
 8000c32:	491b      	ldr	r1, [pc, #108]	; (8000ca0 <UI_MSG_SET_f+0xe8>)
 8000c34:	2000      	movs	r0, #0
 8000c36:	f013 fa33 	bl	80140a0 <strtok>
 8000c3a:	6278      	str	r0, [r7, #36]	; 0x24
		date.Month=atol(pch);
 8000c3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c3e:	f012 ff23 	bl	8013a88 <atol>
 8000c42:	4603      	mov	r3, r0
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	737b      	strb	r3, [r7, #13]
		pch = strtok (NULL," ");//year
 8000c48:	4913      	ldr	r1, [pc, #76]	; (8000c98 <UI_MSG_SET_f+0xe0>)
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f013 fa28 	bl	80140a0 <strtok>
 8000c50:	6278      	str	r0, [r7, #36]	; 0x24
		date.Year=atol(pch);
 8000c52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c54:	f012 ff18 	bl	8013a88 <atol>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	73fb      	strb	r3, [r7, #15]
		date.WeekDay=RTC_WEEKDAY_MONDAY;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	733b      	strb	r3, [r7, #12]
		HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000c62:	f107 0310 	add.w	r3, r7, #16
 8000c66:	2200      	movs	r2, #0
 8000c68:	4619      	mov	r1, r3
 8000c6a:	480e      	ldr	r0, [pc, #56]	; (8000ca4 <UI_MSG_SET_f+0xec>)
 8000c6c:	f005 f94a 	bl	8005f04 <HAL_RTC_SetTime>
		HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	2200      	movs	r2, #0
 8000c76:	4619      	mov	r1, r3
 8000c78:	480a      	ldr	r0, [pc, #40]	; (8000ca4 <UI_MSG_SET_f+0xec>)
 8000c7a:	f005 fa3b 	bl	80060f4 <HAL_RTC_SetDate>
	}

	osMessagePut(UI_obj->events_q,UI_EVNT_SET,1);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	2201      	movs	r2, #1
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f010 f9a8 	bl	8010fdc <osMessagePut>
	return UI_F_OK;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3728      	adds	r7, #40	; 0x28
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	080151cc 	.word	0x080151cc
 8000c9c:	080152c0 	.word	0x080152c0
 8000ca0:	08015308 	.word	0x08015308
 8000ca4:	200007c8 	.word	0x200007c8

08000ca8 <crc16_arc_update>:
};



uint16_t crc16_arc_update( char data, uint16_t accum )
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	460a      	mov	r2, r1
 8000cb2:	71fb      	strb	r3, [r7, #7]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	80bb      	strh	r3, [r7, #4]
  unsigned char comb_value;
  comb_value = ( accum&0x00ff ) ^ (unsigned char)data;
 8000cb8:	88bb      	ldrh	r3, [r7, #4]
 8000cba:	b25a      	sxtb	r2, r3
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	4053      	eors	r3, r2
 8000cc2:	b25b      	sxtb	r3, r3
 8000cc4:	73fb      	strb	r3, [r7, #15]
  accum = ( accum >> 8 ) ^ crc16_arc_table[ comb_value ];
 8000cc6:	88bb      	ldrh	r3, [r7, #4]
 8000cc8:	0a1b      	lsrs	r3, r3, #8
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
 8000cce:	4906      	ldr	r1, [pc, #24]	; (8000ce8 <crc16_arc_update+0x40>)
 8000cd0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000cd4:	4053      	eors	r3, r2
 8000cd6:	80bb      	strh	r3, [r7, #4]
  return ( accum );
 8000cd8:	88bb      	ldrh	r3, [r7, #4]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3714      	adds	r7, #20
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000000 	.word	0x20000000

08000cec <get_crc16_arc>:

uint16_t get_crc16_arc( uint8_t* data,uint16_t length )
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	807b      	strh	r3, [r7, #2]
  uint16_t accm=0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	81fb      	strh	r3, [r7, #14]

  for(int i=0;i<length;i++)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	e00d      	b.n	8000d1e <get_crc16_arc+0x32>
  {
    accm=crc16_arc_update(data[i], accm);
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	4413      	add	r3, r2
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	89fa      	ldrh	r2, [r7, #14]
 8000d0c:	4611      	mov	r1, r2
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff ffca 	bl	8000ca8 <crc16_arc_update>
 8000d14:	4603      	mov	r3, r0
 8000d16:	81fb      	strh	r3, [r7, #14]
  for(int i=0;i<length;i++)
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	887b      	ldrh	r3, [r7, #2]
 8000d20:	68ba      	ldr	r2, [r7, #8]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	dbed      	blt.n	8000d02 <get_crc16_arc+0x16>
  }

  return accm;
 8000d26:	89fb      	ldrh	r3, [r7, #14]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <sd_storage_disk_init>:

extern ss_pp sd_cards_ss[4];
extern UART_HandleTypeDef huart1;

F_RES sd_storage_disk_init(FATFS* fs,char* path)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
	if(f_mount(fs,path,1)==FR_OK) return F_OK;
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	6839      	ldr	r1, [r7, #0]
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f00e fc9e 	bl	800f680 <f_mount>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d101      	bne.n	8000d4e <sd_storage_disk_init+0x1e>
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e000      	b.n	8000d50 <sd_storage_disk_init+0x20>
	else return F_ERR;
 8000d4e:	2301      	movs	r3, #1
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <sd_storage_init>:
F_RES sd_storage_init(sd_storage_t* self_object)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  char tt[10];
  FRESULT res;
  DWORD fre_clust, fre_sect, tot_sect;
  FATFS*  fs;

  MX_FATFS_Init();
 8000d60:	f008 fb86 	bl	8009470 <MX_FATFS_Init>

  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000d64:	2300      	movs	r3, #0
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
 8000d68:	e078      	b.n	8000e5c <sd_storage_init+0x104>
  {
	  sprintf(tt,"%d:",i);
 8000d6a:	f107 0310 	add.w	r3, r7, #16
 8000d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d70:	493e      	ldr	r1, [pc, #248]	; (8000e6c <sd_storage_init+0x114>)
 8000d72:	4618      	mov	r0, r3
 8000d74:	f013 f930 	bl	8013fd8 <siprintf>
	  if(sd_storage_disk_init(&self_object->disks[i].fs,tt)==F_OK){
 8000d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7a:	f44f 7211 	mov.w	r2, #580	; 0x244
 8000d7e:	fb02 f303 	mul.w	r3, r2, r3
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	f107 0210 	add.w	r2, r7, #16
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ffcf 	bl	8000d30 <sd_storage_disk_init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d153      	bne.n	8000e40 <sd_storage_init+0xe8>
		  self_object->disks[i].status=DISK_PRESENT;
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000da0:	fb01 f303 	mul.w	r3, r1, r3
 8000da4:	4413      	add	r3, r2
 8000da6:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
  		  if(f_getfree(tt, &fre_clust, &fs)==FR_OK){
 8000dae:	f107 0208 	add.w	r2, r7, #8
 8000db2:	f107 010c 	add.w	r1, r7, #12
 8000db6:	f107 0310 	add.w	r3, r7, #16
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f00f fe2f 	bl	8010a1e <f_getfree>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d147      	bne.n	8000e56 <sd_storage_init+0xfe>
		    tot_sect = (self_object->disks[i].fs.n_fatent - 2) * self_object->disks[i].fs.csize;
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dca:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000dce:	fb01 f303 	mul.w	r3, r1, r3
 8000dd2:	4413      	add	r3, r2
 8000dd4:	331c      	adds	r3, #28
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	3b02      	subs	r3, #2
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dde:	f44f 7011 	mov.w	r0, #580	; 0x244
 8000de2:	fb00 f202 	mul.w	r2, r0, r2
 8000de6:	440a      	add	r2, r1
 8000de8:	320a      	adds	r2, #10
 8000dea:	8812      	ldrh	r2, [r2, #0]
 8000dec:	fb02 f303 	mul.w	r3, r2, r3
 8000df0:	623b      	str	r3, [r7, #32]
			fre_sect = fre_clust * self_object->disks[i].fs.csize;
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df6:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000dfa:	fb01 f303 	mul.w	r3, r1, r3
 8000dfe:	4413      	add	r3, r2
 8000e00:	330a      	adds	r3, #10
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	fb02 f303 	mul.w	r3, r2, r3
 8000e0c:	61fb      	str	r3, [r7, #28]
			self_object->disks[i].size=tot_sect/2;
 8000e0e:	6a3b      	ldr	r3, [r7, #32]
 8000e10:	085a      	lsrs	r2, r3, #1
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e16:	f44f 7011 	mov.w	r0, #580	; 0x244
 8000e1a:	fb00 f303 	mul.w	r3, r0, r3
 8000e1e:	440b      	add	r3, r1
 8000e20:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000e24:	601a      	str	r2, [r3, #0]
			self_object->disks[i].free_space=fre_sect/2;
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	085a      	lsrs	r2, r3, #1
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2e:	f44f 7011 	mov.w	r0, #580	; 0x244
 8000e32:	fb00 f303 	mul.w	r3, r0, r3
 8000e36:	440b      	add	r3, r1
 8000e38:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	e00a      	b.n	8000e56 <sd_storage_init+0xfe>
		  }
	  }
	  else
	  {
		 self_object->disks[i].status=DISK_ABSENT;
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e44:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000e48:	fb01 f303 	mul.w	r3, r1, r3
 8000e4c:	4413      	add	r3, r2
 8000e4e:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000e52:	2201      	movs	r2, #1
 8000e54:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e58:	3301      	adds	r3, #1
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5e:	2b03      	cmp	r3, #3
 8000e60:	dd83      	ble.n	8000d6a <sd_storage_init+0x12>
	  }
  }
  return F_OK;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3728      	adds	r7, #40	; 0x28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	0801530c 	.word	0x0801530c

08000e70 <sd_storage_link_ss>:

F_RES sd_storage_link_ss(sd_storage_t* self_object,uint8_t disk_num, uint16_t sd_ss_pin,GPIO_TypeDef* sd_ss_port)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	72fb      	strb	r3, [r7, #11]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	813b      	strh	r3, [r7, #8]
	  sd_cards_ss[disk_num].sd_ss_pin=sd_ss_pin;
 8000e82:	7afb      	ldrb	r3, [r7, #11]
 8000e84:	4908      	ldr	r1, [pc, #32]	; (8000ea8 <sd_storage_link_ss+0x38>)
 8000e86:	893a      	ldrh	r2, [r7, #8]
 8000e88:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
	  sd_cards_ss[disk_num].sd_ss_port=sd_ss_port;
 8000e8c:	7afb      	ldrb	r3, [r7, #11]
 8000e8e:	4a06      	ldr	r2, [pc, #24]	; (8000ea8 <sd_storage_link_ss+0x38>)
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	4413      	add	r3, r2
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	605a      	str	r2, [r3, #4]
	  return F_OK;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20001a64 	.word	0x20001a64

08000eac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ebc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <vApplicationGetIdleTaskMemory+0x30>)
 8000ec2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2280      	movs	r2, #128	; 0x80
 8000ec8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	200004e8 	.word	0x200004e8
 8000edc:	2000059c 	.word	0x2000059c

08000ee0 <icListen_prepare_collect_msg>:
	msg->basic_hdr.length=sizeof(icListen_setup_full_msg)-4-2;
	msg->crc=get_crc16_arc((uint8_t*)msg,sizeof(icListen_setup_full_msg)-2);
}

void icListen_prepare_collect_msg(icListen_collect_short_mask_msg* msg,uint8_t mask)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	70fb      	strb	r3, [r7, #3]
	msg->basic_hdr.sync=MSG_SYNC;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	222a      	movs	r2, #42	; 0x2a
 8000ef0:	701a      	strb	r2, [r3, #0]
    msg->basic_hdr.type=MSG_TYPE_COLLECT_DATA;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2243      	movs	r2, #67	; 0x43
 8000ef6:	705a      	strb	r2, [r3, #1]
    msg->mask_hdr.mask=mask;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	78fa      	ldrb	r2, [r7, #3]
 8000efc:	711a      	strb	r2, [r3, #4]
    msg->basic_hdr.length=1;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	f042 0201 	orr.w	r2, r2, #1
 8000f06:	709a      	strb	r2, [r3, #2]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	70da      	strb	r2, [r3, #3]
	msg->crc=get_crc16_arc((uint8_t*)msg,sizeof(icListen_collect_short_mask_msg)-2);
 8000f0c:	2105      	movs	r1, #5
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff feec 	bl	8000cec <get_crc16_arc>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f8a3 2005 	strh.w	r2, [r3, #5]
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <icListen_parse_msg>:
	msg->crc=get_crc16_arc((uint8_t*)msg,sizeof(icListen_enquire_device_msg)-2);

}

F_RES icListen_parse_msg(uint8_t* msg,icListen_object_typedef* self_object)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]

	icListen_basic_header* basic_header=(icListen_basic_header*)msg;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	617b      	str	r3, [r7, #20]
	icListen_status_basic_msg* status_msg=(icListen_status_basic_msg*)msg;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	613b      	str	r3, [r7, #16]

	uint16_t crc_msg=*(uint16_t*)(msg+basic_header->length+4);
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	885b      	ldrh	r3, [r3, #2]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	3304      	adds	r3, #4
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	81fb      	strh	r3, [r7, #14]

	if(basic_header->sync==MSG_SYNC){
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b2a      	cmp	r3, #42	; 0x2a
 8000f50:	d14a      	bne.n	8000fe8 <icListen_parse_msg+0xc0>

	switch(basic_header->type){
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	785b      	ldrb	r3, [r3, #1]
 8000f56:	2b43      	cmp	r3, #67	; 0x43
 8000f58:	d033      	beq.n	8000fc2 <icListen_parse_msg+0x9a>
 8000f5a:	2b45      	cmp	r3, #69	; 0x45
 8000f5c:	d146      	bne.n	8000fec <icListen_parse_msg+0xc4>
	     case MSG_TYPE_ENQUIRE_DEVICE:
	    	 if(crc_msg==get_crc16_arc(msg,(uint16_t)basic_header->length+4)){
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	885b      	ldrh	r3, [r3, #2]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	3304      	adds	r3, #4
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	4619      	mov	r1, r3
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff febe 	bl	8000cec <get_crc16_arc>
 8000f70:	4603      	mov	r3, r0
 8000f72:	461a      	mov	r2, r3
 8000f74:	89fb      	ldrh	r3, [r7, #14]
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d121      	bne.n	8000fbe <icListen_parse_msg+0x96>
		    	  self_object->status=status_msg->status;
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	775a      	strb	r2, [r3, #29]
		    	  memcpy(self_object->build_date,status_msg->build_date,18);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	f103 000a 	add.w	r0, r3, #10
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	330e      	adds	r3, #14
 8000f8e:	2212      	movs	r2, #18
 8000f90:	4619      	mov	r1, r3
 8000f92:	f012 feb1 	bl	8013cf8 <memcpy>
		    	  memcpy(self_object->firmware_version,status_msg->firmware_version,8);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	1c98      	adds	r0, r3, #2
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	3306      	adds	r3, #6
 8000f9e:	2208      	movs	r2, #8
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f012 fea9 	bl	8013cf8 <memcpy>
		    	  self_object->serial_number=status_msg->serial_number;
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	889b      	ldrh	r3, [r3, #4]
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	801a      	strh	r2, [r3, #0]
		    	  self_object->device_type=status_msg->device_type;
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	771a      	strb	r2, [r3, #28]
		    	  return F_OK;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	e017      	b.n	8000fee <icListen_parse_msg+0xc6>
	    	  }
	    	 else return F_ERR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e015      	b.n	8000fee <icListen_parse_msg+0xc6>
	     break;
		 case MSG_TYPE_COLLECT_DATA:
		    	  //msg_ptr2.start_addr=msg+sizeof(icListen_basic_header);
			      msg_ptr2.start_addr=msg;
 8000fc2:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <icListen_parse_msg+0xd0>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6013      	str	r3, [r2, #0]
		    	  msg_ptr2.size=basic_header->length+6;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	885b      	ldrh	r3, [r3, #2]
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	3306      	adds	r3, #6
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <icListen_parse_msg+0xd0>)
 8000fd4:	605a      	str	r2, [r3, #4]
		    	  osMessagePut(storage_wHandle,&msg_ptr2,0);
 8000fd6:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <icListen_parse_msg+0xd4>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4907      	ldr	r1, [pc, #28]	; (8000ff8 <icListen_parse_msg+0xd0>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f00f fffc 	bl	8010fdc <osMessagePut>
		    	  return F_OK;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	e002      	b.n	8000fee <icListen_parse_msg+0xc6>
		 break;
	 };
	}
	else{
		return F_ERR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e000      	b.n	8000fee <icListen_parse_msg+0xc6>
	}
	return F_ERR;
 8000fec:	2301      	movs	r3, #1
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200007c0 	.word	0x200007c0
 8000ffc:	20000948 	.word	0x20000948

08001000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001000:	b5b0      	push	{r4, r5, r7, lr}
 8001002:	b0ac      	sub	sp, #176	; 0xb0
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001006:	f001 fc3f 	bl	8002888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100a:	f000 f8c7 	bl	800119c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800100e:	f000 fa57 	bl	80014c0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001012:	f000 f989 	bl	8001328 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001016:	f000 fa09 	bl	800142c <MX_USART1_UART_Init>
  MX_DMA_Init();
 800101a:	f000 fa31 	bl	8001480 <MX_DMA_Init>
  MX_TIM2_Init();
 800101e:	f000 f9b9 	bl	8001394 <MX_TIM2_Init>
  MX_RTC_Init();
 8001022:	f000 f927 	bl	8001274 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  UI_init(&user_interface);
 8001026:	484a      	ldr	r0, [pc, #296]	; (8001150 <main+0x150>)
 8001028:	f7ff fabc 	bl	80005a4 <UI_init>
  HAL_UART_Receive_IT(&UI_UART,&(user_interface.media_rx_byte),1);
 800102c:	2201      	movs	r2, #1
 800102e:	4949      	ldr	r1, [pc, #292]	; (8001154 <main+0x154>)
 8001030:	4849      	ldr	r0, [pc, #292]	; (8001158 <main+0x158>)
 8001032:	f006 fb17 	bl	8007664 <HAL_UART_Receive_IT>

  mcu_flash_init(&mcu_flash,FLASH_SECTOR_11);
 8001036:	210b      	movs	r1, #11
 8001038:	4848      	ldr	r0, [pc, #288]	; (800115c <main+0x15c>)
 800103a:	f000 fd11 	bl	8001a60 <mcu_flash_init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of AppliEvent */
  osMessageQDef(AppliEvent, 16, uint16_t);
 800103e:	4b48      	ldr	r3, [pc, #288]	; (8001160 <main+0x160>)
 8001040:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8001044:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001046:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  AppliEventHandle = osMessageCreate(osMessageQ(AppliEvent), NULL);
 800104a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800104e:	2100      	movs	r1, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f00f ff9a 	bl	8010f8a <osMessageCreate>
 8001056:	4603      	mov	r3, r0
 8001058:	4a42      	ldr	r2, [pc, #264]	; (8001164 <main+0x164>)
 800105a:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_rx */
  osMessageQDef(USB_rx, 10, uint32_t);
 800105c:	4b42      	ldr	r3, [pc, #264]	; (8001168 <main+0x168>)
 800105e:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001062:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001064:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  USB_rxHandle = osMessageCreate(osMessageQ(USB_rx), NULL);
 8001068:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f00f ff8b 	bl	8010f8a <osMessageCreate>
 8001074:	4603      	mov	r3, r0
 8001076:	4a3d      	ldr	r2, [pc, #244]	; (800116c <main+0x16c>)
 8001078:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_tx */
  osMessageQDef(USB_tx, 10, uint32_t);
 800107a:	4b3b      	ldr	r3, [pc, #236]	; (8001168 <main+0x168>)
 800107c:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8001080:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001082:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  USB_txHandle = osMessageCreate(osMessageQ(USB_tx), NULL);
 8001086:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f00f ff7c 	bl	8010f8a <osMessageCreate>
 8001092:	4603      	mov	r3, r0
 8001094:	4a36      	ldr	r2, [pc, #216]	; (8001170 <main+0x170>)
 8001096:	6013      	str	r3, [r2, #0]

  /* definition and creation of storage_w */
  osMessageQDef(storage_w, 5, uint32_t);
 8001098:	4b36      	ldr	r3, [pc, #216]	; (8001174 <main+0x174>)
 800109a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800109e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  storage_wHandle = osMessageCreate(osMessageQ(storage_w), NULL);
 80010a4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f00f ff6d 	bl	8010f8a <osMessageCreate>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a31      	ldr	r2, [pc, #196]	; (8001178 <main+0x178>)
 80010b4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80010b6:	4b31      	ldr	r3, [pc, #196]	; (800117c <main+0x17c>)
 80010b8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80010bc:	461d      	mov	r5, r3
 80010be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80010ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f00f fefa 	bl	8010eca <osThreadCreate>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4a29      	ldr	r2, [pc, #164]	; (8001180 <main+0x180>)
 80010da:	6013      	str	r3, [r2, #0]

  /* definition and creation of storage_t */
  osThreadDef(storage_t, storage_f, osPriorityNormal, 0, 512);
 80010dc:	4b29      	ldr	r3, [pc, #164]	; (8001184 <main+0x184>)
 80010de:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80010e2:	461d      	mov	r5, r3
 80010e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  storage_tHandle = osThreadCreate(osThread(storage_t), NULL);
 80010f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f00f fee7 	bl	8010eca <osThreadCreate>
 80010fc:	4603      	mov	r3, r0
 80010fe:	4a22      	ldr	r2, [pc, #136]	; (8001188 <main+0x188>)
 8001100:	6013      	str	r3, [r2, #0]

  /* definition and creation of main_t */
  osThreadDef(main_t, main_f, osPriorityNormal, 0, 512);
 8001102:	4b22      	ldr	r3, [pc, #136]	; (800118c <main+0x18c>)
 8001104:	f107 041c 	add.w	r4, r7, #28
 8001108:	461d      	mov	r5, r3
 800110a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800110c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800110e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001112:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  main_tHandle = osThreadCreate(osThread(main_t), NULL);
 8001116:	f107 031c 	add.w	r3, r7, #28
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f00f fed4 	bl	8010eca <osThreadCreate>
 8001122:	4603      	mov	r3, r0
 8001124:	4a1a      	ldr	r2, [pc, #104]	; (8001190 <main+0x190>)
 8001126:	6013      	str	r3, [r2, #0]

  /* definition and creation of uart_t */
  osThreadDef(uart_t, uart_f, osPriorityNormal, 0, 256);
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <main+0x194>)
 800112a:	463c      	mov	r4, r7
 800112c:	461d      	mov	r5, r3
 800112e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001130:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001132:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001136:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart_tHandle = osThreadCreate(osThread(uart_t), NULL);
 800113a:	463b      	mov	r3, r7
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f00f fec3 	bl	8010eca <osThreadCreate>
 8001144:	4603      	mov	r3, r0
 8001146:	4a14      	ldr	r2, [pc, #80]	; (8001198 <main+0x198>)
 8001148:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800114a:	f00f feb7 	bl	8010ebc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800114e:	e7fe      	b.n	800114e <main+0x14e>
 8001150:	20000954 	.word	0x20000954
 8001154:	20000960 	.word	0x20000960
 8001158:	200008e8 	.word	0x200008e8
 800115c:	20000d68 	.word	0x20000d68
 8001160:	08015338 	.word	0x08015338
 8001164:	2000093c 	.word	0x2000093c
 8001168:	08015348 	.word	0x08015348
 800116c:	20000940 	.word	0x20000940
 8001170:	20000944 	.word	0x20000944
 8001174:	08015358 	.word	0x08015358
 8001178:	20000948 	.word	0x20000948
 800117c:	08015368 	.word	0x08015368
 8001180:	2000092c 	.word	0x2000092c
 8001184:	08015384 	.word	0x08015384
 8001188:	20000930 	.word	0x20000930
 800118c:	080153a0 	.word	0x080153a0
 8001190:	20000934 	.word	0x20000934
 8001194:	080153bc 	.word	0x080153bc
 8001198:	20000938 	.word	0x20000938

0800119c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b094      	sub	sp, #80	; 0x50
 80011a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a2:	f107 0320 	add.w	r3, r7, #32
 80011a6:	2230      	movs	r2, #48	; 0x30
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f012 fdb2 	bl	8013d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	4b29      	ldr	r3, [pc, #164]	; (800126c <SystemClock_Config+0xd0>)
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	4a28      	ldr	r2, [pc, #160]	; (800126c <SystemClock_Config+0xd0>)
 80011ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ce:	6413      	str	r3, [r2, #64]	; 0x40
 80011d0:	4b26      	ldr	r3, [pc, #152]	; (800126c <SystemClock_Config+0xd0>)
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	4b23      	ldr	r3, [pc, #140]	; (8001270 <SystemClock_Config+0xd4>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a22      	ldr	r2, [pc, #136]	; (8001270 <SystemClock_Config+0xd4>)
 80011e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ea:	6013      	str	r3, [r2, #0]
 80011ec:	4b20      	ldr	r3, [pc, #128]	; (8001270 <SystemClock_Config+0xd4>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80011f8:	2305      	movs	r3, #5
 80011fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001202:	2301      	movs	r3, #1
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001206:	2302      	movs	r3, #2
 8001208:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800120a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800120e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001210:	230f      	movs	r3, #15
 8001212:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001214:	2390      	movs	r3, #144	; 0x90
 8001216:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001218:	2302      	movs	r3, #2
 800121a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800121c:	2305      	movs	r3, #5
 800121e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001220:	f107 0320 	add.w	r3, r7, #32
 8001224:	4618      	mov	r0, r3
 8001226:	f004 f88b 	bl	8005340 <HAL_RCC_OscConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001230:	f000 fc10 	bl	8001a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001234:	230f      	movs	r3, #15
 8001236:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001238:	2302      	movs	r3, #2
 800123a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001240:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001244:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	2103      	movs	r1, #3
 8001252:	4618      	mov	r0, r3
 8001254:	f004 faec 	bl	8005830 <HAL_RCC_ClockConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800125e:	f000 fbf9 	bl	8001a54 <Error_Handler>
  }
}
 8001262:	bf00      	nop
 8001264:	3750      	adds	r7, #80	; 0x50
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800
 8001270:	40007000 	.word	0x40007000

08001274 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001288:	2300      	movs	r3, #0
 800128a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800128c:	4b24      	ldr	r3, [pc, #144]	; (8001320 <MX_RTC_Init+0xac>)
 800128e:	4a25      	ldr	r2, [pc, #148]	; (8001324 <MX_RTC_Init+0xb0>)
 8001290:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001292:	4b23      	ldr	r3, [pc, #140]	; (8001320 <MX_RTC_Init+0xac>)
 8001294:	2200      	movs	r2, #0
 8001296:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001298:	4b21      	ldr	r3, [pc, #132]	; (8001320 <MX_RTC_Init+0xac>)
 800129a:	227f      	movs	r2, #127	; 0x7f
 800129c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800129e:	4b20      	ldr	r3, [pc, #128]	; (8001320 <MX_RTC_Init+0xac>)
 80012a0:	22ff      	movs	r2, #255	; 0xff
 80012a2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012a4:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <MX_RTC_Init+0xac>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012aa:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <MX_RTC_Init+0xac>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012b0:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <MX_RTC_Init+0xac>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012b6:	481a      	ldr	r0, [pc, #104]	; (8001320 <MX_RTC_Init+0xac>)
 80012b8:	f004 fdae 	bl	8005e18 <HAL_RTC_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80012c2:	f000 fbc7 	bl	8001a54 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2200      	movs	r2, #0
 80012de:	4619      	mov	r1, r3
 80012e0:	480f      	ldr	r0, [pc, #60]	; (8001320 <MX_RTC_Init+0xac>)
 80012e2:	f004 fe0f 	bl	8005f04 <HAL_RTC_SetTime>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80012ec:	f000 fbb2 	bl	8001a54 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80012f0:	2301      	movs	r3, #1
 80012f2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80012f4:	2301      	movs	r3, #1
 80012f6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80012f8:	2301      	movs	r3, #1
 80012fa:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001300:	463b      	mov	r3, r7
 8001302:	2200      	movs	r2, #0
 8001304:	4619      	mov	r1, r3
 8001306:	4806      	ldr	r0, [pc, #24]	; (8001320 <MX_RTC_Init+0xac>)
 8001308:	f004 fef4 	bl	80060f4 <HAL_RTC_SetDate>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001312:	f000 fb9f 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200007c8 	.word	0x200007c8
 8001324:	40002800 	.word	0x40002800

08001328 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800132c:	4b17      	ldr	r3, [pc, #92]	; (800138c <MX_SPI1_Init+0x64>)
 800132e:	4a18      	ldr	r2, [pc, #96]	; (8001390 <MX_SPI1_Init+0x68>)
 8001330:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001332:	4b16      	ldr	r3, [pc, #88]	; (800138c <MX_SPI1_Init+0x64>)
 8001334:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001338:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800133a:	4b14      	ldr	r3, [pc, #80]	; (800138c <MX_SPI1_Init+0x64>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <MX_SPI1_Init+0x64>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <MX_SPI1_Init+0x64>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <MX_SPI1_Init+0x64>)
 800134e:	2200      	movs	r2, #0
 8001350:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <MX_SPI1_Init+0x64>)
 8001354:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001358:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <MX_SPI1_Init+0x64>)
 800135c:	2208      	movs	r2, #8
 800135e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <MX_SPI1_Init+0x64>)
 8001362:	2200      	movs	r2, #0
 8001364:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <MX_SPI1_Init+0x64>)
 8001368:	2200      	movs	r2, #0
 800136a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800136c:	4b07      	ldr	r3, [pc, #28]	; (800138c <MX_SPI1_Init+0x64>)
 800136e:	2200      	movs	r2, #0
 8001370:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <MX_SPI1_Init+0x64>)
 8001374:	220a      	movs	r2, #10
 8001376:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001378:	4804      	ldr	r0, [pc, #16]	; (800138c <MX_SPI1_Init+0x64>)
 800137a:	f005 f84b 	bl	8006414 <HAL_SPI_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001384:	f000 fb66 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}
 800138c:	200007e8 	.word	0x200007e8
 8001390:	40013000 	.word	0x40013000

08001394 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139a:	f107 0308 	add.w	r3, r7, #8
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a8:	463b      	mov	r3, r7
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013b0:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <MX_TIM2_Init+0x94>)
 80013b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013b8:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <MX_TIM2_Init+0x94>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013be:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <MX_TIM2_Init+0x94>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013c4:	4b18      	ldr	r3, [pc, #96]	; (8001428 <MX_TIM2_Init+0x94>)
 80013c6:	f04f 32ff 	mov.w	r2, #4294967295
 80013ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013cc:	4b16      	ldr	r3, [pc, #88]	; (8001428 <MX_TIM2_Init+0x94>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <MX_TIM2_Init+0x94>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013d8:	4813      	ldr	r0, [pc, #76]	; (8001428 <MX_TIM2_Init+0x94>)
 80013da:	f005 fc2f 	bl	8006c3c <HAL_TIM_Base_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013e4:	f000 fb36 	bl	8001a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013ee:	f107 0308 	add.w	r3, r7, #8
 80013f2:	4619      	mov	r1, r3
 80013f4:	480c      	ldr	r0, [pc, #48]	; (8001428 <MX_TIM2_Init+0x94>)
 80013f6:	f005 fde9 	bl	8006fcc <HAL_TIM_ConfigClockSource>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001400:	f000 fb28 	bl	8001a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001404:	2300      	movs	r3, #0
 8001406:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800140c:	463b      	mov	r3, r7
 800140e:	4619      	mov	r1, r3
 8001410:	4805      	ldr	r0, [pc, #20]	; (8001428 <MX_TIM2_Init+0x94>)
 8001412:	f006 f805 	bl	8007420 <HAL_TIMEx_MasterConfigSynchronization>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800141c:	f000 fb1a 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	200008a0 	.word	0x200008a0

0800142c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <MX_USART1_UART_Init+0x4c>)
 8001432:	4a12      	ldr	r2, [pc, #72]	; (800147c <MX_USART1_UART_Init+0x50>)
 8001434:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <MX_USART1_UART_Init+0x4c>)
 8001438:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800143c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <MX_USART1_UART_Init+0x4c>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <MX_USART1_UART_Init+0x4c>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <MX_USART1_UART_Init+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <MX_USART1_UART_Init+0x4c>)
 8001452:	220c      	movs	r2, #12
 8001454:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <MX_USART1_UART_Init+0x4c>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <MX_USART1_UART_Init+0x4c>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_USART1_UART_Init+0x4c>)
 8001464:	f006 f86c 	bl	8007540 <HAL_UART_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800146e:	f000 faf1 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200008e8 	.word	0x200008e8
 800147c:	40011000 	.word	0x40011000

08001480 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <MX_DMA_Init+0x3c>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <MX_DMA_Init+0x3c>)
 8001490:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <MX_DMA_Init+0x3c>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2105      	movs	r1, #5
 80014a6:	203b      	movs	r0, #59	; 0x3b
 80014a8:	f001 fb0c 	bl	8002ac4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80014ac:	203b      	movs	r0, #59	; 0x3b
 80014ae:	f001 fb25 	bl	8002afc <HAL_NVIC_EnableIRQ>

}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800

080014c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	; 0x28
 80014c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
 80014d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	4b39      	ldr	r3, [pc, #228]	; (80015c0 <MX_GPIO_Init+0x100>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a38      	ldr	r2, [pc, #224]	; (80015c0 <MX_GPIO_Init+0x100>)
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b36      	ldr	r3, [pc, #216]	; (80015c0 <MX_GPIO_Init+0x100>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	4b32      	ldr	r3, [pc, #200]	; (80015c0 <MX_GPIO_Init+0x100>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a31      	ldr	r2, [pc, #196]	; (80015c0 <MX_GPIO_Init+0x100>)
 80014fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b2f      	ldr	r3, [pc, #188]	; (80015c0 <MX_GPIO_Init+0x100>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	4b2b      	ldr	r3, [pc, #172]	; (80015c0 <MX_GPIO_Init+0x100>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a2a      	ldr	r2, [pc, #168]	; (80015c0 <MX_GPIO_Init+0x100>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <MX_GPIO_Init+0x100>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	4b24      	ldr	r3, [pc, #144]	; (80015c0 <MX_GPIO_Init+0x100>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a23      	ldr	r2, [pc, #140]	; (80015c0 <MX_GPIO_Init+0x100>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b21      	ldr	r3, [pc, #132]	; (80015c0 <MX_GPIO_Init+0x100>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_SD3_GPIO_Port, SS_SD3_Pin, GPIO_PIN_SET);
 8001546:	2201      	movs	r2, #1
 8001548:	2102      	movs	r1, #2
 800154a:	481e      	ldr	r0, [pc, #120]	; (80015c4 <MX_GPIO_Init+0x104>)
 800154c:	f002 fad4 	bl	8003af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin, GPIO_PIN_SET);
 8001550:	2201      	movs	r2, #1
 8001552:	2186      	movs	r1, #134	; 0x86
 8001554:	481c      	ldr	r0, [pc, #112]	; (80015c8 <MX_GPIO_Init+0x108>)
 8001556:	f002 facf 	bl	8003af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_VBUS_GPIO_Port, USB_VBUS_Pin, GPIO_PIN_SET);
 800155a:	2201      	movs	r2, #1
 800155c:	2101      	movs	r1, #1
 800155e:	481b      	ldr	r0, [pc, #108]	; (80015cc <MX_GPIO_Init+0x10c>)
 8001560:	f002 faca 	bl	8003af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SS_SD3_Pin */
  GPIO_InitStruct.Pin = SS_SD3_Pin;
 8001564:	2302      	movs	r3, #2
 8001566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001568:	2301      	movs	r3, #1
 800156a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800156c:	2301      	movs	r3, #1
 800156e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001570:	2302      	movs	r3, #2
 8001572:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SS_SD3_GPIO_Port, &GPIO_InitStruct);
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	4619      	mov	r1, r3
 800157a:	4812      	ldr	r0, [pc, #72]	; (80015c4 <MX_GPIO_Init+0x104>)
 800157c:	f002 f920 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS_SD1_Pin SS_SD2_Pin SS_SD4_Pin */
  GPIO_InitStruct.Pin = SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin;
 8001580:	2386      	movs	r3, #134	; 0x86
 8001582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001584:	2301      	movs	r3, #1
 8001586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001588:	2301      	movs	r3, #1
 800158a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800158c:	2302      	movs	r3, #2
 800158e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4619      	mov	r1, r3
 8001596:	480c      	ldr	r0, [pc, #48]	; (80015c8 <MX_GPIO_Init+0x108>)
 8001598:	f002 f912 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800159c:	2301      	movs	r3, #1
 800159e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a0:	2301      	movs	r3, #1
 80015a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4619      	mov	r1, r3
 80015b2:	4806      	ldr	r0, [pc, #24]	; (80015cc <MX_GPIO_Init+0x10c>)
 80015b4:	f002 f904 	bl	80037c0 <HAL_GPIO_Init>

}
 80015b8:	bf00      	nop
 80015ba:	3728      	adds	r7, #40	; 0x28
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020800 	.word	0x40020800
 80015c8:	40020000 	.word	0x40020000
 80015cc:	40020400 	.word	0x40020400

080015d0 <HAL_UART_RxCpltCallback>:

uint8_t tmp1;
uint8_t tmp2;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 if(huart==&UI_UART)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a09      	ldr	r2, [pc, #36]	; (8001600 <HAL_UART_RxCpltCallback+0x30>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d10a      	bne.n	80015f6 <HAL_UART_RxCpltCallback+0x26>
 {
	 UI_media_process_byte(&user_interface,user_interface.media_rx_byte);
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <HAL_UART_RxCpltCallback+0x34>)
 80015e2:	7b1b      	ldrb	r3, [r3, #12]
 80015e4:	4619      	mov	r1, r3
 80015e6:	4807      	ldr	r0, [pc, #28]	; (8001604 <HAL_UART_RxCpltCallback+0x34>)
 80015e8:	f7ff f846 	bl	8000678 <UI_media_process_byte>
	 HAL_UART_Receive_IT(&UI_UART,&(user_interface.media_rx_byte),1);
 80015ec:	2201      	movs	r2, #1
 80015ee:	4906      	ldr	r1, [pc, #24]	; (8001608 <HAL_UART_RxCpltCallback+0x38>)
 80015f0:	4803      	ldr	r0, [pc, #12]	; (8001600 <HAL_UART_RxCpltCallback+0x30>)
 80015f2:	f006 f837 	bl	8007664 <HAL_UART_Receive_IT>
 }
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200008e8 	.word	0x200008e8
 8001604:	20000954 	.word	0x20000954
 8001608:	20000960 	.word	0x20000960

0800160c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]

 if(huart==&UI_UART)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a09      	ldr	r2, [pc, #36]	; (800163c <HAL_UART_TxCpltCallback+0x30>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d10b      	bne.n	8001634 <HAL_UART_TxCpltCallback+0x28>
 {
	 if(UI_media_get_byte(&user_interface,&tmp2)==UI_F_OK)
 800161c:	4908      	ldr	r1, [pc, #32]	; (8001640 <HAL_UART_TxCpltCallback+0x34>)
 800161e:	4809      	ldr	r0, [pc, #36]	; (8001644 <HAL_UART_TxCpltCallback+0x38>)
 8001620:	f7ff f8a8 	bl	8000774 <UI_media_get_byte>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d104      	bne.n	8001634 <HAL_UART_TxCpltCallback+0x28>
	 {
	    HAL_UART_Transmit_IT(&UI_UART,&tmp2,1);
 800162a:	2201      	movs	r2, #1
 800162c:	4904      	ldr	r1, [pc, #16]	; (8001640 <HAL_UART_TxCpltCallback+0x34>)
 800162e:	4803      	ldr	r0, [pc, #12]	; (800163c <HAL_UART_TxCpltCallback+0x30>)
 8001630:	f005 ffd3 	bl	80075da <HAL_UART_Transmit_IT>
	 }
 }
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	200008e8 	.word	0x200008e8
 8001640:	20001a58 	.word	0x20001a58
 8001644:	20000954 	.word	0x20000954

08001648 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001650:	f011 ff12 	bl	8013478 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
   osEvent event;
  /* Infinite loop */
  for(;;)
  {
	  event = osMessageGet(AppliEventHandle, osWaitForever);
 8001654:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <StartDefaultTask+0x6c>)
 8001656:	6819      	ldr	r1, [r3, #0]
 8001658:	f107 030c 	add.w	r3, r7, #12
 800165c:	f04f 32ff 	mov.w	r2, #4294967295
 8001660:	4618      	mov	r0, r3
 8001662:	f00f fcfb 	bl	801105c <osMessageGet>

	  if(event.status == osEventMessage)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2b10      	cmp	r3, #16
 800166a:	d11f      	bne.n	80016ac <StartDefaultTask+0x64>
	  {
		switch(event.value.v)
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	2b03      	cmp	r3, #3
 8001670:	d006      	beq.n	8001680 <StartDefaultTask+0x38>
 8001672:	2b03      	cmp	r3, #3
 8001674:	d81c      	bhi.n	80016b0 <StartDefaultTask+0x68>
 8001676:	2b01      	cmp	r3, #1
 8001678:	d015      	beq.n	80016a6 <StartDefaultTask+0x5e>
 800167a:	2b02      	cmp	r3, #2
 800167c:	d004      	beq.n	8001688 <StartDefaultTask+0x40>
		 case APPLICATION_START:
		   USB_set_line_coding();
		 break;

		 default:
		 break;
 800167e:	e017      	b.n	80016b0 <StartDefaultTask+0x68>
			 icListen.status=DISCONNECTED;
 8001680:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <StartDefaultTask+0x70>)
 8001682:	2201      	movs	r2, #1
 8001684:	775a      	strb	r2, [r3, #29]
		 break;
 8001686:	e014      	b.n	80016b2 <StartDefaultTask+0x6a>
			 osDelay(5000);
 8001688:	f241 3088 	movw	r0, #5000	; 0x1388
 800168c:	f00f fc69 	bl	8010f62 <osDelay>
			 icListen.status=CONNECTED;
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <StartDefaultTask+0x70>)
 8001692:	2200      	movs	r2, #0
 8001694:	775a      	strb	r2, [r3, #29]
			 osMessagePut(USB_txHandle,&collect_msg_ptr, 0);
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <StartDefaultTask+0x74>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4909      	ldr	r1, [pc, #36]	; (80016c0 <StartDefaultTask+0x78>)
 800169c:	2200      	movs	r2, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f00f fc9c 	bl	8010fdc <osMessagePut>
		 break;
 80016a4:	e005      	b.n	80016b2 <StartDefaultTask+0x6a>
		   USB_set_line_coding();
 80016a6:	f011 feb9 	bl	801341c <USB_set_line_coding>
		 break;
 80016aa:	e002      	b.n	80016b2 <StartDefaultTask+0x6a>
		 }
	   }
 80016ac:	bf00      	nop
 80016ae:	e7d1      	b.n	8001654 <StartDefaultTask+0xc>
		 break;
 80016b0:	bf00      	nop
	  event = osMessageGet(AppliEventHandle, osWaitForever);
 80016b2:	e7cf      	b.n	8001654 <StartDefaultTask+0xc>
 80016b4:	2000093c 	.word	0x2000093c
 80016b8:	2000079c 	.word	0x2000079c
 80016bc:	20000944 	.word	0x20000944
 80016c0:	2000094c 	.word	0x2000094c

080016c4 <storage_f>:
* @retval None
*/

/* USER CODE END Header_storage_f */
void storage_f(void const * argument)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b098      	sub	sp, #96	; 0x60
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN storage_f */
  osDelay(500);
 80016cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016d0:	f00f fc47 	bl	8010f62 <osDelay>
  char ttr[20];
  memory_region_pointer msg_ptr;
  memory_region_pointer* data_ptr;
  msg_ptr.start_addr=ttr;
 80016d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016d8:	63bb      	str	r3, [r7, #56]	; 0x38

  uint8_t disk_id=0;
 80016da:	2300      	movs	r3, #0
 80016dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  char file_name[15];

  osEvent storage_w_event;

  sd_storage_link_ss(&microsd_storage,0,SS_SD1_Pin,GPIOA);
 80016e0:	4b70      	ldr	r3, [pc, #448]	; (80018a4 <storage_f+0x1e0>)
 80016e2:	2202      	movs	r2, #2
 80016e4:	2100      	movs	r1, #0
 80016e6:	4870      	ldr	r0, [pc, #448]	; (80018a8 <storage_f+0x1e4>)
 80016e8:	f7ff fbc2 	bl	8000e70 <sd_storage_link_ss>
  sd_storage_link_ss(&microsd_storage,1,SS_SD2_Pin,GPIOA);
 80016ec:	4b6d      	ldr	r3, [pc, #436]	; (80018a4 <storage_f+0x1e0>)
 80016ee:	2204      	movs	r2, #4
 80016f0:	2101      	movs	r1, #1
 80016f2:	486d      	ldr	r0, [pc, #436]	; (80018a8 <storage_f+0x1e4>)
 80016f4:	f7ff fbbc 	bl	8000e70 <sd_storage_link_ss>
  sd_storage_link_ss(&microsd_storage,2,SS_SD3_Pin,SS_SD3_GPIO_Port);
 80016f8:	4b6c      	ldr	r3, [pc, #432]	; (80018ac <storage_f+0x1e8>)
 80016fa:	2202      	movs	r2, #2
 80016fc:	2102      	movs	r1, #2
 80016fe:	486a      	ldr	r0, [pc, #424]	; (80018a8 <storage_f+0x1e4>)
 8001700:	f7ff fbb6 	bl	8000e70 <sd_storage_link_ss>
  sd_storage_link_ss(&microsd_storage,3,SS_SD4_Pin,GPIOA);
 8001704:	4b67      	ldr	r3, [pc, #412]	; (80018a4 <storage_f+0x1e0>)
 8001706:	2280      	movs	r2, #128	; 0x80
 8001708:	2103      	movs	r1, #3
 800170a:	4867      	ldr	r0, [pc, #412]	; (80018a8 <storage_f+0x1e4>)
 800170c:	f7ff fbb0 	bl	8000e70 <sd_storage_link_ss>
  sd_storage_init(&microsd_storage);
 8001710:	4865      	ldr	r0, [pc, #404]	; (80018a8 <storage_f+0x1e4>)
 8001712:	f7ff fb21 	bl	8000d58 <sd_storage_init>

  while(disk_id<4)
 8001716:	e024      	b.n	8001762 <storage_f+0x9e>
  {
   sprintf(file_name,"%d:test%d.wav",disk_id,disk_id);
 8001718:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800171c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001720:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001724:	4962      	ldr	r1, [pc, #392]	; (80018b0 <storage_f+0x1ec>)
 8001726:	f012 fc57 	bl	8013fd8 <siprintf>

   if(wav_file_open(&wav_file,file_name)==F_OK){
 800172a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800172e:	4619      	mov	r1, r3
 8001730:	4860      	ldr	r0, [pc, #384]	; (80018b4 <storage_f+0x1f0>)
 8001732:	f000 ffdb 	bl	80026ec <wav_file_open>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d10d      	bne.n	8001758 <storage_f+0x94>
	  sprintf(ttr,"%d mounted\r",disk_id);
 800173c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001740:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001744:	495c      	ldr	r1, [pc, #368]	; (80018b8 <storage_f+0x1f4>)
 8001746:	4618      	mov	r0, r3
 8001748:	f012 fc46 	bl	8013fd8 <siprintf>
	  disk_id++;
 800174c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001750:	3301      	adds	r3, #1
 8001752:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	  break;
 8001756:	e008      	b.n	800176a <storage_f+0xa6>
   }
   disk_id++;
 8001758:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800175c:	3301      	adds	r3, #1
 800175e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  while(disk_id<4)
 8001762:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001766:	2b03      	cmp	r3, #3
 8001768:	d9d6      	bls.n	8001718 <storage_f+0x54>
  }
  msg_ptr.size=strlen(msg_ptr.start_addr);
 800176a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800176c:	4618      	mov	r0, r3
 800176e:	f7fe fd39 	bl	80001e4 <strlen>
 8001772:	4603      	mov	r3, r0
 8001774:	63fb      	str	r3, [r7, #60]	; 0x3c
  UI_send_msg(&user_interface,UI_CMD_SEND_DATA,&msg_ptr);
 8001776:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800177a:	461a      	mov	r2, r3
 800177c:	2101      	movs	r1, #1
 800177e:	484f      	ldr	r0, [pc, #316]	; (80018bc <storage_f+0x1f8>)
 8001780:	f7ff f813 	bl	80007aa <UI_send_msg>


  //readDir("0:/");
  //f_unlink("0:test1.wav");
  char xxx[20];
  int num_pckts=100;
 8001784:	2364      	movs	r3, #100	; 0x64
 8001786:	65bb      	str	r3, [r7, #88]	; 0x58
  /* Infinite loop */
  for(;;)
  {
	  storage_w_event = osMessageGet(storage_wHandle, osWaitForever);
 8001788:	4b4d      	ldr	r3, [pc, #308]	; (80018c0 <storage_f+0x1fc>)
 800178a:	6819      	ldr	r1, [r3, #0]
 800178c:	f107 031c 	add.w	r3, r7, #28
 8001790:	f04f 32ff 	mov.w	r2, #4294967295
 8001794:	4618      	mov	r0, r3
 8001796:	f00f fc61 	bl	801105c <osMessageGet>
	  if(storage_w_event.status == osEventMessage){
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	2b10      	cmp	r3, #16
 800179e:	d1f3      	bne.n	8001788 <storage_f+0xc4>
		  if(num_pckts>0)
 80017a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	dd17      	ble.n	80017d6 <storage_f+0x112>
		  {
		   data_ptr=(memory_region_pointer*)storage_w_event.value.v;
 80017a6:	6a3b      	ldr	r3, [r7, #32]
 80017a8:	657b      	str	r3, [r7, #84]	; 0x54
	       wav_file_write(&wav_file,data_ptr->start_addr,data_ptr->size);
 80017aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ac:	6819      	ldr	r1, [r3, #0]
 80017ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	461a      	mov	r2, r3
 80017b4:	483f      	ldr	r0, [pc, #252]	; (80018b4 <storage_f+0x1f0>)
 80017b6:	f001 f81a 	bl	80027ee <wav_file_write>
	       osDelay(35);
 80017ba:	2023      	movs	r0, #35	; 0x23
 80017bc:	f00f fbd1 	bl	8010f62 <osDelay>
	       osMessagePut(USB_txHandle,(uint8_t*)&collect_msg_ptr, 0);
 80017c0:	4b40      	ldr	r3, [pc, #256]	; (80018c4 <storage_f+0x200>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4940      	ldr	r1, [pc, #256]	; (80018c8 <storage_f+0x204>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	4618      	mov	r0, r3
 80017ca:	f00f fc07 	bl	8010fdc <osMessagePut>
	       num_pckts--;
 80017ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017d0:	3b01      	subs	r3, #1
 80017d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80017d4:	e7d8      	b.n	8001788 <storage_f+0xc4>
		  }
		  else if (num_pckts==0)
 80017d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1d5      	bne.n	8001788 <storage_f+0xc4>
		  {
			 wav_file_close(&wav_file);
 80017dc:	4835      	ldr	r0, [pc, #212]	; (80018b4 <storage_f+0x1f0>)
 80017de:	f000 ffd5 	bl	800278c <wav_file_close>
			 sprintf(ttr,"Closed\r");
 80017e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017e6:	4939      	ldr	r1, [pc, #228]	; (80018cc <storage_f+0x208>)
 80017e8:	4618      	mov	r0, r3
 80017ea:	f012 fbf5 	bl	8013fd8 <siprintf>
			 msg_ptr.size=strlen(msg_ptr.start_addr);
 80017ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fcf7 	bl	80001e4 <strlen>
 80017f6:	4603      	mov	r3, r0
 80017f8:	63fb      	str	r3, [r7, #60]	; 0x3c
			 UI_send_msg(&user_interface,UI_CMD_SEND_DATA,&msg_ptr);
 80017fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017fe:	461a      	mov	r2, r3
 8001800:	2101      	movs	r1, #1
 8001802:	482e      	ldr	r0, [pc, #184]	; (80018bc <storage_f+0x1f8>)
 8001804:	f7fe ffd1 	bl	80007aa <UI_send_msg>
			 num_pckts--;
 8001808:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800180a:	3b01      	subs	r3, #1
 800180c:	65bb      	str	r3, [r7, #88]	; 0x58
			 if(disk_id<4)
 800180e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001812:	2b03      	cmp	r3, #3
 8001814:	d8b8      	bhi.n	8001788 <storage_f+0xc4>
			 {
			  while(disk_id<4)
 8001816:	e029      	b.n	800186c <storage_f+0x1a8>
			  {
			   sprintf(file_name,"%d:test%d.wav",disk_id,disk_id);
 8001818:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800181c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001820:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001824:	4922      	ldr	r1, [pc, #136]	; (80018b0 <storage_f+0x1ec>)
 8001826:	f012 fbd7 	bl	8013fd8 <siprintf>
			   if(wav_file_open(&wav_file,file_name)==F_OK){
 800182a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800182e:	4619      	mov	r1, r3
 8001830:	4820      	ldr	r0, [pc, #128]	; (80018b4 <storage_f+0x1f0>)
 8001832:	f000 ff5b 	bl	80026ec <wav_file_open>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d10f      	bne.n	800185c <storage_f+0x198>
				 sprintf(ttr,"%d mounted\r",disk_id);
 800183c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001840:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001844:	491c      	ldr	r1, [pc, #112]	; (80018b8 <storage_f+0x1f4>)
 8001846:	4618      	mov	r0, r3
 8001848:	f012 fbc6 	bl	8013fd8 <siprintf>
				 num_pckts=100;
 800184c:	2364      	movs	r3, #100	; 0x64
 800184e:	65bb      	str	r3, [r7, #88]	; 0x58
				 disk_id++;
 8001850:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001854:	3301      	adds	r3, #1
 8001856:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				 break;
 800185a:	e00b      	b.n	8001874 <storage_f+0x1b0>
			   }
			   else sprintf(ttr,"%d error\r",disk_id);
 800185c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001860:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001864:	491a      	ldr	r1, [pc, #104]	; (80018d0 <storage_f+0x20c>)
 8001866:	4618      	mov	r0, r3
 8001868:	f012 fbb6 	bl	8013fd8 <siprintf>
			  while(disk_id<4)
 800186c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001870:	2b03      	cmp	r3, #3
 8001872:	d9d1      	bls.n	8001818 <storage_f+0x154>
			  }
			  msg_ptr.size=strlen(msg_ptr.start_addr);
 8001874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fcb4 	bl	80001e4 <strlen>
 800187c:	4603      	mov	r3, r0
 800187e:	63fb      	str	r3, [r7, #60]	; 0x3c
			  UI_send_msg(&user_interface,UI_CMD_SEND_DATA,&msg_ptr);
 8001880:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001884:	461a      	mov	r2, r3
 8001886:	2101      	movs	r1, #1
 8001888:	480c      	ldr	r0, [pc, #48]	; (80018bc <storage_f+0x1f8>)
 800188a:	f7fe ff8e 	bl	80007aa <UI_send_msg>
			  osDelay(35);
 800188e:	2023      	movs	r0, #35	; 0x23
 8001890:	f00f fb67 	bl	8010f62 <osDelay>
			  osMessagePut(USB_txHandle,(uint8_t*)&collect_msg_ptr, 0);
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <storage_f+0x200>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	490b      	ldr	r1, [pc, #44]	; (80018c8 <storage_f+0x204>)
 800189a:	2200      	movs	r2, #0
 800189c:	4618      	mov	r0, r3
 800189e:	f00f fb9d 	bl	8010fdc <osMessagePut>
	  storage_w_event = osMessageGet(storage_wHandle, osWaitForever);
 80018a2:	e771      	b.n	8001788 <storage_f+0xc4>
 80018a4:	40020000 	.word	0x40020000
 80018a8:	20000d88 	.word	0x20000d88
 80018ac:	40020800 	.word	0x40020800
 80018b0:	080153d8 	.word	0x080153d8
 80018b4:	20001698 	.word	0x20001698
 80018b8:	080153e8 	.word	0x080153e8
 80018bc:	20000954 	.word	0x20000954
 80018c0:	20000948 	.word	0x20000948
 80018c4:	20000944 	.word	0x20000944
 80018c8:	2000094c 	.word	0x2000094c
 80018cc:	080153f4 	.word	0x080153f4
 80018d0:	080153fc 	.word	0x080153fc

080018d4 <main_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_main_f */
void main_f(void const * argument)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08c      	sub	sp, #48	; 0x30
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN main_f */
  icListen.settings=(icListen_settings_typedef*)mcu_flash.data.raw_data;
 80018dc:	4b3b      	ldr	r3, [pc, #236]	; (80019cc <main_f+0xf8>)
 80018de:	4a3c      	ldr	r2, [pc, #240]	; (80019d0 <main_f+0xfc>)
 80018e0:	621a      	str	r2, [r3, #32]




  icListen_collect_short_mask_msg collect_msg;
  icListen_prepare_collect_msg(&collect_msg,0x20);
 80018e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e6:	2120      	movs	r1, #32
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff faf9 	bl	8000ee0 <icListen_prepare_collect_msg>

  collect_msg_ptr.start_addr=(uint8_t*)&collect_msg;
 80018ee:	4a39      	ldr	r2, [pc, #228]	; (80019d4 <main_f+0x100>)
 80018f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f4:	6013      	str	r3, [r2, #0]
  collect_msg_ptr.size=sizeof(icListen_collect_short_mask_msg);
 80018f6:	4b37      	ldr	r3, [pc, #220]	; (80019d4 <main_f+0x100>)
 80018f8:	2207      	movs	r2, #7
 80018fa:	605a      	str	r2, [r3, #4]

  osEvent event;

  if(mcu_flash_read(&mcu_flash)!=F_OK){
 80018fc:	4836      	ldr	r0, [pc, #216]	; (80019d8 <main_f+0x104>)
 80018fe:	f000 f901 	bl	8001b04 <mcu_flash_read>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d026      	beq.n	8001956 <main_f+0x82>
		icListen.settings->wav_sample_rate=ICLISTEN_DEFAULT_WAV_SAMPLE_RATE;
 8001908:	4b30      	ldr	r3, [pc, #192]	; (80019cc <main_f+0xf8>)
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
 8001910:	2200      	movs	r2, #0
 8001912:	f042 027d 	orr.w	r2, r2, #125	; 0x7d
 8001916:	705a      	strb	r2, [r3, #1]
 8001918:	2200      	movs	r2, #0
 800191a:	709a      	strb	r2, [r3, #2]
 800191c:	2200      	movs	r2, #0
 800191e:	70da      	strb	r2, [r3, #3]
		icListen.settings->wav_sample_bit_depth=ICLISTEN_DEFAULT_WAV_SAMPLE_BIT_DEPTH;
 8001920:	4b2a      	ldr	r3, [pc, #168]	; (80019cc <main_f+0xf8>)
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	2200      	movs	r2, #0
 8001926:	f042 0218 	orr.w	r2, r2, #24
 800192a:	711a      	strb	r2, [r3, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	715a      	strb	r2, [r3, #5]
 8001930:	2200      	movs	r2, #0
 8001932:	719a      	strb	r2, [r3, #6]
 8001934:	2200      	movs	r2, #0
 8001936:	71da      	strb	r2, [r3, #7]
		icListen.settings->file_duration=ICLISTEN_DEFAULT_FILE_DURATION;
 8001938:	4b24      	ldr	r3, [pc, #144]	; (80019cc <main_f+0xf8>)
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	2200      	movs	r2, #0
 800193e:	f042 0201 	orr.w	r2, r2, #1
 8001942:	721a      	strb	r2, [r3, #8]
 8001944:	2200      	movs	r2, #0
 8001946:	725a      	strb	r2, [r3, #9]
 8001948:	2200      	movs	r2, #0
 800194a:	729a      	strb	r2, [r3, #10]
 800194c:	2200      	movs	r2, #0
 800194e:	72da      	strb	r2, [r3, #11]
		mcu_flash_save(&mcu_flash);
 8001950:	4821      	ldr	r0, [pc, #132]	; (80019d8 <main_f+0x104>)
 8001952:	f000 f8f7 	bl	8001b44 <mcu_flash_save>
  }
  icListen.status=DISCONNECTED;
 8001956:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <main_f+0xf8>)
 8001958:	2201      	movs	r2, #1
 800195a:	775a      	strb	r2, [r3, #29]

  while(icListen.status==DISCONNECTED) osDelay(1);
 800195c:	e002      	b.n	8001964 <main_f+0x90>
 800195e:	2001      	movs	r0, #1
 8001960:	f00f faff 	bl	8010f62 <osDelay>
 8001964:	4b19      	ldr	r3, [pc, #100]	; (80019cc <main_f+0xf8>)
 8001966:	7f5b      	ldrb	r3, [r3, #29]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d0f8      	beq.n	800195e <main_f+0x8a>

  /* Infinite loop */
  for(;;)
  {
	  if(icListen.status==CONNECTED){
 800196c:	4b17      	ldr	r3, [pc, #92]	; (80019cc <main_f+0xf8>)
 800196e:	7f5b      	ldrb	r3, [r3, #29]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1fb      	bne.n	800196c <main_f+0x98>
	   event = osMessageGet(USB_txHandle, osWaitForever);
 8001974:	4b19      	ldr	r3, [pc, #100]	; (80019dc <main_f+0x108>)
 8001976:	6819      	ldr	r1, [r3, #0]
 8001978:	f107 0318 	add.w	r3, r7, #24
 800197c:	f04f 32ff 	mov.w	r2, #4294967295
 8001980:	4618      	mov	r0, r3
 8001982:	f00f fb6b 	bl	801105c <osMessageGet>
	   if(event.status == osEventMessage){
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	2b10      	cmp	r3, #16
 800198a:	d109      	bne.n	80019a0 <main_f+0xcc>
		   mem_ptr=(memory_region_pointer*)event.value.v;
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	62fb      	str	r3, [r7, #44]	; 0x2c
		   USB_transmit_msg(mem_ptr->start_addr,mem_ptr->size);
 8001990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	4619      	mov	r1, r3
 800199a:	4610      	mov	r0, r2
 800199c:	f011 fd0e 	bl	80133bc <USB_transmit_msg>

	   }
	   event = osMessageGet(USB_rxHandle, 10);
 80019a0:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <main_f+0x10c>)
 80019a2:	6819      	ldr	r1, [r3, #0]
 80019a4:	463b      	mov	r3, r7
 80019a6:	220a      	movs	r2, #10
 80019a8:	4618      	mov	r0, r3
 80019aa:	f00f fb57 	bl	801105c <osMessageGet>
 80019ae:	f107 0318 	add.w	r3, r7, #24
 80019b2:	463a      	mov	r2, r7
 80019b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80019b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	   if(event.status == osEventMessage){
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	2b10      	cmp	r3, #16
 80019be:	d1d5      	bne.n	800196c <main_f+0x98>

		   icListen_parse_msg((uint8_t*)event.value.v,&icListen);
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	4902      	ldr	r1, [pc, #8]	; (80019cc <main_f+0xf8>)
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff faaf 	bl	8000f28 <icListen_parse_msg>
	  if(icListen.status==CONNECTED){
 80019ca:	e7cf      	b.n	800196c <main_f+0x98>
 80019cc:	2000079c 	.word	0x2000079c
 80019d0:	20000d74 	.word	0x20000d74
 80019d4:	2000094c 	.word	0x2000094c
 80019d8:	20000d68 	.word	0x20000d68
 80019dc:	20000944 	.word	0x20000944
 80019e0:	20000940 	.word	0x20000940

080019e4 <uart_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart_f */
void uart_f(void const * argument)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uart_f */
  uint8_t tmp;
  /* Infinite loop */
  user_interface.media_status=UI_MEDIA_READY;
 80019ec:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <uart_f+0x44>)
 80019ee:	220a      	movs	r2, #10
 80019f0:	735a      	strb	r2, [r3, #13]
  for(;;)
  {
	   if(UI_UART.gState!=HAL_UART_STATE_BUSY_TX)
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <uart_f+0x48>)
 80019f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b21      	cmp	r3, #33	; 0x21
 80019fc:	d00f      	beq.n	8001a1e <uart_f+0x3a>
	   {
		if(UI_media_get_byte(&user_interface,&tmp)==UI_F_OK)
 80019fe:	f107 030f 	add.w	r3, r7, #15
 8001a02:	4619      	mov	r1, r3
 8001a04:	4808      	ldr	r0, [pc, #32]	; (8001a28 <uart_f+0x44>)
 8001a06:	f7fe feb5 	bl	8000774 <UI_media_get_byte>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d106      	bne.n	8001a1e <uart_f+0x3a>
		{
		   HAL_UART_Transmit_IT(&UI_UART,&tmp,1);
 8001a10:	f107 030f 	add.w	r3, r7, #15
 8001a14:	2201      	movs	r2, #1
 8001a16:	4619      	mov	r1, r3
 8001a18:	4804      	ldr	r0, [pc, #16]	; (8001a2c <uart_f+0x48>)
 8001a1a:	f005 fdde 	bl	80075da <HAL_UART_Transmit_IT>
		}
	   }
	  osDelay(1);
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f00f fa9f 	bl	8010f62 <osDelay>
	   if(UI_UART.gState!=HAL_UART_STATE_BUSY_TX)
 8001a24:	e7e5      	b.n	80019f2 <uart_f+0xe>
 8001a26:	bf00      	nop
 8001a28:	20000954 	.word	0x20000954
 8001a2c:	200008e8 	.word	0x200008e8

08001a30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d101      	bne.n	8001a46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a42:	f000 ff43 	bl	80028cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40010000 	.word	0x40010000

08001a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a58:	b672      	cpsid	i
}
 8001a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <Error_Handler+0x8>
	...

08001a60 <mcu_flash_init>:
#if defined(STM32F205xx)  //KB
uint32_t  flash_block_size[]={16,16,16,16,64,128,128,128,128,128,128,128};
#endif

void mcu_flash_init(mcu_flash_typedef* mcu_flash_obj,uint32_t first_block)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b087      	sub	sp, #28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
	uint32_t temp=0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
	int32_t temp2=0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
	if(first_block<FLASH_NUM_OF_BLOCKS){
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	2b0b      	cmp	r3, #11
 8001a76:	d83d      	bhi.n	8001af4 <mcu_flash_init+0x94>
      mcu_flash_obj->first_block_num=first_block;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
      for(int i=0;i<first_block;i++) temp+=flash_block_size[i];
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	e009      	b.n	8001a98 <mcu_flash_init+0x38>
 8001a84:	4a1e      	ldr	r2, [pc, #120]	; (8001b00 <mcu_flash_init+0xa0>)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	4413      	add	r3, r2
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	3301      	adds	r3, #1
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d8f1      	bhi.n	8001a84 <mcu_flash_init+0x24>
	  mcu_flash_obj->first_block_addr=FLASH_BASE+(temp*1024);
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001aa6:	029a      	lsls	r2, r3, #10
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	601a      	str	r2, [r3, #0]

	  temp2=FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE;
 8001aac:	2312      	movs	r3, #18
 8001aae:	613b      	str	r3, [r7, #16]
	  mcu_flash_obj->num_of_blocks=0;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	721a      	strb	r2, [r3, #8]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	725a      	strb	r2, [r3, #9]
 8001aba:	2200      	movs	r2, #0
 8001abc:	729a      	strb	r2, [r3, #10]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	72da      	strb	r2, [r3, #11]
	  for(int i=mcu_flash_obj->first_block_num;i<FLASH_NUM_OF_BLOCKS&&temp2>0;i++) {
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	e00e      	b.n	8001ae8 <mcu_flash_init+0x88>
		  temp2-=flash_block_size[i];
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	490c      	ldr	r1, [pc, #48]	; (8001b00 <mcu_flash_init+0xa0>)
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	613b      	str	r3, [r7, #16]
		  mcu_flash_obj->num_of_blocks++;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	1c5a      	adds	r2, r3, #1
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
	  for(int i=mcu_flash_obj->first_block_num;i<FLASH_NUM_OF_BLOCKS&&temp2>0;i++) {
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	2b0b      	cmp	r3, #11
 8001aec:	dc02      	bgt.n	8001af4 <mcu_flash_init+0x94>
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	dcea      	bgt.n	8001aca <mcu_flash_init+0x6a>
	  }
	}
}
 8001af4:	bf00      	nop
 8001af6:	371c      	adds	r7, #28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	20000200 	.word	0x20000200

08001b04 <mcu_flash_read>:

F_RES mcu_flash_read(mcu_flash_typedef* mcu_flash_obj)
{
 8001b04:	b590      	push	{r4, r7, lr}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
	 memcpy((uint8_t*)&(mcu_flash_obj->data),(uint8_t*)mcu_flash_obj->first_block_addr,FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f103 000c 	add.w	r0, r3, #12
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2212      	movs	r2, #18
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f012 f8ed 	bl	8013cf8 <memcpy>
	 if(mcu_flash_obj->data.crc==get_crc16_arc(mcu_flash_obj->data.raw_data,FLASH_DATA_SIZE)){
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	8b9b      	ldrh	r3, [r3, #28]
 8001b22:	b29c      	uxth	r4, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	330c      	adds	r3, #12
 8001b28:	2110      	movs	r1, #16
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff f8de 	bl	8000cec <get_crc16_arc>
 8001b30:	4603      	mov	r3, r0
 8001b32:	429c      	cmp	r4, r3
 8001b34:	d101      	bne.n	8001b3a <mcu_flash_read+0x36>
		 return F_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	e000      	b.n	8001b3c <mcu_flash_read+0x38>
	 }
	 else{
		 return F_ERR;
 8001b3a:	2301      	movs	r3, #1
	 }

}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd90      	pop	{r4, r7, pc}

08001b44 <mcu_flash_save>:
void mcu_flash_save(mcu_flash_typedef* mcu_flash_obj)
{
 8001b44:	b5b0      	push	{r4, r5, r7, lr}
 8001b46:	b08c      	sub	sp, #48	; 0x30
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	uint32_t i=0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t tmp;
	uint32_t pgerr = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	623b      	str	r3, [r7, #32]
	uint8_t* data=(uint8_t*)&mcu_flash_obj->data;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	330c      	adds	r3, #12
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24

	mcu_flash_obj->data.crc=get_crc16_arc(mcu_flash_obj->data.raw_data,FLASH_DATA_SIZE);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	330c      	adds	r3, #12
 8001b5e:	2110      	movs	r1, #16
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff f8c3 	bl	8000cec <get_crc16_arc>
 8001b66:	4603      	mov	r3, r0
 8001b68:	461a      	mov	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	839a      	strh	r2, [r3, #28]

    HAL_FLASH_Unlock();
 8001b6e:	f001 fba3 	bl	80032b8 <HAL_FLASH_Unlock>
    #if defined(STM32F405xx)
	FLASH_EraseInitTypeDef erase_info = {
 8001b72:	f107 030c 	add.w	r3, r7, #12
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
 8001b80:	611a      	str	r2, [r3, #16]
		.TypeErase = FLASH_TYPEERASE_SECTORS,
		.Sector = mcu_flash_obj->first_block_num,
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
	FLASH_EraseInitTypeDef erase_info = {
 8001b86:	617b      	str	r3, [r7, #20]
		.NbSectors = mcu_flash_obj->num_of_blocks,
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
	FLASH_EraseInitTypeDef erase_info = {
 8001b8c:	61bb      	str	r3, [r7, #24]
	.NbPages = mcu_flash_obj->num_of_blocks,
    };
    #endif


	HAL_FLASHEx_Erase(&erase_info, &pgerr);
 8001b8e:	f107 0220 	add.w	r2, r7, #32
 8001b92:	f107 030c 	add.w	r3, r7, #12
 8001b96:	4611      	mov	r1, r2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f001 fcef 	bl	800357c <HAL_FLASHEx_Erase>

	if(pgerr != 0xFFFFFFFFul)
 8001b9e:	6a3b      	ldr	r3, [r7, #32]
 8001ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba4:	d027      	beq.n	8001bf6 <mcu_flash_save+0xb2>
	{
		HAL_FLASH_Lock();
 8001ba6:	f001 fba9 	bl	80032fc <HAL_FLASH_Lock>
 8001baa:	e029      	b.n	8001c00 <mcu_flash_save+0xbc>
		return ;
	}

	while(i<(FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE))
	{
        tmp=(tmp&0x0000)|(data[i]&0x00FF);
 8001bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb0:	4413      	add	r3, r2
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	857b      	strh	r3, [r7, #42]	; 0x2a
		if((i+1)<(FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE)) tmp=tmp|(data[i+1]<<8&0xFF00);
 8001bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb8:	3301      	adds	r3, #1
 8001bba:	2b11      	cmp	r3, #17
 8001bbc:	d80b      	bhi.n	8001bd6 <mcu_flash_save+0x92>
 8001bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc4:	4413      	add	r3, r2
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	021b      	lsls	r3, r3, #8
 8001bca:	b21a      	sxth	r2, r3
 8001bcc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	b21b      	sxth	r3, r3
 8001bd4:	857b      	strh	r3, [r7, #42]	; 0x2a
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,mcu_flash_obj->first_block_addr+i,tmp);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bdc:	18d1      	adds	r1, r2, r3
 8001bde:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001be0:	2200      	movs	r2, #0
 8001be2:	461c      	mov	r4, r3
 8001be4:	4615      	mov	r5, r2
 8001be6:	4622      	mov	r2, r4
 8001be8:	462b      	mov	r3, r5
 8001bea:	2001      	movs	r0, #1
 8001bec:	f001 fb10 	bl	8003210 <HAL_FLASH_Program>
		i=i+2;
 8001bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(i<(FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE))
 8001bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf8:	2b11      	cmp	r3, #17
 8001bfa:	d9d7      	bls.n	8001bac <mcu_flash_save+0x68>
	}

	HAL_FLASH_Lock();
 8001bfc:	f001 fb7e 	bl	80032fc <HAL_FLASH_Lock>
}
 8001c00:	3730      	adds	r7, #48	; 0x30
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001c08 <sd_ss_set_active>:
extern volatile uint16_t htim2;

uint8_t spi_rx_buffer[512];

void sd_ss_set_active(uint8_t drv)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
  active_sd_ss_pin=sd_cards_ss[drv].sd_ss_pin;
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	4a08      	ldr	r2, [pc, #32]	; (8001c38 <sd_ss_set_active+0x30>)
 8001c16:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 8001c1a:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <sd_ss_set_active+0x34>)
 8001c1c:	801a      	strh	r2, [r3, #0]
  active_sd_ss_port=sd_cards_ss[drv].sd_ss_port;
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	4a05      	ldr	r2, [pc, #20]	; (8001c38 <sd_ss_set_active+0x30>)
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	4413      	add	r3, r2
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	4a05      	ldr	r2, [pc, #20]	; (8001c40 <sd_ss_set_active+0x38>)
 8001c2a:	6013      	str	r3, [r2, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	20001a64 	.word	0x20001a64
 8001c3c:	20001a5e 	.word	0x20001a5e
 8001c40:	20001a60 	.word	0x20001a60

08001c44 <sd_ss_active_pin_down>:

void sd_ss_active_pin_down()
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(active_sd_ss_port, active_sd_ss_pin, GPIO_PIN_RESET);
 8001c48:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <sd_ss_active_pin_down+0x18>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a04      	ldr	r2, [pc, #16]	; (8001c60 <sd_ss_active_pin_down+0x1c>)
 8001c4e:	8811      	ldrh	r1, [r2, #0]
 8001c50:	2200      	movs	r2, #0
 8001c52:	4618      	mov	r0, r3
 8001c54:	f001 ff50 	bl	8003af8 <HAL_GPIO_WritePin>
}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20001a60 	.word	0x20001a60
 8001c60:	20001a5e 	.word	0x20001a5e

08001c64 <sd_ss_active_pin_up>:
void sd_ss_active_pin_up()
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(active_sd_ss_port, active_sd_ss_pin, GPIO_PIN_SET);
 8001c68:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <sd_ss_active_pin_up+0x18>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <sd_ss_active_pin_up+0x1c>)
 8001c6e:	8811      	ldrh	r1, [r2, #0]
 8001c70:	2201      	movs	r2, #1
 8001c72:	4618      	mov	r0, r3
 8001c74:	f001 ff40 	bl	8003af8 <HAL_GPIO_WritePin>
}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20001a60 	.word	0x20001a60
 8001c80:	20001a5e 	.word	0x20001a5e

08001c84 <SD_cmd>:



//-----------------------------------------------
static uint8_t SD_cmd (uint8_t cmd, uint32_t arg)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	6039      	str	r1, [r7, #0]
 8001c8e:	71fb      	strb	r3, [r7, #7]
  uint8_t n, res;
  // ACMD<n> is the command sequense of CMD55-CMD<n>
  if (cmd & 0x80)
 8001c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	da0e      	bge.n	8001cb6 <SD_cmd+0x32>
  {
    cmd &= 0x7F;
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c9e:	71fb      	strb	r3, [r7, #7]
    res = SD_cmd(CMD55, 0);
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	2077      	movs	r0, #119	; 0x77
 8001ca4:	f7ff ffee 	bl	8001c84 <SD_cmd>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	73bb      	strb	r3, [r7, #14]
    if (res > 1) return res;
 8001cac:	7bbb      	ldrb	r3, [r7, #14]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d901      	bls.n	8001cb6 <SD_cmd+0x32>
 8001cb2:	7bbb      	ldrb	r3, [r7, #14]
 8001cb4:	e043      	b.n	8001d3e <SD_cmd+0xba>
  }
  // Select the card
  SS_SD_DESELECT();
 8001cb6:	f7ff ffd5 	bl	8001c64 <sd_ss_active_pin_up>
  SPI_ReceiveByte();
 8001cba:	f000 f96a 	bl	8001f92 <SPI_ReceiveByte>

  SS_SD_SELECT();
 8001cbe:	f7ff ffc1 	bl	8001c44 <sd_ss_active_pin_down>
  SPI_ReceiveByte();
 8001cc2:	f000 f966 	bl	8001f92 <SPI_ReceiveByte>
  // Send a command packet
  SPI_SendByte(cmd); // Start + Command index
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f000 f955 	bl	8001f78 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 24)); // Argument[31..24]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	0e1b      	lsrs	r3, r3, #24
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f000 f94f 	bl	8001f78 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 16)); // Argument[23..16]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	0c1b      	lsrs	r3, r3, #16
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f000 f949 	bl	8001f78 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 8)); // Argument[15..8]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	0a1b      	lsrs	r3, r3, #8
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	4618      	mov	r0, r3
 8001cee:	f000 f943 	bl	8001f78 <SPI_SendByte>
  SPI_SendByte((uint8_t)arg); // Argument[7..0]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 f93e 	bl	8001f78 <SPI_SendByte>

  n = 0x01; // Dummy CRC + Stop
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0) {n = 0x95;} // Valid CRC for CMD0(0)
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	2b40      	cmp	r3, #64	; 0x40
 8001d04:	d101      	bne.n	8001d0a <SD_cmd+0x86>
 8001d06:	2395      	movs	r3, #149	; 0x95
 8001d08:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD8) {n = 0x87;} // Valid CRC for CMD8(0x1AA)
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	2b48      	cmp	r3, #72	; 0x48
 8001d0e:	d101      	bne.n	8001d14 <SD_cmd+0x90>
 8001d10:	2387      	movs	r3, #135	; 0x87
 8001d12:	73fb      	strb	r3, [r7, #15]
  SPI_SendByte(n);
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 f92e 	bl	8001f78 <SPI_SendByte>
  // Receive a command response
  n = 10; // Wait for a valid response in timeout of 10 attempts
 8001d1c:	230a      	movs	r3, #10
 8001d1e:	73fb      	strb	r3, [r7, #15]
  do {
    res = SPI_ReceiveByte();
 8001d20:	f000 f937 	bl	8001f92 <SPI_ReceiveByte>
 8001d24:	4603      	mov	r3, r0
 8001d26:	73bb      	strb	r3, [r7, #14]
  } while ((res & 0x80) && --n);
 8001d28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	da05      	bge.n	8001d3c <SD_cmd+0xb8>
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	73fb      	strb	r3, [r7, #15]
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1f1      	bne.n	8001d20 <SD_cmd+0x9c>
  return res;
 8001d3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <sd_ini>:

uint8_t sd_ini(void)
{
 8001d48:	b590      	push	{r4, r7, lr}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
	  uint8_t i, cmd;;
	  uint8_t ocr[4];
	  int16_t tmr;
	  uint32_t temp;
	  //LD_OFF;
	  sdinfo.type = 0;
 8001d4e:	4b57      	ldr	r3, [pc, #348]	; (8001eac <sd_ini+0x164>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]

	  hspi1.Init.BaudRatePrescaler = temp;
	  HAL_SPI_Init(&hspi1);
	  */

	  SS_SD_SELECT();
 8001d54:	f7ff ff76 	bl	8001c44 <sd_ss_active_pin_down>
	  if (SD_cmd(CMD0, 0) == 1) // Enter Idle state
 8001d58:	2100      	movs	r1, #0
 8001d5a:	2040      	movs	r0, #64	; 0x40
 8001d5c:	f7ff ff92 	bl	8001c84 <SD_cmd>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	f040 809a 	bne.w	8001e9c <sd_ini+0x154>
	  {
		  SPI_Release();
 8001d68:	f000 f920 	bl	8001fac <SPI_Release>
		  if (SD_cmd(CMD8, 0x1AA) == 1) // SDv2
 8001d6c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001d70:	2048      	movs	r0, #72	; 0x48
 8001d72:	f7ff ff87 	bl	8001c84 <SD_cmd>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d157      	bne.n	8001e2c <sd_ini+0xe4>
		  {
			  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	71fb      	strb	r3, [r7, #7]
 8001d80:	e00c      	b.n	8001d9c <sd_ini+0x54>
 8001d82:	79fc      	ldrb	r4, [r7, #7]
 8001d84:	f000 f905 	bl	8001f92 <SPI_ReceiveByte>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	f104 0308 	add.w	r3, r4, #8
 8001d90:	443b      	add	r3, r7
 8001d92:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	71fb      	strb	r3, [r7, #7]
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	d9ef      	bls.n	8001d82 <sd_ini+0x3a>

			    // Get trailing return value of R7 resp
			    if (ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 8001da2:	78bb      	ldrb	r3, [r7, #2]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d17b      	bne.n	8001ea0 <sd_ini+0x158>
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	2baa      	cmp	r3, #170	; 0xaa
 8001dac:	d178      	bne.n	8001ea0 <sd_ini+0x158>
			    {
			    	for (tmr = 12000; tmr && SD_cmd(ACMD41, 1UL << 30); tmr--)
 8001dae:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8001db2:	80bb      	strh	r3, [r7, #4]
 8001db4:	e005      	b.n	8001dc2 <sd_ini+0x7a>
 8001db6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	80bb      	strh	r3, [r7, #4]
 8001dc2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d007      	beq.n	8001dda <sd_ini+0x92>
 8001dca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001dce:	20e9      	movs	r0, #233	; 0xe9
 8001dd0:	f7ff ff58 	bl	8001c84 <SD_cmd>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1ed      	bne.n	8001db6 <sd_ini+0x6e>
			    	    ; // Wait for leaving idle state (ACMD41 with HCS bit)
			    	if (tmr && SD_cmd(CMD58, 0) == 0)
 8001dda:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d05e      	beq.n	8001ea0 <sd_ini+0x158>
 8001de2:	2100      	movs	r1, #0
 8001de4:	207a      	movs	r0, #122	; 0x7a
 8001de6:	f7ff ff4d 	bl	8001c84 <SD_cmd>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d157      	bne.n	8001ea0 <sd_ini+0x158>
			    	 { // Check CCS bit in the OCR
			    	  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8001df0:	2300      	movs	r3, #0
 8001df2:	71fb      	strb	r3, [r7, #7]
 8001df4:	e00c      	b.n	8001e10 <sd_ini+0xc8>
 8001df6:	79fc      	ldrb	r4, [r7, #7]
 8001df8:	f000 f8cb 	bl	8001f92 <SPI_ReceiveByte>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	461a      	mov	r2, r3
 8001e00:	f104 0308 	add.w	r3, r4, #8
 8001e04:	443b      	add	r3, r7
 8001e06:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	71fb      	strb	r3, [r7, #7]
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d9ef      	bls.n	8001df6 <sd_ini+0xae>
			     	   sdinfo.type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 8001e16:	783b      	ldrb	r3, [r7, #0]
 8001e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <sd_ini+0xdc>
 8001e20:	220c      	movs	r2, #12
 8001e22:	e000      	b.n	8001e26 <sd_ini+0xde>
 8001e24:	2204      	movs	r2, #4
 8001e26:	4b21      	ldr	r3, [pc, #132]	; (8001eac <sd_ini+0x164>)
 8001e28:	701a      	strb	r2, [r3, #0]
 8001e2a:	e039      	b.n	8001ea0 <sd_ini+0x158>
			    	}
			    }
		  }
		  else //SDv1 or MMCv3
		  {
			  if (SD_cmd(ACMD41, 0) <= 1)
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	20e9      	movs	r0, #233	; 0xe9
 8001e30:	f7ff ff28 	bl	8001c84 <SD_cmd>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d805      	bhi.n	8001e46 <sd_ini+0xfe>
			    {
			      sdinfo.type = CT_SD1; cmd = ACMD41; // SDv1
 8001e3a:	4b1c      	ldr	r3, [pc, #112]	; (8001eac <sd_ini+0x164>)
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	701a      	strb	r2, [r3, #0]
 8001e40:	23e9      	movs	r3, #233	; 0xe9
 8001e42:	71bb      	strb	r3, [r7, #6]
 8001e44:	e004      	b.n	8001e50 <sd_ini+0x108>
			    }
			    else
			    {
			      sdinfo.type = CT_MMC; cmd = CMD1; // MMCv3
 8001e46:	4b19      	ldr	r3, [pc, #100]	; (8001eac <sd_ini+0x164>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	701a      	strb	r2, [r3, #0]
 8001e4c:	2341      	movs	r3, #65	; 0x41
 8001e4e:	71bb      	strb	r3, [r7, #6]
			    }
			    for (tmr = 25000; tmr && SD_cmd(cmd, 0); tmr--) ; // Wait for leaving idle state
 8001e50:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8001e54:	80bb      	strh	r3, [r7, #4]
 8001e56:	e005      	b.n	8001e64 <sd_ini+0x11c>
 8001e58:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	80bb      	strh	r3, [r7, #4]
 8001e64:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d007      	beq.n	8001e7c <sd_ini+0x134>
 8001e6c:	79bb      	ldrb	r3, [r7, #6]
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ff07 	bl	8001c84 <SD_cmd>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1ed      	bne.n	8001e58 <sd_ini+0x110>
			    if (!tmr || SD_cmd(CMD16, 512) != 0) // Set R/W block length to 512
 8001e7c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d007      	beq.n	8001e94 <sd_ini+0x14c>
 8001e84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e88:	2050      	movs	r0, #80	; 0x50
 8001e8a:	f7ff fefb 	bl	8001c84 <SD_cmd>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d005      	beq.n	8001ea0 <sd_ini+0x158>
			    sdinfo.type = 0;
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <sd_ini+0x164>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	701a      	strb	r2, [r3, #0]
 8001e9a:	e001      	b.n	8001ea0 <sd_ini+0x158>

	  }
	  else
	  {

	    return 1;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e000      	b.n	8001ea2 <sd_ini+0x15a>
	  }




  return 0;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd90      	pop	{r4, r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20001a5c 	.word	0x20001a5c

08001eb0 <Error>:

static void Error (void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  //LD_ON;
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <SPI_wait_ready>:

uint8_t SPI_wait_ready(void)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
  uint8_t res;
  uint16_t cnt;
  cnt=0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	80fb      	strh	r3, [r7, #6]
  do {
    res=SPI_ReceiveByte();
 8001ec8:	f000 f863 	bl	8001f92 <SPI_ReceiveByte>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	717b      	strb	r3, [r7, #5]
    cnt++;
 8001ed0:	88fb      	ldrh	r3, [r7, #6]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	80fb      	strh	r3, [r7, #6]
  } while ( (res!=0xFF)&&(cnt<0xFFFF) );
 8001ed6:	797b      	ldrb	r3, [r7, #5]
 8001ed8:	2bff      	cmp	r3, #255	; 0xff
 8001eda:	d004      	beq.n	8001ee6 <SPI_wait_ready+0x28>
 8001edc:	88fb      	ldrh	r3, [r7, #6]
 8001ede:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d1f0      	bne.n	8001ec8 <SPI_wait_ready+0xa>
  if (cnt>=0xFFFF) return 1;
 8001ee6:	88fb      	ldrh	r3, [r7, #6]
 8001ee8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d101      	bne.n	8001ef4 <SPI_wait_ready+0x36>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e000      	b.n	8001ef6 <SPI_wait_ready+0x38>
  return res;
 8001ef4:	797b      	ldrb	r3, [r7, #5]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <SPIx_Write_Multi>:
{
	if(HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_READY) return F_OK;
	else return F_ERR;
}
F_RES SPIx_Write_Multi(uint8_t* tx_buf,uint32_t size)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af02      	add	r7, sp, #8
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
	if(HAL_SPI_TransmitReceive(&hspi1, tx_buf, spi_rx_buffer, size,HAL_MAX_DELAY)==HAL_OK) return F_OK;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8001f12:	9200      	str	r2, [sp, #0]
 8001f14:	4a07      	ldr	r2, [pc, #28]	; (8001f34 <SPIx_Write_Multi+0x34>)
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	4807      	ldr	r0, [pc, #28]	; (8001f38 <SPIx_Write_Multi+0x38>)
 8001f1a:	f004 fb04 	bl	8006526 <HAL_SPI_TransmitReceive>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <SPIx_Write_Multi+0x28>
 8001f24:	2300      	movs	r3, #0
 8001f26:	e000      	b.n	8001f2a <SPIx_Write_Multi+0x2a>
		else return F_ERR;
 8001f28:	2301      	movs	r3, #1
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20001a84 	.word	0x20001a84
 8001f38:	200007e8 	.word	0x200007e8

08001f3c <SPIx_WriteRead>:
	if(HAL_SPI_Transmit_DMA(&hspi1, tx_buf, size)==HAL_OK) return F_OK;
	else return F_ERR;
}

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af02      	add	r7, sp, #8
 8001f42:	4603      	mov	r3, r0
 8001f44:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 8001f4a:	f107 020f 	add.w	r2, r7, #15
 8001f4e:	1df9      	adds	r1, r7, #7
 8001f50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	2301      	movs	r3, #1
 8001f58:	4806      	ldr	r0, [pc, #24]	; (8001f74 <SPIx_WriteRead+0x38>)
 8001f5a:	f004 fae4 	bl	8006526 <HAL_SPI_TransmitReceive>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <SPIx_WriteRead+0x2c>
  {
    Error();
 8001f64:	f7ff ffa4 	bl	8001eb0 <Error>
  }
  return receivedbyte;
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	200007e8 	.word	0x200007e8

08001f78 <SPI_SendByte>:

void SPI_SendByte(uint8_t bt)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	71fb      	strb	r3, [r7, #7]
  SPIx_WriteRead(bt);
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff ffd9 	bl	8001f3c <SPIx_WriteRead>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <SPI_ReceiveByte>:

uint8_t SPI_ReceiveByte(void)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
  uint8_t bt = SPIx_WriteRead(0xFF);
 8001f98:	20ff      	movs	r0, #255	; 0xff
 8001f9a:	f7ff ffcf 	bl	8001f3c <SPIx_WriteRead>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71fb      	strb	r3, [r7, #7]
  return bt;
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <SPI_Release>:
void SPI_Release(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  SPIx_WriteRead(0xFF);
 8001fb0:	20ff      	movs	r0, #255	; 0xff
 8001fb2:	f7ff ffc3 	bl	8001f3c <SPIx_WriteRead>
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <SD_Read_Block>:

uint8_t SD_Read_Block (uint8_t *buff, uint32_t lba)
{
 8001fba:	b590      	push	{r4, r7, lr}
 8001fbc:	b085      	sub	sp, #20
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
 8001fc2:	6039      	str	r1, [r7, #0]
  uint8_t result;
  uint16_t cnt;

  result=SD_cmd (CMD17, lba);
 8001fc4:	6839      	ldr	r1, [r7, #0]
 8001fc6:	2051      	movs	r0, #81	; 0x51
 8001fc8:	f7ff fe5c 	bl	8001c84 <SD_cmd>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	737b      	strb	r3, [r7, #13]
  if (result!=0x00){
 8001fd0:	7b7b      	ldrb	r3, [r7, #13]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <SD_Read_Block+0x20>
	  return 5;
 8001fd6:	2305      	movs	r3, #5
 8001fd8:	e02f      	b.n	800203a <SD_Read_Block+0x80>
  }

  SPI_Release();
 8001fda:	f7ff ffe7 	bl	8001fac <SPI_Release>
   cnt=0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	81fb      	strh	r3, [r7, #14]
   do{
     result=SPI_ReceiveByte();
 8001fe2:	f7ff ffd6 	bl	8001f92 <SPI_ReceiveByte>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	737b      	strb	r3, [r7, #13]
     cnt++;
 8001fea:	89fb      	ldrh	r3, [r7, #14]
 8001fec:	3301      	adds	r3, #1
 8001fee:	81fb      	strh	r3, [r7, #14]
   } while ( (result!=0xFE)&&(cnt<0xFFFF) );
 8001ff0:	7b7b      	ldrb	r3, [r7, #13]
 8001ff2:	2bfe      	cmp	r3, #254	; 0xfe
 8001ff4:	d004      	beq.n	8002000 <SD_Read_Block+0x46>
 8001ff6:	89fb      	ldrh	r3, [r7, #14]
 8001ff8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d1f0      	bne.n	8001fe2 <SD_Read_Block+0x28>
   if (cnt>=0xFFFF) {
 8002000:	89fb      	ldrh	r3, [r7, #14]
 8002002:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002006:	4293      	cmp	r3, r2
 8002008:	d101      	bne.n	800200e <SD_Read_Block+0x54>
	   return 5;
 800200a:	2305      	movs	r3, #5
 800200c:	e015      	b.n	800203a <SD_Read_Block+0x80>
   }
   for (cnt=0;cnt<512;cnt++) buff[cnt]=SPI_ReceiveByte();
 800200e:	2300      	movs	r3, #0
 8002010:	81fb      	strh	r3, [r7, #14]
 8002012:	e009      	b.n	8002028 <SD_Read_Block+0x6e>
 8002014:	89fb      	ldrh	r3, [r7, #14]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	18d4      	adds	r4, r2, r3
 800201a:	f7ff ffba 	bl	8001f92 <SPI_ReceiveByte>
 800201e:	4603      	mov	r3, r0
 8002020:	7023      	strb	r3, [r4, #0]
 8002022:	89fb      	ldrh	r3, [r7, #14]
 8002024:	3301      	adds	r3, #1
 8002026:	81fb      	strh	r3, [r7, #14]
 8002028:	89fb      	ldrh	r3, [r7, #14]
 800202a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800202e:	d3f1      	bcc.n	8002014 <SD_Read_Block+0x5a>
   SPI_Release();
 8002030:	f7ff ffbc 	bl	8001fac <SPI_Release>
   SPI_Release();
 8002034:	f7ff ffba 	bl	8001fac <SPI_Release>



  return 0;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	bd90      	pop	{r4, r7, pc}
	...

08002044 <SD_Write_Blocks>:

uint8_t SD_Write_Blocks (uint8_t *buff, uint32_t lba,uint16_t count)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	4613      	mov	r3, r2
 8002050:	80fb      	strh	r3, [r7, #6]
  tick1=xTaskGetTickCount();
 8002052:	f010 f961 	bl	8012318 <xTaskGetTickCount>
 8002056:	4603      	mov	r3, r0
 8002058:	4a39      	ldr	r2, [pc, #228]	; (8002140 <SD_Write_Blocks+0xfc>)
 800205a:	6013      	str	r3, [r2, #0]
  uint8_t result;
  uint16_t cnt;


  result=SD_cmd(CMD25,lba);//CMD25
 800205c:	68b9      	ldr	r1, [r7, #8]
 800205e:	2059      	movs	r0, #89	; 0x59
 8002060:	f7ff fe10 	bl	8001c84 <SD_cmd>
 8002064:	4603      	mov	r3, r0
 8002066:	75fb      	strb	r3, [r7, #23]
  if (result!=0x00){
 8002068:	7dfb      	ldrb	r3, [r7, #23]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <SD_Write_Blocks+0x2e>
	  return 6;
 800206e:	2306      	movs	r3, #6
 8002070:	e061      	b.n	8002136 <SD_Write_Blocks+0xf2>
  }
  SPI_Release();  //1byte gap
 8002072:	f7ff ff9b 	bl	8001fac <SPI_Release>

  for(int i=0;i<count;i++){
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
 800207a:	e035      	b.n	80020e8 <SD_Write_Blocks+0xa4>
   SPI_SendByte (0xFC);//token CMD25
 800207c:	20fc      	movs	r0, #252	; 0xfc
 800207e:	f7ff ff7b 	bl	8001f78 <SPI_SendByte>

   SPIx_Write_Multi(buff,512);
 8002082:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f7ff ff3a 	bl	8001f00 <SPIx_Write_Multi>
   buff+=512;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002092:	60fb      	str	r3, [r7, #12]
   SPI_Release();   //CRC
 8002094:	f7ff ff8a 	bl	8001fac <SPI_Release>
   SPI_Release();   //CRC
 8002098:	f7ff ff88 	bl	8001fac <SPI_Release>


   result=SPI_ReceiveByte();
 800209c:	f7ff ff79 	bl	8001f92 <SPI_ReceiveByte>
 80020a0:	4603      	mov	r3, r0
 80020a2:	75fb      	strb	r3, [r7, #23]
   if ((result&0x1F)!=0x05) {
 80020a4:	7dfb      	ldrb	r3, [r7, #23]
 80020a6:	f003 031f 	and.w	r3, r3, #31
 80020aa:	2b05      	cmp	r3, #5
 80020ac:	d001      	beq.n	80020b2 <SD_Write_Blocks+0x6e>
	  return 6;
 80020ae:	2306      	movs	r3, #6
 80020b0:	e041      	b.n	8002136 <SD_Write_Blocks+0xf2>
   }
   cnt=0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	83fb      	strh	r3, [r7, #30]
   do {
    result=SPI_ReceiveByte();
 80020b6:	f7ff ff6c 	bl	8001f92 <SPI_ReceiveByte>
 80020ba:	4603      	mov	r3, r0
 80020bc:	75fb      	strb	r3, [r7, #23]
    cnt++;
 80020be:	8bfb      	ldrh	r3, [r7, #30]
 80020c0:	3301      	adds	r3, #1
 80020c2:	83fb      	strh	r3, [r7, #30]
   } while ( (result!=0xFF)&&(cnt<0xFFFF) );
 80020c4:	7dfb      	ldrb	r3, [r7, #23]
 80020c6:	2bff      	cmp	r3, #255	; 0xff
 80020c8:	d004      	beq.n	80020d4 <SD_Write_Blocks+0x90>
 80020ca:	8bfb      	ldrh	r3, [r7, #30]
 80020cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d1f0      	bne.n	80020b6 <SD_Write_Blocks+0x72>
   if (cnt>=0xFFFF) {
 80020d4:	8bfb      	ldrh	r3, [r7, #30]
 80020d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020da:	4293      	cmp	r3, r2
 80020dc:	d101      	bne.n	80020e2 <SD_Write_Blocks+0x9e>
	  return 6;
 80020de:	2306      	movs	r3, #6
 80020e0:	e029      	b.n	8002136 <SD_Write_Blocks+0xf2>
  for(int i=0;i<count;i++){
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	3301      	adds	r3, #1
 80020e6:	61bb      	str	r3, [r7, #24]
 80020e8:	88fb      	ldrh	r3, [r7, #6]
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	dbc5      	blt.n	800207c <SD_Write_Blocks+0x38>
   }
  }

  SPI_SendByte (0xFD); //stop transaction token for CMD25
 80020f0:	20fd      	movs	r0, #253	; 0xfd
 80020f2:	f7ff ff41 	bl	8001f78 <SPI_SendByte>
  SPI_Release();       //1byte gap
 80020f6:	f7ff ff59 	bl	8001fac <SPI_Release>
  cnt=0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	83fb      	strh	r3, [r7, #30]
  do {
	result=SPI_ReceiveByte();
 80020fe:	f7ff ff48 	bl	8001f92 <SPI_ReceiveByte>
 8002102:	4603      	mov	r3, r0
 8002104:	75fb      	strb	r3, [r7, #23]
	cnt++;
 8002106:	8bfb      	ldrh	r3, [r7, #30]
 8002108:	3301      	adds	r3, #1
 800210a:	83fb      	strh	r3, [r7, #30]
  } while ( (result!=0xFF)&&(cnt<0xFFFF) );
 800210c:	7dfb      	ldrb	r3, [r7, #23]
 800210e:	2bff      	cmp	r3, #255	; 0xff
 8002110:	d004      	beq.n	800211c <SD_Write_Blocks+0xd8>
 8002112:	8bfb      	ldrh	r3, [r7, #30]
 8002114:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002118:	4293      	cmp	r3, r2
 800211a:	d1f0      	bne.n	80020fe <SD_Write_Blocks+0xba>
  if (cnt>=0xFFFF) return 6;
 800211c:	8bfb      	ldrh	r3, [r7, #30]
 800211e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002122:	4293      	cmp	r3, r2
 8002124:	d101      	bne.n	800212a <SD_Write_Blocks+0xe6>
 8002126:	2306      	movs	r3, #6
 8002128:	e005      	b.n	8002136 <SD_Write_Blocks+0xf2>
  tick2=xTaskGetTickCount();
 800212a:	f010 f8f5 	bl	8012318 <xTaskGetTickCount>
 800212e:	4603      	mov	r3, r0
 8002130:	4a04      	ldr	r2, [pc, #16]	; (8002144 <SD_Write_Blocks+0x100>)
 8002132:	6013      	str	r3, [r2, #0]
  return 0;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3720      	adds	r7, #32
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20001a50 	.word	0x20001a50
 8002144:	20001a54 	.word	0x20001a54

08002148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_MspInit+0x54>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	4a11      	ldr	r2, [pc, #68]	; (800219c <HAL_MspInit+0x54>)
 8002158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800215c:	6453      	str	r3, [r2, #68]	; 0x44
 800215e:	4b0f      	ldr	r3, [pc, #60]	; (800219c <HAL_MspInit+0x54>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002166:	607b      	str	r3, [r7, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	603b      	str	r3, [r7, #0]
 800216e:	4b0b      	ldr	r3, [pc, #44]	; (800219c <HAL_MspInit+0x54>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	4a0a      	ldr	r2, [pc, #40]	; (800219c <HAL_MspInit+0x54>)
 8002174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002178:	6413      	str	r3, [r2, #64]	; 0x40
 800217a:	4b08      	ldr	r3, [pc, #32]	; (800219c <HAL_MspInit+0x54>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002182:	603b      	str	r3, [r7, #0]
 8002184:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002186:	2200      	movs	r2, #0
 8002188:	210f      	movs	r1, #15
 800218a:	f06f 0001 	mvn.w	r0, #1
 800218e:	f000 fc99 	bl	8002ac4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40023800 	.word	0x40023800

080021a0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021a8:	f107 0308 	add.w	r3, r7, #8
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a0c      	ldr	r2, [pc, #48]	; (80021ec <HAL_RTC_MspInit+0x4c>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d111      	bne.n	80021e4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021c0:	2302      	movs	r3, #2
 80021c2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80021c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021c8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021ca:	f107 0308 	add.w	r3, r7, #8
 80021ce:	4618      	mov	r0, r3
 80021d0:	f003 fd40 	bl	8005c54 <HAL_RCCEx_PeriphCLKConfig>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80021da:	f7ff fc3b 	bl	8001a54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021de:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <HAL_RTC_MspInit+0x50>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80021e4:	bf00      	nop
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40002800 	.word	0x40002800
 80021f0:	42470e3c 	.word	0x42470e3c

080021f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08a      	sub	sp, #40	; 0x28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fc:	f107 0314 	add.w	r3, r7, #20
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	60da      	str	r2, [r3, #12]
 800220a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a34      	ldr	r2, [pc, #208]	; (80022e4 <HAL_SPI_MspInit+0xf0>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d162      	bne.n	80022dc <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	4b33      	ldr	r3, [pc, #204]	; (80022e8 <HAL_SPI_MspInit+0xf4>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	4a32      	ldr	r2, [pc, #200]	; (80022e8 <HAL_SPI_MspInit+0xf4>)
 8002220:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002224:	6453      	str	r3, [r2, #68]	; 0x44
 8002226:	4b30      	ldr	r3, [pc, #192]	; (80022e8 <HAL_SPI_MspInit+0xf4>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	4b2c      	ldr	r3, [pc, #176]	; (80022e8 <HAL_SPI_MspInit+0xf4>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4a2b      	ldr	r2, [pc, #172]	; (80022e8 <HAL_SPI_MspInit+0xf4>)
 800223c:	f043 0302 	orr.w	r3, r3, #2
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	4b29      	ldr	r3, [pc, #164]	; (80022e8 <HAL_SPI_MspInit+0xf4>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800224e:	2338      	movs	r3, #56	; 0x38
 8002250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002252:	2302      	movs	r3, #2
 8002254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002256:	2301      	movs	r3, #1
 8002258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225a:	2303      	movs	r3, #3
 800225c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800225e:	2305      	movs	r3, #5
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002262:	f107 0314 	add.w	r3, r7, #20
 8002266:	4619      	mov	r1, r3
 8002268:	4820      	ldr	r0, [pc, #128]	; (80022ec <HAL_SPI_MspInit+0xf8>)
 800226a:	f001 faa9 	bl	80037c0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800226e:	4b20      	ldr	r3, [pc, #128]	; (80022f0 <HAL_SPI_MspInit+0xfc>)
 8002270:	4a20      	ldr	r2, [pc, #128]	; (80022f4 <HAL_SPI_MspInit+0x100>)
 8002272:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002274:	4b1e      	ldr	r3, [pc, #120]	; (80022f0 <HAL_SPI_MspInit+0xfc>)
 8002276:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800227a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800227c:	4b1c      	ldr	r3, [pc, #112]	; (80022f0 <HAL_SPI_MspInit+0xfc>)
 800227e:	2240      	movs	r2, #64	; 0x40
 8002280:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002282:	4b1b      	ldr	r3, [pc, #108]	; (80022f0 <HAL_SPI_MspInit+0xfc>)
 8002284:	2200      	movs	r2, #0
 8002286:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002288:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <HAL_SPI_MspInit+0xfc>)
 800228a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800228e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002290:	4b17      	ldr	r3, [pc, #92]	; (80022f0 <HAL_SPI_MspInit+0xfc>)
 8002292:	2200      	movs	r2, #0
 8002294:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002296:	4b16      	ldr	r3, [pc, #88]	; (80022f0 <HAL_SPI_MspInit+0xfc>)
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800229c:	4b14      	ldr	r3, [pc, #80]	; (80022f0 <HAL_SPI_MspInit+0xfc>)
 800229e:	2200      	movs	r2, #0
 80022a0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80022a2:	4b13      	ldr	r3, [pc, #76]	; (80022f0 <HAL_SPI_MspInit+0xfc>)
 80022a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022a8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022aa:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <HAL_SPI_MspInit+0xfc>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80022b0:	480f      	ldr	r0, [pc, #60]	; (80022f0 <HAL_SPI_MspInit+0xfc>)
 80022b2:	f000 fc31 	bl	8002b18 <HAL_DMA_Init>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80022bc:	f7ff fbca 	bl	8001a54 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <HAL_SPI_MspInit+0xfc>)
 80022c4:	649a      	str	r2, [r3, #72]	; 0x48
 80022c6:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <HAL_SPI_MspInit+0xfc>)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80022cc:	2200      	movs	r2, #0
 80022ce:	2105      	movs	r1, #5
 80022d0:	2023      	movs	r0, #35	; 0x23
 80022d2:	f000 fbf7 	bl	8002ac4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80022d6:	2023      	movs	r0, #35	; 0x23
 80022d8:	f000 fc10 	bl	8002afc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80022dc:	bf00      	nop
 80022de:	3728      	adds	r7, #40	; 0x28
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40013000 	.word	0x40013000
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40020400 	.word	0x40020400
 80022f0:	20000840 	.word	0x20000840
 80022f4:	40026458 	.word	0x40026458

080022f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002308:	d115      	bne.n	8002336 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <HAL_TIM_Base_MspInit+0x48>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	4a0b      	ldr	r2, [pc, #44]	; (8002340 <HAL_TIM_Base_MspInit+0x48>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6413      	str	r3, [r2, #64]	; 0x40
 800231a:	4b09      	ldr	r3, [pc, #36]	; (8002340 <HAL_TIM_Base_MspInit+0x48>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002326:	2200      	movs	r2, #0
 8002328:	2105      	movs	r1, #5
 800232a:	201c      	movs	r0, #28
 800232c:	f000 fbca 	bl	8002ac4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002330:	201c      	movs	r0, #28
 8002332:	f000 fbe3 	bl	8002afc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002336:	bf00      	nop
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800

08002344 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08a      	sub	sp, #40	; 0x28
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234c:	f107 0314 	add.w	r3, r7, #20
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a1d      	ldr	r2, [pc, #116]	; (80023d8 <HAL_UART_MspInit+0x94>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d134      	bne.n	80023d0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	4b1c      	ldr	r3, [pc, #112]	; (80023dc <HAL_UART_MspInit+0x98>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	4a1b      	ldr	r2, [pc, #108]	; (80023dc <HAL_UART_MspInit+0x98>)
 8002370:	f043 0310 	orr.w	r3, r3, #16
 8002374:	6453      	str	r3, [r2, #68]	; 0x44
 8002376:	4b19      	ldr	r3, [pc, #100]	; (80023dc <HAL_UART_MspInit+0x98>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	f003 0310 	and.w	r3, r3, #16
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	4b15      	ldr	r3, [pc, #84]	; (80023dc <HAL_UART_MspInit+0x98>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	4a14      	ldr	r2, [pc, #80]	; (80023dc <HAL_UART_MspInit+0x98>)
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	6313      	str	r3, [r2, #48]	; 0x30
 8002392:	4b12      	ldr	r3, [pc, #72]	; (80023dc <HAL_UART_MspInit+0x98>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800239e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a4:	2302      	movs	r3, #2
 80023a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ac:	2303      	movs	r3, #3
 80023ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023b0:	2307      	movs	r3, #7
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	4619      	mov	r1, r3
 80023ba:	4809      	ldr	r0, [pc, #36]	; (80023e0 <HAL_UART_MspInit+0x9c>)
 80023bc:	f001 fa00 	bl	80037c0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80023c0:	2200      	movs	r2, #0
 80023c2:	2105      	movs	r1, #5
 80023c4:	2025      	movs	r0, #37	; 0x25
 80023c6:	f000 fb7d 	bl	8002ac4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023ca:	2025      	movs	r0, #37	; 0x25
 80023cc:	f000 fb96 	bl	8002afc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023d0:	bf00      	nop
 80023d2:	3728      	adds	r7, #40	; 0x28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40011000 	.word	0x40011000
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40020000 	.word	0x40020000

080023e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08c      	sub	sp, #48	; 0x30
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80023f4:	2200      	movs	r2, #0
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	2019      	movs	r0, #25
 80023fa:	f000 fb63 	bl	8002ac4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80023fe:	2019      	movs	r0, #25
 8002400:	f000 fb7c 	bl	8002afc <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002404:	2300      	movs	r3, #0
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	4b1f      	ldr	r3, [pc, #124]	; (8002488 <HAL_InitTick+0xa4>)
 800240a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240c:	4a1e      	ldr	r2, [pc, #120]	; (8002488 <HAL_InitTick+0xa4>)
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	6453      	str	r3, [r2, #68]	; 0x44
 8002414:	4b1c      	ldr	r3, [pc, #112]	; (8002488 <HAL_InitTick+0xa4>)
 8002416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002420:	f107 0210 	add.w	r2, r7, #16
 8002424:	f107 0314 	add.w	r3, r7, #20
 8002428:	4611      	mov	r1, r2
 800242a:	4618      	mov	r0, r3
 800242c:	f003 fbe0 	bl	8005bf0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002430:	f003 fbca 	bl	8005bc8 <HAL_RCC_GetPCLK2Freq>
 8002434:	4603      	mov	r3, r0
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800243a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243c:	4a13      	ldr	r2, [pc, #76]	; (800248c <HAL_InitTick+0xa8>)
 800243e:	fba2 2303 	umull	r2, r3, r2, r3
 8002442:	0c9b      	lsrs	r3, r3, #18
 8002444:	3b01      	subs	r3, #1
 8002446:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002448:	4b11      	ldr	r3, [pc, #68]	; (8002490 <HAL_InitTick+0xac>)
 800244a:	4a12      	ldr	r2, [pc, #72]	; (8002494 <HAL_InitTick+0xb0>)
 800244c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800244e:	4b10      	ldr	r3, [pc, #64]	; (8002490 <HAL_InitTick+0xac>)
 8002450:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002454:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002456:	4a0e      	ldr	r2, [pc, #56]	; (8002490 <HAL_InitTick+0xac>)
 8002458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <HAL_InitTick+0xac>)
 800245e:	2200      	movs	r2, #0
 8002460:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002462:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <HAL_InitTick+0xac>)
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002468:	4809      	ldr	r0, [pc, #36]	; (8002490 <HAL_InitTick+0xac>)
 800246a:	f004 fbe7 	bl	8006c3c <HAL_TIM_Base_Init>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d104      	bne.n	800247e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002474:	4806      	ldr	r0, [pc, #24]	; (8002490 <HAL_InitTick+0xac>)
 8002476:	f004 fc31 	bl	8006cdc <HAL_TIM_Base_Start_IT>
 800247a:	4603      	mov	r3, r0
 800247c:	e000      	b.n	8002480 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
}
 8002480:	4618      	mov	r0, r3
 8002482:	3730      	adds	r7, #48	; 0x30
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40023800 	.word	0x40023800
 800248c:	431bde83 	.word	0x431bde83
 8002490:	20001c84 	.word	0x20001c84
 8002494:	40010000 	.word	0x40010000

08002498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800249c:	e7fe      	b.n	800249c <NMI_Handler+0x4>

0800249e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024a2:	e7fe      	b.n	80024a2 <HardFault_Handler+0x4>

080024a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024a8:	e7fe      	b.n	80024a8 <MemManage_Handler+0x4>

080024aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ae:	e7fe      	b.n	80024ae <BusFault_Handler+0x4>

080024b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024b4:	e7fe      	b.n	80024b4 <UsageFault_Handler+0x4>

080024b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024c8:	4802      	ldr	r0, [pc, #8]	; (80024d4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80024ca:	f004 fc77 	bl	8006dbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20001c84 	.word	0x20001c84

080024d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024dc:	4802      	ldr	r0, [pc, #8]	; (80024e8 <TIM2_IRQHandler+0x10>)
 80024de:	f004 fc6d 	bl	8006dbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	200008a0 	.word	0x200008a0

080024ec <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80024f0:	4802      	ldr	r0, [pc, #8]	; (80024fc <SPI1_IRQHandler+0x10>)
 80024f2:	f004 f9bb 	bl	800686c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	200007e8 	.word	0x200007e8

08002500 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002504:	4802      	ldr	r0, [pc, #8]	; (8002510 <USART1_IRQHandler+0x10>)
 8002506:	f005 f8dd 	bl	80076c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	200008e8 	.word	0x200008e8

08002514 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002518:	4802      	ldr	r0, [pc, #8]	; (8002524 <DMA2_Stream3_IRQHandler+0x10>)
 800251a:	f000 fc3d 	bl	8002d98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000840 	.word	0x20000840

08002528 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800252c:	4802      	ldr	r0, [pc, #8]	; (8002538 <OTG_FS_IRQHandler+0x10>)
 800252e:	f001 fd67 	bl	8004000 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	2000c91c 	.word	0x2000c91c

0800253c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
	return 1;
 8002540:	2301      	movs	r3, #1
}
 8002542:	4618      	mov	r0, r3
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <_kill>:

int _kill(int pid, int sig)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002556:	f011 fa9b 	bl	8013a90 <__errno>
 800255a:	4603      	mov	r3, r0
 800255c:	2216      	movs	r2, #22
 800255e:	601a      	str	r2, [r3, #0]
	return -1;
 8002560:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002564:	4618      	mov	r0, r3
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <_exit>:

void _exit (int status)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002574:	f04f 31ff 	mov.w	r1, #4294967295
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7ff ffe7 	bl	800254c <_kill>
	while (1) {}		/* Make sure we hang here */
 800257e:	e7fe      	b.n	800257e <_exit+0x12>

08002580 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	e00a      	b.n	80025a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002592:	f3af 8000 	nop.w
 8002596:	4601      	mov	r1, r0
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	60ba      	str	r2, [r7, #8]
 800259e:	b2ca      	uxtb	r2, r1
 80025a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	3301      	adds	r3, #1
 80025a6:	617b      	str	r3, [r7, #20]
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	dbf0      	blt.n	8002592 <_read+0x12>
	}

return len;
 80025b0:	687b      	ldr	r3, [r7, #4]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3718      	adds	r7, #24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b086      	sub	sp, #24
 80025be:	af00      	add	r7, sp, #0
 80025c0:	60f8      	str	r0, [r7, #12]
 80025c2:	60b9      	str	r1, [r7, #8]
 80025c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	e009      	b.n	80025e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	1c5a      	adds	r2, r3, #1
 80025d0:	60ba      	str	r2, [r7, #8]
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	3301      	adds	r3, #1
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	dbf1      	blt.n	80025cc <_write+0x12>
	}
	return len;
 80025e8:	687b      	ldr	r3, [r7, #4]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <_close>:

int _close(int file)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
	return -1;
 80025fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025fe:	4618      	mov	r0, r3
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
 8002612:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800261a:	605a      	str	r2, [r3, #4]
	return 0;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <_isatty>:

int _isatty(int file)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
	return 1;
 8002632:	2301      	movs	r3, #1
}
 8002634:	4618      	mov	r0, r3
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
	return 0;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
	...

0800265c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002664:	4a14      	ldr	r2, [pc, #80]	; (80026b8 <_sbrk+0x5c>)
 8002666:	4b15      	ldr	r3, [pc, #84]	; (80026bc <_sbrk+0x60>)
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002670:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <_sbrk+0x64>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d102      	bne.n	800267e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002678:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <_sbrk+0x64>)
 800267a:	4a12      	ldr	r2, [pc, #72]	; (80026c4 <_sbrk+0x68>)
 800267c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800267e:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <_sbrk+0x64>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4413      	add	r3, r2
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	429a      	cmp	r2, r3
 800268a:	d207      	bcs.n	800269c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800268c:	f011 fa00 	bl	8013a90 <__errno>
 8002690:	4603      	mov	r3, r0
 8002692:	220c      	movs	r2, #12
 8002694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002696:	f04f 33ff 	mov.w	r3, #4294967295
 800269a:	e009      	b.n	80026b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800269c:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <_sbrk+0x64>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026a2:	4b07      	ldr	r3, [pc, #28]	; (80026c0 <_sbrk+0x64>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4413      	add	r3, r2
 80026aa:	4a05      	ldr	r2, [pc, #20]	; (80026c0 <_sbrk+0x64>)
 80026ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ae:	68fb      	ldr	r3, [r7, #12]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20020000 	.word	0x20020000
 80026bc:	00000400 	.word	0x00000400
 80026c0:	20001ccc 	.word	0x20001ccc
 80026c4:	2000cc30 	.word	0x2000cc30

080026c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <SystemInit+0x20>)
 80026ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d2:	4a05      	ldr	r2, [pc, #20]	; (80026e8 <SystemInit+0x20>)
 80026d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026dc:	bf00      	nop
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <wav_file_open>:


extern UART_HandleTypeDef huart1;

F_RES wav_file_open(wav_file_typedef* self_object,char* filename)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  memcpy(self_object->header.chunk.prefix,"RIFF",4);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2204      	movs	r2, #4
 80026fa:	4920      	ldr	r1, [pc, #128]	; (800277c <wav_file_open+0x90>)
 80026fc:	4618      	mov	r0, r3
 80026fe:	f011 fafb 	bl	8013cf8 <memcpy>
  memcpy(self_object->header.chunk.postfix,"WAVE",4);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3308      	adds	r3, #8
 8002706:	2204      	movs	r2, #4
 8002708:	491d      	ldr	r1, [pc, #116]	; (8002780 <wav_file_open+0x94>)
 800270a:	4618      	mov	r0, r3
 800270c:	f011 faf4 	bl	8013cf8 <memcpy>
  memcpy(self_object->header.subchunk_fmt.prefix,"fmt ",4);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	330c      	adds	r3, #12
 8002714:	2204      	movs	r2, #4
 8002716:	491b      	ldr	r1, [pc, #108]	; (8002784 <wav_file_open+0x98>)
 8002718:	4618      	mov	r0, r3
 800271a:	f011 faed 	bl	8013cf8 <memcpy>
  memcpy(self_object->header.subchunk_data.prefix,"data",4);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3324      	adds	r3, #36	; 0x24
 8002722:	2204      	movs	r2, #4
 8002724:	4918      	ldr	r1, [pc, #96]	; (8002788 <wav_file_open+0x9c>)
 8002726:	4618      	mov	r0, r3
 8002728:	f011 fae6 	bl	8013cf8 <memcpy>
  self_object->data_counter=0;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8002734:	2200      	movs	r2, #0
 8002736:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800273a:	2200      	movs	r2, #0
 800273c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8002740:	2200      	movs	r2, #0
 8002742:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  if(f_open(&self_object->media.file,filename,FA_CREATE_ALWAYS|FA_WRITE)==FR_OK){
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3330      	adds	r3, #48	; 0x30
 800274a:	220a      	movs	r2, #10
 800274c:	6839      	ldr	r1, [r7, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f00c ffdc 	bl	800f70c <f_open>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10b      	bne.n	8002772 <wav_file_open+0x86>
   f_lseek(&self_object->media.file, sizeof(self_object->header));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8002760:	f04f 022c 	mov.w	r2, #44	; 0x2c
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	4608      	mov	r0, r1
 800276a:	f00d fd8c 	bl	8010286 <f_lseek>
   return F_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	e000      	b.n	8002774 <wav_file_open+0x88>
  }
  return F_ERR;
 8002772:	2301      	movs	r3, #1
}
 8002774:	4618      	mov	r0, r3
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	08015408 	.word	0x08015408
 8002780:	08015410 	.word	0x08015410
 8002784:	08015418 	.word	0x08015418
 8002788:	08015420 	.word	0x08015420

0800278c <wav_file_close>:

F_RES wav_file_close(wav_file_typedef* self_object)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
	self_object->header.subchunk_data.size=self_object->data_counter;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	629a      	str	r2, [r3, #40]	; 0x28
	self_object->header.chunk.size=36+self_object->data_counter;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	605a      	str	r2, [r3, #4]
 	f_lseek(&self_object->media.file, 0);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	4608      	mov	r0, r1
 80027b8:	f00d fd65 	bl	8010286 <f_lseek>
 	if(f_write(&self_object->media.file,(uint8_t*)&self_object->header,sizeof(self_object->header),(void*)&self_object->media.byteswritten)==FR_OK){
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 80027ca:	222c      	movs	r2, #44	; 0x2c
 80027cc:	f00d fa5f 	bl	800fc8e <f_write>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d106      	bne.n	80027e4 <wav_file_close+0x58>
 	  f_close(&self_object->media.file);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3330      	adds	r3, #48	; 0x30
 80027da:	4618      	mov	r0, r3
 80027dc:	f00d fd29 	bl	8010232 <f_close>
 	  return F_OK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	e000      	b.n	80027e6 <wav_file_close+0x5a>
 	}
 	return F_ERR;
 80027e4:	2301      	movs	r3, #1
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <wav_file_write>:

F_RES wav_file_write(wav_file_typedef* self_object,uint8_t* data,uint32_t length)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b086      	sub	sp, #24
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	60f8      	str	r0, [r7, #12]
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	607a      	str	r2, [r7, #4]
	FRESULT res;
	self_object->data_counter+=length;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	441a      	add	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	62da      	str	r2, [r3, #44]	; 0x2c
	res=f_write(&self_object->media.file,data,length,(void*)&self_object->media.byteswritten);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	68b9      	ldr	r1, [r7, #8]
 8002816:	f00d fa3a 	bl	800fc8e <f_write>
 800281a:	4603      	mov	r3, r0
 800281c:	75fb      	strb	r3, [r7, #23]
	if(res==FR_OK) return F_OK;
 800281e:	7dfb      	ldrb	r3, [r7, #23]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <wav_file_write+0x3a>
 8002824:	2300      	movs	r3, #0
 8002826:	e000      	b.n	800282a <wav_file_write+0x3c>
	return F_ERR;
 8002828:	2301      	movs	r3, #1
}
 800282a:	4618      	mov	r0, r3
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002834:	f8df d034 	ldr.w	sp, [pc, #52]	; 800286c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002838:	480d      	ldr	r0, [pc, #52]	; (8002870 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800283a:	490e      	ldr	r1, [pc, #56]	; (8002874 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800283c:	4a0e      	ldr	r2, [pc, #56]	; (8002878 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800283e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002840:	e002      	b.n	8002848 <LoopCopyDataInit>

08002842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002846:	3304      	adds	r3, #4

08002848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800284a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800284c:	d3f9      	bcc.n	8002842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800284e:	4a0b      	ldr	r2, [pc, #44]	; (800287c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002850:	4c0b      	ldr	r4, [pc, #44]	; (8002880 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002854:	e001      	b.n	800285a <LoopFillZerobss>

08002856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002858:	3204      	adds	r2, #4

0800285a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800285a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800285c:	d3fb      	bcc.n	8002856 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800285e:	f7ff ff33 	bl	80026c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002862:	f011 fa11 	bl	8013c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002866:	f7fe fbcb 	bl	8001000 <main>
  bx  lr    
 800286a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800286c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002874:	20000314 	.word	0x20000314
  ldr r2, =_sidata
 8002878:	08015b84 	.word	0x08015b84
  ldr r2, =_sbss
 800287c:	20000314 	.word	0x20000314
  ldr r4, =_ebss
 8002880:	2000cc30 	.word	0x2000cc30

08002884 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002884:	e7fe      	b.n	8002884 <ADC_IRQHandler>
	...

08002888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800288c:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <HAL_Init+0x40>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a0d      	ldr	r2, [pc, #52]	; (80028c8 <HAL_Init+0x40>)
 8002892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002896:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_Init+0x40>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a0a      	ldr	r2, [pc, #40]	; (80028c8 <HAL_Init+0x40>)
 800289e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028a4:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <HAL_Init+0x40>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a07      	ldr	r2, [pc, #28]	; (80028c8 <HAL_Init+0x40>)
 80028aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028b0:	2003      	movs	r0, #3
 80028b2:	f000 f8fc 	bl	8002aae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028b6:	200f      	movs	r0, #15
 80028b8:	f7ff fd94 	bl	80023e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028bc:	f7ff fc44 	bl	8002148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40023c00 	.word	0x40023c00

080028cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028d0:	4b06      	ldr	r3, [pc, #24]	; (80028ec <HAL_IncTick+0x20>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	461a      	mov	r2, r3
 80028d6:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <HAL_IncTick+0x24>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4413      	add	r3, r2
 80028dc:	4a04      	ldr	r2, [pc, #16]	; (80028f0 <HAL_IncTick+0x24>)
 80028de:	6013      	str	r3, [r2, #0]
}
 80028e0:	bf00      	nop
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	20000238 	.word	0x20000238
 80028f0:	20001cd0 	.word	0x20001cd0

080028f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  return uwTick;
 80028f8:	4b03      	ldr	r3, [pc, #12]	; (8002908 <HAL_GetTick+0x14>)
 80028fa:	681b      	ldr	r3, [r3, #0]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	20001cd0 	.word	0x20001cd0

0800290c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002914:	f7ff ffee 	bl	80028f4 <HAL_GetTick>
 8002918:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002924:	d005      	beq.n	8002932 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002926:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <HAL_Delay+0x44>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4413      	add	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002932:	bf00      	nop
 8002934:	f7ff ffde 	bl	80028f4 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	429a      	cmp	r2, r3
 8002942:	d8f7      	bhi.n	8002934 <HAL_Delay+0x28>
  {
  }
}
 8002944:	bf00      	nop
 8002946:	bf00      	nop
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20000238 	.word	0x20000238

08002954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002964:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <__NVIC_SetPriorityGrouping+0x44>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002970:	4013      	ands	r3, r2
 8002972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800297c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002986:	4a04      	ldr	r2, [pc, #16]	; (8002998 <__NVIC_SetPriorityGrouping+0x44>)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	60d3      	str	r3, [r2, #12]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029a0:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <__NVIC_GetPriorityGrouping+0x18>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	0a1b      	lsrs	r3, r3, #8
 80029a6:	f003 0307 	and.w	r3, r3, #7
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	db0b      	blt.n	80029e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	f003 021f 	and.w	r2, r3, #31
 80029d0:	4907      	ldr	r1, [pc, #28]	; (80029f0 <__NVIC_EnableIRQ+0x38>)
 80029d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d6:	095b      	lsrs	r3, r3, #5
 80029d8:	2001      	movs	r0, #1
 80029da:	fa00 f202 	lsl.w	r2, r0, r2
 80029de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	e000e100 	.word	0xe000e100

080029f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	6039      	str	r1, [r7, #0]
 80029fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	db0a      	blt.n	8002a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	490c      	ldr	r1, [pc, #48]	; (8002a40 <__NVIC_SetPriority+0x4c>)
 8002a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a12:	0112      	lsls	r2, r2, #4
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	440b      	add	r3, r1
 8002a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a1c:	e00a      	b.n	8002a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	4908      	ldr	r1, [pc, #32]	; (8002a44 <__NVIC_SetPriority+0x50>)
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	3b04      	subs	r3, #4
 8002a2c:	0112      	lsls	r2, r2, #4
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	440b      	add	r3, r1
 8002a32:	761a      	strb	r2, [r3, #24]
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	e000e100 	.word	0xe000e100
 8002a44:	e000ed00 	.word	0xe000ed00

08002a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b089      	sub	sp, #36	; 0x24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f1c3 0307 	rsb	r3, r3, #7
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	bf28      	it	cs
 8002a66:	2304      	movcs	r3, #4
 8002a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	2b06      	cmp	r3, #6
 8002a70:	d902      	bls.n	8002a78 <NVIC_EncodePriority+0x30>
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3b03      	subs	r3, #3
 8002a76:	e000      	b.n	8002a7a <NVIC_EncodePriority+0x32>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43da      	mvns	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	401a      	ands	r2, r3
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a90:	f04f 31ff 	mov.w	r1, #4294967295
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9a:	43d9      	mvns	r1, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa0:	4313      	orrs	r3, r2
         );
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3724      	adds	r7, #36	; 0x24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff ff4c 	bl	8002954 <__NVIC_SetPriorityGrouping>
}
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
 8002ad0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ad6:	f7ff ff61 	bl	800299c <__NVIC_GetPriorityGrouping>
 8002ada:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	68b9      	ldr	r1, [r7, #8]
 8002ae0:	6978      	ldr	r0, [r7, #20]
 8002ae2:	f7ff ffb1 	bl	8002a48 <NVIC_EncodePriority>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aec:	4611      	mov	r1, r2
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff ff80 	bl	80029f4 <__NVIC_SetPriority>
}
 8002af4:	bf00      	nop
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff ff54 	bl	80029b8 <__NVIC_EnableIRQ>
}
 8002b10:	bf00      	nop
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b24:	f7ff fee6 	bl	80028f4 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e099      	b.n	8002c68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0201 	bic.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b54:	e00f      	b.n	8002b76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b56:	f7ff fecd 	bl	80028f4 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b05      	cmp	r3, #5
 8002b62:	d908      	bls.n	8002b76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2220      	movs	r2, #32
 8002b68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e078      	b.n	8002c68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1e8      	bne.n	8002b56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	4b38      	ldr	r3, [pc, #224]	; (8002c70 <HAL_DMA_Init+0x158>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ba2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d107      	bne.n	8002be0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f023 0307 	bic.w	r3, r3, #7
 8002bf6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d117      	bne.n	8002c3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00e      	beq.n	8002c3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 fa7b 	bl	8003118 <DMA_CheckFifoParam>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d008      	beq.n	8002c3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2240      	movs	r2, #64	; 0x40
 8002c2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c36:	2301      	movs	r3, #1
 8002c38:	e016      	b.n	8002c68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fa32 	bl	80030ac <DMA_CalcBaseAndBitshift>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c50:	223f      	movs	r2, #63	; 0x3f
 8002c52:	409a      	lsls	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	f010803f 	.word	0xf010803f

08002c74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c80:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c82:	f7ff fe37 	bl	80028f4 <HAL_GetTick>
 8002c86:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d008      	beq.n	8002ca6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2280      	movs	r2, #128	; 0x80
 8002c98:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e052      	b.n	8002d4c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0216 	bic.w	r2, r2, #22
 8002cb4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695a      	ldr	r2, [r3, #20]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cc4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d103      	bne.n	8002cd6 <HAL_DMA_Abort+0x62>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d007      	beq.n	8002ce6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0208 	bic.w	r2, r2, #8
 8002ce4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0201 	bic.w	r2, r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cf6:	e013      	b.n	8002d20 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cf8:	f7ff fdfc 	bl	80028f4 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b05      	cmp	r3, #5
 8002d04:	d90c      	bls.n	8002d20 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2203      	movs	r2, #3
 8002d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e015      	b.n	8002d4c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1e4      	bne.n	8002cf8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d32:	223f      	movs	r2, #63	; 0x3f
 8002d34:	409a      	lsls	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d004      	beq.n	8002d72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2280      	movs	r2, #128	; 0x80
 8002d6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e00c      	b.n	8002d8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2205      	movs	r2, #5
 8002d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0201 	bic.w	r2, r2, #1
 8002d88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002da4:	4b8e      	ldr	r3, [pc, #568]	; (8002fe0 <HAL_DMA_IRQHandler+0x248>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a8e      	ldr	r2, [pc, #568]	; (8002fe4 <HAL_DMA_IRQHandler+0x24c>)
 8002daa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dae:	0a9b      	lsrs	r3, r3, #10
 8002db0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc2:	2208      	movs	r2, #8
 8002dc4:	409a      	lsls	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d01a      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d013      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0204 	bic.w	r2, r2, #4
 8002dea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df0:	2208      	movs	r2, #8
 8002df2:	409a      	lsls	r2, r3
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfc:	f043 0201 	orr.w	r2, r3, #1
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e08:	2201      	movs	r2, #1
 8002e0a:	409a      	lsls	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d012      	beq.n	8002e3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00b      	beq.n	8002e3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e26:	2201      	movs	r2, #1
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e32:	f043 0202 	orr.w	r2, r3, #2
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3e:	2204      	movs	r2, #4
 8002e40:	409a      	lsls	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4013      	ands	r3, r2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d012      	beq.n	8002e70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00b      	beq.n	8002e70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	409a      	lsls	r2, r3
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e68:	f043 0204 	orr.w	r2, r3, #4
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e74:	2210      	movs	r2, #16
 8002e76:	409a      	lsls	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d043      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d03c      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e92:	2210      	movs	r2, #16
 8002e94:	409a      	lsls	r2, r3
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d018      	beq.n	8002eda <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d108      	bne.n	8002ec8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d024      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	4798      	blx	r3
 8002ec6:	e01f      	b.n	8002f08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d01b      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	4798      	blx	r3
 8002ed8:	e016      	b.n	8002f08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d107      	bne.n	8002ef8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0208 	bic.w	r2, r2, #8
 8002ef6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	409a      	lsls	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4013      	ands	r3, r2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 808f 	beq.w	8003038 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 8087 	beq.w	8003038 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2e:	2220      	movs	r2, #32
 8002f30:	409a      	lsls	r2, r3
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b05      	cmp	r3, #5
 8002f40:	d136      	bne.n	8002fb0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0216 	bic.w	r2, r2, #22
 8002f50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695a      	ldr	r2, [r3, #20]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d103      	bne.n	8002f72 <HAL_DMA_IRQHandler+0x1da>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d007      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0208 	bic.w	r2, r2, #8
 8002f80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f86:	223f      	movs	r2, #63	; 0x3f
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d07e      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	4798      	blx	r3
        }
        return;
 8002fae:	e079      	b.n	80030a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d01d      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10d      	bne.n	8002fe8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d031      	beq.n	8003038 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	4798      	blx	r3
 8002fdc:	e02c      	b.n	8003038 <HAL_DMA_IRQHandler+0x2a0>
 8002fde:	bf00      	nop
 8002fe0:	20000230 	.word	0x20000230
 8002fe4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d023      	beq.n	8003038 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	4798      	blx	r3
 8002ff8:	e01e      	b.n	8003038 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10f      	bne.n	8003028 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0210 	bic.w	r2, r2, #16
 8003016:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303c:	2b00      	cmp	r3, #0
 800303e:	d032      	beq.n	80030a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	d022      	beq.n	8003092 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2205      	movs	r2, #5
 8003050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0201 	bic.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	3301      	adds	r3, #1
 8003068:	60bb      	str	r3, [r7, #8]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	429a      	cmp	r2, r3
 800306e:	d307      	bcc.n	8003080 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f2      	bne.n	8003064 <HAL_DMA_IRQHandler+0x2cc>
 800307e:	e000      	b.n	8003082 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003080:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003096:	2b00      	cmp	r3, #0
 8003098:	d005      	beq.n	80030a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	4798      	blx	r3
 80030a2:	e000      	b.n	80030a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80030a4:	bf00      	nop
    }
  }
}
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	3b10      	subs	r3, #16
 80030bc:	4a14      	ldr	r2, [pc, #80]	; (8003110 <DMA_CalcBaseAndBitshift+0x64>)
 80030be:	fba2 2303 	umull	r2, r3, r2, r3
 80030c2:	091b      	lsrs	r3, r3, #4
 80030c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030c6:	4a13      	ldr	r2, [pc, #76]	; (8003114 <DMA_CalcBaseAndBitshift+0x68>)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4413      	add	r3, r2
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	461a      	mov	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2b03      	cmp	r3, #3
 80030d8:	d909      	bls.n	80030ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030e2:	f023 0303 	bic.w	r3, r3, #3
 80030e6:	1d1a      	adds	r2, r3, #4
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	659a      	str	r2, [r3, #88]	; 0x58
 80030ec:	e007      	b.n	80030fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030f6:	f023 0303 	bic.w	r3, r3, #3
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003102:	4618      	mov	r0, r3
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	aaaaaaab 	.word	0xaaaaaaab
 8003114:	080154e4 	.word	0x080154e4

08003118 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003128:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d11f      	bne.n	8003172 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2b03      	cmp	r3, #3
 8003136:	d856      	bhi.n	80031e6 <DMA_CheckFifoParam+0xce>
 8003138:	a201      	add	r2, pc, #4	; (adr r2, 8003140 <DMA_CheckFifoParam+0x28>)
 800313a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313e:	bf00      	nop
 8003140:	08003151 	.word	0x08003151
 8003144:	08003163 	.word	0x08003163
 8003148:	08003151 	.word	0x08003151
 800314c:	080031e7 	.word	0x080031e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d046      	beq.n	80031ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003160:	e043      	b.n	80031ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003166:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800316a:	d140      	bne.n	80031ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003170:	e03d      	b.n	80031ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800317a:	d121      	bne.n	80031c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b03      	cmp	r3, #3
 8003180:	d837      	bhi.n	80031f2 <DMA_CheckFifoParam+0xda>
 8003182:	a201      	add	r2, pc, #4	; (adr r2, 8003188 <DMA_CheckFifoParam+0x70>)
 8003184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003188:	08003199 	.word	0x08003199
 800318c:	0800319f 	.word	0x0800319f
 8003190:	08003199 	.word	0x08003199
 8003194:	080031b1 	.word	0x080031b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	73fb      	strb	r3, [r7, #15]
      break;
 800319c:	e030      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d025      	beq.n	80031f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031ae:	e022      	b.n	80031f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031b8:	d11f      	bne.n	80031fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031be:	e01c      	b.n	80031fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d903      	bls.n	80031ce <DMA_CheckFifoParam+0xb6>
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	d003      	beq.n	80031d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031cc:	e018      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	73fb      	strb	r3, [r7, #15]
      break;
 80031d2:	e015      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00e      	beq.n	80031fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	73fb      	strb	r3, [r7, #15]
      break;
 80031e4:	e00b      	b.n	80031fe <DMA_CheckFifoParam+0xe6>
      break;
 80031e6:	bf00      	nop
 80031e8:	e00a      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      break;
 80031ea:	bf00      	nop
 80031ec:	e008      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      break;
 80031ee:	bf00      	nop
 80031f0:	e006      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      break;
 80031f2:	bf00      	nop
 80031f4:	e004      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      break;
 80031f6:	bf00      	nop
 80031f8:	e002      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      break;   
 80031fa:	bf00      	nop
 80031fc:	e000      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      break;
 80031fe:	bf00      	nop
    }
  } 
  
  return status; 
 8003200:	7bfb      	ldrb	r3, [r7, #15]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop

08003210 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003222:	4b23      	ldr	r3, [pc, #140]	; (80032b0 <HAL_FLASH_Program+0xa0>)
 8003224:	7e1b      	ldrb	r3, [r3, #24]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d101      	bne.n	800322e <HAL_FLASH_Program+0x1e>
 800322a:	2302      	movs	r3, #2
 800322c:	e03b      	b.n	80032a6 <HAL_FLASH_Program+0x96>
 800322e:	4b20      	ldr	r3, [pc, #128]	; (80032b0 <HAL_FLASH_Program+0xa0>)
 8003230:	2201      	movs	r2, #1
 8003232:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003234:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003238:	f000 f870 	bl	800331c <FLASH_WaitForLastOperation>
 800323c:	4603      	mov	r3, r0
 800323e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003240:	7dfb      	ldrb	r3, [r7, #23]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d12b      	bne.n	800329e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d105      	bne.n	8003258 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800324c:	783b      	ldrb	r3, [r7, #0]
 800324e:	4619      	mov	r1, r3
 8003250:	68b8      	ldr	r0, [r7, #8]
 8003252:	f000 f91b 	bl	800348c <FLASH_Program_Byte>
 8003256:	e016      	b.n	8003286 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d105      	bne.n	800326a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800325e:	883b      	ldrh	r3, [r7, #0]
 8003260:	4619      	mov	r1, r3
 8003262:	68b8      	ldr	r0, [r7, #8]
 8003264:	f000 f8ee 	bl	8003444 <FLASH_Program_HalfWord>
 8003268:	e00d      	b.n	8003286 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2b02      	cmp	r3, #2
 800326e:	d105      	bne.n	800327c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	4619      	mov	r1, r3
 8003274:	68b8      	ldr	r0, [r7, #8]
 8003276:	f000 f8c3 	bl	8003400 <FLASH_Program_Word>
 800327a:	e004      	b.n	8003286 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800327c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003280:	68b8      	ldr	r0, [r7, #8]
 8003282:	f000 f88b 	bl	800339c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003286:	f24c 3050 	movw	r0, #50000	; 0xc350
 800328a:	f000 f847 	bl	800331c <FLASH_WaitForLastOperation>
 800328e:	4603      	mov	r3, r0
 8003290:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003292:	4b08      	ldr	r3, [pc, #32]	; (80032b4 <HAL_FLASH_Program+0xa4>)
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	4a07      	ldr	r2, [pc, #28]	; (80032b4 <HAL_FLASH_Program+0xa4>)
 8003298:	f023 0301 	bic.w	r3, r3, #1
 800329c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800329e:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <HAL_FLASH_Program+0xa0>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80032a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	20001cd4 	.word	0x20001cd4
 80032b4:	40023c00 	.word	0x40023c00

080032b8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80032c2:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <HAL_FLASH_Unlock+0x38>)
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	da0b      	bge.n	80032e2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80032ca:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <HAL_FLASH_Unlock+0x38>)
 80032cc:	4a09      	ldr	r2, [pc, #36]	; (80032f4 <HAL_FLASH_Unlock+0x3c>)
 80032ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80032d0:	4b07      	ldr	r3, [pc, #28]	; (80032f0 <HAL_FLASH_Unlock+0x38>)
 80032d2:	4a09      	ldr	r2, [pc, #36]	; (80032f8 <HAL_FLASH_Unlock+0x40>)
 80032d4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80032d6:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <HAL_FLASH_Unlock+0x38>)
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	da01      	bge.n	80032e2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80032e2:	79fb      	ldrb	r3, [r7, #7]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	40023c00 	.word	0x40023c00
 80032f4:	45670123 	.word	0x45670123
 80032f8:	cdef89ab 	.word	0xcdef89ab

080032fc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003300:	4b05      	ldr	r3, [pc, #20]	; (8003318 <HAL_FLASH_Lock+0x1c>)
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	4a04      	ldr	r2, [pc, #16]	; (8003318 <HAL_FLASH_Lock+0x1c>)
 8003306:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800330a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	40023c00 	.word	0x40023c00

0800331c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003328:	4b1a      	ldr	r3, [pc, #104]	; (8003394 <FLASH_WaitForLastOperation+0x78>)
 800332a:	2200      	movs	r2, #0
 800332c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800332e:	f7ff fae1 	bl	80028f4 <HAL_GetTick>
 8003332:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003334:	e010      	b.n	8003358 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333c:	d00c      	beq.n	8003358 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d007      	beq.n	8003354 <FLASH_WaitForLastOperation+0x38>
 8003344:	f7ff fad6 	bl	80028f4 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	429a      	cmp	r2, r3
 8003352:	d201      	bcs.n	8003358 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e019      	b.n	800338c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003358:	4b0f      	ldr	r3, [pc, #60]	; (8003398 <FLASH_WaitForLastOperation+0x7c>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1e8      	bne.n	8003336 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003364:	4b0c      	ldr	r3, [pc, #48]	; (8003398 <FLASH_WaitForLastOperation+0x7c>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	d002      	beq.n	8003376 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003370:	4b09      	ldr	r3, [pc, #36]	; (8003398 <FLASH_WaitForLastOperation+0x7c>)
 8003372:	2201      	movs	r2, #1
 8003374:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003376:	4b08      	ldr	r3, [pc, #32]	; (8003398 <FLASH_WaitForLastOperation+0x7c>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003382:	f000 f8a5 	bl	80034d0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e000      	b.n	800338c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
  
}  
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	20001cd4 	.word	0x20001cd4
 8003398:	40023c00 	.word	0x40023c00

0800339c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80033a8:	4b14      	ldr	r3, [pc, #80]	; (80033fc <FLASH_Program_DoubleWord+0x60>)
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	4a13      	ldr	r2, [pc, #76]	; (80033fc <FLASH_Program_DoubleWord+0x60>)
 80033ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80033b4:	4b11      	ldr	r3, [pc, #68]	; (80033fc <FLASH_Program_DoubleWord+0x60>)
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	4a10      	ldr	r2, [pc, #64]	; (80033fc <FLASH_Program_DoubleWord+0x60>)
 80033ba:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80033be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80033c0:	4b0e      	ldr	r3, [pc, #56]	; (80033fc <FLASH_Program_DoubleWord+0x60>)
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	4a0d      	ldr	r2, [pc, #52]	; (80033fc <FLASH_Program_DoubleWord+0x60>)
 80033c6:	f043 0301 	orr.w	r3, r3, #1
 80033ca:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80033d2:	f3bf 8f6f 	isb	sy
}
 80033d6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80033d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033dc:	f04f 0200 	mov.w	r2, #0
 80033e0:	f04f 0300 	mov.w	r3, #0
 80033e4:	000a      	movs	r2, r1
 80033e6:	2300      	movs	r3, #0
 80033e8:	68f9      	ldr	r1, [r7, #12]
 80033ea:	3104      	adds	r1, #4
 80033ec:	4613      	mov	r3, r2
 80033ee:	600b      	str	r3, [r1, #0]
}
 80033f0:	bf00      	nop
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	40023c00 	.word	0x40023c00

08003400 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800340a:	4b0d      	ldr	r3, [pc, #52]	; (8003440 <FLASH_Program_Word+0x40>)
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	4a0c      	ldr	r2, [pc, #48]	; (8003440 <FLASH_Program_Word+0x40>)
 8003410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003414:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003416:	4b0a      	ldr	r3, [pc, #40]	; (8003440 <FLASH_Program_Word+0x40>)
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	4a09      	ldr	r2, [pc, #36]	; (8003440 <FLASH_Program_Word+0x40>)
 800341c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003420:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003422:	4b07      	ldr	r3, [pc, #28]	; (8003440 <FLASH_Program_Word+0x40>)
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	4a06      	ldr	r2, [pc, #24]	; (8003440 <FLASH_Program_Word+0x40>)
 8003428:	f043 0301 	orr.w	r3, r3, #1
 800342c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	601a      	str	r2, [r3, #0]
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	40023c00 	.word	0x40023c00

08003444 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003450:	4b0d      	ldr	r3, [pc, #52]	; (8003488 <FLASH_Program_HalfWord+0x44>)
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	4a0c      	ldr	r2, [pc, #48]	; (8003488 <FLASH_Program_HalfWord+0x44>)
 8003456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800345a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800345c:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <FLASH_Program_HalfWord+0x44>)
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	4a09      	ldr	r2, [pc, #36]	; (8003488 <FLASH_Program_HalfWord+0x44>)
 8003462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003466:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003468:	4b07      	ldr	r3, [pc, #28]	; (8003488 <FLASH_Program_HalfWord+0x44>)
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	4a06      	ldr	r2, [pc, #24]	; (8003488 <FLASH_Program_HalfWord+0x44>)
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	887a      	ldrh	r2, [r7, #2]
 8003478:	801a      	strh	r2, [r3, #0]
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40023c00 	.word	0x40023c00

0800348c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	460b      	mov	r3, r1
 8003496:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003498:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <FLASH_Program_Byte+0x40>)
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	4a0b      	ldr	r2, [pc, #44]	; (80034cc <FLASH_Program_Byte+0x40>)
 800349e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80034a4:	4b09      	ldr	r3, [pc, #36]	; (80034cc <FLASH_Program_Byte+0x40>)
 80034a6:	4a09      	ldr	r2, [pc, #36]	; (80034cc <FLASH_Program_Byte+0x40>)
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80034ac:	4b07      	ldr	r3, [pc, #28]	; (80034cc <FLASH_Program_Byte+0x40>)
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	4a06      	ldr	r2, [pc, #24]	; (80034cc <FLASH_Program_Byte+0x40>)
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	78fa      	ldrb	r2, [r7, #3]
 80034bc:	701a      	strb	r2, [r3, #0]
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	40023c00 	.word	0x40023c00

080034d0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80034d4:	4b27      	ldr	r3, [pc, #156]	; (8003574 <FLASH_SetErrorCode+0xa4>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f003 0310 	and.w	r3, r3, #16
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80034e0:	4b25      	ldr	r3, [pc, #148]	; (8003578 <FLASH_SetErrorCode+0xa8>)
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	f043 0310 	orr.w	r3, r3, #16
 80034e8:	4a23      	ldr	r2, [pc, #140]	; (8003578 <FLASH_SetErrorCode+0xa8>)
 80034ea:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80034ec:	4b21      	ldr	r3, [pc, #132]	; (8003574 <FLASH_SetErrorCode+0xa4>)
 80034ee:	2210      	movs	r2, #16
 80034f0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80034f2:	4b20      	ldr	r3, [pc, #128]	; (8003574 <FLASH_SetErrorCode+0xa4>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f003 0320 	and.w	r3, r3, #32
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d008      	beq.n	8003510 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80034fe:	4b1e      	ldr	r3, [pc, #120]	; (8003578 <FLASH_SetErrorCode+0xa8>)
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	f043 0308 	orr.w	r3, r3, #8
 8003506:	4a1c      	ldr	r2, [pc, #112]	; (8003578 <FLASH_SetErrorCode+0xa8>)
 8003508:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800350a:	4b1a      	ldr	r3, [pc, #104]	; (8003574 <FLASH_SetErrorCode+0xa4>)
 800350c:	2220      	movs	r2, #32
 800350e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003510:	4b18      	ldr	r3, [pc, #96]	; (8003574 <FLASH_SetErrorCode+0xa4>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800351c:	4b16      	ldr	r3, [pc, #88]	; (8003578 <FLASH_SetErrorCode+0xa8>)
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	f043 0304 	orr.w	r3, r3, #4
 8003524:	4a14      	ldr	r2, [pc, #80]	; (8003578 <FLASH_SetErrorCode+0xa8>)
 8003526:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003528:	4b12      	ldr	r3, [pc, #72]	; (8003574 <FLASH_SetErrorCode+0xa4>)
 800352a:	2240      	movs	r2, #64	; 0x40
 800352c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800352e:	4b11      	ldr	r3, [pc, #68]	; (8003574 <FLASH_SetErrorCode+0xa4>)
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003536:	2b00      	cmp	r3, #0
 8003538:	d008      	beq.n	800354c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800353a:	4b0f      	ldr	r3, [pc, #60]	; (8003578 <FLASH_SetErrorCode+0xa8>)
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	f043 0302 	orr.w	r3, r3, #2
 8003542:	4a0d      	ldr	r2, [pc, #52]	; (8003578 <FLASH_SetErrorCode+0xa8>)
 8003544:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003546:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <FLASH_SetErrorCode+0xa4>)
 8003548:	2280      	movs	r2, #128	; 0x80
 800354a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800354c:	4b09      	ldr	r3, [pc, #36]	; (8003574 <FLASH_SetErrorCode+0xa4>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d008      	beq.n	800356a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003558:	4b07      	ldr	r3, [pc, #28]	; (8003578 <FLASH_SetErrorCode+0xa8>)
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	f043 0320 	orr.w	r3, r3, #32
 8003560:	4a05      	ldr	r2, [pc, #20]	; (8003578 <FLASH_SetErrorCode+0xa8>)
 8003562:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003564:	4b03      	ldr	r3, [pc, #12]	; (8003574 <FLASH_SetErrorCode+0xa4>)
 8003566:	2202      	movs	r2, #2
 8003568:	60da      	str	r2, [r3, #12]
  }
}
 800356a:	bf00      	nop
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	40023c00 	.word	0x40023c00
 8003578:	20001cd4 	.word	0x20001cd4

0800357c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800358a:	2300      	movs	r3, #0
 800358c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800358e:	4b31      	ldr	r3, [pc, #196]	; (8003654 <HAL_FLASHEx_Erase+0xd8>)
 8003590:	7e1b      	ldrb	r3, [r3, #24]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d101      	bne.n	800359a <HAL_FLASHEx_Erase+0x1e>
 8003596:	2302      	movs	r3, #2
 8003598:	e058      	b.n	800364c <HAL_FLASHEx_Erase+0xd0>
 800359a:	4b2e      	ldr	r3, [pc, #184]	; (8003654 <HAL_FLASHEx_Erase+0xd8>)
 800359c:	2201      	movs	r2, #1
 800359e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80035a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80035a4:	f7ff feba 	bl	800331c <FLASH_WaitForLastOperation>
 80035a8:	4603      	mov	r3, r0
 80035aa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d148      	bne.n	8003644 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	f04f 32ff 	mov.w	r2, #4294967295
 80035b8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d115      	bne.n	80035ee <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	4619      	mov	r1, r3
 80035ce:	4610      	mov	r0, r2
 80035d0:	f000 f844 	bl	800365c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80035d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80035d8:	f7ff fea0 	bl	800331c <FLASH_WaitForLastOperation>
 80035dc:	4603      	mov	r3, r0
 80035de:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80035e0:	4b1d      	ldr	r3, [pc, #116]	; (8003658 <HAL_FLASHEx_Erase+0xdc>)
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	4a1c      	ldr	r2, [pc, #112]	; (8003658 <HAL_FLASHEx_Erase+0xdc>)
 80035e6:	f023 0304 	bic.w	r3, r3, #4
 80035ea:	6113      	str	r3, [r2, #16]
 80035ec:	e028      	b.n	8003640 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	60bb      	str	r3, [r7, #8]
 80035f4:	e01c      	b.n	8003630 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	4619      	mov	r1, r3
 80035fe:	68b8      	ldr	r0, [r7, #8]
 8003600:	f000 f850 	bl	80036a4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003604:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003608:	f7ff fe88 	bl	800331c <FLASH_WaitForLastOperation>
 800360c:	4603      	mov	r3, r0
 800360e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003610:	4b11      	ldr	r3, [pc, #68]	; (8003658 <HAL_FLASHEx_Erase+0xdc>)
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	4a10      	ldr	r2, [pc, #64]	; (8003658 <HAL_FLASHEx_Erase+0xdc>)
 8003616:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800361a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800361c:	7bfb      	ldrb	r3, [r7, #15]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	601a      	str	r2, [r3, #0]
          break;
 8003628:	e00a      	b.n	8003640 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	3301      	adds	r3, #1
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	4413      	add	r3, r2
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	429a      	cmp	r2, r3
 800363e:	d3da      	bcc.n	80035f6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003640:	f000 f878 	bl	8003734 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003644:	4b03      	ldr	r3, [pc, #12]	; (8003654 <HAL_FLASHEx_Erase+0xd8>)
 8003646:	2200      	movs	r2, #0
 8003648:	761a      	strb	r2, [r3, #24]

  return status;
 800364a:	7bfb      	ldrb	r3, [r7, #15]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	20001cd4 	.word	0x20001cd4
 8003658:	40023c00 	.word	0x40023c00

0800365c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	4603      	mov	r3, r0
 8003664:	6039      	str	r1, [r7, #0]
 8003666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003668:	4b0d      	ldr	r3, [pc, #52]	; (80036a0 <FLASH_MassErase+0x44>)
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	4a0c      	ldr	r2, [pc, #48]	; (80036a0 <FLASH_MassErase+0x44>)
 800366e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003672:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8003674:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <FLASH_MassErase+0x44>)
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	4a09      	ldr	r2, [pc, #36]	; (80036a0 <FLASH_MassErase+0x44>)
 800367a:	f043 0304 	orr.w	r3, r3, #4
 800367e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8003680:	4b07      	ldr	r3, [pc, #28]	; (80036a0 <FLASH_MassErase+0x44>)
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	79fb      	ldrb	r3, [r7, #7]
 8003686:	021b      	lsls	r3, r3, #8
 8003688:	4313      	orrs	r3, r2
 800368a:	4a05      	ldr	r2, [pc, #20]	; (80036a0 <FLASH_MassErase+0x44>)
 800368c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003690:	6113      	str	r3, [r2, #16]
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40023c00 	.word	0x40023c00

080036a4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80036b4:	78fb      	ldrb	r3, [r7, #3]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d102      	bne.n	80036c0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80036ba:	2300      	movs	r3, #0
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	e010      	b.n	80036e2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80036c0:	78fb      	ldrb	r3, [r7, #3]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d103      	bne.n	80036ce <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80036c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	e009      	b.n	80036e2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d103      	bne.n	80036dc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80036d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	e002      	b.n	80036e2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80036dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80036e0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80036e2:	4b13      	ldr	r3, [pc, #76]	; (8003730 <FLASH_Erase_Sector+0x8c>)
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	4a12      	ldr	r2, [pc, #72]	; (8003730 <FLASH_Erase_Sector+0x8c>)
 80036e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80036ee:	4b10      	ldr	r3, [pc, #64]	; (8003730 <FLASH_Erase_Sector+0x8c>)
 80036f0:	691a      	ldr	r2, [r3, #16]
 80036f2:	490f      	ldr	r1, [pc, #60]	; (8003730 <FLASH_Erase_Sector+0x8c>)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80036fa:	4b0d      	ldr	r3, [pc, #52]	; (8003730 <FLASH_Erase_Sector+0x8c>)
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	4a0c      	ldr	r2, [pc, #48]	; (8003730 <FLASH_Erase_Sector+0x8c>)
 8003700:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003704:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003706:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <FLASH_Erase_Sector+0x8c>)
 8003708:	691a      	ldr	r2, [r3, #16]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	4313      	orrs	r3, r2
 8003710:	4a07      	ldr	r2, [pc, #28]	; (8003730 <FLASH_Erase_Sector+0x8c>)
 8003712:	f043 0302 	orr.w	r3, r3, #2
 8003716:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003718:	4b05      	ldr	r3, [pc, #20]	; (8003730 <FLASH_Erase_Sector+0x8c>)
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	4a04      	ldr	r2, [pc, #16]	; (8003730 <FLASH_Erase_Sector+0x8c>)
 800371e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003722:	6113      	str	r3, [r2, #16]
}
 8003724:	bf00      	nop
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	40023c00 	.word	0x40023c00

08003734 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8003738:	4b20      	ldr	r3, [pc, #128]	; (80037bc <FLASH_FlushCaches+0x88>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003740:	2b00      	cmp	r3, #0
 8003742:	d017      	beq.n	8003774 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003744:	4b1d      	ldr	r3, [pc, #116]	; (80037bc <FLASH_FlushCaches+0x88>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a1c      	ldr	r2, [pc, #112]	; (80037bc <FLASH_FlushCaches+0x88>)
 800374a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800374e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003750:	4b1a      	ldr	r3, [pc, #104]	; (80037bc <FLASH_FlushCaches+0x88>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a19      	ldr	r2, [pc, #100]	; (80037bc <FLASH_FlushCaches+0x88>)
 8003756:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800375a:	6013      	str	r3, [r2, #0]
 800375c:	4b17      	ldr	r3, [pc, #92]	; (80037bc <FLASH_FlushCaches+0x88>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a16      	ldr	r2, [pc, #88]	; (80037bc <FLASH_FlushCaches+0x88>)
 8003762:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003766:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003768:	4b14      	ldr	r3, [pc, #80]	; (80037bc <FLASH_FlushCaches+0x88>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a13      	ldr	r2, [pc, #76]	; (80037bc <FLASH_FlushCaches+0x88>)
 800376e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003772:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003774:	4b11      	ldr	r3, [pc, #68]	; (80037bc <FLASH_FlushCaches+0x88>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800377c:	2b00      	cmp	r3, #0
 800377e:	d017      	beq.n	80037b0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003780:	4b0e      	ldr	r3, [pc, #56]	; (80037bc <FLASH_FlushCaches+0x88>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a0d      	ldr	r2, [pc, #52]	; (80037bc <FLASH_FlushCaches+0x88>)
 8003786:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800378a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800378c:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <FLASH_FlushCaches+0x88>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a0a      	ldr	r2, [pc, #40]	; (80037bc <FLASH_FlushCaches+0x88>)
 8003792:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	4b08      	ldr	r3, [pc, #32]	; (80037bc <FLASH_FlushCaches+0x88>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a07      	ldr	r2, [pc, #28]	; (80037bc <FLASH_FlushCaches+0x88>)
 800379e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037a2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80037a4:	4b05      	ldr	r3, [pc, #20]	; (80037bc <FLASH_FlushCaches+0x88>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a04      	ldr	r2, [pc, #16]	; (80037bc <FLASH_FlushCaches+0x88>)
 80037aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037ae:	6013      	str	r3, [r2, #0]
  }
}
 80037b0:	bf00      	nop
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40023c00 	.word	0x40023c00

080037c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b089      	sub	sp, #36	; 0x24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037d6:	2300      	movs	r3, #0
 80037d8:	61fb      	str	r3, [r7, #28]
 80037da:	e16b      	b.n	8003ab4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037dc:	2201      	movs	r2, #1
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	4013      	ands	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	f040 815a 	bne.w	8003aae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	2b01      	cmp	r3, #1
 8003804:	d005      	beq.n	8003812 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800380e:	2b02      	cmp	r3, #2
 8003810:	d130      	bne.n	8003874 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	2203      	movs	r2, #3
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	43db      	mvns	r3, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4013      	ands	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	4313      	orrs	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003848:	2201      	movs	r2, #1
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	43db      	mvns	r3, r3
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4013      	ands	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	091b      	lsrs	r3, r3, #4
 800385e:	f003 0201 	and.w	r2, r3, #1
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4313      	orrs	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 0303 	and.w	r3, r3, #3
 800387c:	2b03      	cmp	r3, #3
 800387e:	d017      	beq.n	80038b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	2203      	movs	r2, #3
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	43db      	mvns	r3, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4013      	ands	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 0303 	and.w	r3, r3, #3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d123      	bne.n	8003904 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	08da      	lsrs	r2, r3, #3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3208      	adds	r2, #8
 80038c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	220f      	movs	r2, #15
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	43db      	mvns	r3, r3
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4013      	ands	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	08da      	lsrs	r2, r3, #3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	3208      	adds	r2, #8
 80038fe:	69b9      	ldr	r1, [r7, #24]
 8003900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	2203      	movs	r2, #3
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	43db      	mvns	r3, r3
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	4013      	ands	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 0203 	and.w	r2, r3, #3
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4313      	orrs	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 80b4 	beq.w	8003aae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003946:	2300      	movs	r3, #0
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	4b60      	ldr	r3, [pc, #384]	; (8003acc <HAL_GPIO_Init+0x30c>)
 800394c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394e:	4a5f      	ldr	r2, [pc, #380]	; (8003acc <HAL_GPIO_Init+0x30c>)
 8003950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003954:	6453      	str	r3, [r2, #68]	; 0x44
 8003956:	4b5d      	ldr	r3, [pc, #372]	; (8003acc <HAL_GPIO_Init+0x30c>)
 8003958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003962:	4a5b      	ldr	r2, [pc, #364]	; (8003ad0 <HAL_GPIO_Init+0x310>)
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	089b      	lsrs	r3, r3, #2
 8003968:	3302      	adds	r3, #2
 800396a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800396e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f003 0303 	and.w	r3, r3, #3
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	220f      	movs	r2, #15
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	43db      	mvns	r3, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4013      	ands	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a52      	ldr	r2, [pc, #328]	; (8003ad4 <HAL_GPIO_Init+0x314>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d02b      	beq.n	80039e6 <HAL_GPIO_Init+0x226>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a51      	ldr	r2, [pc, #324]	; (8003ad8 <HAL_GPIO_Init+0x318>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d025      	beq.n	80039e2 <HAL_GPIO_Init+0x222>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a50      	ldr	r2, [pc, #320]	; (8003adc <HAL_GPIO_Init+0x31c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d01f      	beq.n	80039de <HAL_GPIO_Init+0x21e>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a4f      	ldr	r2, [pc, #316]	; (8003ae0 <HAL_GPIO_Init+0x320>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d019      	beq.n	80039da <HAL_GPIO_Init+0x21a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a4e      	ldr	r2, [pc, #312]	; (8003ae4 <HAL_GPIO_Init+0x324>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d013      	beq.n	80039d6 <HAL_GPIO_Init+0x216>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a4d      	ldr	r2, [pc, #308]	; (8003ae8 <HAL_GPIO_Init+0x328>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00d      	beq.n	80039d2 <HAL_GPIO_Init+0x212>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a4c      	ldr	r2, [pc, #304]	; (8003aec <HAL_GPIO_Init+0x32c>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d007      	beq.n	80039ce <HAL_GPIO_Init+0x20e>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a4b      	ldr	r2, [pc, #300]	; (8003af0 <HAL_GPIO_Init+0x330>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d101      	bne.n	80039ca <HAL_GPIO_Init+0x20a>
 80039c6:	2307      	movs	r3, #7
 80039c8:	e00e      	b.n	80039e8 <HAL_GPIO_Init+0x228>
 80039ca:	2308      	movs	r3, #8
 80039cc:	e00c      	b.n	80039e8 <HAL_GPIO_Init+0x228>
 80039ce:	2306      	movs	r3, #6
 80039d0:	e00a      	b.n	80039e8 <HAL_GPIO_Init+0x228>
 80039d2:	2305      	movs	r3, #5
 80039d4:	e008      	b.n	80039e8 <HAL_GPIO_Init+0x228>
 80039d6:	2304      	movs	r3, #4
 80039d8:	e006      	b.n	80039e8 <HAL_GPIO_Init+0x228>
 80039da:	2303      	movs	r3, #3
 80039dc:	e004      	b.n	80039e8 <HAL_GPIO_Init+0x228>
 80039de:	2302      	movs	r3, #2
 80039e0:	e002      	b.n	80039e8 <HAL_GPIO_Init+0x228>
 80039e2:	2301      	movs	r3, #1
 80039e4:	e000      	b.n	80039e8 <HAL_GPIO_Init+0x228>
 80039e6:	2300      	movs	r3, #0
 80039e8:	69fa      	ldr	r2, [r7, #28]
 80039ea:	f002 0203 	and.w	r2, r2, #3
 80039ee:	0092      	lsls	r2, r2, #2
 80039f0:	4093      	lsls	r3, r2
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039f8:	4935      	ldr	r1, [pc, #212]	; (8003ad0 <HAL_GPIO_Init+0x310>)
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	089b      	lsrs	r3, r3, #2
 80039fe:	3302      	adds	r3, #2
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a06:	4b3b      	ldr	r3, [pc, #236]	; (8003af4 <HAL_GPIO_Init+0x334>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	4013      	ands	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a2a:	4a32      	ldr	r2, [pc, #200]	; (8003af4 <HAL_GPIO_Init+0x334>)
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a30:	4b30      	ldr	r3, [pc, #192]	; (8003af4 <HAL_GPIO_Init+0x334>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a54:	4a27      	ldr	r2, [pc, #156]	; (8003af4 <HAL_GPIO_Init+0x334>)
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a5a:	4b26      	ldr	r3, [pc, #152]	; (8003af4 <HAL_GPIO_Init+0x334>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	43db      	mvns	r3, r3
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	4013      	ands	r3, r2
 8003a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a7e:	4a1d      	ldr	r2, [pc, #116]	; (8003af4 <HAL_GPIO_Init+0x334>)
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a84:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <HAL_GPIO_Init+0x334>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	4013      	ands	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003aa8:	4a12      	ldr	r2, [pc, #72]	; (8003af4 <HAL_GPIO_Init+0x334>)
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	61fb      	str	r3, [r7, #28]
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	2b0f      	cmp	r3, #15
 8003ab8:	f67f ae90 	bls.w	80037dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003abc:	bf00      	nop
 8003abe:	bf00      	nop
 8003ac0:	3724      	adds	r7, #36	; 0x24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	40013800 	.word	0x40013800
 8003ad4:	40020000 	.word	0x40020000
 8003ad8:	40020400 	.word	0x40020400
 8003adc:	40020800 	.word	0x40020800
 8003ae0:	40020c00 	.word	0x40020c00
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	40021400 	.word	0x40021400
 8003aec:	40021800 	.word	0x40021800
 8003af0:	40021c00 	.word	0x40021c00
 8003af4:	40013c00 	.word	0x40013c00

08003af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	460b      	mov	r3, r1
 8003b02:	807b      	strh	r3, [r7, #2]
 8003b04:	4613      	mov	r3, r2
 8003b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b08:	787b      	ldrb	r3, [r7, #1]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b0e:	887a      	ldrh	r2, [r7, #2]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b14:	e003      	b.n	8003b1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b16:	887b      	ldrh	r3, [r7, #2]
 8003b18:	041a      	lsls	r2, r3, #16
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	619a      	str	r2, [r3, #24]
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003b2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b2c:	b08f      	sub	sp, #60	; 0x3c
 8003b2e:	af0a      	add	r7, sp, #40	; 0x28
 8003b30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e054      	b.n	8003be6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d106      	bne.n	8003b5c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f00f fcf6 	bl	8013548 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2203      	movs	r2, #3
 8003b60:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d102      	bne.n	8003b76 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f004 fd04 	bl	8008588 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	603b      	str	r3, [r7, #0]
 8003b86:	687e      	ldr	r6, [r7, #4]
 8003b88:	466d      	mov	r5, sp
 8003b8a:	f106 0410 	add.w	r4, r6, #16
 8003b8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b9e:	1d33      	adds	r3, r6, #4
 8003ba0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ba2:	6838      	ldr	r0, [r7, #0]
 8003ba4:	f004 fc7e 	bl	80084a4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2101      	movs	r1, #1
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f004 fcfb 	bl	80085aa <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	603b      	str	r3, [r7, #0]
 8003bba:	687e      	ldr	r6, [r7, #4]
 8003bbc:	466d      	mov	r5, sp
 8003bbe:	f106 0410 	add.w	r4, r6, #16
 8003bc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bce:	e885 0003 	stmia.w	r5, {r0, r1}
 8003bd2:	1d33      	adds	r3, r6, #4
 8003bd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bd6:	6838      	ldr	r0, [r7, #0]
 8003bd8:	f004 fe84 	bl	80088e4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bee <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003bee:	b590      	push	{r4, r7, lr}
 8003bf0:	b089      	sub	sp, #36	; 0x24
 8003bf2:	af04      	add	r7, sp, #16
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	4608      	mov	r0, r1
 8003bf8:	4611      	mov	r1, r2
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	70fb      	strb	r3, [r7, #3]
 8003c00:	460b      	mov	r3, r1
 8003c02:	70bb      	strb	r3, [r7, #2]
 8003c04:	4613      	mov	r3, r2
 8003c06:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <HAL_HCD_HC_Init+0x28>
 8003c12:	2302      	movs	r3, #2
 8003c14:	e076      	b.n	8003d04 <HAL_HCD_HC_Init+0x116>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003c1e:	78fb      	ldrb	r3, [r7, #3]
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	212c      	movs	r1, #44	; 0x2c
 8003c24:	fb01 f303 	mul.w	r3, r1, r3
 8003c28:	4413      	add	r3, r2
 8003c2a:	333d      	adds	r3, #61	; 0x3d
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003c30:	78fb      	ldrb	r3, [r7, #3]
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	212c      	movs	r1, #44	; 0x2c
 8003c36:	fb01 f303 	mul.w	r3, r1, r3
 8003c3a:	4413      	add	r3, r2
 8003c3c:	3338      	adds	r3, #56	; 0x38
 8003c3e:	787a      	ldrb	r2, [r7, #1]
 8003c40:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003c42:	78fb      	ldrb	r3, [r7, #3]
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	212c      	movs	r1, #44	; 0x2c
 8003c48:	fb01 f303 	mul.w	r3, r1, r3
 8003c4c:	4413      	add	r3, r2
 8003c4e:	3340      	adds	r3, #64	; 0x40
 8003c50:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003c52:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003c54:	78fb      	ldrb	r3, [r7, #3]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	212c      	movs	r1, #44	; 0x2c
 8003c5a:	fb01 f303 	mul.w	r3, r1, r3
 8003c5e:	4413      	add	r3, r2
 8003c60:	3339      	adds	r3, #57	; 0x39
 8003c62:	78fa      	ldrb	r2, [r7, #3]
 8003c64:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003c66:	78fb      	ldrb	r3, [r7, #3]
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	212c      	movs	r1, #44	; 0x2c
 8003c6c:	fb01 f303 	mul.w	r3, r1, r3
 8003c70:	4413      	add	r3, r2
 8003c72:	333f      	adds	r3, #63	; 0x3f
 8003c74:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003c78:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003c7a:	78fb      	ldrb	r3, [r7, #3]
 8003c7c:	78ba      	ldrb	r2, [r7, #2]
 8003c7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c82:	b2d0      	uxtb	r0, r2
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	212c      	movs	r1, #44	; 0x2c
 8003c88:	fb01 f303 	mul.w	r3, r1, r3
 8003c8c:	4413      	add	r3, r2
 8003c8e:	333a      	adds	r3, #58	; 0x3a
 8003c90:	4602      	mov	r2, r0
 8003c92:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003c94:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	da09      	bge.n	8003cb0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003c9c:	78fb      	ldrb	r3, [r7, #3]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	212c      	movs	r1, #44	; 0x2c
 8003ca2:	fb01 f303 	mul.w	r3, r1, r3
 8003ca6:	4413      	add	r3, r2
 8003ca8:	333b      	adds	r3, #59	; 0x3b
 8003caa:	2201      	movs	r2, #1
 8003cac:	701a      	strb	r2, [r3, #0]
 8003cae:	e008      	b.n	8003cc2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003cb0:	78fb      	ldrb	r3, [r7, #3]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	212c      	movs	r1, #44	; 0x2c
 8003cb6:	fb01 f303 	mul.w	r3, r1, r3
 8003cba:	4413      	add	r3, r2
 8003cbc:	333b      	adds	r3, #59	; 0x3b
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003cc2:	78fb      	ldrb	r3, [r7, #3]
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	212c      	movs	r1, #44	; 0x2c
 8003cc8:	fb01 f303 	mul.w	r3, r1, r3
 8003ccc:	4413      	add	r3, r2
 8003cce:	333c      	adds	r3, #60	; 0x3c
 8003cd0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003cd4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	787c      	ldrb	r4, [r7, #1]
 8003cdc:	78ba      	ldrb	r2, [r7, #2]
 8003cde:	78f9      	ldrb	r1, [r7, #3]
 8003ce0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003ce2:	9302      	str	r3, [sp, #8]
 8003ce4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003ce8:	9301      	str	r3, [sp, #4]
 8003cea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	4623      	mov	r3, r4
 8003cf2:	f004 ff7d 	bl	8008bf0 <USB_HC_Init>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd90      	pop	{r4, r7, pc}

08003d0c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_HCD_HC_Halt+0x1e>
 8003d26:	2302      	movs	r3, #2
 8003d28:	e00f      	b.n	8003d4a <HAL_HCD_HC_Halt+0x3e>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	78fa      	ldrb	r2, [r7, #3]
 8003d38:	4611      	mov	r1, r2
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f005 f9cd 	bl	80090da <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	4608      	mov	r0, r1
 8003d5e:	4611      	mov	r1, r2
 8003d60:	461a      	mov	r2, r3
 8003d62:	4603      	mov	r3, r0
 8003d64:	70fb      	strb	r3, [r7, #3]
 8003d66:	460b      	mov	r3, r1
 8003d68:	70bb      	strb	r3, [r7, #2]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003d6e:	78fb      	ldrb	r3, [r7, #3]
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	212c      	movs	r1, #44	; 0x2c
 8003d74:	fb01 f303 	mul.w	r3, r1, r3
 8003d78:	4413      	add	r3, r2
 8003d7a:	333b      	adds	r3, #59	; 0x3b
 8003d7c:	78ba      	ldrb	r2, [r7, #2]
 8003d7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003d80:	78fb      	ldrb	r3, [r7, #3]
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	212c      	movs	r1, #44	; 0x2c
 8003d86:	fb01 f303 	mul.w	r3, r1, r3
 8003d8a:	4413      	add	r3, r2
 8003d8c:	333f      	adds	r3, #63	; 0x3f
 8003d8e:	787a      	ldrb	r2, [r7, #1]
 8003d90:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003d92:	7c3b      	ldrb	r3, [r7, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d112      	bne.n	8003dbe <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003d98:	78fb      	ldrb	r3, [r7, #3]
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	212c      	movs	r1, #44	; 0x2c
 8003d9e:	fb01 f303 	mul.w	r3, r1, r3
 8003da2:	4413      	add	r3, r2
 8003da4:	3342      	adds	r3, #66	; 0x42
 8003da6:	2203      	movs	r2, #3
 8003da8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003daa:	78fb      	ldrb	r3, [r7, #3]
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	212c      	movs	r1, #44	; 0x2c
 8003db0:	fb01 f303 	mul.w	r3, r1, r3
 8003db4:	4413      	add	r3, r2
 8003db6:	333d      	adds	r3, #61	; 0x3d
 8003db8:	7f3a      	ldrb	r2, [r7, #28]
 8003dba:	701a      	strb	r2, [r3, #0]
 8003dbc:	e008      	b.n	8003dd0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003dbe:	78fb      	ldrb	r3, [r7, #3]
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	212c      	movs	r1, #44	; 0x2c
 8003dc4:	fb01 f303 	mul.w	r3, r1, r3
 8003dc8:	4413      	add	r3, r2
 8003dca:	3342      	adds	r3, #66	; 0x42
 8003dcc:	2202      	movs	r2, #2
 8003dce:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003dd0:	787b      	ldrb	r3, [r7, #1]
 8003dd2:	2b03      	cmp	r3, #3
 8003dd4:	f200 80c6 	bhi.w	8003f64 <HAL_HCD_HC_SubmitRequest+0x210>
 8003dd8:	a201      	add	r2, pc, #4	; (adr r2, 8003de0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dde:	bf00      	nop
 8003de0:	08003df1 	.word	0x08003df1
 8003de4:	08003f51 	.word	0x08003f51
 8003de8:	08003e55 	.word	0x08003e55
 8003dec:	08003ed3 	.word	0x08003ed3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003df0:	7c3b      	ldrb	r3, [r7, #16]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	f040 80b8 	bne.w	8003f68 <HAL_HCD_HC_SubmitRequest+0x214>
 8003df8:	78bb      	ldrb	r3, [r7, #2]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f040 80b4 	bne.w	8003f68 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003e00:	8b3b      	ldrh	r3, [r7, #24]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d108      	bne.n	8003e18 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003e06:	78fb      	ldrb	r3, [r7, #3]
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	212c      	movs	r1, #44	; 0x2c
 8003e0c:	fb01 f303 	mul.w	r3, r1, r3
 8003e10:	4413      	add	r3, r2
 8003e12:	3355      	adds	r3, #85	; 0x55
 8003e14:	2201      	movs	r2, #1
 8003e16:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003e18:	78fb      	ldrb	r3, [r7, #3]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	212c      	movs	r1, #44	; 0x2c
 8003e1e:	fb01 f303 	mul.w	r3, r1, r3
 8003e22:	4413      	add	r3, r2
 8003e24:	3355      	adds	r3, #85	; 0x55
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d109      	bne.n	8003e40 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e2c:	78fb      	ldrb	r3, [r7, #3]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	212c      	movs	r1, #44	; 0x2c
 8003e32:	fb01 f303 	mul.w	r3, r1, r3
 8003e36:	4413      	add	r3, r2
 8003e38:	3342      	adds	r3, #66	; 0x42
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003e3e:	e093      	b.n	8003f68 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e40:	78fb      	ldrb	r3, [r7, #3]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	212c      	movs	r1, #44	; 0x2c
 8003e46:	fb01 f303 	mul.w	r3, r1, r3
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3342      	adds	r3, #66	; 0x42
 8003e4e:	2202      	movs	r2, #2
 8003e50:	701a      	strb	r2, [r3, #0]
      break;
 8003e52:	e089      	b.n	8003f68 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003e54:	78bb      	ldrb	r3, [r7, #2]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d11d      	bne.n	8003e96 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003e5a:	78fb      	ldrb	r3, [r7, #3]
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	212c      	movs	r1, #44	; 0x2c
 8003e60:	fb01 f303 	mul.w	r3, r1, r3
 8003e64:	4413      	add	r3, r2
 8003e66:	3355      	adds	r3, #85	; 0x55
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d109      	bne.n	8003e82 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e6e:	78fb      	ldrb	r3, [r7, #3]
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	212c      	movs	r1, #44	; 0x2c
 8003e74:	fb01 f303 	mul.w	r3, r1, r3
 8003e78:	4413      	add	r3, r2
 8003e7a:	3342      	adds	r3, #66	; 0x42
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003e80:	e073      	b.n	8003f6a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e82:	78fb      	ldrb	r3, [r7, #3]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	212c      	movs	r1, #44	; 0x2c
 8003e88:	fb01 f303 	mul.w	r3, r1, r3
 8003e8c:	4413      	add	r3, r2
 8003e8e:	3342      	adds	r3, #66	; 0x42
 8003e90:	2202      	movs	r2, #2
 8003e92:	701a      	strb	r2, [r3, #0]
      break;
 8003e94:	e069      	b.n	8003f6a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003e96:	78fb      	ldrb	r3, [r7, #3]
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	212c      	movs	r1, #44	; 0x2c
 8003e9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ea0:	4413      	add	r3, r2
 8003ea2:	3354      	adds	r3, #84	; 0x54
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d109      	bne.n	8003ebe <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003eaa:	78fb      	ldrb	r3, [r7, #3]
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	212c      	movs	r1, #44	; 0x2c
 8003eb0:	fb01 f303 	mul.w	r3, r1, r3
 8003eb4:	4413      	add	r3, r2
 8003eb6:	3342      	adds	r3, #66	; 0x42
 8003eb8:	2200      	movs	r2, #0
 8003eba:	701a      	strb	r2, [r3, #0]
      break;
 8003ebc:	e055      	b.n	8003f6a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ebe:	78fb      	ldrb	r3, [r7, #3]
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	212c      	movs	r1, #44	; 0x2c
 8003ec4:	fb01 f303 	mul.w	r3, r1, r3
 8003ec8:	4413      	add	r3, r2
 8003eca:	3342      	adds	r3, #66	; 0x42
 8003ecc:	2202      	movs	r2, #2
 8003ece:	701a      	strb	r2, [r3, #0]
      break;
 8003ed0:	e04b      	b.n	8003f6a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003ed2:	78bb      	ldrb	r3, [r7, #2]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d11d      	bne.n	8003f14 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	212c      	movs	r1, #44	; 0x2c
 8003ede:	fb01 f303 	mul.w	r3, r1, r3
 8003ee2:	4413      	add	r3, r2
 8003ee4:	3355      	adds	r3, #85	; 0x55
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d109      	bne.n	8003f00 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003eec:	78fb      	ldrb	r3, [r7, #3]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	212c      	movs	r1, #44	; 0x2c
 8003ef2:	fb01 f303 	mul.w	r3, r1, r3
 8003ef6:	4413      	add	r3, r2
 8003ef8:	3342      	adds	r3, #66	; 0x42
 8003efa:	2200      	movs	r2, #0
 8003efc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003efe:	e034      	b.n	8003f6a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f00:	78fb      	ldrb	r3, [r7, #3]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	212c      	movs	r1, #44	; 0x2c
 8003f06:	fb01 f303 	mul.w	r3, r1, r3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	3342      	adds	r3, #66	; 0x42
 8003f0e:	2202      	movs	r2, #2
 8003f10:	701a      	strb	r2, [r3, #0]
      break;
 8003f12:	e02a      	b.n	8003f6a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003f14:	78fb      	ldrb	r3, [r7, #3]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	212c      	movs	r1, #44	; 0x2c
 8003f1a:	fb01 f303 	mul.w	r3, r1, r3
 8003f1e:	4413      	add	r3, r2
 8003f20:	3354      	adds	r3, #84	; 0x54
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d109      	bne.n	8003f3c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f28:	78fb      	ldrb	r3, [r7, #3]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	212c      	movs	r1, #44	; 0x2c
 8003f2e:	fb01 f303 	mul.w	r3, r1, r3
 8003f32:	4413      	add	r3, r2
 8003f34:	3342      	adds	r3, #66	; 0x42
 8003f36:	2200      	movs	r2, #0
 8003f38:	701a      	strb	r2, [r3, #0]
      break;
 8003f3a:	e016      	b.n	8003f6a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f3c:	78fb      	ldrb	r3, [r7, #3]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	212c      	movs	r1, #44	; 0x2c
 8003f42:	fb01 f303 	mul.w	r3, r1, r3
 8003f46:	4413      	add	r3, r2
 8003f48:	3342      	adds	r3, #66	; 0x42
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	701a      	strb	r2, [r3, #0]
      break;
 8003f4e:	e00c      	b.n	8003f6a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	212c      	movs	r1, #44	; 0x2c
 8003f56:	fb01 f303 	mul.w	r3, r1, r3
 8003f5a:	4413      	add	r3, r2
 8003f5c:	3342      	adds	r3, #66	; 0x42
 8003f5e:	2200      	movs	r2, #0
 8003f60:	701a      	strb	r2, [r3, #0]
      break;
 8003f62:	e002      	b.n	8003f6a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003f64:	bf00      	nop
 8003f66:	e000      	b.n	8003f6a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003f68:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003f6a:	78fb      	ldrb	r3, [r7, #3]
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	212c      	movs	r1, #44	; 0x2c
 8003f70:	fb01 f303 	mul.w	r3, r1, r3
 8003f74:	4413      	add	r3, r2
 8003f76:	3344      	adds	r3, #68	; 0x44
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003f7c:	78fb      	ldrb	r3, [r7, #3]
 8003f7e:	8b3a      	ldrh	r2, [r7, #24]
 8003f80:	6879      	ldr	r1, [r7, #4]
 8003f82:	202c      	movs	r0, #44	; 0x2c
 8003f84:	fb00 f303 	mul.w	r3, r0, r3
 8003f88:	440b      	add	r3, r1
 8003f8a:	334c      	adds	r3, #76	; 0x4c
 8003f8c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003f8e:	78fb      	ldrb	r3, [r7, #3]
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	212c      	movs	r1, #44	; 0x2c
 8003f94:	fb01 f303 	mul.w	r3, r1, r3
 8003f98:	4413      	add	r3, r2
 8003f9a:	3360      	adds	r3, #96	; 0x60
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	212c      	movs	r1, #44	; 0x2c
 8003fa6:	fb01 f303 	mul.w	r3, r1, r3
 8003faa:	4413      	add	r3, r2
 8003fac:	3350      	adds	r3, #80	; 0x50
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003fb2:	78fb      	ldrb	r3, [r7, #3]
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	212c      	movs	r1, #44	; 0x2c
 8003fb8:	fb01 f303 	mul.w	r3, r1, r3
 8003fbc:	4413      	add	r3, r2
 8003fbe:	3339      	adds	r3, #57	; 0x39
 8003fc0:	78fa      	ldrb	r2, [r7, #3]
 8003fc2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003fc4:	78fb      	ldrb	r3, [r7, #3]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	212c      	movs	r1, #44	; 0x2c
 8003fca:	fb01 f303 	mul.w	r3, r1, r3
 8003fce:	4413      	add	r3, r2
 8003fd0:	3361      	adds	r3, #97	; 0x61
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6818      	ldr	r0, [r3, #0]
 8003fda:	78fb      	ldrb	r3, [r7, #3]
 8003fdc:	222c      	movs	r2, #44	; 0x2c
 8003fde:	fb02 f303 	mul.w	r3, r2, r3
 8003fe2:	3338      	adds	r3, #56	; 0x38
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	18d1      	adds	r1, r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f004 ff20 	bl	8008e34 <USB_HC_StartXfer>
 8003ff4:	4603      	mov	r3, r0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop

08004000 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f004 fc21 	bl	800885e <USB_GetMode>
 800401c:	4603      	mov	r3, r0
 800401e:	2b01      	cmp	r3, #1
 8004020:	f040 80f6 	bne.w	8004210 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4618      	mov	r0, r3
 800402a:	f004 fc05 	bl	8008838 <USB_ReadInterrupts>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 80ec 	beq.w	800420e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f004 fbfc 	bl	8008838 <USB_ReadInterrupts>
 8004040:	4603      	mov	r3, r0
 8004042:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004046:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800404a:	d104      	bne.n	8004056 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004054:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4618      	mov	r0, r3
 800405c:	f004 fbec 	bl	8008838 <USB_ReadInterrupts>
 8004060:	4603      	mov	r3, r0
 8004062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004066:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800406a:	d104      	bne.n	8004076 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004074:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f004 fbdc 	bl	8008838 <USB_ReadInterrupts>
 8004080:	4603      	mov	r3, r0
 8004082:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004086:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800408a:	d104      	bne.n	8004096 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004094:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f004 fbcc 	bl	8008838 <USB_ReadInterrupts>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d103      	bne.n	80040b2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2202      	movs	r2, #2
 80040b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f004 fbbe 	bl	8008838 <USB_ReadInterrupts>
 80040bc:	4603      	mov	r3, r0
 80040be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040c6:	d11c      	bne.n	8004102 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80040d0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10f      	bne.n	8004102 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80040e2:	2110      	movs	r1, #16
 80040e4:	6938      	ldr	r0, [r7, #16]
 80040e6:	f004 faad 	bl	8008644 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80040ea:	6938      	ldr	r0, [r7, #16]
 80040ec:	f004 fade 	bl	80086ac <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2101      	movs	r1, #1
 80040f6:	4618      	mov	r0, r3
 80040f8:	f004 fcb4 	bl	8008a64 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f00f fa93 	bl	8013628 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f004 fb96 	bl	8008838 <USB_ReadInterrupts>
 800410c:	4603      	mov	r3, r0
 800410e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004112:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004116:	d102      	bne.n	800411e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f001 f89e 	bl	800525a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f004 fb88 	bl	8008838 <USB_ReadInterrupts>
 8004128:	4603      	mov	r3, r0
 800412a:	f003 0308 	and.w	r3, r3, #8
 800412e:	2b08      	cmp	r3, #8
 8004130:	d106      	bne.n	8004140 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f00f fa5c 	bl	80135f0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2208      	movs	r2, #8
 800413e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4618      	mov	r0, r3
 8004146:	f004 fb77 	bl	8008838 <USB_ReadInterrupts>
 800414a:	4603      	mov	r3, r0
 800414c:	f003 0310 	and.w	r3, r3, #16
 8004150:	2b10      	cmp	r3, #16
 8004152:	d101      	bne.n	8004158 <HAL_HCD_IRQHandler+0x158>
 8004154:	2301      	movs	r3, #1
 8004156:	e000      	b.n	800415a <HAL_HCD_IRQHandler+0x15a>
 8004158:	2300      	movs	r3, #0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d012      	beq.n	8004184 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	699a      	ldr	r2, [r3, #24]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0210 	bic.w	r2, r2, #16
 800416c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 ffa1 	bl	80050b6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	699a      	ldr	r2, [r3, #24]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0210 	orr.w	r2, r2, #16
 8004182:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4618      	mov	r0, r3
 800418a:	f004 fb55 	bl	8008838 <USB_ReadInterrupts>
 800418e:	4603      	mov	r3, r0
 8004190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004194:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004198:	d13a      	bne.n	8004210 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4618      	mov	r0, r3
 80041a0:	f004 ff8a 	bl	80090b8 <USB_HC_ReadInterrupt>
 80041a4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80041a6:	2300      	movs	r3, #0
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	e025      	b.n	80041f8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	fa22 f303 	lsr.w	r3, r2, r3
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d018      	beq.n	80041f2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041d6:	d106      	bne.n	80041e6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	4619      	mov	r1, r3
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f8ab 	bl	800433a <HCD_HC_IN_IRQHandler>
 80041e4:	e005      	b.n	80041f2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	4619      	mov	r1, r3
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 fbf9 	bl	80049e4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	3301      	adds	r3, #1
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d3d4      	bcc.n	80041ac <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800420a:	615a      	str	r2, [r3, #20]
 800420c:	e000      	b.n	8004210 <HAL_HCD_IRQHandler+0x210>
      return;
 800420e:	bf00      	nop
    }
  }
}
 8004210:	3718      	adds	r7, #24
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b082      	sub	sp, #8
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_HCD_Start+0x16>
 8004228:	2302      	movs	r3, #2
 800422a:	e013      	b.n	8004254 <HAL_HCD_Start+0x3e>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2101      	movs	r1, #1
 800423a:	4618      	mov	r0, r3
 800423c:	f004 fc76 	bl	8008b2c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4618      	mov	r0, r3
 8004246:	f004 f98e 	bl	8008566 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800426a:	2b01      	cmp	r3, #1
 800426c:	d101      	bne.n	8004272 <HAL_HCD_Stop+0x16>
 800426e:	2302      	movs	r3, #2
 8004270:	e00d      	b.n	800428e <HAL_HCD_Stop+0x32>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f005 f864 	bl	800934c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b082      	sub	sp, #8
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f004 fc18 	bl	8008ad8 <USB_ResetPort>
 80042a8:	4603      	mov	r3, r0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b083      	sub	sp, #12
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
 80042ba:	460b      	mov	r3, r1
 80042bc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80042be:	78fb      	ldrb	r3, [r7, #3]
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	212c      	movs	r1, #44	; 0x2c
 80042c4:	fb01 f303 	mul.w	r3, r1, r3
 80042c8:	4413      	add	r3, r2
 80042ca:	3360      	adds	r3, #96	; 0x60
 80042cc:	781b      	ldrb	r3, [r3, #0]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
 80042e2:	460b      	mov	r3, r1
 80042e4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80042e6:	78fb      	ldrb	r3, [r7, #3]
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	212c      	movs	r1, #44	; 0x2c
 80042ec:	fb01 f303 	mul.w	r3, r1, r3
 80042f0:	4413      	add	r3, r2
 80042f2:	3350      	adds	r3, #80	; 0x50
 80042f4:	681b      	ldr	r3, [r3, #0]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b082      	sub	sp, #8
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f004 fc5c 	bl	8008bcc <USB_GetCurrentFrame>
 8004314:	4603      	mov	r3, r0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b082      	sub	sp, #8
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f004 fc37 	bl	8008b9e <USB_GetHostSpeed>
 8004330:	4603      	mov	r3, r0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b086      	sub	sp, #24
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
 8004342:	460b      	mov	r3, r1
 8004344:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004350:	78fb      	ldrb	r3, [r7, #3]
 8004352:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	4413      	add	r3, r2
 800435c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 0304 	and.w	r3, r3, #4
 8004366:	2b04      	cmp	r3, #4
 8004368:	d11a      	bne.n	80043a0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	4413      	add	r3, r2
 8004372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004376:	461a      	mov	r2, r3
 8004378:	2304      	movs	r3, #4
 800437a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	212c      	movs	r1, #44	; 0x2c
 8004382:	fb01 f303 	mul.w	r3, r1, r3
 8004386:	4413      	add	r3, r2
 8004388:	3361      	adds	r3, #97	; 0x61
 800438a:	2206      	movs	r2, #6
 800438c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	4611      	mov	r1, r2
 8004398:	4618      	mov	r0, r3
 800439a:	f004 fe9e 	bl	80090da <USB_HC_Halt>
 800439e:	e0af      	b.n	8004500 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043b6:	d11b      	bne.n	80043f0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c4:	461a      	mov	r2, r3
 80043c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	212c      	movs	r1, #44	; 0x2c
 80043d2:	fb01 f303 	mul.w	r3, r1, r3
 80043d6:	4413      	add	r3, r2
 80043d8:	3361      	adds	r3, #97	; 0x61
 80043da:	2207      	movs	r2, #7
 80043dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	b2d2      	uxtb	r2, r2
 80043e6:	4611      	mov	r1, r2
 80043e8:	4618      	mov	r0, r3
 80043ea:	f004 fe76 	bl	80090da <USB_HC_Halt>
 80043ee:	e087      	b.n	8004500 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 0320 	and.w	r3, r3, #32
 8004402:	2b20      	cmp	r3, #32
 8004404:	d109      	bne.n	800441a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	4413      	add	r3, r2
 800440e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004412:	461a      	mov	r2, r3
 8004414:	2320      	movs	r3, #32
 8004416:	6093      	str	r3, [r2, #8]
 8004418:	e072      	b.n	8004500 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	015a      	lsls	r2, r3, #5
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	4413      	add	r3, r2
 8004422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	2b08      	cmp	r3, #8
 800442e:	d11a      	bne.n	8004466 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	4413      	add	r3, r2
 8004438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800443c:	461a      	mov	r2, r3
 800443e:	2308      	movs	r3, #8
 8004440:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	212c      	movs	r1, #44	; 0x2c
 8004448:	fb01 f303 	mul.w	r3, r1, r3
 800444c:	4413      	add	r3, r2
 800444e:	3361      	adds	r3, #97	; 0x61
 8004450:	2205      	movs	r2, #5
 8004452:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	4611      	mov	r1, r2
 800445e:	4618      	mov	r0, r3
 8004460:	f004 fe3b 	bl	80090da <USB_HC_Halt>
 8004464:	e04c      	b.n	8004500 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	015a      	lsls	r2, r3, #5
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	4413      	add	r3, r2
 800446e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800447c:	d11b      	bne.n	80044b6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	4413      	add	r3, r2
 8004486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800448a:	461a      	mov	r2, r3
 800448c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004490:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	212c      	movs	r1, #44	; 0x2c
 8004498:	fb01 f303 	mul.w	r3, r1, r3
 800449c:	4413      	add	r3, r2
 800449e:	3361      	adds	r3, #97	; 0x61
 80044a0:	2208      	movs	r2, #8
 80044a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	4611      	mov	r1, r2
 80044ae:	4618      	mov	r0, r3
 80044b0:	f004 fe13 	bl	80090da <USB_HC_Halt>
 80044b4:	e024      	b.n	8004500 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	015a      	lsls	r2, r3, #5
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	4413      	add	r3, r2
 80044be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c8:	2b80      	cmp	r3, #128	; 0x80
 80044ca:	d119      	bne.n	8004500 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044d8:	461a      	mov	r2, r3
 80044da:	2380      	movs	r3, #128	; 0x80
 80044dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	212c      	movs	r1, #44	; 0x2c
 80044e4:	fb01 f303 	mul.w	r3, r1, r3
 80044e8:	4413      	add	r3, r2
 80044ea:	3361      	adds	r3, #97	; 0x61
 80044ec:	2206      	movs	r2, #6
 80044ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	b2d2      	uxtb	r2, r2
 80044f8:	4611      	mov	r1, r2
 80044fa:	4618      	mov	r0, r3
 80044fc:	f004 fded 	bl	80090da <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	4413      	add	r3, r2
 8004508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004512:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004516:	d112      	bne.n	800453e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	4611      	mov	r1, r2
 8004522:	4618      	mov	r0, r3
 8004524:	f004 fdd9 	bl	80090da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	4413      	add	r3, r2
 8004530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004534:	461a      	mov	r2, r3
 8004536:	f44f 7300 	mov.w	r3, #512	; 0x200
 800453a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800453c:	e24e      	b.n	80049dc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	015a      	lsls	r2, r3, #5
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	4413      	add	r3, r2
 8004546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b01      	cmp	r3, #1
 8004552:	f040 80df 	bne.w	8004714 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d019      	beq.n	8004592 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	212c      	movs	r1, #44	; 0x2c
 8004564:	fb01 f303 	mul.w	r3, r1, r3
 8004568:	4413      	add	r3, r2
 800456a:	3348      	adds	r3, #72	; 0x48
 800456c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	0159      	lsls	r1, r3, #5
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	440b      	add	r3, r1
 8004576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004580:	1ad2      	subs	r2, r2, r3
 8004582:	6879      	ldr	r1, [r7, #4]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	202c      	movs	r0, #44	; 0x2c
 8004588:	fb00 f303 	mul.w	r3, r0, r3
 800458c:	440b      	add	r3, r1
 800458e:	3350      	adds	r3, #80	; 0x50
 8004590:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	212c      	movs	r1, #44	; 0x2c
 8004598:	fb01 f303 	mul.w	r3, r1, r3
 800459c:	4413      	add	r3, r2
 800459e:	3361      	adds	r3, #97	; 0x61
 80045a0:	2201      	movs	r2, #1
 80045a2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	212c      	movs	r1, #44	; 0x2c
 80045aa:	fb01 f303 	mul.w	r3, r1, r3
 80045ae:	4413      	add	r3, r2
 80045b0:	335c      	adds	r3, #92	; 0x5c
 80045b2:	2200      	movs	r2, #0
 80045b4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	015a      	lsls	r2, r3, #5
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	4413      	add	r3, r2
 80045be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c2:	461a      	mov	r2, r3
 80045c4:	2301      	movs	r3, #1
 80045c6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	212c      	movs	r1, #44	; 0x2c
 80045ce:	fb01 f303 	mul.w	r3, r1, r3
 80045d2:	4413      	add	r3, r2
 80045d4:	333f      	adds	r3, #63	; 0x3f
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d009      	beq.n	80045f0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	212c      	movs	r1, #44	; 0x2c
 80045e2:	fb01 f303 	mul.w	r3, r1, r3
 80045e6:	4413      	add	r3, r2
 80045e8:	333f      	adds	r3, #63	; 0x3f
 80045ea:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d111      	bne.n	8004614 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	4611      	mov	r1, r2
 80045fa:	4618      	mov	r0, r3
 80045fc:	f004 fd6d 	bl	80090da <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	4413      	add	r3, r2
 8004608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800460c:	461a      	mov	r2, r3
 800460e:	2310      	movs	r3, #16
 8004610:	6093      	str	r3, [r2, #8]
 8004612:	e03a      	b.n	800468a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	212c      	movs	r1, #44	; 0x2c
 800461a:	fb01 f303 	mul.w	r3, r1, r3
 800461e:	4413      	add	r3, r2
 8004620:	333f      	adds	r3, #63	; 0x3f
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b03      	cmp	r3, #3
 8004626:	d009      	beq.n	800463c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	212c      	movs	r1, #44	; 0x2c
 800462e:	fb01 f303 	mul.w	r3, r1, r3
 8004632:	4413      	add	r3, r2
 8004634:	333f      	adds	r3, #63	; 0x3f
 8004636:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004638:	2b01      	cmp	r3, #1
 800463a:	d126      	bne.n	800468a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	4413      	add	r3, r2
 8004644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	0151      	lsls	r1, r2, #5
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	440a      	add	r2, r1
 8004652:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004656:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800465a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	212c      	movs	r1, #44	; 0x2c
 8004662:	fb01 f303 	mul.w	r3, r1, r3
 8004666:	4413      	add	r3, r2
 8004668:	3360      	adds	r3, #96	; 0x60
 800466a:	2201      	movs	r2, #1
 800466c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	b2d9      	uxtb	r1, r3
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	202c      	movs	r0, #44	; 0x2c
 8004678:	fb00 f303 	mul.w	r3, r0, r3
 800467c:	4413      	add	r3, r2
 800467e:	3360      	adds	r3, #96	; 0x60
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	461a      	mov	r2, r3
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f00e ffdd 	bl	8013644 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d12b      	bne.n	80046ea <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	212c      	movs	r1, #44	; 0x2c
 8004698:	fb01 f303 	mul.w	r3, r1, r3
 800469c:	4413      	add	r3, r2
 800469e:	3348      	adds	r3, #72	; 0x48
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6879      	ldr	r1, [r7, #4]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	202c      	movs	r0, #44	; 0x2c
 80046a8:	fb00 f202 	mul.w	r2, r0, r2
 80046ac:	440a      	add	r2, r1
 80046ae:	3240      	adds	r2, #64	; 0x40
 80046b0:	8812      	ldrh	r2, [r2, #0]
 80046b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 818e 	beq.w	80049dc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	212c      	movs	r1, #44	; 0x2c
 80046c6:	fb01 f303 	mul.w	r3, r1, r3
 80046ca:	4413      	add	r3, r2
 80046cc:	3354      	adds	r3, #84	; 0x54
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	f083 0301 	eor.w	r3, r3, #1
 80046d4:	b2d8      	uxtb	r0, r3
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	212c      	movs	r1, #44	; 0x2c
 80046dc:	fb01 f303 	mul.w	r3, r1, r3
 80046e0:	4413      	add	r3, r2
 80046e2:	3354      	adds	r3, #84	; 0x54
 80046e4:	4602      	mov	r2, r0
 80046e6:	701a      	strb	r2, [r3, #0]
}
 80046e8:	e178      	b.n	80049dc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	212c      	movs	r1, #44	; 0x2c
 80046f0:	fb01 f303 	mul.w	r3, r1, r3
 80046f4:	4413      	add	r3, r2
 80046f6:	3354      	adds	r3, #84	; 0x54
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	f083 0301 	eor.w	r3, r3, #1
 80046fe:	b2d8      	uxtb	r0, r3
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	212c      	movs	r1, #44	; 0x2c
 8004706:	fb01 f303 	mul.w	r3, r1, r3
 800470a:	4413      	add	r3, r2
 800470c:	3354      	adds	r3, #84	; 0x54
 800470e:	4602      	mov	r2, r0
 8004710:	701a      	strb	r2, [r3, #0]
}
 8004712:	e163      	b.n	80049dc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	4413      	add	r3, r2
 800471c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b02      	cmp	r3, #2
 8004728:	f040 80f6 	bne.w	8004918 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	212c      	movs	r1, #44	; 0x2c
 8004732:	fb01 f303 	mul.w	r3, r1, r3
 8004736:	4413      	add	r3, r2
 8004738:	3361      	adds	r3, #97	; 0x61
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d109      	bne.n	8004754 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	212c      	movs	r1, #44	; 0x2c
 8004746:	fb01 f303 	mul.w	r3, r1, r3
 800474a:	4413      	add	r3, r2
 800474c:	3360      	adds	r3, #96	; 0x60
 800474e:	2201      	movs	r2, #1
 8004750:	701a      	strb	r2, [r3, #0]
 8004752:	e0c9      	b.n	80048e8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	212c      	movs	r1, #44	; 0x2c
 800475a:	fb01 f303 	mul.w	r3, r1, r3
 800475e:	4413      	add	r3, r2
 8004760:	3361      	adds	r3, #97	; 0x61
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	2b05      	cmp	r3, #5
 8004766:	d109      	bne.n	800477c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	212c      	movs	r1, #44	; 0x2c
 800476e:	fb01 f303 	mul.w	r3, r1, r3
 8004772:	4413      	add	r3, r2
 8004774:	3360      	adds	r3, #96	; 0x60
 8004776:	2205      	movs	r2, #5
 8004778:	701a      	strb	r2, [r3, #0]
 800477a:	e0b5      	b.n	80048e8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	212c      	movs	r1, #44	; 0x2c
 8004782:	fb01 f303 	mul.w	r3, r1, r3
 8004786:	4413      	add	r3, r2
 8004788:	3361      	adds	r3, #97	; 0x61
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	2b06      	cmp	r3, #6
 800478e:	d009      	beq.n	80047a4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	212c      	movs	r1, #44	; 0x2c
 8004796:	fb01 f303 	mul.w	r3, r1, r3
 800479a:	4413      	add	r3, r2
 800479c:	3361      	adds	r3, #97	; 0x61
 800479e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d150      	bne.n	8004846 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	212c      	movs	r1, #44	; 0x2c
 80047aa:	fb01 f303 	mul.w	r3, r1, r3
 80047ae:	4413      	add	r3, r2
 80047b0:	335c      	adds	r3, #92	; 0x5c
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	1c5a      	adds	r2, r3, #1
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	202c      	movs	r0, #44	; 0x2c
 80047bc:	fb00 f303 	mul.w	r3, r0, r3
 80047c0:	440b      	add	r3, r1
 80047c2:	335c      	adds	r3, #92	; 0x5c
 80047c4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	212c      	movs	r1, #44	; 0x2c
 80047cc:	fb01 f303 	mul.w	r3, r1, r3
 80047d0:	4413      	add	r3, r2
 80047d2:	335c      	adds	r3, #92	; 0x5c
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d912      	bls.n	8004800 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	212c      	movs	r1, #44	; 0x2c
 80047e0:	fb01 f303 	mul.w	r3, r1, r3
 80047e4:	4413      	add	r3, r2
 80047e6:	335c      	adds	r3, #92	; 0x5c
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	212c      	movs	r1, #44	; 0x2c
 80047f2:	fb01 f303 	mul.w	r3, r1, r3
 80047f6:	4413      	add	r3, r2
 80047f8:	3360      	adds	r3, #96	; 0x60
 80047fa:	2204      	movs	r2, #4
 80047fc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80047fe:	e073      	b.n	80048e8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	212c      	movs	r1, #44	; 0x2c
 8004806:	fb01 f303 	mul.w	r3, r1, r3
 800480a:	4413      	add	r3, r2
 800480c:	3360      	adds	r3, #96	; 0x60
 800480e:	2202      	movs	r2, #2
 8004810:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	4413      	add	r3, r2
 800481a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004828:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004830:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	4413      	add	r3, r2
 800483a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800483e:	461a      	mov	r2, r3
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004844:	e050      	b.n	80048e8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	212c      	movs	r1, #44	; 0x2c
 800484c:	fb01 f303 	mul.w	r3, r1, r3
 8004850:	4413      	add	r3, r2
 8004852:	3361      	adds	r3, #97	; 0x61
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	2b03      	cmp	r3, #3
 8004858:	d122      	bne.n	80048a0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	212c      	movs	r1, #44	; 0x2c
 8004860:	fb01 f303 	mul.w	r3, r1, r3
 8004864:	4413      	add	r3, r2
 8004866:	3360      	adds	r3, #96	; 0x60
 8004868:	2202      	movs	r2, #2
 800486a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	015a      	lsls	r2, r3, #5
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	4413      	add	r3, r2
 8004874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004882:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800488a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	015a      	lsls	r2, r3, #5
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	4413      	add	r3, r2
 8004894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004898:	461a      	mov	r2, r3
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	e023      	b.n	80048e8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	212c      	movs	r1, #44	; 0x2c
 80048a6:	fb01 f303 	mul.w	r3, r1, r3
 80048aa:	4413      	add	r3, r2
 80048ac:	3361      	adds	r3, #97	; 0x61
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	2b07      	cmp	r3, #7
 80048b2:	d119      	bne.n	80048e8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	212c      	movs	r1, #44	; 0x2c
 80048ba:	fb01 f303 	mul.w	r3, r1, r3
 80048be:	4413      	add	r3, r2
 80048c0:	335c      	adds	r3, #92	; 0x5c
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	1c5a      	adds	r2, r3, #1
 80048c6:	6879      	ldr	r1, [r7, #4]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	202c      	movs	r0, #44	; 0x2c
 80048cc:	fb00 f303 	mul.w	r3, r0, r3
 80048d0:	440b      	add	r3, r1
 80048d2:	335c      	adds	r3, #92	; 0x5c
 80048d4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	212c      	movs	r1, #44	; 0x2c
 80048dc:	fb01 f303 	mul.w	r3, r1, r3
 80048e0:	4413      	add	r3, r2
 80048e2:	3360      	adds	r3, #96	; 0x60
 80048e4:	2204      	movs	r2, #4
 80048e6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	015a      	lsls	r2, r3, #5
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f4:	461a      	mov	r2, r3
 80048f6:	2302      	movs	r3, #2
 80048f8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	b2d9      	uxtb	r1, r3
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	202c      	movs	r0, #44	; 0x2c
 8004904:	fb00 f303 	mul.w	r3, r0, r3
 8004908:	4413      	add	r3, r2
 800490a:	3360      	adds	r3, #96	; 0x60
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	461a      	mov	r2, r3
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f00e fe97 	bl	8013644 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004916:	e061      	b.n	80049dc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	4413      	add	r3, r2
 8004920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 0310 	and.w	r3, r3, #16
 800492a:	2b10      	cmp	r3, #16
 800492c:	d156      	bne.n	80049dc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	212c      	movs	r1, #44	; 0x2c
 8004934:	fb01 f303 	mul.w	r3, r1, r3
 8004938:	4413      	add	r3, r2
 800493a:	333f      	adds	r3, #63	; 0x3f
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	2b03      	cmp	r3, #3
 8004940:	d111      	bne.n	8004966 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	212c      	movs	r1, #44	; 0x2c
 8004948:	fb01 f303 	mul.w	r3, r1, r3
 800494c:	4413      	add	r3, r2
 800494e:	335c      	adds	r3, #92	; 0x5c
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	b2d2      	uxtb	r2, r2
 800495c:	4611      	mov	r1, r2
 800495e:	4618      	mov	r0, r3
 8004960:	f004 fbbb 	bl	80090da <USB_HC_Halt>
 8004964:	e031      	b.n	80049ca <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	212c      	movs	r1, #44	; 0x2c
 800496c:	fb01 f303 	mul.w	r3, r1, r3
 8004970:	4413      	add	r3, r2
 8004972:	333f      	adds	r3, #63	; 0x3f
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d009      	beq.n	800498e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	212c      	movs	r1, #44	; 0x2c
 8004980:	fb01 f303 	mul.w	r3, r1, r3
 8004984:	4413      	add	r3, r2
 8004986:	333f      	adds	r3, #63	; 0x3f
 8004988:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800498a:	2b02      	cmp	r3, #2
 800498c:	d11d      	bne.n	80049ca <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	212c      	movs	r1, #44	; 0x2c
 8004994:	fb01 f303 	mul.w	r3, r1, r3
 8004998:	4413      	add	r3, r2
 800499a:	335c      	adds	r3, #92	; 0x5c
 800499c:	2200      	movs	r2, #0
 800499e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d110      	bne.n	80049ca <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	212c      	movs	r1, #44	; 0x2c
 80049ae:	fb01 f303 	mul.w	r3, r1, r3
 80049b2:	4413      	add	r3, r2
 80049b4:	3361      	adds	r3, #97	; 0x61
 80049b6:	2203      	movs	r2, #3
 80049b8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	b2d2      	uxtb	r2, r2
 80049c2:	4611      	mov	r1, r2
 80049c4:	4618      	mov	r0, r3
 80049c6:	f004 fb88 	bl	80090da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049d6:	461a      	mov	r2, r3
 80049d8:	2310      	movs	r3, #16
 80049da:	6093      	str	r3, [r2, #8]
}
 80049dc:	bf00      	nop
 80049de:	3718      	adds	r7, #24
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b088      	sub	sp, #32
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	460b      	mov	r3, r1
 80049ee:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80049fa:	78fb      	ldrb	r3, [r7, #3]
 80049fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	015a      	lsls	r2, r3, #5
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	d11a      	bne.n	8004a4a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a20:	461a      	mov	r2, r3
 8004a22:	2304      	movs	r3, #4
 8004a24:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	212c      	movs	r1, #44	; 0x2c
 8004a2c:	fb01 f303 	mul.w	r3, r1, r3
 8004a30:	4413      	add	r3, r2
 8004a32:	3361      	adds	r3, #97	; 0x61
 8004a34:	2206      	movs	r2, #6
 8004a36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	4611      	mov	r1, r2
 8004a42:	4618      	mov	r0, r3
 8004a44:	f004 fb49 	bl	80090da <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004a48:	e331      	b.n	80050ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	015a      	lsls	r2, r3, #5
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f003 0320 	and.w	r3, r3, #32
 8004a5c:	2b20      	cmp	r3, #32
 8004a5e:	d12e      	bne.n	8004abe <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	2320      	movs	r3, #32
 8004a70:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	212c      	movs	r1, #44	; 0x2c
 8004a78:	fb01 f303 	mul.w	r3, r1, r3
 8004a7c:	4413      	add	r3, r2
 8004a7e:	333d      	adds	r3, #61	; 0x3d
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	f040 8313 	bne.w	80050ae <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	212c      	movs	r1, #44	; 0x2c
 8004a8e:	fb01 f303 	mul.w	r3, r1, r3
 8004a92:	4413      	add	r3, r2
 8004a94:	333d      	adds	r3, #61	; 0x3d
 8004a96:	2200      	movs	r2, #0
 8004a98:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	212c      	movs	r1, #44	; 0x2c
 8004aa0:	fb01 f303 	mul.w	r3, r1, r3
 8004aa4:	4413      	add	r3, r2
 8004aa6:	3360      	adds	r3, #96	; 0x60
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	b2d2      	uxtb	r2, r2
 8004ab4:	4611      	mov	r1, r2
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f004 fb0f 	bl	80090da <USB_HC_Halt>
}
 8004abc:	e2f7      	b.n	80050ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	015a      	lsls	r2, r3, #5
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ad4:	d112      	bne.n	8004afc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ae8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	b2d2      	uxtb	r2, r2
 8004af2:	4611      	mov	r1, r2
 8004af4:	4618      	mov	r0, r3
 8004af6:	f004 faf0 	bl	80090da <USB_HC_Halt>
}
 8004afa:	e2d8      	b.n	80050ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d140      	bne.n	8004b94 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	212c      	movs	r1, #44	; 0x2c
 8004b18:	fb01 f303 	mul.w	r3, r1, r3
 8004b1c:	4413      	add	r3, r2
 8004b1e:	335c      	adds	r3, #92	; 0x5c
 8004b20:	2200      	movs	r2, #0
 8004b22:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b36:	2b40      	cmp	r3, #64	; 0x40
 8004b38:	d111      	bne.n	8004b5e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	212c      	movs	r1, #44	; 0x2c
 8004b40:	fb01 f303 	mul.w	r3, r1, r3
 8004b44:	4413      	add	r3, r2
 8004b46:	333d      	adds	r3, #61	; 0x3d
 8004b48:	2201      	movs	r2, #1
 8004b4a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b58:	461a      	mov	r2, r3
 8004b5a:	2340      	movs	r3, #64	; 0x40
 8004b5c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	015a      	lsls	r2, r3, #5
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	212c      	movs	r1, #44	; 0x2c
 8004b76:	fb01 f303 	mul.w	r3, r1, r3
 8004b7a:	4413      	add	r3, r2
 8004b7c:	3361      	adds	r3, #97	; 0x61
 8004b7e:	2201      	movs	r2, #1
 8004b80:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	b2d2      	uxtb	r2, r2
 8004b8a:	4611      	mov	r1, r2
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f004 faa4 	bl	80090da <USB_HC_Halt>
}
 8004b92:	e28c      	b.n	80050ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba6:	2b40      	cmp	r3, #64	; 0x40
 8004ba8:	d12c      	bne.n	8004c04 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	212c      	movs	r1, #44	; 0x2c
 8004bb0:	fb01 f303 	mul.w	r3, r1, r3
 8004bb4:	4413      	add	r3, r2
 8004bb6:	3361      	adds	r3, #97	; 0x61
 8004bb8:	2204      	movs	r2, #4
 8004bba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	212c      	movs	r1, #44	; 0x2c
 8004bc2:	fb01 f303 	mul.w	r3, r1, r3
 8004bc6:	4413      	add	r3, r2
 8004bc8:	333d      	adds	r3, #61	; 0x3d
 8004bca:	2201      	movs	r2, #1
 8004bcc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	212c      	movs	r1, #44	; 0x2c
 8004bd4:	fb01 f303 	mul.w	r3, r1, r3
 8004bd8:	4413      	add	r3, r2
 8004bda:	335c      	adds	r3, #92	; 0x5c
 8004bdc:	2200      	movs	r2, #0
 8004bde:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	b2d2      	uxtb	r2, r2
 8004be8:	4611      	mov	r1, r2
 8004bea:	4618      	mov	r0, r3
 8004bec:	f004 fa75 	bl	80090da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	2340      	movs	r3, #64	; 0x40
 8004c00:	6093      	str	r3, [r2, #8]
}
 8004c02:	e254      	b.n	80050ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f003 0308 	and.w	r3, r3, #8
 8004c16:	2b08      	cmp	r3, #8
 8004c18:	d11a      	bne.n	8004c50 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	015a      	lsls	r2, r3, #5
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	4413      	add	r3, r2
 8004c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c26:	461a      	mov	r2, r3
 8004c28:	2308      	movs	r3, #8
 8004c2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	212c      	movs	r1, #44	; 0x2c
 8004c32:	fb01 f303 	mul.w	r3, r1, r3
 8004c36:	4413      	add	r3, r2
 8004c38:	3361      	adds	r3, #97	; 0x61
 8004c3a:	2205      	movs	r2, #5
 8004c3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	b2d2      	uxtb	r2, r2
 8004c46:	4611      	mov	r1, r2
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f004 fa46 	bl	80090da <USB_HC_Halt>
}
 8004c4e:	e22e      	b.n	80050ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	015a      	lsls	r2, r3, #5
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 0310 	and.w	r3, r3, #16
 8004c62:	2b10      	cmp	r3, #16
 8004c64:	d140      	bne.n	8004ce8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	212c      	movs	r1, #44	; 0x2c
 8004c6c:	fb01 f303 	mul.w	r3, r1, r3
 8004c70:	4413      	add	r3, r2
 8004c72:	335c      	adds	r3, #92	; 0x5c
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	212c      	movs	r1, #44	; 0x2c
 8004c7e:	fb01 f303 	mul.w	r3, r1, r3
 8004c82:	4413      	add	r3, r2
 8004c84:	3361      	adds	r3, #97	; 0x61
 8004c86:	2203      	movs	r2, #3
 8004c88:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	212c      	movs	r1, #44	; 0x2c
 8004c90:	fb01 f303 	mul.w	r3, r1, r3
 8004c94:	4413      	add	r3, r2
 8004c96:	333d      	adds	r3, #61	; 0x3d
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d112      	bne.n	8004cc4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	212c      	movs	r1, #44	; 0x2c
 8004ca4:	fb01 f303 	mul.w	r3, r1, r3
 8004ca8:	4413      	add	r3, r2
 8004caa:	333c      	adds	r3, #60	; 0x3c
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d108      	bne.n	8004cc4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	212c      	movs	r1, #44	; 0x2c
 8004cb8:	fb01 f303 	mul.w	r3, r1, r3
 8004cbc:	4413      	add	r3, r2
 8004cbe:	333d      	adds	r3, #61	; 0x3d
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	b2d2      	uxtb	r2, r2
 8004ccc:	4611      	mov	r1, r2
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f004 fa03 	bl	80090da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	2310      	movs	r3, #16
 8004ce4:	6093      	str	r3, [r2, #8]
}
 8004ce6:	e1e2      	b.n	80050ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfa:	2b80      	cmp	r3, #128	; 0x80
 8004cfc:	d164      	bne.n	8004dc8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d111      	bne.n	8004d2a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	212c      	movs	r1, #44	; 0x2c
 8004d0c:	fb01 f303 	mul.w	r3, r1, r3
 8004d10:	4413      	add	r3, r2
 8004d12:	3361      	adds	r3, #97	; 0x61
 8004d14:	2206      	movs	r2, #6
 8004d16:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	4611      	mov	r1, r2
 8004d22:	4618      	mov	r0, r3
 8004d24:	f004 f9d9 	bl	80090da <USB_HC_Halt>
 8004d28:	e044      	b.n	8004db4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	212c      	movs	r1, #44	; 0x2c
 8004d30:	fb01 f303 	mul.w	r3, r1, r3
 8004d34:	4413      	add	r3, r2
 8004d36:	335c      	adds	r3, #92	; 0x5c
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	1c5a      	adds	r2, r3, #1
 8004d3c:	6879      	ldr	r1, [r7, #4]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	202c      	movs	r0, #44	; 0x2c
 8004d42:	fb00 f303 	mul.w	r3, r0, r3
 8004d46:	440b      	add	r3, r1
 8004d48:	335c      	adds	r3, #92	; 0x5c
 8004d4a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	212c      	movs	r1, #44	; 0x2c
 8004d52:	fb01 f303 	mul.w	r3, r1, r3
 8004d56:	4413      	add	r3, r2
 8004d58:	335c      	adds	r3, #92	; 0x5c
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d920      	bls.n	8004da2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	212c      	movs	r1, #44	; 0x2c
 8004d66:	fb01 f303 	mul.w	r3, r1, r3
 8004d6a:	4413      	add	r3, r2
 8004d6c:	335c      	adds	r3, #92	; 0x5c
 8004d6e:	2200      	movs	r2, #0
 8004d70:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	212c      	movs	r1, #44	; 0x2c
 8004d78:	fb01 f303 	mul.w	r3, r1, r3
 8004d7c:	4413      	add	r3, r2
 8004d7e:	3360      	adds	r3, #96	; 0x60
 8004d80:	2204      	movs	r2, #4
 8004d82:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	b2d9      	uxtb	r1, r3
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	202c      	movs	r0, #44	; 0x2c
 8004d8e:	fb00 f303 	mul.w	r3, r0, r3
 8004d92:	4413      	add	r3, r2
 8004d94:	3360      	adds	r3, #96	; 0x60
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	461a      	mov	r2, r3
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f00e fc52 	bl	8013644 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004da0:	e008      	b.n	8004db4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	212c      	movs	r1, #44	; 0x2c
 8004da8:	fb01 f303 	mul.w	r3, r1, r3
 8004dac:	4413      	add	r3, r2
 8004dae:	3360      	adds	r3, #96	; 0x60
 8004db0:	2202      	movs	r2, #2
 8004db2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	2380      	movs	r3, #128	; 0x80
 8004dc4:	6093      	str	r3, [r2, #8]
}
 8004dc6:	e172      	b.n	80050ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dde:	d11b      	bne.n	8004e18 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	212c      	movs	r1, #44	; 0x2c
 8004de6:	fb01 f303 	mul.w	r3, r1, r3
 8004dea:	4413      	add	r3, r2
 8004dec:	3361      	adds	r3, #97	; 0x61
 8004dee:	2208      	movs	r2, #8
 8004df0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	b2d2      	uxtb	r2, r2
 8004dfa:	4611      	mov	r1, r2
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f004 f96c 	bl	80090da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e0e:	461a      	mov	r2, r3
 8004e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e14:	6093      	str	r3, [r2, #8]
}
 8004e16:	e14a      	b.n	80050ae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	f040 813f 	bne.w	80050ae <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	212c      	movs	r1, #44	; 0x2c
 8004e36:	fb01 f303 	mul.w	r3, r1, r3
 8004e3a:	4413      	add	r3, r2
 8004e3c:	3361      	adds	r3, #97	; 0x61
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d17d      	bne.n	8004f40 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	212c      	movs	r1, #44	; 0x2c
 8004e4a:	fb01 f303 	mul.w	r3, r1, r3
 8004e4e:	4413      	add	r3, r2
 8004e50:	3360      	adds	r3, #96	; 0x60
 8004e52:	2201      	movs	r2, #1
 8004e54:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	212c      	movs	r1, #44	; 0x2c
 8004e5c:	fb01 f303 	mul.w	r3, r1, r3
 8004e60:	4413      	add	r3, r2
 8004e62:	333f      	adds	r3, #63	; 0x3f
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d00a      	beq.n	8004e80 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	212c      	movs	r1, #44	; 0x2c
 8004e70:	fb01 f303 	mul.w	r3, r1, r3
 8004e74:	4413      	add	r3, r2
 8004e76:	333f      	adds	r3, #63	; 0x3f
 8004e78:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	f040 8100 	bne.w	8005080 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d113      	bne.n	8004eb0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	212c      	movs	r1, #44	; 0x2c
 8004e8e:	fb01 f303 	mul.w	r3, r1, r3
 8004e92:	4413      	add	r3, r2
 8004e94:	3355      	adds	r3, #85	; 0x55
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	f083 0301 	eor.w	r3, r3, #1
 8004e9c:	b2d8      	uxtb	r0, r3
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	212c      	movs	r1, #44	; 0x2c
 8004ea4:	fb01 f303 	mul.w	r3, r1, r3
 8004ea8:	4413      	add	r3, r2
 8004eaa:	3355      	adds	r3, #85	; 0x55
 8004eac:	4602      	mov	r2, r0
 8004eae:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	f040 80e3 	bne.w	8005080 <HCD_HC_OUT_IRQHandler+0x69c>
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	212c      	movs	r1, #44	; 0x2c
 8004ec0:	fb01 f303 	mul.w	r3, r1, r3
 8004ec4:	4413      	add	r3, r2
 8004ec6:	334c      	adds	r3, #76	; 0x4c
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f000 80d8 	beq.w	8005080 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	212c      	movs	r1, #44	; 0x2c
 8004ed6:	fb01 f303 	mul.w	r3, r1, r3
 8004eda:	4413      	add	r3, r2
 8004edc:	334c      	adds	r3, #76	; 0x4c
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	202c      	movs	r0, #44	; 0x2c
 8004ee6:	fb00 f202 	mul.w	r2, r0, r2
 8004eea:	440a      	add	r2, r1
 8004eec:	3240      	adds	r2, #64	; 0x40
 8004eee:	8812      	ldrh	r2, [r2, #0]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	6879      	ldr	r1, [r7, #4]
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	202c      	movs	r0, #44	; 0x2c
 8004efa:	fb00 f202 	mul.w	r2, r0, r2
 8004efe:	440a      	add	r2, r1
 8004f00:	3240      	adds	r2, #64	; 0x40
 8004f02:	8812      	ldrh	r2, [r2, #0]
 8004f04:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 80b5 	beq.w	8005080 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	212c      	movs	r1, #44	; 0x2c
 8004f1c:	fb01 f303 	mul.w	r3, r1, r3
 8004f20:	4413      	add	r3, r2
 8004f22:	3355      	adds	r3, #85	; 0x55
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	f083 0301 	eor.w	r3, r3, #1
 8004f2a:	b2d8      	uxtb	r0, r3
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	212c      	movs	r1, #44	; 0x2c
 8004f32:	fb01 f303 	mul.w	r3, r1, r3
 8004f36:	4413      	add	r3, r2
 8004f38:	3355      	adds	r3, #85	; 0x55
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	701a      	strb	r2, [r3, #0]
 8004f3e:	e09f      	b.n	8005080 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	212c      	movs	r1, #44	; 0x2c
 8004f46:	fb01 f303 	mul.w	r3, r1, r3
 8004f4a:	4413      	add	r3, r2
 8004f4c:	3361      	adds	r3, #97	; 0x61
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	2b03      	cmp	r3, #3
 8004f52:	d109      	bne.n	8004f68 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	212c      	movs	r1, #44	; 0x2c
 8004f5a:	fb01 f303 	mul.w	r3, r1, r3
 8004f5e:	4413      	add	r3, r2
 8004f60:	3360      	adds	r3, #96	; 0x60
 8004f62:	2202      	movs	r2, #2
 8004f64:	701a      	strb	r2, [r3, #0]
 8004f66:	e08b      	b.n	8005080 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	212c      	movs	r1, #44	; 0x2c
 8004f6e:	fb01 f303 	mul.w	r3, r1, r3
 8004f72:	4413      	add	r3, r2
 8004f74:	3361      	adds	r3, #97	; 0x61
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	2b04      	cmp	r3, #4
 8004f7a:	d109      	bne.n	8004f90 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	212c      	movs	r1, #44	; 0x2c
 8004f82:	fb01 f303 	mul.w	r3, r1, r3
 8004f86:	4413      	add	r3, r2
 8004f88:	3360      	adds	r3, #96	; 0x60
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	701a      	strb	r2, [r3, #0]
 8004f8e:	e077      	b.n	8005080 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	212c      	movs	r1, #44	; 0x2c
 8004f96:	fb01 f303 	mul.w	r3, r1, r3
 8004f9a:	4413      	add	r3, r2
 8004f9c:	3361      	adds	r3, #97	; 0x61
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	2b05      	cmp	r3, #5
 8004fa2:	d109      	bne.n	8004fb8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	212c      	movs	r1, #44	; 0x2c
 8004faa:	fb01 f303 	mul.w	r3, r1, r3
 8004fae:	4413      	add	r3, r2
 8004fb0:	3360      	adds	r3, #96	; 0x60
 8004fb2:	2205      	movs	r2, #5
 8004fb4:	701a      	strb	r2, [r3, #0]
 8004fb6:	e063      	b.n	8005080 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	212c      	movs	r1, #44	; 0x2c
 8004fbe:	fb01 f303 	mul.w	r3, r1, r3
 8004fc2:	4413      	add	r3, r2
 8004fc4:	3361      	adds	r3, #97	; 0x61
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	2b06      	cmp	r3, #6
 8004fca:	d009      	beq.n	8004fe0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	212c      	movs	r1, #44	; 0x2c
 8004fd2:	fb01 f303 	mul.w	r3, r1, r3
 8004fd6:	4413      	add	r3, r2
 8004fd8:	3361      	adds	r3, #97	; 0x61
 8004fda:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	d14f      	bne.n	8005080 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	212c      	movs	r1, #44	; 0x2c
 8004fe6:	fb01 f303 	mul.w	r3, r1, r3
 8004fea:	4413      	add	r3, r2
 8004fec:	335c      	adds	r3, #92	; 0x5c
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	6879      	ldr	r1, [r7, #4]
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	202c      	movs	r0, #44	; 0x2c
 8004ff8:	fb00 f303 	mul.w	r3, r0, r3
 8004ffc:	440b      	add	r3, r1
 8004ffe:	335c      	adds	r3, #92	; 0x5c
 8005000:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	212c      	movs	r1, #44	; 0x2c
 8005008:	fb01 f303 	mul.w	r3, r1, r3
 800500c:	4413      	add	r3, r2
 800500e:	335c      	adds	r3, #92	; 0x5c
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2b02      	cmp	r3, #2
 8005014:	d912      	bls.n	800503c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	212c      	movs	r1, #44	; 0x2c
 800501c:	fb01 f303 	mul.w	r3, r1, r3
 8005020:	4413      	add	r3, r2
 8005022:	335c      	adds	r3, #92	; 0x5c
 8005024:	2200      	movs	r2, #0
 8005026:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	212c      	movs	r1, #44	; 0x2c
 800502e:	fb01 f303 	mul.w	r3, r1, r3
 8005032:	4413      	add	r3, r2
 8005034:	3360      	adds	r3, #96	; 0x60
 8005036:	2204      	movs	r2, #4
 8005038:	701a      	strb	r2, [r3, #0]
 800503a:	e021      	b.n	8005080 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	212c      	movs	r1, #44	; 0x2c
 8005042:	fb01 f303 	mul.w	r3, r1, r3
 8005046:	4413      	add	r3, r2
 8005048:	3360      	adds	r3, #96	; 0x60
 800504a:	2202      	movs	r2, #2
 800504c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	4413      	add	r3, r2
 8005056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005064:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800506c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	4413      	add	r3, r2
 8005076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800507a:	461a      	mov	r2, r3
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	4413      	add	r3, r2
 8005088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800508c:	461a      	mov	r2, r3
 800508e:	2302      	movs	r3, #2
 8005090:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	b2d9      	uxtb	r1, r3
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	202c      	movs	r0, #44	; 0x2c
 800509c:	fb00 f303 	mul.w	r3, r0, r3
 80050a0:	4413      	add	r3, r2
 80050a2:	3360      	adds	r3, #96	; 0x60
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	461a      	mov	r2, r3
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f00e facb 	bl	8013644 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80050ae:	bf00      	nop
 80050b0:	3720      	adds	r7, #32
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b08a      	sub	sp, #40	; 0x28
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	f003 030f 	and.w	r3, r3, #15
 80050d6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	0c5b      	lsrs	r3, r3, #17
 80050dc:	f003 030f 	and.w	r3, r3, #15
 80050e0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	091b      	lsrs	r3, r3, #4
 80050e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050ea:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d004      	beq.n	80050fc <HCD_RXQLVL_IRQHandler+0x46>
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2b05      	cmp	r3, #5
 80050f6:	f000 80a9 	beq.w	800524c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80050fa:	e0aa      	b.n	8005252 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f000 80a6 	beq.w	8005250 <HCD_RXQLVL_IRQHandler+0x19a>
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	212c      	movs	r1, #44	; 0x2c
 800510a:	fb01 f303 	mul.w	r3, r1, r3
 800510e:	4413      	add	r3, r2
 8005110:	3344      	adds	r3, #68	; 0x44
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 809b 	beq.w	8005250 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	212c      	movs	r1, #44	; 0x2c
 8005120:	fb01 f303 	mul.w	r3, r1, r3
 8005124:	4413      	add	r3, r2
 8005126:	3350      	adds	r3, #80	; 0x50
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	441a      	add	r2, r3
 800512e:	6879      	ldr	r1, [r7, #4]
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	202c      	movs	r0, #44	; 0x2c
 8005134:	fb00 f303 	mul.w	r3, r0, r3
 8005138:	440b      	add	r3, r1
 800513a:	334c      	adds	r3, #76	; 0x4c
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	429a      	cmp	r2, r3
 8005140:	d87a      	bhi.n	8005238 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6818      	ldr	r0, [r3, #0]
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	212c      	movs	r1, #44	; 0x2c
 800514c:	fb01 f303 	mul.w	r3, r1, r3
 8005150:	4413      	add	r3, r2
 8005152:	3344      	adds	r3, #68	; 0x44
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	b292      	uxth	r2, r2
 800515a:	4619      	mov	r1, r3
 800515c:	f003 fb14 	bl	8008788 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	212c      	movs	r1, #44	; 0x2c
 8005166:	fb01 f303 	mul.w	r3, r1, r3
 800516a:	4413      	add	r3, r2
 800516c:	3344      	adds	r3, #68	; 0x44
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	441a      	add	r2, r3
 8005174:	6879      	ldr	r1, [r7, #4]
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	202c      	movs	r0, #44	; 0x2c
 800517a:	fb00 f303 	mul.w	r3, r0, r3
 800517e:	440b      	add	r3, r1
 8005180:	3344      	adds	r3, #68	; 0x44
 8005182:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	212c      	movs	r1, #44	; 0x2c
 800518a:	fb01 f303 	mul.w	r3, r1, r3
 800518e:	4413      	add	r3, r2
 8005190:	3350      	adds	r3, #80	; 0x50
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	441a      	add	r2, r3
 8005198:	6879      	ldr	r1, [r7, #4]
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	202c      	movs	r0, #44	; 0x2c
 800519e:	fb00 f303 	mul.w	r3, r0, r3
 80051a2:	440b      	add	r3, r1
 80051a4:	3350      	adds	r3, #80	; 0x50
 80051a6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	0cdb      	lsrs	r3, r3, #19
 80051b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051bc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	212c      	movs	r1, #44	; 0x2c
 80051c4:	fb01 f303 	mul.w	r3, r1, r3
 80051c8:	4413      	add	r3, r2
 80051ca:	3340      	adds	r3, #64	; 0x40
 80051cc:	881b      	ldrh	r3, [r3, #0]
 80051ce:	461a      	mov	r2, r3
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d13c      	bne.n	8005250 <HCD_RXQLVL_IRQHandler+0x19a>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d039      	beq.n	8005250 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051f2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051fa:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	4413      	add	r3, r2
 8005204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005208:	461a      	mov	r2, r3
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	212c      	movs	r1, #44	; 0x2c
 8005214:	fb01 f303 	mul.w	r3, r1, r3
 8005218:	4413      	add	r3, r2
 800521a:	3354      	adds	r3, #84	; 0x54
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	f083 0301 	eor.w	r3, r3, #1
 8005222:	b2d8      	uxtb	r0, r3
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	212c      	movs	r1, #44	; 0x2c
 800522a:	fb01 f303 	mul.w	r3, r1, r3
 800522e:	4413      	add	r3, r2
 8005230:	3354      	adds	r3, #84	; 0x54
 8005232:	4602      	mov	r2, r0
 8005234:	701a      	strb	r2, [r3, #0]
      break;
 8005236:	e00b      	b.n	8005250 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	212c      	movs	r1, #44	; 0x2c
 800523e:	fb01 f303 	mul.w	r3, r1, r3
 8005242:	4413      	add	r3, r2
 8005244:	3360      	adds	r3, #96	; 0x60
 8005246:	2204      	movs	r2, #4
 8005248:	701a      	strb	r2, [r3, #0]
      break;
 800524a:	e001      	b.n	8005250 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800524c:	bf00      	nop
 800524e:	e000      	b.n	8005252 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005250:	bf00      	nop
  }
}
 8005252:	bf00      	nop
 8005254:	3728      	adds	r7, #40	; 0x28
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b086      	sub	sp, #24
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005286:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b02      	cmp	r3, #2
 8005290:	d10b      	bne.n	80052aa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b01      	cmp	r3, #1
 800529a:	d102      	bne.n	80052a2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f00e f9b5 	bl	801360c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f043 0302 	orr.w	r3, r3, #2
 80052a8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f003 0308 	and.w	r3, r3, #8
 80052b0:	2b08      	cmp	r3, #8
 80052b2:	d132      	bne.n	800531a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	f043 0308 	orr.w	r3, r3, #8
 80052ba:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f003 0304 	and.w	r3, r3, #4
 80052c2:	2b04      	cmp	r3, #4
 80052c4:	d126      	bne.n	8005314 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d113      	bne.n	80052f6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80052d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052d8:	d106      	bne.n	80052e8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2102      	movs	r1, #2
 80052e0:	4618      	mov	r0, r3
 80052e2:	f003 fbbf 	bl	8008a64 <USB_InitFSLSPClkSel>
 80052e6:	e011      	b.n	800530c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2101      	movs	r1, #1
 80052ee:	4618      	mov	r0, r3
 80052f0:	f003 fbb8 	bl	8008a64 <USB_InitFSLSPClkSel>
 80052f4:	e00a      	b.n	800530c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d106      	bne.n	800530c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005304:	461a      	mov	r2, r3
 8005306:	f64e 2360 	movw	r3, #60000	; 0xea60
 800530a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f00e f9ab 	bl	8013668 <HAL_HCD_PortEnabled_Callback>
 8005312:	e002      	b.n	800531a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f00e f9b5 	bl	8013684 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f003 0320 	and.w	r3, r3, #32
 8005320:	2b20      	cmp	r3, #32
 8005322:	d103      	bne.n	800532c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f043 0320 	orr.w	r3, r3, #32
 800532a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005332:	461a      	mov	r2, r3
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	6013      	str	r3, [r2, #0]
}
 8005338:	bf00      	nop
 800533a:	3718      	adds	r7, #24
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e267      	b.n	8005822 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d075      	beq.n	800544a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800535e:	4b88      	ldr	r3, [pc, #544]	; (8005580 <HAL_RCC_OscConfig+0x240>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f003 030c 	and.w	r3, r3, #12
 8005366:	2b04      	cmp	r3, #4
 8005368:	d00c      	beq.n	8005384 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800536a:	4b85      	ldr	r3, [pc, #532]	; (8005580 <HAL_RCC_OscConfig+0x240>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005372:	2b08      	cmp	r3, #8
 8005374:	d112      	bne.n	800539c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005376:	4b82      	ldr	r3, [pc, #520]	; (8005580 <HAL_RCC_OscConfig+0x240>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800537e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005382:	d10b      	bne.n	800539c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005384:	4b7e      	ldr	r3, [pc, #504]	; (8005580 <HAL_RCC_OscConfig+0x240>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d05b      	beq.n	8005448 <HAL_RCC_OscConfig+0x108>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d157      	bne.n	8005448 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e242      	b.n	8005822 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053a4:	d106      	bne.n	80053b4 <HAL_RCC_OscConfig+0x74>
 80053a6:	4b76      	ldr	r3, [pc, #472]	; (8005580 <HAL_RCC_OscConfig+0x240>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a75      	ldr	r2, [pc, #468]	; (8005580 <HAL_RCC_OscConfig+0x240>)
 80053ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b0:	6013      	str	r3, [r2, #0]
 80053b2:	e01d      	b.n	80053f0 <HAL_RCC_OscConfig+0xb0>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053bc:	d10c      	bne.n	80053d8 <HAL_RCC_OscConfig+0x98>
 80053be:	4b70      	ldr	r3, [pc, #448]	; (8005580 <HAL_RCC_OscConfig+0x240>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a6f      	ldr	r2, [pc, #444]	; (8005580 <HAL_RCC_OscConfig+0x240>)
 80053c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053c8:	6013      	str	r3, [r2, #0]
 80053ca:	4b6d      	ldr	r3, [pc, #436]	; (8005580 <HAL_RCC_OscConfig+0x240>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a6c      	ldr	r2, [pc, #432]	; (8005580 <HAL_RCC_OscConfig+0x240>)
 80053d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053d4:	6013      	str	r3, [r2, #0]
 80053d6:	e00b      	b.n	80053f0 <HAL_RCC_OscConfig+0xb0>
 80053d8:	4b69      	ldr	r3, [pc, #420]	; (8005580 <HAL_RCC_OscConfig+0x240>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a68      	ldr	r2, [pc, #416]	; (8005580 <HAL_RCC_OscConfig+0x240>)
 80053de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053e2:	6013      	str	r3, [r2, #0]
 80053e4:	4b66      	ldr	r3, [pc, #408]	; (8005580 <HAL_RCC_OscConfig+0x240>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a65      	ldr	r2, [pc, #404]	; (8005580 <HAL_RCC_OscConfig+0x240>)
 80053ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d013      	beq.n	8005420 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f8:	f7fd fa7c 	bl	80028f4 <HAL_GetTick>
 80053fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053fe:	e008      	b.n	8005412 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005400:	f7fd fa78 	bl	80028f4 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b64      	cmp	r3, #100	; 0x64
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e207      	b.n	8005822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005412:	4b5b      	ldr	r3, [pc, #364]	; (8005580 <HAL_RCC_OscConfig+0x240>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d0f0      	beq.n	8005400 <HAL_RCC_OscConfig+0xc0>
 800541e:	e014      	b.n	800544a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005420:	f7fd fa68 	bl	80028f4 <HAL_GetTick>
 8005424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005426:	e008      	b.n	800543a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005428:	f7fd fa64 	bl	80028f4 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b64      	cmp	r3, #100	; 0x64
 8005434:	d901      	bls.n	800543a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e1f3      	b.n	8005822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800543a:	4b51      	ldr	r3, [pc, #324]	; (8005580 <HAL_RCC_OscConfig+0x240>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1f0      	bne.n	8005428 <HAL_RCC_OscConfig+0xe8>
 8005446:	e000      	b.n	800544a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d063      	beq.n	800551e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005456:	4b4a      	ldr	r3, [pc, #296]	; (8005580 <HAL_RCC_OscConfig+0x240>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f003 030c 	and.w	r3, r3, #12
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00b      	beq.n	800547a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005462:	4b47      	ldr	r3, [pc, #284]	; (8005580 <HAL_RCC_OscConfig+0x240>)
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800546a:	2b08      	cmp	r3, #8
 800546c:	d11c      	bne.n	80054a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800546e:	4b44      	ldr	r3, [pc, #272]	; (8005580 <HAL_RCC_OscConfig+0x240>)
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d116      	bne.n	80054a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800547a:	4b41      	ldr	r3, [pc, #260]	; (8005580 <HAL_RCC_OscConfig+0x240>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d005      	beq.n	8005492 <HAL_RCC_OscConfig+0x152>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d001      	beq.n	8005492 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e1c7      	b.n	8005822 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005492:	4b3b      	ldr	r3, [pc, #236]	; (8005580 <HAL_RCC_OscConfig+0x240>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	4937      	ldr	r1, [pc, #220]	; (8005580 <HAL_RCC_OscConfig+0x240>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054a6:	e03a      	b.n	800551e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d020      	beq.n	80054f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054b0:	4b34      	ldr	r3, [pc, #208]	; (8005584 <HAL_RCC_OscConfig+0x244>)
 80054b2:	2201      	movs	r2, #1
 80054b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b6:	f7fd fa1d 	bl	80028f4 <HAL_GetTick>
 80054ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054bc:	e008      	b.n	80054d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054be:	f7fd fa19 	bl	80028f4 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d901      	bls.n	80054d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e1a8      	b.n	8005822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054d0:	4b2b      	ldr	r3, [pc, #172]	; (8005580 <HAL_RCC_OscConfig+0x240>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d0f0      	beq.n	80054be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054dc:	4b28      	ldr	r3, [pc, #160]	; (8005580 <HAL_RCC_OscConfig+0x240>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	00db      	lsls	r3, r3, #3
 80054ea:	4925      	ldr	r1, [pc, #148]	; (8005580 <HAL_RCC_OscConfig+0x240>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	600b      	str	r3, [r1, #0]
 80054f0:	e015      	b.n	800551e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054f2:	4b24      	ldr	r3, [pc, #144]	; (8005584 <HAL_RCC_OscConfig+0x244>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f8:	f7fd f9fc 	bl	80028f4 <HAL_GetTick>
 80054fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054fe:	e008      	b.n	8005512 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005500:	f7fd f9f8 	bl	80028f4 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b02      	cmp	r3, #2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e187      	b.n	8005822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005512:	4b1b      	ldr	r3, [pc, #108]	; (8005580 <HAL_RCC_OscConfig+0x240>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1f0      	bne.n	8005500 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0308 	and.w	r3, r3, #8
 8005526:	2b00      	cmp	r3, #0
 8005528:	d036      	beq.n	8005598 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d016      	beq.n	8005560 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005532:	4b15      	ldr	r3, [pc, #84]	; (8005588 <HAL_RCC_OscConfig+0x248>)
 8005534:	2201      	movs	r2, #1
 8005536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005538:	f7fd f9dc 	bl	80028f4 <HAL_GetTick>
 800553c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800553e:	e008      	b.n	8005552 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005540:	f7fd f9d8 	bl	80028f4 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e167      	b.n	8005822 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005552:	4b0b      	ldr	r3, [pc, #44]	; (8005580 <HAL_RCC_OscConfig+0x240>)
 8005554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d0f0      	beq.n	8005540 <HAL_RCC_OscConfig+0x200>
 800555e:	e01b      	b.n	8005598 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005560:	4b09      	ldr	r3, [pc, #36]	; (8005588 <HAL_RCC_OscConfig+0x248>)
 8005562:	2200      	movs	r2, #0
 8005564:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005566:	f7fd f9c5 	bl	80028f4 <HAL_GetTick>
 800556a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800556c:	e00e      	b.n	800558c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800556e:	f7fd f9c1 	bl	80028f4 <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	2b02      	cmp	r3, #2
 800557a:	d907      	bls.n	800558c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e150      	b.n	8005822 <HAL_RCC_OscConfig+0x4e2>
 8005580:	40023800 	.word	0x40023800
 8005584:	42470000 	.word	0x42470000
 8005588:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800558c:	4b88      	ldr	r3, [pc, #544]	; (80057b0 <HAL_RCC_OscConfig+0x470>)
 800558e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1ea      	bne.n	800556e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0304 	and.w	r3, r3, #4
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 8097 	beq.w	80056d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055a6:	2300      	movs	r3, #0
 80055a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055aa:	4b81      	ldr	r3, [pc, #516]	; (80057b0 <HAL_RCC_OscConfig+0x470>)
 80055ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10f      	bne.n	80055d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055b6:	2300      	movs	r3, #0
 80055b8:	60bb      	str	r3, [r7, #8]
 80055ba:	4b7d      	ldr	r3, [pc, #500]	; (80057b0 <HAL_RCC_OscConfig+0x470>)
 80055bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055be:	4a7c      	ldr	r2, [pc, #496]	; (80057b0 <HAL_RCC_OscConfig+0x470>)
 80055c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055c4:	6413      	str	r3, [r2, #64]	; 0x40
 80055c6:	4b7a      	ldr	r3, [pc, #488]	; (80057b0 <HAL_RCC_OscConfig+0x470>)
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ce:	60bb      	str	r3, [r7, #8]
 80055d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055d2:	2301      	movs	r3, #1
 80055d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055d6:	4b77      	ldr	r3, [pc, #476]	; (80057b4 <HAL_RCC_OscConfig+0x474>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d118      	bne.n	8005614 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055e2:	4b74      	ldr	r3, [pc, #464]	; (80057b4 <HAL_RCC_OscConfig+0x474>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a73      	ldr	r2, [pc, #460]	; (80057b4 <HAL_RCC_OscConfig+0x474>)
 80055e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055ee:	f7fd f981 	bl	80028f4 <HAL_GetTick>
 80055f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055f4:	e008      	b.n	8005608 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055f6:	f7fd f97d 	bl	80028f4 <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	2b02      	cmp	r3, #2
 8005602:	d901      	bls.n	8005608 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e10c      	b.n	8005822 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005608:	4b6a      	ldr	r3, [pc, #424]	; (80057b4 <HAL_RCC_OscConfig+0x474>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005610:	2b00      	cmp	r3, #0
 8005612:	d0f0      	beq.n	80055f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d106      	bne.n	800562a <HAL_RCC_OscConfig+0x2ea>
 800561c:	4b64      	ldr	r3, [pc, #400]	; (80057b0 <HAL_RCC_OscConfig+0x470>)
 800561e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005620:	4a63      	ldr	r2, [pc, #396]	; (80057b0 <HAL_RCC_OscConfig+0x470>)
 8005622:	f043 0301 	orr.w	r3, r3, #1
 8005626:	6713      	str	r3, [r2, #112]	; 0x70
 8005628:	e01c      	b.n	8005664 <HAL_RCC_OscConfig+0x324>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	2b05      	cmp	r3, #5
 8005630:	d10c      	bne.n	800564c <HAL_RCC_OscConfig+0x30c>
 8005632:	4b5f      	ldr	r3, [pc, #380]	; (80057b0 <HAL_RCC_OscConfig+0x470>)
 8005634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005636:	4a5e      	ldr	r2, [pc, #376]	; (80057b0 <HAL_RCC_OscConfig+0x470>)
 8005638:	f043 0304 	orr.w	r3, r3, #4
 800563c:	6713      	str	r3, [r2, #112]	; 0x70
 800563e:	4b5c      	ldr	r3, [pc, #368]	; (80057b0 <HAL_RCC_OscConfig+0x470>)
 8005640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005642:	4a5b      	ldr	r2, [pc, #364]	; (80057b0 <HAL_RCC_OscConfig+0x470>)
 8005644:	f043 0301 	orr.w	r3, r3, #1
 8005648:	6713      	str	r3, [r2, #112]	; 0x70
 800564a:	e00b      	b.n	8005664 <HAL_RCC_OscConfig+0x324>
 800564c:	4b58      	ldr	r3, [pc, #352]	; (80057b0 <HAL_RCC_OscConfig+0x470>)
 800564e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005650:	4a57      	ldr	r2, [pc, #348]	; (80057b0 <HAL_RCC_OscConfig+0x470>)
 8005652:	f023 0301 	bic.w	r3, r3, #1
 8005656:	6713      	str	r3, [r2, #112]	; 0x70
 8005658:	4b55      	ldr	r3, [pc, #340]	; (80057b0 <HAL_RCC_OscConfig+0x470>)
 800565a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565c:	4a54      	ldr	r2, [pc, #336]	; (80057b0 <HAL_RCC_OscConfig+0x470>)
 800565e:	f023 0304 	bic.w	r3, r3, #4
 8005662:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d015      	beq.n	8005698 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800566c:	f7fd f942 	bl	80028f4 <HAL_GetTick>
 8005670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005672:	e00a      	b.n	800568a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005674:	f7fd f93e 	bl	80028f4 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005682:	4293      	cmp	r3, r2
 8005684:	d901      	bls.n	800568a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e0cb      	b.n	8005822 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800568a:	4b49      	ldr	r3, [pc, #292]	; (80057b0 <HAL_RCC_OscConfig+0x470>)
 800568c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0ee      	beq.n	8005674 <HAL_RCC_OscConfig+0x334>
 8005696:	e014      	b.n	80056c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005698:	f7fd f92c 	bl	80028f4 <HAL_GetTick>
 800569c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800569e:	e00a      	b.n	80056b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056a0:	f7fd f928 	bl	80028f4 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e0b5      	b.n	8005822 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056b6:	4b3e      	ldr	r3, [pc, #248]	; (80057b0 <HAL_RCC_OscConfig+0x470>)
 80056b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1ee      	bne.n	80056a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056c2:	7dfb      	ldrb	r3, [r7, #23]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d105      	bne.n	80056d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056c8:	4b39      	ldr	r3, [pc, #228]	; (80057b0 <HAL_RCC_OscConfig+0x470>)
 80056ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056cc:	4a38      	ldr	r2, [pc, #224]	; (80057b0 <HAL_RCC_OscConfig+0x470>)
 80056ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f000 80a1 	beq.w	8005820 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056de:	4b34      	ldr	r3, [pc, #208]	; (80057b0 <HAL_RCC_OscConfig+0x470>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f003 030c 	and.w	r3, r3, #12
 80056e6:	2b08      	cmp	r3, #8
 80056e8:	d05c      	beq.n	80057a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d141      	bne.n	8005776 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056f2:	4b31      	ldr	r3, [pc, #196]	; (80057b8 <HAL_RCC_OscConfig+0x478>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f8:	f7fd f8fc 	bl	80028f4 <HAL_GetTick>
 80056fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056fe:	e008      	b.n	8005712 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005700:	f7fd f8f8 	bl	80028f4 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e087      	b.n	8005822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005712:	4b27      	ldr	r3, [pc, #156]	; (80057b0 <HAL_RCC_OscConfig+0x470>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1f0      	bne.n	8005700 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	69da      	ldr	r2, [r3, #28]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	431a      	orrs	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572c:	019b      	lsls	r3, r3, #6
 800572e:	431a      	orrs	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005734:	085b      	lsrs	r3, r3, #1
 8005736:	3b01      	subs	r3, #1
 8005738:	041b      	lsls	r3, r3, #16
 800573a:	431a      	orrs	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005740:	061b      	lsls	r3, r3, #24
 8005742:	491b      	ldr	r1, [pc, #108]	; (80057b0 <HAL_RCC_OscConfig+0x470>)
 8005744:	4313      	orrs	r3, r2
 8005746:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005748:	4b1b      	ldr	r3, [pc, #108]	; (80057b8 <HAL_RCC_OscConfig+0x478>)
 800574a:	2201      	movs	r2, #1
 800574c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800574e:	f7fd f8d1 	bl	80028f4 <HAL_GetTick>
 8005752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005754:	e008      	b.n	8005768 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005756:	f7fd f8cd 	bl	80028f4 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d901      	bls.n	8005768 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e05c      	b.n	8005822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005768:	4b11      	ldr	r3, [pc, #68]	; (80057b0 <HAL_RCC_OscConfig+0x470>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0f0      	beq.n	8005756 <HAL_RCC_OscConfig+0x416>
 8005774:	e054      	b.n	8005820 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005776:	4b10      	ldr	r3, [pc, #64]	; (80057b8 <HAL_RCC_OscConfig+0x478>)
 8005778:	2200      	movs	r2, #0
 800577a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800577c:	f7fd f8ba 	bl	80028f4 <HAL_GetTick>
 8005780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005784:	f7fd f8b6 	bl	80028f4 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e045      	b.n	8005822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005796:	4b06      	ldr	r3, [pc, #24]	; (80057b0 <HAL_RCC_OscConfig+0x470>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1f0      	bne.n	8005784 <HAL_RCC_OscConfig+0x444>
 80057a2:	e03d      	b.n	8005820 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d107      	bne.n	80057bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e038      	b.n	8005822 <HAL_RCC_OscConfig+0x4e2>
 80057b0:	40023800 	.word	0x40023800
 80057b4:	40007000 	.word	0x40007000
 80057b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057bc:	4b1b      	ldr	r3, [pc, #108]	; (800582c <HAL_RCC_OscConfig+0x4ec>)
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d028      	beq.n	800581c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d121      	bne.n	800581c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d11a      	bne.n	800581c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057ec:	4013      	ands	r3, r2
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d111      	bne.n	800581c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005802:	085b      	lsrs	r3, r3, #1
 8005804:	3b01      	subs	r3, #1
 8005806:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005808:	429a      	cmp	r2, r3
 800580a:	d107      	bne.n	800581c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005816:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005818:	429a      	cmp	r2, r3
 800581a:	d001      	beq.n	8005820 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e000      	b.n	8005822 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3718      	adds	r7, #24
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	40023800 	.word	0x40023800

08005830 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d101      	bne.n	8005844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e0cc      	b.n	80059de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005844:	4b68      	ldr	r3, [pc, #416]	; (80059e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	683a      	ldr	r2, [r7, #0]
 800584e:	429a      	cmp	r2, r3
 8005850:	d90c      	bls.n	800586c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005852:	4b65      	ldr	r3, [pc, #404]	; (80059e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	b2d2      	uxtb	r2, r2
 8005858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800585a:	4b63      	ldr	r3, [pc, #396]	; (80059e8 <HAL_RCC_ClockConfig+0x1b8>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0307 	and.w	r3, r3, #7
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	429a      	cmp	r2, r3
 8005866:	d001      	beq.n	800586c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e0b8      	b.n	80059de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d020      	beq.n	80058ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0304 	and.w	r3, r3, #4
 8005880:	2b00      	cmp	r3, #0
 8005882:	d005      	beq.n	8005890 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005884:	4b59      	ldr	r3, [pc, #356]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	4a58      	ldr	r2, [pc, #352]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 800588a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800588e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0308 	and.w	r3, r3, #8
 8005898:	2b00      	cmp	r3, #0
 800589a:	d005      	beq.n	80058a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800589c:	4b53      	ldr	r3, [pc, #332]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	4a52      	ldr	r2, [pc, #328]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 80058a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058a8:	4b50      	ldr	r3, [pc, #320]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	494d      	ldr	r1, [pc, #308]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d044      	beq.n	8005950 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d107      	bne.n	80058de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ce:	4b47      	ldr	r3, [pc, #284]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d119      	bne.n	800590e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e07f      	b.n	80059de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d003      	beq.n	80058ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058ea:	2b03      	cmp	r3, #3
 80058ec:	d107      	bne.n	80058fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058ee:	4b3f      	ldr	r3, [pc, #252]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d109      	bne.n	800590e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e06f      	b.n	80059de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058fe:	4b3b      	ldr	r3, [pc, #236]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e067      	b.n	80059de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800590e:	4b37      	ldr	r3, [pc, #220]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f023 0203 	bic.w	r2, r3, #3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	4934      	ldr	r1, [pc, #208]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 800591c:	4313      	orrs	r3, r2
 800591e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005920:	f7fc ffe8 	bl	80028f4 <HAL_GetTick>
 8005924:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005926:	e00a      	b.n	800593e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005928:	f7fc ffe4 	bl	80028f4 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	f241 3288 	movw	r2, #5000	; 0x1388
 8005936:	4293      	cmp	r3, r2
 8005938:	d901      	bls.n	800593e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e04f      	b.n	80059de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800593e:	4b2b      	ldr	r3, [pc, #172]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f003 020c 	and.w	r2, r3, #12
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	429a      	cmp	r2, r3
 800594e:	d1eb      	bne.n	8005928 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005950:	4b25      	ldr	r3, [pc, #148]	; (80059e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0307 	and.w	r3, r3, #7
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	429a      	cmp	r2, r3
 800595c:	d20c      	bcs.n	8005978 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800595e:	4b22      	ldr	r3, [pc, #136]	; (80059e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	b2d2      	uxtb	r2, r2
 8005964:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005966:	4b20      	ldr	r3, [pc, #128]	; (80059e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0307 	and.w	r3, r3, #7
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	429a      	cmp	r2, r3
 8005972:	d001      	beq.n	8005978 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e032      	b.n	80059de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0304 	and.w	r3, r3, #4
 8005980:	2b00      	cmp	r3, #0
 8005982:	d008      	beq.n	8005996 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005984:	4b19      	ldr	r3, [pc, #100]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	4916      	ldr	r1, [pc, #88]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 8005992:	4313      	orrs	r3, r2
 8005994:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0308 	and.w	r3, r3, #8
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d009      	beq.n	80059b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059a2:	4b12      	ldr	r3, [pc, #72]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	00db      	lsls	r3, r3, #3
 80059b0:	490e      	ldr	r1, [pc, #56]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059b6:	f000 f821 	bl	80059fc <HAL_RCC_GetSysClockFreq>
 80059ba:	4602      	mov	r2, r0
 80059bc:	4b0b      	ldr	r3, [pc, #44]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	091b      	lsrs	r3, r3, #4
 80059c2:	f003 030f 	and.w	r3, r3, #15
 80059c6:	490a      	ldr	r1, [pc, #40]	; (80059f0 <HAL_RCC_ClockConfig+0x1c0>)
 80059c8:	5ccb      	ldrb	r3, [r1, r3]
 80059ca:	fa22 f303 	lsr.w	r3, r2, r3
 80059ce:	4a09      	ldr	r2, [pc, #36]	; (80059f4 <HAL_RCC_ClockConfig+0x1c4>)
 80059d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059d2:	4b09      	ldr	r3, [pc, #36]	; (80059f8 <HAL_RCC_ClockConfig+0x1c8>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fc fd04 	bl	80023e4 <HAL_InitTick>

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	40023c00 	.word	0x40023c00
 80059ec:	40023800 	.word	0x40023800
 80059f0:	080154cc 	.word	0x080154cc
 80059f4:	20000230 	.word	0x20000230
 80059f8:	20000234 	.word	0x20000234

080059fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a00:	b090      	sub	sp, #64	; 0x40
 8005a02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a04:	2300      	movs	r3, #0
 8005a06:	637b      	str	r3, [r7, #52]	; 0x34
 8005a08:	2300      	movs	r3, #0
 8005a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005a10:	2300      	movs	r3, #0
 8005a12:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a14:	4b59      	ldr	r3, [pc, #356]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x180>)
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f003 030c 	and.w	r3, r3, #12
 8005a1c:	2b08      	cmp	r3, #8
 8005a1e:	d00d      	beq.n	8005a3c <HAL_RCC_GetSysClockFreq+0x40>
 8005a20:	2b08      	cmp	r3, #8
 8005a22:	f200 80a1 	bhi.w	8005b68 <HAL_RCC_GetSysClockFreq+0x16c>
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <HAL_RCC_GetSysClockFreq+0x34>
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	d003      	beq.n	8005a36 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a2e:	e09b      	b.n	8005b68 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a30:	4b53      	ldr	r3, [pc, #332]	; (8005b80 <HAL_RCC_GetSysClockFreq+0x184>)
 8005a32:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005a34:	e09b      	b.n	8005b6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a36:	4b53      	ldr	r3, [pc, #332]	; (8005b84 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005a3a:	e098      	b.n	8005b6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a3c:	4b4f      	ldr	r3, [pc, #316]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x180>)
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a44:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a46:	4b4d      	ldr	r3, [pc, #308]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x180>)
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d028      	beq.n	8005aa4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a52:	4b4a      	ldr	r3, [pc, #296]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x180>)
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	099b      	lsrs	r3, r3, #6
 8005a58:	2200      	movs	r2, #0
 8005a5a:	623b      	str	r3, [r7, #32]
 8005a5c:	627a      	str	r2, [r7, #36]	; 0x24
 8005a5e:	6a3b      	ldr	r3, [r7, #32]
 8005a60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005a64:	2100      	movs	r1, #0
 8005a66:	4b47      	ldr	r3, [pc, #284]	; (8005b84 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a68:	fb03 f201 	mul.w	r2, r3, r1
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	fb00 f303 	mul.w	r3, r0, r3
 8005a72:	4413      	add	r3, r2
 8005a74:	4a43      	ldr	r2, [pc, #268]	; (8005b84 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a76:	fba0 1202 	umull	r1, r2, r0, r2
 8005a7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a7c:	460a      	mov	r2, r1
 8005a7e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a82:	4413      	add	r3, r2
 8005a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a88:	2200      	movs	r2, #0
 8005a8a:	61bb      	str	r3, [r7, #24]
 8005a8c:	61fa      	str	r2, [r7, #28]
 8005a8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005a96:	f7fa fc03 	bl	80002a0 <__aeabi_uldivmod>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aa2:	e053      	b.n	8005b4c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aa4:	4b35      	ldr	r3, [pc, #212]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x180>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	099b      	lsrs	r3, r3, #6
 8005aaa:	2200      	movs	r2, #0
 8005aac:	613b      	str	r3, [r7, #16]
 8005aae:	617a      	str	r2, [r7, #20]
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005ab6:	f04f 0b00 	mov.w	fp, #0
 8005aba:	4652      	mov	r2, sl
 8005abc:	465b      	mov	r3, fp
 8005abe:	f04f 0000 	mov.w	r0, #0
 8005ac2:	f04f 0100 	mov.w	r1, #0
 8005ac6:	0159      	lsls	r1, r3, #5
 8005ac8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005acc:	0150      	lsls	r0, r2, #5
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	ebb2 080a 	subs.w	r8, r2, sl
 8005ad6:	eb63 090b 	sbc.w	r9, r3, fp
 8005ada:	f04f 0200 	mov.w	r2, #0
 8005ade:	f04f 0300 	mov.w	r3, #0
 8005ae2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005ae6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005aea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005aee:	ebb2 0408 	subs.w	r4, r2, r8
 8005af2:	eb63 0509 	sbc.w	r5, r3, r9
 8005af6:	f04f 0200 	mov.w	r2, #0
 8005afa:	f04f 0300 	mov.w	r3, #0
 8005afe:	00eb      	lsls	r3, r5, #3
 8005b00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b04:	00e2      	lsls	r2, r4, #3
 8005b06:	4614      	mov	r4, r2
 8005b08:	461d      	mov	r5, r3
 8005b0a:	eb14 030a 	adds.w	r3, r4, sl
 8005b0e:	603b      	str	r3, [r7, #0]
 8005b10:	eb45 030b 	adc.w	r3, r5, fp
 8005b14:	607b      	str	r3, [r7, #4]
 8005b16:	f04f 0200 	mov.w	r2, #0
 8005b1a:	f04f 0300 	mov.w	r3, #0
 8005b1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b22:	4629      	mov	r1, r5
 8005b24:	028b      	lsls	r3, r1, #10
 8005b26:	4621      	mov	r1, r4
 8005b28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	028a      	lsls	r2, r1, #10
 8005b30:	4610      	mov	r0, r2
 8005b32:	4619      	mov	r1, r3
 8005b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b36:	2200      	movs	r2, #0
 8005b38:	60bb      	str	r3, [r7, #8]
 8005b3a:	60fa      	str	r2, [r7, #12]
 8005b3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b40:	f7fa fbae 	bl	80002a0 <__aeabi_uldivmod>
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	4613      	mov	r3, r2
 8005b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b4c:	4b0b      	ldr	r3, [pc, #44]	; (8005b7c <HAL_RCC_GetSysClockFreq+0x180>)
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	0c1b      	lsrs	r3, r3, #16
 8005b52:	f003 0303 	and.w	r3, r3, #3
 8005b56:	3301      	adds	r3, #1
 8005b58:	005b      	lsls	r3, r3, #1
 8005b5a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005b5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005b66:	e002      	b.n	8005b6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b68:	4b05      	ldr	r3, [pc, #20]	; (8005b80 <HAL_RCC_GetSysClockFreq+0x184>)
 8005b6a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005b6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3740      	adds	r7, #64	; 0x40
 8005b74:	46bd      	mov	sp, r7
 8005b76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b7a:	bf00      	nop
 8005b7c:	40023800 	.word	0x40023800
 8005b80:	00f42400 	.word	0x00f42400
 8005b84:	017d7840 	.word	0x017d7840

08005b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b8c:	4b03      	ldr	r3, [pc, #12]	; (8005b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	20000230 	.word	0x20000230

08005ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ba4:	f7ff fff0 	bl	8005b88 <HAL_RCC_GetHCLKFreq>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	4b05      	ldr	r3, [pc, #20]	; (8005bc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	0a9b      	lsrs	r3, r3, #10
 8005bb0:	f003 0307 	and.w	r3, r3, #7
 8005bb4:	4903      	ldr	r1, [pc, #12]	; (8005bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bb6:	5ccb      	ldrb	r3, [r1, r3]
 8005bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	40023800 	.word	0x40023800
 8005bc4:	080154dc 	.word	0x080154dc

08005bc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005bcc:	f7ff ffdc 	bl	8005b88 <HAL_RCC_GetHCLKFreq>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	0b5b      	lsrs	r3, r3, #13
 8005bd8:	f003 0307 	and.w	r3, r3, #7
 8005bdc:	4903      	ldr	r1, [pc, #12]	; (8005bec <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bde:	5ccb      	ldrb	r3, [r1, r3]
 8005be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	40023800 	.word	0x40023800
 8005bec:	080154dc 	.word	0x080154dc

08005bf0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	220f      	movs	r2, #15
 8005bfe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005c00:	4b12      	ldr	r3, [pc, #72]	; (8005c4c <HAL_RCC_GetClockConfig+0x5c>)
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f003 0203 	and.w	r2, r3, #3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005c0c:	4b0f      	ldr	r3, [pc, #60]	; (8005c4c <HAL_RCC_GetClockConfig+0x5c>)
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005c18:	4b0c      	ldr	r3, [pc, #48]	; (8005c4c <HAL_RCC_GetClockConfig+0x5c>)
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005c24:	4b09      	ldr	r3, [pc, #36]	; (8005c4c <HAL_RCC_GetClockConfig+0x5c>)
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	08db      	lsrs	r3, r3, #3
 8005c2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005c32:	4b07      	ldr	r3, [pc, #28]	; (8005c50 <HAL_RCC_GetClockConfig+0x60>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0207 	and.w	r2, r3, #7
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	601a      	str	r2, [r3, #0]
}
 8005c3e:	bf00      	nop
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	40023800 	.word	0x40023800
 8005c50:	40023c00 	.word	0x40023c00

08005c54 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0301 	and.w	r3, r3, #1
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d105      	bne.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d035      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c7c:	4b62      	ldr	r3, [pc, #392]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c82:	f7fc fe37 	bl	80028f4 <HAL_GetTick>
 8005c86:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c88:	e008      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c8a:	f7fc fe33 	bl	80028f4 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d901      	bls.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e0b0      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c9c:	4b5b      	ldr	r3, [pc, #364]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1f0      	bne.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	019a      	lsls	r2, r3, #6
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	071b      	lsls	r3, r3, #28
 8005cb4:	4955      	ldr	r1, [pc, #340]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005cbc:	4b52      	ldr	r3, [pc, #328]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cc2:	f7fc fe17 	bl	80028f4 <HAL_GetTick>
 8005cc6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cc8:	e008      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005cca:	f7fc fe13 	bl	80028f4 <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d901      	bls.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e090      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cdc:	4b4b      	ldr	r3, [pc, #300]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d0f0      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 8083 	beq.w	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60fb      	str	r3, [r7, #12]
 8005cfa:	4b44      	ldr	r3, [pc, #272]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfe:	4a43      	ldr	r2, [pc, #268]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d04:	6413      	str	r3, [r2, #64]	; 0x40
 8005d06:	4b41      	ldr	r3, [pc, #260]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d0e:	60fb      	str	r3, [r7, #12]
 8005d10:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d12:	4b3f      	ldr	r3, [pc, #252]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a3e      	ldr	r2, [pc, #248]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d1c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d1e:	f7fc fde9 	bl	80028f4 <HAL_GetTick>
 8005d22:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d24:	e008      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005d26:	f7fc fde5 	bl	80028f4 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d901      	bls.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e062      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d38:	4b35      	ldr	r3, [pc, #212]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d0f0      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d44:	4b31      	ldr	r3, [pc, #196]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d4c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d02f      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d028      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d62:	4b2a      	ldr	r3, [pc, #168]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d6a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d6c:	4b29      	ldr	r3, [pc, #164]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005d6e:	2201      	movs	r2, #1
 8005d70:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d72:	4b28      	ldr	r3, [pc, #160]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005d78:	4a24      	ldr	r2, [pc, #144]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d7e:	4b23      	ldr	r3, [pc, #140]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d114      	bne.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005d8a:	f7fc fdb3 	bl	80028f4 <HAL_GetTick>
 8005d8e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d90:	e00a      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d92:	f7fc fdaf 	bl	80028f4 <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d901      	bls.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e02a      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005da8:	4b18      	ldr	r3, [pc, #96]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d0ee      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dc0:	d10d      	bne.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005dc2:	4b12      	ldr	r3, [pc, #72]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dd6:	490d      	ldr	r1, [pc, #52]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	608b      	str	r3, [r1, #8]
 8005ddc:	e005      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005dde:	4b0b      	ldr	r3, [pc, #44]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	4a0a      	ldr	r2, [pc, #40]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005de4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005de8:	6093      	str	r3, [r2, #8]
 8005dea:	4b08      	ldr	r3, [pc, #32]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005df6:	4905      	ldr	r1, [pc, #20]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3718      	adds	r7, #24
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	42470068 	.word	0x42470068
 8005e0c:	40023800 	.word	0x40023800
 8005e10:	40007000 	.word	0x40007000
 8005e14:	42470e40 	.word	0x42470e40

08005e18 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e066      	b.n	8005efc <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	7f5b      	ldrb	r3, [r3, #29]
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d105      	bne.n	8005e44 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f7fc f9ae 	bl	80021a0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2202      	movs	r2, #2
 8005e48:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	22ca      	movs	r2, #202	; 0xca
 8005e50:	625a      	str	r2, [r3, #36]	; 0x24
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2253      	movs	r2, #83	; 0x53
 8005e58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 fa45 	bl	80062ea <RTC_EnterInitMode>
 8005e60:	4603      	mov	r3, r0
 8005e62:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005e64:	7bfb      	ldrb	r3, [r7, #15]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d12c      	bne.n	8005ec4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	6812      	ldr	r2, [r2, #0]
 8005e74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005e78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e7c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	6899      	ldr	r1, [r3, #8]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	431a      	orrs	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	431a      	orrs	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	68d2      	ldr	r2, [r2, #12]
 8005ea4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	6919      	ldr	r1, [r3, #16]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	041a      	lsls	r2, r3, #16
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fa4c 	bl	8006358 <RTC_ExitInitMode>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d113      	bne.n	8005ef2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ed8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	699a      	ldr	r2, [r3, #24]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	22ff      	movs	r2, #255	; 0xff
 8005ef8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005f04:	b590      	push	{r4, r7, lr}
 8005f06:	b087      	sub	sp, #28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	7f1b      	ldrb	r3, [r3, #28]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d101      	bne.n	8005f20 <HAL_RTC_SetTime+0x1c>
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	e087      	b.n	8006030 <HAL_RTC_SetTime+0x12c>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2201      	movs	r2, #1
 8005f24:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2202      	movs	r2, #2
 8005f2a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d126      	bne.n	8005f80 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d102      	bne.n	8005f46 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2200      	movs	r2, #0
 8005f44:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 fa29 	bl	80063a2 <RTC_ByteToBcd2>
 8005f50:	4603      	mov	r3, r0
 8005f52:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	785b      	ldrb	r3, [r3, #1]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f000 fa22 	bl	80063a2 <RTC_ByteToBcd2>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005f62:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	789b      	ldrb	r3, [r3, #2]
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 fa1a 	bl	80063a2 <RTC_ByteToBcd2>
 8005f6e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f70:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	78db      	ldrb	r3, [r3, #3]
 8005f78:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	617b      	str	r3, [r7, #20]
 8005f7e:	e018      	b.n	8005fb2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d102      	bne.n	8005f94 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	2200      	movs	r2, #0
 8005f92:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	785b      	ldrb	r3, [r3, #1]
 8005f9e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005fa0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005fa6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	78db      	ldrb	r3, [r3, #3]
 8005fac:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	22ca      	movs	r2, #202	; 0xca
 8005fb8:	625a      	str	r2, [r3, #36]	; 0x24
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2253      	movs	r2, #83	; 0x53
 8005fc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f000 f991 	bl	80062ea <RTC_EnterInitMode>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005fcc:	7cfb      	ldrb	r3, [r7, #19]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d120      	bne.n	8006014 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005fdc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005fe0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689a      	ldr	r2, [r3, #8]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ff0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6899      	ldr	r1, [r3, #8]
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	68da      	ldr	r2, [r3, #12]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	431a      	orrs	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f000 f9a4 	bl	8006358 <RTC_ExitInitMode>
 8006010:	4603      	mov	r3, r0
 8006012:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006014:	7cfb      	ldrb	r3, [r7, #19]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d102      	bne.n	8006020 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2201      	movs	r2, #1
 800601e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	22ff      	movs	r2, #255	; 0xff
 8006026:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	771a      	strb	r2, [r3, #28]

  return status;
 800602e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006030:	4618      	mov	r0, r3
 8006032:	371c      	adds	r7, #28
 8006034:	46bd      	mov	sp, r7
 8006036:	bd90      	pop	{r4, r7, pc}

08006038 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800606a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800606e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	0c1b      	lsrs	r3, r3, #16
 8006074:	b2db      	uxtb	r3, r3
 8006076:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800607a:	b2da      	uxtb	r2, r3
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	0a1b      	lsrs	r3, r3, #8
 8006084:	b2db      	uxtb	r3, r3
 8006086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800608a:	b2da      	uxtb	r2, r3
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	b2db      	uxtb	r3, r3
 8006094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006098:	b2da      	uxtb	r2, r3
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	0d9b      	lsrs	r3, r3, #22
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	f003 0301 	and.w	r3, r3, #1
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d11a      	bne.n	80060ea <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 f98f 	bl	80063dc <RTC_Bcd2ToByte>
 80060be:	4603      	mov	r3, r0
 80060c0:	461a      	mov	r2, r3
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	785b      	ldrb	r3, [r3, #1]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 f986 	bl	80063dc <RTC_Bcd2ToByte>
 80060d0:	4603      	mov	r3, r0
 80060d2:	461a      	mov	r2, r3
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	789b      	ldrb	r3, [r3, #2]
 80060dc:	4618      	mov	r0, r3
 80060de:	f000 f97d 	bl	80063dc <RTC_Bcd2ToByte>
 80060e2:	4603      	mov	r3, r0
 80060e4:	461a      	mov	r2, r3
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3718      	adds	r7, #24
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80060f4:	b590      	push	{r4, r7, lr}
 80060f6:	b087      	sub	sp, #28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006100:	2300      	movs	r3, #0
 8006102:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	7f1b      	ldrb	r3, [r3, #28]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d101      	bne.n	8006110 <HAL_RTC_SetDate+0x1c>
 800610c:	2302      	movs	r3, #2
 800610e:	e071      	b.n	80061f4 <HAL_RTC_SetDate+0x100>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2201      	movs	r2, #1
 8006114:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2202      	movs	r2, #2
 800611a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10e      	bne.n	8006140 <HAL_RTC_SetDate+0x4c>
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	785b      	ldrb	r3, [r3, #1]
 8006126:	f003 0310 	and.w	r3, r3, #16
 800612a:	2b00      	cmp	r3, #0
 800612c:	d008      	beq.n	8006140 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	785b      	ldrb	r3, [r3, #1]
 8006132:	f023 0310 	bic.w	r3, r3, #16
 8006136:	b2db      	uxtb	r3, r3
 8006138:	330a      	adds	r3, #10
 800613a:	b2da      	uxtb	r2, r3
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d11c      	bne.n	8006180 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	78db      	ldrb	r3, [r3, #3]
 800614a:	4618      	mov	r0, r3
 800614c:	f000 f929 	bl	80063a2 <RTC_ByteToBcd2>
 8006150:	4603      	mov	r3, r0
 8006152:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	785b      	ldrb	r3, [r3, #1]
 8006158:	4618      	mov	r0, r3
 800615a:	f000 f922 	bl	80063a2 <RTC_ByteToBcd2>
 800615e:	4603      	mov	r3, r0
 8006160:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006162:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	789b      	ldrb	r3, [r3, #2]
 8006168:	4618      	mov	r0, r3
 800616a:	f000 f91a 	bl	80063a2 <RTC_ByteToBcd2>
 800616e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006170:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800617a:	4313      	orrs	r3, r2
 800617c:	617b      	str	r3, [r7, #20]
 800617e:	e00e      	b.n	800619e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	78db      	ldrb	r3, [r3, #3]
 8006184:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	785b      	ldrb	r3, [r3, #1]
 800618a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800618c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006192:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800619a:	4313      	orrs	r3, r2
 800619c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	22ca      	movs	r2, #202	; 0xca
 80061a4:	625a      	str	r2, [r3, #36]	; 0x24
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2253      	movs	r2, #83	; 0x53
 80061ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f000 f89b 	bl	80062ea <RTC_EnterInitMode>
 80061b4:	4603      	mov	r3, r0
 80061b6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80061b8:	7cfb      	ldrb	r3, [r7, #19]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10c      	bne.n	80061d8 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80061c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80061cc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f000 f8c2 	bl	8006358 <RTC_ExitInitMode>
 80061d4:	4603      	mov	r3, r0
 80061d6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80061d8:	7cfb      	ldrb	r3, [r7, #19]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d102      	bne.n	80061e4 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2201      	movs	r2, #1
 80061e2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	22ff      	movs	r2, #255	; 0xff
 80061ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	771a      	strb	r2, [r3, #28]

  return status;
 80061f2:	7cfb      	ldrb	r3, [r7, #19]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	371c      	adds	r7, #28
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd90      	pop	{r4, r7, pc}

080061fc <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006208:	2300      	movs	r3, #0
 800620a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006216:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800621a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	0c1b      	lsrs	r3, r3, #16
 8006220:	b2da      	uxtb	r2, r3
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	0a1b      	lsrs	r3, r3, #8
 800622a:	b2db      	uxtb	r3, r3
 800622c:	f003 031f 	and.w	r3, r3, #31
 8006230:	b2da      	uxtb	r2, r3
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	b2db      	uxtb	r3, r3
 800623a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800623e:	b2da      	uxtb	r2, r3
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	0b5b      	lsrs	r3, r3, #13
 8006248:	b2db      	uxtb	r3, r3
 800624a:	f003 0307 	and.w	r3, r3, #7
 800624e:	b2da      	uxtb	r2, r3
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d11a      	bne.n	8006290 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	78db      	ldrb	r3, [r3, #3]
 800625e:	4618      	mov	r0, r3
 8006260:	f000 f8bc 	bl	80063dc <RTC_Bcd2ToByte>
 8006264:	4603      	mov	r3, r0
 8006266:	461a      	mov	r2, r3
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	785b      	ldrb	r3, [r3, #1]
 8006270:	4618      	mov	r0, r3
 8006272:	f000 f8b3 	bl	80063dc <RTC_Bcd2ToByte>
 8006276:	4603      	mov	r3, r0
 8006278:	461a      	mov	r2, r3
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	789b      	ldrb	r3, [r3, #2]
 8006282:	4618      	mov	r0, r3
 8006284:	f000 f8aa 	bl	80063dc <RTC_Bcd2ToByte>
 8006288:	4603      	mov	r3, r0
 800628a:	461a      	mov	r2, r3
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3718      	adds	r7, #24
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b084      	sub	sp, #16
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062a2:	2300      	movs	r3, #0
 80062a4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68da      	ldr	r2, [r3, #12]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062b4:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062b6:	f7fc fb1d 	bl	80028f4 <HAL_GetTick>
 80062ba:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80062bc:	e009      	b.n	80062d2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80062be:	f7fc fb19 	bl	80028f4 <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062cc:	d901      	bls.n	80062d2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e007      	b.n	80062e2 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	f003 0320 	and.w	r3, r3, #32
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d0ee      	beq.n	80062be <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b084      	sub	sp, #16
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006304:	2b00      	cmp	r3, #0
 8006306:	d122      	bne.n	800634e <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68da      	ldr	r2, [r3, #12]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006316:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006318:	f7fc faec 	bl	80028f4 <HAL_GetTick>
 800631c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800631e:	e00c      	b.n	800633a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006320:	f7fc fae8 	bl	80028f4 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800632e:	d904      	bls.n	800633a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2204      	movs	r2, #4
 8006334:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006344:	2b00      	cmp	r3, #0
 8006346:	d102      	bne.n	800634e <RTC_EnterInitMode+0x64>
 8006348:	7bfb      	ldrb	r3, [r7, #15]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d1e8      	bne.n	8006320 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800634e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006350:	4618      	mov	r0, r3
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006360:	2300      	movs	r3, #0
 8006362:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68da      	ldr	r2, [r3, #12]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006372:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f003 0320 	and.w	r3, r3, #32
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10a      	bne.n	8006398 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f7ff ff89 	bl	800629a <HAL_RTC_WaitForSynchro>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d004      	beq.n	8006398 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2204      	movs	r2, #4
 8006392:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006398:	7bfb      	ldrb	r3, [r7, #15]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b085      	sub	sp, #20
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	4603      	mov	r3, r0
 80063aa:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80063ac:	2300      	movs	r3, #0
 80063ae:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80063b0:	e005      	b.n	80063be <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80063b2:	7bfb      	ldrb	r3, [r7, #15]
 80063b4:	3301      	adds	r3, #1
 80063b6:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80063b8:	79fb      	ldrb	r3, [r7, #7]
 80063ba:	3b0a      	subs	r3, #10
 80063bc:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80063be:	79fb      	ldrb	r3, [r7, #7]
 80063c0:	2b09      	cmp	r3, #9
 80063c2:	d8f6      	bhi.n	80063b2 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
 80063c6:	011b      	lsls	r3, r3, #4
 80063c8:	b2da      	uxtb	r2, r3
 80063ca:	79fb      	ldrb	r3, [r7, #7]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	b2db      	uxtb	r3, r3
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	4603      	mov	r3, r0
 80063e4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80063ea:	79fb      	ldrb	r3, [r7, #7]
 80063ec:	091b      	lsrs	r3, r3, #4
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	461a      	mov	r2, r3
 80063f2:	0092      	lsls	r2, r2, #2
 80063f4:	4413      	add	r3, r2
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80063fa:	79fb      	ldrb	r3, [r7, #7]
 80063fc:	f003 030f 	and.w	r3, r3, #15
 8006400:	b2da      	uxtb	r2, r3
 8006402:	7bfb      	ldrb	r3, [r7, #15]
 8006404:	4413      	add	r3, r2
 8006406:	b2db      	uxtb	r3, r3
}
 8006408:	4618      	mov	r0, r3
 800640a:	3714      	adds	r7, #20
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e07b      	b.n	800651e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642a:	2b00      	cmp	r3, #0
 800642c:	d108      	bne.n	8006440 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006436:	d009      	beq.n	800644c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	61da      	str	r2, [r3, #28]
 800643e:	e005      	b.n	800644c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d106      	bne.n	800646c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f7fb fec4 	bl	80021f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2202      	movs	r2, #2
 8006470:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006482:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006494:	431a      	orrs	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800649e:	431a      	orrs	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	431a      	orrs	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	431a      	orrs	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	699b      	ldr	r3, [r3, #24]
 80064b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064bc:	431a      	orrs	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064c6:	431a      	orrs	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d0:	ea42 0103 	orr.w	r1, r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	0c1b      	lsrs	r3, r3, #16
 80064ea:	f003 0104 	and.w	r1, r3, #4
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f2:	f003 0210 	and.w	r2, r3, #16
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	69da      	ldr	r2, [r3, #28]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800650c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b08c      	sub	sp, #48	; 0x30
 800652a:	af00      	add	r7, sp, #0
 800652c:	60f8      	str	r0, [r7, #12]
 800652e:	60b9      	str	r1, [r7, #8]
 8006530:	607a      	str	r2, [r7, #4]
 8006532:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006534:	2301      	movs	r3, #1
 8006536:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006544:	2b01      	cmp	r3, #1
 8006546:	d101      	bne.n	800654c <HAL_SPI_TransmitReceive+0x26>
 8006548:	2302      	movs	r3, #2
 800654a:	e18a      	b.n	8006862 <HAL_SPI_TransmitReceive+0x33c>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006554:	f7fc f9ce 	bl	80028f4 <HAL_GetTick>
 8006558:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006560:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800656a:	887b      	ldrh	r3, [r7, #2]
 800656c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800656e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006572:	2b01      	cmp	r3, #1
 8006574:	d00f      	beq.n	8006596 <HAL_SPI_TransmitReceive+0x70>
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800657c:	d107      	bne.n	800658e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d103      	bne.n	800658e <HAL_SPI_TransmitReceive+0x68>
 8006586:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800658a:	2b04      	cmp	r3, #4
 800658c:	d003      	beq.n	8006596 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800658e:	2302      	movs	r3, #2
 8006590:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006594:	e15b      	b.n	800684e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d005      	beq.n	80065a8 <HAL_SPI_TransmitReceive+0x82>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d002      	beq.n	80065a8 <HAL_SPI_TransmitReceive+0x82>
 80065a2:	887b      	ldrh	r3, [r7, #2]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d103      	bne.n	80065b0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80065ae:	e14e      	b.n	800684e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2b04      	cmp	r3, #4
 80065ba:	d003      	beq.n	80065c4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2205      	movs	r2, #5
 80065c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	887a      	ldrh	r2, [r7, #2]
 80065d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	887a      	ldrh	r2, [r7, #2]
 80065da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	887a      	ldrh	r2, [r7, #2]
 80065e6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	887a      	ldrh	r2, [r7, #2]
 80065ec:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006604:	2b40      	cmp	r3, #64	; 0x40
 8006606:	d007      	beq.n	8006618 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006616:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006620:	d178      	bne.n	8006714 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <HAL_SPI_TransmitReceive+0x10a>
 800662a:	8b7b      	ldrh	r3, [r7, #26]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d166      	bne.n	80066fe <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006634:	881a      	ldrh	r2, [r3, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006640:	1c9a      	adds	r2, r3, #2
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800664a:	b29b      	uxth	r3, r3
 800664c:	3b01      	subs	r3, #1
 800664e:	b29a      	uxth	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006654:	e053      	b.n	80066fe <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f003 0302 	and.w	r3, r3, #2
 8006660:	2b02      	cmp	r3, #2
 8006662:	d11b      	bne.n	800669c <HAL_SPI_TransmitReceive+0x176>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006668:	b29b      	uxth	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d016      	beq.n	800669c <HAL_SPI_TransmitReceive+0x176>
 800666e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006670:	2b01      	cmp	r3, #1
 8006672:	d113      	bne.n	800669c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006678:	881a      	ldrh	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006684:	1c9a      	adds	r2, r3, #2
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800668e:	b29b      	uxth	r3, r3
 8006690:	3b01      	subs	r3, #1
 8006692:	b29a      	uxth	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006698:	2300      	movs	r3, #0
 800669a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d119      	bne.n	80066de <HAL_SPI_TransmitReceive+0x1b8>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d014      	beq.n	80066de <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68da      	ldr	r2, [r3, #12]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066be:	b292      	uxth	r2, r2
 80066c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c6:	1c9a      	adds	r2, r3, #2
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	3b01      	subs	r3, #1
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066da:	2301      	movs	r3, #1
 80066dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80066de:	f7fc f909 	bl	80028f4 <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d807      	bhi.n	80066fe <HAL_SPI_TransmitReceive+0x1d8>
 80066ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f4:	d003      	beq.n	80066fe <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80066fc:	e0a7      	b.n	800684e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006702:	b29b      	uxth	r3, r3
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1a6      	bne.n	8006656 <HAL_SPI_TransmitReceive+0x130>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800670c:	b29b      	uxth	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1a1      	bne.n	8006656 <HAL_SPI_TransmitReceive+0x130>
 8006712:	e07c      	b.n	800680e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <HAL_SPI_TransmitReceive+0x1fc>
 800671c:	8b7b      	ldrh	r3, [r7, #26]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d16b      	bne.n	80067fa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	330c      	adds	r3, #12
 800672c:	7812      	ldrb	r2, [r2, #0]
 800672e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800673e:	b29b      	uxth	r3, r3
 8006740:	3b01      	subs	r3, #1
 8006742:	b29a      	uxth	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006748:	e057      	b.n	80067fa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f003 0302 	and.w	r3, r3, #2
 8006754:	2b02      	cmp	r3, #2
 8006756:	d11c      	bne.n	8006792 <HAL_SPI_TransmitReceive+0x26c>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800675c:	b29b      	uxth	r3, r3
 800675e:	2b00      	cmp	r3, #0
 8006760:	d017      	beq.n	8006792 <HAL_SPI_TransmitReceive+0x26c>
 8006762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006764:	2b01      	cmp	r3, #1
 8006766:	d114      	bne.n	8006792 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	330c      	adds	r3, #12
 8006772:	7812      	ldrb	r2, [r2, #0]
 8006774:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006784:	b29b      	uxth	r3, r3
 8006786:	3b01      	subs	r3, #1
 8006788:	b29a      	uxth	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800678e:	2300      	movs	r3, #0
 8006790:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b01      	cmp	r3, #1
 800679e:	d119      	bne.n	80067d4 <HAL_SPI_TransmitReceive+0x2ae>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d014      	beq.n	80067d4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68da      	ldr	r2, [r3, #12]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b4:	b2d2      	uxtb	r2, r2
 80067b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067bc:	1c5a      	adds	r2, r3, #1
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	3b01      	subs	r3, #1
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80067d0:	2301      	movs	r3, #1
 80067d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80067d4:	f7fc f88e 	bl	80028f4 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d803      	bhi.n	80067ec <HAL_SPI_TransmitReceive+0x2c6>
 80067e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ea:	d102      	bne.n	80067f2 <HAL_SPI_TransmitReceive+0x2cc>
 80067ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d103      	bne.n	80067fa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80067f8:	e029      	b.n	800684e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067fe:	b29b      	uxth	r3, r3
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1a2      	bne.n	800674a <HAL_SPI_TransmitReceive+0x224>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006808:	b29b      	uxth	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	d19d      	bne.n	800674a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800680e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006810:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f000 f9d0 	bl	8006bb8 <SPI_EndRxTxTransaction>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d006      	beq.n	800682c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2220      	movs	r2, #32
 8006828:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800682a:	e010      	b.n	800684e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10b      	bne.n	800684c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006834:	2300      	movs	r3, #0
 8006836:	617b      	str	r3, [r7, #20]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	617b      	str	r3, [r7, #20]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	617b      	str	r3, [r7, #20]
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	e000      	b.n	800684e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800684c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800685e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006862:	4618      	mov	r0, r3
 8006864:	3730      	adds	r7, #48	; 0x30
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
	...

0800686c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b088      	sub	sp, #32
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	099b      	lsrs	r3, r3, #6
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10f      	bne.n	80068b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	099b      	lsrs	r3, r3, #6
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d004      	beq.n	80068b0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	4798      	blx	r3
    return;
 80068ae:	e0d7      	b.n	8006a60 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	085b      	lsrs	r3, r3, #1
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00a      	beq.n	80068d2 <HAL_SPI_IRQHandler+0x66>
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	09db      	lsrs	r3, r3, #7
 80068c0:	f003 0301 	and.w	r3, r3, #1
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d004      	beq.n	80068d2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	4798      	blx	r3
    return;
 80068d0:	e0c6      	b.n	8006a60 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	095b      	lsrs	r3, r3, #5
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10c      	bne.n	80068f8 <HAL_SPI_IRQHandler+0x8c>
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	099b      	lsrs	r3, r3, #6
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d106      	bne.n	80068f8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	0a1b      	lsrs	r3, r3, #8
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f000 80b4 	beq.w	8006a60 <HAL_SPI_IRQHandler+0x1f4>
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	095b      	lsrs	r3, r3, #5
 80068fc:	f003 0301 	and.w	r3, r3, #1
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 80ad 	beq.w	8006a60 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	099b      	lsrs	r3, r3, #6
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b00      	cmp	r3, #0
 8006910:	d023      	beq.n	800695a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b03      	cmp	r3, #3
 800691c:	d011      	beq.n	8006942 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006922:	f043 0204 	orr.w	r2, r3, #4
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800692a:	2300      	movs	r3, #0
 800692c:	617b      	str	r3, [r7, #20]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	617b      	str	r3, [r7, #20]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	617b      	str	r3, [r7, #20]
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	e00b      	b.n	800695a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006942:	2300      	movs	r3, #0
 8006944:	613b      	str	r3, [r7, #16]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	613b      	str	r3, [r7, #16]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	613b      	str	r3, [r7, #16]
 8006956:	693b      	ldr	r3, [r7, #16]
        return;
 8006958:	e082      	b.n	8006a60 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	095b      	lsrs	r3, r3, #5
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	d014      	beq.n	8006990 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800696a:	f043 0201 	orr.w	r2, r3, #1
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006972:	2300      	movs	r3, #0
 8006974:	60fb      	str	r3, [r7, #12]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	60fb      	str	r3, [r7, #12]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800698c:	601a      	str	r2, [r3, #0]
 800698e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	0a1b      	lsrs	r3, r3, #8
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00c      	beq.n	80069b6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a0:	f043 0208 	orr.w	r2, r3, #8
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80069a8:	2300      	movs	r3, #0
 80069aa:	60bb      	str	r3, [r7, #8]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	60bb      	str	r3, [r7, #8]
 80069b4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d04f      	beq.n	8006a5e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80069cc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	f003 0302 	and.w	r3, r3, #2
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d104      	bne.n	80069ea <HAL_SPI_IRQHandler+0x17e>
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d034      	beq.n	8006a54 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	685a      	ldr	r2, [r3, #4]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f022 0203 	bic.w	r2, r2, #3
 80069f8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d011      	beq.n	8006a26 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a06:	4a18      	ldr	r2, [pc, #96]	; (8006a68 <HAL_SPI_IRQHandler+0x1fc>)
 8006a08:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7fc f9a0 	bl	8002d54 <HAL_DMA_Abort_IT>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d005      	beq.n	8006a26 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d016      	beq.n	8006a5c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a32:	4a0d      	ldr	r2, [pc, #52]	; (8006a68 <HAL_SPI_IRQHandler+0x1fc>)
 8006a34:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7fc f98a 	bl	8002d54 <HAL_DMA_Abort_IT>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00a      	beq.n	8006a5c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006a52:	e003      	b.n	8006a5c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 f809 	bl	8006a6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006a5a:	e000      	b.n	8006a5e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006a5c:	bf00      	nop
    return;
 8006a5e:	bf00      	nop
  }
}
 8006a60:	3720      	adds	r7, #32
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	08006a81 	.word	0x08006a81

08006a6c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f7ff ffe6 	bl	8006a6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006aa0:	bf00      	nop
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b088      	sub	sp, #32
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	603b      	str	r3, [r7, #0]
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ab8:	f7fb ff1c 	bl	80028f4 <HAL_GetTick>
 8006abc:	4602      	mov	r2, r0
 8006abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac0:	1a9b      	subs	r3, r3, r2
 8006ac2:	683a      	ldr	r2, [r7, #0]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ac8:	f7fb ff14 	bl	80028f4 <HAL_GetTick>
 8006acc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ace:	4b39      	ldr	r3, [pc, #228]	; (8006bb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	015b      	lsls	r3, r3, #5
 8006ad4:	0d1b      	lsrs	r3, r3, #20
 8006ad6:	69fa      	ldr	r2, [r7, #28]
 8006ad8:	fb02 f303 	mul.w	r3, r2, r3
 8006adc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ade:	e054      	b.n	8006b8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae6:	d050      	beq.n	8006b8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ae8:	f7fb ff04 	bl	80028f4 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	69fa      	ldr	r2, [r7, #28]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d902      	bls.n	8006afe <SPI_WaitFlagStateUntilTimeout+0x56>
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d13d      	bne.n	8006b7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b16:	d111      	bne.n	8006b3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b20:	d004      	beq.n	8006b2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b2a:	d107      	bne.n	8006b3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b44:	d10f      	bne.n	8006b66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b54:	601a      	str	r2, [r3, #0]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e017      	b.n	8006baa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d101      	bne.n	8006b84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006b80:	2300      	movs	r3, #0
 8006b82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	3b01      	subs	r3, #1
 8006b88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	689a      	ldr	r2, [r3, #8]
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	4013      	ands	r3, r2
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	bf0c      	ite	eq
 8006b9a:	2301      	moveq	r3, #1
 8006b9c:	2300      	movne	r3, #0
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	79fb      	ldrb	r3, [r7, #7]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d19b      	bne.n	8006ae0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3720      	adds	r7, #32
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	20000230 	.word	0x20000230

08006bb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b088      	sub	sp, #32
 8006bbc:	af02      	add	r7, sp, #8
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006bc4:	4b1b      	ldr	r3, [pc, #108]	; (8006c34 <SPI_EndRxTxTransaction+0x7c>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a1b      	ldr	r2, [pc, #108]	; (8006c38 <SPI_EndRxTxTransaction+0x80>)
 8006bca:	fba2 2303 	umull	r2, r3, r2, r3
 8006bce:	0d5b      	lsrs	r3, r3, #21
 8006bd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006bd4:	fb02 f303 	mul.w	r3, r2, r3
 8006bd8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006be2:	d112      	bne.n	8006c0a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2200      	movs	r2, #0
 8006bec:	2180      	movs	r1, #128	; 0x80
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f7ff ff5a 	bl	8006aa8 <SPI_WaitFlagStateUntilTimeout>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d016      	beq.n	8006c28 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bfe:	f043 0220 	orr.w	r2, r3, #32
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e00f      	b.n	8006c2a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00a      	beq.n	8006c26 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	3b01      	subs	r3, #1
 8006c14:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c20:	2b80      	cmp	r3, #128	; 0x80
 8006c22:	d0f2      	beq.n	8006c0a <SPI_EndRxTxTransaction+0x52>
 8006c24:	e000      	b.n	8006c28 <SPI_EndRxTxTransaction+0x70>
        break;
 8006c26:	bf00      	nop
  }

  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3718      	adds	r7, #24
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	20000230 	.word	0x20000230
 8006c38:	165e9f81 	.word	0x165e9f81

08006c3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e041      	b.n	8006cd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d106      	bne.n	8006c68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f7fb fb48 	bl	80022f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	3304      	adds	r3, #4
 8006c78:	4619      	mov	r1, r3
 8006c7a:	4610      	mov	r0, r2
 8006c7c:	f000 fa96 	bl	80071ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
	...

08006cdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d001      	beq.n	8006cf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e04e      	b.n	8006d92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68da      	ldr	r2, [r3, #12]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f042 0201 	orr.w	r2, r2, #1
 8006d0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a23      	ldr	r2, [pc, #140]	; (8006da0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d022      	beq.n	8006d5c <HAL_TIM_Base_Start_IT+0x80>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d1e:	d01d      	beq.n	8006d5c <HAL_TIM_Base_Start_IT+0x80>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a1f      	ldr	r2, [pc, #124]	; (8006da4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d018      	beq.n	8006d5c <HAL_TIM_Base_Start_IT+0x80>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a1e      	ldr	r2, [pc, #120]	; (8006da8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d013      	beq.n	8006d5c <HAL_TIM_Base_Start_IT+0x80>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a1c      	ldr	r2, [pc, #112]	; (8006dac <HAL_TIM_Base_Start_IT+0xd0>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d00e      	beq.n	8006d5c <HAL_TIM_Base_Start_IT+0x80>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a1b      	ldr	r2, [pc, #108]	; (8006db0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d009      	beq.n	8006d5c <HAL_TIM_Base_Start_IT+0x80>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a19      	ldr	r2, [pc, #100]	; (8006db4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d004      	beq.n	8006d5c <HAL_TIM_Base_Start_IT+0x80>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a18      	ldr	r2, [pc, #96]	; (8006db8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d111      	bne.n	8006d80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f003 0307 	and.w	r3, r3, #7
 8006d66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2b06      	cmp	r3, #6
 8006d6c:	d010      	beq.n	8006d90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f042 0201 	orr.w	r2, r2, #1
 8006d7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d7e:	e007      	b.n	8006d90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f042 0201 	orr.w	r2, r2, #1
 8006d8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	40010000 	.word	0x40010000
 8006da4:	40000400 	.word	0x40000400
 8006da8:	40000800 	.word	0x40000800
 8006dac:	40000c00 	.word	0x40000c00
 8006db0:	40010400 	.word	0x40010400
 8006db4:	40014000 	.word	0x40014000
 8006db8:	40001800 	.word	0x40001800

08006dbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	f003 0302 	and.w	r3, r3, #2
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d122      	bne.n	8006e18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	f003 0302 	and.w	r3, r3, #2
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d11b      	bne.n	8006e18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f06f 0202 	mvn.w	r2, #2
 8006de8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2201      	movs	r2, #1
 8006dee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	f003 0303 	and.w	r3, r3, #3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f9b5 	bl	800716e <HAL_TIM_IC_CaptureCallback>
 8006e04:	e005      	b.n	8006e12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f9a7 	bl	800715a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f9b8 	bl	8007182 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	f003 0304 	and.w	r3, r3, #4
 8006e22:	2b04      	cmp	r3, #4
 8006e24:	d122      	bne.n	8006e6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	f003 0304 	and.w	r3, r3, #4
 8006e30:	2b04      	cmp	r3, #4
 8006e32:	d11b      	bne.n	8006e6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f06f 0204 	mvn.w	r2, #4
 8006e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2202      	movs	r2, #2
 8006e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d003      	beq.n	8006e5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f98b 	bl	800716e <HAL_TIM_IC_CaptureCallback>
 8006e58:	e005      	b.n	8006e66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f97d 	bl	800715a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f98e 	bl	8007182 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	f003 0308 	and.w	r3, r3, #8
 8006e76:	2b08      	cmp	r3, #8
 8006e78:	d122      	bne.n	8006ec0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	f003 0308 	and.w	r3, r3, #8
 8006e84:	2b08      	cmp	r3, #8
 8006e86:	d11b      	bne.n	8006ec0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f06f 0208 	mvn.w	r2, #8
 8006e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2204      	movs	r2, #4
 8006e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	69db      	ldr	r3, [r3, #28]
 8006e9e:	f003 0303 	and.w	r3, r3, #3
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d003      	beq.n	8006eae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f961 	bl	800716e <HAL_TIM_IC_CaptureCallback>
 8006eac:	e005      	b.n	8006eba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f953 	bl	800715a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 f964 	bl	8007182 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	f003 0310 	and.w	r3, r3, #16
 8006eca:	2b10      	cmp	r3, #16
 8006ecc:	d122      	bne.n	8006f14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	f003 0310 	and.w	r3, r3, #16
 8006ed8:	2b10      	cmp	r3, #16
 8006eda:	d11b      	bne.n	8006f14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f06f 0210 	mvn.w	r2, #16
 8006ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2208      	movs	r2, #8
 8006eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	69db      	ldr	r3, [r3, #28]
 8006ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d003      	beq.n	8006f02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f937 	bl	800716e <HAL_TIM_IC_CaptureCallback>
 8006f00:	e005      	b.n	8006f0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f929 	bl	800715a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f93a 	bl	8007182 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d10e      	bne.n	8006f40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	f003 0301 	and.w	r3, r3, #1
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d107      	bne.n	8006f40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f06f 0201 	mvn.w	r2, #1
 8006f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7fa fd78 	bl	8001a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f4a:	2b80      	cmp	r3, #128	; 0x80
 8006f4c:	d10e      	bne.n	8006f6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f58:	2b80      	cmp	r3, #128	; 0x80
 8006f5a:	d107      	bne.n	8006f6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fae0 	bl	800752c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f76:	2b40      	cmp	r3, #64	; 0x40
 8006f78:	d10e      	bne.n	8006f98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f84:	2b40      	cmp	r3, #64	; 0x40
 8006f86:	d107      	bne.n	8006f98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f8ff 	bl	8007196 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	f003 0320 	and.w	r3, r3, #32
 8006fa2:	2b20      	cmp	r3, #32
 8006fa4:	d10e      	bne.n	8006fc4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	f003 0320 	and.w	r3, r3, #32
 8006fb0:	2b20      	cmp	r3, #32
 8006fb2:	d107      	bne.n	8006fc4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f06f 0220 	mvn.w	r2, #32
 8006fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 faaa 	bl	8007518 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fc4:	bf00      	nop
 8006fc6:	3708      	adds	r7, #8
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d101      	bne.n	8006fe8 <HAL_TIM_ConfigClockSource+0x1c>
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	e0b4      	b.n	8007152 <HAL_TIM_ConfigClockSource+0x186>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007006:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800700e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007020:	d03e      	beq.n	80070a0 <HAL_TIM_ConfigClockSource+0xd4>
 8007022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007026:	f200 8087 	bhi.w	8007138 <HAL_TIM_ConfigClockSource+0x16c>
 800702a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800702e:	f000 8086 	beq.w	800713e <HAL_TIM_ConfigClockSource+0x172>
 8007032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007036:	d87f      	bhi.n	8007138 <HAL_TIM_ConfigClockSource+0x16c>
 8007038:	2b70      	cmp	r3, #112	; 0x70
 800703a:	d01a      	beq.n	8007072 <HAL_TIM_ConfigClockSource+0xa6>
 800703c:	2b70      	cmp	r3, #112	; 0x70
 800703e:	d87b      	bhi.n	8007138 <HAL_TIM_ConfigClockSource+0x16c>
 8007040:	2b60      	cmp	r3, #96	; 0x60
 8007042:	d050      	beq.n	80070e6 <HAL_TIM_ConfigClockSource+0x11a>
 8007044:	2b60      	cmp	r3, #96	; 0x60
 8007046:	d877      	bhi.n	8007138 <HAL_TIM_ConfigClockSource+0x16c>
 8007048:	2b50      	cmp	r3, #80	; 0x50
 800704a:	d03c      	beq.n	80070c6 <HAL_TIM_ConfigClockSource+0xfa>
 800704c:	2b50      	cmp	r3, #80	; 0x50
 800704e:	d873      	bhi.n	8007138 <HAL_TIM_ConfigClockSource+0x16c>
 8007050:	2b40      	cmp	r3, #64	; 0x40
 8007052:	d058      	beq.n	8007106 <HAL_TIM_ConfigClockSource+0x13a>
 8007054:	2b40      	cmp	r3, #64	; 0x40
 8007056:	d86f      	bhi.n	8007138 <HAL_TIM_ConfigClockSource+0x16c>
 8007058:	2b30      	cmp	r3, #48	; 0x30
 800705a:	d064      	beq.n	8007126 <HAL_TIM_ConfigClockSource+0x15a>
 800705c:	2b30      	cmp	r3, #48	; 0x30
 800705e:	d86b      	bhi.n	8007138 <HAL_TIM_ConfigClockSource+0x16c>
 8007060:	2b20      	cmp	r3, #32
 8007062:	d060      	beq.n	8007126 <HAL_TIM_ConfigClockSource+0x15a>
 8007064:	2b20      	cmp	r3, #32
 8007066:	d867      	bhi.n	8007138 <HAL_TIM_ConfigClockSource+0x16c>
 8007068:	2b00      	cmp	r3, #0
 800706a:	d05c      	beq.n	8007126 <HAL_TIM_ConfigClockSource+0x15a>
 800706c:	2b10      	cmp	r3, #16
 800706e:	d05a      	beq.n	8007126 <HAL_TIM_ConfigClockSource+0x15a>
 8007070:	e062      	b.n	8007138 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6818      	ldr	r0, [r3, #0]
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	6899      	ldr	r1, [r3, #8]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	685a      	ldr	r2, [r3, #4]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	f000 f9ad 	bl	80073e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007094:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	609a      	str	r2, [r3, #8]
      break;
 800709e:	e04f      	b.n	8007140 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6818      	ldr	r0, [r3, #0]
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	6899      	ldr	r1, [r3, #8]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	f000 f996 	bl	80073e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	689a      	ldr	r2, [r3, #8]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070c2:	609a      	str	r2, [r3, #8]
      break;
 80070c4:	e03c      	b.n	8007140 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6818      	ldr	r0, [r3, #0]
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	6859      	ldr	r1, [r3, #4]
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	461a      	mov	r2, r3
 80070d4:	f000 f90a 	bl	80072ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2150      	movs	r1, #80	; 0x50
 80070de:	4618      	mov	r0, r3
 80070e0:	f000 f963 	bl	80073aa <TIM_ITRx_SetConfig>
      break;
 80070e4:	e02c      	b.n	8007140 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6818      	ldr	r0, [r3, #0]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	6859      	ldr	r1, [r3, #4]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	461a      	mov	r2, r3
 80070f4:	f000 f929 	bl	800734a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2160      	movs	r1, #96	; 0x60
 80070fe:	4618      	mov	r0, r3
 8007100:	f000 f953 	bl	80073aa <TIM_ITRx_SetConfig>
      break;
 8007104:	e01c      	b.n	8007140 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6818      	ldr	r0, [r3, #0]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	6859      	ldr	r1, [r3, #4]
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	461a      	mov	r2, r3
 8007114:	f000 f8ea 	bl	80072ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2140      	movs	r1, #64	; 0x40
 800711e:	4618      	mov	r0, r3
 8007120:	f000 f943 	bl	80073aa <TIM_ITRx_SetConfig>
      break;
 8007124:	e00c      	b.n	8007140 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4619      	mov	r1, r3
 8007130:	4610      	mov	r0, r2
 8007132:	f000 f93a 	bl	80073aa <TIM_ITRx_SetConfig>
      break;
 8007136:	e003      	b.n	8007140 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	73fb      	strb	r3, [r7, #15]
      break;
 800713c:	e000      	b.n	8007140 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800713e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007150:	7bfb      	ldrb	r3, [r7, #15]
}
 8007152:	4618      	mov	r0, r3
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800715a:	b480      	push	{r7}
 800715c:	b083      	sub	sp, #12
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007162:	bf00      	nop
 8007164:	370c      	adds	r7, #12
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800716e:	b480      	push	{r7}
 8007170:	b083      	sub	sp, #12
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007176:	bf00      	nop
 8007178:	370c      	adds	r7, #12
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr

08007182 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007182:	b480      	push	{r7}
 8007184:	b083      	sub	sp, #12
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800718a:	bf00      	nop
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007196:	b480      	push	{r7}
 8007198:	b083      	sub	sp, #12
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800719e:	bf00      	nop
 80071a0:	370c      	adds	r7, #12
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
	...

080071ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a40      	ldr	r2, [pc, #256]	; (80072c0 <TIM_Base_SetConfig+0x114>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d013      	beq.n	80071ec <TIM_Base_SetConfig+0x40>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071ca:	d00f      	beq.n	80071ec <TIM_Base_SetConfig+0x40>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a3d      	ldr	r2, [pc, #244]	; (80072c4 <TIM_Base_SetConfig+0x118>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d00b      	beq.n	80071ec <TIM_Base_SetConfig+0x40>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a3c      	ldr	r2, [pc, #240]	; (80072c8 <TIM_Base_SetConfig+0x11c>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d007      	beq.n	80071ec <TIM_Base_SetConfig+0x40>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a3b      	ldr	r2, [pc, #236]	; (80072cc <TIM_Base_SetConfig+0x120>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d003      	beq.n	80071ec <TIM_Base_SetConfig+0x40>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a3a      	ldr	r2, [pc, #232]	; (80072d0 <TIM_Base_SetConfig+0x124>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d108      	bne.n	80071fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a2f      	ldr	r2, [pc, #188]	; (80072c0 <TIM_Base_SetConfig+0x114>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d02b      	beq.n	800725e <TIM_Base_SetConfig+0xb2>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800720c:	d027      	beq.n	800725e <TIM_Base_SetConfig+0xb2>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a2c      	ldr	r2, [pc, #176]	; (80072c4 <TIM_Base_SetConfig+0x118>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d023      	beq.n	800725e <TIM_Base_SetConfig+0xb2>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a2b      	ldr	r2, [pc, #172]	; (80072c8 <TIM_Base_SetConfig+0x11c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d01f      	beq.n	800725e <TIM_Base_SetConfig+0xb2>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a2a      	ldr	r2, [pc, #168]	; (80072cc <TIM_Base_SetConfig+0x120>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d01b      	beq.n	800725e <TIM_Base_SetConfig+0xb2>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a29      	ldr	r2, [pc, #164]	; (80072d0 <TIM_Base_SetConfig+0x124>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d017      	beq.n	800725e <TIM_Base_SetConfig+0xb2>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a28      	ldr	r2, [pc, #160]	; (80072d4 <TIM_Base_SetConfig+0x128>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d013      	beq.n	800725e <TIM_Base_SetConfig+0xb2>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a27      	ldr	r2, [pc, #156]	; (80072d8 <TIM_Base_SetConfig+0x12c>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d00f      	beq.n	800725e <TIM_Base_SetConfig+0xb2>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4a26      	ldr	r2, [pc, #152]	; (80072dc <TIM_Base_SetConfig+0x130>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d00b      	beq.n	800725e <TIM_Base_SetConfig+0xb2>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4a25      	ldr	r2, [pc, #148]	; (80072e0 <TIM_Base_SetConfig+0x134>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d007      	beq.n	800725e <TIM_Base_SetConfig+0xb2>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a24      	ldr	r2, [pc, #144]	; (80072e4 <TIM_Base_SetConfig+0x138>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d003      	beq.n	800725e <TIM_Base_SetConfig+0xb2>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a23      	ldr	r2, [pc, #140]	; (80072e8 <TIM_Base_SetConfig+0x13c>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d108      	bne.n	8007270 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007264:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	4313      	orrs	r3, r2
 800726e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	4313      	orrs	r3, r2
 800727c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	689a      	ldr	r2, [r3, #8]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a0a      	ldr	r2, [pc, #40]	; (80072c0 <TIM_Base_SetConfig+0x114>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d003      	beq.n	80072a4 <TIM_Base_SetConfig+0xf8>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a0c      	ldr	r2, [pc, #48]	; (80072d0 <TIM_Base_SetConfig+0x124>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d103      	bne.n	80072ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	691a      	ldr	r2, [r3, #16]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	615a      	str	r2, [r3, #20]
}
 80072b2:	bf00      	nop
 80072b4:	3714      	adds	r7, #20
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	40010000 	.word	0x40010000
 80072c4:	40000400 	.word	0x40000400
 80072c8:	40000800 	.word	0x40000800
 80072cc:	40000c00 	.word	0x40000c00
 80072d0:	40010400 	.word	0x40010400
 80072d4:	40014000 	.word	0x40014000
 80072d8:	40014400 	.word	0x40014400
 80072dc:	40014800 	.word	0x40014800
 80072e0:	40001800 	.word	0x40001800
 80072e4:	40001c00 	.word	0x40001c00
 80072e8:	40002000 	.word	0x40002000

080072ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b087      	sub	sp, #28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6a1b      	ldr	r3, [r3, #32]
 80072fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	f023 0201 	bic.w	r2, r3, #1
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007316:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	011b      	lsls	r3, r3, #4
 800731c:	693a      	ldr	r2, [r7, #16]
 800731e:	4313      	orrs	r3, r2
 8007320:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	f023 030a 	bic.w	r3, r3, #10
 8007328:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	4313      	orrs	r3, r2
 8007330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	697a      	ldr	r2, [r7, #20]
 800733c:	621a      	str	r2, [r3, #32]
}
 800733e:	bf00      	nop
 8007340:	371c      	adds	r7, #28
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800734a:	b480      	push	{r7}
 800734c:	b087      	sub	sp, #28
 800734e:	af00      	add	r7, sp, #0
 8007350:	60f8      	str	r0, [r7, #12]
 8007352:	60b9      	str	r1, [r7, #8]
 8007354:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6a1b      	ldr	r3, [r3, #32]
 800735a:	f023 0210 	bic.w	r2, r3, #16
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6a1b      	ldr	r3, [r3, #32]
 800736c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007374:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	031b      	lsls	r3, r3, #12
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	4313      	orrs	r3, r2
 800737e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007386:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	011b      	lsls	r3, r3, #4
 800738c:	693a      	ldr	r2, [r7, #16]
 800738e:	4313      	orrs	r3, r2
 8007390:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	693a      	ldr	r2, [r7, #16]
 800739c:	621a      	str	r2, [r3, #32]
}
 800739e:	bf00      	nop
 80073a0:	371c      	adds	r7, #28
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073aa:	b480      	push	{r7}
 80073ac:	b085      	sub	sp, #20
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
 80073b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	f043 0307 	orr.w	r3, r3, #7
 80073cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	609a      	str	r2, [r3, #8]
}
 80073d4:	bf00      	nop
 80073d6:	3714      	adds	r7, #20
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b087      	sub	sp, #28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
 80073ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	021a      	lsls	r2, r3, #8
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	431a      	orrs	r2, r3
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	4313      	orrs	r3, r2
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	4313      	orrs	r3, r2
 800740c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	697a      	ldr	r2, [r7, #20]
 8007412:	609a      	str	r2, [r3, #8]
}
 8007414:	bf00      	nop
 8007416:	371c      	adds	r7, #28
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007430:	2b01      	cmp	r3, #1
 8007432:	d101      	bne.n	8007438 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007434:	2302      	movs	r3, #2
 8007436:	e05a      	b.n	80074ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2202      	movs	r2, #2
 8007444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800745e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	4313      	orrs	r3, r2
 8007468:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a21      	ldr	r2, [pc, #132]	; (80074fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d022      	beq.n	80074c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007484:	d01d      	beq.n	80074c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a1d      	ldr	r2, [pc, #116]	; (8007500 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d018      	beq.n	80074c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a1b      	ldr	r2, [pc, #108]	; (8007504 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d013      	beq.n	80074c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a1a      	ldr	r2, [pc, #104]	; (8007508 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d00e      	beq.n	80074c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a18      	ldr	r2, [pc, #96]	; (800750c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d009      	beq.n	80074c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a17      	ldr	r2, [pc, #92]	; (8007510 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d004      	beq.n	80074c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a15      	ldr	r2, [pc, #84]	; (8007514 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d10c      	bne.n	80074dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	68ba      	ldr	r2, [r7, #8]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68ba      	ldr	r2, [r7, #8]
 80074da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	40010000 	.word	0x40010000
 8007500:	40000400 	.word	0x40000400
 8007504:	40000800 	.word	0x40000800
 8007508:	40000c00 	.word	0x40000c00
 800750c:	40010400 	.word	0x40010400
 8007510:	40014000 	.word	0x40014000
 8007514:	40001800 	.word	0x40001800

08007518 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007534:	bf00      	nop
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d101      	bne.n	8007552 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e03f      	b.n	80075d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2b00      	cmp	r3, #0
 800755c:	d106      	bne.n	800756c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7fa feec 	bl	8002344 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2224      	movs	r2, #36	; 0x24
 8007570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68da      	ldr	r2, [r3, #12]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007582:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 fd19 	bl	8007fbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	691a      	ldr	r2, [r3, #16]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007598:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	695a      	ldr	r2, [r3, #20]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68da      	ldr	r2, [r3, #12]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2220      	movs	r2, #32
 80075c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2220      	movs	r2, #32
 80075cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80075da:	b480      	push	{r7}
 80075dc:	b085      	sub	sp, #20
 80075de:	af00      	add	r7, sp, #0
 80075e0:	60f8      	str	r0, [r7, #12]
 80075e2:	60b9      	str	r1, [r7, #8]
 80075e4:	4613      	mov	r3, r2
 80075e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b20      	cmp	r3, #32
 80075f2:	d130      	bne.n	8007656 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d002      	beq.n	8007600 <HAL_UART_Transmit_IT+0x26>
 80075fa:	88fb      	ldrh	r3, [r7, #6]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d101      	bne.n	8007604 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e029      	b.n	8007658 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800760a:	2b01      	cmp	r3, #1
 800760c:	d101      	bne.n	8007612 <HAL_UART_Transmit_IT+0x38>
 800760e:	2302      	movs	r3, #2
 8007610:	e022      	b.n	8007658 <HAL_UART_Transmit_IT+0x7e>
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	88fa      	ldrh	r2, [r7, #6]
 8007624:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	88fa      	ldrh	r2, [r7, #6]
 800762a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2221      	movs	r2, #33	; 0x21
 8007636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68da      	ldr	r2, [r3, #12]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007650:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007652:	2300      	movs	r3, #0
 8007654:	e000      	b.n	8007658 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007656:	2302      	movs	r3, #2
  }
}
 8007658:	4618      	mov	r0, r3
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	4613      	mov	r3, r2
 8007670:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007678:	b2db      	uxtb	r3, r3
 800767a:	2b20      	cmp	r3, #32
 800767c:	d11d      	bne.n	80076ba <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d002      	beq.n	800768a <HAL_UART_Receive_IT+0x26>
 8007684:	88fb      	ldrh	r3, [r7, #6]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e016      	b.n	80076bc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007694:	2b01      	cmp	r3, #1
 8007696:	d101      	bne.n	800769c <HAL_UART_Receive_IT+0x38>
 8007698:	2302      	movs	r3, #2
 800769a:	e00f      	b.n	80076bc <HAL_UART_Receive_IT+0x58>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80076aa:	88fb      	ldrh	r3, [r7, #6]
 80076ac:	461a      	mov	r2, r3
 80076ae:	68b9      	ldr	r1, [r7, #8]
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f000 faab 	bl	8007c0c <UART_Start_Receive_IT>
 80076b6:	4603      	mov	r3, r0
 80076b8:	e000      	b.n	80076bc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80076ba:	2302      	movs	r3, #2
  }
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b0ba      	sub	sp, #232	; 0xe8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80076ea:	2300      	movs	r3, #0
 80076ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80076f0:	2300      	movs	r3, #0
 80076f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80076f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076fa:	f003 030f 	and.w	r3, r3, #15
 80076fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007702:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007706:	2b00      	cmp	r3, #0
 8007708:	d10f      	bne.n	800772a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800770a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800770e:	f003 0320 	and.w	r3, r3, #32
 8007712:	2b00      	cmp	r3, #0
 8007714:	d009      	beq.n	800772a <HAL_UART_IRQHandler+0x66>
 8007716:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800771a:	f003 0320 	and.w	r3, r3, #32
 800771e:	2b00      	cmp	r3, #0
 8007720:	d003      	beq.n	800772a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fb8f 	bl	8007e46 <UART_Receive_IT>
      return;
 8007728:	e256      	b.n	8007bd8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800772a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800772e:	2b00      	cmp	r3, #0
 8007730:	f000 80de 	beq.w	80078f0 <HAL_UART_IRQHandler+0x22c>
 8007734:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	2b00      	cmp	r3, #0
 800773e:	d106      	bne.n	800774e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007744:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007748:	2b00      	cmp	r3, #0
 800774a:	f000 80d1 	beq.w	80078f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800774e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007752:	f003 0301 	and.w	r3, r3, #1
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00b      	beq.n	8007772 <HAL_UART_IRQHandler+0xae>
 800775a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800775e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007762:	2b00      	cmp	r3, #0
 8007764:	d005      	beq.n	8007772 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776a:	f043 0201 	orr.w	r2, r3, #1
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007776:	f003 0304 	and.w	r3, r3, #4
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00b      	beq.n	8007796 <HAL_UART_IRQHandler+0xd2>
 800777e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007782:	f003 0301 	and.w	r3, r3, #1
 8007786:	2b00      	cmp	r3, #0
 8007788:	d005      	beq.n	8007796 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778e:	f043 0202 	orr.w	r2, r3, #2
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800779a:	f003 0302 	and.w	r3, r3, #2
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00b      	beq.n	80077ba <HAL_UART_IRQHandler+0xf6>
 80077a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077a6:	f003 0301 	and.w	r3, r3, #1
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d005      	beq.n	80077ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b2:	f043 0204 	orr.w	r2, r3, #4
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80077ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077be:	f003 0308 	and.w	r3, r3, #8
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d011      	beq.n	80077ea <HAL_UART_IRQHandler+0x126>
 80077c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077ca:	f003 0320 	and.w	r3, r3, #32
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d105      	bne.n	80077de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80077d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077d6:	f003 0301 	and.w	r3, r3, #1
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d005      	beq.n	80077ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e2:	f043 0208 	orr.w	r2, r3, #8
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	f000 81ed 	beq.w	8007bce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077f8:	f003 0320 	and.w	r3, r3, #32
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d008      	beq.n	8007812 <HAL_UART_IRQHandler+0x14e>
 8007800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007804:	f003 0320 	and.w	r3, r3, #32
 8007808:	2b00      	cmp	r3, #0
 800780a:	d002      	beq.n	8007812 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fb1a 	bl	8007e46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	695b      	ldr	r3, [r3, #20]
 8007818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800781c:	2b40      	cmp	r3, #64	; 0x40
 800781e:	bf0c      	ite	eq
 8007820:	2301      	moveq	r3, #1
 8007822:	2300      	movne	r3, #0
 8007824:	b2db      	uxtb	r3, r3
 8007826:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782e:	f003 0308 	and.w	r3, r3, #8
 8007832:	2b00      	cmp	r3, #0
 8007834:	d103      	bne.n	800783e <HAL_UART_IRQHandler+0x17a>
 8007836:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800783a:	2b00      	cmp	r3, #0
 800783c:	d04f      	beq.n	80078de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fa22 	bl	8007c88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784e:	2b40      	cmp	r3, #64	; 0x40
 8007850:	d141      	bne.n	80078d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	3314      	adds	r3, #20
 8007858:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007860:	e853 3f00 	ldrex	r3, [r3]
 8007864:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007868:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800786c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007870:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	3314      	adds	r3, #20
 800787a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800787e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007882:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007886:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800788a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800788e:	e841 2300 	strex	r3, r2, [r1]
 8007892:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007896:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1d9      	bne.n	8007852 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d013      	beq.n	80078ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078aa:	4a7d      	ldr	r2, [pc, #500]	; (8007aa0 <HAL_UART_IRQHandler+0x3dc>)
 80078ac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fb fa4e 	bl	8002d54 <HAL_DMA_Abort_IT>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d016      	beq.n	80078ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80078c8:	4610      	mov	r0, r2
 80078ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078cc:	e00e      	b.n	80078ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 f986 	bl	8007be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078d4:	e00a      	b.n	80078ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 f982 	bl	8007be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078dc:	e006      	b.n	80078ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f97e 	bl	8007be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80078ea:	e170      	b.n	8007bce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ec:	bf00      	nop
    return;
 80078ee:	e16e      	b.n	8007bce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	f040 814a 	bne.w	8007b8e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80078fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078fe:	f003 0310 	and.w	r3, r3, #16
 8007902:	2b00      	cmp	r3, #0
 8007904:	f000 8143 	beq.w	8007b8e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800790c:	f003 0310 	and.w	r3, r3, #16
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 813c 	beq.w	8007b8e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007916:	2300      	movs	r3, #0
 8007918:	60bb      	str	r3, [r7, #8]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	60bb      	str	r3, [r7, #8]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	60bb      	str	r3, [r7, #8]
 800792a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007936:	2b40      	cmp	r3, #64	; 0x40
 8007938:	f040 80b4 	bne.w	8007aa4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007948:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800794c:	2b00      	cmp	r3, #0
 800794e:	f000 8140 	beq.w	8007bd2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007956:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800795a:	429a      	cmp	r2, r3
 800795c:	f080 8139 	bcs.w	8007bd2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007966:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796c:	69db      	ldr	r3, [r3, #28]
 800796e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007972:	f000 8088 	beq.w	8007a86 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	330c      	adds	r3, #12
 800797c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007980:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007984:	e853 3f00 	ldrex	r3, [r3]
 8007988:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800798c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007990:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007994:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	330c      	adds	r3, #12
 800799e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80079a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80079a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80079ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80079b2:	e841 2300 	strex	r3, r2, [r1]
 80079b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80079ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1d9      	bne.n	8007976 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	3314      	adds	r3, #20
 80079c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079cc:	e853 3f00 	ldrex	r3, [r3]
 80079d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80079d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079d4:	f023 0301 	bic.w	r3, r3, #1
 80079d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	3314      	adds	r3, #20
 80079e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80079e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80079ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80079ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80079f2:	e841 2300 	strex	r3, r2, [r1]
 80079f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80079f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1e1      	bne.n	80079c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	3314      	adds	r3, #20
 8007a04:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a08:	e853 3f00 	ldrex	r3, [r3]
 8007a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	3314      	adds	r3, #20
 8007a1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a22:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a24:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a26:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a28:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a2a:	e841 2300 	strex	r3, r2, [r1]
 8007a2e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1e3      	bne.n	80079fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2220      	movs	r2, #32
 8007a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	330c      	adds	r3, #12
 8007a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a4e:	e853 3f00 	ldrex	r3, [r3]
 8007a52:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a56:	f023 0310 	bic.w	r3, r3, #16
 8007a5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	330c      	adds	r3, #12
 8007a64:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007a68:	65ba      	str	r2, [r7, #88]	; 0x58
 8007a6a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a70:	e841 2300 	strex	r3, r2, [r1]
 8007a74:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1e3      	bne.n	8007a44 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a80:	4618      	mov	r0, r3
 8007a82:	f7fb f8f7 	bl	8002c74 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	4619      	mov	r1, r3
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 f8ac 	bl	8007bf4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a9c:	e099      	b.n	8007bd2 <HAL_UART_IRQHandler+0x50e>
 8007a9e:	bf00      	nop
 8007aa0:	08007d4f 	.word	0x08007d4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	f000 808b 	beq.w	8007bd6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007ac0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f000 8086 	beq.w	8007bd6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	330c      	adds	r3, #12
 8007ad0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad4:	e853 3f00 	ldrex	r3, [r3]
 8007ad8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007adc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ae0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	330c      	adds	r3, #12
 8007aea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007aee:	647a      	str	r2, [r7, #68]	; 0x44
 8007af0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007af4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007af6:	e841 2300 	strex	r3, r2, [r1]
 8007afa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1e3      	bne.n	8007aca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	3314      	adds	r3, #20
 8007b08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0c:	e853 3f00 	ldrex	r3, [r3]
 8007b10:	623b      	str	r3, [r7, #32]
   return(result);
 8007b12:	6a3b      	ldr	r3, [r7, #32]
 8007b14:	f023 0301 	bic.w	r3, r3, #1
 8007b18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	3314      	adds	r3, #20
 8007b22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b26:	633a      	str	r2, [r7, #48]	; 0x30
 8007b28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b2e:	e841 2300 	strex	r3, r2, [r1]
 8007b32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1e3      	bne.n	8007b02 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2220      	movs	r2, #32
 8007b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	330c      	adds	r3, #12
 8007b4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	e853 3f00 	ldrex	r3, [r3]
 8007b56:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f023 0310 	bic.w	r3, r3, #16
 8007b5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	330c      	adds	r3, #12
 8007b68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007b6c:	61fa      	str	r2, [r7, #28]
 8007b6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b70:	69b9      	ldr	r1, [r7, #24]
 8007b72:	69fa      	ldr	r2, [r7, #28]
 8007b74:	e841 2300 	strex	r3, r2, [r1]
 8007b78:	617b      	str	r3, [r7, #20]
   return(result);
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d1e3      	bne.n	8007b48 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b84:	4619      	mov	r1, r3
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 f834 	bl	8007bf4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b8c:	e023      	b.n	8007bd6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d009      	beq.n	8007bae <HAL_UART_IRQHandler+0x4ea>
 8007b9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d003      	beq.n	8007bae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f8e5 	bl	8007d76 <UART_Transmit_IT>
    return;
 8007bac:	e014      	b.n	8007bd8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00e      	beq.n	8007bd8 <HAL_UART_IRQHandler+0x514>
 8007bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d008      	beq.n	8007bd8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f925 	bl	8007e16 <UART_EndTransmit_IT>
    return;
 8007bcc:	e004      	b.n	8007bd8 <HAL_UART_IRQHandler+0x514>
    return;
 8007bce:	bf00      	nop
 8007bd0:	e002      	b.n	8007bd8 <HAL_UART_IRQHandler+0x514>
      return;
 8007bd2:	bf00      	nop
 8007bd4:	e000      	b.n	8007bd8 <HAL_UART_IRQHandler+0x514>
      return;
 8007bd6:	bf00      	nop
  }
}
 8007bd8:	37e8      	adds	r7, #232	; 0xe8
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop

08007be0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007be8:	bf00      	nop
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	4613      	mov	r3, r2
 8007c18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	88fa      	ldrh	r2, [r7, #6]
 8007c24:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	88fa      	ldrh	r2, [r7, #6]
 8007c2a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2222      	movs	r2, #34	; 0x22
 8007c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d007      	beq.n	8007c5a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68da      	ldr	r2, [r3, #12]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c58:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	695a      	ldr	r2, [r3, #20]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f042 0201 	orr.w	r2, r2, #1
 8007c68:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68da      	ldr	r2, [r3, #12]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f042 0220 	orr.w	r2, r2, #32
 8007c78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b095      	sub	sp, #84	; 0x54
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	330c      	adds	r3, #12
 8007c96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c9a:	e853 3f00 	ldrex	r3, [r3]
 8007c9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	330c      	adds	r3, #12
 8007cae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007cb0:	643a      	str	r2, [r7, #64]	; 0x40
 8007cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cb8:	e841 2300 	strex	r3, r2, [r1]
 8007cbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1e5      	bne.n	8007c90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	3314      	adds	r3, #20
 8007cca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ccc:	6a3b      	ldr	r3, [r7, #32]
 8007cce:	e853 3f00 	ldrex	r3, [r3]
 8007cd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	f023 0301 	bic.w	r3, r3, #1
 8007cda:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3314      	adds	r3, #20
 8007ce2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ce4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ce6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cec:	e841 2300 	strex	r3, r2, [r1]
 8007cf0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d1e5      	bne.n	8007cc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d119      	bne.n	8007d34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	330c      	adds	r3, #12
 8007d06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	e853 3f00 	ldrex	r3, [r3]
 8007d0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	f023 0310 	bic.w	r3, r3, #16
 8007d16:	647b      	str	r3, [r7, #68]	; 0x44
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	330c      	adds	r3, #12
 8007d1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d20:	61ba      	str	r2, [r7, #24]
 8007d22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d24:	6979      	ldr	r1, [r7, #20]
 8007d26:	69ba      	ldr	r2, [r7, #24]
 8007d28:	e841 2300 	strex	r3, r2, [r1]
 8007d2c:	613b      	str	r3, [r7, #16]
   return(result);
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1e5      	bne.n	8007d00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2220      	movs	r2, #32
 8007d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007d42:	bf00      	nop
 8007d44:	3754      	adds	r7, #84	; 0x54
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b084      	sub	sp, #16
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f7ff ff39 	bl	8007be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d6e:	bf00      	nop
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007d76:	b480      	push	{r7}
 8007d78:	b085      	sub	sp, #20
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b21      	cmp	r3, #33	; 0x21
 8007d88:	d13e      	bne.n	8007e08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d92:	d114      	bne.n	8007dbe <UART_Transmit_IT+0x48>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	691b      	ldr	r3, [r3, #16]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d110      	bne.n	8007dbe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6a1b      	ldr	r3, [r3, #32]
 8007da0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	881b      	ldrh	r3, [r3, #0]
 8007da6:	461a      	mov	r2, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007db0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a1b      	ldr	r3, [r3, #32]
 8007db6:	1c9a      	adds	r2, r3, #2
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	621a      	str	r2, [r3, #32]
 8007dbc:	e008      	b.n	8007dd0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a1b      	ldr	r3, [r3, #32]
 8007dc2:	1c59      	adds	r1, r3, #1
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	6211      	str	r1, [r2, #32]
 8007dc8:	781a      	ldrb	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	4619      	mov	r1, r3
 8007dde:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10f      	bne.n	8007e04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68da      	ldr	r2, [r3, #12]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007df2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	68da      	ldr	r2, [r3, #12]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007e04:	2300      	movs	r3, #0
 8007e06:	e000      	b.n	8007e0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007e08:	2302      	movs	r3, #2
  }
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3714      	adds	r7, #20
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr

08007e16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b082      	sub	sp, #8
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68da      	ldr	r2, [r3, #12]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2220      	movs	r2, #32
 8007e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f7f9 fbe8 	bl	800160c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b08c      	sub	sp, #48	; 0x30
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	2b22      	cmp	r3, #34	; 0x22
 8007e58:	f040 80ab 	bne.w	8007fb2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e64:	d117      	bne.n	8007e96 <UART_Receive_IT+0x50>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d113      	bne.n	8007e96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e76:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e8e:	1c9a      	adds	r2, r3, #2
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	629a      	str	r2, [r3, #40]	; 0x28
 8007e94:	e026      	b.n	8007ee4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ea8:	d007      	beq.n	8007eba <UART_Receive_IT+0x74>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d10a      	bne.n	8007ec8 <UART_Receive_IT+0x82>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	691b      	ldr	r3, [r3, #16]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d106      	bne.n	8007ec8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec4:	701a      	strb	r2, [r3, #0]
 8007ec6:	e008      	b.n	8007eda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ed4:	b2da      	uxtb	r2, r3
 8007ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ede:	1c5a      	adds	r2, r3, #1
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	3b01      	subs	r3, #1
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d15a      	bne.n	8007fae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68da      	ldr	r2, [r3, #12]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f022 0220 	bic.w	r2, r2, #32
 8007f06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68da      	ldr	r2, [r3, #12]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	695a      	ldr	r2, [r3, #20]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f022 0201 	bic.w	r2, r2, #1
 8007f26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2220      	movs	r2, #32
 8007f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d135      	bne.n	8007fa4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	330c      	adds	r3, #12
 8007f44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	e853 3f00 	ldrex	r3, [r3]
 8007f4c:	613b      	str	r3, [r7, #16]
   return(result);
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	f023 0310 	bic.w	r3, r3, #16
 8007f54:	627b      	str	r3, [r7, #36]	; 0x24
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	330c      	adds	r3, #12
 8007f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f5e:	623a      	str	r2, [r7, #32]
 8007f60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f62:	69f9      	ldr	r1, [r7, #28]
 8007f64:	6a3a      	ldr	r2, [r7, #32]
 8007f66:	e841 2300 	strex	r3, r2, [r1]
 8007f6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1e5      	bne.n	8007f3e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 0310 	and.w	r3, r3, #16
 8007f7c:	2b10      	cmp	r3, #16
 8007f7e:	d10a      	bne.n	8007f96 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f80:	2300      	movs	r3, #0
 8007f82:	60fb      	str	r3, [r7, #12]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	60fb      	str	r3, [r7, #12]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	60fb      	str	r3, [r7, #12]
 8007f94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f7ff fe29 	bl	8007bf4 <HAL_UARTEx_RxEventCallback>
 8007fa2:	e002      	b.n	8007faa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f7f9 fb13 	bl	80015d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007faa:	2300      	movs	r3, #0
 8007fac:	e002      	b.n	8007fb4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	e000      	b.n	8007fb4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007fb2:	2302      	movs	r3, #2
  }
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3730      	adds	r7, #48	; 0x30
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fc0:	b0c0      	sub	sp, #256	; 0x100
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fd8:	68d9      	ldr	r1, [r3, #12]
 8007fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	ea40 0301 	orr.w	r3, r0, r1
 8007fe4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fea:	689a      	ldr	r2, [r3, #8]
 8007fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	431a      	orrs	r2, r3
 8007ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ff8:	695b      	ldr	r3, [r3, #20]
 8007ffa:	431a      	orrs	r2, r3
 8007ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008000:	69db      	ldr	r3, [r3, #28]
 8008002:	4313      	orrs	r3, r2
 8008004:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008014:	f021 010c 	bic.w	r1, r1, #12
 8008018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008022:	430b      	orrs	r3, r1
 8008024:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	695b      	ldr	r3, [r3, #20]
 800802e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008036:	6999      	ldr	r1, [r3, #24]
 8008038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	ea40 0301 	orr.w	r3, r0, r1
 8008042:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	4b8f      	ldr	r3, [pc, #572]	; (8008288 <UART_SetConfig+0x2cc>)
 800804c:	429a      	cmp	r2, r3
 800804e:	d005      	beq.n	800805c <UART_SetConfig+0xa0>
 8008050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	4b8d      	ldr	r3, [pc, #564]	; (800828c <UART_SetConfig+0x2d0>)
 8008058:	429a      	cmp	r2, r3
 800805a:	d104      	bne.n	8008066 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800805c:	f7fd fdb4 	bl	8005bc8 <HAL_RCC_GetPCLK2Freq>
 8008060:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008064:	e003      	b.n	800806e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008066:	f7fd fd9b 	bl	8005ba0 <HAL_RCC_GetPCLK1Freq>
 800806a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800806e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008072:	69db      	ldr	r3, [r3, #28]
 8008074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008078:	f040 810c 	bne.w	8008294 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800807c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008080:	2200      	movs	r2, #0
 8008082:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008086:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800808a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800808e:	4622      	mov	r2, r4
 8008090:	462b      	mov	r3, r5
 8008092:	1891      	adds	r1, r2, r2
 8008094:	65b9      	str	r1, [r7, #88]	; 0x58
 8008096:	415b      	adcs	r3, r3
 8008098:	65fb      	str	r3, [r7, #92]	; 0x5c
 800809a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800809e:	4621      	mov	r1, r4
 80080a0:	eb12 0801 	adds.w	r8, r2, r1
 80080a4:	4629      	mov	r1, r5
 80080a6:	eb43 0901 	adc.w	r9, r3, r1
 80080aa:	f04f 0200 	mov.w	r2, #0
 80080ae:	f04f 0300 	mov.w	r3, #0
 80080b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80080b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80080ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80080be:	4690      	mov	r8, r2
 80080c0:	4699      	mov	r9, r3
 80080c2:	4623      	mov	r3, r4
 80080c4:	eb18 0303 	adds.w	r3, r8, r3
 80080c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80080cc:	462b      	mov	r3, r5
 80080ce:	eb49 0303 	adc.w	r3, r9, r3
 80080d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80080d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80080e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80080e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80080ea:	460b      	mov	r3, r1
 80080ec:	18db      	adds	r3, r3, r3
 80080ee:	653b      	str	r3, [r7, #80]	; 0x50
 80080f0:	4613      	mov	r3, r2
 80080f2:	eb42 0303 	adc.w	r3, r2, r3
 80080f6:	657b      	str	r3, [r7, #84]	; 0x54
 80080f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80080fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008100:	f7f8 f8ce 	bl	80002a0 <__aeabi_uldivmod>
 8008104:	4602      	mov	r2, r0
 8008106:	460b      	mov	r3, r1
 8008108:	4b61      	ldr	r3, [pc, #388]	; (8008290 <UART_SetConfig+0x2d4>)
 800810a:	fba3 2302 	umull	r2, r3, r3, r2
 800810e:	095b      	lsrs	r3, r3, #5
 8008110:	011c      	lsls	r4, r3, #4
 8008112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008116:	2200      	movs	r2, #0
 8008118:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800811c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008120:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008124:	4642      	mov	r2, r8
 8008126:	464b      	mov	r3, r9
 8008128:	1891      	adds	r1, r2, r2
 800812a:	64b9      	str	r1, [r7, #72]	; 0x48
 800812c:	415b      	adcs	r3, r3
 800812e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008130:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008134:	4641      	mov	r1, r8
 8008136:	eb12 0a01 	adds.w	sl, r2, r1
 800813a:	4649      	mov	r1, r9
 800813c:	eb43 0b01 	adc.w	fp, r3, r1
 8008140:	f04f 0200 	mov.w	r2, #0
 8008144:	f04f 0300 	mov.w	r3, #0
 8008148:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800814c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008150:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008154:	4692      	mov	sl, r2
 8008156:	469b      	mov	fp, r3
 8008158:	4643      	mov	r3, r8
 800815a:	eb1a 0303 	adds.w	r3, sl, r3
 800815e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008162:	464b      	mov	r3, r9
 8008164:	eb4b 0303 	adc.w	r3, fp, r3
 8008168:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800816c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008178:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800817c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008180:	460b      	mov	r3, r1
 8008182:	18db      	adds	r3, r3, r3
 8008184:	643b      	str	r3, [r7, #64]	; 0x40
 8008186:	4613      	mov	r3, r2
 8008188:	eb42 0303 	adc.w	r3, r2, r3
 800818c:	647b      	str	r3, [r7, #68]	; 0x44
 800818e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008192:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008196:	f7f8 f883 	bl	80002a0 <__aeabi_uldivmod>
 800819a:	4602      	mov	r2, r0
 800819c:	460b      	mov	r3, r1
 800819e:	4611      	mov	r1, r2
 80081a0:	4b3b      	ldr	r3, [pc, #236]	; (8008290 <UART_SetConfig+0x2d4>)
 80081a2:	fba3 2301 	umull	r2, r3, r3, r1
 80081a6:	095b      	lsrs	r3, r3, #5
 80081a8:	2264      	movs	r2, #100	; 0x64
 80081aa:	fb02 f303 	mul.w	r3, r2, r3
 80081ae:	1acb      	subs	r3, r1, r3
 80081b0:	00db      	lsls	r3, r3, #3
 80081b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80081b6:	4b36      	ldr	r3, [pc, #216]	; (8008290 <UART_SetConfig+0x2d4>)
 80081b8:	fba3 2302 	umull	r2, r3, r3, r2
 80081bc:	095b      	lsrs	r3, r3, #5
 80081be:	005b      	lsls	r3, r3, #1
 80081c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80081c4:	441c      	add	r4, r3
 80081c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081ca:	2200      	movs	r2, #0
 80081cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80081d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80081d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80081d8:	4642      	mov	r2, r8
 80081da:	464b      	mov	r3, r9
 80081dc:	1891      	adds	r1, r2, r2
 80081de:	63b9      	str	r1, [r7, #56]	; 0x38
 80081e0:	415b      	adcs	r3, r3
 80081e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80081e8:	4641      	mov	r1, r8
 80081ea:	1851      	adds	r1, r2, r1
 80081ec:	6339      	str	r1, [r7, #48]	; 0x30
 80081ee:	4649      	mov	r1, r9
 80081f0:	414b      	adcs	r3, r1
 80081f2:	637b      	str	r3, [r7, #52]	; 0x34
 80081f4:	f04f 0200 	mov.w	r2, #0
 80081f8:	f04f 0300 	mov.w	r3, #0
 80081fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008200:	4659      	mov	r1, fp
 8008202:	00cb      	lsls	r3, r1, #3
 8008204:	4651      	mov	r1, sl
 8008206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800820a:	4651      	mov	r1, sl
 800820c:	00ca      	lsls	r2, r1, #3
 800820e:	4610      	mov	r0, r2
 8008210:	4619      	mov	r1, r3
 8008212:	4603      	mov	r3, r0
 8008214:	4642      	mov	r2, r8
 8008216:	189b      	adds	r3, r3, r2
 8008218:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800821c:	464b      	mov	r3, r9
 800821e:	460a      	mov	r2, r1
 8008220:	eb42 0303 	adc.w	r3, r2, r3
 8008224:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008234:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008238:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800823c:	460b      	mov	r3, r1
 800823e:	18db      	adds	r3, r3, r3
 8008240:	62bb      	str	r3, [r7, #40]	; 0x28
 8008242:	4613      	mov	r3, r2
 8008244:	eb42 0303 	adc.w	r3, r2, r3
 8008248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800824a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800824e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008252:	f7f8 f825 	bl	80002a0 <__aeabi_uldivmod>
 8008256:	4602      	mov	r2, r0
 8008258:	460b      	mov	r3, r1
 800825a:	4b0d      	ldr	r3, [pc, #52]	; (8008290 <UART_SetConfig+0x2d4>)
 800825c:	fba3 1302 	umull	r1, r3, r3, r2
 8008260:	095b      	lsrs	r3, r3, #5
 8008262:	2164      	movs	r1, #100	; 0x64
 8008264:	fb01 f303 	mul.w	r3, r1, r3
 8008268:	1ad3      	subs	r3, r2, r3
 800826a:	00db      	lsls	r3, r3, #3
 800826c:	3332      	adds	r3, #50	; 0x32
 800826e:	4a08      	ldr	r2, [pc, #32]	; (8008290 <UART_SetConfig+0x2d4>)
 8008270:	fba2 2303 	umull	r2, r3, r2, r3
 8008274:	095b      	lsrs	r3, r3, #5
 8008276:	f003 0207 	and.w	r2, r3, #7
 800827a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4422      	add	r2, r4
 8008282:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008284:	e105      	b.n	8008492 <UART_SetConfig+0x4d6>
 8008286:	bf00      	nop
 8008288:	40011000 	.word	0x40011000
 800828c:	40011400 	.word	0x40011400
 8008290:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008294:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008298:	2200      	movs	r2, #0
 800829a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800829e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80082a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80082a6:	4642      	mov	r2, r8
 80082a8:	464b      	mov	r3, r9
 80082aa:	1891      	adds	r1, r2, r2
 80082ac:	6239      	str	r1, [r7, #32]
 80082ae:	415b      	adcs	r3, r3
 80082b0:	627b      	str	r3, [r7, #36]	; 0x24
 80082b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80082b6:	4641      	mov	r1, r8
 80082b8:	1854      	adds	r4, r2, r1
 80082ba:	4649      	mov	r1, r9
 80082bc:	eb43 0501 	adc.w	r5, r3, r1
 80082c0:	f04f 0200 	mov.w	r2, #0
 80082c4:	f04f 0300 	mov.w	r3, #0
 80082c8:	00eb      	lsls	r3, r5, #3
 80082ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80082ce:	00e2      	lsls	r2, r4, #3
 80082d0:	4614      	mov	r4, r2
 80082d2:	461d      	mov	r5, r3
 80082d4:	4643      	mov	r3, r8
 80082d6:	18e3      	adds	r3, r4, r3
 80082d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80082dc:	464b      	mov	r3, r9
 80082de:	eb45 0303 	adc.w	r3, r5, r3
 80082e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80082e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80082f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80082f6:	f04f 0200 	mov.w	r2, #0
 80082fa:	f04f 0300 	mov.w	r3, #0
 80082fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008302:	4629      	mov	r1, r5
 8008304:	008b      	lsls	r3, r1, #2
 8008306:	4621      	mov	r1, r4
 8008308:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800830c:	4621      	mov	r1, r4
 800830e:	008a      	lsls	r2, r1, #2
 8008310:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008314:	f7f7 ffc4 	bl	80002a0 <__aeabi_uldivmod>
 8008318:	4602      	mov	r2, r0
 800831a:	460b      	mov	r3, r1
 800831c:	4b60      	ldr	r3, [pc, #384]	; (80084a0 <UART_SetConfig+0x4e4>)
 800831e:	fba3 2302 	umull	r2, r3, r3, r2
 8008322:	095b      	lsrs	r3, r3, #5
 8008324:	011c      	lsls	r4, r3, #4
 8008326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800832a:	2200      	movs	r2, #0
 800832c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008330:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008334:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008338:	4642      	mov	r2, r8
 800833a:	464b      	mov	r3, r9
 800833c:	1891      	adds	r1, r2, r2
 800833e:	61b9      	str	r1, [r7, #24]
 8008340:	415b      	adcs	r3, r3
 8008342:	61fb      	str	r3, [r7, #28]
 8008344:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008348:	4641      	mov	r1, r8
 800834a:	1851      	adds	r1, r2, r1
 800834c:	6139      	str	r1, [r7, #16]
 800834e:	4649      	mov	r1, r9
 8008350:	414b      	adcs	r3, r1
 8008352:	617b      	str	r3, [r7, #20]
 8008354:	f04f 0200 	mov.w	r2, #0
 8008358:	f04f 0300 	mov.w	r3, #0
 800835c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008360:	4659      	mov	r1, fp
 8008362:	00cb      	lsls	r3, r1, #3
 8008364:	4651      	mov	r1, sl
 8008366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800836a:	4651      	mov	r1, sl
 800836c:	00ca      	lsls	r2, r1, #3
 800836e:	4610      	mov	r0, r2
 8008370:	4619      	mov	r1, r3
 8008372:	4603      	mov	r3, r0
 8008374:	4642      	mov	r2, r8
 8008376:	189b      	adds	r3, r3, r2
 8008378:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800837c:	464b      	mov	r3, r9
 800837e:	460a      	mov	r2, r1
 8008380:	eb42 0303 	adc.w	r3, r2, r3
 8008384:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	67bb      	str	r3, [r7, #120]	; 0x78
 8008392:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008394:	f04f 0200 	mov.w	r2, #0
 8008398:	f04f 0300 	mov.w	r3, #0
 800839c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80083a0:	4649      	mov	r1, r9
 80083a2:	008b      	lsls	r3, r1, #2
 80083a4:	4641      	mov	r1, r8
 80083a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083aa:	4641      	mov	r1, r8
 80083ac:	008a      	lsls	r2, r1, #2
 80083ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80083b2:	f7f7 ff75 	bl	80002a0 <__aeabi_uldivmod>
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	4b39      	ldr	r3, [pc, #228]	; (80084a0 <UART_SetConfig+0x4e4>)
 80083bc:	fba3 1302 	umull	r1, r3, r3, r2
 80083c0:	095b      	lsrs	r3, r3, #5
 80083c2:	2164      	movs	r1, #100	; 0x64
 80083c4:	fb01 f303 	mul.w	r3, r1, r3
 80083c8:	1ad3      	subs	r3, r2, r3
 80083ca:	011b      	lsls	r3, r3, #4
 80083cc:	3332      	adds	r3, #50	; 0x32
 80083ce:	4a34      	ldr	r2, [pc, #208]	; (80084a0 <UART_SetConfig+0x4e4>)
 80083d0:	fba2 2303 	umull	r2, r3, r2, r3
 80083d4:	095b      	lsrs	r3, r3, #5
 80083d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083da:	441c      	add	r4, r3
 80083dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083e0:	2200      	movs	r2, #0
 80083e2:	673b      	str	r3, [r7, #112]	; 0x70
 80083e4:	677a      	str	r2, [r7, #116]	; 0x74
 80083e6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80083ea:	4642      	mov	r2, r8
 80083ec:	464b      	mov	r3, r9
 80083ee:	1891      	adds	r1, r2, r2
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	415b      	adcs	r3, r3
 80083f4:	60fb      	str	r3, [r7, #12]
 80083f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80083fa:	4641      	mov	r1, r8
 80083fc:	1851      	adds	r1, r2, r1
 80083fe:	6039      	str	r1, [r7, #0]
 8008400:	4649      	mov	r1, r9
 8008402:	414b      	adcs	r3, r1
 8008404:	607b      	str	r3, [r7, #4]
 8008406:	f04f 0200 	mov.w	r2, #0
 800840a:	f04f 0300 	mov.w	r3, #0
 800840e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008412:	4659      	mov	r1, fp
 8008414:	00cb      	lsls	r3, r1, #3
 8008416:	4651      	mov	r1, sl
 8008418:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800841c:	4651      	mov	r1, sl
 800841e:	00ca      	lsls	r2, r1, #3
 8008420:	4610      	mov	r0, r2
 8008422:	4619      	mov	r1, r3
 8008424:	4603      	mov	r3, r0
 8008426:	4642      	mov	r2, r8
 8008428:	189b      	adds	r3, r3, r2
 800842a:	66bb      	str	r3, [r7, #104]	; 0x68
 800842c:	464b      	mov	r3, r9
 800842e:	460a      	mov	r2, r1
 8008430:	eb42 0303 	adc.w	r3, r2, r3
 8008434:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	663b      	str	r3, [r7, #96]	; 0x60
 8008440:	667a      	str	r2, [r7, #100]	; 0x64
 8008442:	f04f 0200 	mov.w	r2, #0
 8008446:	f04f 0300 	mov.w	r3, #0
 800844a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800844e:	4649      	mov	r1, r9
 8008450:	008b      	lsls	r3, r1, #2
 8008452:	4641      	mov	r1, r8
 8008454:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008458:	4641      	mov	r1, r8
 800845a:	008a      	lsls	r2, r1, #2
 800845c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008460:	f7f7 ff1e 	bl	80002a0 <__aeabi_uldivmod>
 8008464:	4602      	mov	r2, r0
 8008466:	460b      	mov	r3, r1
 8008468:	4b0d      	ldr	r3, [pc, #52]	; (80084a0 <UART_SetConfig+0x4e4>)
 800846a:	fba3 1302 	umull	r1, r3, r3, r2
 800846e:	095b      	lsrs	r3, r3, #5
 8008470:	2164      	movs	r1, #100	; 0x64
 8008472:	fb01 f303 	mul.w	r3, r1, r3
 8008476:	1ad3      	subs	r3, r2, r3
 8008478:	011b      	lsls	r3, r3, #4
 800847a:	3332      	adds	r3, #50	; 0x32
 800847c:	4a08      	ldr	r2, [pc, #32]	; (80084a0 <UART_SetConfig+0x4e4>)
 800847e:	fba2 2303 	umull	r2, r3, r2, r3
 8008482:	095b      	lsrs	r3, r3, #5
 8008484:	f003 020f 	and.w	r2, r3, #15
 8008488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4422      	add	r2, r4
 8008490:	609a      	str	r2, [r3, #8]
}
 8008492:	bf00      	nop
 8008494:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008498:	46bd      	mov	sp, r7
 800849a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800849e:	bf00      	nop
 80084a0:	51eb851f 	.word	0x51eb851f

080084a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80084a4:	b084      	sub	sp, #16
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b084      	sub	sp, #16
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
 80084ae:	f107 001c 	add.w	r0, r7, #28
 80084b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80084b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d122      	bne.n	8008502 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80084d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80084e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d105      	bne.n	80084f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 f9c0 	bl	800887c <USB_CoreReset>
 80084fc:	4603      	mov	r3, r0
 80084fe:	73fb      	strb	r3, [r7, #15]
 8008500:	e01a      	b.n	8008538 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f9b4 	bl	800887c <USB_CoreReset>
 8008514:	4603      	mov	r3, r0
 8008516:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800851a:	2b00      	cmp	r3, #0
 800851c:	d106      	bne.n	800852c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008522:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	639a      	str	r2, [r3, #56]	; 0x38
 800852a:	e005      	b.n	8008538 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008530:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853a:	2b01      	cmp	r3, #1
 800853c:	d10b      	bne.n	8008556 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	f043 0206 	orr.w	r2, r3, #6
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	f043 0220 	orr.w	r2, r3, #32
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008556:	7bfb      	ldrb	r3, [r7, #15]
}
 8008558:	4618      	mov	r0, r3
 800855a:	3710      	adds	r7, #16
 800855c:	46bd      	mov	sp, r7
 800855e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008562:	b004      	add	sp, #16
 8008564:	4770      	bx	lr

08008566 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008566:	b480      	push	{r7}
 8008568:	b083      	sub	sp, #12
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	f043 0201 	orr.w	r2, r3, #1
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	f023 0201 	bic.w	r2, r3, #1
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	370c      	adds	r7, #12
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr

080085aa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b084      	sub	sp, #16
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
 80085b2:	460b      	mov	r3, r1
 80085b4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80085b6:	2300      	movs	r3, #0
 80085b8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80085c6:	78fb      	ldrb	r3, [r7, #3]
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d115      	bne.n	80085f8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80085d8:	2001      	movs	r0, #1
 80085da:	f7fa f997 	bl	800290c <HAL_Delay>
      ms++;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	3301      	adds	r3, #1
 80085e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 f93a 	bl	800885e <USB_GetMode>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d01e      	beq.n	800862e <USB_SetCurrentMode+0x84>
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2b31      	cmp	r3, #49	; 0x31
 80085f4:	d9f0      	bls.n	80085d8 <USB_SetCurrentMode+0x2e>
 80085f6:	e01a      	b.n	800862e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80085f8:	78fb      	ldrb	r3, [r7, #3]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d115      	bne.n	800862a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800860a:	2001      	movs	r0, #1
 800860c:	f7fa f97e 	bl	800290c <HAL_Delay>
      ms++;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	3301      	adds	r3, #1
 8008614:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f921 	bl	800885e <USB_GetMode>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d005      	beq.n	800862e <USB_SetCurrentMode+0x84>
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2b31      	cmp	r3, #49	; 0x31
 8008626:	d9f0      	bls.n	800860a <USB_SetCurrentMode+0x60>
 8008628:	e001      	b.n	800862e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	e005      	b.n	800863a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2b32      	cmp	r3, #50	; 0x32
 8008632:	d101      	bne.n	8008638 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	e000      	b.n	800863a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
	...

08008644 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800864e:	2300      	movs	r3, #0
 8008650:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	3301      	adds	r3, #1
 8008656:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	4a13      	ldr	r2, [pc, #76]	; (80086a8 <USB_FlushTxFifo+0x64>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d901      	bls.n	8008664 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008660:	2303      	movs	r3, #3
 8008662:	e01b      	b.n	800869c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	2b00      	cmp	r3, #0
 800866a:	daf2      	bge.n	8008652 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800866c:	2300      	movs	r3, #0
 800866e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	019b      	lsls	r3, r3, #6
 8008674:	f043 0220 	orr.w	r2, r3, #32
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	3301      	adds	r3, #1
 8008680:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	4a08      	ldr	r2, [pc, #32]	; (80086a8 <USB_FlushTxFifo+0x64>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d901      	bls.n	800868e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800868a:	2303      	movs	r3, #3
 800868c:	e006      	b.n	800869c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	f003 0320 	and.w	r3, r3, #32
 8008696:	2b20      	cmp	r3, #32
 8008698:	d0f0      	beq.n	800867c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3714      	adds	r7, #20
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr
 80086a8:	00030d40 	.word	0x00030d40

080086ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086b4:	2300      	movs	r3, #0
 80086b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	3301      	adds	r3, #1
 80086bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	4a11      	ldr	r2, [pc, #68]	; (8008708 <USB_FlushRxFifo+0x5c>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d901      	bls.n	80086ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80086c6:	2303      	movs	r3, #3
 80086c8:	e018      	b.n	80086fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	691b      	ldr	r3, [r3, #16]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	daf2      	bge.n	80086b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80086d2:	2300      	movs	r3, #0
 80086d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2210      	movs	r2, #16
 80086da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	3301      	adds	r3, #1
 80086e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	4a08      	ldr	r2, [pc, #32]	; (8008708 <USB_FlushRxFifo+0x5c>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d901      	bls.n	80086ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80086ea:	2303      	movs	r3, #3
 80086ec:	e006      	b.n	80086fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	f003 0310 	and.w	r3, r3, #16
 80086f6:	2b10      	cmp	r3, #16
 80086f8:	d0f0      	beq.n	80086dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3714      	adds	r7, #20
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr
 8008708:	00030d40 	.word	0x00030d40

0800870c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800870c:	b480      	push	{r7}
 800870e:	b089      	sub	sp, #36	; 0x24
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	4611      	mov	r1, r2
 8008718:	461a      	mov	r2, r3
 800871a:	460b      	mov	r3, r1
 800871c:	71fb      	strb	r3, [r7, #7]
 800871e:	4613      	mov	r3, r2
 8008720:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800872a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800872e:	2b00      	cmp	r3, #0
 8008730:	d123      	bne.n	800877a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008732:	88bb      	ldrh	r3, [r7, #4]
 8008734:	3303      	adds	r3, #3
 8008736:	089b      	lsrs	r3, r3, #2
 8008738:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800873a:	2300      	movs	r3, #0
 800873c:	61bb      	str	r3, [r7, #24]
 800873e:	e018      	b.n	8008772 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008740:	79fb      	ldrb	r3, [r7, #7]
 8008742:	031a      	lsls	r2, r3, #12
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	4413      	add	r3, r2
 8008748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800874c:	461a      	mov	r2, r3
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	3301      	adds	r3, #1
 8008758:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	3301      	adds	r3, #1
 800875e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	3301      	adds	r3, #1
 8008764:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	3301      	adds	r3, #1
 800876a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	3301      	adds	r3, #1
 8008770:	61bb      	str	r3, [r7, #24]
 8008772:	69ba      	ldr	r2, [r7, #24]
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	429a      	cmp	r2, r3
 8008778:	d3e2      	bcc.n	8008740 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	3724      	adds	r7, #36	; 0x24
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008788:	b480      	push	{r7}
 800878a:	b08b      	sub	sp, #44	; 0x2c
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	4613      	mov	r3, r2
 8008794:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800879e:	88fb      	ldrh	r3, [r7, #6]
 80087a0:	089b      	lsrs	r3, r3, #2
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80087a6:	88fb      	ldrh	r3, [r7, #6]
 80087a8:	f003 0303 	and.w	r3, r3, #3
 80087ac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80087ae:	2300      	movs	r3, #0
 80087b0:	623b      	str	r3, [r7, #32]
 80087b2:	e014      	b.n	80087de <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087be:	601a      	str	r2, [r3, #0]
    pDest++;
 80087c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c2:	3301      	adds	r3, #1
 80087c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80087c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c8:	3301      	adds	r3, #1
 80087ca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80087cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ce:	3301      	adds	r3, #1
 80087d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80087d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d4:	3301      	adds	r3, #1
 80087d6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80087d8:	6a3b      	ldr	r3, [r7, #32]
 80087da:	3301      	adds	r3, #1
 80087dc:	623b      	str	r3, [r7, #32]
 80087de:	6a3a      	ldr	r2, [r7, #32]
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d3e6      	bcc.n	80087b4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80087e6:	8bfb      	ldrh	r3, [r7, #30]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d01e      	beq.n	800882a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80087ec:	2300      	movs	r3, #0
 80087ee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087f6:	461a      	mov	r2, r3
 80087f8:	f107 0310 	add.w	r3, r7, #16
 80087fc:	6812      	ldr	r2, [r2, #0]
 80087fe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008800:	693a      	ldr	r2, [r7, #16]
 8008802:	6a3b      	ldr	r3, [r7, #32]
 8008804:	b2db      	uxtb	r3, r3
 8008806:	00db      	lsls	r3, r3, #3
 8008808:	fa22 f303 	lsr.w	r3, r2, r3
 800880c:	b2da      	uxtb	r2, r3
 800880e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008810:	701a      	strb	r2, [r3, #0]
      i++;
 8008812:	6a3b      	ldr	r3, [r7, #32]
 8008814:	3301      	adds	r3, #1
 8008816:	623b      	str	r3, [r7, #32]
      pDest++;
 8008818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881a:	3301      	adds	r3, #1
 800881c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800881e:	8bfb      	ldrh	r3, [r7, #30]
 8008820:	3b01      	subs	r3, #1
 8008822:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008824:	8bfb      	ldrh	r3, [r7, #30]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1ea      	bne.n	8008800 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800882a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800882c:	4618      	mov	r0, r3
 800882e:	372c      	adds	r7, #44	; 0x2c
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	695b      	ldr	r3, [r3, #20]
 8008844:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	4013      	ands	r3, r2
 800884e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008850:	68fb      	ldr	r3, [r7, #12]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3714      	adds	r7, #20
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr

0800885e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800885e:	b480      	push	{r7}
 8008860:	b083      	sub	sp, #12
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	695b      	ldr	r3, [r3, #20]
 800886a:	f003 0301 	and.w	r3, r3, #1
}
 800886e:	4618      	mov	r0, r3
 8008870:	370c      	adds	r7, #12
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr
	...

0800887c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800887c:	b480      	push	{r7}
 800887e:	b085      	sub	sp, #20
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008884:	2300      	movs	r3, #0
 8008886:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	3301      	adds	r3, #1
 800888c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	4a13      	ldr	r2, [pc, #76]	; (80088e0 <USB_CoreReset+0x64>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d901      	bls.n	800889a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	e01b      	b.n	80088d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	691b      	ldr	r3, [r3, #16]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	daf2      	bge.n	8008888 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80088a2:	2300      	movs	r3, #0
 80088a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	691b      	ldr	r3, [r3, #16]
 80088aa:	f043 0201 	orr.w	r2, r3, #1
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	3301      	adds	r3, #1
 80088b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	4a09      	ldr	r2, [pc, #36]	; (80088e0 <USB_CoreReset+0x64>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d901      	bls.n	80088c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80088c0:	2303      	movs	r3, #3
 80088c2:	e006      	b.n	80088d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	f003 0301 	and.w	r3, r3, #1
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d0f0      	beq.n	80088b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3714      	adds	r7, #20
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	00030d40 	.word	0x00030d40

080088e4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80088e4:	b084      	sub	sp, #16
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b086      	sub	sp, #24
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
 80088ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80088f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80088f6:	2300      	movs	r3, #0
 80088f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008904:	461a      	mov	r2, r3
 8008906:	2300      	movs	r3, #0
 8008908:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800891a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008926:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008936:	2b00      	cmp	r3, #0
 8008938:	d018      	beq.n	800896c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800893a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893c:	2b01      	cmp	r3, #1
 800893e:	d10a      	bne.n	8008956 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800894e:	f043 0304 	orr.w	r3, r3, #4
 8008952:	6013      	str	r3, [r2, #0]
 8008954:	e014      	b.n	8008980 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	68fa      	ldr	r2, [r7, #12]
 8008960:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008964:	f023 0304 	bic.w	r3, r3, #4
 8008968:	6013      	str	r3, [r2, #0]
 800896a:	e009      	b.n	8008980 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800897a:	f023 0304 	bic.w	r3, r3, #4
 800897e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008980:	2110      	movs	r1, #16
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f7ff fe5e 	bl	8008644 <USB_FlushTxFifo>
 8008988:	4603      	mov	r3, r0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d001      	beq.n	8008992 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f7ff fe8a 	bl	80086ac <USB_FlushRxFifo>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d001      	beq.n	80089a2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80089a2:	2300      	movs	r3, #0
 80089a4:	613b      	str	r3, [r7, #16]
 80089a6:	e015      	b.n	80089d4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	015a      	lsls	r2, r3, #5
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	4413      	add	r3, r2
 80089b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089b4:	461a      	mov	r2, r3
 80089b6:	f04f 33ff 	mov.w	r3, #4294967295
 80089ba:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	015a      	lsls	r2, r3, #5
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	4413      	add	r3, r2
 80089c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089c8:	461a      	mov	r2, r3
 80089ca:	2300      	movs	r3, #0
 80089cc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	3301      	adds	r3, #1
 80089d2:	613b      	str	r3, [r7, #16]
 80089d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d6:	693a      	ldr	r2, [r7, #16]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d3e5      	bcc.n	80089a8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f04f 32ff 	mov.w	r2, #4294967295
 80089e8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00b      	beq.n	8008a0e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089fc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a13      	ldr	r2, [pc, #76]	; (8008a50 <USB_HostInit+0x16c>)
 8008a02:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a13      	ldr	r2, [pc, #76]	; (8008a54 <USB_HostInit+0x170>)
 8008a08:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008a0c:	e009      	b.n	8008a22 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2280      	movs	r2, #128	; 0x80
 8008a12:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a10      	ldr	r2, [pc, #64]	; (8008a58 <USB_HostInit+0x174>)
 8008a18:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4a0f      	ldr	r2, [pc, #60]	; (8008a5c <USB_HostInit+0x178>)
 8008a1e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d105      	bne.n	8008a34 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	699b      	ldr	r3, [r3, #24]
 8008a2c:	f043 0210 	orr.w	r2, r3, #16
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	699a      	ldr	r2, [r3, #24]
 8008a38:	4b09      	ldr	r3, [pc, #36]	; (8008a60 <USB_HostInit+0x17c>)
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3718      	adds	r7, #24
 8008a46:	46bd      	mov	sp, r7
 8008a48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a4c:	b004      	add	sp, #16
 8008a4e:	4770      	bx	lr
 8008a50:	01000200 	.word	0x01000200
 8008a54:	00e00300 	.word	0x00e00300
 8008a58:	00600080 	.word	0x00600080
 8008a5c:	004000e0 	.word	0x004000e0
 8008a60:	a3200008 	.word	0xa3200008

08008a64 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a82:	f023 0303 	bic.w	r3, r3, #3
 8008a86:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	78fb      	ldrb	r3, [r7, #3]
 8008a92:	f003 0303 	and.w	r3, r3, #3
 8008a96:	68f9      	ldr	r1, [r7, #12]
 8008a98:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008aa0:	78fb      	ldrb	r3, [r7, #3]
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d107      	bne.n	8008ab6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008aac:	461a      	mov	r2, r3
 8008aae:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008ab2:	6053      	str	r3, [r2, #4]
 8008ab4:	e009      	b.n	8008aca <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008ab6:	78fb      	ldrb	r3, [r7, #3]
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d106      	bne.n	8008aca <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	f241 7370 	movw	r3, #6000	; 0x1770
 8008ac8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008aca:	2300      	movs	r3, #0
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3714      	adds	r7, #20
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008af8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b06:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008b08:	2064      	movs	r0, #100	; 0x64
 8008b0a:	f7f9 feff 	bl	800290c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008b16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b1a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008b1c:	200a      	movs	r0, #10
 8008b1e:	f7f9 fef5 	bl	800290c <HAL_Delay>

  return HAL_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	460b      	mov	r3, r1
 8008b36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008b50:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d109      	bne.n	8008b70 <USB_DriveVbus+0x44>
 8008b5c:	78fb      	ldrb	r3, [r7, #3]
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d106      	bne.n	8008b70 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	68fa      	ldr	r2, [r7, #12]
 8008b66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008b6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b6e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b7a:	d109      	bne.n	8008b90 <USB_DriveVbus+0x64>
 8008b7c:	78fb      	ldrb	r3, [r7, #3]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d106      	bne.n	8008b90 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008b8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b8e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3714      	adds	r7, #20
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr

08008b9e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008b9e:	b480      	push	{r7}
 8008ba0:	b085      	sub	sp, #20
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008baa:	2300      	movs	r3, #0
 8008bac:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	0c5b      	lsrs	r3, r3, #17
 8008bbc:	f003 0303 	and.w	r3, r3, #3
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3714      	adds	r7, #20
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b085      	sub	sp, #20
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	b29b      	uxth	r3, r3
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3714      	adds	r7, #20
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr
	...

08008bf0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b088      	sub	sp, #32
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	4608      	mov	r0, r1
 8008bfa:	4611      	mov	r1, r2
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	4603      	mov	r3, r0
 8008c00:	70fb      	strb	r3, [r7, #3]
 8008c02:	460b      	mov	r3, r1
 8008c04:	70bb      	strb	r3, [r7, #2]
 8008c06:	4613      	mov	r3, r2
 8008c08:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008c12:	78fb      	ldrb	r3, [r7, #3]
 8008c14:	015a      	lsls	r2, r3, #5
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	4413      	add	r3, r2
 8008c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c1e:	461a      	mov	r2, r3
 8008c20:	f04f 33ff 	mov.w	r3, #4294967295
 8008c24:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008c26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008c2a:	2b03      	cmp	r3, #3
 8008c2c:	d87e      	bhi.n	8008d2c <USB_HC_Init+0x13c>
 8008c2e:	a201      	add	r2, pc, #4	; (adr r2, 8008c34 <USB_HC_Init+0x44>)
 8008c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c34:	08008c45 	.word	0x08008c45
 8008c38:	08008cef 	.word	0x08008cef
 8008c3c:	08008c45 	.word	0x08008c45
 8008c40:	08008cb1 	.word	0x08008cb1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008c44:	78fb      	ldrb	r3, [r7, #3]
 8008c46:	015a      	lsls	r2, r3, #5
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c50:	461a      	mov	r2, r3
 8008c52:	f240 439d 	movw	r3, #1181	; 0x49d
 8008c56:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008c58:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	da10      	bge.n	8008c82 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008c60:	78fb      	ldrb	r3, [r7, #3]
 8008c62:	015a      	lsls	r2, r3, #5
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	4413      	add	r3, r2
 8008c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	78fa      	ldrb	r2, [r7, #3]
 8008c70:	0151      	lsls	r1, r2, #5
 8008c72:	693a      	ldr	r2, [r7, #16]
 8008c74:	440a      	add	r2, r1
 8008c76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c7e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008c80:	e057      	b.n	8008d32 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d051      	beq.n	8008d32 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008c8e:	78fb      	ldrb	r3, [r7, #3]
 8008c90:	015a      	lsls	r2, r3, #5
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	4413      	add	r3, r2
 8008c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	78fa      	ldrb	r2, [r7, #3]
 8008c9e:	0151      	lsls	r1, r2, #5
 8008ca0:	693a      	ldr	r2, [r7, #16]
 8008ca2:	440a      	add	r2, r1
 8008ca4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ca8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008cac:	60d3      	str	r3, [r2, #12]
      break;
 8008cae:	e040      	b.n	8008d32 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008cb0:	78fb      	ldrb	r3, [r7, #3]
 8008cb2:	015a      	lsls	r2, r3, #5
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	f240 639d 	movw	r3, #1693	; 0x69d
 8008cc2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008cc4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	da34      	bge.n	8008d36 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008ccc:	78fb      	ldrb	r3, [r7, #3]
 8008cce:	015a      	lsls	r2, r3, #5
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	78fa      	ldrb	r2, [r7, #3]
 8008cdc:	0151      	lsls	r1, r2, #5
 8008cde:	693a      	ldr	r2, [r7, #16]
 8008ce0:	440a      	add	r2, r1
 8008ce2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cea:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008cec:	e023      	b.n	8008d36 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008cee:	78fb      	ldrb	r3, [r7, #3]
 8008cf0:	015a      	lsls	r2, r3, #5
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	f240 2325 	movw	r3, #549	; 0x225
 8008d00:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008d02:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	da17      	bge.n	8008d3a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008d0a:	78fb      	ldrb	r3, [r7, #3]
 8008d0c:	015a      	lsls	r2, r3, #5
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	4413      	add	r3, r2
 8008d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	78fa      	ldrb	r2, [r7, #3]
 8008d1a:	0151      	lsls	r1, r2, #5
 8008d1c:	693a      	ldr	r2, [r7, #16]
 8008d1e:	440a      	add	r2, r1
 8008d20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d24:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008d28:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008d2a:	e006      	b.n	8008d3a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	77fb      	strb	r3, [r7, #31]
      break;
 8008d30:	e004      	b.n	8008d3c <USB_HC_Init+0x14c>
      break;
 8008d32:	bf00      	nop
 8008d34:	e002      	b.n	8008d3c <USB_HC_Init+0x14c>
      break;
 8008d36:	bf00      	nop
 8008d38:	e000      	b.n	8008d3c <USB_HC_Init+0x14c>
      break;
 8008d3a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008d3c:	78fb      	ldrb	r3, [r7, #3]
 8008d3e:	015a      	lsls	r2, r3, #5
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	4413      	add	r3, r2
 8008d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	78fa      	ldrb	r2, [r7, #3]
 8008d4c:	0151      	lsls	r1, r2, #5
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	440a      	add	r2, r1
 8008d52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d56:	f043 0302 	orr.w	r3, r3, #2
 8008d5a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d62:	699a      	ldr	r2, [r3, #24]
 8008d64:	78fb      	ldrb	r3, [r7, #3]
 8008d66:	f003 030f 	and.w	r3, r3, #15
 8008d6a:	2101      	movs	r1, #1
 8008d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8008d70:	6939      	ldr	r1, [r7, #16]
 8008d72:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008d76:	4313      	orrs	r3, r2
 8008d78:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	699b      	ldr	r3, [r3, #24]
 8008d7e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008d86:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	da03      	bge.n	8008d96 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008d8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d92:	61bb      	str	r3, [r7, #24]
 8008d94:	e001      	b.n	8008d9a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8008d96:	2300      	movs	r3, #0
 8008d98:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f7ff feff 	bl	8008b9e <USB_GetHostSpeed>
 8008da0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008da2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d106      	bne.n	8008db8 <USB_HC_Init+0x1c8>
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2b02      	cmp	r3, #2
 8008dae:	d003      	beq.n	8008db8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008db0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008db4:	617b      	str	r3, [r7, #20]
 8008db6:	e001      	b.n	8008dbc <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008db8:	2300      	movs	r3, #0
 8008dba:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008dbc:	787b      	ldrb	r3, [r7, #1]
 8008dbe:	059b      	lsls	r3, r3, #22
 8008dc0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008dc4:	78bb      	ldrb	r3, [r7, #2]
 8008dc6:	02db      	lsls	r3, r3, #11
 8008dc8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008dcc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008dce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008dd2:	049b      	lsls	r3, r3, #18
 8008dd4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008dd8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008dda:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008ddc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008de0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008de2:	69bb      	ldr	r3, [r7, #24]
 8008de4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008de6:	78fb      	ldrb	r3, [r7, #3]
 8008de8:	0159      	lsls	r1, r3, #5
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	440b      	add	r3, r1
 8008dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008df2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008df8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008dfa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008dfe:	2b03      	cmp	r3, #3
 8008e00:	d003      	beq.n	8008e0a <USB_HC_Init+0x21a>
 8008e02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d10f      	bne.n	8008e2a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008e0a:	78fb      	ldrb	r3, [r7, #3]
 8008e0c:	015a      	lsls	r2, r3, #5
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	4413      	add	r3, r2
 8008e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	78fa      	ldrb	r2, [r7, #3]
 8008e1a:	0151      	lsls	r1, r2, #5
 8008e1c:	693a      	ldr	r2, [r7, #16]
 8008e1e:	440a      	add	r2, r1
 8008e20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e28:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008e2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3720      	adds	r7, #32
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b08c      	sub	sp, #48	; 0x30
 8008e38:	af02      	add	r7, sp, #8
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	4613      	mov	r3, r2
 8008e40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	785b      	ldrb	r3, [r3, #1]
 8008e4a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008e4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e50:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d02d      	beq.n	8008eba <USB_HC_StartXfer+0x86>
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	791b      	ldrb	r3, [r3, #4]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d129      	bne.n	8008eba <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008e66:	79fb      	ldrb	r3, [r7, #7]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d117      	bne.n	8008e9c <USB_HC_StartXfer+0x68>
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	79db      	ldrb	r3, [r3, #7]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d003      	beq.n	8008e7c <USB_HC_StartXfer+0x48>
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	79db      	ldrb	r3, [r3, #7]
 8008e78:	2b02      	cmp	r3, #2
 8008e7a:	d10f      	bne.n	8008e9c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	015a      	lsls	r2, r3, #5
 8008e80:	6a3b      	ldr	r3, [r7, #32]
 8008e82:	4413      	add	r3, r2
 8008e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	69fa      	ldr	r2, [r7, #28]
 8008e8c:	0151      	lsls	r1, r2, #5
 8008e8e:	6a3a      	ldr	r2, [r7, #32]
 8008e90:	440a      	add	r2, r1
 8008e92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e9a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008e9c:	79fb      	ldrb	r3, [r7, #7]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d10b      	bne.n	8008eba <USB_HC_StartXfer+0x86>
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	795b      	ldrb	r3, [r3, #5]
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d107      	bne.n	8008eba <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	785b      	ldrb	r3, [r3, #1]
 8008eae:	4619      	mov	r1, r3
 8008eb0:	68f8      	ldr	r0, [r7, #12]
 8008eb2:	f000 fa0f 	bl	80092d4 <USB_DoPing>
      return HAL_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	e0f8      	b.n	80090ac <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	695b      	ldr	r3, [r3, #20]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d018      	beq.n	8008ef4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	68ba      	ldr	r2, [r7, #8]
 8008ec8:	8912      	ldrh	r2, [r2, #8]
 8008eca:	4413      	add	r3, r2
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	68ba      	ldr	r2, [r7, #8]
 8008ed0:	8912      	ldrh	r2, [r2, #8]
 8008ed2:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ed6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008ed8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008eda:	8b7b      	ldrh	r3, [r7, #26]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d90b      	bls.n	8008ef8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008ee0:	8b7b      	ldrh	r3, [r7, #26]
 8008ee2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008ee4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008ee6:	68ba      	ldr	r2, [r7, #8]
 8008ee8:	8912      	ldrh	r2, [r2, #8]
 8008eea:	fb03 f202 	mul.w	r2, r3, r2
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	611a      	str	r2, [r3, #16]
 8008ef2:	e001      	b.n	8008ef8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	78db      	ldrb	r3, [r3, #3]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d007      	beq.n	8008f10 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008f00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f02:	68ba      	ldr	r2, [r7, #8]
 8008f04:	8912      	ldrh	r2, [r2, #8]
 8008f06:	fb03 f202 	mul.w	r2, r3, r2
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	611a      	str	r2, [r3, #16]
 8008f0e:	e003      	b.n	8008f18 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	695a      	ldr	r2, [r3, #20]
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	691b      	ldr	r3, [r3, #16]
 8008f1c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008f20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f22:	04d9      	lsls	r1, r3, #19
 8008f24:	4b63      	ldr	r3, [pc, #396]	; (80090b4 <USB_HC_StartXfer+0x280>)
 8008f26:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008f28:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	7a9b      	ldrb	r3, [r3, #10]
 8008f2e:	075b      	lsls	r3, r3, #29
 8008f30:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008f34:	69f9      	ldr	r1, [r7, #28]
 8008f36:	0148      	lsls	r0, r1, #5
 8008f38:	6a39      	ldr	r1, [r7, #32]
 8008f3a:	4401      	add	r1, r0
 8008f3c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008f40:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008f42:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008f44:	79fb      	ldrb	r3, [r7, #7]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d009      	beq.n	8008f5e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	68d9      	ldr	r1, [r3, #12]
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	015a      	lsls	r2, r3, #5
 8008f52:	6a3b      	ldr	r3, [r7, #32]
 8008f54:	4413      	add	r3, r2
 8008f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f5a:	460a      	mov	r2, r1
 8008f5c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008f5e:	6a3b      	ldr	r3, [r7, #32]
 8008f60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	f003 0301 	and.w	r3, r3, #1
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	bf0c      	ite	eq
 8008f6e:	2301      	moveq	r3, #1
 8008f70:	2300      	movne	r3, #0
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	015a      	lsls	r2, r3, #5
 8008f7a:	6a3b      	ldr	r3, [r7, #32]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	69fa      	ldr	r2, [r7, #28]
 8008f86:	0151      	lsls	r1, r2, #5
 8008f88:	6a3a      	ldr	r2, [r7, #32]
 8008f8a:	440a      	add	r2, r1
 8008f8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f90:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008f94:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	015a      	lsls	r2, r3, #5
 8008f9a:	6a3b      	ldr	r3, [r7, #32]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	7e7b      	ldrb	r3, [r7, #25]
 8008fa6:	075b      	lsls	r3, r3, #29
 8008fa8:	69f9      	ldr	r1, [r7, #28]
 8008faa:	0148      	lsls	r0, r1, #5
 8008fac:	6a39      	ldr	r1, [r7, #32]
 8008fae:	4401      	add	r1, r0
 8008fb0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	015a      	lsls	r2, r3, #5
 8008fbc:	6a3b      	ldr	r3, [r7, #32]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008fce:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	78db      	ldrb	r3, [r3, #3]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d004      	beq.n	8008fe2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fde:	613b      	str	r3, [r7, #16]
 8008fe0:	e003      	b.n	8008fea <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008fe8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ff0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	015a      	lsls	r2, r3, #5
 8008ff6:	6a3b      	ldr	r3, [r7, #32]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ffe:	461a      	mov	r2, r3
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009004:	79fb      	ldrb	r3, [r7, #7]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d001      	beq.n	800900e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800900a:	2300      	movs	r3, #0
 800900c:	e04e      	b.n	80090ac <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	78db      	ldrb	r3, [r3, #3]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d149      	bne.n	80090aa <USB_HC_StartXfer+0x276>
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	695b      	ldr	r3, [r3, #20]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d045      	beq.n	80090aa <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	79db      	ldrb	r3, [r3, #7]
 8009022:	2b03      	cmp	r3, #3
 8009024:	d830      	bhi.n	8009088 <USB_HC_StartXfer+0x254>
 8009026:	a201      	add	r2, pc, #4	; (adr r2, 800902c <USB_HC_StartXfer+0x1f8>)
 8009028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800902c:	0800903d 	.word	0x0800903d
 8009030:	08009061 	.word	0x08009061
 8009034:	0800903d 	.word	0x0800903d
 8009038:	08009061 	.word	0x08009061
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	695b      	ldr	r3, [r3, #20]
 8009040:	3303      	adds	r3, #3
 8009042:	089b      	lsrs	r3, r3, #2
 8009044:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009046:	8afa      	ldrh	r2, [r7, #22]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904c:	b29b      	uxth	r3, r3
 800904e:	429a      	cmp	r2, r3
 8009050:	d91c      	bls.n	800908c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	699b      	ldr	r3, [r3, #24]
 8009056:	f043 0220 	orr.w	r2, r3, #32
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	619a      	str	r2, [r3, #24]
        }
        break;
 800905e:	e015      	b.n	800908c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	695b      	ldr	r3, [r3, #20]
 8009064:	3303      	adds	r3, #3
 8009066:	089b      	lsrs	r3, r3, #2
 8009068:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800906a:	8afa      	ldrh	r2, [r7, #22]
 800906c:	6a3b      	ldr	r3, [r7, #32]
 800906e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009072:	691b      	ldr	r3, [r3, #16]
 8009074:	b29b      	uxth	r3, r3
 8009076:	429a      	cmp	r2, r3
 8009078:	d90a      	bls.n	8009090 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	699b      	ldr	r3, [r3, #24]
 800907e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	619a      	str	r2, [r3, #24]
        }
        break;
 8009086:	e003      	b.n	8009090 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009088:	bf00      	nop
 800908a:	e002      	b.n	8009092 <USB_HC_StartXfer+0x25e>
        break;
 800908c:	bf00      	nop
 800908e:	e000      	b.n	8009092 <USB_HC_StartXfer+0x25e>
        break;
 8009090:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	68d9      	ldr	r1, [r3, #12]
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	785a      	ldrb	r2, [r3, #1]
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	695b      	ldr	r3, [r3, #20]
 800909e:	b29b      	uxth	r3, r3
 80090a0:	2000      	movs	r0, #0
 80090a2:	9000      	str	r0, [sp, #0]
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f7ff fb31 	bl	800870c <USB_WritePacket>
  }

  return HAL_OK;
 80090aa:	2300      	movs	r3, #0
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3728      	adds	r7, #40	; 0x28
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}
 80090b4:	1ff80000 	.word	0x1ff80000

080090b8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b085      	sub	sp, #20
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090ca:	695b      	ldr	r3, [r3, #20]
 80090cc:	b29b      	uxth	r3, r3
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3714      	adds	r7, #20
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr

080090da <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80090da:	b480      	push	{r7}
 80090dc:	b089      	sub	sp, #36	; 0x24
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
 80090e2:	460b      	mov	r3, r1
 80090e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80090ea:	78fb      	ldrb	r3, [r7, #3]
 80090ec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80090ee:	2300      	movs	r3, #0
 80090f0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	015a      	lsls	r2, r3, #5
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	4413      	add	r3, r2
 80090fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	0c9b      	lsrs	r3, r3, #18
 8009102:	f003 0303 	and.w	r3, r3, #3
 8009106:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	015a      	lsls	r2, r3, #5
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	4413      	add	r3, r2
 8009110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	0fdb      	lsrs	r3, r3, #31
 8009118:	f003 0301 	and.w	r3, r3, #1
 800911c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	f003 0320 	and.w	r3, r3, #32
 8009126:	2b20      	cmp	r3, #32
 8009128:	d104      	bne.n	8009134 <USB_HC_Halt+0x5a>
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d101      	bne.n	8009134 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009130:	2300      	movs	r3, #0
 8009132:	e0c8      	b.n	80092c6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d002      	beq.n	8009140 <USB_HC_Halt+0x66>
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	2b02      	cmp	r3, #2
 800913e:	d163      	bne.n	8009208 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	015a      	lsls	r2, r3, #5
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	4413      	add	r3, r2
 8009148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	69ba      	ldr	r2, [r7, #24]
 8009150:	0151      	lsls	r1, r2, #5
 8009152:	69fa      	ldr	r2, [r7, #28]
 8009154:	440a      	add	r2, r1
 8009156:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800915a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800915e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	f003 0320 	and.w	r3, r3, #32
 8009168:	2b00      	cmp	r3, #0
 800916a:	f040 80ab 	bne.w	80092c4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009172:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009176:	2b00      	cmp	r3, #0
 8009178:	d133      	bne.n	80091e2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	015a      	lsls	r2, r3, #5
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	4413      	add	r3, r2
 8009182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	69ba      	ldr	r2, [r7, #24]
 800918a:	0151      	lsls	r1, r2, #5
 800918c:	69fa      	ldr	r2, [r7, #28]
 800918e:	440a      	add	r2, r1
 8009190:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009194:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009198:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	015a      	lsls	r2, r3, #5
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	4413      	add	r3, r2
 80091a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	69ba      	ldr	r2, [r7, #24]
 80091aa:	0151      	lsls	r1, r2, #5
 80091ac:	69fa      	ldr	r2, [r7, #28]
 80091ae:	440a      	add	r2, r1
 80091b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80091b8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	3301      	adds	r3, #1
 80091be:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091c6:	d81d      	bhi.n	8009204 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	015a      	lsls	r2, r3, #5
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	4413      	add	r3, r2
 80091d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091de:	d0ec      	beq.n	80091ba <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80091e0:	e070      	b.n	80092c4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	015a      	lsls	r2, r3, #5
 80091e6:	69fb      	ldr	r3, [r7, #28]
 80091e8:	4413      	add	r3, r2
 80091ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	69ba      	ldr	r2, [r7, #24]
 80091f2:	0151      	lsls	r1, r2, #5
 80091f4:	69fa      	ldr	r2, [r7, #28]
 80091f6:	440a      	add	r2, r1
 80091f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009200:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009202:	e05f      	b.n	80092c4 <USB_HC_Halt+0x1ea>
            break;
 8009204:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009206:	e05d      	b.n	80092c4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009208:	69bb      	ldr	r3, [r7, #24]
 800920a:	015a      	lsls	r2, r3, #5
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	4413      	add	r3, r2
 8009210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	69ba      	ldr	r2, [r7, #24]
 8009218:	0151      	lsls	r1, r2, #5
 800921a:	69fa      	ldr	r2, [r7, #28]
 800921c:	440a      	add	r2, r1
 800921e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009222:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009226:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800922e:	691b      	ldr	r3, [r3, #16]
 8009230:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009234:	2b00      	cmp	r3, #0
 8009236:	d133      	bne.n	80092a0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	015a      	lsls	r2, r3, #5
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	4413      	add	r3, r2
 8009240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	69ba      	ldr	r2, [r7, #24]
 8009248:	0151      	lsls	r1, r2, #5
 800924a:	69fa      	ldr	r2, [r7, #28]
 800924c:	440a      	add	r2, r1
 800924e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009252:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009256:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	015a      	lsls	r2, r3, #5
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	4413      	add	r3, r2
 8009260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	69ba      	ldr	r2, [r7, #24]
 8009268:	0151      	lsls	r1, r2, #5
 800926a:	69fa      	ldr	r2, [r7, #28]
 800926c:	440a      	add	r2, r1
 800926e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009272:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009276:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	3301      	adds	r3, #1
 800927c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009284:	d81d      	bhi.n	80092c2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	015a      	lsls	r2, r3, #5
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	4413      	add	r3, r2
 800928e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009298:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800929c:	d0ec      	beq.n	8009278 <USB_HC_Halt+0x19e>
 800929e:	e011      	b.n	80092c4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80092a0:	69bb      	ldr	r3, [r7, #24]
 80092a2:	015a      	lsls	r2, r3, #5
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	4413      	add	r3, r2
 80092a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	69ba      	ldr	r2, [r7, #24]
 80092b0:	0151      	lsls	r1, r2, #5
 80092b2:	69fa      	ldr	r2, [r7, #28]
 80092b4:	440a      	add	r2, r1
 80092b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80092be:	6013      	str	r3, [r2, #0]
 80092c0:	e000      	b.n	80092c4 <USB_HC_Halt+0x1ea>
          break;
 80092c2:	bf00      	nop
    }
  }

  return HAL_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3724      	adds	r7, #36	; 0x24
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr
	...

080092d4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b087      	sub	sp, #28
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	460b      	mov	r3, r1
 80092de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80092e4:	78fb      	ldrb	r3, [r7, #3]
 80092e6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80092e8:	2301      	movs	r3, #1
 80092ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	04da      	lsls	r2, r3, #19
 80092f0:	4b15      	ldr	r3, [pc, #84]	; (8009348 <USB_DoPing+0x74>)
 80092f2:	4013      	ands	r3, r2
 80092f4:	693a      	ldr	r2, [r7, #16]
 80092f6:	0151      	lsls	r1, r2, #5
 80092f8:	697a      	ldr	r2, [r7, #20]
 80092fa:	440a      	add	r2, r1
 80092fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009300:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009304:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	015a      	lsls	r2, r3, #5
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	4413      	add	r3, r2
 800930e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800931c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009324:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	015a      	lsls	r2, r3, #5
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	4413      	add	r3, r2
 800932e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009332:	461a      	mov	r2, r3
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	371c      	adds	r7, #28
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop
 8009348:	1ff80000 	.word	0x1ff80000

0800934c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b088      	sub	sp, #32
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009354:	2300      	movs	r3, #0
 8009356:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800935c:	2300      	movs	r3, #0
 800935e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f7ff f911 	bl	8008588 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009366:	2110      	movs	r1, #16
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f7ff f96b 	bl	8008644 <USB_FlushTxFifo>
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d001      	beq.n	8009378 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f7ff f997 	bl	80086ac <USB_FlushRxFifo>
 800937e:	4603      	mov	r3, r0
 8009380:	2b00      	cmp	r3, #0
 8009382:	d001      	beq.n	8009388 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009384:	2301      	movs	r3, #1
 8009386:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009388:	2300      	movs	r3, #0
 800938a:	61bb      	str	r3, [r7, #24]
 800938c:	e01f      	b.n	80093ce <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	015a      	lsls	r2, r3, #5
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	4413      	add	r3, r2
 8009396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80093a4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093ac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80093b4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	015a      	lsls	r2, r3, #5
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	4413      	add	r3, r2
 80093be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093c2:	461a      	mov	r2, r3
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	3301      	adds	r3, #1
 80093cc:	61bb      	str	r3, [r7, #24]
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	2b0f      	cmp	r3, #15
 80093d2:	d9dc      	bls.n	800938e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80093d4:	2300      	movs	r3, #0
 80093d6:	61bb      	str	r3, [r7, #24]
 80093d8:	e034      	b.n	8009444 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	015a      	lsls	r2, r3, #5
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	4413      	add	r3, r2
 80093e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80093f0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80093f8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009400:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	015a      	lsls	r2, r3, #5
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	4413      	add	r3, r2
 800940a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800940e:	461a      	mov	r2, r3
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	3301      	adds	r3, #1
 8009418:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009420:	d80c      	bhi.n	800943c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009422:	69bb      	ldr	r3, [r7, #24]
 8009424:	015a      	lsls	r2, r3, #5
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	4413      	add	r3, r2
 800942a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009434:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009438:	d0ec      	beq.n	8009414 <USB_StopHost+0xc8>
 800943a:	e000      	b.n	800943e <USB_StopHost+0xf2>
        break;
 800943c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800943e:	69bb      	ldr	r3, [r7, #24]
 8009440:	3301      	adds	r3, #1
 8009442:	61bb      	str	r3, [r7, #24]
 8009444:	69bb      	ldr	r3, [r7, #24]
 8009446:	2b0f      	cmp	r3, #15
 8009448:	d9c7      	bls.n	80093da <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009450:	461a      	mov	r2, r3
 8009452:	f04f 33ff 	mov.w	r3, #4294967295
 8009456:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f04f 32ff 	mov.w	r2, #4294967295
 800945e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f7ff f880 	bl	8008566 <USB_EnableGlobalInt>

  return ret;
 8009466:	7ffb      	ldrb	r3, [r7, #31]
}
 8009468:	4618      	mov	r0, r3
 800946a:	3720      	adds	r7, #32
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  //retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
	FATFS_LinkDriver(&SD0_Driver, SD0Path);
 8009474:	4908      	ldr	r1, [pc, #32]	; (8009498 <MX_FATFS_Init+0x28>)
 8009476:	4809      	ldr	r0, [pc, #36]	; (800949c <MX_FATFS_Init+0x2c>)
 8009478:	f007 fc20 	bl	8010cbc <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD1_Driver, SD1Path);
 800947c:	4908      	ldr	r1, [pc, #32]	; (80094a0 <MX_FATFS_Init+0x30>)
 800947e:	4809      	ldr	r0, [pc, #36]	; (80094a4 <MX_FATFS_Init+0x34>)
 8009480:	f007 fc1c 	bl	8010cbc <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD2_Driver, SD2Path);
 8009484:	4908      	ldr	r1, [pc, #32]	; (80094a8 <MX_FATFS_Init+0x38>)
 8009486:	4809      	ldr	r0, [pc, #36]	; (80094ac <MX_FATFS_Init+0x3c>)
 8009488:	f007 fc18 	bl	8010cbc <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD3_Driver, SD3Path);
 800948c:	4908      	ldr	r1, [pc, #32]	; (80094b0 <MX_FATFS_Init+0x40>)
 800948e:	4809      	ldr	r0, [pc, #36]	; (80094b4 <MX_FATFS_Init+0x44>)
 8009490:	f007 fc14 	bl	8010cbc <FATFS_LinkDriver>


  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009494:	bf00      	nop
 8009496:	bd80      	pop	{r7, pc}
 8009498:	20001cf4 	.word	0x20001cf4
 800949c:	2000023c 	.word	0x2000023c
 80094a0:	20001cf8 	.word	0x20001cf8
 80094a4:	20000250 	.word	0x20000250
 80094a8:	20001cfc 	.word	0x20001cfc
 80094ac:	20000264 	.word	0x20000264
 80094b0:	20001d00 	.word	0x20001d00
 80094b4:	20000278 	.word	0x20000278

080094b8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80094b8:	b480      	push	{r7}
 80094ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80094bc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80094be:	4618      	mov	r0, r3
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <SD0_initialize>:
  * @brief  Initializes a Drive
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS SD0_initialize (BYTE pdrv)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	4603      	mov	r3, r0
 80094d0:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(0);
 80094d2:	2000      	movs	r0, #0
 80094d4:	f7f8 fb98 	bl	8001c08 <sd_ss_set_active>
	return USER_initialize(pdrv);
 80094d8:	79fb      	ldrb	r3, [r7, #7]
 80094da:	4618      	mov	r0, r3
 80094dc:	f000 f838 	bl	8009550 <USER_initialize>
 80094e0:	4603      	mov	r3, r0
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3708      	adds	r7, #8
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <SD1_initialize>:
DSTATUS SD1_initialize (BYTE pdrv)
{
 80094ea:	b580      	push	{r7, lr}
 80094ec:	b082      	sub	sp, #8
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	4603      	mov	r3, r0
 80094f2:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(1);
 80094f4:	2001      	movs	r0, #1
 80094f6:	f7f8 fb87 	bl	8001c08 <sd_ss_set_active>
	return USER_initialize(pdrv);
 80094fa:	79fb      	ldrb	r3, [r7, #7]
 80094fc:	4618      	mov	r0, r3
 80094fe:	f000 f827 	bl	8009550 <USER_initialize>
 8009502:	4603      	mov	r3, r0
}
 8009504:	4618      	mov	r0, r3
 8009506:	3708      	adds	r7, #8
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <SD2_initialize>:
DSTATUS SD2_initialize (BYTE pdrv)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
 8009512:	4603      	mov	r3, r0
 8009514:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(2);
 8009516:	2002      	movs	r0, #2
 8009518:	f7f8 fb76 	bl	8001c08 <sd_ss_set_active>
	return USER_initialize(pdrv);
 800951c:	79fb      	ldrb	r3, [r7, #7]
 800951e:	4618      	mov	r0, r3
 8009520:	f000 f816 	bl	8009550 <USER_initialize>
 8009524:	4603      	mov	r3, r0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3708      	adds	r7, #8
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <SD3_initialize>:
DSTATUS SD3_initialize (BYTE pdrv)
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b082      	sub	sp, #8
 8009532:	af00      	add	r7, sp, #0
 8009534:	4603      	mov	r3, r0
 8009536:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(3);
 8009538:	2003      	movs	r0, #3
 800953a:	f7f8 fb65 	bl	8001c08 <sd_ss_set_active>
	return USER_initialize(pdrv);
 800953e:	79fb      	ldrb	r3, [r7, #7]
 8009540:	4618      	mov	r0, r3
 8009542:	f000 f805 	bl	8009550 <USER_initialize>
 8009546:	4603      	mov	r3, r0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <USER_initialize>:

DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	4603      	mov	r3, r0
 8009558:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	//SD_PowerOn();
	SS_SD_SELECT();
 800955a:	f7f8 fb73 	bl	8001c44 <sd_ss_active_pin_down>
	if(sd_ini()==0) {Stat &= ~STA_NOINIT;} // STA_NOINIT
 800955e:	f7f8 fbf3 	bl	8001d48 <sd_ini>
 8009562:	4603      	mov	r3, r0
 8009564:	2b00      	cmp	r3, #0
 8009566:	d107      	bne.n	8009578 <USER_initialize+0x28>
 8009568:	4b08      	ldr	r3, [pc, #32]	; (800958c <USER_initialize+0x3c>)
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	b2db      	uxtb	r3, r3
 800956e:	f023 0301 	bic.w	r3, r3, #1
 8009572:	b2da      	uxtb	r2, r3
 8009574:	4b05      	ldr	r3, [pc, #20]	; (800958c <USER_initialize+0x3c>)
 8009576:	701a      	strb	r2, [r3, #0]
	SS_SD_DESELECT();
 8009578:	f7f8 fb74 	bl	8001c64 <sd_ss_active_pin_up>
    return Stat;
 800957c:	4b03      	ldr	r3, [pc, #12]	; (800958c <USER_initialize+0x3c>)
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8009582:	4618      	mov	r0, r3
 8009584:	3708      	adds	r7, #8
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	20000239 	.word	0x20000239

08009590 <SD0_status>:
  * @brief  Gets Disk Status
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS SD0_status (BYTE pdrv)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
 8009596:	4603      	mov	r3, r0
 8009598:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(0);
 800959a:	2000      	movs	r0, #0
 800959c:	f7f8 fb34 	bl	8001c08 <sd_ss_set_active>
	return USER_status(pdrv);
 80095a0:	79fb      	ldrb	r3, [r7, #7]
 80095a2:	4618      	mov	r0, r3
 80095a4:	f000 f838 	bl	8009618 <USER_status>
 80095a8:	4603      	mov	r3, r0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3708      	adds	r7, #8
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <SD1_status>:
DSTATUS SD1_status (BYTE pdrv)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b082      	sub	sp, #8
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	4603      	mov	r3, r0
 80095ba:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(1);
 80095bc:	2001      	movs	r0, #1
 80095be:	f7f8 fb23 	bl	8001c08 <sd_ss_set_active>
	return USER_status(pdrv);
 80095c2:	79fb      	ldrb	r3, [r7, #7]
 80095c4:	4618      	mov	r0, r3
 80095c6:	f000 f827 	bl	8009618 <USER_status>
 80095ca:	4603      	mov	r3, r0
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3708      	adds	r7, #8
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <SD2_status>:
DSTATUS SD2_status (BYTE pdrv)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	4603      	mov	r3, r0
 80095dc:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(2);
 80095de:	2002      	movs	r0, #2
 80095e0:	f7f8 fb12 	bl	8001c08 <sd_ss_set_active>
	return USER_status(pdrv);
 80095e4:	79fb      	ldrb	r3, [r7, #7]
 80095e6:	4618      	mov	r0, r3
 80095e8:	f000 f816 	bl	8009618 <USER_status>
 80095ec:	4603      	mov	r3, r0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3708      	adds	r7, #8
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <SD3_status>:
DSTATUS SD3_status (BYTE pdrv)
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b082      	sub	sp, #8
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	4603      	mov	r3, r0
 80095fe:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(3);
 8009600:	2003      	movs	r0, #3
 8009602:	f7f8 fb01 	bl	8001c08 <sd_ss_set_active>
	return USER_status(pdrv);
 8009606:	79fb      	ldrb	r3, [r7, #7]
 8009608:	4618      	mov	r0, r3
 800960a:	f000 f805 	bl	8009618 <USER_status>
 800960e:	4603      	mov	r3, r0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <USER_status>:

DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	4603      	mov	r3, r0
 8009620:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	SS_SD_SELECT();
 8009622:	f7f8 fb0f 	bl	8001c44 <sd_ss_active_pin_down>
	if (pdrv) return STA_NOINIT;
 8009626:	79fb      	ldrb	r3, [r7, #7]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d001      	beq.n	8009630 <USER_status+0x18>
 800962c:	2301      	movs	r3, #1
 800962e:	e004      	b.n	800963a <USER_status+0x22>
	SS_SD_DESELECT();
 8009630:	f7f8 fb18 	bl	8001c64 <sd_ss_active_pin_up>
    return Stat;
 8009634:	4b03      	ldr	r3, [pc, #12]	; (8009644 <USER_status+0x2c>)
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800963a:	4618      	mov	r0, r3
 800963c:	3708      	adds	r7, #8
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	20000239 	.word	0x20000239

08009648 <SD0_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DSTATUS SD0_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	60b9      	str	r1, [r7, #8]
 8009650:	607a      	str	r2, [r7, #4]
 8009652:	603b      	str	r3, [r7, #0]
 8009654:	4603      	mov	r3, r0
 8009656:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(0);
 8009658:	2000      	movs	r0, #0
 800965a:	f7f8 fad5 	bl	8001c08 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 800965e:	7bf8      	ldrb	r0, [r7, #15]
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	68b9      	ldr	r1, [r7, #8]
 8009666:	f000 f847 	bl	80096f8 <USER_read>
 800966a:	4603      	mov	r3, r0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <SD1_read>:
DSTATUS SD1_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	60b9      	str	r1, [r7, #8]
 800967c:	607a      	str	r2, [r7, #4]
 800967e:	603b      	str	r3, [r7, #0]
 8009680:	4603      	mov	r3, r0
 8009682:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(1);
 8009684:	2001      	movs	r0, #1
 8009686:	f7f8 fabf 	bl	8001c08 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 800968a:	7bf8      	ldrb	r0, [r7, #15]
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	68b9      	ldr	r1, [r7, #8]
 8009692:	f000 f831 	bl	80096f8 <USER_read>
 8009696:	4603      	mov	r3, r0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3710      	adds	r7, #16
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <SD2_read>:
DSTATUS SD2_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60b9      	str	r1, [r7, #8]
 80096a8:	607a      	str	r2, [r7, #4]
 80096aa:	603b      	str	r3, [r7, #0]
 80096ac:	4603      	mov	r3, r0
 80096ae:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(2);
 80096b0:	2002      	movs	r0, #2
 80096b2:	f7f8 faa9 	bl	8001c08 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 80096b6:	7bf8      	ldrb	r0, [r7, #15]
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	68b9      	ldr	r1, [r7, #8]
 80096be:	f000 f81b 	bl	80096f8 <USER_read>
 80096c2:	4603      	mov	r3, r0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3710      	adds	r7, #16
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <SD3_read>:
DSTATUS SD3_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	60b9      	str	r1, [r7, #8]
 80096d4:	607a      	str	r2, [r7, #4]
 80096d6:	603b      	str	r3, [r7, #0]
 80096d8:	4603      	mov	r3, r0
 80096da:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(3);
 80096dc:	2003      	movs	r0, #3
 80096de:	f7f8 fa93 	bl	8001c08 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 80096e2:	7bf8      	ldrb	r0, [r7, #15]
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	68b9      	ldr	r1, [r7, #8]
 80096ea:	f000 f805 	bl	80096f8 <USER_read>
 80096ee:	4603      	mov	r3, r0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60b9      	str	r1, [r7, #8]
 8009700:	607a      	str	r2, [r7, #4]
 8009702:	603b      	str	r3, [r7, #0]
 8009704:	4603      	mov	r3, r0
 8009706:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	SS_SD_SELECT();
 8009708:	f7f8 fa9c 	bl	8001c44 <sd_ss_active_pin_down>
	if (pdrv || !count) return RES_PARERR;
 800970c:	7bfb      	ldrb	r3, [r7, #15]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d102      	bne.n	8009718 <USER_read+0x20>
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d101      	bne.n	800971c <USER_read+0x24>
 8009718:	2304      	movs	r3, #4
 800971a:	e043      	b.n	80097a4 <USER_read+0xac>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800971c:	4b23      	ldr	r3, [pc, #140]	; (80097ac <USER_read+0xb4>)
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	b2db      	uxtb	r3, r3
 8009722:	f003 0301 	and.w	r3, r3, #1
 8009726:	2b00      	cmp	r3, #0
 8009728:	d001      	beq.n	800972e <USER_read+0x36>
 800972a:	2303      	movs	r3, #3
 800972c:	e03a      	b.n	80097a4 <USER_read+0xac>
	if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 800972e:	4b20      	ldr	r3, [pc, #128]	; (80097b0 <USER_read+0xb8>)
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	b2db      	uxtb	r3, r3
 8009734:	f003 0304 	and.w	r3, r3, #4
 8009738:	2b00      	cmp	r3, #0
 800973a:	d102      	bne.n	8009742 <USER_read+0x4a>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	025b      	lsls	r3, r3, #9
 8009740:	607b      	str	r3, [r7, #4]
	if (count == 1) /* Single block read */
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	2b01      	cmp	r3, #1
 8009746:	d106      	bne.n	8009756 <USER_read+0x5e>
	{
	  SD_Read_Block(buff,sector); //Ð¡Ñ‡Ð¸Ñ‚Ð°ÐµÐ¼ Ð±Ð»Ð¾Ðº Ð² Ð±ÑƒÑ„ÐµÑ€
 8009748:	6879      	ldr	r1, [r7, #4]
 800974a:	68b8      	ldr	r0, [r7, #8]
 800974c:	f7f8 fc35 	bl	8001fba <SD_Read_Block>
	  count = 0;
 8009750:	2300      	movs	r3, #0
 8009752:	603b      	str	r3, [r7, #0]
 8009754:	e01c      	b.n	8009790 <USER_read+0x98>
	}
	else /* Multiple block read */
	{
		do{
			SD_Read_Block((BYTE*)buff,sector);
 8009756:	6879      	ldr	r1, [r7, #4]
 8009758:	68b8      	ldr	r0, [r7, #8]
 800975a:	f7f8 fc2e 	bl	8001fba <SD_Read_Block>
			if (!(sdinfo.type & 4)){
 800975e:	4b14      	ldr	r3, [pc, #80]	; (80097b0 <USER_read+0xb8>)
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	b2db      	uxtb	r3, r3
 8009764:	f003 0304 	and.w	r3, r3, #4
 8009768:	2b00      	cmp	r3, #0
 800976a:	d104      	bne.n	8009776 <USER_read+0x7e>
				sector+=512;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009772:	607b      	str	r3, [r7, #4]
 8009774:	e002      	b.n	800977c <USER_read+0x84>
			}
			else sector++;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	3301      	adds	r3, #1
 800977a:	607b      	str	r3, [r7, #4]
			buff+=512;
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009782:	60bb      	str	r3, [r7, #8]
			count--;
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	3b01      	subs	r3, #1
 8009788:	603b      	str	r3, [r7, #0]
		}while(count>0);
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1e2      	bne.n	8009756 <USER_read+0x5e>
	}
	SPI_Release();
 8009790:	f7f8 fc0c 	bl	8001fac <SPI_Release>
	SS_SD_DESELECT();
 8009794:	f7f8 fa66 	bl	8001c64 <sd_ss_active_pin_up>
	return count ? RES_ERROR : RES_OK;
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	2b00      	cmp	r3, #0
 800979c:	bf14      	ite	ne
 800979e:	2301      	movne	r3, #1
 80097a0:	2300      	moveq	r3, #0
 80097a2:	b2db      	uxtb	r3, r3
    return RES_OK;
  /* USER CODE END READ */
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3710      	adds	r7, #16
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	20000239 	.word	0x20000239
 80097b0:	20001a5c 	.word	0x20001a5c

080097b4 <SD0_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DSTATUS SD0_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60b9      	str	r1, [r7, #8]
 80097bc:	607a      	str	r2, [r7, #4]
 80097be:	603b      	str	r3, [r7, #0]
 80097c0:	4603      	mov	r3, r0
 80097c2:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(0);
 80097c4:	2000      	movs	r0, #0
 80097c6:	f7f8 fa1f 	bl	8001c08 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 80097ca:	7bf8      	ldrb	r0, [r7, #15]
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	68b9      	ldr	r1, [r7, #8]
 80097d2:	f000 f847 	bl	8009864 <USER_write>
 80097d6:	4603      	mov	r3, r0
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3710      	adds	r7, #16
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <SD1_write>:
DSTATUS SD1_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60b9      	str	r1, [r7, #8]
 80097e8:	607a      	str	r2, [r7, #4]
 80097ea:	603b      	str	r3, [r7, #0]
 80097ec:	4603      	mov	r3, r0
 80097ee:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(1);
 80097f0:	2001      	movs	r0, #1
 80097f2:	f7f8 fa09 	bl	8001c08 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 80097f6:	7bf8      	ldrb	r0, [r7, #15]
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	68b9      	ldr	r1, [r7, #8]
 80097fe:	f000 f831 	bl	8009864 <USER_write>
 8009802:	4603      	mov	r3, r0
}
 8009804:	4618      	mov	r0, r3
 8009806:	3710      	adds	r7, #16
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <SD2_write>:
DSTATUS SD2_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	60b9      	str	r1, [r7, #8]
 8009814:	607a      	str	r2, [r7, #4]
 8009816:	603b      	str	r3, [r7, #0]
 8009818:	4603      	mov	r3, r0
 800981a:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(2);
 800981c:	2002      	movs	r0, #2
 800981e:	f7f8 f9f3 	bl	8001c08 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 8009822:	7bf8      	ldrb	r0, [r7, #15]
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	68b9      	ldr	r1, [r7, #8]
 800982a:	f000 f81b 	bl	8009864 <USER_write>
 800982e:	4603      	mov	r3, r0
}
 8009830:	4618      	mov	r0, r3
 8009832:	3710      	adds	r7, #16
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <SD3_write>:
DSTATUS SD3_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	60b9      	str	r1, [r7, #8]
 8009840:	607a      	str	r2, [r7, #4]
 8009842:	603b      	str	r3, [r7, #0]
 8009844:	4603      	mov	r3, r0
 8009846:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(3);
 8009848:	2003      	movs	r0, #3
 800984a:	f7f8 f9dd 	bl	8001c08 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 800984e:	7bf8      	ldrb	r0, [r7, #15]
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	68b9      	ldr	r1, [r7, #8]
 8009856:	f000 f805 	bl	8009864 <USER_write>
 800985a:	4603      	mov	r3, r0
}
 800985c:	4618      	mov	r0, r3
 800985e:	3710      	adds	r7, #16
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b086      	sub	sp, #24
 8009868:	af00      	add	r7, sp, #0
 800986a:	60b9      	str	r1, [r7, #8]
 800986c:	607a      	str	r2, [r7, #4]
 800986e:	603b      	str	r3, [r7, #0]
 8009870:	4603      	mov	r3, r0
 8009872:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	uint8_t res;
	SS_SD_SELECT();
 8009874:	f7f8 f9e6 	bl	8001c44 <sd_ss_active_pin_down>
	if (pdrv || !count) return RES_PARERR;
 8009878:	7bfb      	ldrb	r3, [r7, #15]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d102      	bne.n	8009884 <USER_write+0x20>
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d101      	bne.n	8009888 <USER_write+0x24>
 8009884:	2304      	movs	r3, #4
 8009886:	e02c      	b.n	80098e2 <USER_write+0x7e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009888:	4b18      	ldr	r3, [pc, #96]	; (80098ec <USER_write+0x88>)
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	b2db      	uxtb	r3, r3
 800988e:	f003 0301 	and.w	r3, r3, #1
 8009892:	2b00      	cmp	r3, #0
 8009894:	d001      	beq.n	800989a <USER_write+0x36>
 8009896:	2303      	movs	r3, #3
 8009898:	e023      	b.n	80098e2 <USER_write+0x7e>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800989a:	4b14      	ldr	r3, [pc, #80]	; (80098ec <USER_write+0x88>)
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	f003 0304 	and.w	r3, r3, #4
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d001      	beq.n	80098ac <USER_write+0x48>
 80098a8:	2302      	movs	r3, #2
 80098aa:	e01a      	b.n	80098e2 <USER_write+0x7e>
	if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 80098ac:	4b10      	ldr	r3, [pc, #64]	; (80098f0 <USER_write+0x8c>)
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	f003 0304 	and.w	r3, r3, #4
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d102      	bne.n	80098c0 <USER_write+0x5c>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	025b      	lsls	r3, r3, #9
 80098be:	607b      	str	r3, [r7, #4]
  	res=SD_Write_Blocks((BYTE*)buff,sector,count);
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	461a      	mov	r2, r3
 80098c6:	6879      	ldr	r1, [r7, #4]
 80098c8:	68b8      	ldr	r0, [r7, #8]
 80098ca:	f7f8 fbbb 	bl	8002044 <SD_Write_Blocks>
 80098ce:	4603      	mov	r3, r0
 80098d0:	75fb      	strb	r3, [r7, #23]
	SS_SD_DESELECT();
 80098d2:	f7f8 f9c7 	bl	8001c64 <sd_ss_active_pin_up>

	return res ? RES_ERROR : RES_OK;
 80098d6:	7dfb      	ldrb	r3, [r7, #23]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	bf14      	ite	ne
 80098dc:	2301      	movne	r3, #1
 80098de:	2300      	moveq	r3, #0
 80098e0:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3718      	adds	r7, #24
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop
 80098ec:	20000239 	.word	0x20000239
 80098f0:	20001a5c 	.word	0x20001a5c

080098f4 <SD0_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DSTATUS SD0_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	4603      	mov	r3, r0
 80098fc:	603a      	str	r2, [r7, #0]
 80098fe:	71fb      	strb	r3, [r7, #7]
 8009900:	460b      	mov	r3, r1
 8009902:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(0);
 8009904:	2000      	movs	r0, #0
 8009906:	f7f8 f97f 	bl	8001c08 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 800990a:	79b9      	ldrb	r1, [r7, #6]
 800990c:	79fb      	ldrb	r3, [r7, #7]
 800990e:	683a      	ldr	r2, [r7, #0]
 8009910:	4618      	mov	r0, r3
 8009912:	f000 f847 	bl	80099a4 <USER_ioctl>
 8009916:	4603      	mov	r3, r0
}
 8009918:	4618      	mov	r0, r3
 800991a:	3708      	adds	r7, #8
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <SD1_ioctl>:
DSTATUS SD1_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
 8009926:	4603      	mov	r3, r0
 8009928:	603a      	str	r2, [r7, #0]
 800992a:	71fb      	strb	r3, [r7, #7]
 800992c:	460b      	mov	r3, r1
 800992e:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(1);
 8009930:	2001      	movs	r0, #1
 8009932:	f7f8 f969 	bl	8001c08 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 8009936:	79b9      	ldrb	r1, [r7, #6]
 8009938:	79fb      	ldrb	r3, [r7, #7]
 800993a:	683a      	ldr	r2, [r7, #0]
 800993c:	4618      	mov	r0, r3
 800993e:	f000 f831 	bl	80099a4 <USER_ioctl>
 8009942:	4603      	mov	r3, r0
}
 8009944:	4618      	mov	r0, r3
 8009946:	3708      	adds	r7, #8
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <SD2_ioctl>:
DSTATUS SD2_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	4603      	mov	r3, r0
 8009954:	603a      	str	r2, [r7, #0]
 8009956:	71fb      	strb	r3, [r7, #7]
 8009958:	460b      	mov	r3, r1
 800995a:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(2);
 800995c:	2002      	movs	r0, #2
 800995e:	f7f8 f953 	bl	8001c08 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 8009962:	79b9      	ldrb	r1, [r7, #6]
 8009964:	79fb      	ldrb	r3, [r7, #7]
 8009966:	683a      	ldr	r2, [r7, #0]
 8009968:	4618      	mov	r0, r3
 800996a:	f000 f81b 	bl	80099a4 <USER_ioctl>
 800996e:	4603      	mov	r3, r0
}
 8009970:	4618      	mov	r0, r3
 8009972:	3708      	adds	r7, #8
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <SD3_ioctl>:
DSTATUS SD3_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	4603      	mov	r3, r0
 8009980:	603a      	str	r2, [r7, #0]
 8009982:	71fb      	strb	r3, [r7, #7]
 8009984:	460b      	mov	r3, r1
 8009986:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(3);
 8009988:	2003      	movs	r0, #3
 800998a:	f7f8 f93d 	bl	8001c08 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 800998e:	79b9      	ldrb	r1, [r7, #6]
 8009990:	79fb      	ldrb	r3, [r7, #7]
 8009992:	683a      	ldr	r2, [r7, #0]
 8009994:	4618      	mov	r0, r3
 8009996:	f000 f805 	bl	80099a4 <USER_ioctl>
 800999a:	4603      	mov	r3, r0
}
 800999c:	4618      	mov	r0, r3
 800999e:	3708      	adds	r7, #8
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	4603      	mov	r3, r0
 80099ac:	603a      	str	r2, [r7, #0]
 80099ae:	71fb      	strb	r3, [r7, #7]
 80099b0:	460b      	mov	r3, r1
 80099b2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res;
	sd_ss_set_active(pdrv);
 80099b4:	79fb      	ldrb	r3, [r7, #7]
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7f8 f926 	bl	8001c08 <sd_ss_set_active>
	SS_SD_SELECT();
 80099bc:	f7f8 f942 	bl	8001c44 <sd_ss_active_pin_down>
	if (pdrv) return RES_PARERR;
 80099c0:	79fb      	ldrb	r3, [r7, #7]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d001      	beq.n	80099ca <USER_ioctl+0x26>
 80099c6:	2304      	movs	r3, #4
 80099c8:	e02a      	b.n	8009a20 <USER_ioctl+0x7c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80099ca:	4b17      	ldr	r3, [pc, #92]	; (8009a28 <USER_ioctl+0x84>)
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	f003 0301 	and.w	r3, r3, #1
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d001      	beq.n	80099dc <USER_ioctl+0x38>
 80099d8:	2303      	movs	r3, #3
 80099da:	e021      	b.n	8009a20 <USER_ioctl+0x7c>
	res = RES_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	73fb      	strb	r3, [r7, #15]
	switch (cmd)
 80099e0:	79bb      	ldrb	r3, [r7, #6]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d002      	beq.n	80099ec <USER_ioctl+0x48>
 80099e6:	2b02      	cmp	r3, #2
 80099e8:	d00a      	beq.n	8009a00 <USER_ioctl+0x5c>
 80099ea:	e010      	b.n	8009a0e <USER_ioctl+0x6a>
	{
	  case CTRL_SYNC : /* Flush dirty buffer if present */
	    SS_SD_SELECT();
 80099ec:	f7f8 f92a 	bl	8001c44 <sd_ss_active_pin_down>
	    if (SPI_wait_ready() == 0xFF)
 80099f0:	f7f8 fa65 	bl	8001ebe <SPI_wait_ready>
 80099f4:	4603      	mov	r3, r0
 80099f6:	2bff      	cmp	r3, #255	; 0xff
 80099f8:	d10c      	bne.n	8009a14 <USER_ioctl+0x70>
	    res = RES_OK;
 80099fa:	2300      	movs	r3, #0
 80099fc:	73fb      	strb	r3, [r7, #15]
	    break;
 80099fe:	e009      	b.n	8009a14 <USER_ioctl+0x70>
	  case GET_SECTOR_SIZE : /* Get sectors on the disk (WORD) */
	    *(WORD*)buff = 512;
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a06:	801a      	strh	r2, [r3, #0]
	    res = RES_OK;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	73fb      	strb	r3, [r7, #15]
	    break;
 8009a0c:	e003      	b.n	8009a16 <USER_ioctl+0x72>
	  default:
	    res = RES_PARERR;
 8009a0e:	2304      	movs	r3, #4
 8009a10:	73fb      	strb	r3, [r7, #15]
 8009a12:	e000      	b.n	8009a16 <USER_ioctl+0x72>
	    break;
 8009a14:	bf00      	nop
	}
	SPI_Release();
 8009a16:	f7f8 fac9 	bl	8001fac <SPI_Release>
	SS_SD_DESELECT();
 8009a1a:	f7f8 f923 	bl	8001c64 <sd_ss_active_pin_up>
    return res;
 8009a1e:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3710      	adds	r7, #16
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}
 8009a28:	20000239 	.word	0x20000239

08009a2c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009a2c:	b590      	push	{r4, r7, lr}
 8009a2e:	b089      	sub	sp, #36	; 0x24
 8009a30:	af04      	add	r7, sp, #16
 8009a32:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009a34:	2301      	movs	r3, #1
 8009a36:	2202      	movs	r2, #2
 8009a38:	2102      	movs	r1, #2
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 fdb0 	bl	800a5a0 <USBH_FindInterface>
 8009a40:	4603      	mov	r3, r0
 8009a42:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009a44:	7bfb      	ldrb	r3, [r7, #15]
 8009a46:	2bff      	cmp	r3, #255	; 0xff
 8009a48:	d002      	beq.n	8009a50 <USBH_CDC_InterfaceInit+0x24>
 8009a4a:	7bfb      	ldrb	r3, [r7, #15]
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d901      	bls.n	8009a54 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009a50:	2302      	movs	r3, #2
 8009a52:	e13d      	b.n	8009cd0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009a54:	7bfb      	ldrb	r3, [r7, #15]
 8009a56:	4619      	mov	r1, r3
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 fd85 	bl	800a568 <USBH_SelectInterface>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009a62:	7bbb      	ldrb	r3, [r7, #14]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d001      	beq.n	8009a6c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009a68:	2302      	movs	r3, #2
 8009a6a:	e131      	b.n	8009cd0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009a72:	2050      	movs	r0, #80	; 0x50
 8009a74:	f00a f930 	bl	8013cd8 <malloc>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a82:	69db      	ldr	r3, [r3, #28]
 8009a84:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d101      	bne.n	8009a90 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009a8c:	2302      	movs	r3, #2
 8009a8e:	e11f      	b.n	8009cd0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009a90:	2250      	movs	r2, #80	; 0x50
 8009a92:	2100      	movs	r1, #0
 8009a94:	68b8      	ldr	r0, [r7, #8]
 8009a96:	f00a f93d 	bl	8013d14 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009a9a:	7bfb      	ldrb	r3, [r7, #15]
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	211a      	movs	r1, #26
 8009aa0:	fb01 f303 	mul.w	r3, r1, r3
 8009aa4:	4413      	add	r3, r2
 8009aa6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	b25b      	sxtb	r3, r3
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	da15      	bge.n	8009ade <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009ab2:	7bfb      	ldrb	r3, [r7, #15]
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	211a      	movs	r1, #26
 8009ab8:	fb01 f303 	mul.w	r3, r1, r3
 8009abc:	4413      	add	r3, r2
 8009abe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009ac2:	781a      	ldrb	r2, [r3, #0]
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009ac8:	7bfb      	ldrb	r3, [r7, #15]
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	211a      	movs	r1, #26
 8009ace:	fb01 f303 	mul.w	r3, r1, r3
 8009ad2:	4413      	add	r3, r2
 8009ad4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009ad8:	881a      	ldrh	r2, [r3, #0]
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	785b      	ldrb	r3, [r3, #1]
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f002 fa80 	bl	800bfea <USBH_AllocPipe>
 8009aea:	4603      	mov	r3, r0
 8009aec:	461a      	mov	r2, r3
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	7819      	ldrb	r1, [r3, #0]
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	7858      	ldrb	r0, [r3, #1]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009b06:	68ba      	ldr	r2, [r7, #8]
 8009b08:	8952      	ldrh	r2, [r2, #10]
 8009b0a:	9202      	str	r2, [sp, #8]
 8009b0c:	2203      	movs	r2, #3
 8009b0e:	9201      	str	r2, [sp, #4]
 8009b10:	9300      	str	r3, [sp, #0]
 8009b12:	4623      	mov	r3, r4
 8009b14:	4602      	mov	r2, r0
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f002 fa38 	bl	800bf8c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	2200      	movs	r2, #0
 8009b22:	4619      	mov	r1, r3
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f009 ff2b 	bl	8013980 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	210a      	movs	r1, #10
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 fd35 	bl	800a5a0 <USBH_FindInterface>
 8009b36:	4603      	mov	r3, r0
 8009b38:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009b3a:	7bfb      	ldrb	r3, [r7, #15]
 8009b3c:	2bff      	cmp	r3, #255	; 0xff
 8009b3e:	d002      	beq.n	8009b46 <USBH_CDC_InterfaceInit+0x11a>
 8009b40:	7bfb      	ldrb	r3, [r7, #15]
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d901      	bls.n	8009b4a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009b46:	2302      	movs	r3, #2
 8009b48:	e0c2      	b.n	8009cd0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009b4a:	7bfb      	ldrb	r3, [r7, #15]
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	211a      	movs	r1, #26
 8009b50:	fb01 f303 	mul.w	r3, r1, r3
 8009b54:	4413      	add	r3, r2
 8009b56:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	b25b      	sxtb	r3, r3
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	da16      	bge.n	8009b90 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009b62:	7bfb      	ldrb	r3, [r7, #15]
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	211a      	movs	r1, #26
 8009b68:	fb01 f303 	mul.w	r3, r1, r3
 8009b6c:	4413      	add	r3, r2
 8009b6e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009b72:	781a      	ldrb	r2, [r3, #0]
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009b78:	7bfb      	ldrb	r3, [r7, #15]
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	211a      	movs	r1, #26
 8009b7e:	fb01 f303 	mul.w	r3, r1, r3
 8009b82:	4413      	add	r3, r2
 8009b84:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009b88:	881a      	ldrh	r2, [r3, #0]
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	835a      	strh	r2, [r3, #26]
 8009b8e:	e015      	b.n	8009bbc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009b90:	7bfb      	ldrb	r3, [r7, #15]
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	211a      	movs	r1, #26
 8009b96:	fb01 f303 	mul.w	r3, r1, r3
 8009b9a:	4413      	add	r3, r2
 8009b9c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009ba0:	781a      	ldrb	r2, [r3, #0]
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009ba6:	7bfb      	ldrb	r3, [r7, #15]
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	211a      	movs	r1, #26
 8009bac:	fb01 f303 	mul.w	r3, r1, r3
 8009bb0:	4413      	add	r3, r2
 8009bb2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009bb6:	881a      	ldrh	r2, [r3, #0]
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009bbc:	7bfb      	ldrb	r3, [r7, #15]
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	211a      	movs	r1, #26
 8009bc2:	fb01 f303 	mul.w	r3, r1, r3
 8009bc6:	4413      	add	r3, r2
 8009bc8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	b25b      	sxtb	r3, r3
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	da16      	bge.n	8009c02 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009bd4:	7bfb      	ldrb	r3, [r7, #15]
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	211a      	movs	r1, #26
 8009bda:	fb01 f303 	mul.w	r3, r1, r3
 8009bde:	4413      	add	r3, r2
 8009be0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009be4:	781a      	ldrb	r2, [r3, #0]
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009bea:	7bfb      	ldrb	r3, [r7, #15]
 8009bec:	687a      	ldr	r2, [r7, #4]
 8009bee:	211a      	movs	r1, #26
 8009bf0:	fb01 f303 	mul.w	r3, r1, r3
 8009bf4:	4413      	add	r3, r2
 8009bf6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009bfa:	881a      	ldrh	r2, [r3, #0]
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	835a      	strh	r2, [r3, #26]
 8009c00:	e015      	b.n	8009c2e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009c02:	7bfb      	ldrb	r3, [r7, #15]
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	211a      	movs	r1, #26
 8009c08:	fb01 f303 	mul.w	r3, r1, r3
 8009c0c:	4413      	add	r3, r2
 8009c0e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009c12:	781a      	ldrb	r2, [r3, #0]
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009c18:	7bfb      	ldrb	r3, [r7, #15]
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	211a      	movs	r1, #26
 8009c1e:	fb01 f303 	mul.w	r3, r1, r3
 8009c22:	4413      	add	r3, r2
 8009c24:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009c28:	881a      	ldrh	r2, [r3, #0]
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	7b9b      	ldrb	r3, [r3, #14]
 8009c32:	4619      	mov	r1, r3
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f002 f9d8 	bl	800bfea <USBH_AllocPipe>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	7bdb      	ldrb	r3, [r3, #15]
 8009c46:	4619      	mov	r1, r3
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f002 f9ce 	bl	800bfea <USBH_AllocPipe>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	461a      	mov	r2, r3
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	7b59      	ldrb	r1, [r3, #13]
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	7b98      	ldrb	r0, [r3, #14]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009c6a:	68ba      	ldr	r2, [r7, #8]
 8009c6c:	8b12      	ldrh	r2, [r2, #24]
 8009c6e:	9202      	str	r2, [sp, #8]
 8009c70:	2202      	movs	r2, #2
 8009c72:	9201      	str	r2, [sp, #4]
 8009c74:	9300      	str	r3, [sp, #0]
 8009c76:	4623      	mov	r3, r4
 8009c78:	4602      	mov	r2, r0
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f002 f986 	bl	800bf8c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	7b19      	ldrb	r1, [r3, #12]
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	7bd8      	ldrb	r0, [r3, #15]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009c94:	68ba      	ldr	r2, [r7, #8]
 8009c96:	8b52      	ldrh	r2, [r2, #26]
 8009c98:	9202      	str	r2, [sp, #8]
 8009c9a:	2202      	movs	r2, #2
 8009c9c:	9201      	str	r2, [sp, #4]
 8009c9e:	9300      	str	r3, [sp, #0]
 8009ca0:	4623      	mov	r3, r4
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f002 f971 	bl	800bf8c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	2200      	movs	r2, #0
 8009cae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	7b5b      	ldrb	r3, [r3, #13]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	4619      	mov	r1, r3
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f009 fe60 	bl	8013980 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	7b1b      	ldrb	r3, [r3, #12]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f009 fe59 	bl	8013980 <USBH_LL_SetToggle>

  return USBH_OK;
 8009cce:	2300      	movs	r3, #0
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3714      	adds	r7, #20
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd90      	pop	{r4, r7, pc}

08009cd8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ce6:	69db      	ldr	r3, [r3, #28]
 8009ce8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00e      	beq.n	8009d10 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f002 f966 	bl	800bfca <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	4619      	mov	r1, r3
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f002 f991 	bl	800c02c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	7b1b      	ldrb	r3, [r3, #12]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d00e      	beq.n	8009d36 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	7b1b      	ldrb	r3, [r3, #12]
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f002 f953 	bl	800bfca <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	7b1b      	ldrb	r3, [r3, #12]
 8009d28:	4619      	mov	r1, r3
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f002 f97e 	bl	800c02c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2200      	movs	r2, #0
 8009d34:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	7b5b      	ldrb	r3, [r3, #13]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d00e      	beq.n	8009d5c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	7b5b      	ldrb	r3, [r3, #13]
 8009d42:	4619      	mov	r1, r3
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f002 f940 	bl	800bfca <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	7b5b      	ldrb	r3, [r3, #13]
 8009d4e:	4619      	mov	r1, r3
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f002 f96b 	bl	800c02c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d62:	69db      	ldr	r3, [r3, #28]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d00b      	beq.n	8009d80 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d6e:	69db      	ldr	r3, [r3, #28]
 8009d70:	4618      	mov	r0, r3
 8009d72:	f009 ffb9 	bl	8013ce8 <free>
    phost->pActiveClass->pData = 0U;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009d80:	2300      	movs	r3, #0
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b084      	sub	sp, #16
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d98:	69db      	ldr	r3, [r3, #28]
 8009d9a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	3340      	adds	r3, #64	; 0x40
 8009da0:	4619      	mov	r1, r3
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 f8da 	bl	8009f5c <GetLineCoding>
 8009da8:	4603      	mov	r3, r0
 8009daa:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009dac:	7afb      	ldrb	r3, [r7, #11]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d105      	bne.n	8009dbe <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009db8:	2102      	movs	r1, #2
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009dbe:	7afb      	ldrb	r3, [r7, #11]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dde:	69db      	ldr	r3, [r3, #28]
 8009de0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009de8:	2b04      	cmp	r3, #4
 8009dea:	d877      	bhi.n	8009edc <USBH_CDC_Process+0x114>
 8009dec:	a201      	add	r2, pc, #4	; (adr r2, 8009df4 <USBH_CDC_Process+0x2c>)
 8009dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df2:	bf00      	nop
 8009df4:	08009e09 	.word	0x08009e09
 8009df8:	08009e0f 	.word	0x08009e0f
 8009dfc:	08009e3f 	.word	0x08009e3f
 8009e00:	08009eb3 	.word	0x08009eb3
 8009e04:	08009ec1 	.word	0x08009ec1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8009e0c:	e06d      	b.n	8009eea <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e12:	4619      	mov	r1, r3
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 f8c0 	bl	8009f9a <SetLineCoding>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009e1e:	7bbb      	ldrb	r3, [r7, #14]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d104      	bne.n	8009e2e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	2202      	movs	r2, #2
 8009e28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009e2c:	e058      	b.n	8009ee0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009e2e:	7bbb      	ldrb	r3, [r7, #14]
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d055      	beq.n	8009ee0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	2204      	movs	r2, #4
 8009e38:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009e3c:	e050      	b.n	8009ee0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	3340      	adds	r3, #64	; 0x40
 8009e42:	4619      	mov	r1, r3
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 f889 	bl	8009f5c <GetLineCoding>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009e4e:	7bbb      	ldrb	r3, [r7, #14]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d126      	bne.n	8009ea2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	2200      	movs	r2, #0
 8009e58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e66:	791b      	ldrb	r3, [r3, #4]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d13b      	bne.n	8009ee4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e76:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d133      	bne.n	8009ee4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e86:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d12b      	bne.n	8009ee4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e94:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d124      	bne.n	8009ee4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 fa7a 	bl	800a394 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009ea0:	e020      	b.n	8009ee4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009ea2:	7bbb      	ldrb	r3, [r7, #14]
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d01d      	beq.n	8009ee4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	2204      	movs	r2, #4
 8009eac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009eb0:	e018      	b.n	8009ee4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 f934 	bl	800a120 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 f9c3 	bl	800a244 <CDC_ProcessReception>
      break;
 8009ebe:	e014      	b.n	8009eea <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f001 fa53 	bl	800b36e <USBH_ClrFeature>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009ecc:	7bbb      	ldrb	r3, [r7, #14]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d10a      	bne.n	8009ee8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8009eda:	e005      	b.n	8009ee8 <USBH_CDC_Process+0x120>

    default:
      break;
 8009edc:	bf00      	nop
 8009ede:	e004      	b.n	8009eea <USBH_CDC_Process+0x122>
      break;
 8009ee0:	bf00      	nop
 8009ee2:	e002      	b.n	8009eea <USBH_CDC_Process+0x122>
      break;
 8009ee4:	bf00      	nop
 8009ee6:	e000      	b.n	8009eea <USBH_CDC_Process+0x122>
      break;
 8009ee8:	bf00      	nop

  }

  return status;
 8009eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3710      	adds	r7, #16
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009efc:	2300      	movs	r3, #0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	370c      	adds	r7, #12
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr

08009f0a <USBH_CDC_Stop>:
  *         Stop current CDC Transmission
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_CDC_Stop(USBH_HandleTypeDef *phost)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b084      	sub	sp, #16
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f18:	69db      	ldr	r3, [r3, #28]
 8009f1a:	60fb      	str	r3, [r7, #12]

  if (phost->gState == HOST_CLASS)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	2b0b      	cmp	r3, #11
 8009f24:	d115      	bne.n	8009f52 <USBH_CDC_Stop+0x48>
  {
    CDC_Handle->state = CDC_IDLE_STATE;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	4619      	mov	r1, r3
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f002 f848 	bl	800bfca <USBH_ClosePipe>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	7b1b      	ldrb	r3, [r3, #12]
 8009f3e:	4619      	mov	r1, r3
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f002 f842 	bl	800bfca <USBH_ClosePipe>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	7b5b      	ldrb	r3, [r3, #13]
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f002 f83c 	bl	800bfca <USBH_ClosePipe>
  }
  return USBH_OK;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	22a1      	movs	r2, #161	; 0xa1
 8009f6a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2221      	movs	r2, #33	; 0x21
 8009f70:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2207      	movs	r2, #7
 8009f82:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	2207      	movs	r2, #7
 8009f88:	4619      	mov	r1, r3
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f001 fcbc 	bl	800b908 <USBH_CtlReq>
 8009f90:	4603      	mov	r3, r0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3708      	adds	r7, #8
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}

08009f9a <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009f9a:	b580      	push	{r7, lr}
 8009f9c:	b082      	sub	sp, #8
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
 8009fa2:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2221      	movs	r2, #33	; 0x21
 8009fa8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2220      	movs	r2, #32
 8009fae:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2207      	movs	r2, #7
 8009fc0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	2207      	movs	r2, #7
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f001 fc9d 	bl	800b908 <USBH_CtlReq>
 8009fce:	4603      	mov	r3, r0
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <USBH_CDC_SetLineCoding>:
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef USBH_CDC_SetLineCoding(USBH_HandleTypeDef *phost,
                                          CDC_LineCodingTypeDef *linecoding)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009fe8:	69db      	ldr	r3, [r3, #28]
 8009fea:	60fb      	str	r3, [r7, #12]

  if (phost->gState == HOST_CLASS)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	2b0b      	cmp	r3, #11
 8009ff4:	d114      	bne.n	800a020 <USBH_CDC_SetLineCoding+0x48>
  {
    CDC_Handle->state = CDC_SET_LINE_CODING_STATE;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->pUserLineCoding = linecoding;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	683a      	ldr	r2, [r7, #0]
 800a002:	649a      	str	r2, [r3, #72]	; 0x48

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2204      	movs	r2, #4
 800a008:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a018:	2200      	movs	r2, #0
 800a01a:	4619      	mov	r1, r3
 800a01c:	f006 ffde 	bl	8010fdc <osMessagePut>
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }

  return USBH_OK;
 800a020:	2300      	movs	r3, #0
}
 800a022:	4618      	mov	r0, r3
 800a024:	3710      	adds	r7, #16
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <USBH_CDC_Transmit>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Transmit(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b086      	sub	sp, #24
 800a02e:	af00      	add	r7, sp, #0
 800a030:	60f8      	str	r0, [r7, #12]
 800a032:	60b9      	str	r1, [r7, #8]
 800a034:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a036:	2301      	movs	r3, #1
 800a038:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a040:	69db      	ldr	r3, [r3, #28]
 800a042:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d004      	beq.n	800a058 <USBH_CDC_Transmit+0x2e>
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a054:	2b03      	cmp	r3, #3
 800a056:	d11d      	bne.n	800a094 <USBH_CDC_Transmit+0x6a>
  {
    CDC_Handle->pTxData = pbuff;
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	68ba      	ldr	r2, [r7, #8]
 800a05c:	61da      	str	r2, [r3, #28]
    CDC_Handle->TxDataLength = length;
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	625a      	str	r2, [r3, #36]	; 0x24
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	2203      	movs	r2, #3
 800a068:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	2201      	movs	r2, #1
 800a070:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    Status = USBH_OK;
 800a074:	2300      	movs	r3, #0
 800a076:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2204      	movs	r2, #4
 800a07c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a08c:	2200      	movs	r2, #0
 800a08e:	4619      	mov	r1, r3
 800a090:	f006 ffa4 	bl	8010fdc <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }
  return Status;
 800a094:	7dfb      	ldrb	r3, [r7, #23]
}
 800a096:	4618      	mov	r0, r3
 800a098:	3718      	adds	r7, #24
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
	...

0800a0a0 <USBH_CDC_Receive>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b086      	sub	sp, #24
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	60b9      	str	r1, [r7, #8]
 800a0aa:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0b6:	69db      	ldr	r3, [r3, #28]
 800a0b8:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d004      	beq.n	800a0ce <USBH_CDC_Receive+0x2e>
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a0ca:	2b03      	cmp	r3, #3
 800a0cc:	d120      	bne.n	800a110 <USBH_CDC_Receive+0x70>
  {
	icListen_rx_msg_basic_header=(icListen_wav_full_header*)pbuff;
 800a0ce:	4a13      	ldr	r2, [pc, #76]	; (800a11c <USBH_CDC_Receive+0x7c>)
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	6013      	str	r3, [r2, #0]
    CDC_Handle->pRxData = pbuff;
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	68ba      	ldr	r2, [r7, #8]
 800a0d8:	621a      	str	r2, [r3, #32]
    CDC_Handle->RxDataLength = length;
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	629a      	str	r2, [r3, #40]	; 0x28
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	2203      	movs	r2, #3
 800a0e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	2203      	movs	r2, #3
 800a0ec:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    Status = USBH_OK;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2204      	movs	r2, #4
 800a0f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a108:	2200      	movs	r2, #0
 800a10a:	4619      	mov	r1, r3
 800a10c:	f006 ff66 	bl	8010fdc <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }
  return Status;
 800a110:	7dfb      	ldrb	r3, [r7, #23]
}
 800a112:	4618      	mov	r0, r3
 800a114:	3718      	adds	r7, #24
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	20001d04 	.word	0x20001d04

0800a120 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b086      	sub	sp, #24
 800a124:	af02      	add	r7, sp, #8
 800a126:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a12e:	69db      	ldr	r3, [r3, #28]
 800a130:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a132:	2300      	movs	r3, #0
 800a134:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d002      	beq.n	800a146 <CDC_ProcessTransmission+0x26>
 800a140:	2b02      	cmp	r3, #2
 800a142:	d023      	beq.n	800a18c <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a144:	e07a      	b.n	800a23c <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14a:	68fa      	ldr	r2, [r7, #12]
 800a14c:	8b12      	ldrh	r2, [r2, #24]
 800a14e:	4293      	cmp	r3, r2
 800a150:	d90b      	bls.n	800a16a <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	69d9      	ldr	r1, [r3, #28]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	8b1a      	ldrh	r2, [r3, #24]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	7b5b      	ldrb	r3, [r3, #13]
 800a15e:	2001      	movs	r0, #1
 800a160:	9000      	str	r0, [sp, #0]
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f001 fecf 	bl	800bf06 <USBH_BulkSendData>
 800a168:	e00b      	b.n	800a182 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800a172:	b29a      	uxth	r2, r3
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	7b5b      	ldrb	r3, [r3, #13]
 800a178:	2001      	movs	r0, #1
 800a17a:	9000      	str	r0, [sp, #0]
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f001 fec2 	bl	800bf06 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2202      	movs	r2, #2
 800a186:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a18a:	e057      	b.n	800a23c <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	7b5b      	ldrb	r3, [r3, #13]
 800a190:	4619      	mov	r1, r3
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f009 fbca 	bl	801392c <USBH_LL_GetURBState>
 800a198:	4603      	mov	r3, r0
 800a19a:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a19c:	7afb      	ldrb	r3, [r7, #11]
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d136      	bne.n	800a210 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a6:	68fa      	ldr	r2, [r7, #12]
 800a1a8:	8b12      	ldrh	r2, [r2, #24]
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d90e      	bls.n	800a1cc <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b2:	68fa      	ldr	r2, [r7, #12]
 800a1b4:	8b12      	ldrh	r2, [r2, #24]
 800a1b6:	1a9a      	subs	r2, r3, r2
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	69db      	ldr	r3, [r3, #28]
 800a1c0:	68fa      	ldr	r2, [r7, #12]
 800a1c2:	8b12      	ldrh	r2, [r2, #24]
 800a1c4:	441a      	add	r2, r3
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	61da      	str	r2, [r3, #28]
 800a1ca:	e002      	b.n	800a1d2 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d004      	beq.n	800a1e4 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800a1e2:	e006      	b.n	800a1f2 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f009 f92f 	bl	8013450 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2204      	movs	r2, #4
 800a1f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a206:	2200      	movs	r2, #0
 800a208:	4619      	mov	r1, r3
 800a20a:	f006 fee7 	bl	8010fdc <osMessagePut>
      break;
 800a20e:	e014      	b.n	800a23a <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800a210:	7afb      	ldrb	r3, [r7, #11]
 800a212:	2b02      	cmp	r3, #2
 800a214:	d111      	bne.n	800a23a <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2201      	movs	r2, #1
 800a21a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2204      	movs	r2, #4
 800a222:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a232:	2200      	movs	r2, #0
 800a234:	4619      	mov	r1, r3
 800a236:	f006 fed1 	bl	8010fdc <osMessagePut>
      break;
 800a23a:	bf00      	nop
  }
}
 800a23c:	bf00      	nop
 800a23e:	3710      	adds	r7, #16
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b086      	sub	sp, #24
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a252:	69db      	ldr	r3, [r3, #28]
 800a254:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a256:	2300      	movs	r3, #0
 800a258:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a260:	2b03      	cmp	r3, #3
 800a262:	d002      	beq.n	800a26a <CDC_ProcessReception+0x26>
 800a264:	2b04      	cmp	r3, #4
 800a266:	d00e      	beq.n	800a286 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a268:	e085      	b.n	800a376 <CDC_ProcessReception+0x132>
      (void)USBH_BulkReceiveData(phost,
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	6a19      	ldr	r1, [r3, #32]
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	8b5a      	ldrh	r2, [r3, #26]
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	7b1b      	ldrb	r3, [r3, #12]
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f001 fe6a 	bl	800bf50 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	2204      	movs	r2, #4
 800a280:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a284:	e077      	b.n	800a376 <CDC_ProcessReception+0x132>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	7b1b      	ldrb	r3, [r3, #12]
 800a28a:	4619      	mov	r1, r3
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f009 fb4d 	bl	801392c <USBH_LL_GetURBState>
 800a292:	4603      	mov	r3, r0
 800a294:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a296:	7cfb      	ldrb	r3, [r7, #19]
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d16b      	bne.n	800a374 <CDC_ProcessReception+0x130>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	7b1b      	ldrb	r3, [r3, #12]
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f009 fab0 	bl	8013808 <USBH_LL_GetLastXferSize>
 800a2a8:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (CDC_Handle->RxDataLength > CDC_Handle->DataItf.InEpSize))
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ae:	68fa      	ldr	r2, [r7, #12]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d04a      	beq.n	800a34a <CDC_ProcessReception+0x106>
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b8:	697a      	ldr	r2, [r7, #20]
 800a2ba:	8b52      	ldrh	r2, [r2, #26]
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d944      	bls.n	800a34a <CDC_ProcessReception+0x106>
           CDC_Handle->RxDataLength -= length ;
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	1ad2      	subs	r2, r2, r3
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	629a      	str	r2, [r3, #40]	; 0x28
           CDC_Handle->pRxData += length;
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	6a1a      	ldr	r2, [r3, #32]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	441a      	add	r2, r3
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	621a      	str	r2, [r3, #32]
           if((icListen_rx_msg_basic_header->length+6)==(USB_RX_BUFF_SIZE-CDC_Handle->RxDataLength))
 800a2d8:	4b29      	ldr	r3, [pc, #164]	; (800a380 <CDC_ProcessReception+0x13c>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	885b      	ldrh	r3, [r3, #2]
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	3306      	adds	r3, #6
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e8:	f5c3 635a 	rsb	r3, r3, #3488	; 0xda0
 800a2ec:	330c      	adds	r3, #12
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d126      	bne.n	800a340 <CDC_ProcessReception+0xfc>
               CDC_Handle->data_rx_state = CDC_IDLE;
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
               osMessagePut(USB_rxHandle, (uint8_t*)usb_rx_buff[usb_rx_buff_active], 0U);
 800a2fa:	4b22      	ldr	r3, [pc, #136]	; (800a384 <CDC_ProcessReception+0x140>)
 800a2fc:	6818      	ldr	r0, [r3, #0]
 800a2fe:	4b22      	ldr	r3, [pc, #136]	; (800a388 <CDC_ProcessReception+0x144>)
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	461a      	mov	r2, r3
 800a304:	f640 53ac 	movw	r3, #3500	; 0xdac
 800a308:	fb02 f303 	mul.w	r3, r2, r3
 800a30c:	4a1f      	ldr	r2, [pc, #124]	; (800a38c <CDC_ProcessReception+0x148>)
 800a30e:	4413      	add	r3, r2
 800a310:	2200      	movs	r2, #0
 800a312:	4619      	mov	r1, r3
 800a314:	f006 fe62 	bl	8010fdc <osMessagePut>
               usb_rx_buff_active++;
 800a318:	4b1b      	ldr	r3, [pc, #108]	; (800a388 <CDC_ProcessReception+0x144>)
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	3301      	adds	r3, #1
 800a31e:	b2da      	uxtb	r2, r3
 800a320:	4b19      	ldr	r3, [pc, #100]	; (800a388 <CDC_ProcessReception+0x144>)
 800a322:	701a      	strb	r2, [r3, #0]
               usb_rx_buff_active%=USB_RX_NUM_OF_BUFFERS;
 800a324:	4b18      	ldr	r3, [pc, #96]	; (800a388 <CDC_ProcessReception+0x144>)
 800a326:	781a      	ldrb	r2, [r3, #0]
 800a328:	4b19      	ldr	r3, [pc, #100]	; (800a390 <CDC_ProcessReception+0x14c>)
 800a32a:	fba3 1302 	umull	r1, r3, r3, r2
 800a32e:	0899      	lsrs	r1, r3, #2
 800a330:	460b      	mov	r3, r1
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	440b      	add	r3, r1
 800a336:	1ad3      	subs	r3, r2, r3
 800a338:	b2da      	uxtb	r2, r3
 800a33a:	4b13      	ldr	r3, [pc, #76]	; (800a388 <CDC_ProcessReception+0x144>)
 800a33c:	701a      	strb	r2, [r3, #0]
           if((icListen_rx_msg_basic_header->length+6)==(USB_RX_BUFF_SIZE-CDC_Handle->RxDataLength))
 800a33e:	e00b      	b.n	800a358 <CDC_ProcessReception+0x114>
         	CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	2203      	movs	r2, #3
 800a344:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
           if((icListen_rx_msg_basic_header->length+6)==(USB_RX_BUFF_SIZE-CDC_Handle->RxDataLength))
 800a348:	e006      	b.n	800a358 <CDC_ProcessReception+0x114>
           CDC_Handle->data_rx_state = CDC_IDLE;
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	2200      	movs	r2, #0
 800a34e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
           USBH_CDC_ReceiveCallback(phost);
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f009 f886 	bl	8013464 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2204      	movs	r2, #4
 800a35c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a36c:	2200      	movs	r2, #0
 800a36e:	4619      	mov	r1, r3
 800a370:	f006 fe34 	bl	8010fdc <osMessagePut>
      break;
 800a374:	bf00      	nop
  }
}
 800a376:	bf00      	nop
 800a378:	3718      	adds	r7, #24
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	20001d04 	.word	0x20001d04
 800a384:	20000940 	.word	0x20000940
 800a388:	2000c530 	.word	0x2000c530
 800a38c:	200080d4 	.word	0x200080d4
 800a390:	cccccccd 	.word	0xcccccccd

0800a394 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a39c:	bf00      	nop
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800a3a8:	b5b0      	push	{r4, r5, r7, lr}
 800a3aa:	b090      	sub	sp, #64	; 0x40
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	60f8      	str	r0, [r7, #12]
 800a3b0:	60b9      	str	r1, [r7, #8]
 800a3b2:	4613      	mov	r3, r2
 800a3b4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d101      	bne.n	800a3c0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a3bc:	2302      	movs	r3, #2
 800a3be:	e04d      	b.n	800a45c <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	79fa      	ldrb	r2, [r7, #7]
 800a3c4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a3d8:	68f8      	ldr	r0, [r7, #12]
 800a3da:	f000 f847 	bl	800a46c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d003      	beq.n	800a40c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	68ba      	ldr	r2, [r7, #8]
 800a408:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800a40c:	4b15      	ldr	r3, [pc, #84]	; (800a464 <USBH_Init+0xbc>)
 800a40e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800a412:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a414:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800a418:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a41c:	2100      	movs	r1, #0
 800a41e:	4618      	mov	r0, r3
 800a420:	f006 fdb3 	bl	8010f8a <osMessageCreate>
 800a424:	4602      	mov	r2, r0
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800a42c:	4b0e      	ldr	r3, [pc, #56]	; (800a468 <USBH_Init+0xc0>)
 800a42e:	f107 0414 	add.w	r4, r7, #20
 800a432:	461d      	mov	r5, r3
 800a434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a438:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a43c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800a440:	f107 0314 	add.w	r3, r7, #20
 800a444:	68f9      	ldr	r1, [r7, #12]
 800a446:	4618      	mov	r0, r3
 800a448:	f006 fd3f 	bl	8010eca <osThreadCreate>
 800a44c:	4602      	mov	r2, r0
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a454:	68f8      	ldr	r0, [r7, #12]
 800a456:	f009 f923 	bl	80136a0 <USBH_LL_Init>

  return USBH_OK;
 800a45a:	2300      	movs	r3, #0
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3740      	adds	r7, #64	; 0x40
 800a460:	46bd      	mov	sp, r7
 800a462:	bdb0      	pop	{r4, r5, r7, pc}
 800a464:	08015444 	.word	0x08015444
 800a468:	08015454 	.word	0x08015454

0800a46c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b085      	sub	sp, #20
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a474:	2300      	movs	r3, #0
 800a476:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a478:	2300      	movs	r3, #0
 800a47a:	60fb      	str	r3, [r7, #12]
 800a47c:	e009      	b.n	800a492 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	33e0      	adds	r3, #224	; 0xe0
 800a484:	009b      	lsls	r3, r3, #2
 800a486:	4413      	add	r3, r2
 800a488:	2200      	movs	r2, #0
 800a48a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	3301      	adds	r3, #1
 800a490:	60fb      	str	r3, [r7, #12]
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2b0f      	cmp	r3, #15
 800a496:	d9f2      	bls.n	800a47e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a498:	2300      	movs	r3, #0
 800a49a:	60fb      	str	r3, [r7, #12]
 800a49c:	e009      	b.n	800a4b2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	4413      	add	r3, r2
 800a4a4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	60fb      	str	r3, [r7, #12]
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4b8:	d3f1      	bcc.n	800a49e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2240      	movs	r2, #64	; 0x40
 800a4de:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2200      	movs	r2, #0
 800a502:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a506:	2300      	movs	r3, #0
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3714      	adds	r7, #20
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr

0800a514 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a514:	b480      	push	{r7}
 800a516:	b085      	sub	sp, #20
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a51e:	2300      	movs	r3, #0
 800a520:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d016      	beq.n	800a556 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d10e      	bne.n	800a550 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a538:	1c59      	adds	r1, r3, #1
 800a53a:	687a      	ldr	r2, [r7, #4]
 800a53c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a540:	687a      	ldr	r2, [r7, #4]
 800a542:	33de      	adds	r3, #222	; 0xde
 800a544:	6839      	ldr	r1, [r7, #0]
 800a546:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a54a:	2300      	movs	r3, #0
 800a54c:	73fb      	strb	r3, [r7, #15]
 800a54e:	e004      	b.n	800a55a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a550:	2302      	movs	r3, #2
 800a552:	73fb      	strb	r3, [r7, #15]
 800a554:	e001      	b.n	800a55a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a556:	2302      	movs	r3, #2
 800a558:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a55a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3714      	adds	r7, #20
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr

0800a568 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a568:	b480      	push	{r7}
 800a56a:	b085      	sub	sp, #20
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	460b      	mov	r3, r1
 800a572:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a574:	2300      	movs	r3, #0
 800a576:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a57e:	78fa      	ldrb	r2, [r7, #3]
 800a580:	429a      	cmp	r2, r3
 800a582:	d204      	bcs.n	800a58e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	78fa      	ldrb	r2, [r7, #3]
 800a588:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a58c:	e001      	b.n	800a592 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a58e:	2302      	movs	r3, #2
 800a590:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a592:	7bfb      	ldrb	r3, [r7, #15]
}
 800a594:	4618      	mov	r0, r3
 800a596:	3714      	adds	r7, #20
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b087      	sub	sp, #28
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	4608      	mov	r0, r1
 800a5aa:	4611      	mov	r1, r2
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	70fb      	strb	r3, [r7, #3]
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	70bb      	strb	r3, [r7, #2]
 800a5b6:	4613      	mov	r3, r2
 800a5b8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a5c8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a5ca:	e025      	b.n	800a618 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a5cc:	7dfb      	ldrb	r3, [r7, #23]
 800a5ce:	221a      	movs	r2, #26
 800a5d0:	fb02 f303 	mul.w	r3, r2, r3
 800a5d4:	3308      	adds	r3, #8
 800a5d6:	68fa      	ldr	r2, [r7, #12]
 800a5d8:	4413      	add	r3, r2
 800a5da:	3302      	adds	r3, #2
 800a5dc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	795b      	ldrb	r3, [r3, #5]
 800a5e2:	78fa      	ldrb	r2, [r7, #3]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d002      	beq.n	800a5ee <USBH_FindInterface+0x4e>
 800a5e8:	78fb      	ldrb	r3, [r7, #3]
 800a5ea:	2bff      	cmp	r3, #255	; 0xff
 800a5ec:	d111      	bne.n	800a612 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a5f2:	78ba      	ldrb	r2, [r7, #2]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d002      	beq.n	800a5fe <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a5f8:	78bb      	ldrb	r3, [r7, #2]
 800a5fa:	2bff      	cmp	r3, #255	; 0xff
 800a5fc:	d109      	bne.n	800a612 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a602:	787a      	ldrb	r2, [r7, #1]
 800a604:	429a      	cmp	r2, r3
 800a606:	d002      	beq.n	800a60e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a608:	787b      	ldrb	r3, [r7, #1]
 800a60a:	2bff      	cmp	r3, #255	; 0xff
 800a60c:	d101      	bne.n	800a612 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a60e:	7dfb      	ldrb	r3, [r7, #23]
 800a610:	e006      	b.n	800a620 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a612:	7dfb      	ldrb	r3, [r7, #23]
 800a614:	3301      	adds	r3, #1
 800a616:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a618:	7dfb      	ldrb	r3, [r7, #23]
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d9d6      	bls.n	800a5cc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a61e:	23ff      	movs	r3, #255	; 0xff
}
 800a620:	4618      	mov	r0, r3
 800a622:	371c      	adds	r7, #28
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f009 f86f 	bl	8013718 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a63a:	2101      	movs	r1, #1
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f009 f988 	bl	8013952 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	3708      	adds	r7, #8
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b088      	sub	sp, #32
 800a650:	af04      	add	r7, sp, #16
 800a652:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a654:	2302      	movs	r3, #2
 800a656:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a658:	2300      	movs	r3, #0
 800a65a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a662:	b2db      	uxtb	r3, r3
 800a664:	2b01      	cmp	r3, #1
 800a666:	d102      	bne.n	800a66e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2203      	movs	r2, #3
 800a66c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	b2db      	uxtb	r3, r3
 800a674:	2b0b      	cmp	r3, #11
 800a676:	f200 8247 	bhi.w	800ab08 <USBH_Process+0x4bc>
 800a67a:	a201      	add	r2, pc, #4	; (adr r2, 800a680 <USBH_Process+0x34>)
 800a67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a680:	0800a6b1 	.word	0x0800a6b1
 800a684:	0800a6ff 	.word	0x0800a6ff
 800a688:	0800a783 	.word	0x0800a783
 800a68c:	0800aa87 	.word	0x0800aa87
 800a690:	0800ab09 	.word	0x0800ab09
 800a694:	0800a843 	.word	0x0800a843
 800a698:	0800aa11 	.word	0x0800aa11
 800a69c:	0800a895 	.word	0x0800a895
 800a6a0:	0800a8d1 	.word	0x0800a8d1
 800a6a4:	0800a90b 	.word	0x0800a90b
 800a6a8:	0800a969 	.word	0x0800a969
 800a6ac:	0800aa6f 	.word	0x0800aa6f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	f000 8227 	beq.w	800ab0c <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a6c4:	20c8      	movs	r0, #200	; 0xc8
 800a6c6:	f009 f98b 	bl	80139e0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f009 f881 	bl	80137d2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	f006 fc70 	bl	8010fdc <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a6fc:	e206      	b.n	800ab0c <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a704:	2b01      	cmp	r3, #1
 800a706:	d107      	bne.n	800a718 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2202      	movs	r2, #2
 800a714:	701a      	strb	r2, [r3, #0]
 800a716:	e025      	b.n	800a764 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a71e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a722:	d914      	bls.n	800a74e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a72a:	3301      	adds	r3, #1
 800a72c:	b2da      	uxtb	r2, r3
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a73a:	2b03      	cmp	r3, #3
 800a73c:	d903      	bls.n	800a746 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	220d      	movs	r2, #13
 800a742:	701a      	strb	r2, [r3, #0]
 800a744:	e00e      	b.n	800a764 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2200      	movs	r2, #0
 800a74a:	701a      	strb	r2, [r3, #0]
 800a74c:	e00a      	b.n	800a764 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a754:	f103 020a 	add.w	r2, r3, #10
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a75e:	200a      	movs	r0, #10
 800a760:	f009 f93e 	bl	80139e0 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2201      	movs	r2, #1
 800a768:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a778:	2200      	movs	r2, #0
 800a77a:	4619      	mov	r1, r3
 800a77c:	f006 fc2e 	bl	8010fdc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a780:	e1cb      	b.n	800ab1a <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d005      	beq.n	800a798 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a792:	2104      	movs	r1, #4
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a798:	2064      	movs	r0, #100	; 0x64
 800a79a:	f009 f921 	bl	80139e0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f008 fff0 	bl	8013784 <USBH_LL_GetSpeed>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2205      	movs	r2, #5
 800a7b2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f001 fc17 	bl	800bfea <USBH_AllocPipe>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	461a      	mov	r2, r3
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a7c4:	2180      	movs	r1, #128	; 0x80
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f001 fc0f 	bl	800bfea <USBH_AllocPipe>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	7919      	ldrb	r1, [r3, #4]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a7e8:	b292      	uxth	r2, r2
 800a7ea:	9202      	str	r2, [sp, #8]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	9201      	str	r2, [sp, #4]
 800a7f0:	9300      	str	r3, [sp, #0]
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	2280      	movs	r2, #128	; 0x80
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f001 fbc8 	bl	800bf8c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	7959      	ldrb	r1, [r3, #5]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a810:	b292      	uxth	r2, r2
 800a812:	9202      	str	r2, [sp, #8]
 800a814:	2200      	movs	r2, #0
 800a816:	9201      	str	r2, [sp, #4]
 800a818:	9300      	str	r3, [sp, #0]
 800a81a:	4603      	mov	r3, r0
 800a81c:	2200      	movs	r2, #0
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f001 fbb4 	bl	800bf8c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2201      	movs	r2, #1
 800a828:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a838:	2200      	movs	r2, #0
 800a83a:	4619      	mov	r1, r3
 800a83c:	f006 fbce 	bl	8010fdc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a840:	e16b      	b.n	800ab1a <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 f96e 	bl	800ab24 <USBH_HandleEnum>
 800a848:	4603      	mov	r3, r0
 800a84a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a84c:	7bbb      	ldrb	r3, [r7, #14]
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	2b00      	cmp	r3, #0
 800a852:	f040 815d 	bne.w	800ab10 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a864:	2b01      	cmp	r3, #1
 800a866:	d103      	bne.n	800a870 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2208      	movs	r2, #8
 800a86c:	701a      	strb	r2, [r3, #0]
 800a86e:	e002      	b.n	800a876 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2207      	movs	r2, #7
 800a874:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2205      	movs	r2, #5
 800a87a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a88a:	2200      	movs	r2, #0
 800a88c:	4619      	mov	r1, r3
 800a88e:	f006 fba5 	bl	8010fdc <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a892:	e13d      	b.n	800ab10 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	f000 813a 	beq.w	800ab14 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a8a6:	2101      	movs	r1, #1
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2208      	movs	r2, #8
 800a8b0:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2205      	movs	r2, #5
 800a8b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	f006 fb87 	bl	8010fdc <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800a8ce:	e121      	b.n	800ab14 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	4619      	mov	r1, r3
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 fd00 	bl	800b2e0 <USBH_SetCfg>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d102      	bne.n	800a8ec <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2209      	movs	r2, #9
 800a8ea:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a900:	2200      	movs	r2, #0
 800a902:	4619      	mov	r1, r3
 800a904:	f006 fb6a 	bl	8010fdc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a908:	e107      	b.n	800ab1a <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a910:	f003 0320 	and.w	r3, r3, #32
 800a914:	2b00      	cmp	r3, #0
 800a916:	d015      	beq.n	800a944 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a918:	2101      	movs	r1, #1
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 fd03 	bl	800b326 <USBH_SetFeature>
 800a920:	4603      	mov	r3, r0
 800a922:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a924:	7bbb      	ldrb	r3, [r7, #14]
 800a926:	b2db      	uxtb	r3, r3
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d103      	bne.n	800a934 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	220a      	movs	r2, #10
 800a930:	701a      	strb	r2, [r3, #0]
 800a932:	e00a      	b.n	800a94a <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800a934:	7bbb      	ldrb	r3, [r7, #14]
 800a936:	b2db      	uxtb	r3, r3
 800a938:	2b03      	cmp	r3, #3
 800a93a:	d106      	bne.n	800a94a <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	220a      	movs	r2, #10
 800a940:	701a      	strb	r2, [r3, #0]
 800a942:	e002      	b.n	800a94a <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	220a      	movs	r2, #10
 800a948:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2201      	movs	r2, #1
 800a94e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a95e:	2200      	movs	r2, #0
 800a960:	4619      	mov	r1, r3
 800a962:	f006 fb3b 	bl	8010fdc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a966:	e0d8      	b.n	800ab1a <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d03f      	beq.n	800a9f2 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2200      	movs	r2, #0
 800a976:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a97a:	2300      	movs	r3, #0
 800a97c:	73fb      	strb	r3, [r7, #15]
 800a97e:	e016      	b.n	800a9ae <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a980:	7bfa      	ldrb	r2, [r7, #15]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	32de      	adds	r2, #222	; 0xde
 800a986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a98a:	791a      	ldrb	r2, [r3, #4]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a992:	429a      	cmp	r2, r3
 800a994:	d108      	bne.n	800a9a8 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a996:	7bfa      	ldrb	r2, [r7, #15]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	32de      	adds	r2, #222	; 0xde
 800a99c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a9a6:	e005      	b.n	800a9b4 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a9a8:	7bfb      	ldrb	r3, [r7, #15]
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	73fb      	strb	r3, [r7, #15]
 800a9ae:	7bfb      	ldrb	r3, [r7, #15]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d0e5      	beq.n	800a980 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d016      	beq.n	800a9ec <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9c4:	689b      	ldr	r3, [r3, #8]
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	4798      	blx	r3
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d109      	bne.n	800a9e4 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2206      	movs	r2, #6
 800a9d4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a9dc:	2103      	movs	r1, #3
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	4798      	blx	r3
 800a9e2:	e006      	b.n	800a9f2 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	220d      	movs	r2, #13
 800a9e8:	701a      	strb	r2, [r3, #0]
 800a9ea:	e002      	b.n	800a9f2 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	220d      	movs	r2, #13
 800a9f0:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2205      	movs	r2, #5
 800a9f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aa06:	2200      	movs	r2, #0
 800aa08:	4619      	mov	r1, r3
 800aa0a:	f006 fae7 	bl	8010fdc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aa0e:	e084      	b.n	800ab1a <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d017      	beq.n	800aa4a <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa20:	691b      	ldr	r3, [r3, #16]
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	4798      	blx	r3
 800aa26:	4603      	mov	r3, r0
 800aa28:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800aa2a:	7bbb      	ldrb	r3, [r7, #14]
 800aa2c:	b2db      	uxtb	r3, r3
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d103      	bne.n	800aa3a <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	220b      	movs	r2, #11
 800aa36:	701a      	strb	r2, [r3, #0]
 800aa38:	e00a      	b.n	800aa50 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 800aa3a:	7bbb      	ldrb	r3, [r7, #14]
 800aa3c:	b2db      	uxtb	r3, r3
 800aa3e:	2b02      	cmp	r3, #2
 800aa40:	d106      	bne.n	800aa50 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	220d      	movs	r2, #13
 800aa46:	701a      	strb	r2, [r3, #0]
 800aa48:	e002      	b.n	800aa50 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	220d      	movs	r2, #13
 800aa4e:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2205      	movs	r2, #5
 800aa54:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aa64:	2200      	movs	r2, #0
 800aa66:	4619      	mov	r1, r3
 800aa68:	f006 fab8 	bl	8010fdc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aa6c:	e055      	b.n	800ab1a <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d04f      	beq.n	800ab18 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa7e:	695b      	ldr	r3, [r3, #20]
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	4798      	blx	r3
      }
      break;
 800aa84:	e048      	b.n	800ab18 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f7ff fcec 	bl	800a46c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d009      	beq.n	800aab2 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aaa4:	68db      	ldr	r3, [r3, #12]
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2200      	movs	r2, #0
 800aaae:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d005      	beq.n	800aac8 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aac2:	2105      	movs	r1, #5
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800aace:	b2db      	uxtb	r3, r3
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d107      	bne.n	800aae4 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2200      	movs	r2, #0
 800aad8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f7ff fda5 	bl	800a62c <USBH_Start>
 800aae2:	e002      	b.n	800aaea <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f008 fe17 	bl	8013718 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2201      	movs	r2, #1
 800aaee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aafe:	2200      	movs	r2, #0
 800ab00:	4619      	mov	r1, r3
 800ab02:	f006 fa6b 	bl	8010fdc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ab06:	e008      	b.n	800ab1a <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 800ab08:	bf00      	nop
 800ab0a:	e006      	b.n	800ab1a <USBH_Process+0x4ce>
      break;
 800ab0c:	bf00      	nop
 800ab0e:	e004      	b.n	800ab1a <USBH_Process+0x4ce>
      break;
 800ab10:	bf00      	nop
 800ab12:	e002      	b.n	800ab1a <USBH_Process+0x4ce>
    break;
 800ab14:	bf00      	nop
 800ab16:	e000      	b.n	800ab1a <USBH_Process+0x4ce>
      break;
 800ab18:	bf00      	nop
  }
  return USBH_OK;
 800ab1a:	2300      	movs	r3, #0
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3710      	adds	r7, #16
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b088      	sub	sp, #32
 800ab28:	af04      	add	r7, sp, #16
 800ab2a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ab30:	2301      	movs	r3, #1
 800ab32:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	785b      	ldrb	r3, [r3, #1]
 800ab38:	2b07      	cmp	r3, #7
 800ab3a:	f200 8208 	bhi.w	800af4e <USBH_HandleEnum+0x42a>
 800ab3e:	a201      	add	r2, pc, #4	; (adr r2, 800ab44 <USBH_HandleEnum+0x20>)
 800ab40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab44:	0800ab65 	.word	0x0800ab65
 800ab48:	0800ac23 	.word	0x0800ac23
 800ab4c:	0800ac8d 	.word	0x0800ac8d
 800ab50:	0800ad1b 	.word	0x0800ad1b
 800ab54:	0800ad85 	.word	0x0800ad85
 800ab58:	0800adf5 	.word	0x0800adf5
 800ab5c:	0800ae91 	.word	0x0800ae91
 800ab60:	0800af0f 	.word	0x0800af0f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ab64:	2108      	movs	r1, #8
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 faea 	bl	800b140 <USBH_Get_DevDesc>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ab70:	7bbb      	ldrb	r3, [r7, #14]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d130      	bne.n	800abd8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2201      	movs	r2, #1
 800ab84:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	7919      	ldrb	r1, [r3, #4]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ab9a:	b292      	uxth	r2, r2
 800ab9c:	9202      	str	r2, [sp, #8]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	9201      	str	r2, [sp, #4]
 800aba2:	9300      	str	r3, [sp, #0]
 800aba4:	4603      	mov	r3, r0
 800aba6:	2280      	movs	r2, #128	; 0x80
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f001 f9ef 	bl	800bf8c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	7959      	ldrb	r1, [r3, #5]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800abc2:	b292      	uxth	r2, r2
 800abc4:	9202      	str	r2, [sp, #8]
 800abc6:	2200      	movs	r2, #0
 800abc8:	9201      	str	r2, [sp, #4]
 800abca:	9300      	str	r3, [sp, #0]
 800abcc:	4603      	mov	r3, r0
 800abce:	2200      	movs	r2, #0
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f001 f9db 	bl	800bf8c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800abd6:	e1bc      	b.n	800af52 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800abd8:	7bbb      	ldrb	r3, [r7, #14]
 800abda:	2b03      	cmp	r3, #3
 800abdc:	f040 81b9 	bne.w	800af52 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800abe6:	3301      	adds	r3, #1
 800abe8:	b2da      	uxtb	r2, r3
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800abf6:	2b03      	cmp	r3, #3
 800abf8:	d903      	bls.n	800ac02 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	220d      	movs	r2, #13
 800abfe:	701a      	strb	r2, [r3, #0]
      break;
 800ac00:	e1a7      	b.n	800af52 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	795b      	ldrb	r3, [r3, #5]
 800ac06:	4619      	mov	r1, r3
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f001 fa0f 	bl	800c02c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	791b      	ldrb	r3, [r3, #4]
 800ac12:	4619      	mov	r1, r3
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f001 fa09 	bl	800c02c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	701a      	strb	r2, [r3, #0]
      break;
 800ac20:	e197      	b.n	800af52 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ac22:	2112      	movs	r1, #18
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f000 fa8b 	bl	800b140 <USBH_Get_DevDesc>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ac2e:	7bbb      	ldrb	r3, [r7, #14]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d103      	bne.n	800ac3c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2202      	movs	r2, #2
 800ac38:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ac3a:	e18c      	b.n	800af56 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac3c:	7bbb      	ldrb	r3, [r7, #14]
 800ac3e:	2b03      	cmp	r3, #3
 800ac40:	f040 8189 	bne.w	800af56 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	b2da      	uxtb	r2, r3
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac5a:	2b03      	cmp	r3, #3
 800ac5c:	d903      	bls.n	800ac66 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	220d      	movs	r2, #13
 800ac62:	701a      	strb	r2, [r3, #0]
      break;
 800ac64:	e177      	b.n	800af56 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	795b      	ldrb	r3, [r3, #5]
 800ac6a:	4619      	mov	r1, r3
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f001 f9dd 	bl	800c02c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	791b      	ldrb	r3, [r3, #4]
 800ac76:	4619      	mov	r1, r3
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f001 f9d7 	bl	800c02c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2200      	movs	r2, #0
 800ac82:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	701a      	strb	r2, [r3, #0]
      break;
 800ac8a:	e164      	b.n	800af56 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ac8c:	2101      	movs	r1, #1
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 fb02 	bl	800b298 <USBH_SetAddress>
 800ac94:	4603      	mov	r3, r0
 800ac96:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ac98:	7bbb      	ldrb	r3, [r7, #14]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d132      	bne.n	800ad04 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800ac9e:	2002      	movs	r0, #2
 800aca0:	f008 fe9e 	bl	80139e0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2201      	movs	r2, #1
 800aca8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2203      	movs	r2, #3
 800acb0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	7919      	ldrb	r1, [r3, #4]
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800acc2:	687a      	ldr	r2, [r7, #4]
 800acc4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800acc6:	b292      	uxth	r2, r2
 800acc8:	9202      	str	r2, [sp, #8]
 800acca:	2200      	movs	r2, #0
 800accc:	9201      	str	r2, [sp, #4]
 800acce:	9300      	str	r3, [sp, #0]
 800acd0:	4603      	mov	r3, r0
 800acd2:	2280      	movs	r2, #128	; 0x80
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f001 f959 	bl	800bf8c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	7959      	ldrb	r1, [r3, #5]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800acea:	687a      	ldr	r2, [r7, #4]
 800acec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800acee:	b292      	uxth	r2, r2
 800acf0:	9202      	str	r2, [sp, #8]
 800acf2:	2200      	movs	r2, #0
 800acf4:	9201      	str	r2, [sp, #4]
 800acf6:	9300      	str	r3, [sp, #0]
 800acf8:	4603      	mov	r3, r0
 800acfa:	2200      	movs	r2, #0
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f001 f945 	bl	800bf8c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ad02:	e12a      	b.n	800af5a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad04:	7bbb      	ldrb	r3, [r7, #14]
 800ad06:	2b03      	cmp	r3, #3
 800ad08:	f040 8127 	bne.w	800af5a <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	220d      	movs	r2, #13
 800ad10:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2200      	movs	r2, #0
 800ad16:	705a      	strb	r2, [r3, #1]
      break;
 800ad18:	e11f      	b.n	800af5a <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ad1a:	2109      	movs	r1, #9
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f000 fa37 	bl	800b190 <USBH_Get_CfgDesc>
 800ad22:	4603      	mov	r3, r0
 800ad24:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ad26:	7bbb      	ldrb	r3, [r7, #14]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d103      	bne.n	800ad34 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2204      	movs	r2, #4
 800ad30:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ad32:	e114      	b.n	800af5e <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad34:	7bbb      	ldrb	r3, [r7, #14]
 800ad36:	2b03      	cmp	r3, #3
 800ad38:	f040 8111 	bne.w	800af5e <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ad42:	3301      	adds	r3, #1
 800ad44:	b2da      	uxtb	r2, r3
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ad52:	2b03      	cmp	r3, #3
 800ad54:	d903      	bls.n	800ad5e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	220d      	movs	r2, #13
 800ad5a:	701a      	strb	r2, [r3, #0]
      break;
 800ad5c:	e0ff      	b.n	800af5e <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	795b      	ldrb	r3, [r3, #5]
 800ad62:	4619      	mov	r1, r3
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f001 f961 	bl	800c02c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	791b      	ldrb	r3, [r3, #4]
 800ad6e:	4619      	mov	r1, r3
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f001 f95b 	bl	800c02c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	701a      	strb	r2, [r3, #0]
      break;
 800ad82:	e0ec      	b.n	800af5e <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800ad8a:	4619      	mov	r1, r3
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 f9ff 	bl	800b190 <USBH_Get_CfgDesc>
 800ad92:	4603      	mov	r3, r0
 800ad94:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ad96:	7bbb      	ldrb	r3, [r7, #14]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d103      	bne.n	800ada4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2205      	movs	r2, #5
 800ada0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ada2:	e0de      	b.n	800af62 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ada4:	7bbb      	ldrb	r3, [r7, #14]
 800ada6:	2b03      	cmp	r3, #3
 800ada8:	f040 80db 	bne.w	800af62 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800adb2:	3301      	adds	r3, #1
 800adb4:	b2da      	uxtb	r2, r3
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800adc2:	2b03      	cmp	r3, #3
 800adc4:	d903      	bls.n	800adce <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	220d      	movs	r2, #13
 800adca:	701a      	strb	r2, [r3, #0]
      break;
 800adcc:	e0c9      	b.n	800af62 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	795b      	ldrb	r3, [r3, #5]
 800add2:	4619      	mov	r1, r3
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f001 f929 	bl	800c02c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	791b      	ldrb	r3, [r3, #4]
 800adde:	4619      	mov	r1, r3
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f001 f923 	bl	800c02c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	701a      	strb	r2, [r3, #0]
      break;
 800adf2:	e0b6      	b.n	800af62 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d036      	beq.n	800ae6c <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ae0a:	23ff      	movs	r3, #255	; 0xff
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 f9e3 	bl	800b1d8 <USBH_Get_StringDesc>
 800ae12:	4603      	mov	r3, r0
 800ae14:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ae16:	7bbb      	ldrb	r3, [r7, #14]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d111      	bne.n	800ae40 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2206      	movs	r2, #6
 800ae20:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2205      	movs	r2, #5
 800ae26:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae36:	2200      	movs	r2, #0
 800ae38:	4619      	mov	r1, r3
 800ae3a:	f006 f8cf 	bl	8010fdc <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ae3e:	e092      	b.n	800af66 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae40:	7bbb      	ldrb	r3, [r7, #14]
 800ae42:	2b03      	cmp	r3, #3
 800ae44:	f040 808f 	bne.w	800af66 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2206      	movs	r2, #6
 800ae4c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2205      	movs	r2, #5
 800ae52:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae62:	2200      	movs	r2, #0
 800ae64:	4619      	mov	r1, r3
 800ae66:	f006 f8b9 	bl	8010fdc <osMessagePut>
      break;
 800ae6a:	e07c      	b.n	800af66 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2206      	movs	r2, #6
 800ae70:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2205      	movs	r2, #5
 800ae76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae86:	2200      	movs	r2, #0
 800ae88:	4619      	mov	r1, r3
 800ae8a:	f006 f8a7 	bl	8010fdc <osMessagePut>
      break;
 800ae8e:	e06a      	b.n	800af66 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d027      	beq.n	800aeea <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800aea6:	23ff      	movs	r3, #255	; 0xff
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 f995 	bl	800b1d8 <USBH_Get_StringDesc>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aeb2:	7bbb      	ldrb	r3, [r7, #14]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d103      	bne.n	800aec0 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2207      	movs	r2, #7
 800aebc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800aebe:	e054      	b.n	800af6a <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aec0:	7bbb      	ldrb	r3, [r7, #14]
 800aec2:	2b03      	cmp	r3, #3
 800aec4:	d151      	bne.n	800af6a <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2207      	movs	r2, #7
 800aeca:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2205      	movs	r2, #5
 800aed0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aee0:	2200      	movs	r2, #0
 800aee2:	4619      	mov	r1, r3
 800aee4:	f006 f87a 	bl	8010fdc <osMessagePut>
      break;
 800aee8:	e03f      	b.n	800af6a <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2207      	movs	r2, #7
 800aeee:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2205      	movs	r2, #5
 800aef4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800af04:	2200      	movs	r2, #0
 800af06:	4619      	mov	r1, r3
 800af08:	f006 f868 	bl	8010fdc <osMessagePut>
      break;
 800af0c:	e02d      	b.n	800af6a <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800af14:	2b00      	cmp	r3, #0
 800af16:	d017      	beq.n	800af48 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800af24:	23ff      	movs	r3, #255	; 0xff
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f000 f956 	bl	800b1d8 <USBH_Get_StringDesc>
 800af2c:	4603      	mov	r3, r0
 800af2e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800af30:	7bbb      	ldrb	r3, [r7, #14]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d102      	bne.n	800af3c <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800af36:	2300      	movs	r3, #0
 800af38:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800af3a:	e018      	b.n	800af6e <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af3c:	7bbb      	ldrb	r3, [r7, #14]
 800af3e:	2b03      	cmp	r3, #3
 800af40:	d115      	bne.n	800af6e <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800af42:	2300      	movs	r3, #0
 800af44:	73fb      	strb	r3, [r7, #15]
      break;
 800af46:	e012      	b.n	800af6e <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800af48:	2300      	movs	r3, #0
 800af4a:	73fb      	strb	r3, [r7, #15]
      break;
 800af4c:	e00f      	b.n	800af6e <USBH_HandleEnum+0x44a>

    default:
      break;
 800af4e:	bf00      	nop
 800af50:	e00e      	b.n	800af70 <USBH_HandleEnum+0x44c>
      break;
 800af52:	bf00      	nop
 800af54:	e00c      	b.n	800af70 <USBH_HandleEnum+0x44c>
      break;
 800af56:	bf00      	nop
 800af58:	e00a      	b.n	800af70 <USBH_HandleEnum+0x44c>
      break;
 800af5a:	bf00      	nop
 800af5c:	e008      	b.n	800af70 <USBH_HandleEnum+0x44c>
      break;
 800af5e:	bf00      	nop
 800af60:	e006      	b.n	800af70 <USBH_HandleEnum+0x44c>
      break;
 800af62:	bf00      	nop
 800af64:	e004      	b.n	800af70 <USBH_HandleEnum+0x44c>
      break;
 800af66:	bf00      	nop
 800af68:	e002      	b.n	800af70 <USBH_HandleEnum+0x44c>
      break;
 800af6a:	bf00      	nop
 800af6c:	e000      	b.n	800af70 <USBH_HandleEnum+0x44c>
      break;
 800af6e:	bf00      	nop
  }
  return Status;
 800af70:	7bfb      	ldrb	r3, [r7, #15]
}
 800af72:	4618      	mov	r0, r3
 800af74:	3710      	adds	r7, #16
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop

0800af7c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b083      	sub	sp, #12
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	683a      	ldr	r2, [r7, #0]
 800af8a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800af8e:	bf00      	nop
 800af90:	370c      	adds	r7, #12
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr

0800af9a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800af9a:	b580      	push	{r7, lr}
 800af9c:	b082      	sub	sp, #8
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800afa8:	1c5a      	adds	r2, r3, #1
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 f804 	bl	800afbe <USBH_HandleSof>
}
 800afb6:	bf00      	nop
 800afb8:	3708      	adds	r7, #8
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}

0800afbe <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b082      	sub	sp, #8
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	2b0b      	cmp	r3, #11
 800afce:	d10a      	bne.n	800afe6 <USBH_HandleSof+0x28>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d005      	beq.n	800afe6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800afe0:	699b      	ldr	r3, [r3, #24]
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	4798      	blx	r3
  }
}
 800afe6:	bf00      	nop
 800afe8:	3708      	adds	r7, #8
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}

0800afee <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800afee:	b580      	push	{r7, lr}
 800aff0:	b082      	sub	sp, #8
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2201      	movs	r2, #1
 800affa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2201      	movs	r2, #1
 800b002:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b012:	2200      	movs	r2, #0
 800b014:	4619      	mov	r1, r3
 800b016:	f005 ffe1 	bl	8010fdc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800b01a:	bf00      	nop
}
 800b01c:	3708      	adds	r7, #8
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}

0800b022 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b022:	b480      	push	{r7}
 800b024:	b083      	sub	sp, #12
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2200      	movs	r2, #0
 800b02e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b032:	bf00      	nop
}
 800b034:	370c      	adds	r7, #12
 800b036:	46bd      	mov	sp, r7
 800b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03c:	4770      	bx	lr

0800b03e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b03e:	b580      	push	{r7, lr}
 800b040:	b082      	sub	sp, #8
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2201      	movs	r2, #1
 800b04a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2200      	movs	r2, #0
 800b052:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2201      	movs	r2, #1
 800b062:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b072:	2200      	movs	r2, #0
 800b074:	4619      	mov	r1, r3
 800b076:	f005 ffb1 	bl	8010fdc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b07a:	2300      	movs	r3, #0
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3708      	adds	r7, #8
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2201      	movs	r2, #1
 800b090:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2200      	movs	r2, #0
 800b098:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f008 fb52 	bl	801374e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	791b      	ldrb	r3, [r3, #4]
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f000 ffbb 	bl	800c02c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	795b      	ldrb	r3, [r3, #5]
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f000 ffb5 	bl	800c02c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	4619      	mov	r1, r3
 800b0da:	f005 ff7f 	bl	8010fdc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b0de:	2300      	movs	r3, #0
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3708      	adds	r7, #8
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b086      	sub	sp, #24
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800b0f6:	f107 030c 	add.w	r3, r7, #12
 800b0fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b0fe:	4618      	mov	r0, r3
 800b100:	f005 ffac 	bl	801105c <osMessageGet>
    if (event.status == osEventMessage)
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2b10      	cmp	r3, #16
 800b108:	d1f2      	bne.n	800b0f0 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f7ff fa9e 	bl	800a64c <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800b110:	e7ee      	b.n	800b0f0 <USBH_Process_OS+0x8>

0800b112 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b082      	sub	sp, #8
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2201      	movs	r2, #1
 800b11e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b12e:	2200      	movs	r2, #0
 800b130:	4619      	mov	r1, r3
 800b132:	f005 ff53 	bl	8010fdc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800b136:	2300      	movs	r3, #0
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3708      	adds	r7, #8
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b086      	sub	sp, #24
 800b144:	af02      	add	r7, sp, #8
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	460b      	mov	r3, r1
 800b14a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b152:	78fb      	ldrb	r3, [r7, #3]
 800b154:	b29b      	uxth	r3, r3
 800b156:	9300      	str	r3, [sp, #0]
 800b158:	4613      	mov	r3, r2
 800b15a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b15e:	2100      	movs	r1, #0
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 f864 	bl	800b22e <USBH_GetDescriptor>
 800b166:	4603      	mov	r3, r0
 800b168:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800b16a:	7bfb      	ldrb	r3, [r7, #15]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d10a      	bne.n	800b186 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b17c:	78fa      	ldrb	r2, [r7, #3]
 800b17e:	b292      	uxth	r2, r2
 800b180:	4619      	mov	r1, r3
 800b182:	f000 f918 	bl	800b3b6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b186:	7bfb      	ldrb	r3, [r7, #15]
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3710      	adds	r7, #16
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b190:	b580      	push	{r7, lr}
 800b192:	b086      	sub	sp, #24
 800b194:	af02      	add	r7, sp, #8
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	460b      	mov	r3, r1
 800b19a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	331c      	adds	r3, #28
 800b1a0:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b1a2:	887b      	ldrh	r3, [r7, #2]
 800b1a4:	9300      	str	r3, [sp, #0]
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b1ac:	2100      	movs	r1, #0
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 f83d 	bl	800b22e <USBH_GetDescriptor>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b1b8:	7bfb      	ldrb	r3, [r7, #15]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d107      	bne.n	800b1ce <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b1be:	887b      	ldrh	r3, [r7, #2]
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	68b9      	ldr	r1, [r7, #8]
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 f987 	bl	800b4d8 <USBH_ParseCfgDesc>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b1ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3710      	adds	r7, #16
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b088      	sub	sp, #32
 800b1dc:	af02      	add	r7, sp, #8
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	607a      	str	r2, [r7, #4]
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	460b      	mov	r3, r1
 800b1e6:	72fb      	strb	r3, [r7, #11]
 800b1e8:	4613      	mov	r3, r2
 800b1ea:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800b1ec:	7afb      	ldrb	r3, [r7, #11]
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b1f4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b1fc:	893b      	ldrh	r3, [r7, #8]
 800b1fe:	9300      	str	r3, [sp, #0]
 800b200:	460b      	mov	r3, r1
 800b202:	2100      	movs	r1, #0
 800b204:	68f8      	ldr	r0, [r7, #12]
 800b206:	f000 f812 	bl	800b22e <USBH_GetDescriptor>
 800b20a:	4603      	mov	r3, r0
 800b20c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b20e:	7dfb      	ldrb	r3, [r7, #23]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d107      	bne.n	800b224 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b21a:	893a      	ldrh	r2, [r7, #8]
 800b21c:	6879      	ldr	r1, [r7, #4]
 800b21e:	4618      	mov	r0, r3
 800b220:	f000 fb24 	bl	800b86c <USBH_ParseStringDesc>
  }

  return status;
 800b224:	7dfb      	ldrb	r3, [r7, #23]
}
 800b226:	4618      	mov	r0, r3
 800b228:	3718      	adds	r7, #24
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}

0800b22e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b22e:	b580      	push	{r7, lr}
 800b230:	b084      	sub	sp, #16
 800b232:	af00      	add	r7, sp, #0
 800b234:	60f8      	str	r0, [r7, #12]
 800b236:	607b      	str	r3, [r7, #4]
 800b238:	460b      	mov	r3, r1
 800b23a:	72fb      	strb	r3, [r7, #11]
 800b23c:	4613      	mov	r3, r2
 800b23e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	789b      	ldrb	r3, [r3, #2]
 800b244:	2b01      	cmp	r3, #1
 800b246:	d11c      	bne.n	800b282 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b248:	7afb      	ldrb	r3, [r7, #11]
 800b24a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b24e:	b2da      	uxtb	r2, r3
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2206      	movs	r2, #6
 800b258:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	893a      	ldrh	r2, [r7, #8]
 800b25e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b260:	893b      	ldrh	r3, [r7, #8]
 800b262:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b266:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b26a:	d104      	bne.n	800b276 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f240 4209 	movw	r2, #1033	; 0x409
 800b272:	829a      	strh	r2, [r3, #20]
 800b274:	e002      	b.n	800b27c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2200      	movs	r2, #0
 800b27a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	8b3a      	ldrh	r2, [r7, #24]
 800b280:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b282:	8b3b      	ldrh	r3, [r7, #24]
 800b284:	461a      	mov	r2, r3
 800b286:	6879      	ldr	r1, [r7, #4]
 800b288:	68f8      	ldr	r0, [r7, #12]
 800b28a:	f000 fb3d 	bl	800b908 <USBH_CtlReq>
 800b28e:	4603      	mov	r3, r0
}
 800b290:	4618      	mov	r0, r3
 800b292:	3710      	adds	r7, #16
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	460b      	mov	r3, r1
 800b2a2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	789b      	ldrb	r3, [r3, #2]
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	d10f      	bne.n	800b2cc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2205      	movs	r2, #5
 800b2b6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b2b8:	78fb      	ldrb	r3, [r7, #3]
 800b2ba:	b29a      	uxth	r2, r3
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	2100      	movs	r1, #0
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f000 fb19 	bl	800b908 <USBH_CtlReq>
 800b2d6:	4603      	mov	r3, r0
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3708      	adds	r7, #8
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b082      	sub	sp, #8
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	460b      	mov	r3, r1
 800b2ea:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	789b      	ldrb	r3, [r3, #2]
 800b2f0:	2b01      	cmp	r3, #1
 800b2f2:	d10e      	bne.n	800b312 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2209      	movs	r2, #9
 800b2fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	887a      	ldrh	r2, [r7, #2]
 800b304:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b312:	2200      	movs	r2, #0
 800b314:	2100      	movs	r1, #0
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 faf6 	bl	800b908 <USBH_CtlReq>
 800b31c:	4603      	mov	r3, r0
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3708      	adds	r7, #8
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}

0800b326 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b326:	b580      	push	{r7, lr}
 800b328:	b082      	sub	sp, #8
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6078      	str	r0, [r7, #4]
 800b32e:	460b      	mov	r3, r1
 800b330:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	789b      	ldrb	r3, [r3, #2]
 800b336:	2b01      	cmp	r3, #1
 800b338:	d10f      	bne.n	800b35a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2200      	movs	r2, #0
 800b33e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2203      	movs	r2, #3
 800b344:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b346:	78fb      	ldrb	r3, [r7, #3]
 800b348:	b29a      	uxth	r2, r3
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2200      	movs	r2, #0
 800b352:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2200      	movs	r2, #0
 800b358:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b35a:	2200      	movs	r2, #0
 800b35c:	2100      	movs	r1, #0
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 fad2 	bl	800b908 <USBH_CtlReq>
 800b364:	4603      	mov	r3, r0
}
 800b366:	4618      	mov	r0, r3
 800b368:	3708      	adds	r7, #8
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}

0800b36e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b36e:	b580      	push	{r7, lr}
 800b370:	b082      	sub	sp, #8
 800b372:	af00      	add	r7, sp, #0
 800b374:	6078      	str	r0, [r7, #4]
 800b376:	460b      	mov	r3, r1
 800b378:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	789b      	ldrb	r3, [r3, #2]
 800b37e:	2b01      	cmp	r3, #1
 800b380:	d10f      	bne.n	800b3a2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2202      	movs	r2, #2
 800b386:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2201      	movs	r2, #1
 800b38c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2200      	movs	r2, #0
 800b392:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b394:	78fb      	ldrb	r3, [r7, #3]
 800b396:	b29a      	uxth	r2, r3
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	2100      	movs	r1, #0
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 faae 	bl	800b908 <USBH_CtlReq>
 800b3ac:	4603      	mov	r3, r0
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3708      	adds	r7, #8
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}

0800b3b6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b3b6:	b480      	push	{r7}
 800b3b8:	b085      	sub	sp, #20
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	60f8      	str	r0, [r7, #12]
 800b3be:	60b9      	str	r1, [r7, #8]
 800b3c0:	4613      	mov	r3, r2
 800b3c2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	781a      	ldrb	r2, [r3, #0]
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	785a      	ldrb	r2, [r3, #1]
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	3302      	adds	r3, #2
 800b3d8:	781b      	ldrb	r3, [r3, #0]
 800b3da:	b29a      	uxth	r2, r3
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	3303      	adds	r3, #3
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	021b      	lsls	r3, r3, #8
 800b3e6:	b29b      	uxth	r3, r3
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	b29a      	uxth	r2, r3
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	791a      	ldrb	r2, [r3, #4]
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	795a      	ldrb	r2, [r3, #5]
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	799a      	ldrb	r2, [r3, #6]
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	79da      	ldrb	r2, [r3, #7]
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	79db      	ldrb	r3, [r3, #7]
 800b414:	2b20      	cmp	r3, #32
 800b416:	dc11      	bgt.n	800b43c <USBH_ParseDevDesc+0x86>
 800b418:	2b08      	cmp	r3, #8
 800b41a:	db16      	blt.n	800b44a <USBH_ParseDevDesc+0x94>
 800b41c:	3b08      	subs	r3, #8
 800b41e:	2201      	movs	r2, #1
 800b420:	fa02 f303 	lsl.w	r3, r2, r3
 800b424:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800b428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	bf14      	ite	ne
 800b430:	2301      	movne	r3, #1
 800b432:	2300      	moveq	r3, #0
 800b434:	b2db      	uxtb	r3, r3
 800b436:	2b00      	cmp	r3, #0
 800b438:	d102      	bne.n	800b440 <USBH_ParseDevDesc+0x8a>
 800b43a:	e006      	b.n	800b44a <USBH_ParseDevDesc+0x94>
 800b43c:	2b40      	cmp	r3, #64	; 0x40
 800b43e:	d104      	bne.n	800b44a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	79da      	ldrb	r2, [r3, #7]
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	71da      	strb	r2, [r3, #7]
      break;
 800b448:	e003      	b.n	800b452 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2240      	movs	r2, #64	; 0x40
 800b44e:	71da      	strb	r2, [r3, #7]
      break;
 800b450:	bf00      	nop
  }

  if (length > 8U)
 800b452:	88fb      	ldrh	r3, [r7, #6]
 800b454:	2b08      	cmp	r3, #8
 800b456:	d939      	bls.n	800b4cc <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	3308      	adds	r3, #8
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	b29a      	uxth	r2, r3
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	3309      	adds	r3, #9
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	b29b      	uxth	r3, r3
 800b468:	021b      	lsls	r3, r3, #8
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	4313      	orrs	r3, r2
 800b46e:	b29a      	uxth	r2, r3
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	330a      	adds	r3, #10
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	b29a      	uxth	r2, r3
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	330b      	adds	r3, #11
 800b480:	781b      	ldrb	r3, [r3, #0]
 800b482:	b29b      	uxth	r3, r3
 800b484:	021b      	lsls	r3, r3, #8
 800b486:	b29b      	uxth	r3, r3
 800b488:	4313      	orrs	r3, r2
 800b48a:	b29a      	uxth	r2, r3
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	330c      	adds	r3, #12
 800b494:	781b      	ldrb	r3, [r3, #0]
 800b496:	b29a      	uxth	r2, r3
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	330d      	adds	r3, #13
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	b29b      	uxth	r3, r3
 800b4a0:	021b      	lsls	r3, r3, #8
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	b29a      	uxth	r2, r3
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	7b9a      	ldrb	r2, [r3, #14]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	7bda      	ldrb	r2, [r3, #15]
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	7c1a      	ldrb	r2, [r3, #16]
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	7c5a      	ldrb	r2, [r3, #17]
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	745a      	strb	r2, [r3, #17]
  }
}
 800b4cc:	bf00      	nop
 800b4ce:	3714      	adds	r7, #20
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr

0800b4d8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b08c      	sub	sp, #48	; 0x30
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	60b9      	str	r1, [r7, #8]
 800b4e2:	4613      	mov	r3, r2
 800b4e4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b4ec:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800b4fe:	2300      	movs	r3, #0
 800b500:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	781a      	ldrb	r2, [r3, #0]
 800b50c:	6a3b      	ldr	r3, [r7, #32]
 800b50e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	785a      	ldrb	r2, [r3, #1]
 800b514:	6a3b      	ldr	r3, [r7, #32]
 800b516:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	3302      	adds	r3, #2
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	b29a      	uxth	r2, r3
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	3303      	adds	r3, #3
 800b524:	781b      	ldrb	r3, [r3, #0]
 800b526:	b29b      	uxth	r3, r3
 800b528:	021b      	lsls	r3, r3, #8
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	4313      	orrs	r3, r2
 800b52e:	b29b      	uxth	r3, r3
 800b530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b534:	bf28      	it	cs
 800b536:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800b53a:	b29a      	uxth	r2, r3
 800b53c:	6a3b      	ldr	r3, [r7, #32]
 800b53e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	791a      	ldrb	r2, [r3, #4]
 800b544:	6a3b      	ldr	r3, [r7, #32]
 800b546:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	795a      	ldrb	r2, [r3, #5]
 800b54c:	6a3b      	ldr	r3, [r7, #32]
 800b54e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	799a      	ldrb	r2, [r3, #6]
 800b554:	6a3b      	ldr	r3, [r7, #32]
 800b556:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	79da      	ldrb	r2, [r3, #7]
 800b55c:	6a3b      	ldr	r3, [r7, #32]
 800b55e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	7a1a      	ldrb	r2, [r3, #8]
 800b564:	6a3b      	ldr	r3, [r7, #32]
 800b566:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800b568:	6a3b      	ldr	r3, [r7, #32]
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	2b09      	cmp	r3, #9
 800b56e:	d002      	beq.n	800b576 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b570:	6a3b      	ldr	r3, [r7, #32]
 800b572:	2209      	movs	r2, #9
 800b574:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b576:	88fb      	ldrh	r3, [r7, #6]
 800b578:	2b09      	cmp	r3, #9
 800b57a:	f240 809d 	bls.w	800b6b8 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800b57e:	2309      	movs	r3, #9
 800b580:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b582:	2300      	movs	r3, #0
 800b584:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b586:	e081      	b.n	800b68c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b588:	f107 0316 	add.w	r3, r7, #22
 800b58c:	4619      	mov	r1, r3
 800b58e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b590:	f000 f99f 	bl	800b8d2 <USBH_GetNextDesc>
 800b594:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b598:	785b      	ldrb	r3, [r3, #1]
 800b59a:	2b04      	cmp	r3, #4
 800b59c:	d176      	bne.n	800b68c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a0:	781b      	ldrb	r3, [r3, #0]
 800b5a2:	2b09      	cmp	r3, #9
 800b5a4:	d002      	beq.n	800b5ac <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a8:	2209      	movs	r2, #9
 800b5aa:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b5ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5b0:	221a      	movs	r2, #26
 800b5b2:	fb02 f303 	mul.w	r3, r2, r3
 800b5b6:	3308      	adds	r3, #8
 800b5b8:	6a3a      	ldr	r2, [r7, #32]
 800b5ba:	4413      	add	r3, r2
 800b5bc:	3302      	adds	r3, #2
 800b5be:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b5c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b5c2:	69f8      	ldr	r0, [r7, #28]
 800b5c4:	f000 f87e 	bl	800b6c4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b5d2:	e043      	b.n	800b65c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b5d4:	f107 0316 	add.w	r3, r7, #22
 800b5d8:	4619      	mov	r1, r3
 800b5da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5dc:	f000 f979 	bl	800b8d2 <USBH_GetNextDesc>
 800b5e0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e4:	785b      	ldrb	r3, [r3, #1]
 800b5e6:	2b05      	cmp	r3, #5
 800b5e8:	d138      	bne.n	800b65c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800b5ea:	69fb      	ldr	r3, [r7, #28]
 800b5ec:	795b      	ldrb	r3, [r3, #5]
 800b5ee:	2b01      	cmp	r3, #1
 800b5f0:	d10f      	bne.n	800b612 <USBH_ParseCfgDesc+0x13a>
 800b5f2:	69fb      	ldr	r3, [r7, #28]
 800b5f4:	799b      	ldrb	r3, [r3, #6]
 800b5f6:	2b02      	cmp	r3, #2
 800b5f8:	d10b      	bne.n	800b612 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b5fa:	69fb      	ldr	r3, [r7, #28]
 800b5fc:	79db      	ldrb	r3, [r3, #7]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d10f      	bne.n	800b622 <USBH_ParseCfgDesc+0x14a>
 800b602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b604:	781b      	ldrb	r3, [r3, #0]
 800b606:	2b09      	cmp	r3, #9
 800b608:	d00b      	beq.n	800b622 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800b60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b60c:	2209      	movs	r2, #9
 800b60e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b610:	e007      	b.n	800b622 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800b612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	2b07      	cmp	r3, #7
 800b618:	d004      	beq.n	800b624 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b61c:	2207      	movs	r2, #7
 800b61e:	701a      	strb	r2, [r3, #0]
 800b620:	e000      	b.n	800b624 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b622:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b628:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b62c:	3201      	adds	r2, #1
 800b62e:	00d2      	lsls	r2, r2, #3
 800b630:	211a      	movs	r1, #26
 800b632:	fb01 f303 	mul.w	r3, r1, r3
 800b636:	4413      	add	r3, r2
 800b638:	3308      	adds	r3, #8
 800b63a:	6a3a      	ldr	r2, [r7, #32]
 800b63c:	4413      	add	r3, r2
 800b63e:	3304      	adds	r3, #4
 800b640:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b642:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b644:	69b9      	ldr	r1, [r7, #24]
 800b646:	68f8      	ldr	r0, [r7, #12]
 800b648:	f000 f86b 	bl	800b722 <USBH_ParseEPDesc>
 800b64c:	4603      	mov	r3, r0
 800b64e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800b652:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b656:	3301      	adds	r3, #1
 800b658:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b65c:	69fb      	ldr	r3, [r7, #28]
 800b65e:	791b      	ldrb	r3, [r3, #4]
 800b660:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b664:	429a      	cmp	r2, r3
 800b666:	d204      	bcs.n	800b672 <USBH_ParseCfgDesc+0x19a>
 800b668:	6a3b      	ldr	r3, [r7, #32]
 800b66a:	885a      	ldrh	r2, [r3, #2]
 800b66c:	8afb      	ldrh	r3, [r7, #22]
 800b66e:	429a      	cmp	r2, r3
 800b670:	d8b0      	bhi.n	800b5d4 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b672:	69fb      	ldr	r3, [r7, #28]
 800b674:	791b      	ldrb	r3, [r3, #4]
 800b676:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d201      	bcs.n	800b682 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800b67e:	2303      	movs	r3, #3
 800b680:	e01c      	b.n	800b6bc <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800b682:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b686:	3301      	adds	r3, #1
 800b688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b68c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b690:	2b01      	cmp	r3, #1
 800b692:	d805      	bhi.n	800b6a0 <USBH_ParseCfgDesc+0x1c8>
 800b694:	6a3b      	ldr	r3, [r7, #32]
 800b696:	885a      	ldrh	r2, [r3, #2]
 800b698:	8afb      	ldrh	r3, [r7, #22]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	f63f af74 	bhi.w	800b588 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b6a0:	6a3b      	ldr	r3, [r7, #32]
 800b6a2:	791b      	ldrb	r3, [r3, #4]
 800b6a4:	2b02      	cmp	r3, #2
 800b6a6:	bf28      	it	cs
 800b6a8:	2302      	movcs	r3, #2
 800b6aa:	b2db      	uxtb	r3, r3
 800b6ac:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d201      	bcs.n	800b6b8 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800b6b4:	2303      	movs	r3, #3
 800b6b6:	e001      	b.n	800b6bc <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800b6b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3730      	adds	r7, #48	; 0x30
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b083      	sub	sp, #12
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	781a      	ldrb	r2, [r3, #0]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	785a      	ldrb	r2, [r3, #1]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	789a      	ldrb	r2, [r3, #2]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	78da      	ldrb	r2, [r3, #3]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	791a      	ldrb	r2, [r3, #4]
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	795a      	ldrb	r2, [r3, #5]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	799a      	ldrb	r2, [r3, #6]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	79da      	ldrb	r2, [r3, #7]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	7a1a      	ldrb	r2, [r3, #8]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	721a      	strb	r2, [r3, #8]
}
 800b716:	bf00      	nop
 800b718:	370c      	adds	r7, #12
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr

0800b722 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800b722:	b480      	push	{r7}
 800b724:	b087      	sub	sp, #28
 800b726:	af00      	add	r7, sp, #0
 800b728:	60f8      	str	r0, [r7, #12]
 800b72a:	60b9      	str	r1, [r7, #8]
 800b72c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b72e:	2300      	movs	r3, #0
 800b730:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	781a      	ldrb	r2, [r3, #0]
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	785a      	ldrb	r2, [r3, #1]
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	789a      	ldrb	r2, [r3, #2]
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	78da      	ldrb	r2, [r3, #3]
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	3304      	adds	r3, #4
 800b756:	781b      	ldrb	r3, [r3, #0]
 800b758:	b29a      	uxth	r2, r3
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	3305      	adds	r3, #5
 800b75e:	781b      	ldrb	r3, [r3, #0]
 800b760:	b29b      	uxth	r3, r3
 800b762:	021b      	lsls	r3, r3, #8
 800b764:	b29b      	uxth	r3, r3
 800b766:	4313      	orrs	r3, r2
 800b768:	b29a      	uxth	r2, r3
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	799a      	ldrb	r2, [r3, #6]
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	889b      	ldrh	r3, [r3, #4]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d102      	bne.n	800b784 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800b77e:	2303      	movs	r3, #3
 800b780:	75fb      	strb	r3, [r7, #23]
 800b782:	e033      	b.n	800b7ec <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	889b      	ldrh	r3, [r3, #4]
 800b788:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b78c:	f023 0307 	bic.w	r3, r3, #7
 800b790:	b29a      	uxth	r2, r3
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	889b      	ldrh	r3, [r3, #4]
 800b79a:	b21a      	sxth	r2, r3
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	3304      	adds	r3, #4
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	b299      	uxth	r1, r3
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	3305      	adds	r3, #5
 800b7a8:	781b      	ldrb	r3, [r3, #0]
 800b7aa:	b29b      	uxth	r3, r3
 800b7ac:	021b      	lsls	r3, r3, #8
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	430b      	orrs	r3, r1
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d110      	bne.n	800b7de <USBH_ParseEPDesc+0xbc>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	3304      	adds	r3, #4
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	b299      	uxth	r1, r3
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	3305      	adds	r3, #5
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	021b      	lsls	r3, r3, #8
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	430b      	orrs	r3, r1
 800b7d2:	b29b      	uxth	r3, r3
 800b7d4:	b21b      	sxth	r3, r3
 800b7d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b7da:	b21b      	sxth	r3, r3
 800b7dc:	e001      	b.n	800b7e2 <USBH_ParseEPDesc+0xc0>
 800b7de:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	b21b      	sxth	r3, r3
 800b7e6:	b29a      	uxth	r2, r3
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d116      	bne.n	800b824 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	78db      	ldrb	r3, [r3, #3]
 800b7fa:	f003 0303 	and.w	r3, r3, #3
 800b7fe:	2b01      	cmp	r3, #1
 800b800:	d005      	beq.n	800b80e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	78db      	ldrb	r3, [r3, #3]
 800b806:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b80a:	2b03      	cmp	r3, #3
 800b80c:	d127      	bne.n	800b85e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	799b      	ldrb	r3, [r3, #6]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d003      	beq.n	800b81e <USBH_ParseEPDesc+0xfc>
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	799b      	ldrb	r3, [r3, #6]
 800b81a:	2b10      	cmp	r3, #16
 800b81c:	d91f      	bls.n	800b85e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b81e:	2303      	movs	r3, #3
 800b820:	75fb      	strb	r3, [r7, #23]
 800b822:	e01c      	b.n	800b85e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	78db      	ldrb	r3, [r3, #3]
 800b828:	f003 0303 	and.w	r3, r3, #3
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d10a      	bne.n	800b846 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	799b      	ldrb	r3, [r3, #6]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d003      	beq.n	800b840 <USBH_ParseEPDesc+0x11e>
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	799b      	ldrb	r3, [r3, #6]
 800b83c:	2b10      	cmp	r3, #16
 800b83e:	d90e      	bls.n	800b85e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b840:	2303      	movs	r3, #3
 800b842:	75fb      	strb	r3, [r7, #23]
 800b844:	e00b      	b.n	800b85e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	78db      	ldrb	r3, [r3, #3]
 800b84a:	f003 0303 	and.w	r3, r3, #3
 800b84e:	2b03      	cmp	r3, #3
 800b850:	d105      	bne.n	800b85e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	799b      	ldrb	r3, [r3, #6]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d101      	bne.n	800b85e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b85a:	2303      	movs	r3, #3
 800b85c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800b85e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b860:	4618      	mov	r0, r3
 800b862:	371c      	adds	r7, #28
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr

0800b86c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b087      	sub	sp, #28
 800b870:	af00      	add	r7, sp, #0
 800b872:	60f8      	str	r0, [r7, #12]
 800b874:	60b9      	str	r1, [r7, #8]
 800b876:	4613      	mov	r3, r2
 800b878:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	3301      	adds	r3, #1
 800b87e:	781b      	ldrb	r3, [r3, #0]
 800b880:	2b03      	cmp	r3, #3
 800b882:	d120      	bne.n	800b8c6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	1e9a      	subs	r2, r3, #2
 800b88a:	88fb      	ldrh	r3, [r7, #6]
 800b88c:	4293      	cmp	r3, r2
 800b88e:	bf28      	it	cs
 800b890:	4613      	movcs	r3, r2
 800b892:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	3302      	adds	r3, #2
 800b898:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b89a:	2300      	movs	r3, #0
 800b89c:	82fb      	strh	r3, [r7, #22]
 800b89e:	e00b      	b.n	800b8b8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b8a0:	8afb      	ldrh	r3, [r7, #22]
 800b8a2:	68fa      	ldr	r2, [r7, #12]
 800b8a4:	4413      	add	r3, r2
 800b8a6:	781a      	ldrb	r2, [r3, #0]
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	3301      	adds	r3, #1
 800b8b0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b8b2:	8afb      	ldrh	r3, [r7, #22]
 800b8b4:	3302      	adds	r3, #2
 800b8b6:	82fb      	strh	r3, [r7, #22]
 800b8b8:	8afa      	ldrh	r2, [r7, #22]
 800b8ba:	8abb      	ldrh	r3, [r7, #20]
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d3ef      	bcc.n	800b8a0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	701a      	strb	r2, [r3, #0]
  }
}
 800b8c6:	bf00      	nop
 800b8c8:	371c      	adds	r7, #28
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d0:	4770      	bx	lr

0800b8d2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b8d2:	b480      	push	{r7}
 800b8d4:	b085      	sub	sp, #20
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
 800b8da:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	881a      	ldrh	r2, [r3, #0]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	b29b      	uxth	r3, r3
 800b8e6:	4413      	add	r3, r2
 800b8e8:	b29a      	uxth	r2, r3
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	4413      	add	r3, r2
 800b8f8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3714      	adds	r7, #20
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr

0800b908 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b086      	sub	sp, #24
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	60f8      	str	r0, [r7, #12]
 800b910:	60b9      	str	r1, [r7, #8]
 800b912:	4613      	mov	r3, r2
 800b914:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b916:	2301      	movs	r3, #1
 800b918:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	789b      	ldrb	r3, [r3, #2]
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d002      	beq.n	800b928 <USBH_CtlReq+0x20>
 800b922:	2b02      	cmp	r3, #2
 800b924:	d01d      	beq.n	800b962 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800b926:	e043      	b.n	800b9b0 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	68ba      	ldr	r2, [r7, #8]
 800b92c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	88fa      	ldrh	r2, [r7, #6]
 800b932:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2201      	movs	r2, #1
 800b938:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2202      	movs	r2, #2
 800b93e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b940:	2301      	movs	r3, #1
 800b942:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2203      	movs	r2, #3
 800b948:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b958:	2200      	movs	r2, #0
 800b95a:	4619      	mov	r1, r3
 800b95c:	f005 fb3e 	bl	8010fdc <osMessagePut>
      break;
 800b960:	e026      	b.n	800b9b0 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800b962:	68f8      	ldr	r0, [r7, #12]
 800b964:	f000 f82a 	bl	800b9bc <USBH_HandleControl>
 800b968:	4603      	mov	r3, r0
 800b96a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b96c:	7dfb      	ldrb	r3, [r7, #23]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d002      	beq.n	800b978 <USBH_CtlReq+0x70>
 800b972:	7dfb      	ldrb	r3, [r7, #23]
 800b974:	2b03      	cmp	r3, #3
 800b976:	d106      	bne.n	800b986 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2201      	movs	r2, #1
 800b97c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2200      	movs	r2, #0
 800b982:	761a      	strb	r2, [r3, #24]
 800b984:	e005      	b.n	800b992 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800b986:	7dfb      	ldrb	r3, [r7, #23]
 800b988:	2b02      	cmp	r3, #2
 800b98a:	d102      	bne.n	800b992 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	2201      	movs	r2, #1
 800b990:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2203      	movs	r2, #3
 800b996:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	f005 fb17 	bl	8010fdc <osMessagePut>
      break;
 800b9ae:	bf00      	nop
  }
  return status;
 800b9b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	3718      	adds	r7, #24
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}
	...

0800b9bc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b086      	sub	sp, #24
 800b9c0:	af02      	add	r7, sp, #8
 800b9c2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	7e1b      	ldrb	r3, [r3, #24]
 800b9d0:	3b01      	subs	r3, #1
 800b9d2:	2b0a      	cmp	r3, #10
 800b9d4:	f200 8229 	bhi.w	800be2a <USBH_HandleControl+0x46e>
 800b9d8:	a201      	add	r2, pc, #4	; (adr r2, 800b9e0 <USBH_HandleControl+0x24>)
 800b9da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9de:	bf00      	nop
 800b9e0:	0800ba0d 	.word	0x0800ba0d
 800b9e4:	0800ba27 	.word	0x0800ba27
 800b9e8:	0800bac9 	.word	0x0800bac9
 800b9ec:	0800baef 	.word	0x0800baef
 800b9f0:	0800bb7b 	.word	0x0800bb7b
 800b9f4:	0800bba5 	.word	0x0800bba5
 800b9f8:	0800bc67 	.word	0x0800bc67
 800b9fc:	0800bc89 	.word	0x0800bc89
 800ba00:	0800bd1b 	.word	0x0800bd1b
 800ba04:	0800bd41 	.word	0x0800bd41
 800ba08:	0800bdd3 	.word	0x0800bdd3
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f103 0110 	add.w	r1, r3, #16
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	795b      	ldrb	r3, [r3, #5]
 800ba16:	461a      	mov	r2, r3
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f000 fa17 	bl	800be4c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2202      	movs	r2, #2
 800ba22:	761a      	strb	r2, [r3, #24]
      break;
 800ba24:	e20c      	b.n	800be40 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	795b      	ldrb	r3, [r3, #5]
 800ba2a:	4619      	mov	r1, r3
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f007 ff7d 	bl	801392c <USBH_LL_GetURBState>
 800ba32:	4603      	mov	r3, r0
 800ba34:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ba36:	7bbb      	ldrb	r3, [r7, #14]
 800ba38:	2b01      	cmp	r3, #1
 800ba3a:	d12c      	bne.n	800ba96 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	7c1b      	ldrb	r3, [r3, #16]
 800ba40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ba44:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	8adb      	ldrh	r3, [r3, #22]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d00a      	beq.n	800ba64 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ba4e:	7b7b      	ldrb	r3, [r7, #13]
 800ba50:	2b80      	cmp	r3, #128	; 0x80
 800ba52:	d103      	bne.n	800ba5c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2203      	movs	r2, #3
 800ba58:	761a      	strb	r2, [r3, #24]
 800ba5a:	e00d      	b.n	800ba78 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2205      	movs	r2, #5
 800ba60:	761a      	strb	r2, [r3, #24]
 800ba62:	e009      	b.n	800ba78 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800ba64:	7b7b      	ldrb	r3, [r7, #13]
 800ba66:	2b80      	cmp	r3, #128	; 0x80
 800ba68:	d103      	bne.n	800ba72 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2209      	movs	r2, #9
 800ba6e:	761a      	strb	r2, [r3, #24]
 800ba70:	e002      	b.n	800ba78 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2207      	movs	r2, #7
 800ba76:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2203      	movs	r2, #3
 800ba7c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	4619      	mov	r1, r3
 800ba90:	f005 faa4 	bl	8010fdc <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ba94:	e1cb      	b.n	800be2e <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ba96:	7bbb      	ldrb	r3, [r7, #14]
 800ba98:	2b04      	cmp	r3, #4
 800ba9a:	d003      	beq.n	800baa4 <USBH_HandleControl+0xe8>
 800ba9c:	7bbb      	ldrb	r3, [r7, #14]
 800ba9e:	2b02      	cmp	r3, #2
 800baa0:	f040 81c5 	bne.w	800be2e <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	220b      	movs	r2, #11
 800baa8:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2203      	movs	r2, #3
 800baae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800babe:	2200      	movs	r2, #0
 800bac0:	4619      	mov	r1, r3
 800bac2:	f005 fa8b 	bl	8010fdc <osMessagePut>
      break;
 800bac6:	e1b2      	b.n	800be2e <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bace:	b29a      	uxth	r2, r3
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6899      	ldr	r1, [r3, #8]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	899a      	ldrh	r2, [r3, #12]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	791b      	ldrb	r3, [r3, #4]
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f000 f9f2 	bl	800beca <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2204      	movs	r2, #4
 800baea:	761a      	strb	r2, [r3, #24]
      break;
 800baec:	e1a8      	b.n	800be40 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	791b      	ldrb	r3, [r3, #4]
 800baf2:	4619      	mov	r1, r3
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f007 ff19 	bl	801392c <USBH_LL_GetURBState>
 800bafa:	4603      	mov	r3, r0
 800bafc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800bafe:	7bbb      	ldrb	r3, [r7, #14]
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d110      	bne.n	800bb26 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2209      	movs	r2, #9
 800bb08:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2203      	movs	r2, #3
 800bb0e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bb1e:	2200      	movs	r2, #0
 800bb20:	4619      	mov	r1, r3
 800bb22:	f005 fa5b 	bl	8010fdc <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800bb26:	7bbb      	ldrb	r3, [r7, #14]
 800bb28:	2b05      	cmp	r3, #5
 800bb2a:	d110      	bne.n	800bb4e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800bb2c:	2303      	movs	r3, #3
 800bb2e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2203      	movs	r2, #3
 800bb34:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bb44:	2200      	movs	r2, #0
 800bb46:	4619      	mov	r1, r3
 800bb48:	f005 fa48 	bl	8010fdc <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bb4c:	e171      	b.n	800be32 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800bb4e:	7bbb      	ldrb	r3, [r7, #14]
 800bb50:	2b04      	cmp	r3, #4
 800bb52:	f040 816e 	bne.w	800be32 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	220b      	movs	r2, #11
 800bb5a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2203      	movs	r2, #3
 800bb60:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bb70:	2200      	movs	r2, #0
 800bb72:	4619      	mov	r1, r3
 800bb74:	f005 fa32 	bl	8010fdc <osMessagePut>
      break;
 800bb78:	e15b      	b.n	800be32 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6899      	ldr	r1, [r3, #8]
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	899a      	ldrh	r2, [r3, #12]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	795b      	ldrb	r3, [r3, #5]
 800bb86:	2001      	movs	r0, #1
 800bb88:	9000      	str	r0, [sp, #0]
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 f978 	bl	800be80 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bb96:	b29a      	uxth	r2, r3
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2206      	movs	r2, #6
 800bba0:	761a      	strb	r2, [r3, #24]
      break;
 800bba2:	e14d      	b.n	800be40 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	795b      	ldrb	r3, [r3, #5]
 800bba8:	4619      	mov	r1, r3
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f007 febe 	bl	801392c <USBH_LL_GetURBState>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bbb4:	7bbb      	ldrb	r3, [r7, #14]
 800bbb6:	2b01      	cmp	r3, #1
 800bbb8:	d111      	bne.n	800bbde <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2207      	movs	r2, #7
 800bbbe:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2203      	movs	r2, #3
 800bbc4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	f005 fa00 	bl	8010fdc <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bbdc:	e12b      	b.n	800be36 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800bbde:	7bbb      	ldrb	r3, [r7, #14]
 800bbe0:	2b05      	cmp	r3, #5
 800bbe2:	d113      	bne.n	800bc0c <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	220c      	movs	r2, #12
 800bbe8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800bbea:	2303      	movs	r3, #3
 800bbec:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2203      	movs	r2, #3
 800bbf2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bc02:	2200      	movs	r2, #0
 800bc04:	4619      	mov	r1, r3
 800bc06:	f005 f9e9 	bl	8010fdc <osMessagePut>
      break;
 800bc0a:	e114      	b.n	800be36 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bc0c:	7bbb      	ldrb	r3, [r7, #14]
 800bc0e:	2b02      	cmp	r3, #2
 800bc10:	d111      	bne.n	800bc36 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2205      	movs	r2, #5
 800bc16:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2203      	movs	r2, #3
 800bc1c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	4619      	mov	r1, r3
 800bc30:	f005 f9d4 	bl	8010fdc <osMessagePut>
      break;
 800bc34:	e0ff      	b.n	800be36 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800bc36:	7bbb      	ldrb	r3, [r7, #14]
 800bc38:	2b04      	cmp	r3, #4
 800bc3a:	f040 80fc 	bne.w	800be36 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	220b      	movs	r2, #11
 800bc42:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800bc44:	2302      	movs	r3, #2
 800bc46:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2203      	movs	r2, #3
 800bc4c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	4619      	mov	r1, r3
 800bc60:	f005 f9bc 	bl	8010fdc <osMessagePut>
      break;
 800bc64:	e0e7      	b.n	800be36 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	791b      	ldrb	r3, [r3, #4]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	2100      	movs	r1, #0
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f000 f92b 	bl	800beca <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bc7a:	b29a      	uxth	r2, r3
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2208      	movs	r2, #8
 800bc84:	761a      	strb	r2, [r3, #24]

      break;
 800bc86:	e0db      	b.n	800be40 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	791b      	ldrb	r3, [r3, #4]
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f007 fe4c 	bl	801392c <USBH_LL_GetURBState>
 800bc94:	4603      	mov	r3, r0
 800bc96:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bc98:	7bbb      	ldrb	r3, [r7, #14]
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	d113      	bne.n	800bcc6 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	220d      	movs	r2, #13
 800bca2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800bca4:	2300      	movs	r3, #0
 800bca6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2203      	movs	r2, #3
 800bcac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	f005 f98c 	bl	8010fdc <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bcc4:	e0b9      	b.n	800be3a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800bcc6:	7bbb      	ldrb	r3, [r7, #14]
 800bcc8:	2b04      	cmp	r3, #4
 800bcca:	d111      	bne.n	800bcf0 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	220b      	movs	r2, #11
 800bcd0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2203      	movs	r2, #3
 800bcd6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bce6:	2200      	movs	r2, #0
 800bce8:	4619      	mov	r1, r3
 800bcea:	f005 f977 	bl	8010fdc <osMessagePut>
      break;
 800bcee:	e0a4      	b.n	800be3a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800bcf0:	7bbb      	ldrb	r3, [r7, #14]
 800bcf2:	2b05      	cmp	r3, #5
 800bcf4:	f040 80a1 	bne.w	800be3a <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800bcf8:	2303      	movs	r3, #3
 800bcfa:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2203      	movs	r2, #3
 800bd00:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bd10:	2200      	movs	r2, #0
 800bd12:	4619      	mov	r1, r3
 800bd14:	f005 f962 	bl	8010fdc <osMessagePut>
      break;
 800bd18:	e08f      	b.n	800be3a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	795b      	ldrb	r3, [r3, #5]
 800bd1e:	2201      	movs	r2, #1
 800bd20:	9200      	str	r2, [sp, #0]
 800bd22:	2200      	movs	r2, #0
 800bd24:	2100      	movs	r1, #0
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f000 f8aa 	bl	800be80 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bd32:	b29a      	uxth	r2, r3
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	220a      	movs	r2, #10
 800bd3c:	761a      	strb	r2, [r3, #24]
      break;
 800bd3e:	e07f      	b.n	800be40 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	795b      	ldrb	r3, [r3, #5]
 800bd44:	4619      	mov	r1, r3
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f007 fdf0 	bl	801392c <USBH_LL_GetURBState>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bd50:	7bbb      	ldrb	r3, [r7, #14]
 800bd52:	2b01      	cmp	r3, #1
 800bd54:	d113      	bne.n	800bd7e <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800bd56:	2300      	movs	r3, #0
 800bd58:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	220d      	movs	r2, #13
 800bd5e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2203      	movs	r2, #3
 800bd64:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bd74:	2200      	movs	r2, #0
 800bd76:	4619      	mov	r1, r3
 800bd78:	f005 f930 	bl	8010fdc <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bd7c:	e05f      	b.n	800be3e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bd7e:	7bbb      	ldrb	r3, [r7, #14]
 800bd80:	2b02      	cmp	r3, #2
 800bd82:	d111      	bne.n	800bda8 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2209      	movs	r2, #9
 800bd88:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2203      	movs	r2, #3
 800bd8e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bd9e:	2200      	movs	r2, #0
 800bda0:	4619      	mov	r1, r3
 800bda2:	f005 f91b 	bl	8010fdc <osMessagePut>
      break;
 800bda6:	e04a      	b.n	800be3e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800bda8:	7bbb      	ldrb	r3, [r7, #14]
 800bdaa:	2b04      	cmp	r3, #4
 800bdac:	d147      	bne.n	800be3e <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	220b      	movs	r2, #11
 800bdb2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2203      	movs	r2, #3
 800bdb8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bdc8:	2200      	movs	r2, #0
 800bdca:	4619      	mov	r1, r3
 800bdcc:	f005 f906 	bl	8010fdc <osMessagePut>
      break;
 800bdd0:	e035      	b.n	800be3e <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	7e5b      	ldrb	r3, [r3, #25]
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	b2da      	uxtb	r2, r3
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	765a      	strb	r2, [r3, #25]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	7e5b      	ldrb	r3, [r3, #25]
 800bde2:	2b02      	cmp	r3, #2
 800bde4:	d806      	bhi.n	800bdf4 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2201      	movs	r2, #1
 800bdea:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2201      	movs	r2, #1
 800bdf0:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bdf2:	e025      	b.n	800be40 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bdfa:	2106      	movs	r1, #6
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2200      	movs	r2, #0
 800be04:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	795b      	ldrb	r3, [r3, #5]
 800be0a:	4619      	mov	r1, r3
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f000 f90d 	bl	800c02c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	791b      	ldrb	r3, [r3, #4]
 800be16:	4619      	mov	r1, r3
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f000 f907 	bl	800c02c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2200      	movs	r2, #0
 800be22:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800be24:	2302      	movs	r3, #2
 800be26:	73fb      	strb	r3, [r7, #15]
      break;
 800be28:	e00a      	b.n	800be40 <USBH_HandleControl+0x484>

    default:
      break;
 800be2a:	bf00      	nop
 800be2c:	e008      	b.n	800be40 <USBH_HandleControl+0x484>
      break;
 800be2e:	bf00      	nop
 800be30:	e006      	b.n	800be40 <USBH_HandleControl+0x484>
      break;
 800be32:	bf00      	nop
 800be34:	e004      	b.n	800be40 <USBH_HandleControl+0x484>
      break;
 800be36:	bf00      	nop
 800be38:	e002      	b.n	800be40 <USBH_HandleControl+0x484>
      break;
 800be3a:	bf00      	nop
 800be3c:	e000      	b.n	800be40 <USBH_HandleControl+0x484>
      break;
 800be3e:	bf00      	nop
  }

  return status;
 800be40:	7bfb      	ldrb	r3, [r7, #15]
}
 800be42:	4618      	mov	r0, r3
 800be44:	3710      	adds	r7, #16
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
 800be4a:	bf00      	nop

0800be4c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b088      	sub	sp, #32
 800be50:	af04      	add	r7, sp, #16
 800be52:	60f8      	str	r0, [r7, #12]
 800be54:	60b9      	str	r1, [r7, #8]
 800be56:	4613      	mov	r3, r2
 800be58:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800be5a:	79f9      	ldrb	r1, [r7, #7]
 800be5c:	2300      	movs	r3, #0
 800be5e:	9303      	str	r3, [sp, #12]
 800be60:	2308      	movs	r3, #8
 800be62:	9302      	str	r3, [sp, #8]
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	9301      	str	r3, [sp, #4]
 800be68:	2300      	movs	r3, #0
 800be6a:	9300      	str	r3, [sp, #0]
 800be6c:	2300      	movs	r3, #0
 800be6e:	2200      	movs	r2, #0
 800be70:	68f8      	ldr	r0, [r7, #12]
 800be72:	f007 fd2a 	bl	80138ca <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800be76:	2300      	movs	r3, #0
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3710      	adds	r7, #16
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b088      	sub	sp, #32
 800be84:	af04      	add	r7, sp, #16
 800be86:	60f8      	str	r0, [r7, #12]
 800be88:	60b9      	str	r1, [r7, #8]
 800be8a:	4611      	mov	r1, r2
 800be8c:	461a      	mov	r2, r3
 800be8e:	460b      	mov	r3, r1
 800be90:	80fb      	strh	r3, [r7, #6]
 800be92:	4613      	mov	r3, r2
 800be94:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d001      	beq.n	800bea4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bea0:	2300      	movs	r3, #0
 800bea2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bea4:	7979      	ldrb	r1, [r7, #5]
 800bea6:	7e3b      	ldrb	r3, [r7, #24]
 800bea8:	9303      	str	r3, [sp, #12]
 800beaa:	88fb      	ldrh	r3, [r7, #6]
 800beac:	9302      	str	r3, [sp, #8]
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	9301      	str	r3, [sp, #4]
 800beb2:	2301      	movs	r3, #1
 800beb4:	9300      	str	r3, [sp, #0]
 800beb6:	2300      	movs	r3, #0
 800beb8:	2200      	movs	r2, #0
 800beba:	68f8      	ldr	r0, [r7, #12]
 800bebc:	f007 fd05 	bl	80138ca <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bec0:	2300      	movs	r3, #0
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3710      	adds	r7, #16
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}

0800beca <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800beca:	b580      	push	{r7, lr}
 800becc:	b088      	sub	sp, #32
 800bece:	af04      	add	r7, sp, #16
 800bed0:	60f8      	str	r0, [r7, #12]
 800bed2:	60b9      	str	r1, [r7, #8]
 800bed4:	4611      	mov	r1, r2
 800bed6:	461a      	mov	r2, r3
 800bed8:	460b      	mov	r3, r1
 800beda:	80fb      	strh	r3, [r7, #6]
 800bedc:	4613      	mov	r3, r2
 800bede:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bee0:	7979      	ldrb	r1, [r7, #5]
 800bee2:	2300      	movs	r3, #0
 800bee4:	9303      	str	r3, [sp, #12]
 800bee6:	88fb      	ldrh	r3, [r7, #6]
 800bee8:	9302      	str	r3, [sp, #8]
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	9301      	str	r3, [sp, #4]
 800beee:	2301      	movs	r3, #1
 800bef0:	9300      	str	r3, [sp, #0]
 800bef2:	2300      	movs	r3, #0
 800bef4:	2201      	movs	r2, #1
 800bef6:	68f8      	ldr	r0, [r7, #12]
 800bef8:	f007 fce7 	bl	80138ca <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800befc:	2300      	movs	r3, #0

}
 800befe:	4618      	mov	r0, r3
 800bf00:	3710      	adds	r7, #16
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}

0800bf06 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bf06:	b580      	push	{r7, lr}
 800bf08:	b088      	sub	sp, #32
 800bf0a:	af04      	add	r7, sp, #16
 800bf0c:	60f8      	str	r0, [r7, #12]
 800bf0e:	60b9      	str	r1, [r7, #8]
 800bf10:	4611      	mov	r1, r2
 800bf12:	461a      	mov	r2, r3
 800bf14:	460b      	mov	r3, r1
 800bf16:	80fb      	strh	r3, [r7, #6]
 800bf18:	4613      	mov	r3, r2
 800bf1a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d001      	beq.n	800bf2a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bf26:	2300      	movs	r3, #0
 800bf28:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bf2a:	7979      	ldrb	r1, [r7, #5]
 800bf2c:	7e3b      	ldrb	r3, [r7, #24]
 800bf2e:	9303      	str	r3, [sp, #12]
 800bf30:	88fb      	ldrh	r3, [r7, #6]
 800bf32:	9302      	str	r3, [sp, #8]
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	9301      	str	r3, [sp, #4]
 800bf38:	2301      	movs	r3, #1
 800bf3a:	9300      	str	r3, [sp, #0]
 800bf3c:	2302      	movs	r3, #2
 800bf3e:	2200      	movs	r2, #0
 800bf40:	68f8      	ldr	r0, [r7, #12]
 800bf42:	f007 fcc2 	bl	80138ca <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bf46:	2300      	movs	r3, #0
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3710      	adds	r7, #16
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b088      	sub	sp, #32
 800bf54:	af04      	add	r7, sp, #16
 800bf56:	60f8      	str	r0, [r7, #12]
 800bf58:	60b9      	str	r1, [r7, #8]
 800bf5a:	4611      	mov	r1, r2
 800bf5c:	461a      	mov	r2, r3
 800bf5e:	460b      	mov	r3, r1
 800bf60:	80fb      	strh	r3, [r7, #6]
 800bf62:	4613      	mov	r3, r2
 800bf64:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bf66:	7979      	ldrb	r1, [r7, #5]
 800bf68:	2300      	movs	r3, #0
 800bf6a:	9303      	str	r3, [sp, #12]
 800bf6c:	88fb      	ldrh	r3, [r7, #6]
 800bf6e:	9302      	str	r3, [sp, #8]
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	9301      	str	r3, [sp, #4]
 800bf74:	2301      	movs	r3, #1
 800bf76:	9300      	str	r3, [sp, #0]
 800bf78:	2302      	movs	r3, #2
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	68f8      	ldr	r0, [r7, #12]
 800bf7e:	f007 fca4 	bl	80138ca <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bf82:	2300      	movs	r3, #0
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	3710      	adds	r7, #16
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}

0800bf8c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b086      	sub	sp, #24
 800bf90:	af04      	add	r7, sp, #16
 800bf92:	6078      	str	r0, [r7, #4]
 800bf94:	4608      	mov	r0, r1
 800bf96:	4611      	mov	r1, r2
 800bf98:	461a      	mov	r2, r3
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	70fb      	strb	r3, [r7, #3]
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	70bb      	strb	r3, [r7, #2]
 800bfa2:	4613      	mov	r3, r2
 800bfa4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bfa6:	7878      	ldrb	r0, [r7, #1]
 800bfa8:	78ba      	ldrb	r2, [r7, #2]
 800bfaa:	78f9      	ldrb	r1, [r7, #3]
 800bfac:	8b3b      	ldrh	r3, [r7, #24]
 800bfae:	9302      	str	r3, [sp, #8]
 800bfb0:	7d3b      	ldrb	r3, [r7, #20]
 800bfb2:	9301      	str	r3, [sp, #4]
 800bfb4:	7c3b      	ldrb	r3, [r7, #16]
 800bfb6:	9300      	str	r3, [sp, #0]
 800bfb8:	4603      	mov	r3, r0
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f007 fc37 	bl	801382e <USBH_LL_OpenPipe>

  return USBH_OK;
 800bfc0:	2300      	movs	r3, #0
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3708      	adds	r7, #8
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}

0800bfca <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bfca:	b580      	push	{r7, lr}
 800bfcc:	b082      	sub	sp, #8
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	6078      	str	r0, [r7, #4]
 800bfd2:	460b      	mov	r3, r1
 800bfd4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800bfd6:	78fb      	ldrb	r3, [r7, #3]
 800bfd8:	4619      	mov	r1, r3
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f007 fc56 	bl	801388c <USBH_LL_ClosePipe>

  return USBH_OK;
 800bfe0:	2300      	movs	r3, #0
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3708      	adds	r7, #8
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}

0800bfea <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bfea:	b580      	push	{r7, lr}
 800bfec:	b084      	sub	sp, #16
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	6078      	str	r0, [r7, #4]
 800bff2:	460b      	mov	r3, r1
 800bff4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 f836 	bl	800c068 <USBH_GetFreePipe>
 800bffc:	4603      	mov	r3, r0
 800bffe:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c000:	89fb      	ldrh	r3, [r7, #14]
 800c002:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c006:	4293      	cmp	r3, r2
 800c008:	d00a      	beq.n	800c020 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c00a:	78fa      	ldrb	r2, [r7, #3]
 800c00c:	89fb      	ldrh	r3, [r7, #14]
 800c00e:	f003 030f 	and.w	r3, r3, #15
 800c012:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c016:	6879      	ldr	r1, [r7, #4]
 800c018:	33e0      	adds	r3, #224	; 0xe0
 800c01a:	009b      	lsls	r3, r3, #2
 800c01c:	440b      	add	r3, r1
 800c01e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c020:	89fb      	ldrh	r3, [r7, #14]
 800c022:	b2db      	uxtb	r3, r3
}
 800c024:	4618      	mov	r0, r3
 800c026:	3710      	adds	r7, #16
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c02c:	b480      	push	{r7}
 800c02e:	b083      	sub	sp, #12
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	460b      	mov	r3, r1
 800c036:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800c038:	78fb      	ldrb	r3, [r7, #3]
 800c03a:	2b0f      	cmp	r3, #15
 800c03c:	d80d      	bhi.n	800c05a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c03e:	78fb      	ldrb	r3, [r7, #3]
 800c040:	687a      	ldr	r2, [r7, #4]
 800c042:	33e0      	adds	r3, #224	; 0xe0
 800c044:	009b      	lsls	r3, r3, #2
 800c046:	4413      	add	r3, r2
 800c048:	685a      	ldr	r2, [r3, #4]
 800c04a:	78fb      	ldrb	r3, [r7, #3]
 800c04c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c050:	6879      	ldr	r1, [r7, #4]
 800c052:	33e0      	adds	r3, #224	; 0xe0
 800c054:	009b      	lsls	r3, r3, #2
 800c056:	440b      	add	r3, r1
 800c058:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c05a:	2300      	movs	r3, #0
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	370c      	adds	r7, #12
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr

0800c068 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c068:	b480      	push	{r7}
 800c06a:	b085      	sub	sp, #20
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c070:	2300      	movs	r3, #0
 800c072:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c074:	2300      	movs	r3, #0
 800c076:	73fb      	strb	r3, [r7, #15]
 800c078:	e00f      	b.n	800c09a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c07a:	7bfb      	ldrb	r3, [r7, #15]
 800c07c:	687a      	ldr	r2, [r7, #4]
 800c07e:	33e0      	adds	r3, #224	; 0xe0
 800c080:	009b      	lsls	r3, r3, #2
 800c082:	4413      	add	r3, r2
 800c084:	685b      	ldr	r3, [r3, #4]
 800c086:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d102      	bne.n	800c094 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c08e:	7bfb      	ldrb	r3, [r7, #15]
 800c090:	b29b      	uxth	r3, r3
 800c092:	e007      	b.n	800c0a4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c094:	7bfb      	ldrb	r3, [r7, #15]
 800c096:	3301      	adds	r3, #1
 800c098:	73fb      	strb	r3, [r7, #15]
 800c09a:	7bfb      	ldrb	r3, [r7, #15]
 800c09c:	2b0f      	cmp	r3, #15
 800c09e:	d9ec      	bls.n	800c07a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c0a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3714      	adds	r7, #20
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ae:	4770      	bx	lr

0800c0b0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b084      	sub	sp, #16
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c0ba:	79fb      	ldrb	r3, [r7, #7]
 800c0bc:	4a08      	ldr	r2, [pc, #32]	; (800c0e0 <disk_status+0x30>)
 800c0be:	009b      	lsls	r3, r3, #2
 800c0c0:	4413      	add	r3, r2
 800c0c2:	685b      	ldr	r3, [r3, #4]
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	79fa      	ldrb	r2, [r7, #7]
 800c0c8:	4905      	ldr	r1, [pc, #20]	; (800c0e0 <disk_status+0x30>)
 800c0ca:	440a      	add	r2, r1
 800c0cc:	7d12      	ldrb	r2, [r2, #20]
 800c0ce:	4610      	mov	r0, r2
 800c0d0:	4798      	blx	r3
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c0d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3710      	adds	r7, #16
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}
 800c0e0:	2000219c 	.word	0x2000219c

0800c0e4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c0f2:	79fb      	ldrb	r3, [r7, #7]
 800c0f4:	4a0d      	ldr	r2, [pc, #52]	; (800c12c <disk_initialize+0x48>)
 800c0f6:	5cd3      	ldrb	r3, [r2, r3]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d111      	bne.n	800c120 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c0fc:	79fb      	ldrb	r3, [r7, #7]
 800c0fe:	4a0b      	ldr	r2, [pc, #44]	; (800c12c <disk_initialize+0x48>)
 800c100:	2101      	movs	r1, #1
 800c102:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c104:	79fb      	ldrb	r3, [r7, #7]
 800c106:	4a09      	ldr	r2, [pc, #36]	; (800c12c <disk_initialize+0x48>)
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	4413      	add	r3, r2
 800c10c:	685b      	ldr	r3, [r3, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	79fa      	ldrb	r2, [r7, #7]
 800c112:	4906      	ldr	r1, [pc, #24]	; (800c12c <disk_initialize+0x48>)
 800c114:	440a      	add	r2, r1
 800c116:	7d12      	ldrb	r2, [r2, #20]
 800c118:	4610      	mov	r0, r2
 800c11a:	4798      	blx	r3
 800c11c:	4603      	mov	r3, r0
 800c11e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c120:	7bfb      	ldrb	r3, [r7, #15]
}
 800c122:	4618      	mov	r0, r3
 800c124:	3710      	adds	r7, #16
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	2000219c 	.word	0x2000219c

0800c130 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c130:	b590      	push	{r4, r7, lr}
 800c132:	b087      	sub	sp, #28
 800c134:	af00      	add	r7, sp, #0
 800c136:	60b9      	str	r1, [r7, #8]
 800c138:	607a      	str	r2, [r7, #4]
 800c13a:	603b      	str	r3, [r7, #0]
 800c13c:	4603      	mov	r3, r0
 800c13e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c140:	7bfb      	ldrb	r3, [r7, #15]
 800c142:	4a0a      	ldr	r2, [pc, #40]	; (800c16c <disk_read+0x3c>)
 800c144:	009b      	lsls	r3, r3, #2
 800c146:	4413      	add	r3, r2
 800c148:	685b      	ldr	r3, [r3, #4]
 800c14a:	689c      	ldr	r4, [r3, #8]
 800c14c:	7bfb      	ldrb	r3, [r7, #15]
 800c14e:	4a07      	ldr	r2, [pc, #28]	; (800c16c <disk_read+0x3c>)
 800c150:	4413      	add	r3, r2
 800c152:	7d18      	ldrb	r0, [r3, #20]
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	687a      	ldr	r2, [r7, #4]
 800c158:	68b9      	ldr	r1, [r7, #8]
 800c15a:	47a0      	blx	r4
 800c15c:	4603      	mov	r3, r0
 800c15e:	75fb      	strb	r3, [r7, #23]
  return res;
 800c160:	7dfb      	ldrb	r3, [r7, #23]
}
 800c162:	4618      	mov	r0, r3
 800c164:	371c      	adds	r7, #28
 800c166:	46bd      	mov	sp, r7
 800c168:	bd90      	pop	{r4, r7, pc}
 800c16a:	bf00      	nop
 800c16c:	2000219c 	.word	0x2000219c

0800c170 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c170:	b590      	push	{r4, r7, lr}
 800c172:	b087      	sub	sp, #28
 800c174:	af00      	add	r7, sp, #0
 800c176:	60b9      	str	r1, [r7, #8]
 800c178:	607a      	str	r2, [r7, #4]
 800c17a:	603b      	str	r3, [r7, #0]
 800c17c:	4603      	mov	r3, r0
 800c17e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c180:	7bfb      	ldrb	r3, [r7, #15]
 800c182:	4a0a      	ldr	r2, [pc, #40]	; (800c1ac <disk_write+0x3c>)
 800c184:	009b      	lsls	r3, r3, #2
 800c186:	4413      	add	r3, r2
 800c188:	685b      	ldr	r3, [r3, #4]
 800c18a:	68dc      	ldr	r4, [r3, #12]
 800c18c:	7bfb      	ldrb	r3, [r7, #15]
 800c18e:	4a07      	ldr	r2, [pc, #28]	; (800c1ac <disk_write+0x3c>)
 800c190:	4413      	add	r3, r2
 800c192:	7d18      	ldrb	r0, [r3, #20]
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	687a      	ldr	r2, [r7, #4]
 800c198:	68b9      	ldr	r1, [r7, #8]
 800c19a:	47a0      	blx	r4
 800c19c:	4603      	mov	r3, r0
 800c19e:	75fb      	strb	r3, [r7, #23]
  return res;
 800c1a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	371c      	adds	r7, #28
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd90      	pop	{r4, r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	2000219c 	.word	0x2000219c

0800c1b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b084      	sub	sp, #16
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	603a      	str	r2, [r7, #0]
 800c1ba:	71fb      	strb	r3, [r7, #7]
 800c1bc:	460b      	mov	r3, r1
 800c1be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c1c0:	79fb      	ldrb	r3, [r7, #7]
 800c1c2:	4a09      	ldr	r2, [pc, #36]	; (800c1e8 <disk_ioctl+0x38>)
 800c1c4:	009b      	lsls	r3, r3, #2
 800c1c6:	4413      	add	r3, r2
 800c1c8:	685b      	ldr	r3, [r3, #4]
 800c1ca:	691b      	ldr	r3, [r3, #16]
 800c1cc:	79fa      	ldrb	r2, [r7, #7]
 800c1ce:	4906      	ldr	r1, [pc, #24]	; (800c1e8 <disk_ioctl+0x38>)
 800c1d0:	440a      	add	r2, r1
 800c1d2:	7d10      	ldrb	r0, [r2, #20]
 800c1d4:	79b9      	ldrb	r1, [r7, #6]
 800c1d6:	683a      	ldr	r2, [r7, #0]
 800c1d8:	4798      	blx	r3
 800c1da:	4603      	mov	r3, r0
 800c1dc:	73fb      	strb	r3, [r7, #15]
  return res;
 800c1de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3710      	adds	r7, #16
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}
 800c1e8:	2000219c 	.word	0x2000219c

0800c1ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b085      	sub	sp, #20
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	781b      	ldrb	r3, [r3, #0]
 800c1fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c1fc:	89fb      	ldrh	r3, [r7, #14]
 800c1fe:	021b      	lsls	r3, r3, #8
 800c200:	b21a      	sxth	r2, r3
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	b21b      	sxth	r3, r3
 800c208:	4313      	orrs	r3, r2
 800c20a:	b21b      	sxth	r3, r3
 800c20c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c20e:	89fb      	ldrh	r3, [r7, #14]
}
 800c210:	4618      	mov	r0, r3
 800c212:	3714      	adds	r7, #20
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr

0800c21c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c21c:	b480      	push	{r7}
 800c21e:	b085      	sub	sp, #20
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	3303      	adds	r3, #3
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	021b      	lsls	r3, r3, #8
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	3202      	adds	r2, #2
 800c234:	7812      	ldrb	r2, [r2, #0]
 800c236:	4313      	orrs	r3, r2
 800c238:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	021b      	lsls	r3, r3, #8
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	3201      	adds	r2, #1
 800c242:	7812      	ldrb	r2, [r2, #0]
 800c244:	4313      	orrs	r3, r2
 800c246:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	021b      	lsls	r3, r3, #8
 800c24c:	687a      	ldr	r2, [r7, #4]
 800c24e:	7812      	ldrb	r2, [r2, #0]
 800c250:	4313      	orrs	r3, r2
 800c252:	60fb      	str	r3, [r7, #12]
	return rv;
 800c254:	68fb      	ldr	r3, [r7, #12]
}
 800c256:	4618      	mov	r0, r3
 800c258:	3714      	adds	r7, #20
 800c25a:	46bd      	mov	sp, r7
 800c25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c260:	4770      	bx	lr

0800c262 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800c262:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c266:	b09d      	sub	sp, #116	; 0x74
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 800c26c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c26e:	3307      	adds	r3, #7
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	b2db      	uxtb	r3, r3
 800c274:	2200      	movs	r2, #0
 800c276:	469a      	mov	sl, r3
 800c278:	4693      	mov	fp, r2
 800c27a:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 800c27e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c282:	f04f 0000 	mov.w	r0, #0
 800c286:	f04f 0100 	mov.w	r1, #0
 800c28a:	0219      	lsls	r1, r3, #8
 800c28c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c290:	0210      	lsls	r0, r2, #8
 800c292:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c294:	3306      	adds	r3, #6
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	b2db      	uxtb	r3, r3
 800c29a:	2200      	movs	r2, #0
 800c29c:	461c      	mov	r4, r3
 800c29e:	4615      	mov	r5, r2
 800c2a0:	ea40 0804 	orr.w	r8, r0, r4
 800c2a4:	ea41 0905 	orr.w	r9, r1, r5
 800c2a8:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 800c2ac:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c2b0:	f04f 0000 	mov.w	r0, #0
 800c2b4:	f04f 0100 	mov.w	r1, #0
 800c2b8:	0219      	lsls	r1, r3, #8
 800c2ba:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c2be:	0210      	lsls	r0, r2, #8
 800c2c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c2c2:	3305      	adds	r3, #5
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	b2db      	uxtb	r3, r3
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	65bb      	str	r3, [r7, #88]	; 0x58
 800c2cc:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c2ce:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800c2d2:	4623      	mov	r3, r4
 800c2d4:	4303      	orrs	r3, r0
 800c2d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c2d8:	462b      	mov	r3, r5
 800c2da:	430b      	orrs	r3, r1
 800c2dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2de:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800c2e2:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 800c2e6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c2ea:	f04f 0000 	mov.w	r0, #0
 800c2ee:	f04f 0100 	mov.w	r1, #0
 800c2f2:	0219      	lsls	r1, r3, #8
 800c2f4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c2f8:	0210      	lsls	r0, r2, #8
 800c2fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c2fc:	3304      	adds	r3, #4
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	b2db      	uxtb	r3, r3
 800c302:	2200      	movs	r2, #0
 800c304:	653b      	str	r3, [r7, #80]	; 0x50
 800c306:	657a      	str	r2, [r7, #84]	; 0x54
 800c308:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800c30c:	4623      	mov	r3, r4
 800c30e:	4303      	orrs	r3, r0
 800c310:	623b      	str	r3, [r7, #32]
 800c312:	462b      	mov	r3, r5
 800c314:	430b      	orrs	r3, r1
 800c316:	627b      	str	r3, [r7, #36]	; 0x24
 800c318:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c31c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 800c320:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c324:	f04f 0000 	mov.w	r0, #0
 800c328:	f04f 0100 	mov.w	r1, #0
 800c32c:	0219      	lsls	r1, r3, #8
 800c32e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c332:	0210      	lsls	r0, r2, #8
 800c334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c336:	3303      	adds	r3, #3
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	b2db      	uxtb	r3, r3
 800c33c:	2200      	movs	r2, #0
 800c33e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c340:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c342:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800c346:	4623      	mov	r3, r4
 800c348:	4303      	orrs	r3, r0
 800c34a:	61bb      	str	r3, [r7, #24]
 800c34c:	462b      	mov	r3, r5
 800c34e:	430b      	orrs	r3, r1
 800c350:	61fb      	str	r3, [r7, #28]
 800c352:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c356:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 800c35a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c35e:	f04f 0000 	mov.w	r0, #0
 800c362:	f04f 0100 	mov.w	r1, #0
 800c366:	0219      	lsls	r1, r3, #8
 800c368:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c36c:	0210      	lsls	r0, r2, #8
 800c36e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c370:	3302      	adds	r3, #2
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	b2db      	uxtb	r3, r3
 800c376:	2200      	movs	r2, #0
 800c378:	643b      	str	r3, [r7, #64]	; 0x40
 800c37a:	647a      	str	r2, [r7, #68]	; 0x44
 800c37c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800c380:	4623      	mov	r3, r4
 800c382:	4303      	orrs	r3, r0
 800c384:	613b      	str	r3, [r7, #16]
 800c386:	462b      	mov	r3, r5
 800c388:	430b      	orrs	r3, r1
 800c38a:	617b      	str	r3, [r7, #20]
 800c38c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c390:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 800c394:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c398:	f04f 0200 	mov.w	r2, #0
 800c39c:	f04f 0300 	mov.w	r3, #0
 800c3a0:	020b      	lsls	r3, r1, #8
 800c3a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c3a6:	0202      	lsls	r2, r0, #8
 800c3a8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c3aa:	3101      	adds	r1, #1
 800c3ac:	7809      	ldrb	r1, [r1, #0]
 800c3ae:	b2c9      	uxtb	r1, r1
 800c3b0:	2000      	movs	r0, #0
 800c3b2:	63b9      	str	r1, [r7, #56]	; 0x38
 800c3b4:	63f8      	str	r0, [r7, #60]	; 0x3c
 800c3b6:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800c3ba:	4621      	mov	r1, r4
 800c3bc:	4311      	orrs	r1, r2
 800c3be:	60b9      	str	r1, [r7, #8]
 800c3c0:	4629      	mov	r1, r5
 800c3c2:	4319      	orrs	r1, r3
 800c3c4:	60f9      	str	r1, [r7, #12]
 800c3c6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c3ca:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 800c3ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c3d2:	f04f 0200 	mov.w	r2, #0
 800c3d6:	f04f 0300 	mov.w	r3, #0
 800c3da:	020b      	lsls	r3, r1, #8
 800c3dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c3e0:	0202      	lsls	r2, r0, #8
 800c3e2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c3e4:	7809      	ldrb	r1, [r1, #0]
 800c3e6:	b2c9      	uxtb	r1, r1
 800c3e8:	2000      	movs	r0, #0
 800c3ea:	6339      	str	r1, [r7, #48]	; 0x30
 800c3ec:	6378      	str	r0, [r7, #52]	; 0x34
 800c3ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800c3f2:	4621      	mov	r1, r4
 800c3f4:	4311      	orrs	r1, r2
 800c3f6:	6039      	str	r1, [r7, #0]
 800c3f8:	4629      	mov	r1, r5
 800c3fa:	4319      	orrs	r1, r3
 800c3fc:	6079      	str	r1, [r7, #4]
 800c3fe:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c402:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 800c406:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 800c40a:	4610      	mov	r0, r2
 800c40c:	4619      	mov	r1, r3
 800c40e:	3774      	adds	r7, #116	; 0x74
 800c410:	46bd      	mov	sp, r7
 800c412:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c416:	4770      	bx	lr

0800c418 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c418:	b480      	push	{r7}
 800c41a:	b083      	sub	sp, #12
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	460b      	mov	r3, r1
 800c422:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	1c5a      	adds	r2, r3, #1
 800c428:	607a      	str	r2, [r7, #4]
 800c42a:	887a      	ldrh	r2, [r7, #2]
 800c42c:	b2d2      	uxtb	r2, r2
 800c42e:	701a      	strb	r2, [r3, #0]
 800c430:	887b      	ldrh	r3, [r7, #2]
 800c432:	0a1b      	lsrs	r3, r3, #8
 800c434:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	1c5a      	adds	r2, r3, #1
 800c43a:	607a      	str	r2, [r7, #4]
 800c43c:	887a      	ldrh	r2, [r7, #2]
 800c43e:	b2d2      	uxtb	r2, r2
 800c440:	701a      	strb	r2, [r3, #0]
}
 800c442:	bf00      	nop
 800c444:	370c      	adds	r7, #12
 800c446:	46bd      	mov	sp, r7
 800c448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44c:	4770      	bx	lr

0800c44e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c44e:	b480      	push	{r7}
 800c450:	b083      	sub	sp, #12
 800c452:	af00      	add	r7, sp, #0
 800c454:	6078      	str	r0, [r7, #4]
 800c456:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	1c5a      	adds	r2, r3, #1
 800c45c:	607a      	str	r2, [r7, #4]
 800c45e:	683a      	ldr	r2, [r7, #0]
 800c460:	b2d2      	uxtb	r2, r2
 800c462:	701a      	strb	r2, [r3, #0]
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	0a1b      	lsrs	r3, r3, #8
 800c468:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	1c5a      	adds	r2, r3, #1
 800c46e:	607a      	str	r2, [r7, #4]
 800c470:	683a      	ldr	r2, [r7, #0]
 800c472:	b2d2      	uxtb	r2, r2
 800c474:	701a      	strb	r2, [r3, #0]
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	0a1b      	lsrs	r3, r3, #8
 800c47a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	1c5a      	adds	r2, r3, #1
 800c480:	607a      	str	r2, [r7, #4]
 800c482:	683a      	ldr	r2, [r7, #0]
 800c484:	b2d2      	uxtb	r2, r2
 800c486:	701a      	strb	r2, [r3, #0]
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	0a1b      	lsrs	r3, r3, #8
 800c48c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	1c5a      	adds	r2, r3, #1
 800c492:	607a      	str	r2, [r7, #4]
 800c494:	683a      	ldr	r2, [r7, #0]
 800c496:	b2d2      	uxtb	r2, r2
 800c498:	701a      	strb	r2, [r3, #0]
}
 800c49a:	bf00      	nop
 800c49c:	370c      	adds	r7, #12
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a4:	4770      	bx	lr

0800c4a6 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800c4a6:	b480      	push	{r7}
 800c4a8:	b085      	sub	sp, #20
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	60f8      	str	r0, [r7, #12]
 800c4ae:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	1c5a      	adds	r2, r3, #1
 800c4b6:	60fa      	str	r2, [r7, #12]
 800c4b8:	783a      	ldrb	r2, [r7, #0]
 800c4ba:	701a      	strb	r2, [r3, #0]
 800c4bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c4c0:	f04f 0200 	mov.w	r2, #0
 800c4c4:	f04f 0300 	mov.w	r3, #0
 800c4c8:	0a02      	lsrs	r2, r0, #8
 800c4ca:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c4ce:	0a0b      	lsrs	r3, r1, #8
 800c4d0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	1c5a      	adds	r2, r3, #1
 800c4d8:	60fa      	str	r2, [r7, #12]
 800c4da:	783a      	ldrb	r2, [r7, #0]
 800c4dc:	701a      	strb	r2, [r3, #0]
 800c4de:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c4e2:	f04f 0200 	mov.w	r2, #0
 800c4e6:	f04f 0300 	mov.w	r3, #0
 800c4ea:	0a02      	lsrs	r2, r0, #8
 800c4ec:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c4f0:	0a0b      	lsrs	r3, r1, #8
 800c4f2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	1c5a      	adds	r2, r3, #1
 800c4fa:	60fa      	str	r2, [r7, #12]
 800c4fc:	783a      	ldrb	r2, [r7, #0]
 800c4fe:	701a      	strb	r2, [r3, #0]
 800c500:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c504:	f04f 0200 	mov.w	r2, #0
 800c508:	f04f 0300 	mov.w	r3, #0
 800c50c:	0a02      	lsrs	r2, r0, #8
 800c50e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c512:	0a0b      	lsrs	r3, r1, #8
 800c514:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	1c5a      	adds	r2, r3, #1
 800c51c:	60fa      	str	r2, [r7, #12]
 800c51e:	783a      	ldrb	r2, [r7, #0]
 800c520:	701a      	strb	r2, [r3, #0]
 800c522:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c526:	f04f 0200 	mov.w	r2, #0
 800c52a:	f04f 0300 	mov.w	r3, #0
 800c52e:	0a02      	lsrs	r2, r0, #8
 800c530:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c534:	0a0b      	lsrs	r3, r1, #8
 800c536:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	1c5a      	adds	r2, r3, #1
 800c53e:	60fa      	str	r2, [r7, #12]
 800c540:	783a      	ldrb	r2, [r7, #0]
 800c542:	701a      	strb	r2, [r3, #0]
 800c544:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c548:	f04f 0200 	mov.w	r2, #0
 800c54c:	f04f 0300 	mov.w	r3, #0
 800c550:	0a02      	lsrs	r2, r0, #8
 800c552:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c556:	0a0b      	lsrs	r3, r1, #8
 800c558:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	1c5a      	adds	r2, r3, #1
 800c560:	60fa      	str	r2, [r7, #12]
 800c562:	783a      	ldrb	r2, [r7, #0]
 800c564:	701a      	strb	r2, [r3, #0]
 800c566:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c56a:	f04f 0200 	mov.w	r2, #0
 800c56e:	f04f 0300 	mov.w	r3, #0
 800c572:	0a02      	lsrs	r2, r0, #8
 800c574:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c578:	0a0b      	lsrs	r3, r1, #8
 800c57a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	1c5a      	adds	r2, r3, #1
 800c582:	60fa      	str	r2, [r7, #12]
 800c584:	783a      	ldrb	r2, [r7, #0]
 800c586:	701a      	strb	r2, [r3, #0]
 800c588:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c58c:	f04f 0200 	mov.w	r2, #0
 800c590:	f04f 0300 	mov.w	r3, #0
 800c594:	0a02      	lsrs	r2, r0, #8
 800c596:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c59a:	0a0b      	lsrs	r3, r1, #8
 800c59c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	1c5a      	adds	r2, r3, #1
 800c5a4:	60fa      	str	r2, [r7, #12]
 800c5a6:	783a      	ldrb	r2, [r7, #0]
 800c5a8:	701a      	strb	r2, [r3, #0]
}
 800c5aa:	bf00      	nop
 800c5ac:	3714      	adds	r7, #20
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b4:	4770      	bx	lr

0800c5b6 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c5b6:	b480      	push	{r7}
 800c5b8:	b087      	sub	sp, #28
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	60f8      	str	r0, [r7, #12]
 800c5be:	60b9      	str	r1, [r7, #8]
 800c5c0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d00d      	beq.n	800c5ec <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c5d0:	693a      	ldr	r2, [r7, #16]
 800c5d2:	1c53      	adds	r3, r2, #1
 800c5d4:	613b      	str	r3, [r7, #16]
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	1c59      	adds	r1, r3, #1
 800c5da:	6179      	str	r1, [r7, #20]
 800c5dc:	7812      	ldrb	r2, [r2, #0]
 800c5de:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	3b01      	subs	r3, #1
 800c5e4:	607b      	str	r3, [r7, #4]
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d1f1      	bne.n	800c5d0 <mem_cpy+0x1a>
	}
}
 800c5ec:	bf00      	nop
 800c5ee:	371c      	adds	r7, #28
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f6:	4770      	bx	lr

0800c5f8 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c5f8:	b480      	push	{r7}
 800c5fa:	b087      	sub	sp, #28
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	60f8      	str	r0, [r7, #12]
 800c600:	60b9      	str	r1, [r7, #8]
 800c602:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	1c5a      	adds	r2, r3, #1
 800c60c:	617a      	str	r2, [r7, #20]
 800c60e:	68ba      	ldr	r2, [r7, #8]
 800c610:	b2d2      	uxtb	r2, r2
 800c612:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	3b01      	subs	r3, #1
 800c618:	607b      	str	r3, [r7, #4]
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d1f3      	bne.n	800c608 <mem_set+0x10>
}
 800c620:	bf00      	nop
 800c622:	bf00      	nop
 800c624:	371c      	adds	r7, #28
 800c626:	46bd      	mov	sp, r7
 800c628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62c:	4770      	bx	lr

0800c62e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c62e:	b480      	push	{r7}
 800c630:	b089      	sub	sp, #36	; 0x24
 800c632:	af00      	add	r7, sp, #0
 800c634:	60f8      	str	r0, [r7, #12]
 800c636:	60b9      	str	r1, [r7, #8]
 800c638:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	61fb      	str	r3, [r7, #28]
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c642:	2300      	movs	r3, #0
 800c644:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c646:	69fb      	ldr	r3, [r7, #28]
 800c648:	1c5a      	adds	r2, r3, #1
 800c64a:	61fa      	str	r2, [r7, #28]
 800c64c:	781b      	ldrb	r3, [r3, #0]
 800c64e:	4619      	mov	r1, r3
 800c650:	69bb      	ldr	r3, [r7, #24]
 800c652:	1c5a      	adds	r2, r3, #1
 800c654:	61ba      	str	r2, [r7, #24]
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	1acb      	subs	r3, r1, r3
 800c65a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	3b01      	subs	r3, #1
 800c660:	607b      	str	r3, [r7, #4]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d002      	beq.n	800c66e <mem_cmp+0x40>
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d0eb      	beq.n	800c646 <mem_cmp+0x18>

	return r;
 800c66e:	697b      	ldr	r3, [r7, #20]
}
 800c670:	4618      	mov	r0, r3
 800c672:	3724      	adds	r7, #36	; 0x24
 800c674:	46bd      	mov	sp, r7
 800c676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67a:	4770      	bx	lr

0800c67c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c67c:	b480      	push	{r7}
 800c67e:	b083      	sub	sp, #12
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c686:	e002      	b.n	800c68e <chk_chr+0x12>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	3301      	adds	r3, #1
 800c68c:	607b      	str	r3, [r7, #4]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d005      	beq.n	800c6a2 <chk_chr+0x26>
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	461a      	mov	r2, r3
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d1f2      	bne.n	800c688 <chk_chr+0xc>
	return *str;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	781b      	ldrb	r3, [r3, #0]
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	370c      	adds	r7, #12
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b0:	4770      	bx	lr
	...

0800c6b4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	b085      	sub	sp, #20
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c6be:	2300      	movs	r3, #0
 800c6c0:	60bb      	str	r3, [r7, #8]
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	60fb      	str	r3, [r7, #12]
 800c6c6:	e029      	b.n	800c71c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c6c8:	4a27      	ldr	r2, [pc, #156]	; (800c768 <chk_lock+0xb4>)
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	011b      	lsls	r3, r3, #4
 800c6ce:	4413      	add	r3, r2
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d01d      	beq.n	800c712 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c6d6:	4a24      	ldr	r2, [pc, #144]	; (800c768 <chk_lock+0xb4>)
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	011b      	lsls	r3, r3, #4
 800c6dc:	4413      	add	r3, r2
 800c6de:	681a      	ldr	r2, [r3, #0]
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d116      	bne.n	800c716 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c6e8:	4a1f      	ldr	r2, [pc, #124]	; (800c768 <chk_lock+0xb4>)
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	011b      	lsls	r3, r3, #4
 800c6ee:	4413      	add	r3, r2
 800c6f0:	3304      	adds	r3, #4
 800c6f2:	681a      	ldr	r2, [r3, #0]
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d10c      	bne.n	800c716 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c6fc:	4a1a      	ldr	r2, [pc, #104]	; (800c768 <chk_lock+0xb4>)
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	011b      	lsls	r3, r3, #4
 800c702:	4413      	add	r3, r2
 800c704:	3308      	adds	r3, #8
 800c706:	681a      	ldr	r2, [r3, #0]
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800c70c:	429a      	cmp	r2, r3
 800c70e:	d102      	bne.n	800c716 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c710:	e007      	b.n	800c722 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c712:	2301      	movs	r3, #1
 800c714:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	3301      	adds	r3, #1
 800c71a:	60fb      	str	r3, [r7, #12]
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	2b01      	cmp	r3, #1
 800c720:	d9d2      	bls.n	800c6c8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	2b02      	cmp	r3, #2
 800c726:	d109      	bne.n	800c73c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d102      	bne.n	800c734 <chk_lock+0x80>
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	2b02      	cmp	r3, #2
 800c732:	d101      	bne.n	800c738 <chk_lock+0x84>
 800c734:	2300      	movs	r3, #0
 800c736:	e010      	b.n	800c75a <chk_lock+0xa6>
 800c738:	2312      	movs	r3, #18
 800c73a:	e00e      	b.n	800c75a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d108      	bne.n	800c754 <chk_lock+0xa0>
 800c742:	4a09      	ldr	r2, [pc, #36]	; (800c768 <chk_lock+0xb4>)
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	011b      	lsls	r3, r3, #4
 800c748:	4413      	add	r3, r2
 800c74a:	330c      	adds	r3, #12
 800c74c:	881b      	ldrh	r3, [r3, #0]
 800c74e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c752:	d101      	bne.n	800c758 <chk_lock+0xa4>
 800c754:	2310      	movs	r3, #16
 800c756:	e000      	b.n	800c75a <chk_lock+0xa6>
 800c758:	2300      	movs	r3, #0
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	3714      	adds	r7, #20
 800c75e:	46bd      	mov	sp, r7
 800c760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c764:	4770      	bx	lr
 800c766:	bf00      	nop
 800c768:	20001d1c 	.word	0x20001d1c

0800c76c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c76c:	b480      	push	{r7}
 800c76e:	b083      	sub	sp, #12
 800c770:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c772:	2300      	movs	r3, #0
 800c774:	607b      	str	r3, [r7, #4]
 800c776:	e002      	b.n	800c77e <enq_lock+0x12>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	3301      	adds	r3, #1
 800c77c:	607b      	str	r3, [r7, #4]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2b01      	cmp	r3, #1
 800c782:	d806      	bhi.n	800c792 <enq_lock+0x26>
 800c784:	4a09      	ldr	r2, [pc, #36]	; (800c7ac <enq_lock+0x40>)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	011b      	lsls	r3, r3, #4
 800c78a:	4413      	add	r3, r2
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d1f2      	bne.n	800c778 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2b02      	cmp	r3, #2
 800c796:	bf14      	ite	ne
 800c798:	2301      	movne	r3, #1
 800c79a:	2300      	moveq	r3, #0
 800c79c:	b2db      	uxtb	r3, r3
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	370c      	adds	r7, #12
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a8:	4770      	bx	lr
 800c7aa:	bf00      	nop
 800c7ac:	20001d1c 	.word	0x20001d1c

0800c7b0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b085      	sub	sp, #20
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	60fb      	str	r3, [r7, #12]
 800c7be:	e01f      	b.n	800c800 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c7c0:	4a41      	ldr	r2, [pc, #260]	; (800c8c8 <inc_lock+0x118>)
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	011b      	lsls	r3, r3, #4
 800c7c6:	4413      	add	r3, r2
 800c7c8:	681a      	ldr	r2, [r3, #0]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	d113      	bne.n	800c7fa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c7d2:	4a3d      	ldr	r2, [pc, #244]	; (800c8c8 <inc_lock+0x118>)
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	011b      	lsls	r3, r3, #4
 800c7d8:	4413      	add	r3, r2
 800c7da:	3304      	adds	r3, #4
 800c7dc:	681a      	ldr	r2, [r3, #0]
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d109      	bne.n	800c7fa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c7e6:	4a38      	ldr	r2, [pc, #224]	; (800c8c8 <inc_lock+0x118>)
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	011b      	lsls	r3, r3, #4
 800c7ec:	4413      	add	r3, r2
 800c7ee:	3308      	adds	r3, #8
 800c7f0:	681a      	ldr	r2, [r3, #0]
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	d006      	beq.n	800c808 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	60fb      	str	r3, [r7, #12]
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	2b01      	cmp	r3, #1
 800c804:	d9dc      	bls.n	800c7c0 <inc_lock+0x10>
 800c806:	e000      	b.n	800c80a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c808:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2b02      	cmp	r3, #2
 800c80e:	d132      	bne.n	800c876 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c810:	2300      	movs	r3, #0
 800c812:	60fb      	str	r3, [r7, #12]
 800c814:	e002      	b.n	800c81c <inc_lock+0x6c>
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	3301      	adds	r3, #1
 800c81a:	60fb      	str	r3, [r7, #12]
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	2b01      	cmp	r3, #1
 800c820:	d806      	bhi.n	800c830 <inc_lock+0x80>
 800c822:	4a29      	ldr	r2, [pc, #164]	; (800c8c8 <inc_lock+0x118>)
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	011b      	lsls	r3, r3, #4
 800c828:	4413      	add	r3, r2
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d1f2      	bne.n	800c816 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	2b02      	cmp	r3, #2
 800c834:	d101      	bne.n	800c83a <inc_lock+0x8a>
 800c836:	2300      	movs	r3, #0
 800c838:	e040      	b.n	800c8bc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681a      	ldr	r2, [r3, #0]
 800c83e:	4922      	ldr	r1, [pc, #136]	; (800c8c8 <inc_lock+0x118>)
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	011b      	lsls	r3, r3, #4
 800c844:	440b      	add	r3, r1
 800c846:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	689a      	ldr	r2, [r3, #8]
 800c84c:	491e      	ldr	r1, [pc, #120]	; (800c8c8 <inc_lock+0x118>)
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	011b      	lsls	r3, r3, #4
 800c852:	440b      	add	r3, r1
 800c854:	3304      	adds	r3, #4
 800c856:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c85c:	491a      	ldr	r1, [pc, #104]	; (800c8c8 <inc_lock+0x118>)
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	011b      	lsls	r3, r3, #4
 800c862:	440b      	add	r3, r1
 800c864:	3308      	adds	r3, #8
 800c866:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c868:	4a17      	ldr	r2, [pc, #92]	; (800c8c8 <inc_lock+0x118>)
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	011b      	lsls	r3, r3, #4
 800c86e:	4413      	add	r3, r2
 800c870:	330c      	adds	r3, #12
 800c872:	2200      	movs	r2, #0
 800c874:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d009      	beq.n	800c890 <inc_lock+0xe0>
 800c87c:	4a12      	ldr	r2, [pc, #72]	; (800c8c8 <inc_lock+0x118>)
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	011b      	lsls	r3, r3, #4
 800c882:	4413      	add	r3, r2
 800c884:	330c      	adds	r3, #12
 800c886:	881b      	ldrh	r3, [r3, #0]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d001      	beq.n	800c890 <inc_lock+0xe0>
 800c88c:	2300      	movs	r3, #0
 800c88e:	e015      	b.n	800c8bc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d108      	bne.n	800c8a8 <inc_lock+0xf8>
 800c896:	4a0c      	ldr	r2, [pc, #48]	; (800c8c8 <inc_lock+0x118>)
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	011b      	lsls	r3, r3, #4
 800c89c:	4413      	add	r3, r2
 800c89e:	330c      	adds	r3, #12
 800c8a0:	881b      	ldrh	r3, [r3, #0]
 800c8a2:	3301      	adds	r3, #1
 800c8a4:	b29a      	uxth	r2, r3
 800c8a6:	e001      	b.n	800c8ac <inc_lock+0xfc>
 800c8a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c8ac:	4906      	ldr	r1, [pc, #24]	; (800c8c8 <inc_lock+0x118>)
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	011b      	lsls	r3, r3, #4
 800c8b2:	440b      	add	r3, r1
 800c8b4:	330c      	adds	r3, #12
 800c8b6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	3301      	adds	r3, #1
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3714      	adds	r7, #20
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr
 800c8c8:	20001d1c 	.word	0x20001d1c

0800c8cc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b085      	sub	sp, #20
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	3b01      	subs	r3, #1
 800c8d8:	607b      	str	r3, [r7, #4]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	d825      	bhi.n	800c92c <dec_lock+0x60>
		n = Files[i].ctr;
 800c8e0:	4a17      	ldr	r2, [pc, #92]	; (800c940 <dec_lock+0x74>)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	011b      	lsls	r3, r3, #4
 800c8e6:	4413      	add	r3, r2
 800c8e8:	330c      	adds	r3, #12
 800c8ea:	881b      	ldrh	r3, [r3, #0]
 800c8ec:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c8ee:	89fb      	ldrh	r3, [r7, #14]
 800c8f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8f4:	d101      	bne.n	800c8fa <dec_lock+0x2e>
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c8fa:	89fb      	ldrh	r3, [r7, #14]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d002      	beq.n	800c906 <dec_lock+0x3a>
 800c900:	89fb      	ldrh	r3, [r7, #14]
 800c902:	3b01      	subs	r3, #1
 800c904:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c906:	4a0e      	ldr	r2, [pc, #56]	; (800c940 <dec_lock+0x74>)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	011b      	lsls	r3, r3, #4
 800c90c:	4413      	add	r3, r2
 800c90e:	330c      	adds	r3, #12
 800c910:	89fa      	ldrh	r2, [r7, #14]
 800c912:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c914:	89fb      	ldrh	r3, [r7, #14]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d105      	bne.n	800c926 <dec_lock+0x5a>
 800c91a:	4a09      	ldr	r2, [pc, #36]	; (800c940 <dec_lock+0x74>)
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	011b      	lsls	r3, r3, #4
 800c920:	4413      	add	r3, r2
 800c922:	2200      	movs	r2, #0
 800c924:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c926:	2300      	movs	r3, #0
 800c928:	737b      	strb	r3, [r7, #13]
 800c92a:	e001      	b.n	800c930 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c92c:	2302      	movs	r3, #2
 800c92e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c930:	7b7b      	ldrb	r3, [r7, #13]
}
 800c932:	4618      	mov	r0, r3
 800c934:	3714      	adds	r7, #20
 800c936:	46bd      	mov	sp, r7
 800c938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93c:	4770      	bx	lr
 800c93e:	bf00      	nop
 800c940:	20001d1c 	.word	0x20001d1c

0800c944 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c944:	b480      	push	{r7}
 800c946:	b085      	sub	sp, #20
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c94c:	2300      	movs	r3, #0
 800c94e:	60fb      	str	r3, [r7, #12]
 800c950:	e010      	b.n	800c974 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c952:	4a0d      	ldr	r2, [pc, #52]	; (800c988 <clear_lock+0x44>)
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	011b      	lsls	r3, r3, #4
 800c958:	4413      	add	r3, r2
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	687a      	ldr	r2, [r7, #4]
 800c95e:	429a      	cmp	r2, r3
 800c960:	d105      	bne.n	800c96e <clear_lock+0x2a>
 800c962:	4a09      	ldr	r2, [pc, #36]	; (800c988 <clear_lock+0x44>)
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	011b      	lsls	r3, r3, #4
 800c968:	4413      	add	r3, r2
 800c96a:	2200      	movs	r2, #0
 800c96c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	3301      	adds	r3, #1
 800c972:	60fb      	str	r3, [r7, #12]
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	2b01      	cmp	r3, #1
 800c978:	d9eb      	bls.n	800c952 <clear_lock+0xe>
	}
}
 800c97a:	bf00      	nop
 800c97c:	bf00      	nop
 800c97e:	3714      	adds	r7, #20
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr
 800c988:	20001d1c 	.word	0x20001d1c

0800c98c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b086      	sub	sp, #24
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c994:	2300      	movs	r3, #0
 800c996:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	78db      	ldrb	r3, [r3, #3]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d034      	beq.n	800ca0a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9a4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	7858      	ldrb	r0, [r3, #1]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	697a      	ldr	r2, [r7, #20]
 800c9b4:	f7ff fbdc 	bl	800c170 <disk_write>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d002      	beq.n	800c9c4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c9be:	2301      	movs	r3, #1
 800c9c0:	73fb      	strb	r3, [r7, #15]
 800c9c2:	e022      	b.n	800ca0a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9ce:	697a      	ldr	r2, [r7, #20]
 800c9d0:	1ad2      	subs	r2, r2, r3
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6a1b      	ldr	r3, [r3, #32]
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d217      	bcs.n	800ca0a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	789b      	ldrb	r3, [r3, #2]
 800c9de:	613b      	str	r3, [r7, #16]
 800c9e0:	e010      	b.n	800ca04 <sync_window+0x78>
					wsect += fs->fsize;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6a1b      	ldr	r3, [r3, #32]
 800c9e6:	697a      	ldr	r2, [r7, #20]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	7858      	ldrb	r0, [r3, #1]
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	697a      	ldr	r2, [r7, #20]
 800c9fa:	f7ff fbb9 	bl	800c170 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	3b01      	subs	r3, #1
 800ca02:	613b      	str	r3, [r7, #16]
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	2b01      	cmp	r3, #1
 800ca08:	d8eb      	bhi.n	800c9e2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ca0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	3718      	adds	r7, #24
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}

0800ca14 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b084      	sub	sp, #16
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca26:	683a      	ldr	r2, [r7, #0]
 800ca28:	429a      	cmp	r2, r3
 800ca2a:	d01b      	beq.n	800ca64 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f7ff ffad 	bl	800c98c <sync_window>
 800ca32:	4603      	mov	r3, r0
 800ca34:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ca36:	7bfb      	ldrb	r3, [r7, #15]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d113      	bne.n	800ca64 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	7858      	ldrb	r0, [r3, #1]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ca46:	2301      	movs	r3, #1
 800ca48:	683a      	ldr	r2, [r7, #0]
 800ca4a:	f7ff fb71 	bl	800c130 <disk_read>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d004      	beq.n	800ca5e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ca54:	f04f 33ff 	mov.w	r3, #4294967295
 800ca58:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	683a      	ldr	r2, [r7, #0]
 800ca62:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800ca64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca66:	4618      	mov	r0, r3
 800ca68:	3710      	adds	r7, #16
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}
	...

0800ca70 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b084      	sub	sp, #16
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f7ff ff87 	bl	800c98c <sync_window>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ca82:	7bfb      	ldrb	r3, [r7, #15]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d158      	bne.n	800cb3a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	781b      	ldrb	r3, [r3, #0]
 800ca8c:	2b03      	cmp	r3, #3
 800ca8e:	d148      	bne.n	800cb22 <sync_fs+0xb2>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	791b      	ldrb	r3, [r3, #4]
 800ca94:	2b01      	cmp	r3, #1
 800ca96:	d144      	bne.n	800cb22 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	3338      	adds	r3, #56	; 0x38
 800ca9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800caa0:	2100      	movs	r1, #0
 800caa2:	4618      	mov	r0, r3
 800caa4:	f7ff fda8 	bl	800c5f8 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	3338      	adds	r3, #56	; 0x38
 800caac:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cab0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800cab4:	4618      	mov	r0, r3
 800cab6:	f7ff fcaf 	bl	800c418 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	3338      	adds	r3, #56	; 0x38
 800cabe:	4921      	ldr	r1, [pc, #132]	; (800cb44 <sync_fs+0xd4>)
 800cac0:	4618      	mov	r0, r3
 800cac2:	f7ff fcc4 	bl	800c44e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	3338      	adds	r3, #56	; 0x38
 800caca:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cace:	491e      	ldr	r1, [pc, #120]	; (800cb48 <sync_fs+0xd8>)
 800cad0:	4618      	mov	r0, r3
 800cad2:	f7ff fcbc 	bl	800c44e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	3338      	adds	r3, #56	; 0x38
 800cada:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	699b      	ldr	r3, [r3, #24]
 800cae2:	4619      	mov	r1, r3
 800cae4:	4610      	mov	r0, r2
 800cae6:	f7ff fcb2 	bl	800c44e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	3338      	adds	r3, #56	; 0x38
 800caee:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	695b      	ldr	r3, [r3, #20]
 800caf6:	4619      	mov	r1, r3
 800caf8:	4610      	mov	r0, r2
 800cafa:	f7ff fca8 	bl	800c44e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb02:	1c5a      	adds	r2, r3, #1
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	7858      	ldrb	r0, [r3, #1]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb16:	2301      	movs	r3, #1
 800cb18:	f7ff fb2a 	bl	800c170 <disk_write>
			fs->fsi_flag = 0;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	785b      	ldrb	r3, [r3, #1]
 800cb26:	2200      	movs	r2, #0
 800cb28:	2100      	movs	r1, #0
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f7ff fb40 	bl	800c1b0 <disk_ioctl>
 800cb30:	4603      	mov	r3, r0
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d001      	beq.n	800cb3a <sync_fs+0xca>
 800cb36:	2301      	movs	r3, #1
 800cb38:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800cb3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3710      	adds	r7, #16
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}
 800cb44:	41615252 	.word	0x41615252
 800cb48:	61417272 	.word	0x61417272

0800cb4c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b083      	sub	sp, #12
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	3b02      	subs	r3, #2
 800cb5a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	69db      	ldr	r3, [r3, #28]
 800cb60:	3b02      	subs	r3, #2
 800cb62:	683a      	ldr	r2, [r7, #0]
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d301      	bcc.n	800cb6c <clust2sect+0x20>
 800cb68:	2300      	movs	r3, #0
 800cb6a:	e008      	b.n	800cb7e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	895b      	ldrh	r3, [r3, #10]
 800cb70:	461a      	mov	r2, r3
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	fb03 f202 	mul.w	r2, r3, r2
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb7c:	4413      	add	r3, r2
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	370c      	adds	r7, #12
 800cb82:	46bd      	mov	sp, r7
 800cb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb88:	4770      	bx	lr
	...

0800cb8c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b088      	sub	sp, #32
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800cb96:	6879      	ldr	r1, [r7, #4]
 800cb98:	6809      	ldr	r1, [r1, #0]
 800cb9a:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cb9c:	6839      	ldr	r1, [r7, #0]
 800cb9e:	2901      	cmp	r1, #1
 800cba0:	d904      	bls.n	800cbac <get_fat+0x20>
 800cba2:	69b9      	ldr	r1, [r7, #24]
 800cba4:	69c9      	ldr	r1, [r1, #28]
 800cba6:	6838      	ldr	r0, [r7, #0]
 800cba8:	4288      	cmp	r0, r1
 800cbaa:	d302      	bcc.n	800cbb2 <get_fat+0x26>
		val = 1;	/* Internal error */
 800cbac:	2301      	movs	r3, #1
 800cbae:	61fb      	str	r3, [r7, #28]
 800cbb0:	e101      	b.n	800cdb6 <get_fat+0x22a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cbb2:	f04f 31ff 	mov.w	r1, #4294967295
 800cbb6:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 800cbb8:	69b9      	ldr	r1, [r7, #24]
 800cbba:	7809      	ldrb	r1, [r1, #0]
 800cbbc:	3901      	subs	r1, #1
 800cbbe:	2903      	cmp	r1, #3
 800cbc0:	f200 80ed 	bhi.w	800cd9e <get_fat+0x212>
 800cbc4:	a001      	add	r0, pc, #4	; (adr r0, 800cbcc <get_fat+0x40>)
 800cbc6:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cbca:	bf00      	nop
 800cbcc:	0800cbdd 	.word	0x0800cbdd
 800cbd0:	0800cc65 	.word	0x0800cc65
 800cbd4:	0800cc9b 	.word	0x0800cc9b
 800cbd8:	0800ccd3 	.word	0x0800ccd3
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	60fb      	str	r3, [r7, #12]
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	085b      	lsrs	r3, r3, #1
 800cbe4:	68fa      	ldr	r2, [r7, #12]
 800cbe6:	4413      	add	r3, r2
 800cbe8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cbea:	69bb      	ldr	r3, [r7, #24]
 800cbec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	0a5b      	lsrs	r3, r3, #9
 800cbf2:	4413      	add	r3, r2
 800cbf4:	4619      	mov	r1, r3
 800cbf6:	69b8      	ldr	r0, [r7, #24]
 800cbf8:	f7ff ff0c 	bl	800ca14 <move_window>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	f040 80d0 	bne.w	800cda4 <get_fat+0x218>
			wc = fs->win[bc++ % SS(fs)];
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	1c5a      	adds	r2, r3, #1
 800cc08:	60fa      	str	r2, [r7, #12]
 800cc0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc0e:	69ba      	ldr	r2, [r7, #24]
 800cc10:	4413      	add	r3, r2
 800cc12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cc16:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cc18:	69bb      	ldr	r3, [r7, #24]
 800cc1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	0a5b      	lsrs	r3, r3, #9
 800cc20:	4413      	add	r3, r2
 800cc22:	4619      	mov	r1, r3
 800cc24:	69b8      	ldr	r0, [r7, #24]
 800cc26:	f7ff fef5 	bl	800ca14 <move_window>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	f040 80bb 	bne.w	800cda8 <get_fat+0x21c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc38:	69ba      	ldr	r2, [r7, #24]
 800cc3a:	4413      	add	r3, r2
 800cc3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cc40:	021b      	lsls	r3, r3, #8
 800cc42:	461a      	mov	r2, r3
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	4313      	orrs	r3, r2
 800cc48:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	f003 0301 	and.w	r3, r3, #1
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d002      	beq.n	800cc5a <get_fat+0xce>
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	091b      	lsrs	r3, r3, #4
 800cc58:	e002      	b.n	800cc60 <get_fat+0xd4>
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cc60:	61fb      	str	r3, [r7, #28]
			break;
 800cc62:	e0a8      	b.n	800cdb6 <get_fat+0x22a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cc64:	69bb      	ldr	r3, [r7, #24]
 800cc66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	0a1b      	lsrs	r3, r3, #8
 800cc6c:	4413      	add	r3, r2
 800cc6e:	4619      	mov	r1, r3
 800cc70:	69b8      	ldr	r0, [r7, #24]
 800cc72:	f7ff fecf 	bl	800ca14 <move_window>
 800cc76:	4603      	mov	r3, r0
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	f040 8097 	bne.w	800cdac <get_fat+0x220>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cc7e:	69bb      	ldr	r3, [r7, #24]
 800cc80:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	005b      	lsls	r3, r3, #1
 800cc88:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800cc8c:	4413      	add	r3, r2
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7ff faac 	bl	800c1ec <ld_word>
 800cc94:	4603      	mov	r3, r0
 800cc96:	61fb      	str	r3, [r7, #28]
			break;
 800cc98:	e08d      	b.n	800cdb6 <get_fat+0x22a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cc9a:	69bb      	ldr	r3, [r7, #24]
 800cc9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	09db      	lsrs	r3, r3, #7
 800cca2:	4413      	add	r3, r2
 800cca4:	4619      	mov	r1, r3
 800cca6:	69b8      	ldr	r0, [r7, #24]
 800cca8:	f7ff feb4 	bl	800ca14 <move_window>
 800ccac:	4603      	mov	r3, r0
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d17e      	bne.n	800cdb0 <get_fat+0x224>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ccb2:	69bb      	ldr	r3, [r7, #24]
 800ccb4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	009b      	lsls	r3, r3, #2
 800ccbc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ccc0:	4413      	add	r3, r2
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f7ff faaa 	bl	800c21c <ld_dword>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ccce:	61fb      	str	r3, [r7, #28]
			break;
 800ccd0:	e071      	b.n	800cdb6 <get_fat+0x22a>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800ccd2:	6879      	ldr	r1, [r7, #4]
 800ccd4:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800ccd8:	4301      	orrs	r1, r0
 800ccda:	d060      	beq.n	800cd9e <get_fat+0x212>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800ccdc:	6879      	ldr	r1, [r7, #4]
 800ccde:	6889      	ldr	r1, [r1, #8]
 800cce0:	6838      	ldr	r0, [r7, #0]
 800cce2:	1a41      	subs	r1, r0, r1
 800cce4:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800cce6:	6879      	ldr	r1, [r7, #4]
 800cce8:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800ccec:	1e42      	subs	r2, r0, #1
 800ccee:	f141 33ff 	adc.w	r3, r1, #4294967295
 800ccf2:	f04f 0000 	mov.w	r0, #0
 800ccf6:	f04f 0100 	mov.w	r1, #0
 800ccfa:	0a50      	lsrs	r0, r2, #9
 800ccfc:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800cd00:	0a59      	lsrs	r1, r3, #9
 800cd02:	4602      	mov	r2, r0
 800cd04:	69bb      	ldr	r3, [r7, #24]
 800cd06:	895b      	ldrh	r3, [r3, #10]
 800cd08:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd0c:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	79db      	ldrb	r3, [r3, #7]
 800cd12:	2b02      	cmp	r3, #2
 800cd14:	d10e      	bne.n	800cd34 <get_fat+0x1a8>
					if (cofs <= clen) {
 800cd16:	697a      	ldr	r2, [r7, #20]
 800cd18:	693b      	ldr	r3, [r7, #16]
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	d80a      	bhi.n	800cd34 <get_fat+0x1a8>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800cd1e:	697a      	ldr	r2, [r7, #20]
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d002      	beq.n	800cd2c <get_fat+0x1a0>
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	3301      	adds	r3, #1
 800cd2a:	e001      	b.n	800cd30 <get_fat+0x1a4>
 800cd2c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cd30:	61fb      	str	r3, [r7, #28]
						break;
 800cd32:	e040      	b.n	800cdb6 <get_fat+0x22a>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	79db      	ldrb	r3, [r3, #7]
 800cd38:	2b03      	cmp	r3, #3
 800cd3a:	d108      	bne.n	800cd4e <get_fat+0x1c2>
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	699b      	ldr	r3, [r3, #24]
 800cd40:	697a      	ldr	r2, [r7, #20]
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d203      	bcs.n	800cd4e <get_fat+0x1c2>
					val = clst + 1; 	/* Generate the value */
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	3301      	adds	r3, #1
 800cd4a:	61fb      	str	r3, [r7, #28]
					break;
 800cd4c:	e033      	b.n	800cdb6 <get_fat+0x22a>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	79db      	ldrb	r3, [r3, #7]
 800cd52:	2b02      	cmp	r3, #2
 800cd54:	d023      	beq.n	800cd9e <get_fat+0x212>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	69db      	ldr	r3, [r3, #28]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d003      	beq.n	800cd66 <get_fat+0x1da>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800cd5e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cd62:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800cd64:	e027      	b.n	800cdb6 <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cd66:	69bb      	ldr	r3, [r7, #24]
 800cd68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	09db      	lsrs	r3, r3, #7
 800cd6e:	4413      	add	r3, r2
 800cd70:	4619      	mov	r1, r3
 800cd72:	69b8      	ldr	r0, [r7, #24]
 800cd74:	f7ff fe4e 	bl	800ca14 <move_window>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d11a      	bne.n	800cdb4 <get_fat+0x228>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800cd7e:	69bb      	ldr	r3, [r7, #24]
 800cd80:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	009b      	lsls	r3, r3, #2
 800cd88:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cd8c:	4413      	add	r3, r2
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f7ff fa44 	bl	800c21c <ld_dword>
 800cd94:	4603      	mov	r3, r0
 800cd96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cd9a:	61fb      	str	r3, [r7, #28]
					break;
 800cd9c:	e00b      	b.n	800cdb6 <get_fat+0x22a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cd9e:	2301      	movs	r3, #1
 800cda0:	61fb      	str	r3, [r7, #28]
 800cda2:	e008      	b.n	800cdb6 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cda4:	bf00      	nop
 800cda6:	e006      	b.n	800cdb6 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cda8:	bf00      	nop
 800cdaa:	e004      	b.n	800cdb6 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cdac:	bf00      	nop
 800cdae:	e002      	b.n	800cdb6 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cdb0:	bf00      	nop
 800cdb2:	e000      	b.n	800cdb6 <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cdb4:	bf00      	nop
		}
	}

	return val;
 800cdb6:	69fb      	ldr	r3, [r7, #28]
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3720      	adds	r7, #32
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800cdc0:	b590      	push	{r4, r7, lr}
 800cdc2:	b089      	sub	sp, #36	; 0x24
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	60f8      	str	r0, [r7, #12]
 800cdc8:	60b9      	str	r1, [r7, #8]
 800cdca:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cdcc:	2302      	movs	r3, #2
 800cdce:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	2b01      	cmp	r3, #1
 800cdd4:	f240 80d6 	bls.w	800cf84 <put_fat+0x1c4>
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	69db      	ldr	r3, [r3, #28]
 800cddc:	68ba      	ldr	r2, [r7, #8]
 800cdde:	429a      	cmp	r2, r3
 800cde0:	f080 80d0 	bcs.w	800cf84 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	2b04      	cmp	r3, #4
 800cdea:	f300 80d4 	bgt.w	800cf96 <put_fat+0x1d6>
 800cdee:	2b03      	cmp	r3, #3
 800cdf0:	f280 8093 	bge.w	800cf1a <put_fat+0x15a>
 800cdf4:	2b01      	cmp	r3, #1
 800cdf6:	d002      	beq.n	800cdfe <put_fat+0x3e>
 800cdf8:	2b02      	cmp	r3, #2
 800cdfa:	d06e      	beq.n	800ceda <put_fat+0x11a>
 800cdfc:	e0cb      	b.n	800cf96 <put_fat+0x1d6>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	61bb      	str	r3, [r7, #24]
 800ce02:	69bb      	ldr	r3, [r7, #24]
 800ce04:	085b      	lsrs	r3, r3, #1
 800ce06:	69ba      	ldr	r2, [r7, #24]
 800ce08:	4413      	add	r3, r2
 800ce0a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ce10:	69bb      	ldr	r3, [r7, #24]
 800ce12:	0a5b      	lsrs	r3, r3, #9
 800ce14:	4413      	add	r3, r2
 800ce16:	4619      	mov	r1, r3
 800ce18:	68f8      	ldr	r0, [r7, #12]
 800ce1a:	f7ff fdfb 	bl	800ca14 <move_window>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ce22:	7ffb      	ldrb	r3, [r7, #31]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	f040 80af 	bne.w	800cf88 <put_fat+0x1c8>
			p = fs->win + bc++ % SS(fs);
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ce30:	69bb      	ldr	r3, [r7, #24]
 800ce32:	1c59      	adds	r1, r3, #1
 800ce34:	61b9      	str	r1, [r7, #24]
 800ce36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce3a:	4413      	add	r3, r2
 800ce3c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	f003 0301 	and.w	r3, r3, #1
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d00d      	beq.n	800ce64 <put_fat+0xa4>
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	b25b      	sxtb	r3, r3
 800ce4e:	f003 030f 	and.w	r3, r3, #15
 800ce52:	b25a      	sxtb	r2, r3
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	b2db      	uxtb	r3, r3
 800ce58:	011b      	lsls	r3, r3, #4
 800ce5a:	b25b      	sxtb	r3, r3
 800ce5c:	4313      	orrs	r3, r2
 800ce5e:	b25b      	sxtb	r3, r3
 800ce60:	b2db      	uxtb	r3, r3
 800ce62:	e001      	b.n	800ce68 <put_fat+0xa8>
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	b2db      	uxtb	r3, r3
 800ce68:	697a      	ldr	r2, [r7, #20]
 800ce6a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	2201      	movs	r2, #1
 800ce70:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ce76:	69bb      	ldr	r3, [r7, #24]
 800ce78:	0a5b      	lsrs	r3, r3, #9
 800ce7a:	4413      	add	r3, r2
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	68f8      	ldr	r0, [r7, #12]
 800ce80:	f7ff fdc8 	bl	800ca14 <move_window>
 800ce84:	4603      	mov	r3, r0
 800ce86:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ce88:	7ffb      	ldrb	r3, [r7, #31]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d17e      	bne.n	800cf8c <put_fat+0x1cc>
			p = fs->win + bc % SS(fs);
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ce94:	69bb      	ldr	r3, [r7, #24]
 800ce96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce9a:	4413      	add	r3, r2
 800ce9c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	f003 0301 	and.w	r3, r3, #1
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d003      	beq.n	800ceb0 <put_fat+0xf0>
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	091b      	lsrs	r3, r3, #4
 800ceac:	b2db      	uxtb	r3, r3
 800ceae:	e00e      	b.n	800cece <put_fat+0x10e>
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	b25b      	sxtb	r3, r3
 800ceb6:	f023 030f 	bic.w	r3, r3, #15
 800ceba:	b25a      	sxtb	r2, r3
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	0a1b      	lsrs	r3, r3, #8
 800cec0:	b25b      	sxtb	r3, r3
 800cec2:	f003 030f 	and.w	r3, r3, #15
 800cec6:	b25b      	sxtb	r3, r3
 800cec8:	4313      	orrs	r3, r2
 800ceca:	b25b      	sxtb	r3, r3
 800cecc:	b2db      	uxtb	r3, r3
 800cece:	697a      	ldr	r2, [r7, #20]
 800ced0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2201      	movs	r2, #1
 800ced6:	70da      	strb	r2, [r3, #3]
			break;
 800ced8:	e05d      	b.n	800cf96 <put_fat+0x1d6>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	0a1b      	lsrs	r3, r3, #8
 800cee2:	4413      	add	r3, r2
 800cee4:	4619      	mov	r1, r3
 800cee6:	68f8      	ldr	r0, [r7, #12]
 800cee8:	f7ff fd94 	bl	800ca14 <move_window>
 800ceec:	4603      	mov	r3, r0
 800ceee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cef0:	7ffb      	ldrb	r3, [r7, #31]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d14c      	bne.n	800cf90 <put_fat+0x1d0>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	005b      	lsls	r3, r3, #1
 800cf00:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800cf04:	4413      	add	r3, r2
 800cf06:	687a      	ldr	r2, [r7, #4]
 800cf08:	b292      	uxth	r2, r2
 800cf0a:	4611      	mov	r1, r2
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f7ff fa83 	bl	800c418 <st_word>
			fs->wflag = 1;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	2201      	movs	r2, #1
 800cf16:	70da      	strb	r2, [r3, #3]
			break;
 800cf18:	e03d      	b.n	800cf96 <put_fat+0x1d6>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	09db      	lsrs	r3, r3, #7
 800cf22:	4413      	add	r3, r2
 800cf24:	4619      	mov	r1, r3
 800cf26:	68f8      	ldr	r0, [r7, #12]
 800cf28:	f7ff fd74 	bl	800ca14 <move_window>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cf30:	7ffb      	ldrb	r3, [r7, #31]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d12e      	bne.n	800cf94 <put_fat+0x1d4>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	781b      	ldrb	r3, [r3, #0]
 800cf3a:	2b04      	cmp	r3, #4
 800cf3c:	d012      	beq.n	800cf64 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	009b      	lsls	r3, r3, #2
 800cf4e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cf52:	4413      	add	r3, r2
 800cf54:	4618      	mov	r0, r3
 800cf56:	f7ff f961 	bl	800c21c <ld_dword>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cf60:	4323      	orrs	r3, r4
 800cf62:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	009b      	lsls	r3, r3, #2
 800cf6e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cf72:	4413      	add	r3, r2
 800cf74:	6879      	ldr	r1, [r7, #4]
 800cf76:	4618      	mov	r0, r3
 800cf78:	f7ff fa69 	bl	800c44e <st_dword>
			fs->wflag = 1;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	2201      	movs	r2, #1
 800cf80:	70da      	strb	r2, [r3, #3]
			break;
 800cf82:	e008      	b.n	800cf96 <put_fat+0x1d6>
		}
	}
 800cf84:	bf00      	nop
 800cf86:	e006      	b.n	800cf96 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800cf88:	bf00      	nop
 800cf8a:	e004      	b.n	800cf96 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800cf8c:	bf00      	nop
 800cf8e:	e002      	b.n	800cf96 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800cf90:	bf00      	nop
 800cf92:	e000      	b.n	800cf96 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800cf94:	bf00      	nop
	return res;
 800cf96:	7ffb      	ldrb	r3, [r7, #31]
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3724      	adds	r7, #36	; 0x24
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd90      	pop	{r4, r7, pc}

0800cfa0 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b08a      	sub	sp, #40	; 0x28
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	60f8      	str	r0, [r7, #12]
 800cfa8:	60b9      	str	r1, [r7, #8]
 800cfaa:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	3b02      	subs	r3, #2
 800cfb0:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	69db      	ldr	r3, [r3, #28]
 800cfb6:	3b02      	subs	r3, #2
 800cfb8:	68ba      	ldr	r2, [r7, #8]
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d301      	bcc.n	800cfc2 <find_bitmap+0x22>
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	61fb      	str	r3, [r7, #28]
 800cfc6:	69fb      	ldr	r3, [r7, #28]
 800cfc8:	61bb      	str	r3, [r7, #24]
 800cfca:	2300      	movs	r3, #0
 800cfcc:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cfd2:	69fb      	ldr	r3, [r7, #28]
 800cfd4:	0b1b      	lsrs	r3, r3, #12
 800cfd6:	4413      	add	r3, r2
 800cfd8:	4619      	mov	r1, r3
 800cfda:	68f8      	ldr	r0, [r7, #12]
 800cfdc:	f7ff fd1a 	bl	800ca14 <move_window>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d002      	beq.n	800cfec <find_bitmap+0x4c>
 800cfe6:	f04f 33ff 	mov.w	r3, #4294967295
 800cfea:	e051      	b.n	800d090 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800cfec:	69fb      	ldr	r3, [r7, #28]
 800cfee:	08db      	lsrs	r3, r3, #3
 800cff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cff4:	623b      	str	r3, [r7, #32]
 800cff6:	69fb      	ldr	r3, [r7, #28]
 800cff8:	f003 0307 	and.w	r3, r3, #7
 800cffc:	2201      	movs	r2, #1
 800cffe:	fa02 f303 	lsl.w	r3, r2, r3
 800d002:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800d006:	68fa      	ldr	r2, [r7, #12]
 800d008:	6a3b      	ldr	r3, [r7, #32]
 800d00a:	4413      	add	r3, r2
 800d00c:	3338      	adds	r3, #56	; 0x38
 800d00e:	781a      	ldrb	r2, [r3, #0]
 800d010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d014:	4013      	ands	r3, r2
 800d016:	74fb      	strb	r3, [r7, #19]
 800d018:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d01c:	005b      	lsls	r3, r3, #1
 800d01e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800d022:	69fb      	ldr	r3, [r7, #28]
 800d024:	3301      	adds	r3, #1
 800d026:	61fb      	str	r3, [r7, #28]
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	69db      	ldr	r3, [r3, #28]
 800d02c:	3b02      	subs	r3, #2
 800d02e:	69fa      	ldr	r2, [r7, #28]
 800d030:	429a      	cmp	r2, r3
 800d032:	d307      	bcc.n	800d044 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 800d034:	2300      	movs	r3, #0
 800d036:	61fb      	str	r3, [r7, #28]
 800d038:	2300      	movs	r3, #0
 800d03a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d03e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d042:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800d044:	7cfb      	ldrb	r3, [r7, #19]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d109      	bne.n	800d05e <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	3301      	adds	r3, #1
 800d04e:	617b      	str	r3, [r7, #20]
 800d050:	697a      	ldr	r2, [r7, #20]
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	429a      	cmp	r2, r3
 800d056:	d106      	bne.n	800d066 <find_bitmap+0xc6>
 800d058:	69bb      	ldr	r3, [r7, #24]
 800d05a:	3302      	adds	r3, #2
 800d05c:	e018      	b.n	800d090 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800d05e:	69fb      	ldr	r3, [r7, #28]
 800d060:	61bb      	str	r3, [r7, #24]
 800d062:	2300      	movs	r3, #0
 800d064:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800d066:	69fa      	ldr	r2, [r7, #28]
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d101      	bne.n	800d072 <find_bitmap+0xd2>
 800d06e:	2300      	movs	r3, #0
 800d070:	e00e      	b.n	800d090 <find_bitmap+0xf0>
			} while (bm);
 800d072:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d076:	2b00      	cmp	r3, #0
 800d078:	d1c5      	bne.n	800d006 <find_bitmap+0x66>
			bm = 1;
 800d07a:	2301      	movs	r3, #1
 800d07c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800d080:	6a3b      	ldr	r3, [r7, #32]
 800d082:	3301      	adds	r3, #1
 800d084:	623b      	str	r3, [r7, #32]
 800d086:	6a3b      	ldr	r3, [r7, #32]
 800d088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d08c:	d3bb      	bcc.n	800d006 <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800d08e:	e79e      	b.n	800cfce <find_bitmap+0x2e>
	}
}
 800d090:	4618      	mov	r0, r3
 800d092:	3728      	adds	r7, #40	; 0x28
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}

0800d098 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b088      	sub	sp, #32
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	60f8      	str	r0, [r7, #12]
 800d0a0:	60b9      	str	r1, [r7, #8]
 800d0a2:	607a      	str	r2, [r7, #4]
 800d0a4:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	3b02      	subs	r3, #2
 800d0aa:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	0b1b      	lsrs	r3, r3, #12
 800d0b4:	4413      	add	r3, r2
 800d0b6:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	08db      	lsrs	r3, r3, #3
 800d0bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0c0:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	f003 0307 	and.w	r3, r3, #7
 800d0c8:	2201      	movs	r2, #1
 800d0ca:	fa02 f303 	lsl.w	r3, r2, r3
 800d0ce:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	1c5a      	adds	r2, r3, #1
 800d0d4:	617a      	str	r2, [r7, #20]
 800d0d6:	4619      	mov	r1, r3
 800d0d8:	68f8      	ldr	r0, [r7, #12]
 800d0da:	f7ff fc9b 	bl	800ca14 <move_window>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d001      	beq.n	800d0e8 <change_bitmap+0x50>
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	e03d      	b.n	800d164 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800d0e8:	68fa      	ldr	r2, [r7, #12]
 800d0ea:	69bb      	ldr	r3, [r7, #24]
 800d0ec:	4413      	add	r3, r2
 800d0ee:	3338      	adds	r3, #56	; 0x38
 800d0f0:	781a      	ldrb	r2, [r3, #0]
 800d0f2:	7ffb      	ldrb	r3, [r7, #31]
 800d0f4:	4013      	ands	r3, r2
 800d0f6:	b2db      	uxtb	r3, r3
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	bf14      	ite	ne
 800d0fc:	2301      	movne	r3, #1
 800d0fe:	2300      	moveq	r3, #0
 800d100:	b2db      	uxtb	r3, r3
 800d102:	461a      	mov	r2, r3
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	4293      	cmp	r3, r2
 800d108:	d101      	bne.n	800d10e <change_bitmap+0x76>
 800d10a:	2302      	movs	r3, #2
 800d10c:	e02a      	b.n	800d164 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 800d10e:	68fa      	ldr	r2, [r7, #12]
 800d110:	69bb      	ldr	r3, [r7, #24]
 800d112:	4413      	add	r3, r2
 800d114:	3338      	adds	r3, #56	; 0x38
 800d116:	781a      	ldrb	r2, [r3, #0]
 800d118:	7ffb      	ldrb	r3, [r7, #31]
 800d11a:	4053      	eors	r3, r2
 800d11c:	b2d9      	uxtb	r1, r3
 800d11e:	68fa      	ldr	r2, [r7, #12]
 800d120:	69bb      	ldr	r3, [r7, #24]
 800d122:	4413      	add	r3, r2
 800d124:	3338      	adds	r3, #56	; 0x38
 800d126:	460a      	mov	r2, r1
 800d128:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	2201      	movs	r2, #1
 800d12e:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	3b01      	subs	r3, #1
 800d134:	607b      	str	r3, [r7, #4]
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d101      	bne.n	800d140 <change_bitmap+0xa8>
 800d13c:	2300      	movs	r3, #0
 800d13e:	e011      	b.n	800d164 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 800d140:	7ffb      	ldrb	r3, [r7, #31]
 800d142:	005b      	lsls	r3, r3, #1
 800d144:	77fb      	strb	r3, [r7, #31]
 800d146:	7ffb      	ldrb	r3, [r7, #31]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d1cd      	bne.n	800d0e8 <change_bitmap+0x50>
			bm = 1;
 800d14c:	2301      	movs	r3, #1
 800d14e:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800d150:	69bb      	ldr	r3, [r7, #24]
 800d152:	3301      	adds	r3, #1
 800d154:	61bb      	str	r3, [r7, #24]
 800d156:	69bb      	ldr	r3, [r7, #24]
 800d158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d15c:	d3c4      	bcc.n	800d0e8 <change_bitmap+0x50>
		i = 0;
 800d15e:	2300      	movs	r3, #0
 800d160:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800d162:	e7b5      	b.n	800d0d0 <change_bitmap+0x38>
	}
}
 800d164:	4618      	mov	r0, r3
 800d166:	3720      	adds	r7, #32
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}

0800d16c <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b086      	sub	sp, #24
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	79db      	ldrb	r3, [r3, #7]
 800d178:	2b03      	cmp	r3, #3
 800d17a:	d121      	bne.n	800d1c0 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	689b      	ldr	r3, [r3, #8]
 800d180:	617b      	str	r3, [r7, #20]
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	699b      	ldr	r3, [r3, #24]
 800d186:	613b      	str	r3, [r7, #16]
 800d188:	e014      	b.n	800d1b4 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6818      	ldr	r0, [r3, #0]
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	3301      	adds	r3, #1
 800d192:	461a      	mov	r2, r3
 800d194:	6979      	ldr	r1, [r7, #20]
 800d196:	f7ff fe13 	bl	800cdc0 <put_fat>
 800d19a:	4603      	mov	r3, r0
 800d19c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800d19e:	7bfb      	ldrb	r3, [r7, #15]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d001      	beq.n	800d1a8 <fill_first_frag+0x3c>
 800d1a4:	7bfb      	ldrb	r3, [r7, #15]
 800d1a6:	e00c      	b.n	800d1c2 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	3301      	adds	r3, #1
 800d1ac:	617b      	str	r3, [r7, #20]
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	3b01      	subs	r3, #1
 800d1b2:	613b      	str	r3, [r7, #16]
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d1e7      	bne.n	800d18a <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800d1c0:	2300      	movs	r3, #0
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3718      	adds	r7, #24
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}

0800d1ca <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800d1ca:	b580      	push	{r7, lr}
 800d1cc:	b086      	sub	sp, #24
 800d1ce:	af00      	add	r7, sp, #0
 800d1d0:	60f8      	str	r0, [r7, #12]
 800d1d2:	60b9      	str	r1, [r7, #8]
 800d1d4:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800d1d6:	e020      	b.n	800d21a <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	6818      	ldr	r0, [r3, #0]
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	69db      	ldr	r3, [r3, #28]
 800d1e0:	68ba      	ldr	r2, [r7, #8]
 800d1e2:	1ad3      	subs	r3, r2, r3
 800d1e4:	1c59      	adds	r1, r3, #1
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	69db      	ldr	r3, [r3, #28]
 800d1ea:	2b01      	cmp	r3, #1
 800d1ec:	d905      	bls.n	800d1fa <fill_last_frag+0x30>
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	69db      	ldr	r3, [r3, #28]
 800d1f2:	68ba      	ldr	r2, [r7, #8]
 800d1f4:	1ad3      	subs	r3, r2, r3
 800d1f6:	3302      	adds	r3, #2
 800d1f8:	e000      	b.n	800d1fc <fill_last_frag+0x32>
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	461a      	mov	r2, r3
 800d1fe:	f7ff fddf 	bl	800cdc0 <put_fat>
 800d202:	4603      	mov	r3, r0
 800d204:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800d206:	7dfb      	ldrb	r3, [r7, #23]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d001      	beq.n	800d210 <fill_last_frag+0x46>
 800d20c:	7dfb      	ldrb	r3, [r7, #23]
 800d20e:	e009      	b.n	800d224 <fill_last_frag+0x5a>
		obj->n_frag--;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	69db      	ldr	r3, [r3, #28]
 800d214:	1e5a      	subs	r2, r3, #1
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	69db      	ldr	r3, [r3, #28]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d1da      	bne.n	800d1d8 <fill_last_frag+0xe>
	}
	return FR_OK;
 800d222:	2300      	movs	r3, #0
}
 800d224:	4618      	mov	r0, r3
 800d226:	3718      	adds	r7, #24
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}

0800d22c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b08a      	sub	sp, #40	; 0x28
 800d230:	af00      	add	r7, sp, #0
 800d232:	60f8      	str	r0, [r7, #12]
 800d234:	60b9      	str	r1, [r7, #8]
 800d236:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d238:	2300      	movs	r3, #0
 800d23a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	627b      	str	r3, [r7, #36]	; 0x24
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	2b01      	cmp	r3, #1
 800d24e:	d904      	bls.n	800d25a <remove_chain+0x2e>
 800d250:	69bb      	ldr	r3, [r7, #24]
 800d252:	69db      	ldr	r3, [r3, #28]
 800d254:	68ba      	ldr	r2, [r7, #8]
 800d256:	429a      	cmp	r2, r3
 800d258:	d301      	bcc.n	800d25e <remove_chain+0x32>
 800d25a:	2302      	movs	r3, #2
 800d25c:	e096      	b.n	800d38c <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d014      	beq.n	800d28e <remove_chain+0x62>
 800d264:	69bb      	ldr	r3, [r7, #24]
 800d266:	781b      	ldrb	r3, [r3, #0]
 800d268:	2b04      	cmp	r3, #4
 800d26a:	d103      	bne.n	800d274 <remove_chain+0x48>
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	79db      	ldrb	r3, [r3, #7]
 800d270:	2b02      	cmp	r3, #2
 800d272:	d00c      	beq.n	800d28e <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d274:	f04f 32ff 	mov.w	r2, #4294967295
 800d278:	6879      	ldr	r1, [r7, #4]
 800d27a:	69b8      	ldr	r0, [r7, #24]
 800d27c:	f7ff fda0 	bl	800cdc0 <put_fat>
 800d280:	4603      	mov	r3, r0
 800d282:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d284:	7ffb      	ldrb	r3, [r7, #31]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d001      	beq.n	800d28e <remove_chain+0x62>
 800d28a:	7ffb      	ldrb	r3, [r7, #31]
 800d28c:	e07e      	b.n	800d38c <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d28e:	68b9      	ldr	r1, [r7, #8]
 800d290:	68f8      	ldr	r0, [r7, #12]
 800d292:	f7ff fc7b 	bl	800cb8c <get_fat>
 800d296:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d298:	697b      	ldr	r3, [r7, #20]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d055      	beq.n	800d34a <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d29e:	697b      	ldr	r3, [r7, #20]
 800d2a0:	2b01      	cmp	r3, #1
 800d2a2:	d101      	bne.n	800d2a8 <remove_chain+0x7c>
 800d2a4:	2302      	movs	r3, #2
 800d2a6:	e071      	b.n	800d38c <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2ae:	d101      	bne.n	800d2b4 <remove_chain+0x88>
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	e06b      	b.n	800d38c <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800d2b4:	69bb      	ldr	r3, [r7, #24]
 800d2b6:	781b      	ldrb	r3, [r3, #0]
 800d2b8:	2b04      	cmp	r3, #4
 800d2ba:	d00b      	beq.n	800d2d4 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d2bc:	2200      	movs	r2, #0
 800d2be:	68b9      	ldr	r1, [r7, #8]
 800d2c0:	69b8      	ldr	r0, [r7, #24]
 800d2c2:	f7ff fd7d 	bl	800cdc0 <put_fat>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d2ca:	7ffb      	ldrb	r3, [r7, #31]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d001      	beq.n	800d2d4 <remove_chain+0xa8>
 800d2d0:	7ffb      	ldrb	r3, [r7, #31]
 800d2d2:	e05b      	b.n	800d38c <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d2d4:	69bb      	ldr	r3, [r7, #24]
 800d2d6:	699a      	ldr	r2, [r3, #24]
 800d2d8:	69bb      	ldr	r3, [r7, #24]
 800d2da:	69db      	ldr	r3, [r3, #28]
 800d2dc:	3b02      	subs	r3, #2
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	d20b      	bcs.n	800d2fa <remove_chain+0xce>
			fs->free_clst++;
 800d2e2:	69bb      	ldr	r3, [r7, #24]
 800d2e4:	699b      	ldr	r3, [r3, #24]
 800d2e6:	1c5a      	adds	r2, r3, #1
 800d2e8:	69bb      	ldr	r3, [r7, #24]
 800d2ea:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800d2ec:	69bb      	ldr	r3, [r7, #24]
 800d2ee:	791b      	ldrb	r3, [r3, #4]
 800d2f0:	f043 0301 	orr.w	r3, r3, #1
 800d2f4:	b2da      	uxtb	r2, r3
 800d2f6:	69bb      	ldr	r3, [r7, #24]
 800d2f8:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800d2fa:	6a3b      	ldr	r3, [r7, #32]
 800d2fc:	3301      	adds	r3, #1
 800d2fe:	697a      	ldr	r2, [r7, #20]
 800d300:	429a      	cmp	r2, r3
 800d302:	d102      	bne.n	800d30a <remove_chain+0xde>
			ecl = nxt;
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	623b      	str	r3, [r7, #32]
 800d308:	e017      	b.n	800d33a <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800d30a:	69bb      	ldr	r3, [r7, #24]
 800d30c:	781b      	ldrb	r3, [r3, #0]
 800d30e:	2b04      	cmp	r3, #4
 800d310:	d10f      	bne.n	800d332 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800d312:	6a3a      	ldr	r2, [r7, #32]
 800d314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d316:	1ad3      	subs	r3, r2, r3
 800d318:	1c5a      	adds	r2, r3, #1
 800d31a:	2300      	movs	r3, #0
 800d31c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d31e:	69b8      	ldr	r0, [r7, #24]
 800d320:	f7ff feba 	bl	800d098 <change_bitmap>
 800d324:	4603      	mov	r3, r0
 800d326:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800d328:	7ffb      	ldrb	r3, [r7, #31]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d001      	beq.n	800d332 <remove_chain+0x106>
 800d32e:	7ffb      	ldrb	r3, [r7, #31]
 800d330:	e02c      	b.n	800d38c <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	623b      	str	r3, [r7, #32]
 800d336:	6a3b      	ldr	r3, [r7, #32]
 800d338:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d33e:	69bb      	ldr	r3, [r7, #24]
 800d340:	69db      	ldr	r3, [r3, #28]
 800d342:	68ba      	ldr	r2, [r7, #8]
 800d344:	429a      	cmp	r2, r3
 800d346:	d3a2      	bcc.n	800d28e <remove_chain+0x62>
 800d348:	e000      	b.n	800d34c <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800d34a:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800d34c:	69bb      	ldr	r3, [r7, #24]
 800d34e:	781b      	ldrb	r3, [r3, #0]
 800d350:	2b04      	cmp	r3, #4
 800d352:	d11a      	bne.n	800d38a <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d103      	bne.n	800d362 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	2200      	movs	r2, #0
 800d35e:	71da      	strb	r2, [r3, #7]
 800d360:	e013      	b.n	800d38a <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	79db      	ldrb	r3, [r3, #7]
 800d366:	2b03      	cmp	r3, #3
 800d368:	d10f      	bne.n	800d38a <remove_chain+0x15e>
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	689b      	ldr	r3, [r3, #8]
 800d36e:	687a      	ldr	r2, [r7, #4]
 800d370:	429a      	cmp	r2, r3
 800d372:	d30a      	bcc.n	800d38a <remove_chain+0x15e>
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	689a      	ldr	r2, [r3, #8]
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	699b      	ldr	r3, [r3, #24]
 800d37c:	4413      	add	r3, r2
 800d37e:	687a      	ldr	r2, [r7, #4]
 800d380:	429a      	cmp	r2, r3
 800d382:	d802      	bhi.n	800d38a <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	2202      	movs	r2, #2
 800d388:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800d38a:	2300      	movs	r3, #0
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3728      	adds	r7, #40	; 0x28
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}

0800d394 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b088      	sub	sp, #32
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d10d      	bne.n	800d3c6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	695b      	ldr	r3, [r3, #20]
 800d3ae:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d3b0:	69bb      	ldr	r3, [r7, #24]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d004      	beq.n	800d3c0 <create_chain+0x2c>
 800d3b6:	693b      	ldr	r3, [r7, #16]
 800d3b8:	69db      	ldr	r3, [r3, #28]
 800d3ba:	69ba      	ldr	r2, [r7, #24]
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d31b      	bcc.n	800d3f8 <create_chain+0x64>
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	61bb      	str	r3, [r7, #24]
 800d3c4:	e018      	b.n	800d3f8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d3c6:	6839      	ldr	r1, [r7, #0]
 800d3c8:	6878      	ldr	r0, [r7, #4]
 800d3ca:	f7ff fbdf 	bl	800cb8c <get_fat>
 800d3ce:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	2b01      	cmp	r3, #1
 800d3d4:	d801      	bhi.n	800d3da <create_chain+0x46>
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	e0d9      	b.n	800d58e <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3e0:	d101      	bne.n	800d3e6 <create_chain+0x52>
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	e0d3      	b.n	800d58e <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	69db      	ldr	r3, [r3, #28]
 800d3ea:	68fa      	ldr	r2, [r7, #12]
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d201      	bcs.n	800d3f4 <create_chain+0x60>
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	e0cc      	b.n	800d58e <create_chain+0x1fa>
		scl = clst;
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	781b      	ldrb	r3, [r3, #0]
 800d3fc:	2b04      	cmp	r3, #4
 800d3fe:	d164      	bne.n	800d4ca <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800d400:	2201      	movs	r2, #1
 800d402:	69b9      	ldr	r1, [r7, #24]
 800d404:	6938      	ldr	r0, [r7, #16]
 800d406:	f7ff fdcb 	bl	800cfa0 <find_bitmap>
 800d40a:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800d40c:	69fb      	ldr	r3, [r7, #28]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d003      	beq.n	800d41a <create_chain+0x86>
 800d412:	69fb      	ldr	r3, [r7, #28]
 800d414:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d418:	d101      	bne.n	800d41e <create_chain+0x8a>
 800d41a:	69fb      	ldr	r3, [r7, #28]
 800d41c:	e0b7      	b.n	800d58e <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800d41e:	2301      	movs	r3, #1
 800d420:	2201      	movs	r2, #1
 800d422:	69f9      	ldr	r1, [r7, #28]
 800d424:	6938      	ldr	r0, [r7, #16]
 800d426:	f7ff fe37 	bl	800d098 <change_bitmap>
 800d42a:	4603      	mov	r3, r0
 800d42c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800d42e:	7dfb      	ldrb	r3, [r7, #23]
 800d430:	2b02      	cmp	r3, #2
 800d432:	d101      	bne.n	800d438 <create_chain+0xa4>
 800d434:	2301      	movs	r3, #1
 800d436:	e0aa      	b.n	800d58e <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800d438:	7dfb      	ldrb	r3, [r7, #23]
 800d43a:	2b01      	cmp	r3, #1
 800d43c:	d102      	bne.n	800d444 <create_chain+0xb0>
 800d43e:	f04f 33ff 	mov.w	r3, #4294967295
 800d442:	e0a4      	b.n	800d58e <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d103      	bne.n	800d452 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2202      	movs	r2, #2
 800d44e:	71da      	strb	r2, [r3, #7]
 800d450:	e011      	b.n	800d476 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	79db      	ldrb	r3, [r3, #7]
 800d456:	2b02      	cmp	r3, #2
 800d458:	d10d      	bne.n	800d476 <create_chain+0xe2>
 800d45a:	69bb      	ldr	r3, [r7, #24]
 800d45c:	3301      	adds	r3, #1
 800d45e:	69fa      	ldr	r2, [r7, #28]
 800d460:	429a      	cmp	r2, r3
 800d462:	d008      	beq.n	800d476 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	689b      	ldr	r3, [r3, #8]
 800d468:	69ba      	ldr	r2, [r7, #24]
 800d46a:	1ad2      	subs	r2, r2, r3
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2203      	movs	r2, #3
 800d474:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	79db      	ldrb	r3, [r3, #7]
 800d47a:	2b02      	cmp	r3, #2
 800d47c:	d064      	beq.n	800d548 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	3301      	adds	r3, #1
 800d482:	69fa      	ldr	r2, [r7, #28]
 800d484:	429a      	cmp	r2, r3
 800d486:	d10b      	bne.n	800d4a0 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	69db      	ldr	r3, [r3, #28]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d003      	beq.n	800d498 <create_chain+0x104>
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	69db      	ldr	r3, [r3, #28]
 800d494:	3301      	adds	r3, #1
 800d496:	e000      	b.n	800d49a <create_chain+0x106>
 800d498:	2302      	movs	r3, #2
 800d49a:	687a      	ldr	r2, [r7, #4]
 800d49c:	61d3      	str	r3, [r2, #28]
 800d49e:	e053      	b.n	800d548 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	69db      	ldr	r3, [r3, #28]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d102      	bne.n	800d4ae <create_chain+0x11a>
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2201      	movs	r2, #1
 800d4ac:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800d4ae:	69fa      	ldr	r2, [r7, #28]
 800d4b0:	6839      	ldr	r1, [r7, #0]
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f7ff fe89 	bl	800d1ca <fill_last_frag>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800d4bc:	7dfb      	ldrb	r3, [r7, #23]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d142      	bne.n	800d548 <create_chain+0x1b4>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2201      	movs	r2, #1
 800d4c6:	61da      	str	r2, [r3, #28]
 800d4c8:	e03e      	b.n	800d548 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d4ca:	69bb      	ldr	r3, [r7, #24]
 800d4cc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d4ce:	69fb      	ldr	r3, [r7, #28]
 800d4d0:	3301      	adds	r3, #1
 800d4d2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	69db      	ldr	r3, [r3, #28]
 800d4d8:	69fa      	ldr	r2, [r7, #28]
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d307      	bcc.n	800d4ee <create_chain+0x15a>
				ncl = 2;
 800d4de:	2302      	movs	r3, #2
 800d4e0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d4e2:	69fa      	ldr	r2, [r7, #28]
 800d4e4:	69bb      	ldr	r3, [r7, #24]
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d901      	bls.n	800d4ee <create_chain+0x15a>
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	e04f      	b.n	800d58e <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d4ee:	69f9      	ldr	r1, [r7, #28]
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f7ff fb4b 	bl	800cb8c <get_fat>
 800d4f6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d00e      	beq.n	800d51c <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	2b01      	cmp	r3, #1
 800d502:	d003      	beq.n	800d50c <create_chain+0x178>
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d50a:	d101      	bne.n	800d510 <create_chain+0x17c>
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	e03e      	b.n	800d58e <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800d510:	69fa      	ldr	r2, [r7, #28]
 800d512:	69bb      	ldr	r3, [r7, #24]
 800d514:	429a      	cmp	r2, r3
 800d516:	d1da      	bne.n	800d4ce <create_chain+0x13a>
 800d518:	2300      	movs	r3, #0
 800d51a:	e038      	b.n	800d58e <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800d51c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d51e:	f04f 32ff 	mov.w	r2, #4294967295
 800d522:	69f9      	ldr	r1, [r7, #28]
 800d524:	6938      	ldr	r0, [r7, #16]
 800d526:	f7ff fc4b 	bl	800cdc0 <put_fat>
 800d52a:	4603      	mov	r3, r0
 800d52c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d52e:	7dfb      	ldrb	r3, [r7, #23]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d109      	bne.n	800d548 <create_chain+0x1b4>
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d006      	beq.n	800d548 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d53a:	69fa      	ldr	r2, [r7, #28]
 800d53c:	6839      	ldr	r1, [r7, #0]
 800d53e:	6938      	ldr	r0, [r7, #16]
 800d540:	f7ff fc3e 	bl	800cdc0 <put_fat>
 800d544:	4603      	mov	r3, r0
 800d546:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d548:	7dfb      	ldrb	r3, [r7, #23]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d116      	bne.n	800d57c <create_chain+0x1e8>
		fs->last_clst = ncl;
 800d54e:	693b      	ldr	r3, [r7, #16]
 800d550:	69fa      	ldr	r2, [r7, #28]
 800d552:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	699a      	ldr	r2, [r3, #24]
 800d558:	693b      	ldr	r3, [r7, #16]
 800d55a:	69db      	ldr	r3, [r3, #28]
 800d55c:	3b02      	subs	r3, #2
 800d55e:	429a      	cmp	r2, r3
 800d560:	d804      	bhi.n	800d56c <create_chain+0x1d8>
 800d562:	693b      	ldr	r3, [r7, #16]
 800d564:	699b      	ldr	r3, [r3, #24]
 800d566:	1e5a      	subs	r2, r3, #1
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800d56c:	693b      	ldr	r3, [r7, #16]
 800d56e:	791b      	ldrb	r3, [r3, #4]
 800d570:	f043 0301 	orr.w	r3, r3, #1
 800d574:	b2da      	uxtb	r2, r3
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	711a      	strb	r2, [r3, #4]
 800d57a:	e007      	b.n	800d58c <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d57c:	7dfb      	ldrb	r3, [r7, #23]
 800d57e:	2b01      	cmp	r3, #1
 800d580:	d102      	bne.n	800d588 <create_chain+0x1f4>
 800d582:	f04f 33ff 	mov.w	r3, #4294967295
 800d586:	e000      	b.n	800d58a <create_chain+0x1f6>
 800d588:	2301      	movs	r3, #1
 800d58a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d58c:	69fb      	ldr	r3, [r7, #28]
}
 800d58e:	4618      	mov	r0, r3
 800d590:	3720      	adds	r7, #32
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}

0800d596 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d596:	b5b0      	push	{r4, r5, r7, lr}
 800d598:	b088      	sub	sp, #32
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	60f8      	str	r0, [r7, #12]
 800d59e:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5ac:	3304      	adds	r3, #4
 800d5ae:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d5b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d5b4:	f04f 0000 	mov.w	r0, #0
 800d5b8:	f04f 0100 	mov.w	r1, #0
 800d5bc:	0a50      	lsrs	r0, r2, #9
 800d5be:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800d5c2:	0a59      	lsrs	r1, r3, #9
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	895b      	ldrh	r3, [r3, #10]
 800d5c8:	b29b      	uxth	r3, r3
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	461c      	mov	r4, r3
 800d5ce:	4615      	mov	r5, r2
 800d5d0:	4622      	mov	r2, r4
 800d5d2:	462b      	mov	r3, r5
 800d5d4:	f7f2 fe64 	bl	80002a0 <__aeabi_uldivmod>
 800d5d8:	4602      	mov	r2, r0
 800d5da:	460b      	mov	r3, r1
 800d5dc:	4613      	mov	r3, r2
 800d5de:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d5e0:	69bb      	ldr	r3, [r7, #24]
 800d5e2:	1d1a      	adds	r2, r3, #4
 800d5e4:	61ba      	str	r2, [r7, #24]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d5ea:	693b      	ldr	r3, [r7, #16]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d101      	bne.n	800d5f4 <clmt_clust+0x5e>
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	e010      	b.n	800d616 <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 800d5f4:	69fa      	ldr	r2, [r7, #28]
 800d5f6:	693b      	ldr	r3, [r7, #16]
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d307      	bcc.n	800d60c <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 800d5fc:	69fa      	ldr	r2, [r7, #28]
 800d5fe:	693b      	ldr	r3, [r7, #16]
 800d600:	1ad3      	subs	r3, r2, r3
 800d602:	61fb      	str	r3, [r7, #28]
 800d604:	69bb      	ldr	r3, [r7, #24]
 800d606:	3304      	adds	r3, #4
 800d608:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d60a:	e7e9      	b.n	800d5e0 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 800d60c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d60e:	69bb      	ldr	r3, [r7, #24]
 800d610:	681a      	ldr	r2, [r3, #0]
 800d612:	69fb      	ldr	r3, [r7, #28]
 800d614:	4413      	add	r3, r2
}
 800d616:	4618      	mov	r0, r3
 800d618:	3720      	adds	r7, #32
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bdb0      	pop	{r4, r5, r7, pc}

0800d61e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d61e:	b580      	push	{r7, lr}
 800d620:	b086      	sub	sp, #24
 800d622:	af00      	add	r7, sp, #0
 800d624:	6078      	str	r0, [r7, #4]
 800d626:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	2b04      	cmp	r3, #4
 800d634:	d102      	bne.n	800d63c <dir_sdi+0x1e>
 800d636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d63a:	e001      	b.n	800d640 <dir_sdi+0x22>
 800d63c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	429a      	cmp	r2, r3
 800d644:	d904      	bls.n	800d650 <dir_sdi+0x32>
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	f003 031f 	and.w	r3, r3, #31
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d001      	beq.n	800d654 <dir_sdi+0x36>
		return FR_INT_ERR;
 800d650:	2302      	movs	r3, #2
 800d652:	e066      	b.n	800d722 <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	683a      	ldr	r2, [r7, #0]
 800d658:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	689b      	ldr	r3, [r3, #8]
 800d65e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d109      	bne.n	800d67a <dir_sdi+0x5c>
 800d666:	693b      	ldr	r3, [r7, #16]
 800d668:	781b      	ldrb	r3, [r3, #0]
 800d66a:	2b02      	cmp	r3, #2
 800d66c:	d905      	bls.n	800d67a <dir_sdi+0x5c>
		clst = fs->dirbase;
 800d66e:	693b      	ldr	r3, [r7, #16]
 800d670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d672:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2200      	movs	r2, #0
 800d678:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d10c      	bne.n	800d69a <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	095b      	lsrs	r3, r3, #5
 800d684:	693a      	ldr	r2, [r7, #16]
 800d686:	8912      	ldrh	r2, [r2, #8]
 800d688:	4293      	cmp	r3, r2
 800d68a:	d301      	bcc.n	800d690 <dir_sdi+0x72>
 800d68c:	2302      	movs	r3, #2
 800d68e:	e048      	b.n	800d722 <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 800d690:	693b      	ldr	r3, [r7, #16]
 800d692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	639a      	str	r2, [r3, #56]	; 0x38
 800d698:	e029      	b.n	800d6ee <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d69a:	693b      	ldr	r3, [r7, #16]
 800d69c:	895b      	ldrh	r3, [r3, #10]
 800d69e:	025b      	lsls	r3, r3, #9
 800d6a0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d6a2:	e019      	b.n	800d6d8 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6979      	ldr	r1, [r7, #20]
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f7ff fa6f 	bl	800cb8c <get_fat>
 800d6ae:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6b6:	d101      	bne.n	800d6bc <dir_sdi+0x9e>
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	e032      	b.n	800d722 <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d6bc:	697b      	ldr	r3, [r7, #20]
 800d6be:	2b01      	cmp	r3, #1
 800d6c0:	d904      	bls.n	800d6cc <dir_sdi+0xae>
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	69db      	ldr	r3, [r3, #28]
 800d6c6:	697a      	ldr	r2, [r7, #20]
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d301      	bcc.n	800d6d0 <dir_sdi+0xb2>
 800d6cc:	2302      	movs	r3, #2
 800d6ce:	e028      	b.n	800d722 <dir_sdi+0x104>
			ofs -= csz;
 800d6d0:	683a      	ldr	r2, [r7, #0]
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	1ad3      	subs	r3, r2, r3
 800d6d6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d6d8:	683a      	ldr	r2, [r7, #0]
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	429a      	cmp	r2, r3
 800d6de:	d2e1      	bcs.n	800d6a4 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 800d6e0:	6979      	ldr	r1, [r7, #20]
 800d6e2:	6938      	ldr	r0, [r7, #16]
 800d6e4:	f7ff fa32 	bl	800cb4c <clust2sect>
 800d6e8:	4602      	mov	r2, r0
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	697a      	ldr	r2, [r7, #20]
 800d6f2:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d101      	bne.n	800d700 <dir_sdi+0xe2>
 800d6fc:	2302      	movs	r3, #2
 800d6fe:	e010      	b.n	800d722 <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	0a5b      	lsrs	r3, r3, #9
 800d708:	441a      	add	r2, r3
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d70e:	693b      	ldr	r3, [r7, #16]
 800d710:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d71a:	441a      	add	r2, r3
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800d720:	2300      	movs	r3, #0
}
 800d722:	4618      	mov	r0, r3
 800d724:	3718      	adds	r7, #24
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}

0800d72a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d72a:	b580      	push	{r7, lr}
 800d72c:	b086      	sub	sp, #24
 800d72e:	af00      	add	r7, sp, #0
 800d730:	6078      	str	r0, [r7, #4]
 800d732:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d73e:	3320      	adds	r3, #32
 800d740:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d746:	2b00      	cmp	r3, #0
 800d748:	d00b      	beq.n	800d762 <dir_next+0x38>
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	781b      	ldrb	r3, [r3, #0]
 800d74e:	2b04      	cmp	r3, #4
 800d750:	d102      	bne.n	800d758 <dir_next+0x2e>
 800d752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d756:	e001      	b.n	800d75c <dir_next+0x32>
 800d758:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	429a      	cmp	r2, r3
 800d760:	d801      	bhi.n	800d766 <dir_next+0x3c>
 800d762:	2304      	movs	r3, #4
 800d764:	e0b2      	b.n	800d8cc <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	f040 80a0 	bne.w	800d8b2 <dir_next+0x188>
		dp->sect++;				/* Next sector */
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d776:	1c5a      	adds	r2, r3, #1
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d780:	2b00      	cmp	r3, #0
 800d782:	d10b      	bne.n	800d79c <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	095b      	lsrs	r3, r3, #5
 800d788:	68fa      	ldr	r2, [r7, #12]
 800d78a:	8912      	ldrh	r2, [r2, #8]
 800d78c:	4293      	cmp	r3, r2
 800d78e:	f0c0 8090 	bcc.w	800d8b2 <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2200      	movs	r2, #0
 800d796:	639a      	str	r2, [r3, #56]	; 0x38
 800d798:	2304      	movs	r3, #4
 800d79a:	e097      	b.n	800d8cc <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	0a5b      	lsrs	r3, r3, #9
 800d7a0:	68fa      	ldr	r2, [r7, #12]
 800d7a2:	8952      	ldrh	r2, [r2, #10]
 800d7a4:	3a01      	subs	r2, #1
 800d7a6:	4013      	ands	r3, r2
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	f040 8082 	bne.w	800d8b2 <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d7ae:	687a      	ldr	r2, [r7, #4]
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7b4:	4619      	mov	r1, r3
 800d7b6:	4610      	mov	r0, r2
 800d7b8:	f7ff f9e8 	bl	800cb8c <get_fat>
 800d7bc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	2b01      	cmp	r3, #1
 800d7c2:	d801      	bhi.n	800d7c8 <dir_next+0x9e>
 800d7c4:	2302      	movs	r3, #2
 800d7c6:	e081      	b.n	800d8cc <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d7c8:	697b      	ldr	r3, [r7, #20]
 800d7ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ce:	d101      	bne.n	800d7d4 <dir_next+0xaa>
 800d7d0:	2301      	movs	r3, #1
 800d7d2:	e07b      	b.n	800d8cc <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	69db      	ldr	r3, [r3, #28]
 800d7d8:	697a      	ldr	r2, [r7, #20]
 800d7da:	429a      	cmp	r2, r3
 800d7dc:	d35f      	bcc.n	800d89e <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d104      	bne.n	800d7ee <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	639a      	str	r2, [r3, #56]	; 0x38
 800d7ea:	2304      	movs	r3, #4
 800d7ec:	e06e      	b.n	800d8cc <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d7ee:	687a      	ldr	r2, [r7, #4]
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7f4:	4619      	mov	r1, r3
 800d7f6:	4610      	mov	r0, r2
 800d7f8:	f7ff fdcc 	bl	800d394 <create_chain>
 800d7fc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d101      	bne.n	800d808 <dir_next+0xde>
 800d804:	2307      	movs	r3, #7
 800d806:	e061      	b.n	800d8cc <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d808:	697b      	ldr	r3, [r7, #20]
 800d80a:	2b01      	cmp	r3, #1
 800d80c:	d101      	bne.n	800d812 <dir_next+0xe8>
 800d80e:	2302      	movs	r3, #2
 800d810:	e05c      	b.n	800d8cc <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d818:	d101      	bne.n	800d81e <dir_next+0xf4>
 800d81a:	2301      	movs	r3, #1
 800d81c:	e056      	b.n	800d8cc <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	79db      	ldrb	r3, [r3, #7]
 800d822:	f043 0304 	orr.w	r3, r3, #4
 800d826:	b2da      	uxtb	r2, r3
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d82c:	68f8      	ldr	r0, [r7, #12]
 800d82e:	f7ff f8ad 	bl	800c98c <sync_window>
 800d832:	4603      	mov	r3, r0
 800d834:	2b00      	cmp	r3, #0
 800d836:	d001      	beq.n	800d83c <dir_next+0x112>
 800d838:	2301      	movs	r3, #1
 800d83a:	e047      	b.n	800d8cc <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	3338      	adds	r3, #56	; 0x38
 800d840:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d844:	2100      	movs	r1, #0
 800d846:	4618      	mov	r0, r3
 800d848:	f7fe fed6 	bl	800c5f8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d84c:	2300      	movs	r3, #0
 800d84e:	613b      	str	r3, [r7, #16]
 800d850:	6979      	ldr	r1, [r7, #20]
 800d852:	68f8      	ldr	r0, [r7, #12]
 800d854:	f7ff f97a 	bl	800cb4c <clust2sect>
 800d858:	4602      	mov	r2, r0
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	635a      	str	r2, [r3, #52]	; 0x34
 800d85e:	e012      	b.n	800d886 <dir_next+0x15c>
						fs->wflag = 1;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	2201      	movs	r2, #1
 800d864:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d866:	68f8      	ldr	r0, [r7, #12]
 800d868:	f7ff f890 	bl	800c98c <sync_window>
 800d86c:	4603      	mov	r3, r0
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d001      	beq.n	800d876 <dir_next+0x14c>
 800d872:	2301      	movs	r3, #1
 800d874:	e02a      	b.n	800d8cc <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	3301      	adds	r3, #1
 800d87a:	613b      	str	r3, [r7, #16]
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d880:	1c5a      	adds	r2, r3, #1
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	635a      	str	r2, [r3, #52]	; 0x34
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	895b      	ldrh	r3, [r3, #10]
 800d88a:	461a      	mov	r2, r3
 800d88c:	693b      	ldr	r3, [r7, #16]
 800d88e:	4293      	cmp	r3, r2
 800d890:	d3e6      	bcc.n	800d860 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	1ad2      	subs	r2, r2, r3
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	697a      	ldr	r2, [r7, #20]
 800d8a2:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800d8a4:	6979      	ldr	r1, [r7, #20]
 800d8a6:	68f8      	ldr	r0, [r7, #12]
 800d8a8:	f7ff f950 	bl	800cb4c <clust2sect>
 800d8ac:	4602      	mov	r2, r0
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	68ba      	ldr	r2, [r7, #8]
 800d8b6:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8c4:	441a      	add	r2, r3
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800d8ca:	2300      	movs	r3, #0
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3718      	adds	r7, #24
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}

0800d8d4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b086      	sub	sp, #24
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
 800d8dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d8e4:	2100      	movs	r1, #0
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f7ff fe99 	bl	800d61e <dir_sdi>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d8f0:	7dfb      	ldrb	r3, [r7, #23]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d140      	bne.n	800d978 <dir_alloc+0xa4>
		n = 0;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8fe:	4619      	mov	r1, r3
 800d900:	68f8      	ldr	r0, [r7, #12]
 800d902:	f7ff f887 	bl	800ca14 <move_window>
 800d906:	4603      	mov	r3, r0
 800d908:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d90a:	7dfb      	ldrb	r3, [r7, #23]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d132      	bne.n	800d976 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	781b      	ldrb	r3, [r3, #0]
 800d914:	2b04      	cmp	r3, #4
 800d916:	d108      	bne.n	800d92a <dir_alloc+0x56>
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d91c:	781b      	ldrb	r3, [r3, #0]
 800d91e:	b25b      	sxtb	r3, r3
 800d920:	43db      	mvns	r3, r3
 800d922:	b2db      	uxtb	r3, r3
 800d924:	09db      	lsrs	r3, r3, #7
 800d926:	b2db      	uxtb	r3, r3
 800d928:	e00f      	b.n	800d94a <dir_alloc+0x76>
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d92e:	781b      	ldrb	r3, [r3, #0]
 800d930:	2be5      	cmp	r3, #229	; 0xe5
 800d932:	d004      	beq.n	800d93e <dir_alloc+0x6a>
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d938:	781b      	ldrb	r3, [r3, #0]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d101      	bne.n	800d942 <dir_alloc+0x6e>
 800d93e:	2301      	movs	r3, #1
 800d940:	e000      	b.n	800d944 <dir_alloc+0x70>
 800d942:	2300      	movs	r3, #0
 800d944:	f003 0301 	and.w	r3, r3, #1
 800d948:	b2db      	uxtb	r3, r3
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d007      	beq.n	800d95e <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d94e:	693b      	ldr	r3, [r7, #16]
 800d950:	3301      	adds	r3, #1
 800d952:	613b      	str	r3, [r7, #16]
 800d954:	693a      	ldr	r2, [r7, #16]
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	429a      	cmp	r2, r3
 800d95a:	d102      	bne.n	800d962 <dir_alloc+0x8e>
 800d95c:	e00c      	b.n	800d978 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d95e:	2300      	movs	r3, #0
 800d960:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d962:	2101      	movs	r1, #1
 800d964:	6878      	ldr	r0, [r7, #4]
 800d966:	f7ff fee0 	bl	800d72a <dir_next>
 800d96a:	4603      	mov	r3, r0
 800d96c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d96e:	7dfb      	ldrb	r3, [r7, #23]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d0c2      	beq.n	800d8fa <dir_alloc+0x26>
 800d974:	e000      	b.n	800d978 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800d976:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d978:	7dfb      	ldrb	r3, [r7, #23]
 800d97a:	2b04      	cmp	r3, #4
 800d97c:	d101      	bne.n	800d982 <dir_alloc+0xae>
 800d97e:	2307      	movs	r3, #7
 800d980:	75fb      	strb	r3, [r7, #23]
	return res;
 800d982:	7dfb      	ldrb	r3, [r7, #23]
}
 800d984:	4618      	mov	r0, r3
 800d986:	3718      	adds	r7, #24
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}

0800d98c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b084      	sub	sp, #16
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	331a      	adds	r3, #26
 800d99a:	4618      	mov	r0, r3
 800d99c:	f7fe fc26 	bl	800c1ec <ld_word>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	781b      	ldrb	r3, [r3, #0]
 800d9a8:	2b03      	cmp	r3, #3
 800d9aa:	d109      	bne.n	800d9c0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	3314      	adds	r3, #20
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f7fe fc1b 	bl	800c1ec <ld_word>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	041b      	lsls	r3, r3, #16
 800d9ba:	68fa      	ldr	r2, [r7, #12]
 800d9bc:	4313      	orrs	r3, r2
 800d9be:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3710      	adds	r7, #16
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}

0800d9ca <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d9ca:	b580      	push	{r7, lr}
 800d9cc:	b084      	sub	sp, #16
 800d9ce:	af00      	add	r7, sp, #0
 800d9d0:	60f8      	str	r0, [r7, #12]
 800d9d2:	60b9      	str	r1, [r7, #8]
 800d9d4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	331a      	adds	r3, #26
 800d9da:	687a      	ldr	r2, [r7, #4]
 800d9dc:	b292      	uxth	r2, r2
 800d9de:	4611      	mov	r1, r2
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f7fe fd19 	bl	800c418 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	781b      	ldrb	r3, [r3, #0]
 800d9ea:	2b03      	cmp	r3, #3
 800d9ec:	d109      	bne.n	800da02 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	f103 0214 	add.w	r2, r3, #20
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	0c1b      	lsrs	r3, r3, #16
 800d9f8:	b29b      	uxth	r3, r3
 800d9fa:	4619      	mov	r1, r3
 800d9fc:	4610      	mov	r0, r2
 800d9fe:	f7fe fd0b 	bl	800c418 <st_word>
	}
}
 800da02:	bf00      	nop
 800da04:	3710      	adds	r7, #16
 800da06:	46bd      	mov	sp, r7
 800da08:	bd80      	pop	{r7, pc}
	...

0800da0c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800da0c:	b590      	push	{r4, r7, lr}
 800da0e:	b087      	sub	sp, #28
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
 800da14:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	331a      	adds	r3, #26
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7fe fbe6 	bl	800c1ec <ld_word>
 800da20:	4603      	mov	r3, r0
 800da22:	2b00      	cmp	r3, #0
 800da24:	d001      	beq.n	800da2a <cmp_lfn+0x1e>
 800da26:	2300      	movs	r3, #0
 800da28:	e059      	b.n	800dade <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	781b      	ldrb	r3, [r3, #0]
 800da2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da32:	1e5a      	subs	r2, r3, #1
 800da34:	4613      	mov	r3, r2
 800da36:	005b      	lsls	r3, r3, #1
 800da38:	4413      	add	r3, r2
 800da3a:	009b      	lsls	r3, r3, #2
 800da3c:	4413      	add	r3, r2
 800da3e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800da40:	2301      	movs	r3, #1
 800da42:	81fb      	strh	r3, [r7, #14]
 800da44:	2300      	movs	r3, #0
 800da46:	613b      	str	r3, [r7, #16]
 800da48:	e033      	b.n	800dab2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800da4a:	4a27      	ldr	r2, [pc, #156]	; (800dae8 <cmp_lfn+0xdc>)
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	4413      	add	r3, r2
 800da50:	781b      	ldrb	r3, [r3, #0]
 800da52:	461a      	mov	r2, r3
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	4413      	add	r3, r2
 800da58:	4618      	mov	r0, r3
 800da5a:	f7fe fbc7 	bl	800c1ec <ld_word>
 800da5e:	4603      	mov	r3, r0
 800da60:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800da62:	89fb      	ldrh	r3, [r7, #14]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d01a      	beq.n	800da9e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	2bfe      	cmp	r3, #254	; 0xfe
 800da6c:	d812      	bhi.n	800da94 <cmp_lfn+0x88>
 800da6e:	89bb      	ldrh	r3, [r7, #12]
 800da70:	4618      	mov	r0, r3
 800da72:	f003 f96f 	bl	8010d54 <ff_wtoupper>
 800da76:	4603      	mov	r3, r0
 800da78:	461c      	mov	r4, r3
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	1c5a      	adds	r2, r3, #1
 800da7e:	617a      	str	r2, [r7, #20]
 800da80:	005b      	lsls	r3, r3, #1
 800da82:	687a      	ldr	r2, [r7, #4]
 800da84:	4413      	add	r3, r2
 800da86:	881b      	ldrh	r3, [r3, #0]
 800da88:	4618      	mov	r0, r3
 800da8a:	f003 f963 	bl	8010d54 <ff_wtoupper>
 800da8e:	4603      	mov	r3, r0
 800da90:	429c      	cmp	r4, r3
 800da92:	d001      	beq.n	800da98 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800da94:	2300      	movs	r3, #0
 800da96:	e022      	b.n	800dade <cmp_lfn+0xd2>
			}
			wc = uc;
 800da98:	89bb      	ldrh	r3, [r7, #12]
 800da9a:	81fb      	strh	r3, [r7, #14]
 800da9c:	e006      	b.n	800daac <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800da9e:	89bb      	ldrh	r3, [r7, #12]
 800daa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800daa4:	4293      	cmp	r3, r2
 800daa6:	d001      	beq.n	800daac <cmp_lfn+0xa0>
 800daa8:	2300      	movs	r3, #0
 800daaa:	e018      	b.n	800dade <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800daac:	693b      	ldr	r3, [r7, #16]
 800daae:	3301      	adds	r3, #1
 800dab0:	613b      	str	r3, [r7, #16]
 800dab2:	693b      	ldr	r3, [r7, #16]
 800dab4:	2b0c      	cmp	r3, #12
 800dab6:	d9c8      	bls.n	800da4a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d00b      	beq.n	800dadc <cmp_lfn+0xd0>
 800dac4:	89fb      	ldrh	r3, [r7, #14]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d008      	beq.n	800dadc <cmp_lfn+0xd0>
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	005b      	lsls	r3, r3, #1
 800dace:	687a      	ldr	r2, [r7, #4]
 800dad0:	4413      	add	r3, r2
 800dad2:	881b      	ldrh	r3, [r3, #0]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d001      	beq.n	800dadc <cmp_lfn+0xd0>
 800dad8:	2300      	movs	r3, #0
 800dada:	e000      	b.n	800dade <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800dadc:	2301      	movs	r3, #1
}
 800dade:	4618      	mov	r0, r3
 800dae0:	371c      	adds	r7, #28
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd90      	pop	{r4, r7, pc}
 800dae6:	bf00      	nop
 800dae8:	0801556c 	.word	0x0801556c

0800daec <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b086      	sub	sp, #24
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	331a      	adds	r3, #26
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7fe fb76 	bl	800c1ec <ld_word>
 800db00:	4603      	mov	r3, r0
 800db02:	2b00      	cmp	r3, #0
 800db04:	d001      	beq.n	800db0a <pick_lfn+0x1e>
 800db06:	2300      	movs	r3, #0
 800db08:	e04d      	b.n	800dba6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	781b      	ldrb	r3, [r3, #0]
 800db0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db12:	1e5a      	subs	r2, r3, #1
 800db14:	4613      	mov	r3, r2
 800db16:	005b      	lsls	r3, r3, #1
 800db18:	4413      	add	r3, r2
 800db1a:	009b      	lsls	r3, r3, #2
 800db1c:	4413      	add	r3, r2
 800db1e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800db20:	2301      	movs	r3, #1
 800db22:	81fb      	strh	r3, [r7, #14]
 800db24:	2300      	movs	r3, #0
 800db26:	613b      	str	r3, [r7, #16]
 800db28:	e028      	b.n	800db7c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800db2a:	4a21      	ldr	r2, [pc, #132]	; (800dbb0 <pick_lfn+0xc4>)
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	4413      	add	r3, r2
 800db30:	781b      	ldrb	r3, [r3, #0]
 800db32:	461a      	mov	r2, r3
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	4413      	add	r3, r2
 800db38:	4618      	mov	r0, r3
 800db3a:	f7fe fb57 	bl	800c1ec <ld_word>
 800db3e:	4603      	mov	r3, r0
 800db40:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800db42:	89fb      	ldrh	r3, [r7, #14]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d00f      	beq.n	800db68 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800db48:	697b      	ldr	r3, [r7, #20]
 800db4a:	2bfe      	cmp	r3, #254	; 0xfe
 800db4c:	d901      	bls.n	800db52 <pick_lfn+0x66>
 800db4e:	2300      	movs	r3, #0
 800db50:	e029      	b.n	800dba6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800db52:	89bb      	ldrh	r3, [r7, #12]
 800db54:	81fb      	strh	r3, [r7, #14]
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	1c5a      	adds	r2, r3, #1
 800db5a:	617a      	str	r2, [r7, #20]
 800db5c:	005b      	lsls	r3, r3, #1
 800db5e:	687a      	ldr	r2, [r7, #4]
 800db60:	4413      	add	r3, r2
 800db62:	89fa      	ldrh	r2, [r7, #14]
 800db64:	801a      	strh	r2, [r3, #0]
 800db66:	e006      	b.n	800db76 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800db68:	89bb      	ldrh	r3, [r7, #12]
 800db6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800db6e:	4293      	cmp	r3, r2
 800db70:	d001      	beq.n	800db76 <pick_lfn+0x8a>
 800db72:	2300      	movs	r3, #0
 800db74:	e017      	b.n	800dba6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	3301      	adds	r3, #1
 800db7a:	613b      	str	r3, [r7, #16]
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	2b0c      	cmp	r3, #12
 800db80:	d9d3      	bls.n	800db2a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	781b      	ldrb	r3, [r3, #0]
 800db86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d00a      	beq.n	800dba4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	2bfe      	cmp	r3, #254	; 0xfe
 800db92:	d901      	bls.n	800db98 <pick_lfn+0xac>
 800db94:	2300      	movs	r3, #0
 800db96:	e006      	b.n	800dba6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	005b      	lsls	r3, r3, #1
 800db9c:	687a      	ldr	r2, [r7, #4]
 800db9e:	4413      	add	r3, r2
 800dba0:	2200      	movs	r2, #0
 800dba2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800dba4:	2301      	movs	r3, #1
}
 800dba6:	4618      	mov	r0, r3
 800dba8:	3718      	adds	r7, #24
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	bd80      	pop	{r7, pc}
 800dbae:	bf00      	nop
 800dbb0:	0801556c 	.word	0x0801556c

0800dbb4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b088      	sub	sp, #32
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	60f8      	str	r0, [r7, #12]
 800dbbc:	60b9      	str	r1, [r7, #8]
 800dbbe:	4611      	mov	r1, r2
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	460b      	mov	r3, r1
 800dbc4:	71fb      	strb	r3, [r7, #7]
 800dbc6:	4613      	mov	r3, r2
 800dbc8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	330d      	adds	r3, #13
 800dbce:	79ba      	ldrb	r2, [r7, #6]
 800dbd0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	330b      	adds	r3, #11
 800dbd6:	220f      	movs	r2, #15
 800dbd8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	330c      	adds	r3, #12
 800dbde:	2200      	movs	r2, #0
 800dbe0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	331a      	adds	r3, #26
 800dbe6:	2100      	movs	r1, #0
 800dbe8:	4618      	mov	r0, r3
 800dbea:	f7fe fc15 	bl	800c418 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800dbee:	79fb      	ldrb	r3, [r7, #7]
 800dbf0:	1e5a      	subs	r2, r3, #1
 800dbf2:	4613      	mov	r3, r2
 800dbf4:	005b      	lsls	r3, r3, #1
 800dbf6:	4413      	add	r3, r2
 800dbf8:	009b      	lsls	r3, r3, #2
 800dbfa:	4413      	add	r3, r2
 800dbfc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	82fb      	strh	r3, [r7, #22]
 800dc02:	2300      	movs	r3, #0
 800dc04:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800dc06:	8afb      	ldrh	r3, [r7, #22]
 800dc08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	d007      	beq.n	800dc20 <put_lfn+0x6c>
 800dc10:	69fb      	ldr	r3, [r7, #28]
 800dc12:	1c5a      	adds	r2, r3, #1
 800dc14:	61fa      	str	r2, [r7, #28]
 800dc16:	005b      	lsls	r3, r3, #1
 800dc18:	68fa      	ldr	r2, [r7, #12]
 800dc1a:	4413      	add	r3, r2
 800dc1c:	881b      	ldrh	r3, [r3, #0]
 800dc1e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800dc20:	4a17      	ldr	r2, [pc, #92]	; (800dc80 <put_lfn+0xcc>)
 800dc22:	69bb      	ldr	r3, [r7, #24]
 800dc24:	4413      	add	r3, r2
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	461a      	mov	r2, r3
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	4413      	add	r3, r2
 800dc2e:	8afa      	ldrh	r2, [r7, #22]
 800dc30:	4611      	mov	r1, r2
 800dc32:	4618      	mov	r0, r3
 800dc34:	f7fe fbf0 	bl	800c418 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800dc38:	8afb      	ldrh	r3, [r7, #22]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d102      	bne.n	800dc44 <put_lfn+0x90>
 800dc3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dc42:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800dc44:	69bb      	ldr	r3, [r7, #24]
 800dc46:	3301      	adds	r3, #1
 800dc48:	61bb      	str	r3, [r7, #24]
 800dc4a:	69bb      	ldr	r3, [r7, #24]
 800dc4c:	2b0c      	cmp	r3, #12
 800dc4e:	d9da      	bls.n	800dc06 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800dc50:	8afb      	ldrh	r3, [r7, #22]
 800dc52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc56:	4293      	cmp	r3, r2
 800dc58:	d006      	beq.n	800dc68 <put_lfn+0xb4>
 800dc5a:	69fb      	ldr	r3, [r7, #28]
 800dc5c:	005b      	lsls	r3, r3, #1
 800dc5e:	68fa      	ldr	r2, [r7, #12]
 800dc60:	4413      	add	r3, r2
 800dc62:	881b      	ldrh	r3, [r3, #0]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d103      	bne.n	800dc70 <put_lfn+0xbc>
 800dc68:	79fb      	ldrb	r3, [r7, #7]
 800dc6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc6e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	79fa      	ldrb	r2, [r7, #7]
 800dc74:	701a      	strb	r2, [r3, #0]
}
 800dc76:	bf00      	nop
 800dc78:	3720      	adds	r7, #32
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}
 800dc7e:	bf00      	nop
 800dc80:	0801556c 	.word	0x0801556c

0800dc84 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b08c      	sub	sp, #48	; 0x30
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	60f8      	str	r0, [r7, #12]
 800dc8c:	60b9      	str	r1, [r7, #8]
 800dc8e:	607a      	str	r2, [r7, #4]
 800dc90:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800dc92:	220b      	movs	r2, #11
 800dc94:	68b9      	ldr	r1, [r7, #8]
 800dc96:	68f8      	ldr	r0, [r7, #12]
 800dc98:	f7fe fc8d 	bl	800c5b6 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	2b05      	cmp	r3, #5
 800dca0:	d92b      	bls.n	800dcfa <gen_numname+0x76>
		sr = seq;
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800dca6:	e022      	b.n	800dcee <gen_numname+0x6a>
			wc = *lfn++;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	1c9a      	adds	r2, r3, #2
 800dcac:	607a      	str	r2, [r7, #4]
 800dcae:	881b      	ldrh	r3, [r3, #0]
 800dcb0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	62bb      	str	r3, [r7, #40]	; 0x28
 800dcb6:	e017      	b.n	800dce8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800dcb8:	69fb      	ldr	r3, [r7, #28]
 800dcba:	005a      	lsls	r2, r3, #1
 800dcbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dcbe:	f003 0301 	and.w	r3, r3, #1
 800dcc2:	4413      	add	r3, r2
 800dcc4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800dcc6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dcc8:	085b      	lsrs	r3, r3, #1
 800dcca:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800dccc:	69fb      	ldr	r3, [r7, #28]
 800dcce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d005      	beq.n	800dce2 <gen_numname+0x5e>
 800dcd6:	69fb      	ldr	r3, [r7, #28]
 800dcd8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800dcdc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800dce0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800dce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce4:	3301      	adds	r3, #1
 800dce6:	62bb      	str	r3, [r7, #40]	; 0x28
 800dce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcea:	2b0f      	cmp	r3, #15
 800dcec:	d9e4      	bls.n	800dcb8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	881b      	ldrh	r3, [r3, #0]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d1d8      	bne.n	800dca8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800dcf6:	69fb      	ldr	r3, [r7, #28]
 800dcf8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800dcfa:	2307      	movs	r3, #7
 800dcfc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	b2db      	uxtb	r3, r3
 800dd02:	f003 030f 	and.w	r3, r3, #15
 800dd06:	b2db      	uxtb	r3, r3
 800dd08:	3330      	adds	r3, #48	; 0x30
 800dd0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800dd0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd12:	2b39      	cmp	r3, #57	; 0x39
 800dd14:	d904      	bls.n	800dd20 <gen_numname+0x9c>
 800dd16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd1a:	3307      	adds	r3, #7
 800dd1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800dd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd22:	1e5a      	subs	r2, r3, #1
 800dd24:	62ba      	str	r2, [r7, #40]	; 0x28
 800dd26:	3330      	adds	r3, #48	; 0x30
 800dd28:	443b      	add	r3, r7
 800dd2a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800dd2e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	091b      	lsrs	r3, r3, #4
 800dd36:	603b      	str	r3, [r7, #0]
	} while (seq);
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d1df      	bne.n	800dcfe <gen_numname+0x7a>
	ns[i] = '~';
 800dd3e:	f107 0214 	add.w	r2, r7, #20
 800dd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd44:	4413      	add	r3, r2
 800dd46:	227e      	movs	r2, #126	; 0x7e
 800dd48:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	627b      	str	r3, [r7, #36]	; 0x24
 800dd4e:	e002      	b.n	800dd56 <gen_numname+0xd2>
 800dd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd52:	3301      	adds	r3, #1
 800dd54:	627b      	str	r3, [r7, #36]	; 0x24
 800dd56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	d205      	bcs.n	800dd6a <gen_numname+0xe6>
 800dd5e:	68fa      	ldr	r2, [r7, #12]
 800dd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd62:	4413      	add	r3, r2
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	2b20      	cmp	r3, #32
 800dd68:	d1f2      	bne.n	800dd50 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800dd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd6c:	2b07      	cmp	r3, #7
 800dd6e:	d807      	bhi.n	800dd80 <gen_numname+0xfc>
 800dd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd72:	1c5a      	adds	r2, r3, #1
 800dd74:	62ba      	str	r2, [r7, #40]	; 0x28
 800dd76:	3330      	adds	r3, #48	; 0x30
 800dd78:	443b      	add	r3, r7
 800dd7a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800dd7e:	e000      	b.n	800dd82 <gen_numname+0xfe>
 800dd80:	2120      	movs	r1, #32
 800dd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd84:	1c5a      	adds	r2, r3, #1
 800dd86:	627a      	str	r2, [r7, #36]	; 0x24
 800dd88:	68fa      	ldr	r2, [r7, #12]
 800dd8a:	4413      	add	r3, r2
 800dd8c:	460a      	mov	r2, r1
 800dd8e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800dd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd92:	2b07      	cmp	r3, #7
 800dd94:	d9e9      	bls.n	800dd6a <gen_numname+0xe6>
}
 800dd96:	bf00      	nop
 800dd98:	bf00      	nop
 800dd9a:	3730      	adds	r7, #48	; 0x30
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}

0800dda0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800dda0:	b480      	push	{r7}
 800dda2:	b085      	sub	sp, #20
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ddac:	230b      	movs	r3, #11
 800ddae:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ddb0:	7bfb      	ldrb	r3, [r7, #15]
 800ddb2:	b2da      	uxtb	r2, r3
 800ddb4:	0852      	lsrs	r2, r2, #1
 800ddb6:	01db      	lsls	r3, r3, #7
 800ddb8:	4313      	orrs	r3, r2
 800ddba:	b2da      	uxtb	r2, r3
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	1c59      	adds	r1, r3, #1
 800ddc0:	6079      	str	r1, [r7, #4]
 800ddc2:	781b      	ldrb	r3, [r3, #0]
 800ddc4:	4413      	add	r3, r2
 800ddc6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	3b01      	subs	r3, #1
 800ddcc:	60bb      	str	r3, [r7, #8]
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d1ed      	bne.n	800ddb0 <sum_sfn+0x10>
	return sum;
 800ddd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3714      	adds	r7, #20
 800ddda:	46bd      	mov	sp, r7
 800dddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde0:	4770      	bx	lr

0800dde2 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800dde2:	b480      	push	{r7}
 800dde4:	b087      	sub	sp, #28
 800dde6:	af00      	add	r7, sp, #0
 800dde8:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	3301      	adds	r3, #1
 800ddee:	781b      	ldrb	r3, [r3, #0]
 800ddf0:	3301      	adds	r3, #1
 800ddf2:	015b      	lsls	r3, r3, #5
 800ddf4:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	827b      	strh	r3, [r7, #18]
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	617b      	str	r3, [r7, #20]
 800ddfe:	e018      	b.n	800de32 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800de00:	697b      	ldr	r3, [r7, #20]
 800de02:	2b02      	cmp	r3, #2
 800de04:	d103      	bne.n	800de0e <xdir_sum+0x2c>
			i++;
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	3301      	adds	r3, #1
 800de0a:	617b      	str	r3, [r7, #20]
 800de0c:	e00e      	b.n	800de2c <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800de0e:	8a7b      	ldrh	r3, [r7, #18]
 800de10:	03db      	lsls	r3, r3, #15
 800de12:	b29a      	uxth	r2, r3
 800de14:	8a7b      	ldrh	r3, [r7, #18]
 800de16:	085b      	lsrs	r3, r3, #1
 800de18:	b29b      	uxth	r3, r3
 800de1a:	4413      	add	r3, r2
 800de1c:	b29a      	uxth	r2, r3
 800de1e:	6879      	ldr	r1, [r7, #4]
 800de20:	697b      	ldr	r3, [r7, #20]
 800de22:	440b      	add	r3, r1
 800de24:	781b      	ldrb	r3, [r3, #0]
 800de26:	b29b      	uxth	r3, r3
 800de28:	4413      	add	r3, r2
 800de2a:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	3301      	adds	r3, #1
 800de30:	617b      	str	r3, [r7, #20]
 800de32:	697a      	ldr	r2, [r7, #20]
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	429a      	cmp	r2, r3
 800de38:	d3e2      	bcc.n	800de00 <xdir_sum+0x1e>
		}
	}
	return sum;
 800de3a:	8a7b      	ldrh	r3, [r7, #18]
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	371c      	adds	r7, #28
 800de40:	46bd      	mov	sp, r7
 800de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de46:	4770      	bx	lr

0800de48 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b084      	sub	sp, #16
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800de50:	2300      	movs	r3, #0
 800de52:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800de54:	e01f      	b.n	800de96 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800de56:	89bb      	ldrh	r3, [r7, #12]
 800de58:	4618      	mov	r0, r3
 800de5a:	f002 ff7b 	bl	8010d54 <ff_wtoupper>
 800de5e:	4603      	mov	r3, r0
 800de60:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800de62:	89fb      	ldrh	r3, [r7, #14]
 800de64:	03db      	lsls	r3, r3, #15
 800de66:	b29a      	uxth	r2, r3
 800de68:	89fb      	ldrh	r3, [r7, #14]
 800de6a:	085b      	lsrs	r3, r3, #1
 800de6c:	b29b      	uxth	r3, r3
 800de6e:	4413      	add	r3, r2
 800de70:	b29a      	uxth	r2, r3
 800de72:	89bb      	ldrh	r3, [r7, #12]
 800de74:	b2db      	uxtb	r3, r3
 800de76:	b29b      	uxth	r3, r3
 800de78:	4413      	add	r3, r2
 800de7a:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800de7c:	89fb      	ldrh	r3, [r7, #14]
 800de7e:	03db      	lsls	r3, r3, #15
 800de80:	b29a      	uxth	r2, r3
 800de82:	89fb      	ldrh	r3, [r7, #14]
 800de84:	085b      	lsrs	r3, r3, #1
 800de86:	b29b      	uxth	r3, r3
 800de88:	4413      	add	r3, r2
 800de8a:	b29a      	uxth	r2, r3
 800de8c:	89bb      	ldrh	r3, [r7, #12]
 800de8e:	0a1b      	lsrs	r3, r3, #8
 800de90:	b29b      	uxth	r3, r3
 800de92:	4413      	add	r3, r2
 800de94:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	1c9a      	adds	r2, r3, #2
 800de9a:	607a      	str	r2, [r7, #4]
 800de9c:	881b      	ldrh	r3, [r3, #0]
 800de9e:	81bb      	strh	r3, [r7, #12]
 800dea0:	89bb      	ldrh	r3, [r7, #12]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d1d7      	bne.n	800de56 <xname_sum+0xe>
	}
	return sum;
 800dea6:	89fb      	ldrh	r3, [r7, #14]
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	3710      	adds	r7, #16
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}

0800deb0 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800deb0:	b590      	push	{r4, r7, lr}
 800deb2:	b087      	sub	sp, #28
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	691b      	ldr	r3, [r3, #16]
 800debe:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681a      	ldr	r2, [r3, #0]
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dec8:	4619      	mov	r1, r3
 800deca:	4610      	mov	r0, r2
 800decc:	f7fe fda2 	bl	800ca14 <move_window>
 800ded0:	4603      	mov	r3, r0
 800ded2:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800ded4:	7bfb      	ldrb	r3, [r7, #15]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d001      	beq.n	800dede <load_xdir+0x2e>
 800deda:	7bfb      	ldrb	r3, [r7, #15]
 800dedc:	e09f      	b.n	800e01e <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dee2:	781b      	ldrb	r3, [r3, #0]
 800dee4:	2b85      	cmp	r3, #133	; 0x85
 800dee6:	d001      	beq.n	800deec <load_xdir+0x3c>
 800dee8:	2302      	movs	r3, #2
 800deea:	e098      	b.n	800e01e <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800def0:	2220      	movs	r2, #32
 800def2:	4619      	mov	r1, r3
 800def4:	6938      	ldr	r0, [r7, #16]
 800def6:	f7fe fb5e 	bl	800c5b6 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800defa:	693b      	ldr	r3, [r7, #16]
 800defc:	3301      	adds	r3, #1
 800defe:	781b      	ldrb	r3, [r3, #0]
 800df00:	3301      	adds	r3, #1
 800df02:	015b      	lsls	r3, r3, #5
 800df04:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	2b5f      	cmp	r3, #95	; 0x5f
 800df0a:	d903      	bls.n	800df14 <load_xdir+0x64>
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800df12:	d901      	bls.n	800df18 <load_xdir+0x68>
 800df14:	2302      	movs	r3, #2
 800df16:	e082      	b.n	800e01e <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800df18:	2100      	movs	r1, #0
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f7ff fc05 	bl	800d72a <dir_next>
 800df20:	4603      	mov	r3, r0
 800df22:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800df24:	7bfb      	ldrb	r3, [r7, #15]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d001      	beq.n	800df2e <load_xdir+0x7e>
 800df2a:	7bfb      	ldrb	r3, [r7, #15]
 800df2c:	e077      	b.n	800e01e <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681a      	ldr	r2, [r3, #0]
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df36:	4619      	mov	r1, r3
 800df38:	4610      	mov	r0, r2
 800df3a:	f7fe fd6b 	bl	800ca14 <move_window>
 800df3e:	4603      	mov	r3, r0
 800df40:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800df42:	7bfb      	ldrb	r3, [r7, #15]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d001      	beq.n	800df4c <load_xdir+0x9c>
 800df48:	7bfb      	ldrb	r3, [r7, #15]
 800df4a:	e068      	b.n	800e01e <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df50:	781b      	ldrb	r3, [r3, #0]
 800df52:	2bc0      	cmp	r3, #192	; 0xc0
 800df54:	d001      	beq.n	800df5a <load_xdir+0xaa>
 800df56:	2302      	movs	r3, #2
 800df58:	e061      	b.n	800e01e <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800df5a:	693b      	ldr	r3, [r7, #16]
 800df5c:	f103 0020 	add.w	r0, r3, #32
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df64:	2220      	movs	r2, #32
 800df66:	4619      	mov	r1, r3
 800df68:	f7fe fb25 	bl	800c5b6 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800df6c:	693b      	ldr	r3, [r7, #16]
 800df6e:	3323      	adds	r3, #35	; 0x23
 800df70:	781b      	ldrb	r3, [r3, #0]
 800df72:	332c      	adds	r3, #44	; 0x2c
 800df74:	4a2c      	ldr	r2, [pc, #176]	; (800e028 <load_xdir+0x178>)
 800df76:	fba2 2303 	umull	r2, r3, r2, r3
 800df7a:	08db      	lsrs	r3, r3, #3
 800df7c:	015b      	lsls	r3, r3, #5
 800df7e:	68ba      	ldr	r2, [r7, #8]
 800df80:	429a      	cmp	r2, r3
 800df82:	d201      	bcs.n	800df88 <load_xdir+0xd8>
 800df84:	2302      	movs	r3, #2
 800df86:	e04a      	b.n	800e01e <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800df88:	2340      	movs	r3, #64	; 0x40
 800df8a:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800df8c:	2100      	movs	r1, #0
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f7ff fbcb 	bl	800d72a <dir_next>
 800df94:	4603      	mov	r3, r0
 800df96:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800df98:	7bfb      	ldrb	r3, [r7, #15]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d001      	beq.n	800dfa2 <load_xdir+0xf2>
 800df9e:	7bfb      	ldrb	r3, [r7, #15]
 800dfa0:	e03d      	b.n	800e01e <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681a      	ldr	r2, [r3, #0]
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfaa:	4619      	mov	r1, r3
 800dfac:	4610      	mov	r0, r2
 800dfae:	f7fe fd31 	bl	800ca14 <move_window>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800dfb6:	7bfb      	ldrb	r3, [r7, #15]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d001      	beq.n	800dfc0 <load_xdir+0x110>
 800dfbc:	7bfb      	ldrb	r3, [r7, #15]
 800dfbe:	e02e      	b.n	800e01e <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfc4:	781b      	ldrb	r3, [r3, #0]
 800dfc6:	2bc1      	cmp	r3, #193	; 0xc1
 800dfc8:	d001      	beq.n	800dfce <load_xdir+0x11e>
 800dfca:	2302      	movs	r3, #2
 800dfcc:	e027      	b.n	800e01e <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800dfd4:	d208      	bcs.n	800dfe8 <load_xdir+0x138>
 800dfd6:	693a      	ldr	r2, [r7, #16]
 800dfd8:	697b      	ldr	r3, [r7, #20]
 800dfda:	18d0      	adds	r0, r2, r3
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfe0:	2220      	movs	r2, #32
 800dfe2:	4619      	mov	r1, r3
 800dfe4:	f7fe fae7 	bl	800c5b6 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800dfe8:	697b      	ldr	r3, [r7, #20]
 800dfea:	3320      	adds	r3, #32
 800dfec:	617b      	str	r3, [r7, #20]
 800dfee:	697a      	ldr	r2, [r7, #20]
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d3ca      	bcc.n	800df8c <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800dffc:	d80e      	bhi.n	800e01c <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800dffe:	6938      	ldr	r0, [r7, #16]
 800e000:	f7ff feef 	bl	800dde2 <xdir_sum>
 800e004:	4603      	mov	r3, r0
 800e006:	461c      	mov	r4, r3
 800e008:	693b      	ldr	r3, [r7, #16]
 800e00a:	3302      	adds	r3, #2
 800e00c:	4618      	mov	r0, r3
 800e00e:	f7fe f8ed 	bl	800c1ec <ld_word>
 800e012:	4603      	mov	r3, r0
 800e014:	429c      	cmp	r4, r3
 800e016:	d001      	beq.n	800e01c <load_xdir+0x16c>
 800e018:	2302      	movs	r3, #2
 800e01a:	e000      	b.n	800e01e <load_xdir+0x16e>
	}
	return FR_OK;
 800e01c:	2300      	movs	r3, #0
}
 800e01e:	4618      	mov	r0, r3
 800e020:	371c      	adds	r7, #28
 800e022:	46bd      	mov	sp, r7
 800e024:	bd90      	pop	{r4, r7, pc}
 800e026:	bf00      	nop
 800e028:	88888889 	.word	0x88888889

0800e02c <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800e02c:	b5b0      	push	{r4, r5, r7, lr}
 800e02e:	b084      	sub	sp, #16
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800e036:	6839      	ldr	r1, [r7, #0]
 800e038:	6808      	ldr	r0, [r1, #0]
 800e03a:	6879      	ldr	r1, [r7, #4]
 800e03c:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800e03e:	6839      	ldr	r1, [r7, #0]
 800e040:	6a08      	ldr	r0, [r1, #32]
 800e042:	6879      	ldr	r1, [r7, #4]
 800e044:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800e046:	6839      	ldr	r1, [r7, #0]
 800e048:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800e04a:	b2c8      	uxtb	r0, r1
 800e04c:	6879      	ldr	r1, [r7, #4]
 800e04e:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800e050:	6839      	ldr	r1, [r7, #0]
 800e052:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800e054:	2000      	movs	r0, #0
 800e056:	460c      	mov	r4, r1
 800e058:	4605      	mov	r5, r0
 800e05a:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800e05e:	2300      	movs	r3, #0
 800e060:	6879      	ldr	r1, [r7, #4]
 800e062:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e072:	4619      	mov	r1, r3
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f7ff fad2 	bl	800d61e <dir_sdi>
 800e07a:	4603      	mov	r3, r0
 800e07c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e07e:	7bfb      	ldrb	r3, [r7, #15]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d104      	bne.n	800e08e <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	f7ff ff13 	bl	800deb0 <load_xdir>
 800e08a:	4603      	mov	r3, r0
 800e08c:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800e08e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e090:	4618      	mov	r0, r3
 800e092:	3710      	adds	r7, #16
 800e094:	46bd      	mov	sp, r7
 800e096:	bdb0      	pop	{r4, r5, r7, pc}

0800e098 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800e098:	b590      	push	{r4, r7, lr}
 800e09a:	b087      	sub	sp, #28
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	691b      	ldr	r3, [r3, #16]
 800e0a6:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	1c9c      	adds	r4, r3, #2
 800e0ac:	68f8      	ldr	r0, [r7, #12]
 800e0ae:	f7ff fe98 	bl	800dde2 <xdir_sum>
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	4619      	mov	r1, r3
 800e0b6:	4620      	mov	r0, r4
 800e0b8:	f7fe f9ae 	bl	800c418 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	3301      	adds	r3, #1
 800e0c0:	781b      	ldrb	r3, [r3, #0]
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0ca:	4619      	mov	r1, r3
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f7ff faa6 	bl	800d61e <dir_sdi>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800e0d6:	e026      	b.n	800e126 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681a      	ldr	r2, [r3, #0]
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0e0:	4619      	mov	r1, r3
 800e0e2:	4610      	mov	r0, r2
 800e0e4:	f7fe fc96 	bl	800ca14 <move_window>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e0ec:	7dfb      	ldrb	r3, [r7, #23]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d11d      	bne.n	800e12e <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0f6:	2220      	movs	r2, #32
 800e0f8:	68f9      	ldr	r1, [r7, #12]
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f7fe fa5b 	bl	800c5b6 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	2201      	movs	r2, #1
 800e106:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800e108:	693b      	ldr	r3, [r7, #16]
 800e10a:	3b01      	subs	r3, #1
 800e10c:	613b      	str	r3, [r7, #16]
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d00e      	beq.n	800e132 <store_xdir+0x9a>
		dirb += SZDIRE;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	3320      	adds	r3, #32
 800e118:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800e11a:	2100      	movs	r1, #0
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f7ff fb04 	bl	800d72a <dir_next>
 800e122:	4603      	mov	r3, r0
 800e124:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800e126:	7dfb      	ldrb	r3, [r7, #23]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d0d5      	beq.n	800e0d8 <store_xdir+0x40>
 800e12c:	e002      	b.n	800e134 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800e12e:	bf00      	nop
 800e130:	e000      	b.n	800e134 <store_xdir+0x9c>
		if (--nent == 0) break;
 800e132:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800e134:	7dfb      	ldrb	r3, [r7, #23]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d002      	beq.n	800e140 <store_xdir+0xa8>
 800e13a:	7dfb      	ldrb	r3, [r7, #23]
 800e13c:	2b01      	cmp	r3, #1
 800e13e:	d101      	bne.n	800e144 <store_xdir+0xac>
 800e140:	7dfb      	ldrb	r3, [r7, #23]
 800e142:	e000      	b.n	800e146 <store_xdir+0xae>
 800e144:	2302      	movs	r3, #2
}
 800e146:	4618      	mov	r0, r3
 800e148:	371c      	adds	r7, #28
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd90      	pop	{r4, r7, pc}

0800e14e <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800e14e:	b590      	push	{r4, r7, lr}
 800e150:	b085      	sub	sp, #20
 800e152:	af00      	add	r7, sp, #0
 800e154:	6078      	str	r0, [r7, #4]
 800e156:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800e158:	2240      	movs	r2, #64	; 0x40
 800e15a:	2100      	movs	r1, #0
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	f7fe fa4b 	bl	800c5f8 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2285      	movs	r2, #133	; 0x85
 800e166:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	3320      	adds	r3, #32
 800e16c:	22c0      	movs	r2, #192	; 0xc0
 800e16e:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800e170:	2300      	movs	r3, #0
 800e172:	72bb      	strb	r3, [r7, #10]
 800e174:	2301      	movs	r3, #1
 800e176:	72fb      	strb	r3, [r7, #11]
 800e178:	2301      	movs	r3, #1
 800e17a:	813b      	strh	r3, [r7, #8]
 800e17c:	2340      	movs	r3, #64	; 0x40
 800e17e:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	1c5a      	adds	r2, r3, #1
 800e184:	60fa      	str	r2, [r7, #12]
 800e186:	687a      	ldr	r2, [r7, #4]
 800e188:	4413      	add	r3, r2
 800e18a:	22c1      	movs	r2, #193	; 0xc1
 800e18c:	701a      	strb	r2, [r3, #0]
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	1c5a      	adds	r2, r3, #1
 800e192:	60fa      	str	r2, [r7, #12]
 800e194:	687a      	ldr	r2, [r7, #4]
 800e196:	4413      	add	r3, r2
 800e198:	2200      	movs	r2, #0
 800e19a:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800e19c:	893b      	ldrh	r3, [r7, #8]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d00b      	beq.n	800e1ba <create_xdir+0x6c>
 800e1a2:	7abb      	ldrb	r3, [r7, #10]
 800e1a4:	005b      	lsls	r3, r3, #1
 800e1a6:	683a      	ldr	r2, [r7, #0]
 800e1a8:	4413      	add	r3, r2
 800e1aa:	881b      	ldrh	r3, [r3, #0]
 800e1ac:	813b      	strh	r3, [r7, #8]
 800e1ae:	893b      	ldrh	r3, [r7, #8]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d002      	beq.n	800e1ba <create_xdir+0x6c>
 800e1b4:	7abb      	ldrb	r3, [r7, #10]
 800e1b6:	3301      	adds	r3, #1
 800e1b8:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800e1ba:	687a      	ldr	r2, [r7, #4]
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	4413      	add	r3, r2
 800e1c0:	893a      	ldrh	r2, [r7, #8]
 800e1c2:	4611      	mov	r1, r2
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f7fe f927 	bl	800c418 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	3302      	adds	r3, #2
 800e1ce:	60fb      	str	r3, [r7, #12]
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	f003 031f 	and.w	r3, r3, #31
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d1e0      	bne.n	800e19c <create_xdir+0x4e>
		nb++;
 800e1da:	7afb      	ldrb	r3, [r7, #11]
 800e1dc:	3301      	adds	r3, #1
 800e1de:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800e1e0:	7abb      	ldrb	r3, [r7, #10]
 800e1e2:	005b      	lsls	r3, r3, #1
 800e1e4:	683a      	ldr	r2, [r7, #0]
 800e1e6:	4413      	add	r3, r2
 800e1e8:	881b      	ldrh	r3, [r3, #0]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d1c8      	bne.n	800e180 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	3323      	adds	r3, #35	; 0x23
 800e1f2:	7aba      	ldrb	r2, [r7, #10]
 800e1f4:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	3301      	adds	r3, #1
 800e1fa:	7afa      	ldrb	r2, [r7, #11]
 800e1fc:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800e204:	6838      	ldr	r0, [r7, #0]
 800e206:	f7ff fe1f 	bl	800de48 <xname_sum>
 800e20a:	4603      	mov	r3, r0
 800e20c:	4619      	mov	r1, r3
 800e20e:	4620      	mov	r0, r4
 800e210:	f7fe f902 	bl	800c418 <st_word>
}
 800e214:	bf00      	nop
 800e216:	3714      	adds	r7, #20
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd90      	pop	{r4, r7, pc}

0800e21c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b086      	sub	sp, #24
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
 800e224:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e226:	2304      	movs	r3, #4
 800e228:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800e230:	23ff      	movs	r3, #255	; 0xff
 800e232:	757b      	strb	r3, [r7, #21]
 800e234:	23ff      	movs	r3, #255	; 0xff
 800e236:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800e238:	e09f      	b.n	800e37a <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e23e:	4619      	mov	r1, r3
 800e240:	6938      	ldr	r0, [r7, #16]
 800e242:	f7fe fbe7 	bl	800ca14 <move_window>
 800e246:	4603      	mov	r3, r0
 800e248:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e24a:	7dfb      	ldrb	r3, [r7, #23]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	f040 809a 	bne.w	800e386 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e256:	781b      	ldrb	r3, [r3, #0]
 800e258:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800e25a:	7dbb      	ldrb	r3, [r7, #22]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d102      	bne.n	800e266 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e260:	2304      	movs	r3, #4
 800e262:	75fb      	strb	r3, [r7, #23]
 800e264:	e096      	b.n	800e394 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	781b      	ldrb	r3, [r3, #0]
 800e26a:	2b04      	cmp	r3, #4
 800e26c:	d118      	bne.n	800e2a0 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800e26e:	7dbb      	ldrb	r3, [r7, #22]
 800e270:	2b85      	cmp	r3, #133	; 0x85
 800e272:	d179      	bne.n	800e368 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800e27c:	6878      	ldr	r0, [r7, #4]
 800e27e:	f7ff fe17 	bl	800deb0 <load_xdir>
 800e282:	4603      	mov	r3, r0
 800e284:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800e286:	7dfb      	ldrb	r3, [r7, #23]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d17e      	bne.n	800e38a <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	691b      	ldr	r3, [r3, #16]
 800e290:	3304      	adds	r3, #4
 800e292:	781b      	ldrb	r3, [r3, #0]
 800e294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e298:	b2da      	uxtb	r2, r3
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	719a      	strb	r2, [r3, #6]
					}
					break;
 800e29e:	e074      	b.n	800e38a <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2a4:	330b      	adds	r3, #11
 800e2a6:	781b      	ldrb	r3, [r3, #0]
 800e2a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e2ac:	73fb      	strb	r3, [r7, #15]
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	7bfa      	ldrb	r2, [r7, #15]
 800e2b2:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800e2b4:	7dbb      	ldrb	r3, [r7, #22]
 800e2b6:	2be5      	cmp	r3, #229	; 0xe5
 800e2b8:	d00e      	beq.n	800e2d8 <dir_read+0xbc>
 800e2ba:	7dbb      	ldrb	r3, [r7, #22]
 800e2bc:	2b2e      	cmp	r3, #46	; 0x2e
 800e2be:	d00b      	beq.n	800e2d8 <dir_read+0xbc>
 800e2c0:	7bfb      	ldrb	r3, [r7, #15]
 800e2c2:	f023 0320 	bic.w	r3, r3, #32
 800e2c6:	2b08      	cmp	r3, #8
 800e2c8:	bf0c      	ite	eq
 800e2ca:	2301      	moveq	r3, #1
 800e2cc:	2300      	movne	r3, #0
 800e2ce:	b2db      	uxtb	r3, r3
 800e2d0:	461a      	mov	r2, r3
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	4293      	cmp	r3, r2
 800e2d6:	d002      	beq.n	800e2de <dir_read+0xc2>
				ord = 0xFF;
 800e2d8:	23ff      	movs	r3, #255	; 0xff
 800e2da:	757b      	strb	r3, [r7, #21]
 800e2dc:	e044      	b.n	800e368 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800e2de:	7bfb      	ldrb	r3, [r7, #15]
 800e2e0:	2b0f      	cmp	r3, #15
 800e2e2:	d12f      	bne.n	800e344 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800e2e4:	7dbb      	ldrb	r3, [r7, #22]
 800e2e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d00d      	beq.n	800e30a <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2f2:	7b5b      	ldrb	r3, [r3, #13]
 800e2f4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800e2f6:	7dbb      	ldrb	r3, [r7, #22]
 800e2f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e2fc:	75bb      	strb	r3, [r7, #22]
 800e2fe:	7dbb      	ldrb	r3, [r7, #22]
 800e300:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e30a:	7dba      	ldrb	r2, [r7, #22]
 800e30c:	7d7b      	ldrb	r3, [r7, #21]
 800e30e:	429a      	cmp	r2, r3
 800e310:	d115      	bne.n	800e33e <dir_read+0x122>
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e316:	330d      	adds	r3, #13
 800e318:	781b      	ldrb	r3, [r3, #0]
 800e31a:	7d3a      	ldrb	r2, [r7, #20]
 800e31c:	429a      	cmp	r2, r3
 800e31e:	d10e      	bne.n	800e33e <dir_read+0x122>
 800e320:	693b      	ldr	r3, [r7, #16]
 800e322:	68da      	ldr	r2, [r3, #12]
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e328:	4619      	mov	r1, r3
 800e32a:	4610      	mov	r0, r2
 800e32c:	f7ff fbde 	bl	800daec <pick_lfn>
 800e330:	4603      	mov	r3, r0
 800e332:	2b00      	cmp	r3, #0
 800e334:	d003      	beq.n	800e33e <dir_read+0x122>
 800e336:	7d7b      	ldrb	r3, [r7, #21]
 800e338:	3b01      	subs	r3, #1
 800e33a:	b2db      	uxtb	r3, r3
 800e33c:	e000      	b.n	800e340 <dir_read+0x124>
 800e33e:	23ff      	movs	r3, #255	; 0xff
 800e340:	757b      	strb	r3, [r7, #21]
 800e342:	e011      	b.n	800e368 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800e344:	7d7b      	ldrb	r3, [r7, #21]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d109      	bne.n	800e35e <dir_read+0x142>
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e34e:	4618      	mov	r0, r3
 800e350:	f7ff fd26 	bl	800dda0 <sum_sfn>
 800e354:	4603      	mov	r3, r0
 800e356:	461a      	mov	r2, r3
 800e358:	7d3b      	ldrb	r3, [r7, #20]
 800e35a:	4293      	cmp	r3, r2
 800e35c:	d017      	beq.n	800e38e <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f04f 32ff 	mov.w	r2, #4294967295
 800e364:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800e366:	e012      	b.n	800e38e <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e368:	2100      	movs	r1, #0
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f7ff f9dd 	bl	800d72a <dir_next>
 800e370:	4603      	mov	r3, r0
 800e372:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e374:	7dfb      	ldrb	r3, [r7, #23]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d10b      	bne.n	800e392 <dir_read+0x176>
	while (dp->sect) {
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e37e:	2b00      	cmp	r3, #0
 800e380:	f47f af5b 	bne.w	800e23a <dir_read+0x1e>
 800e384:	e006      	b.n	800e394 <dir_read+0x178>
		if (res != FR_OK) break;
 800e386:	bf00      	nop
 800e388:	e004      	b.n	800e394 <dir_read+0x178>
					break;
 800e38a:	bf00      	nop
 800e38c:	e002      	b.n	800e394 <dir_read+0x178>
					break;
 800e38e:	bf00      	nop
 800e390:	e000      	b.n	800e394 <dir_read+0x178>
		if (res != FR_OK) break;
 800e392:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e394:	7dfb      	ldrb	r3, [r7, #23]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d002      	beq.n	800e3a0 <dir_read+0x184>
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2200      	movs	r2, #0
 800e39e:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800e3a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3718      	adds	r7, #24
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}

0800e3aa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e3aa:	b590      	push	{r4, r7, lr}
 800e3ac:	b089      	sub	sp, #36	; 0x24
 800e3ae:	af00      	add	r7, sp, #0
 800e3b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e3b8:	2100      	movs	r1, #0
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f7ff f92f 	bl	800d61e <dir_sdi>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800e3c4:	7ffb      	ldrb	r3, [r7, #31]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d001      	beq.n	800e3ce <dir_find+0x24>
 800e3ca:	7ffb      	ldrb	r3, [r7, #31]
 800e3cc:	e112      	b.n	800e5f4 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	781b      	ldrb	r3, [r3, #0]
 800e3d2:	2b04      	cmp	r3, #4
 800e3d4:	d164      	bne.n	800e4a0 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	68db      	ldr	r3, [r3, #12]
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f7ff fd34 	bl	800de48 <xname_sum>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800e3e4:	e04f      	b.n	800e486 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	691b      	ldr	r3, [r3, #16]
 800e3ea:	3324      	adds	r3, #36	; 0x24
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	f7fd fefd 	bl	800c1ec <ld_word>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	461a      	mov	r2, r3
 800e3f6:	893b      	ldrh	r3, [r7, #8]
 800e3f8:	4293      	cmp	r3, r2
 800e3fa:	d000      	beq.n	800e3fe <dir_find+0x54>
 800e3fc:	e043      	b.n	800e486 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	691b      	ldr	r3, [r3, #16]
 800e402:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800e406:	76fb      	strb	r3, [r7, #27]
 800e408:	2340      	movs	r3, #64	; 0x40
 800e40a:	617b      	str	r3, [r7, #20]
 800e40c:	2300      	movs	r3, #0
 800e40e:	613b      	str	r3, [r7, #16]
 800e410:	e029      	b.n	800e466 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800e412:	697b      	ldr	r3, [r7, #20]
 800e414:	f003 031f 	and.w	r3, r3, #31
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d102      	bne.n	800e422 <dir_find+0x78>
 800e41c:	697b      	ldr	r3, [r7, #20]
 800e41e:	3302      	adds	r3, #2
 800e420:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	691a      	ldr	r2, [r3, #16]
 800e426:	697b      	ldr	r3, [r7, #20]
 800e428:	4413      	add	r3, r2
 800e42a:	4618      	mov	r0, r3
 800e42c:	f7fd fede 	bl	800c1ec <ld_word>
 800e430:	4603      	mov	r3, r0
 800e432:	4618      	mov	r0, r3
 800e434:	f002 fc8e 	bl	8010d54 <ff_wtoupper>
 800e438:	4603      	mov	r3, r0
 800e43a:	461c      	mov	r4, r3
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	68da      	ldr	r2, [r3, #12]
 800e440:	693b      	ldr	r3, [r7, #16]
 800e442:	005b      	lsls	r3, r3, #1
 800e444:	4413      	add	r3, r2
 800e446:	881b      	ldrh	r3, [r3, #0]
 800e448:	4618      	mov	r0, r3
 800e44a:	f002 fc83 	bl	8010d54 <ff_wtoupper>
 800e44e:	4603      	mov	r3, r0
 800e450:	429c      	cmp	r4, r3
 800e452:	d10c      	bne.n	800e46e <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800e454:	7efb      	ldrb	r3, [r7, #27]
 800e456:	3b01      	subs	r3, #1
 800e458:	76fb      	strb	r3, [r7, #27]
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	3302      	adds	r3, #2
 800e45e:	617b      	str	r3, [r7, #20]
 800e460:	693b      	ldr	r3, [r7, #16]
 800e462:	3301      	adds	r3, #1
 800e464:	613b      	str	r3, [r7, #16]
 800e466:	7efb      	ldrb	r3, [r7, #27]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d1d2      	bne.n	800e412 <dir_find+0x68>
 800e46c:	e000      	b.n	800e470 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800e46e:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800e470:	7efb      	ldrb	r3, [r7, #27]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d107      	bne.n	800e486 <dir_find+0xdc>
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	68da      	ldr	r2, [r3, #12]
 800e47a:	693b      	ldr	r3, [r7, #16]
 800e47c:	005b      	lsls	r3, r3, #1
 800e47e:	4413      	add	r3, r2
 800e480:	881b      	ldrh	r3, [r3, #0]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d009      	beq.n	800e49a <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800e486:	2100      	movs	r1, #0
 800e488:	6878      	ldr	r0, [r7, #4]
 800e48a:	f7ff fec7 	bl	800e21c <dir_read>
 800e48e:	4603      	mov	r3, r0
 800e490:	77fb      	strb	r3, [r7, #31]
 800e492:	7ffb      	ldrb	r3, [r7, #31]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d0a6      	beq.n	800e3e6 <dir_find+0x3c>
 800e498:	e000      	b.n	800e49c <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800e49a:	bf00      	nop
		}
		return res;
 800e49c:	7ffb      	ldrb	r3, [r7, #31]
 800e49e:	e0a9      	b.n	800e5f4 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e4a0:	23ff      	movs	r3, #255	; 0xff
 800e4a2:	773b      	strb	r3, [r7, #28]
 800e4a4:	7f3b      	ldrb	r3, [r7, #28]
 800e4a6:	777b      	strb	r3, [r7, #29]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f04f 32ff 	mov.w	r2, #4294967295
 800e4ae:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4b4:	4619      	mov	r1, r3
 800e4b6:	68f8      	ldr	r0, [r7, #12]
 800e4b8:	f7fe faac 	bl	800ca14 <move_window>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800e4c0:	7ffb      	ldrb	r3, [r7, #31]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	f040 8090 	bne.w	800e5e8 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4cc:	781b      	ldrb	r3, [r3, #0]
 800e4ce:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e4d0:	7fbb      	ldrb	r3, [r7, #30]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d102      	bne.n	800e4dc <dir_find+0x132>
 800e4d6:	2304      	movs	r3, #4
 800e4d8:	77fb      	strb	r3, [r7, #31]
 800e4da:	e08a      	b.n	800e5f2 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4e0:	330b      	adds	r3, #11
 800e4e2:	781b      	ldrb	r3, [r3, #0]
 800e4e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e4e8:	72fb      	strb	r3, [r7, #11]
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	7afa      	ldrb	r2, [r7, #11]
 800e4ee:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e4f0:	7fbb      	ldrb	r3, [r7, #30]
 800e4f2:	2be5      	cmp	r3, #229	; 0xe5
 800e4f4:	d007      	beq.n	800e506 <dir_find+0x15c>
 800e4f6:	7afb      	ldrb	r3, [r7, #11]
 800e4f8:	f003 0308 	and.w	r3, r3, #8
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d009      	beq.n	800e514 <dir_find+0x16a>
 800e500:	7afb      	ldrb	r3, [r7, #11]
 800e502:	2b0f      	cmp	r3, #15
 800e504:	d006      	beq.n	800e514 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e506:	23ff      	movs	r3, #255	; 0xff
 800e508:	777b      	strb	r3, [r7, #29]
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f04f 32ff 	mov.w	r2, #4294967295
 800e510:	64da      	str	r2, [r3, #76]	; 0x4c
 800e512:	e05e      	b.n	800e5d2 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e514:	7afb      	ldrb	r3, [r7, #11]
 800e516:	2b0f      	cmp	r3, #15
 800e518:	d136      	bne.n	800e588 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800e520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e524:	2b00      	cmp	r3, #0
 800e526:	d154      	bne.n	800e5d2 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e528:	7fbb      	ldrb	r3, [r7, #30]
 800e52a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d00d      	beq.n	800e54e <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e536:	7b5b      	ldrb	r3, [r3, #13]
 800e538:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e53a:	7fbb      	ldrb	r3, [r7, #30]
 800e53c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e540:	77bb      	strb	r3, [r7, #30]
 800e542:	7fbb      	ldrb	r3, [r7, #30]
 800e544:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e54e:	7fba      	ldrb	r2, [r7, #30]
 800e550:	7f7b      	ldrb	r3, [r7, #29]
 800e552:	429a      	cmp	r2, r3
 800e554:	d115      	bne.n	800e582 <dir_find+0x1d8>
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e55a:	330d      	adds	r3, #13
 800e55c:	781b      	ldrb	r3, [r3, #0]
 800e55e:	7f3a      	ldrb	r2, [r7, #28]
 800e560:	429a      	cmp	r2, r3
 800e562:	d10e      	bne.n	800e582 <dir_find+0x1d8>
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	68da      	ldr	r2, [r3, #12]
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e56c:	4619      	mov	r1, r3
 800e56e:	4610      	mov	r0, r2
 800e570:	f7ff fa4c 	bl	800da0c <cmp_lfn>
 800e574:	4603      	mov	r3, r0
 800e576:	2b00      	cmp	r3, #0
 800e578:	d003      	beq.n	800e582 <dir_find+0x1d8>
 800e57a:	7f7b      	ldrb	r3, [r7, #29]
 800e57c:	3b01      	subs	r3, #1
 800e57e:	b2db      	uxtb	r3, r3
 800e580:	e000      	b.n	800e584 <dir_find+0x1da>
 800e582:	23ff      	movs	r3, #255	; 0xff
 800e584:	777b      	strb	r3, [r7, #29]
 800e586:	e024      	b.n	800e5d2 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e588:	7f7b      	ldrb	r3, [r7, #29]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d109      	bne.n	800e5a2 <dir_find+0x1f8>
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e592:	4618      	mov	r0, r3
 800e594:	f7ff fc04 	bl	800dda0 <sum_sfn>
 800e598:	4603      	mov	r3, r0
 800e59a:	461a      	mov	r2, r3
 800e59c:	7f3b      	ldrb	r3, [r7, #28]
 800e59e:	4293      	cmp	r3, r2
 800e5a0:	d024      	beq.n	800e5ec <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800e5a8:	f003 0301 	and.w	r3, r3, #1
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d10a      	bne.n	800e5c6 <dir_find+0x21c>
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	3340      	adds	r3, #64	; 0x40
 800e5b8:	220b      	movs	r2, #11
 800e5ba:	4619      	mov	r1, r3
 800e5bc:	f7fe f837 	bl	800c62e <mem_cmp>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d014      	beq.n	800e5f0 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e5c6:	23ff      	movs	r3, #255	; 0xff
 800e5c8:	777b      	strb	r3, [r7, #29]
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f04f 32ff 	mov.w	r2, #4294967295
 800e5d0:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e5d2:	2100      	movs	r1, #0
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f7ff f8a8 	bl	800d72a <dir_next>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800e5de:	7ffb      	ldrb	r3, [r7, #31]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	f43f af65 	beq.w	800e4b0 <dir_find+0x106>
 800e5e6:	e004      	b.n	800e5f2 <dir_find+0x248>
		if (res != FR_OK) break;
 800e5e8:	bf00      	nop
 800e5ea:	e002      	b.n	800e5f2 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e5ec:	bf00      	nop
 800e5ee:	e000      	b.n	800e5f2 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e5f0:	bf00      	nop

	return res;
 800e5f2:	7ffb      	ldrb	r3, [r7, #31]
}
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	3724      	adds	r7, #36	; 0x24
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd90      	pop	{r4, r7, pc}

0800e5fc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e5fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e600:	b0a0      	sub	sp, #128	; 0x80
 800e602:	af00      	add	r7, sp, #0
 800e604:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800e612:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e616:	2b00      	cmp	r3, #0
 800e618:	d001      	beq.n	800e61e <dir_register+0x22>
 800e61a:	2306      	movs	r3, #6
 800e61c:	e18e      	b.n	800e93c <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e61e:	2300      	movs	r3, #0
 800e620:	677b      	str	r3, [r7, #116]	; 0x74
 800e622:	e002      	b.n	800e62a <dir_register+0x2e>
 800e624:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e626:	3301      	adds	r3, #1
 800e628:	677b      	str	r3, [r7, #116]	; 0x74
 800e62a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e62c:	68da      	ldr	r2, [r3, #12]
 800e62e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e630:	005b      	lsls	r3, r3, #1
 800e632:	4413      	add	r3, r2
 800e634:	881b      	ldrh	r3, [r3, #0]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d1f4      	bne.n	800e624 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e63a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e63c:	781b      	ldrb	r3, [r3, #0]
 800e63e:	2b04      	cmp	r3, #4
 800e640:	f040 809f 	bne.w	800e782 <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800e644:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e646:	330e      	adds	r3, #14
 800e648:	4aa2      	ldr	r2, [pc, #648]	; (800e8d4 <dir_register+0x2d8>)
 800e64a:	fba2 2303 	umull	r2, r3, r2, r3
 800e64e:	08db      	lsrs	r3, r3, #3
 800e650:	3302      	adds	r3, #2
 800e652:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800e654:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f7ff f93c 	bl	800d8d4 <dir_alloc>
 800e65c:	4603      	mov	r3, r0
 800e65e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800e662:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e666:	2b00      	cmp	r3, #0
 800e668:	d002      	beq.n	800e670 <dir_register+0x74>
 800e66a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e66e:	e165      	b.n	800e93c <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e674:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e676:	3b01      	subs	r3, #1
 800e678:	015b      	lsls	r3, r3, #5
 800e67a:	1ad2      	subs	r2, r2, r3
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	689b      	ldr	r3, [r3, #8]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d072      	beq.n	800e76e <dir_register+0x172>
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	79db      	ldrb	r3, [r3, #7]
 800e68c:	f003 0304 	and.w	r3, r3, #4
 800e690:	2b00      	cmp	r3, #0
 800e692:	d06c      	beq.n	800e76e <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e69a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e69c:	8949      	ldrh	r1, [r1, #10]
 800e69e:	0249      	lsls	r1, r1, #9
 800e6a0:	2000      	movs	r0, #0
 800e6a2:	460c      	mov	r4, r1
 800e6a4:	4605      	mov	r5, r0
 800e6a6:	eb12 0804 	adds.w	r8, r2, r4
 800e6aa:	eb43 0905 	adc.w	r9, r3, r5
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7fe fd58 	bl	800d16c <fill_first_frag>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800e6c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d002      	beq.n	800e6d0 <dir_register+0xd4>
 800e6ca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e6ce:	e135      	b.n	800e93c <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800e6d0:	6878      	ldr	r0, [r7, #4]
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6d6:	f04f 32ff 	mov.w	r2, #4294967295
 800e6da:	4619      	mov	r1, r3
 800e6dc:	f7fe fd75 	bl	800d1ca <fill_last_frag>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800e6e6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d002      	beq.n	800e6f4 <dir_register+0xf8>
 800e6ee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e6f2:	e123      	b.n	800e93c <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800e6f4:	687a      	ldr	r2, [r7, #4]
 800e6f6:	f107 0308 	add.w	r3, r7, #8
 800e6fa:	4611      	mov	r1, r2
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7ff fc95 	bl	800e02c <load_obj_dir>
 800e702:	4603      	mov	r3, r0
 800e704:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800e708:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d002      	beq.n	800e716 <dir_register+0x11a>
 800e710:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e714:	e112      	b.n	800e93c <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800e716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e718:	691b      	ldr	r3, [r3, #16]
 800e71a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e724:	4608      	mov	r0, r1
 800e726:	f7fd febe 	bl	800c4a6 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800e72a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e72c:	691b      	ldr	r3, [r3, #16]
 800e72e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e738:	4608      	mov	r0, r1
 800e73a:	f7fd feb4 	bl	800c4a6 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	79da      	ldrb	r2, [r3, #7]
 800e742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e744:	691b      	ldr	r3, [r3, #16]
 800e746:	3321      	adds	r3, #33	; 0x21
 800e748:	f042 0201 	orr.w	r2, r2, #1
 800e74c:	b2d2      	uxtb	r2, r2
 800e74e:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800e750:	f107 0308 	add.w	r3, r7, #8
 800e754:	4618      	mov	r0, r3
 800e756:	f7ff fc9f 	bl	800e098 <store_xdir>
 800e75a:	4603      	mov	r3, r0
 800e75c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800e760:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e764:	2b00      	cmp	r3, #0
 800e766:	d002      	beq.n	800e76e <dir_register+0x172>
 800e768:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e76c:	e0e6      	b.n	800e93c <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800e76e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e770:	691a      	ldr	r2, [r3, #16]
 800e772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e774:	68db      	ldr	r3, [r3, #12]
 800e776:	4619      	mov	r1, r3
 800e778:	4610      	mov	r0, r2
 800e77a:	f7ff fce8 	bl	800e14e <create_xdir>
		return FR_OK;
 800e77e:	2300      	movs	r3, #0
 800e780:	e0dc      	b.n	800e93c <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800e788:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e78c:	220c      	movs	r2, #12
 800e78e:	4618      	mov	r0, r3
 800e790:	f7fd ff11 	bl	800c5b6 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e794:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e798:	f003 0301 	and.w	r3, r3, #1
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d033      	beq.n	800e808 <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2240      	movs	r2, #64	; 0x40
 800e7a4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	67bb      	str	r3, [r7, #120]	; 0x78
 800e7ac:	e016      	b.n	800e7dc <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800e7b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7b6:	68da      	ldr	r2, [r3, #12]
 800e7b8:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800e7bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e7be:	f7ff fa61 	bl	800dc84 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f7ff fdf1 	bl	800e3aa <dir_find>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800e7ce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d106      	bne.n	800e7e4 <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 800e7d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e7d8:	3301      	adds	r3, #1
 800e7da:	67bb      	str	r3, [r7, #120]	; 0x78
 800e7dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e7de:	2b63      	cmp	r3, #99	; 0x63
 800e7e0:	d9e5      	bls.n	800e7ae <dir_register+0x1b2>
 800e7e2:	e000      	b.n	800e7e6 <dir_register+0x1ea>
			if (res != FR_OK) break;
 800e7e4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e7e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e7e8:	2b64      	cmp	r3, #100	; 0x64
 800e7ea:	d101      	bne.n	800e7f0 <dir_register+0x1f4>
 800e7ec:	2307      	movs	r3, #7
 800e7ee:	e0a5      	b.n	800e93c <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e7f0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e7f4:	2b04      	cmp	r3, #4
 800e7f6:	d002      	beq.n	800e7fe <dir_register+0x202>
 800e7f8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e7fc:	e09e      	b.n	800e93c <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e7fe:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e808:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e80c:	f003 0302 	and.w	r3, r3, #2
 800e810:	2b00      	cmp	r3, #0
 800e812:	d007      	beq.n	800e824 <dir_register+0x228>
 800e814:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e816:	330c      	adds	r3, #12
 800e818:	4a2f      	ldr	r2, [pc, #188]	; (800e8d8 <dir_register+0x2dc>)
 800e81a:	fba2 2303 	umull	r2, r3, r2, r3
 800e81e:	089b      	lsrs	r3, r3, #2
 800e820:	3301      	adds	r3, #1
 800e822:	e000      	b.n	800e826 <dir_register+0x22a>
 800e824:	2301      	movs	r3, #1
 800e826:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e828:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f7ff f852 	bl	800d8d4 <dir_alloc>
 800e830:	4603      	mov	r3, r0
 800e832:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e836:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d14f      	bne.n	800e8de <dir_register+0x2e2>
 800e83e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e840:	3b01      	subs	r3, #1
 800e842:	673b      	str	r3, [r7, #112]	; 0x70
 800e844:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e846:	2b00      	cmp	r3, #0
 800e848:	d049      	beq.n	800e8de <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e84e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e850:	015b      	lsls	r3, r3, #5
 800e852:	1ad3      	subs	r3, r2, r3
 800e854:	4619      	mov	r1, r3
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	f7fe fee1 	bl	800d61e <dir_sdi>
 800e85c:	4603      	mov	r3, r0
 800e85e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800e862:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e866:	2b00      	cmp	r3, #0
 800e868:	d139      	bne.n	800e8de <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	3340      	adds	r3, #64	; 0x40
 800e86e:	4618      	mov	r0, r3
 800e870:	f7ff fa96 	bl	800dda0 <sum_sfn>
 800e874:	4603      	mov	r3, r0
 800e876:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e87e:	4619      	mov	r1, r3
 800e880:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e882:	f7fe f8c7 	bl	800ca14 <move_window>
 800e886:	4603      	mov	r3, r0
 800e888:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800e88c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e890:	2b00      	cmp	r3, #0
 800e892:	d123      	bne.n	800e8dc <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e896:	68d8      	ldr	r0, [r3, #12]
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800e89c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e89e:	b2da      	uxtb	r2, r3
 800e8a0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e8a4:	f7ff f986 	bl	800dbb4 <put_lfn>
				fs->wflag = 1;
 800e8a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8aa:	2201      	movs	r2, #1
 800e8ac:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e8ae:	2100      	movs	r1, #0
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f7fe ff3a 	bl	800d72a <dir_next>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800e8bc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d10c      	bne.n	800e8de <dir_register+0x2e2>
 800e8c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e8c6:	3b01      	subs	r3, #1
 800e8c8:	673b      	str	r3, [r7, #112]	; 0x70
 800e8ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d1d4      	bne.n	800e87a <dir_register+0x27e>
 800e8d0:	e005      	b.n	800e8de <dir_register+0x2e2>
 800e8d2:	bf00      	nop
 800e8d4:	88888889 	.word	0x88888889
 800e8d8:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800e8dc:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e8de:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d128      	bne.n	800e938 <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8ea:	4619      	mov	r1, r3
 800e8ec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e8ee:	f7fe f891 	bl	800ca14 <move_window>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800e8f8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d11b      	bne.n	800e938 <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e904:	2220      	movs	r2, #32
 800e906:	2100      	movs	r1, #0
 800e908:	4618      	mov	r0, r3
 800e90a:	f7fd fe75 	bl	800c5f8 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	3340      	adds	r3, #64	; 0x40
 800e916:	220b      	movs	r2, #11
 800e918:	4619      	mov	r1, r3
 800e91a:	f7fd fe4c 	bl	800c5b6 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e928:	330c      	adds	r3, #12
 800e92a:	f002 0218 	and.w	r2, r2, #24
 800e92e:	b2d2      	uxtb	r2, r2
 800e930:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e934:	2201      	movs	r2, #1
 800e936:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e938:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	3780      	adds	r7, #128	; 0x80
 800e940:	46bd      	mov	sp, r7
 800e942:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800e946:	bf00      	nop

0800e948 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b08a      	sub	sp, #40	; 0x28
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	613b      	str	r3, [r7, #16]
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	68db      	ldr	r3, [r3, #12]
 800e95e:	60fb      	str	r3, [r7, #12]
 800e960:	2300      	movs	r3, #0
 800e962:	617b      	str	r3, [r7, #20]
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e968:	69bb      	ldr	r3, [r7, #24]
 800e96a:	1c5a      	adds	r2, r3, #1
 800e96c:	61ba      	str	r2, [r7, #24]
 800e96e:	693a      	ldr	r2, [r7, #16]
 800e970:	4413      	add	r3, r2
 800e972:	781b      	ldrb	r3, [r3, #0]
 800e974:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e976:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e978:	2b1f      	cmp	r3, #31
 800e97a:	d940      	bls.n	800e9fe <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e97c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e97e:	2b2f      	cmp	r3, #47	; 0x2f
 800e980:	d006      	beq.n	800e990 <create_name+0x48>
 800e982:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e984:	2b5c      	cmp	r3, #92	; 0x5c
 800e986:	d110      	bne.n	800e9aa <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e988:	e002      	b.n	800e990 <create_name+0x48>
 800e98a:	69bb      	ldr	r3, [r7, #24]
 800e98c:	3301      	adds	r3, #1
 800e98e:	61bb      	str	r3, [r7, #24]
 800e990:	693a      	ldr	r2, [r7, #16]
 800e992:	69bb      	ldr	r3, [r7, #24]
 800e994:	4413      	add	r3, r2
 800e996:	781b      	ldrb	r3, [r3, #0]
 800e998:	2b2f      	cmp	r3, #47	; 0x2f
 800e99a:	d0f6      	beq.n	800e98a <create_name+0x42>
 800e99c:	693a      	ldr	r2, [r7, #16]
 800e99e:	69bb      	ldr	r3, [r7, #24]
 800e9a0:	4413      	add	r3, r2
 800e9a2:	781b      	ldrb	r3, [r3, #0]
 800e9a4:	2b5c      	cmp	r3, #92	; 0x5c
 800e9a6:	d0f0      	beq.n	800e98a <create_name+0x42>
			break;
 800e9a8:	e02a      	b.n	800ea00 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	2bfe      	cmp	r3, #254	; 0xfe
 800e9ae:	d901      	bls.n	800e9b4 <create_name+0x6c>
 800e9b0:	2306      	movs	r3, #6
 800e9b2:	e17d      	b.n	800ecb0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e9b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9b6:	b2db      	uxtb	r3, r3
 800e9b8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e9ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9bc:	2101      	movs	r1, #1
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f002 f98c 	bl	8010cdc <ff_convert>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e9c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d101      	bne.n	800e9d2 <create_name+0x8a>
 800e9ce:	2306      	movs	r3, #6
 800e9d0:	e16e      	b.n	800ecb0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e9d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9d4:	2b7f      	cmp	r3, #127	; 0x7f
 800e9d6:	d809      	bhi.n	800e9ec <create_name+0xa4>
 800e9d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9da:	4619      	mov	r1, r3
 800e9dc:	488d      	ldr	r0, [pc, #564]	; (800ec14 <create_name+0x2cc>)
 800e9de:	f7fd fe4d 	bl	800c67c <chk_chr>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d001      	beq.n	800e9ec <create_name+0xa4>
 800e9e8:	2306      	movs	r3, #6
 800e9ea:	e161      	b.n	800ecb0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e9ec:	697b      	ldr	r3, [r7, #20]
 800e9ee:	1c5a      	adds	r2, r3, #1
 800e9f0:	617a      	str	r2, [r7, #20]
 800e9f2:	005b      	lsls	r3, r3, #1
 800e9f4:	68fa      	ldr	r2, [r7, #12]
 800e9f6:	4413      	add	r3, r2
 800e9f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e9fa:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e9fc:	e7b4      	b.n	800e968 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e9fe:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ea00:	693a      	ldr	r2, [r7, #16]
 800ea02:	69bb      	ldr	r3, [r7, #24]
 800ea04:	441a      	add	r2, r3
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ea0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea0c:	2b1f      	cmp	r3, #31
 800ea0e:	d801      	bhi.n	800ea14 <create_name+0xcc>
 800ea10:	2304      	movs	r3, #4
 800ea12:	e000      	b.n	800ea16 <create_name+0xce>
 800ea14:	2300      	movs	r3, #0
 800ea16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ea1a:	e011      	b.n	800ea40 <create_name+0xf8>
		w = lfn[di - 1];
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ea22:	3b01      	subs	r3, #1
 800ea24:	005b      	lsls	r3, r3, #1
 800ea26:	68fa      	ldr	r2, [r7, #12]
 800ea28:	4413      	add	r3, r2
 800ea2a:	881b      	ldrh	r3, [r3, #0]
 800ea2c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800ea2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea30:	2b20      	cmp	r3, #32
 800ea32:	d002      	beq.n	800ea3a <create_name+0xf2>
 800ea34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea36:	2b2e      	cmp	r3, #46	; 0x2e
 800ea38:	d106      	bne.n	800ea48 <create_name+0x100>
		di--;
 800ea3a:	697b      	ldr	r3, [r7, #20]
 800ea3c:	3b01      	subs	r3, #1
 800ea3e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d1ea      	bne.n	800ea1c <create_name+0xd4>
 800ea46:	e000      	b.n	800ea4a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ea48:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	005b      	lsls	r3, r3, #1
 800ea4e:	68fa      	ldr	r2, [r7, #12]
 800ea50:	4413      	add	r3, r2
 800ea52:	2200      	movs	r2, #0
 800ea54:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d101      	bne.n	800ea60 <create_name+0x118>
 800ea5c:	2306      	movs	r3, #6
 800ea5e:	e127      	b.n	800ecb0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	3340      	adds	r3, #64	; 0x40
 800ea64:	220b      	movs	r2, #11
 800ea66:	2120      	movs	r1, #32
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f7fd fdc5 	bl	800c5f8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ea6e:	2300      	movs	r3, #0
 800ea70:	61bb      	str	r3, [r7, #24]
 800ea72:	e002      	b.n	800ea7a <create_name+0x132>
 800ea74:	69bb      	ldr	r3, [r7, #24]
 800ea76:	3301      	adds	r3, #1
 800ea78:	61bb      	str	r3, [r7, #24]
 800ea7a:	69bb      	ldr	r3, [r7, #24]
 800ea7c:	005b      	lsls	r3, r3, #1
 800ea7e:	68fa      	ldr	r2, [r7, #12]
 800ea80:	4413      	add	r3, r2
 800ea82:	881b      	ldrh	r3, [r3, #0]
 800ea84:	2b20      	cmp	r3, #32
 800ea86:	d0f5      	beq.n	800ea74 <create_name+0x12c>
 800ea88:	69bb      	ldr	r3, [r7, #24]
 800ea8a:	005b      	lsls	r3, r3, #1
 800ea8c:	68fa      	ldr	r2, [r7, #12]
 800ea8e:	4413      	add	r3, r2
 800ea90:	881b      	ldrh	r3, [r3, #0]
 800ea92:	2b2e      	cmp	r3, #46	; 0x2e
 800ea94:	d0ee      	beq.n	800ea74 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ea96:	69bb      	ldr	r3, [r7, #24]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d009      	beq.n	800eab0 <create_name+0x168>
 800ea9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eaa0:	f043 0303 	orr.w	r3, r3, #3
 800eaa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800eaa8:	e002      	b.n	800eab0 <create_name+0x168>
 800eaaa:	697b      	ldr	r3, [r7, #20]
 800eaac:	3b01      	subs	r3, #1
 800eaae:	617b      	str	r3, [r7, #20]
 800eab0:	697b      	ldr	r3, [r7, #20]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d009      	beq.n	800eaca <create_name+0x182>
 800eab6:	697b      	ldr	r3, [r7, #20]
 800eab8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800eabc:	3b01      	subs	r3, #1
 800eabe:	005b      	lsls	r3, r3, #1
 800eac0:	68fa      	ldr	r2, [r7, #12]
 800eac2:	4413      	add	r3, r2
 800eac4:	881b      	ldrh	r3, [r3, #0]
 800eac6:	2b2e      	cmp	r3, #46	; 0x2e
 800eac8:	d1ef      	bne.n	800eaaa <create_name+0x162>

	i = b = 0; ni = 8;
 800eaca:	2300      	movs	r3, #0
 800eacc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ead0:	2300      	movs	r3, #0
 800ead2:	623b      	str	r3, [r7, #32]
 800ead4:	2308      	movs	r3, #8
 800ead6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ead8:	69bb      	ldr	r3, [r7, #24]
 800eada:	1c5a      	adds	r2, r3, #1
 800eadc:	61ba      	str	r2, [r7, #24]
 800eade:	005b      	lsls	r3, r3, #1
 800eae0:	68fa      	ldr	r2, [r7, #12]
 800eae2:	4413      	add	r3, r2
 800eae4:	881b      	ldrh	r3, [r3, #0]
 800eae6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800eae8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	f000 8090 	beq.w	800ec10 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800eaf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eaf2:	2b20      	cmp	r3, #32
 800eaf4:	d006      	beq.n	800eb04 <create_name+0x1bc>
 800eaf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eaf8:	2b2e      	cmp	r3, #46	; 0x2e
 800eafa:	d10a      	bne.n	800eb12 <create_name+0x1ca>
 800eafc:	69ba      	ldr	r2, [r7, #24]
 800eafe:	697b      	ldr	r3, [r7, #20]
 800eb00:	429a      	cmp	r2, r3
 800eb02:	d006      	beq.n	800eb12 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800eb04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb08:	f043 0303 	orr.w	r3, r3, #3
 800eb0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eb10:	e07d      	b.n	800ec0e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800eb12:	6a3a      	ldr	r2, [r7, #32]
 800eb14:	69fb      	ldr	r3, [r7, #28]
 800eb16:	429a      	cmp	r2, r3
 800eb18:	d203      	bcs.n	800eb22 <create_name+0x1da>
 800eb1a:	69ba      	ldr	r2, [r7, #24]
 800eb1c:	697b      	ldr	r3, [r7, #20]
 800eb1e:	429a      	cmp	r2, r3
 800eb20:	d123      	bne.n	800eb6a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800eb22:	69fb      	ldr	r3, [r7, #28]
 800eb24:	2b0b      	cmp	r3, #11
 800eb26:	d106      	bne.n	800eb36 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800eb28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb2c:	f043 0303 	orr.w	r3, r3, #3
 800eb30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eb34:	e075      	b.n	800ec22 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800eb36:	69ba      	ldr	r2, [r7, #24]
 800eb38:	697b      	ldr	r3, [r7, #20]
 800eb3a:	429a      	cmp	r2, r3
 800eb3c:	d005      	beq.n	800eb4a <create_name+0x202>
 800eb3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb42:	f043 0303 	orr.w	r3, r3, #3
 800eb46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800eb4a:	69ba      	ldr	r2, [r7, #24]
 800eb4c:	697b      	ldr	r3, [r7, #20]
 800eb4e:	429a      	cmp	r2, r3
 800eb50:	d866      	bhi.n	800ec20 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800eb52:	697b      	ldr	r3, [r7, #20]
 800eb54:	61bb      	str	r3, [r7, #24]
 800eb56:	2308      	movs	r3, #8
 800eb58:	623b      	str	r3, [r7, #32]
 800eb5a:	230b      	movs	r3, #11
 800eb5c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800eb5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eb62:	009b      	lsls	r3, r3, #2
 800eb64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800eb68:	e051      	b.n	800ec0e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800eb6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb6c:	2b7f      	cmp	r3, #127	; 0x7f
 800eb6e:	d914      	bls.n	800eb9a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800eb70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb72:	2100      	movs	r1, #0
 800eb74:	4618      	mov	r0, r3
 800eb76:	f002 f8b1 	bl	8010cdc <ff_convert>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800eb7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d004      	beq.n	800eb8e <create_name+0x246>
 800eb84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb86:	3b80      	subs	r3, #128	; 0x80
 800eb88:	4a23      	ldr	r2, [pc, #140]	; (800ec18 <create_name+0x2d0>)
 800eb8a:	5cd3      	ldrb	r3, [r2, r3]
 800eb8c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800eb8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb92:	f043 0302 	orr.w	r3, r3, #2
 800eb96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800eb9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d007      	beq.n	800ebb0 <create_name+0x268>
 800eba0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eba2:	4619      	mov	r1, r3
 800eba4:	481d      	ldr	r0, [pc, #116]	; (800ec1c <create_name+0x2d4>)
 800eba6:	f7fd fd69 	bl	800c67c <chk_chr>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d008      	beq.n	800ebc2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ebb0:	235f      	movs	r3, #95	; 0x5f
 800ebb2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ebb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ebb8:	f043 0303 	orr.w	r3, r3, #3
 800ebbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ebc0:	e01b      	b.n	800ebfa <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ebc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebc4:	2b40      	cmp	r3, #64	; 0x40
 800ebc6:	d909      	bls.n	800ebdc <create_name+0x294>
 800ebc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebca:	2b5a      	cmp	r3, #90	; 0x5a
 800ebcc:	d806      	bhi.n	800ebdc <create_name+0x294>
					b |= 2;
 800ebce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ebd2:	f043 0302 	orr.w	r3, r3, #2
 800ebd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ebda:	e00e      	b.n	800ebfa <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ebdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebde:	2b60      	cmp	r3, #96	; 0x60
 800ebe0:	d90b      	bls.n	800ebfa <create_name+0x2b2>
 800ebe2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebe4:	2b7a      	cmp	r3, #122	; 0x7a
 800ebe6:	d808      	bhi.n	800ebfa <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800ebe8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ebec:	f043 0301 	orr.w	r3, r3, #1
 800ebf0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ebf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebf6:	3b20      	subs	r3, #32
 800ebf8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ebfa:	6a3b      	ldr	r3, [r7, #32]
 800ebfc:	1c5a      	adds	r2, r3, #1
 800ebfe:	623a      	str	r2, [r7, #32]
 800ec00:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ec02:	b2d1      	uxtb	r1, r2
 800ec04:	687a      	ldr	r2, [r7, #4]
 800ec06:	4413      	add	r3, r2
 800ec08:	460a      	mov	r2, r1
 800ec0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800ec0e:	e763      	b.n	800ead8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800ec10:	bf00      	nop
 800ec12:	e006      	b.n	800ec22 <create_name+0x2da>
 800ec14:	08015470 	.word	0x08015470
 800ec18:	080154ec 	.word	0x080154ec
 800ec1c:	0801547c 	.word	0x0801547c
			if (si > di) break;			/* No extension */
 800ec20:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ec28:	2be5      	cmp	r3, #229	; 0xe5
 800ec2a:	d103      	bne.n	800ec34 <create_name+0x2ec>
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2205      	movs	r2, #5
 800ec30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800ec34:	69fb      	ldr	r3, [r7, #28]
 800ec36:	2b08      	cmp	r3, #8
 800ec38:	d104      	bne.n	800ec44 <create_name+0x2fc>
 800ec3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ec3e:	009b      	lsls	r3, r3, #2
 800ec40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ec44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ec48:	f003 030c 	and.w	r3, r3, #12
 800ec4c:	2b0c      	cmp	r3, #12
 800ec4e:	d005      	beq.n	800ec5c <create_name+0x314>
 800ec50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ec54:	f003 0303 	and.w	r3, r3, #3
 800ec58:	2b03      	cmp	r3, #3
 800ec5a:	d105      	bne.n	800ec68 <create_name+0x320>
 800ec5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec60:	f043 0302 	orr.w	r3, r3, #2
 800ec64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ec68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec6c:	f003 0302 	and.w	r3, r3, #2
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d117      	bne.n	800eca4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ec74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ec78:	f003 0303 	and.w	r3, r3, #3
 800ec7c:	2b01      	cmp	r3, #1
 800ec7e:	d105      	bne.n	800ec8c <create_name+0x344>
 800ec80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec84:	f043 0310 	orr.w	r3, r3, #16
 800ec88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ec8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ec90:	f003 030c 	and.w	r3, r3, #12
 800ec94:	2b04      	cmp	r3, #4
 800ec96:	d105      	bne.n	800eca4 <create_name+0x35c>
 800ec98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec9c:	f043 0308 	orr.w	r3, r3, #8
 800eca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ecaa:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800ecae:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	3728      	adds	r7, #40	; 0x28
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}

0800ecb8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b086      	sub	sp, #24
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
 800ecc0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ecc6:	693b      	ldr	r3, [r7, #16]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800eccc:	e002      	b.n	800ecd4 <follow_path+0x1c>
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	3301      	adds	r3, #1
 800ecd2:	603b      	str	r3, [r7, #0]
 800ecd4:	683b      	ldr	r3, [r7, #0]
 800ecd6:	781b      	ldrb	r3, [r3, #0]
 800ecd8:	2b2f      	cmp	r3, #47	; 0x2f
 800ecda:	d0f8      	beq.n	800ecce <follow_path+0x16>
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	781b      	ldrb	r3, [r3, #0]
 800ece0:	2b5c      	cmp	r3, #92	; 0x5c
 800ece2:	d0f4      	beq.n	800ecce <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ece4:	693b      	ldr	r3, [r7, #16]
 800ece6:	2200      	movs	r2, #0
 800ece8:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800ecea:	693b      	ldr	r3, [r7, #16]
 800ecec:	2200      	movs	r2, #0
 800ecee:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ecf0:	683b      	ldr	r3, [r7, #0]
 800ecf2:	781b      	ldrb	r3, [r3, #0]
 800ecf4:	2b1f      	cmp	r3, #31
 800ecf6:	d80a      	bhi.n	800ed0e <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2280      	movs	r2, #128	; 0x80
 800ecfc:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800ed00:	2100      	movs	r1, #0
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f7fe fc8b 	bl	800d61e <dir_sdi>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	75fb      	strb	r3, [r7, #23]
 800ed0c:	e078      	b.n	800ee00 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ed0e:	463b      	mov	r3, r7
 800ed10:	4619      	mov	r1, r3
 800ed12:	6878      	ldr	r0, [r7, #4]
 800ed14:	f7ff fe18 	bl	800e948 <create_name>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ed1c:	7dfb      	ldrb	r3, [r7, #23]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d169      	bne.n	800edf6 <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	f7ff fb41 	bl	800e3aa <dir_find>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800ed32:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ed34:	7dfb      	ldrb	r3, [r7, #23]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d00a      	beq.n	800ed50 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ed3a:	7dfb      	ldrb	r3, [r7, #23]
 800ed3c:	2b04      	cmp	r3, #4
 800ed3e:	d15c      	bne.n	800edfa <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ed40:	7afb      	ldrb	r3, [r7, #11]
 800ed42:	f003 0304 	and.w	r3, r3, #4
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d157      	bne.n	800edfa <follow_path+0x142>
 800ed4a:	2305      	movs	r3, #5
 800ed4c:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ed4e:	e054      	b.n	800edfa <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ed50:	7afb      	ldrb	r3, [r7, #11]
 800ed52:	f003 0304 	and.w	r3, r3, #4
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d151      	bne.n	800edfe <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ed5a:	693b      	ldr	r3, [r7, #16]
 800ed5c:	799b      	ldrb	r3, [r3, #6]
 800ed5e:	f003 0310 	and.w	r3, r3, #16
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d102      	bne.n	800ed6c <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800ed66:	2305      	movs	r3, #5
 800ed68:	75fb      	strb	r3, [r7, #23]
 800ed6a:	e049      	b.n	800ee00 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	781b      	ldrb	r3, [r3, #0]
 800ed70:	2b04      	cmp	r3, #4
 800ed72:	d130      	bne.n	800edd6 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	689a      	ldr	r2, [r3, #8]
 800ed78:	693b      	ldr	r3, [r7, #16]
 800ed7a:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800ed7c:	693b      	ldr	r3, [r7, #16]
 800ed7e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ed82:	4613      	mov	r3, r2
 800ed84:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ed88:	693a      	ldr	r2, [r7, #16]
 800ed8a:	79d2      	ldrb	r2, [r2, #7]
 800ed8c:	431a      	orrs	r2, r3
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	691b      	ldr	r3, [r3, #16]
 800ed9e:	3334      	adds	r3, #52	; 0x34
 800eda0:	4618      	mov	r0, r3
 800eda2:	f7fd fa3b 	bl	800c21c <ld_dword>
 800eda6:	4602      	mov	r2, r0
 800eda8:	693b      	ldr	r3, [r7, #16]
 800edaa:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	691b      	ldr	r3, [r3, #16]
 800edb0:	3321      	adds	r3, #33	; 0x21
 800edb2:	781b      	ldrb	r3, [r3, #0]
 800edb4:	f003 0302 	and.w	r3, r3, #2
 800edb8:	b2da      	uxtb	r2, r3
 800edba:	693b      	ldr	r3, [r7, #16]
 800edbc:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	691b      	ldr	r3, [r3, #16]
 800edc2:	3338      	adds	r3, #56	; 0x38
 800edc4:	4618      	mov	r0, r3
 800edc6:	f7fd fa4c 	bl	800c262 <ld_qword>
 800edca:	4602      	mov	r2, r0
 800edcc:	460b      	mov	r3, r1
 800edce:	6939      	ldr	r1, [r7, #16]
 800edd0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800edd4:	e79b      	b.n	800ed0e <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ede0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ede4:	4413      	add	r3, r2
 800ede6:	4619      	mov	r1, r3
 800ede8:	68f8      	ldr	r0, [r7, #12]
 800edea:	f7fe fdcf 	bl	800d98c <ld_clust>
 800edee:	4602      	mov	r2, r0
 800edf0:	693b      	ldr	r3, [r7, #16]
 800edf2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800edf4:	e78b      	b.n	800ed0e <follow_path+0x56>
			if (res != FR_OK) break;
 800edf6:	bf00      	nop
 800edf8:	e002      	b.n	800ee00 <follow_path+0x148>
				break;
 800edfa:	bf00      	nop
 800edfc:	e000      	b.n	800ee00 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800edfe:	bf00      	nop
			}
		}
	}

	return res;
 800ee00:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee02:	4618      	mov	r0, r3
 800ee04:	3718      	adds	r7, #24
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bd80      	pop	{r7, pc}

0800ee0a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ee0a:	b480      	push	{r7}
 800ee0c:	b087      	sub	sp, #28
 800ee0e:	af00      	add	r7, sp, #0
 800ee10:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ee12:	f04f 33ff 	mov.w	r3, #4294967295
 800ee16:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d031      	beq.n	800ee84 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	617b      	str	r3, [r7, #20]
 800ee26:	e002      	b.n	800ee2e <get_ldnumber+0x24>
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	3301      	adds	r3, #1
 800ee2c:	617b      	str	r3, [r7, #20]
 800ee2e:	697b      	ldr	r3, [r7, #20]
 800ee30:	781b      	ldrb	r3, [r3, #0]
 800ee32:	2b1f      	cmp	r3, #31
 800ee34:	d903      	bls.n	800ee3e <get_ldnumber+0x34>
 800ee36:	697b      	ldr	r3, [r7, #20]
 800ee38:	781b      	ldrb	r3, [r3, #0]
 800ee3a:	2b3a      	cmp	r3, #58	; 0x3a
 800ee3c:	d1f4      	bne.n	800ee28 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ee3e:	697b      	ldr	r3, [r7, #20]
 800ee40:	781b      	ldrb	r3, [r3, #0]
 800ee42:	2b3a      	cmp	r3, #58	; 0x3a
 800ee44:	d11c      	bne.n	800ee80 <get_ldnumber+0x76>
			tp = *path;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	1c5a      	adds	r2, r3, #1
 800ee50:	60fa      	str	r2, [r7, #12]
 800ee52:	781b      	ldrb	r3, [r3, #0]
 800ee54:	3b30      	subs	r3, #48	; 0x30
 800ee56:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	2b09      	cmp	r3, #9
 800ee5c:	d80e      	bhi.n	800ee7c <get_ldnumber+0x72>
 800ee5e:	68fa      	ldr	r2, [r7, #12]
 800ee60:	697b      	ldr	r3, [r7, #20]
 800ee62:	429a      	cmp	r2, r3
 800ee64:	d10a      	bne.n	800ee7c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ee66:	68bb      	ldr	r3, [r7, #8]
 800ee68:	2b03      	cmp	r3, #3
 800ee6a:	d807      	bhi.n	800ee7c <get_ldnumber+0x72>
					vol = (int)i;
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	3301      	adds	r3, #1
 800ee74:	617b      	str	r3, [r7, #20]
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	697a      	ldr	r2, [r7, #20]
 800ee7a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ee7c:	693b      	ldr	r3, [r7, #16]
 800ee7e:	e002      	b.n	800ee86 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ee80:	2300      	movs	r3, #0
 800ee82:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ee84:	693b      	ldr	r3, [r7, #16]
}
 800ee86:	4618      	mov	r0, r3
 800ee88:	371c      	adds	r7, #28
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee90:	4770      	bx	lr
	...

0800ee94 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b082      	sub	sp, #8
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
 800ee9c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	2200      	movs	r2, #0
 800eea2:	70da      	strb	r2, [r3, #3]
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f04f 32ff 	mov.w	r2, #4294967295
 800eeaa:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800eeac:	6839      	ldr	r1, [r7, #0]
 800eeae:	6878      	ldr	r0, [r7, #4]
 800eeb0:	f7fd fdb0 	bl	800ca14 <move_window>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d001      	beq.n	800eebe <check_fs+0x2a>
 800eeba:	2304      	movs	r3, #4
 800eebc:	e044      	b.n	800ef48 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	3338      	adds	r3, #56	; 0x38
 800eec2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800eec6:	4618      	mov	r0, r3
 800eec8:	f7fd f990 	bl	800c1ec <ld_word>
 800eecc:	4603      	mov	r3, r0
 800eece:	461a      	mov	r2, r3
 800eed0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800eed4:	429a      	cmp	r2, r3
 800eed6:	d001      	beq.n	800eedc <check_fs+0x48>
 800eed8:	2303      	movs	r3, #3
 800eeda:	e035      	b.n	800ef48 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800eee2:	2be9      	cmp	r3, #233	; 0xe9
 800eee4:	d009      	beq.n	800eefa <check_fs+0x66>
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800eeec:	2beb      	cmp	r3, #235	; 0xeb
 800eeee:	d11e      	bne.n	800ef2e <check_fs+0x9a>
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800eef6:	2b90      	cmp	r3, #144	; 0x90
 800eef8:	d119      	bne.n	800ef2e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	3338      	adds	r3, #56	; 0x38
 800eefe:	3336      	adds	r3, #54	; 0x36
 800ef00:	4618      	mov	r0, r3
 800ef02:	f7fd f98b 	bl	800c21c <ld_dword>
 800ef06:	4603      	mov	r3, r0
 800ef08:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ef0c:	4a10      	ldr	r2, [pc, #64]	; (800ef50 <check_fs+0xbc>)
 800ef0e:	4293      	cmp	r3, r2
 800ef10:	d101      	bne.n	800ef16 <check_fs+0x82>
 800ef12:	2300      	movs	r3, #0
 800ef14:	e018      	b.n	800ef48 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	3338      	adds	r3, #56	; 0x38
 800ef1a:	3352      	adds	r3, #82	; 0x52
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f7fd f97d 	bl	800c21c <ld_dword>
 800ef22:	4603      	mov	r3, r0
 800ef24:	4a0b      	ldr	r2, [pc, #44]	; (800ef54 <check_fs+0xc0>)
 800ef26:	4293      	cmp	r3, r2
 800ef28:	d101      	bne.n	800ef2e <check_fs+0x9a>
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	e00c      	b.n	800ef48 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	3338      	adds	r3, #56	; 0x38
 800ef32:	220b      	movs	r2, #11
 800ef34:	4908      	ldr	r1, [pc, #32]	; (800ef58 <check_fs+0xc4>)
 800ef36:	4618      	mov	r0, r3
 800ef38:	f7fd fb79 	bl	800c62e <mem_cmp>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d101      	bne.n	800ef46 <check_fs+0xb2>
 800ef42:	2301      	movs	r3, #1
 800ef44:	e000      	b.n	800ef48 <check_fs+0xb4>
#endif
	return 2;
 800ef46:	2302      	movs	r3, #2
}
 800ef48:	4618      	mov	r0, r3
 800ef4a:	3708      	adds	r7, #8
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd80      	pop	{r7, pc}
 800ef50:	00544146 	.word	0x00544146
 800ef54:	33544146 	.word	0x33544146
 800ef58:	08015484 	.word	0x08015484

0800ef5c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ef5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ef60:	b09c      	sub	sp, #112	; 0x70
 800ef62:	af00      	add	r7, sp, #0
 800ef64:	61f8      	str	r0, [r7, #28]
 800ef66:	61b9      	str	r1, [r7, #24]
 800ef68:	4613      	mov	r3, r2
 800ef6a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ef6c:	69bb      	ldr	r3, [r7, #24]
 800ef6e:	2200      	movs	r2, #0
 800ef70:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ef72:	69f8      	ldr	r0, [r7, #28]
 800ef74:	f7ff ff49 	bl	800ee0a <get_ldnumber>
 800ef78:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800ef7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	da01      	bge.n	800ef84 <find_volume+0x28>
 800ef80:	230b      	movs	r3, #11
 800ef82:	e337      	b.n	800f5f4 <find_volume+0x698>


	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ef84:	4a99      	ldr	r2, [pc, #612]	; (800f1ec <find_volume+0x290>)
 800ef86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef8c:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ef8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d101      	bne.n	800ef98 <find_volume+0x3c>
 800ef94:	230c      	movs	r3, #12
 800ef96:	e32d      	b.n	800f5f4 <find_volume+0x698>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ef98:	69bb      	ldr	r3, [r7, #24]
 800ef9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ef9c:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ef9e:	7dfb      	ldrb	r3, [r7, #23]
 800efa0:	f023 0301 	bic.w	r3, r3, #1
 800efa4:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800efa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efa8:	781b      	ldrb	r3, [r3, #0]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d01a      	beq.n	800efe4 <find_volume+0x88>

		stat = disk_status(fs->drv);
 800efae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efb0:	785b      	ldrb	r3, [r3, #1]
 800efb2:	4618      	mov	r0, r3
 800efb4:	f7fd f87c 	bl	800c0b0 <disk_status>
 800efb8:	4603      	mov	r3, r0
 800efba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800efbe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800efc2:	f003 0301 	and.w	r3, r3, #1
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d10c      	bne.n	800efe4 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800efca:	7dfb      	ldrb	r3, [r7, #23]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d007      	beq.n	800efe0 <find_volume+0x84>
 800efd0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800efd4:	f003 0304 	and.w	r3, r3, #4
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d001      	beq.n	800efe0 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800efdc:	230a      	movs	r3, #10
 800efde:	e309      	b.n	800f5f4 <find_volume+0x698>
			}
			return FR_OK;				/* The file system object is valid */
 800efe0:	2300      	movs	r3, #0
 800efe2:	e307      	b.n	800f5f4 <find_volume+0x698>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800efe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efe6:	2200      	movs	r2, #0
 800efe8:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800efea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efec:	b2da      	uxtb	r2, r3
 800efee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eff0:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800eff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eff4:	785b      	ldrb	r3, [r3, #1]
 800eff6:	4618      	mov	r0, r3
 800eff8:	f7fd f874 	bl	800c0e4 <disk_initialize>
 800effc:	4603      	mov	r3, r0
 800effe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f002:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f006:	f003 0301 	and.w	r3, r3, #1
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d001      	beq.n	800f012 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f00e:	2303      	movs	r3, #3
 800f010:	e2f0      	b.n	800f5f4 <find_volume+0x698>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f012:	7dfb      	ldrb	r3, [r7, #23]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d007      	beq.n	800f028 <find_volume+0xcc>
 800f018:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f01c:	f003 0304 	and.w	r3, r3, #4
 800f020:	2b00      	cmp	r3, #0
 800f022:	d001      	beq.n	800f028 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800f024:	230a      	movs	r3, #10
 800f026:	e2e5      	b.n	800f5f4 <find_volume+0x698>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f028:	2300      	movs	r3, #0
 800f02a:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f02c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f02e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f030:	f7ff ff30 	bl	800ee94 <check_fs>
 800f034:	4603      	mov	r3, r0
 800f036:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f03a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f03e:	2b02      	cmp	r3, #2
 800f040:	d14d      	bne.n	800f0de <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f042:	2300      	movs	r3, #0
 800f044:	65bb      	str	r3, [r7, #88]	; 0x58
 800f046:	e020      	b.n	800f08a <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f04a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f04e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f050:	011b      	lsls	r3, r3, #4
 800f052:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f056:	4413      	add	r3, r2
 800f058:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f05a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f05c:	3304      	adds	r3, #4
 800f05e:	781b      	ldrb	r3, [r3, #0]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d006      	beq.n	800f072 <find_volume+0x116>
 800f064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f066:	3308      	adds	r3, #8
 800f068:	4618      	mov	r0, r3
 800f06a:	f7fd f8d7 	bl	800c21c <ld_dword>
 800f06e:	4602      	mov	r2, r0
 800f070:	e000      	b.n	800f074 <find_volume+0x118>
 800f072:	2200      	movs	r2, #0
 800f074:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f076:	009b      	lsls	r3, r3, #2
 800f078:	3360      	adds	r3, #96	; 0x60
 800f07a:	f107 0110 	add.w	r1, r7, #16
 800f07e:	440b      	add	r3, r1
 800f080:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f084:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f086:	3301      	adds	r3, #1
 800f088:	65bb      	str	r3, [r7, #88]	; 0x58
 800f08a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f08c:	2b03      	cmp	r3, #3
 800f08e:	d9db      	bls.n	800f048 <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f090:	2300      	movs	r3, #0
 800f092:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 800f094:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f096:	2b00      	cmp	r3, #0
 800f098:	d002      	beq.n	800f0a0 <find_volume+0x144>
 800f09a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f09c:	3b01      	subs	r3, #1
 800f09e:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f0a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0a2:	009b      	lsls	r3, r3, #2
 800f0a4:	3360      	adds	r3, #96	; 0x60
 800f0a6:	f107 0210 	add.w	r2, r7, #16
 800f0aa:	4413      	add	r3, r2
 800f0ac:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800f0b0:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f0b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d005      	beq.n	800f0c4 <find_volume+0x168>
 800f0b8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f0ba:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f0bc:	f7ff feea 	bl	800ee94 <check_fs>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	e000      	b.n	800f0c6 <find_volume+0x16a>
 800f0c4:	2303      	movs	r3, #3
 800f0c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f0ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f0ce:	2b01      	cmp	r3, #1
 800f0d0:	d905      	bls.n	800f0de <find_volume+0x182>
 800f0d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0d4:	3301      	adds	r3, #1
 800f0d6:	65bb      	str	r3, [r7, #88]	; 0x58
 800f0d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0da:	2b03      	cmp	r3, #3
 800f0dc:	d9e0      	bls.n	800f0a0 <find_volume+0x144>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f0de:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f0e2:	2b04      	cmp	r3, #4
 800f0e4:	d101      	bne.n	800f0ea <find_volume+0x18e>
 800f0e6:	2301      	movs	r3, #1
 800f0e8:	e284      	b.n	800f5f4 <find_volume+0x698>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f0ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f0ee:	2b01      	cmp	r3, #1
 800f0f0:	d901      	bls.n	800f0f6 <find_volume+0x19a>
 800f0f2:	230d      	movs	r3, #13
 800f0f4:	e27e      	b.n	800f5f4 <find_volume+0x698>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800f0f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f0fa:	2b01      	cmp	r3, #1
 800f0fc:	f040 80fa 	bne.w	800f2f4 <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800f100:	230b      	movs	r3, #11
 800f102:	65bb      	str	r3, [r7, #88]	; 0x58
 800f104:	e002      	b.n	800f10c <find_volume+0x1b0>
 800f106:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f108:	3301      	adds	r3, #1
 800f10a:	65bb      	str	r3, [r7, #88]	; 0x58
 800f10c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f10e:	2b3f      	cmp	r3, #63	; 0x3f
 800f110:	d806      	bhi.n	800f120 <find_volume+0x1c4>
 800f112:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f114:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f116:	4413      	add	r3, r2
 800f118:	3338      	adds	r3, #56	; 0x38
 800f11a:	781b      	ldrb	r3, [r3, #0]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d0f2      	beq.n	800f106 <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800f120:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f122:	2b3f      	cmp	r3, #63	; 0x3f
 800f124:	d801      	bhi.n	800f12a <find_volume+0x1ce>
 800f126:	230d      	movs	r3, #13
 800f128:	e264      	b.n	800f5f4 <find_volume+0x698>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800f12a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f12c:	3338      	adds	r3, #56	; 0x38
 800f12e:	3368      	adds	r3, #104	; 0x68
 800f130:	4618      	mov	r0, r3
 800f132:	f7fd f85b 	bl	800c1ec <ld_word>
 800f136:	4603      	mov	r3, r0
 800f138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f13c:	d001      	beq.n	800f142 <find_volume+0x1e6>
 800f13e:	230d      	movs	r3, #13
 800f140:	e258      	b.n	800f5f4 <find_volume+0x698>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800f142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f144:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800f148:	2b09      	cmp	r3, #9
 800f14a:	d001      	beq.n	800f150 <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 800f14c:	230d      	movs	r3, #13
 800f14e:	e251      	b.n	800f5f4 <find_volume+0x698>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800f150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f152:	3338      	adds	r3, #56	; 0x38
 800f154:	3348      	adds	r3, #72	; 0x48
 800f156:	4618      	mov	r0, r3
 800f158:	f7fd f883 	bl	800c262 <ld_qword>
 800f15c:	4602      	mov	r2, r0
 800f15e:	460b      	mov	r3, r1
 800f160:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f162:	2000      	movs	r0, #0
 800f164:	60b9      	str	r1, [r7, #8]
 800f166:	60f8      	str	r0, [r7, #12]
 800f168:	68b9      	ldr	r1, [r7, #8]
 800f16a:	1851      	adds	r1, r2, r1
 800f16c:	6039      	str	r1, [r7, #0]
 800f16e:	68f9      	ldr	r1, [r7, #12]
 800f170:	eb43 0101 	adc.w	r1, r3, r1
 800f174:	6079      	str	r1, [r7, #4]
 800f176:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f17a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800f17e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f182:	2b01      	cmp	r3, #1
 800f184:	d301      	bcc.n	800f18a <find_volume+0x22e>
 800f186:	230d      	movs	r3, #13
 800f188:	e234      	b.n	800f5f4 <find_volume+0x698>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800f18a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f18c:	3338      	adds	r3, #56	; 0x38
 800f18e:	3354      	adds	r3, #84	; 0x54
 800f190:	4618      	mov	r0, r3
 800f192:	f7fd f843 	bl	800c21c <ld_dword>
 800f196:	4602      	mov	r2, r0
 800f198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f19a:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800f19c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f19e:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 800f1a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1a4:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800f1a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1a8:	789b      	ldrb	r3, [r3, #2]
 800f1aa:	2b01      	cmp	r3, #1
 800f1ac:	d001      	beq.n	800f1b2 <find_volume+0x256>
 800f1ae:	230d      	movs	r3, #13
 800f1b0:	e220      	b.n	800f5f4 <find_volume+0x698>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800f1b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1b4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800f1b8:	461a      	mov	r2, r3
 800f1ba:	2301      	movs	r3, #1
 800f1bc:	4093      	lsls	r3, r2
 800f1be:	b29a      	uxth	r2, r3
 800f1c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1c2:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800f1c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1c6:	895b      	ldrh	r3, [r3, #10]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d101      	bne.n	800f1d0 <find_volume+0x274>
 800f1cc:	230d      	movs	r3, #13
 800f1ce:	e211      	b.n	800f5f4 <find_volume+0x698>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800f1d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1d2:	3338      	adds	r3, #56	; 0x38
 800f1d4:	335c      	adds	r3, #92	; 0x5c
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f7fd f820 	bl	800c21c <ld_dword>
 800f1dc:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800f1de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1e0:	4a03      	ldr	r2, [pc, #12]	; (800f1f0 <find_volume+0x294>)
 800f1e2:	4293      	cmp	r3, r2
 800f1e4:	d906      	bls.n	800f1f4 <find_volume+0x298>
 800f1e6:	230d      	movs	r3, #13
 800f1e8:	e204      	b.n	800f5f4 <find_volume+0x698>
 800f1ea:	bf00      	nop
 800f1ec:	20001d08 	.word	0x20001d08
 800f1f0:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800f1f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1f6:	1c9a      	adds	r2, r3, #2
 800f1f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1fa:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800f1fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f200:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800f202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f204:	3338      	adds	r3, #56	; 0x38
 800f206:	3358      	adds	r3, #88	; 0x58
 800f208:	4618      	mov	r0, r3
 800f20a:	f7fd f807 	bl	800c21c <ld_dword>
 800f20e:	4602      	mov	r2, r0
 800f210:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f212:	441a      	add	r2, r3
 800f214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f216:	631a      	str	r2, [r3, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800f218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f21a:	3338      	adds	r3, #56	; 0x38
 800f21c:	3350      	adds	r3, #80	; 0x50
 800f21e:	4618      	mov	r0, r3
 800f220:	f7fc fffc 	bl	800c21c <ld_dword>
 800f224:	4602      	mov	r2, r0
 800f226:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f228:	441a      	add	r2, r3
 800f22a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f22c:	629a      	str	r2, [r3, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800f22e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f232:	2200      	movs	r2, #0
 800f234:	469a      	mov	sl, r3
 800f236:	4693      	mov	fp, r2
 800f238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f23a:	895b      	ldrh	r3, [r3, #10]
 800f23c:	461a      	mov	r2, r3
 800f23e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f240:	fb02 f303 	mul.w	r3, r2, r3
 800f244:	2200      	movs	r2, #0
 800f246:	4698      	mov	r8, r3
 800f248:	4691      	mov	r9, r2
 800f24a:	eb1a 0408 	adds.w	r4, sl, r8
 800f24e:	eb4b 0509 	adc.w	r5, fp, r9
 800f252:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f256:	42a2      	cmp	r2, r4
 800f258:	41ab      	sbcs	r3, r5
 800f25a:	d201      	bcs.n	800f260 <find_volume+0x304>
 800f25c:	230d      	movs	r3, #13
 800f25e:	e1c9      	b.n	800f5f4 <find_volume+0x698>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800f260:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f262:	3338      	adds	r3, #56	; 0x38
 800f264:	3360      	adds	r3, #96	; 0x60
 800f266:	4618      	mov	r0, r3
 800f268:	f7fc ffd8 	bl	800c21c <ld_dword>
 800f26c:	4602      	mov	r2, r0
 800f26e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f270:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800f272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f276:	4619      	mov	r1, r3
 800f278:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f27a:	f7fd fc67 	bl	800cb4c <clust2sect>
 800f27e:	4603      	mov	r3, r0
 800f280:	4619      	mov	r1, r3
 800f282:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f284:	f7fd fbc6 	bl	800ca14 <move_window>
 800f288:	4603      	mov	r3, r0
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d001      	beq.n	800f292 <find_volume+0x336>
 800f28e:	2301      	movs	r3, #1
 800f290:	e1b0      	b.n	800f5f4 <find_volume+0x698>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800f292:	2300      	movs	r3, #0
 800f294:	65bb      	str	r3, [r7, #88]	; 0x58
 800f296:	e015      	b.n	800f2c4 <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800f298:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f29a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f29c:	4413      	add	r3, r2
 800f29e:	3338      	adds	r3, #56	; 0x38
 800f2a0:	781b      	ldrb	r3, [r3, #0]
 800f2a2:	2b81      	cmp	r3, #129	; 0x81
 800f2a4:	d10b      	bne.n	800f2be <find_volume+0x362>
 800f2a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2a8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f2ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f2ae:	3314      	adds	r3, #20
 800f2b0:	4413      	add	r3, r2
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f7fc ffb2 	bl	800c21c <ld_dword>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	2b02      	cmp	r3, #2
 800f2bc:	d007      	beq.n	800f2ce <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800f2be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f2c0:	3320      	adds	r3, #32
 800f2c2:	65bb      	str	r3, [r7, #88]	; 0x58
 800f2c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f2c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f2ca:	d3e5      	bcc.n	800f298 <find_volume+0x33c>
 800f2cc:	e000      	b.n	800f2d0 <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800f2ce:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800f2d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f2d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f2d6:	d101      	bne.n	800f2dc <find_volume+0x380>
 800f2d8:	230d      	movs	r3, #13
 800f2da:	e18b      	b.n	800f5f4 <find_volume+0x698>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f2dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2de:	f04f 32ff 	mov.w	r2, #4294967295
 800f2e2:	619a      	str	r2, [r3, #24]
 800f2e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2e6:	699a      	ldr	r2, [r3, #24]
 800f2e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2ea:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800f2ec:	2304      	movs	r3, #4
 800f2ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800f2f2:	e167      	b.n	800f5c4 <find_volume+0x668>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f2f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2f6:	3338      	adds	r3, #56	; 0x38
 800f2f8:	330b      	adds	r3, #11
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f7fc ff76 	bl	800c1ec <ld_word>
 800f300:	4603      	mov	r3, r0
 800f302:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f306:	d001      	beq.n	800f30c <find_volume+0x3b0>
 800f308:	230d      	movs	r3, #13
 800f30a:	e173      	b.n	800f5f4 <find_volume+0x698>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f30c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f30e:	3338      	adds	r3, #56	; 0x38
 800f310:	3316      	adds	r3, #22
 800f312:	4618      	mov	r0, r3
 800f314:	f7fc ff6a 	bl	800c1ec <ld_word>
 800f318:	4603      	mov	r3, r0
 800f31a:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f31c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d106      	bne.n	800f330 <find_volume+0x3d4>
 800f322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f324:	3338      	adds	r3, #56	; 0x38
 800f326:	3324      	adds	r3, #36	; 0x24
 800f328:	4618      	mov	r0, r3
 800f32a:	f7fc ff77 	bl	800c21c <ld_dword>
 800f32e:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 800f330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f332:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f334:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f338:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f33c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f33e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f342:	789b      	ldrb	r3, [r3, #2]
 800f344:	2b01      	cmp	r3, #1
 800f346:	d005      	beq.n	800f354 <find_volume+0x3f8>
 800f348:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f34a:	789b      	ldrb	r3, [r3, #2]
 800f34c:	2b02      	cmp	r3, #2
 800f34e:	d001      	beq.n	800f354 <find_volume+0x3f8>
 800f350:	230d      	movs	r3, #13
 800f352:	e14f      	b.n	800f5f4 <find_volume+0x698>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f356:	789b      	ldrb	r3, [r3, #2]
 800f358:	461a      	mov	r2, r3
 800f35a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f35c:	fb02 f303 	mul.w	r3, r2, r3
 800f360:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f364:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f368:	b29a      	uxth	r2, r3
 800f36a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f36c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f36e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f370:	895b      	ldrh	r3, [r3, #10]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d008      	beq.n	800f388 <find_volume+0x42c>
 800f376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f378:	895b      	ldrh	r3, [r3, #10]
 800f37a:	461a      	mov	r2, r3
 800f37c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f37e:	895b      	ldrh	r3, [r3, #10]
 800f380:	3b01      	subs	r3, #1
 800f382:	4013      	ands	r3, r2
 800f384:	2b00      	cmp	r3, #0
 800f386:	d001      	beq.n	800f38c <find_volume+0x430>
 800f388:	230d      	movs	r3, #13
 800f38a:	e133      	b.n	800f5f4 <find_volume+0x698>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f38c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f38e:	3338      	adds	r3, #56	; 0x38
 800f390:	3311      	adds	r3, #17
 800f392:	4618      	mov	r0, r3
 800f394:	f7fc ff2a 	bl	800c1ec <ld_word>
 800f398:	4603      	mov	r3, r0
 800f39a:	461a      	mov	r2, r3
 800f39c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f39e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f3a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3a2:	891b      	ldrh	r3, [r3, #8]
 800f3a4:	f003 030f 	and.w	r3, r3, #15
 800f3a8:	b29b      	uxth	r3, r3
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d001      	beq.n	800f3b2 <find_volume+0x456>
 800f3ae:	230d      	movs	r3, #13
 800f3b0:	e120      	b.n	800f5f4 <find_volume+0x698>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f3b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3b4:	3338      	adds	r3, #56	; 0x38
 800f3b6:	3313      	adds	r3, #19
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f7fc ff17 	bl	800c1ec <ld_word>
 800f3be:	4603      	mov	r3, r0
 800f3c0:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f3c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d106      	bne.n	800f3d6 <find_volume+0x47a>
 800f3c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3ca:	3338      	adds	r3, #56	; 0x38
 800f3cc:	3320      	adds	r3, #32
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	f7fc ff24 	bl	800c21c <ld_dword>
 800f3d4:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f3d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3d8:	3338      	adds	r3, #56	; 0x38
 800f3da:	330e      	adds	r3, #14
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f7fc ff05 	bl	800c1ec <ld_word>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f3e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d101      	bne.n	800f3f4 <find_volume+0x498>
 800f3f0:	230d      	movs	r3, #13
 800f3f2:	e0ff      	b.n	800f5f4 <find_volume+0x698>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f3f4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f3f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f3fa:	4413      	add	r3, r2
 800f3fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f3fe:	8912      	ldrh	r2, [r2, #8]
 800f400:	0912      	lsrs	r2, r2, #4
 800f402:	b292      	uxth	r2, r2
 800f404:	4413      	add	r3, r2
 800f406:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f408:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f40a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f40c:	429a      	cmp	r2, r3
 800f40e:	d201      	bcs.n	800f414 <find_volume+0x4b8>
 800f410:	230d      	movs	r3, #13
 800f412:	e0ef      	b.n	800f5f4 <find_volume+0x698>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f414:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f418:	1ad3      	subs	r3, r2, r3
 800f41a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f41c:	8952      	ldrh	r2, [r2, #10]
 800f41e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f422:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f426:	2b00      	cmp	r3, #0
 800f428:	d101      	bne.n	800f42e <find_volume+0x4d2>
 800f42a:	230d      	movs	r3, #13
 800f42c:	e0e2      	b.n	800f5f4 <find_volume+0x698>
		fmt = FS_FAT32;
 800f42e:	2303      	movs	r3, #3
 800f430:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f436:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f43a:	4293      	cmp	r3, r2
 800f43c:	d802      	bhi.n	800f444 <find_volume+0x4e8>
 800f43e:	2302      	movs	r3, #2
 800f440:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f446:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f44a:	4293      	cmp	r3, r2
 800f44c:	d802      	bhi.n	800f454 <find_volume+0x4f8>
 800f44e:	2301      	movs	r3, #1
 800f450:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f456:	1c9a      	adds	r2, r3, #2
 800f458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f45a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800f45c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f45e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f460:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f462:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f466:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f468:	441a      	add	r2, r3
 800f46a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f46c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800f46e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f472:	441a      	add	r2, r3
 800f474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f476:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800f478:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f47c:	2b03      	cmp	r3, #3
 800f47e:	d11e      	bne.n	800f4be <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f482:	3338      	adds	r3, #56	; 0x38
 800f484:	332a      	adds	r3, #42	; 0x2a
 800f486:	4618      	mov	r0, r3
 800f488:	f7fc feb0 	bl	800c1ec <ld_word>
 800f48c:	4603      	mov	r3, r0
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d001      	beq.n	800f496 <find_volume+0x53a>
 800f492:	230d      	movs	r3, #13
 800f494:	e0ae      	b.n	800f5f4 <find_volume+0x698>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f498:	891b      	ldrh	r3, [r3, #8]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d001      	beq.n	800f4a2 <find_volume+0x546>
 800f49e:	230d      	movs	r3, #13
 800f4a0:	e0a8      	b.n	800f5f4 <find_volume+0x698>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f4a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4a4:	3338      	adds	r3, #56	; 0x38
 800f4a6:	332c      	adds	r3, #44	; 0x2c
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	f7fc feb7 	bl	800c21c <ld_dword>
 800f4ae:	4602      	mov	r2, r0
 800f4b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4b2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f4b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4b6:	69db      	ldr	r3, [r3, #28]
 800f4b8:	009b      	lsls	r3, r3, #2
 800f4ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f4bc:	e01f      	b.n	800f4fe <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f4be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4c0:	891b      	ldrh	r3, [r3, #8]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d101      	bne.n	800f4ca <find_volume+0x56e>
 800f4c6:	230d      	movs	r3, #13
 800f4c8:	e094      	b.n	800f5f4 <find_volume+0x698>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f4ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f4ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f4d0:	441a      	add	r2, r3
 800f4d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4d4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f4d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f4da:	2b02      	cmp	r3, #2
 800f4dc:	d103      	bne.n	800f4e6 <find_volume+0x58a>
 800f4de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4e0:	69db      	ldr	r3, [r3, #28]
 800f4e2:	005b      	lsls	r3, r3, #1
 800f4e4:	e00a      	b.n	800f4fc <find_volume+0x5a0>
 800f4e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4e8:	69da      	ldr	r2, [r3, #28]
 800f4ea:	4613      	mov	r3, r2
 800f4ec:	005b      	lsls	r3, r3, #1
 800f4ee:	4413      	add	r3, r2
 800f4f0:	085a      	lsrs	r2, r3, #1
 800f4f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4f4:	69db      	ldr	r3, [r3, #28]
 800f4f6:	f003 0301 	and.w	r3, r3, #1
 800f4fa:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f4fc:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f4fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f500:	6a1a      	ldr	r2, [r3, #32]
 800f502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f504:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800f508:	0a5b      	lsrs	r3, r3, #9
 800f50a:	429a      	cmp	r2, r3
 800f50c:	d201      	bcs.n	800f512 <find_volume+0x5b6>
 800f50e:	230d      	movs	r3, #13
 800f510:	e070      	b.n	800f5f4 <find_volume+0x698>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f514:	f04f 32ff 	mov.w	r2, #4294967295
 800f518:	619a      	str	r2, [r3, #24]
 800f51a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f51c:	699a      	ldr	r2, [r3, #24]
 800f51e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f520:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800f522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f524:	2280      	movs	r2, #128	; 0x80
 800f526:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f528:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f52c:	2b03      	cmp	r3, #3
 800f52e:	d149      	bne.n	800f5c4 <find_volume+0x668>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f532:	3338      	adds	r3, #56	; 0x38
 800f534:	3330      	adds	r3, #48	; 0x30
 800f536:	4618      	mov	r0, r3
 800f538:	f7fc fe58 	bl	800c1ec <ld_word>
 800f53c:	4603      	mov	r3, r0
 800f53e:	2b01      	cmp	r3, #1
 800f540:	d140      	bne.n	800f5c4 <find_volume+0x668>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f542:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f544:	3301      	adds	r3, #1
 800f546:	4619      	mov	r1, r3
 800f548:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f54a:	f7fd fa63 	bl	800ca14 <move_window>
 800f54e:	4603      	mov	r3, r0
 800f550:	2b00      	cmp	r3, #0
 800f552:	d137      	bne.n	800f5c4 <find_volume+0x668>
		{
			fs->fsi_flag = 0;
 800f554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f556:	2200      	movs	r2, #0
 800f558:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f55a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f55c:	3338      	adds	r3, #56	; 0x38
 800f55e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f562:	4618      	mov	r0, r3
 800f564:	f7fc fe42 	bl	800c1ec <ld_word>
 800f568:	4603      	mov	r3, r0
 800f56a:	461a      	mov	r2, r3
 800f56c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f570:	429a      	cmp	r2, r3
 800f572:	d127      	bne.n	800f5c4 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f576:	3338      	adds	r3, #56	; 0x38
 800f578:	4618      	mov	r0, r3
 800f57a:	f7fc fe4f 	bl	800c21c <ld_dword>
 800f57e:	4603      	mov	r3, r0
 800f580:	4a1f      	ldr	r2, [pc, #124]	; (800f600 <find_volume+0x6a4>)
 800f582:	4293      	cmp	r3, r2
 800f584:	d11e      	bne.n	800f5c4 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f588:	3338      	adds	r3, #56	; 0x38
 800f58a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f58e:	4618      	mov	r0, r3
 800f590:	f7fc fe44 	bl	800c21c <ld_dword>
 800f594:	4603      	mov	r3, r0
 800f596:	4a1b      	ldr	r2, [pc, #108]	; (800f604 <find_volume+0x6a8>)
 800f598:	4293      	cmp	r3, r2
 800f59a:	d113      	bne.n	800f5c4 <find_volume+0x668>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f59c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f59e:	3338      	adds	r3, #56	; 0x38
 800f5a0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f7fc fe39 	bl	800c21c <ld_dword>
 800f5aa:	4602      	mov	r2, r0
 800f5ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5ae:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f5b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5b2:	3338      	adds	r3, #56	; 0x38
 800f5b4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f7fc fe2f 	bl	800c21c <ld_dword>
 800f5be:	4602      	mov	r2, r0
 800f5c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5c2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f5c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5c6:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800f5ca:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f5cc:	4b0e      	ldr	r3, [pc, #56]	; (800f608 <find_volume+0x6ac>)
 800f5ce:	881b      	ldrh	r3, [r3, #0]
 800f5d0:	3301      	adds	r3, #1
 800f5d2:	b29a      	uxth	r2, r3
 800f5d4:	4b0c      	ldr	r3, [pc, #48]	; (800f608 <find_volume+0x6ac>)
 800f5d6:	801a      	strh	r2, [r3, #0]
 800f5d8:	4b0b      	ldr	r3, [pc, #44]	; (800f608 <find_volume+0x6ac>)
 800f5da:	881a      	ldrh	r2, [r3, #0]
 800f5dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5de:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f5e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5e2:	4a0a      	ldr	r2, [pc, #40]	; (800f60c <find_volume+0x6b0>)
 800f5e4:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800f5e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5e8:	4a09      	ldr	r2, [pc, #36]	; (800f610 <find_volume+0x6b4>)
 800f5ea:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f5ec:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f5ee:	f7fd f9a9 	bl	800c944 <clear_lock>
#endif
	return FR_OK;
 800f5f2:	2300      	movs	r3, #0
}
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	3770      	adds	r7, #112	; 0x70
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f5fe:	bf00      	nop
 800f600:	41615252 	.word	0x41615252
 800f604:	61417272 	.word	0x61417272
 800f608:	20001d18 	.word	0x20001d18
 800f60c:	20001f9c 	.word	0x20001f9c
 800f610:	20001d3c 	.word	0x20001d3c

0800f614 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b084      	sub	sp, #16
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
 800f61c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f61e:	2309      	movs	r3, #9
 800f620:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d01c      	beq.n	800f662 <validate+0x4e>
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d018      	beq.n	800f662 <validate+0x4e>
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	781b      	ldrb	r3, [r3, #0]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d013      	beq.n	800f662 <validate+0x4e>
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	889a      	ldrh	r2, [r3, #4]
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	88db      	ldrh	r3, [r3, #6]
 800f644:	429a      	cmp	r2, r3
 800f646:	d10c      	bne.n	800f662 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	785b      	ldrb	r3, [r3, #1]
 800f64e:	4618      	mov	r0, r3
 800f650:	f7fc fd2e 	bl	800c0b0 <disk_status>
 800f654:	4603      	mov	r3, r0
 800f656:	f003 0301 	and.w	r3, r3, #1
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d101      	bne.n	800f662 <validate+0x4e>
			res = FR_OK;
 800f65e:	2300      	movs	r3, #0
 800f660:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f662:	7bfb      	ldrb	r3, [r7, #15]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d102      	bne.n	800f66e <validate+0x5a>
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	e000      	b.n	800f670 <validate+0x5c>
 800f66e:	2300      	movs	r3, #0
 800f670:	683a      	ldr	r2, [r7, #0]
 800f672:	6013      	str	r3, [r2, #0]
	return res;
 800f674:	7bfb      	ldrb	r3, [r7, #15]
}
 800f676:	4618      	mov	r0, r3
 800f678:	3710      	adds	r7, #16
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd80      	pop	{r7, pc}
	...

0800f680 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b088      	sub	sp, #32
 800f684:	af00      	add	r7, sp, #0
 800f686:	60f8      	str	r0, [r7, #12]
 800f688:	60b9      	str	r1, [r7, #8]
 800f68a:	4613      	mov	r3, r2
 800f68c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f68e:	68bb      	ldr	r3, [r7, #8]
 800f690:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f692:	f107 0310 	add.w	r3, r7, #16
 800f696:	4618      	mov	r0, r3
 800f698:	f7ff fbb7 	bl	800ee0a <get_ldnumber>
 800f69c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f69e:	69fb      	ldr	r3, [r7, #28]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	da01      	bge.n	800f6a8 <f_mount+0x28>
 800f6a4:	230b      	movs	r3, #11
 800f6a6:	e02b      	b.n	800f700 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f6a8:	4a17      	ldr	r2, [pc, #92]	; (800f708 <f_mount+0x88>)
 800f6aa:	69fb      	ldr	r3, [r7, #28]
 800f6ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6b0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f6b2:	69bb      	ldr	r3, [r7, #24]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d005      	beq.n	800f6c4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f6b8:	69b8      	ldr	r0, [r7, #24]
 800f6ba:	f7fd f943 	bl	800c944 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f6be:	69bb      	ldr	r3, [r7, #24]
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d002      	beq.n	800f6d0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f6d0:	68fa      	ldr	r2, [r7, #12]
 800f6d2:	490d      	ldr	r1, [pc, #52]	; (800f708 <f_mount+0x88>)
 800f6d4:	69fb      	ldr	r3, [r7, #28]
 800f6d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d002      	beq.n	800f6e6 <f_mount+0x66>
 800f6e0:	79fb      	ldrb	r3, [r7, #7]
 800f6e2:	2b01      	cmp	r3, #1
 800f6e4:	d001      	beq.n	800f6ea <f_mount+0x6a>
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	e00a      	b.n	800f700 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f6ea:	f107 010c 	add.w	r1, r7, #12
 800f6ee:	f107 0308 	add.w	r3, r7, #8
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f7ff fc31 	bl	800ef5c <find_volume>
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f6fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800f700:	4618      	mov	r0, r3
 800f702:	3720      	adds	r7, #32
 800f704:	46bd      	mov	sp, r7
 800f706:	bd80      	pop	{r7, pc}
 800f708:	20001d08 	.word	0x20001d08

0800f70c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f70c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f710:	b0a6      	sub	sp, #152	; 0x98
 800f712:	af00      	add	r7, sp, #0
 800f714:	61f8      	str	r0, [r7, #28]
 800f716:	61b9      	str	r1, [r7, #24]
 800f718:	4613      	mov	r3, r2
 800f71a:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f71c:	69fb      	ldr	r3, [r7, #28]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d101      	bne.n	800f726 <f_open+0x1a>
 800f722:	2309      	movs	r3, #9
 800f724:	e2ae      	b.n	800fc84 <f_open+0x578>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f726:	7dfb      	ldrb	r3, [r7, #23]
 800f728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f72c:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 800f72e:	7dfa      	ldrb	r2, [r7, #23]
 800f730:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800f734:	f107 0318 	add.w	r3, r7, #24
 800f738:	4618      	mov	r0, r3
 800f73a:	f7ff fc0f 	bl	800ef5c <find_volume>
 800f73e:	4603      	mov	r3, r0
 800f740:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	if (res == FR_OK) {
 800f744:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f748:	2b00      	cmp	r3, #0
 800f74a:	f040 8292 	bne.w	800fc72 <f_open+0x566>
		dj.obj.fs = fs;
 800f74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f750:	62bb      	str	r3, [r7, #40]	; 0x28
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f752:	69ba      	ldr	r2, [r7, #24]
 800f754:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f758:	4611      	mov	r1, r2
 800f75a:	4618      	mov	r0, r3
 800f75c:	f7ff faac 	bl	800ecb8 <follow_path>
 800f760:	4603      	mov	r3, r0
 800f762:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f766:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d11a      	bne.n	800f7a4 <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f76e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800f772:	b25b      	sxtb	r3, r3
 800f774:	2b00      	cmp	r3, #0
 800f776:	da03      	bge.n	800f780 <f_open+0x74>
				res = FR_INVALID_NAME;
 800f778:	2306      	movs	r3, #6
 800f77a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800f77e:	e011      	b.n	800f7a4 <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f780:	7dfb      	ldrb	r3, [r7, #23]
 800f782:	f023 0301 	bic.w	r3, r3, #1
 800f786:	2b00      	cmp	r3, #0
 800f788:	bf14      	ite	ne
 800f78a:	2301      	movne	r3, #1
 800f78c:	2300      	moveq	r3, #0
 800f78e:	b2db      	uxtb	r3, r3
 800f790:	461a      	mov	r2, r3
 800f792:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f796:	4611      	mov	r1, r2
 800f798:	4618      	mov	r0, r3
 800f79a:	f7fc ff8b 	bl	800c6b4 <chk_lock>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f7a4:	7dfb      	ldrb	r3, [r7, #23]
 800f7a6:	f003 031c 	and.w	r3, r3, #28
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	f000 8115 	beq.w	800f9da <f_open+0x2ce>
			if (res != FR_OK) {					/* No file, create new */
 800f7b0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d017      	beq.n	800f7e8 <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f7b8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f7bc:	2b04      	cmp	r3, #4
 800f7be:	d10e      	bne.n	800f7de <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f7c0:	f7fc ffd4 	bl	800c76c <enq_lock>
 800f7c4:	4603      	mov	r3, r0
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d006      	beq.n	800f7d8 <f_open+0xcc>
 800f7ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f7fe ff14 	bl	800e5fc <dir_register>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	e000      	b.n	800f7da <f_open+0xce>
 800f7d8:	2312      	movs	r3, #18
 800f7da:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f7de:	7dfb      	ldrb	r3, [r7, #23]
 800f7e0:	f043 0308 	orr.w	r3, r3, #8
 800f7e4:	75fb      	strb	r3, [r7, #23]
 800f7e6:	e011      	b.n	800f80c <f_open+0x100>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f7e8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f7ec:	f003 0311 	and.w	r3, r3, #17
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d003      	beq.n	800f7fc <f_open+0xf0>
					res = FR_DENIED;
 800f7f4:	2307      	movs	r3, #7
 800f7f6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800f7fa:	e007      	b.n	800f80c <f_open+0x100>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f7fc:	7dfb      	ldrb	r3, [r7, #23]
 800f7fe:	f003 0304 	and.w	r3, r3, #4
 800f802:	2b00      	cmp	r3, #0
 800f804:	d002      	beq.n	800f80c <f_open+0x100>
 800f806:	2308      	movs	r3, #8
 800f808:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f80c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f810:	2b00      	cmp	r3, #0
 800f812:	f040 80fe 	bne.w	800fa12 <f_open+0x306>
 800f816:	7dfb      	ldrb	r3, [r7, #23]
 800f818:	f003 0308 	and.w	r3, r3, #8
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	f000 80f8 	beq.w	800fa12 <f_open+0x306>
				dw = GET_FATTIME();
 800f822:	f7f9 fe49 	bl	80094b8 <get_fattime>
 800f826:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800f82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f82c:	781b      	ldrb	r3, [r3, #0]
 800f82e:	2b04      	cmp	r3, #4
 800f830:	f040 8084 	bne.w	800f93c <f_open+0x230>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800f834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f836:	69fb      	ldr	r3, [r7, #28]
 800f838:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800f83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f83c:	691b      	ldr	r3, [r3, #16]
 800f83e:	3334      	adds	r3, #52	; 0x34
 800f840:	4618      	mov	r0, r3
 800f842:	f7fc fceb 	bl	800c21c <ld_dword>
 800f846:	4602      	mov	r2, r0
 800f848:	69fb      	ldr	r3, [r7, #28]
 800f84a:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800f84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f84e:	691b      	ldr	r3, [r3, #16]
 800f850:	3338      	adds	r3, #56	; 0x38
 800f852:	4618      	mov	r0, r3
 800f854:	f7fc fd05 	bl	800c262 <ld_qword>
 800f858:	4602      	mov	r2, r0
 800f85a:	460b      	mov	r3, r1
 800f85c:	69f9      	ldr	r1, [r7, #28]
 800f85e:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800f862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f864:	691b      	ldr	r3, [r3, #16]
 800f866:	3321      	adds	r3, #33	; 0x21
 800f868:	781b      	ldrb	r3, [r3, #0]
 800f86a:	f003 0302 	and.w	r3, r3, #2
 800f86e:	b2da      	uxtb	r2, r3
 800f870:	69fb      	ldr	r3, [r7, #28]
 800f872:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800f874:	69fb      	ldr	r3, [r7, #28]
 800f876:	2200      	movs	r2, #0
 800f878:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800f87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f87c:	691b      	ldr	r3, [r3, #16]
 800f87e:	3308      	adds	r3, #8
 800f880:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f884:	4618      	mov	r0, r3
 800f886:	f7fc fde2 	bl	800c44e <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800f88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f88c:	691b      	ldr	r3, [r3, #16]
 800f88e:	3314      	adds	r3, #20
 800f890:	2200      	movs	r2, #0
 800f892:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800f894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f896:	691b      	ldr	r3, [r3, #16]
 800f898:	330c      	adds	r3, #12
 800f89a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f7fc fdd5 	bl	800c44e <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800f8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8a6:	691b      	ldr	r3, [r3, #16]
 800f8a8:	3315      	adds	r3, #21
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800f8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8b0:	691b      	ldr	r3, [r3, #16]
 800f8b2:	3304      	adds	r3, #4
 800f8b4:	2220      	movs	r2, #32
 800f8b6:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800f8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ba:	691b      	ldr	r3, [r3, #16]
 800f8bc:	3334      	adds	r3, #52	; 0x34
 800f8be:	2100      	movs	r1, #0
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f7fc fdc4 	bl	800c44e <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800f8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8c8:	691b      	ldr	r3, [r3, #16]
 800f8ca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f8ce:	f04f 0200 	mov.w	r2, #0
 800f8d2:	f04f 0300 	mov.w	r3, #0
 800f8d6:	4608      	mov	r0, r1
 800f8d8:	f7fc fde5 	bl	800c4a6 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800f8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8de:	691b      	ldr	r3, [r3, #16]
 800f8e0:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800f8e4:	f04f 0200 	mov.w	r2, #0
 800f8e8:	f04f 0300 	mov.w	r3, #0
 800f8ec:	4608      	mov	r0, r1
 800f8ee:	f7fc fdda 	bl	800c4a6 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800f8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8f4:	691b      	ldr	r3, [r3, #16]
 800f8f6:	3321      	adds	r3, #33	; 0x21
 800f8f8:	2201      	movs	r2, #1
 800f8fa:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800f8fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f900:	4618      	mov	r0, r3
 800f902:	f7fe fbc9 	bl	800e098 <store_xdir>
 800f906:	4603      	mov	r3, r0
 800f908:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800f90c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f910:	2b00      	cmp	r3, #0
 800f912:	d17e      	bne.n	800fa12 <f_open+0x306>
 800f914:	69fb      	ldr	r3, [r7, #28]
 800f916:	689b      	ldr	r3, [r3, #8]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d07a      	beq.n	800fa12 <f_open+0x306>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800f91c:	69f8      	ldr	r0, [r7, #28]
 800f91e:	69fb      	ldr	r3, [r7, #28]
 800f920:	689b      	ldr	r3, [r3, #8]
 800f922:	2200      	movs	r2, #0
 800f924:	4619      	mov	r1, r3
 800f926:	f7fd fc81 	bl	800d22c <remove_chain>
 800f92a:	4603      	mov	r3, r0
 800f92c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800f930:	69fb      	ldr	r3, [r7, #28]
 800f932:	689a      	ldr	r2, [r3, #8]
 800f934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f936:	3a01      	subs	r2, #1
 800f938:	615a      	str	r2, [r3, #20]
 800f93a:	e06a      	b.n	800fa12 <f_open+0x306>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f93c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f93e:	330e      	adds	r3, #14
 800f940:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f944:	4618      	mov	r0, r3
 800f946:	f7fc fd82 	bl	800c44e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f94a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f94c:	3316      	adds	r3, #22
 800f94e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f952:	4618      	mov	r0, r3
 800f954:	f7fc fd7b 	bl	800c44e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f958:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f95a:	330b      	adds	r3, #11
 800f95c:	2220      	movs	r2, #32
 800f95e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f962:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f964:	4611      	mov	r1, r2
 800f966:	4618      	mov	r0, r3
 800f968:	f7fe f810 	bl	800d98c <ld_clust>
 800f96c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f972:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f974:	2200      	movs	r2, #0
 800f976:	4618      	mov	r0, r3
 800f978:	f7fe f827 	bl	800d9ca <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f97c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f97e:	331c      	adds	r3, #28
 800f980:	2100      	movs	r1, #0
 800f982:	4618      	mov	r0, r3
 800f984:	f7fc fd63 	bl	800c44e <st_dword>
					fs->wflag = 1;
 800f988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f98a:	2201      	movs	r2, #1
 800f98c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f98e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f992:	2b00      	cmp	r3, #0
 800f994:	d03d      	beq.n	800fa12 <f_open+0x306>
						dw = fs->winsect;
 800f996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f99a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
						res = remove_chain(&dj.obj, cl, 0);
 800f99e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	f7fd fc3f 	bl	800d22c <remove_chain>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						if (res == FR_OK) {
 800f9b4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d12a      	bne.n	800fa12 <f_open+0x306>
							res = move_window(fs, dw);
 800f9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9be:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f7fd f826 	bl	800ca14 <move_window>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f9d4:	3a01      	subs	r2, #1
 800f9d6:	615a      	str	r2, [r3, #20]
 800f9d8:	e01b      	b.n	800fa12 <f_open+0x306>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f9da:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d117      	bne.n	800fa12 <f_open+0x306>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f9e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f9e6:	f003 0310 	and.w	r3, r3, #16
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d003      	beq.n	800f9f6 <f_open+0x2ea>
					res = FR_NO_FILE;
 800f9ee:	2304      	movs	r3, #4
 800f9f0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800f9f4:	e00d      	b.n	800fa12 <f_open+0x306>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f9f6:	7dfb      	ldrb	r3, [r7, #23]
 800f9f8:	f003 0302 	and.w	r3, r3, #2
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d008      	beq.n	800fa12 <f_open+0x306>
 800fa00:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800fa04:	f003 0301 	and.w	r3, r3, #1
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d002      	beq.n	800fa12 <f_open+0x306>
						res = FR_DENIED;
 800fa0c:	2307      	movs	r3, #7
 800fa0e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					}
				}
			}
		}
		if (res == FR_OK) {
 800fa12:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d128      	bne.n	800fa6c <f_open+0x360>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fa1a:	7dfb      	ldrb	r3, [r7, #23]
 800fa1c:	f003 0308 	and.w	r3, r3, #8
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d003      	beq.n	800fa2c <f_open+0x320>
				mode |= FA_MODIFIED;
 800fa24:	7dfb      	ldrb	r3, [r7, #23]
 800fa26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa2a:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fa2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fa30:	69fb      	ldr	r3, [r7, #28]
 800fa32:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800fa34:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fa36:	69fb      	ldr	r3, [r7, #28]
 800fa38:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fa3a:	7dfb      	ldrb	r3, [r7, #23]
 800fa3c:	f023 0301 	bic.w	r3, r3, #1
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	bf14      	ite	ne
 800fa44:	2301      	movne	r3, #1
 800fa46:	2300      	moveq	r3, #0
 800fa48:	b2db      	uxtb	r3, r3
 800fa4a:	461a      	mov	r2, r3
 800fa4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fa50:	4611      	mov	r1, r2
 800fa52:	4618      	mov	r0, r3
 800fa54:	f7fc feac 	bl	800c7b0 <inc_lock>
 800fa58:	4602      	mov	r2, r0
 800fa5a:	69fb      	ldr	r3, [r7, #28]
 800fa5c:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fa5e:	69fb      	ldr	r3, [r7, #28]
 800fa60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d102      	bne.n	800fa6c <f_open+0x360>
 800fa66:	2302      	movs	r3, #2
 800fa68:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fa6c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	f040 80fe 	bne.w	800fc72 <f_open+0x566>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800fa76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa78:	781b      	ldrb	r3, [r3, #0]
 800fa7a:	2b04      	cmp	r3, #4
 800fa7c:	d12d      	bne.n	800fada <f_open+0x3ce>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800fa7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa80:	69fb      	ldr	r3, [r7, #28]
 800fa82:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800fa84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800fa88:	4613      	mov	r3, r2
 800fa8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800fa8e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800fa92:	431a      	orrs	r2, r3
 800fa94:	69fb      	ldr	r3, [r7, #28]
 800fa96:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800fa98:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fa9a:	69fb      	ldr	r3, [r7, #28]
 800fa9c:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800fa9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa0:	691b      	ldr	r3, [r3, #16]
 800faa2:	3334      	adds	r3, #52	; 0x34
 800faa4:	4618      	mov	r0, r3
 800faa6:	f7fc fbb9 	bl	800c21c <ld_dword>
 800faaa:	4602      	mov	r2, r0
 800faac:	69fb      	ldr	r3, [r7, #28]
 800faae:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800fab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab2:	691b      	ldr	r3, [r3, #16]
 800fab4:	3338      	adds	r3, #56	; 0x38
 800fab6:	4618      	mov	r0, r3
 800fab8:	f7fc fbd3 	bl	800c262 <ld_qword>
 800fabc:	4602      	mov	r2, r0
 800fabe:	460b      	mov	r3, r1
 800fac0:	69f9      	ldr	r1, [r7, #28]
 800fac2:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800fac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac8:	691b      	ldr	r3, [r3, #16]
 800faca:	3321      	adds	r3, #33	; 0x21
 800facc:	781b      	ldrb	r3, [r3, #0]
 800face:	f003 0302 	and.w	r3, r3, #2
 800fad2:	b2da      	uxtb	r2, r3
 800fad4:	69fb      	ldr	r3, [r7, #28]
 800fad6:	71da      	strb	r2, [r3, #7]
 800fad8:	e016      	b.n	800fb08 <f_open+0x3fc>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fadc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fade:	4611      	mov	r1, r2
 800fae0:	4618      	mov	r0, r3
 800fae2:	f7fd ff53 	bl	800d98c <ld_clust>
 800fae6:	4602      	mov	r2, r0
 800fae8:	69fb      	ldr	r3, [r7, #28]
 800faea:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800faec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800faee:	331c      	adds	r3, #28
 800faf0:	4618      	mov	r0, r3
 800faf2:	f7fc fb93 	bl	800c21c <ld_dword>
 800faf6:	4603      	mov	r3, r0
 800faf8:	2200      	movs	r2, #0
 800fafa:	60bb      	str	r3, [r7, #8]
 800fafc:	60fa      	str	r2, [r7, #12]
 800fafe:	69fb      	ldr	r3, [r7, #28]
 800fb00:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800fb04:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fb08:	69fb      	ldr	r3, [r7, #28]
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fb0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb10:	69fb      	ldr	r3, [r7, #28]
 800fb12:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb16:	88da      	ldrh	r2, [r3, #6]
 800fb18:	69fb      	ldr	r3, [r7, #28]
 800fb1a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800fb1c:	69fb      	ldr	r3, [r7, #28]
 800fb1e:	7dfa      	ldrb	r2, [r7, #23]
 800fb20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800fb24:	69fb      	ldr	r3, [r7, #28]
 800fb26:	2200      	movs	r2, #0
 800fb28:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800fb2c:	69fb      	ldr	r3, [r7, #28]
 800fb2e:	2200      	movs	r2, #0
 800fb30:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fb32:	69f9      	ldr	r1, [r7, #28]
 800fb34:	f04f 0200 	mov.w	r2, #0
 800fb38:	f04f 0300 	mov.w	r3, #0
 800fb3c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fb40:	69fb      	ldr	r3, [r7, #28]
 800fb42:	3354      	adds	r3, #84	; 0x54
 800fb44:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fb48:	2100      	movs	r1, #0
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f7fc fd54 	bl	800c5f8 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fb50:	7dfb      	ldrb	r3, [r7, #23]
 800fb52:	f003 0320 	and.w	r3, r3, #32
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	f000 808b 	beq.w	800fc72 <f_open+0x566>
 800fb5c:	69fb      	ldr	r3, [r7, #28]
 800fb5e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800fb62:	4313      	orrs	r3, r2
 800fb64:	f000 8085 	beq.w	800fc72 <f_open+0x566>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fb68:	69fb      	ldr	r3, [r7, #28]
 800fb6a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800fb6e:	69f9      	ldr	r1, [r7, #28]
 800fb70:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb76:	895b      	ldrh	r3, [r3, #10]
 800fb78:	025b      	lsls	r3, r3, #9
 800fb7a:	67fb      	str	r3, [r7, #124]	; 0x7c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fb7c:	69fb      	ldr	r3, [r7, #28]
 800fb7e:	689b      	ldr	r3, [r3, #8]
 800fb80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fb84:	69fb      	ldr	r3, [r7, #28]
 800fb86:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800fb8a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 800fb8e:	e026      	b.n	800fbde <f_open+0x4d2>
					clst = get_fat(&fp->obj, clst);
 800fb90:	69fb      	ldr	r3, [r7, #28]
 800fb92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800fb96:	4618      	mov	r0, r3
 800fb98:	f7fc fff8 	bl	800cb8c <get_fat>
 800fb9c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
					if (clst <= 1) res = FR_INT_ERR;
 800fba0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fba4:	2b01      	cmp	r3, #1
 800fba6:	d802      	bhi.n	800fbae <f_open+0x4a2>
 800fba8:	2302      	movs	r3, #2
 800fbaa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fbae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fbb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbb6:	d102      	bne.n	800fbbe <f_open+0x4b2>
 800fbb8:	2301      	movs	r3, #1
 800fbba:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fbbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	469a      	mov	sl, r3
 800fbc4:	4693      	mov	fp, r2
 800fbc6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800fbca:	ebb2 010a 	subs.w	r1, r2, sl
 800fbce:	6039      	str	r1, [r7, #0]
 800fbd0:	eb63 030b 	sbc.w	r3, r3, fp
 800fbd4:	607b      	str	r3, [r7, #4]
 800fbd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fbda:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 800fbde:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d109      	bne.n	800fbfa <f_open+0x4ee>
 800fbe6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fbe8:	2200      	movs	r2, #0
 800fbea:	4698      	mov	r8, r3
 800fbec:	4691      	mov	r9, r2
 800fbee:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800fbf2:	4590      	cmp	r8, r2
 800fbf4:	eb79 0303 	sbcs.w	r3, r9, r3
 800fbf8:	d3ca      	bcc.n	800fb90 <f_open+0x484>
				}
				fp->clust = clst;
 800fbfa:	69fb      	ldr	r3, [r7, #28]
 800fbfc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800fc00:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fc02:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d133      	bne.n	800fc72 <f_open+0x566>
 800fc0a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800fc0e:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800fc12:	2500      	movs	r5, #0
 800fc14:	ea54 0305 	orrs.w	r3, r4, r5
 800fc18:	d02b      	beq.n	800fc72 <f_open+0x566>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc1c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800fc20:	4618      	mov	r0, r3
 800fc22:	f7fc ff93 	bl	800cb4c <clust2sect>
 800fc26:	67b8      	str	r0, [r7, #120]	; 0x78
 800fc28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d103      	bne.n	800fc36 <f_open+0x52a>
						res = FR_INT_ERR;
 800fc2e:	2302      	movs	r3, #2
 800fc30:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800fc34:	e01d      	b.n	800fc72 <f_open+0x566>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fc36:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800fc3a:	f04f 0200 	mov.w	r2, #0
 800fc3e:	f04f 0300 	mov.w	r3, #0
 800fc42:	0a42      	lsrs	r2, r0, #9
 800fc44:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800fc48:	0a4b      	lsrs	r3, r1, #9
 800fc4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc4c:	441a      	add	r2, r3
 800fc4e:	69fb      	ldr	r3, [r7, #28]
 800fc50:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc54:	7858      	ldrb	r0, [r3, #1]
 800fc56:	69fb      	ldr	r3, [r7, #28]
 800fc58:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800fc5c:	69fb      	ldr	r3, [r7, #28]
 800fc5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fc60:	2301      	movs	r3, #1
 800fc62:	f7fc fa65 	bl	800c130 <disk_read>
 800fc66:	4603      	mov	r3, r0
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d002      	beq.n	800fc72 <f_open+0x566>
 800fc6c:	2301      	movs	r3, #1
 800fc6e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fc72:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d002      	beq.n	800fc80 <f_open+0x574>
 800fc7a:	69fb      	ldr	r3, [r7, #28]
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fc80:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800fc84:	4618      	mov	r0, r3
 800fc86:	3798      	adds	r7, #152	; 0x98
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800fc8e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800fc8e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fc92:	b08c      	sub	sp, #48	; 0x30
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	60f8      	str	r0, [r7, #12]
 800fc98:	60b9      	str	r1, [r7, #8]
 800fc9a:	607a      	str	r2, [r7, #4]
 800fc9c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	2200      	movs	r2, #0
 800fca6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	f107 0210 	add.w	r2, r7, #16
 800fcae:	4611      	mov	r1, r2
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f7ff fcaf 	bl	800f614 <validate>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fcbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d108      	bne.n	800fcd6 <f_write+0x48>
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fcca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800fcce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d002      	beq.n	800fcdc <f_write+0x4e>
 800fcd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fcda:	e187      	b.n	800ffec <f_write+0x35e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fce2:	f003 0302 	and.w	r3, r3, #2
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d101      	bne.n	800fcee <f_write+0x60>
 800fcea:	2307      	movs	r3, #7
 800fcec:	e17e      	b.n	800ffec <f_write+0x35e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800fcee:	693b      	ldr	r3, [r7, #16]
 800fcf0:	781b      	ldrb	r3, [r3, #0]
 800fcf2:	2b04      	cmp	r3, #4
 800fcf4:	f000 816a 	beq.w	800ffcc <f_write+0x33e>
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	18d1      	adds	r1, r2, r3
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800fd08:	4613      	mov	r3, r2
 800fd0a:	4299      	cmp	r1, r3
 800fd0c:	f080 815e 	bcs.w	800ffcc <f_write+0x33e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800fd16:	4613      	mov	r3, r2
 800fd18:	43db      	mvns	r3, r3
 800fd1a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800fd1c:	e156      	b.n	800ffcc <f_write+0x33e>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800fd24:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800fd28:	2500      	movs	r5, #0
 800fd2a:	ea54 0305 	orrs.w	r3, r4, r5
 800fd2e:	f040 80fb 	bne.w	800ff28 <f_write+0x29a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800fd38:	f04f 0200 	mov.w	r2, #0
 800fd3c:	f04f 0300 	mov.w	r3, #0
 800fd40:	0a42      	lsrs	r2, r0, #9
 800fd42:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800fd46:	0a4b      	lsrs	r3, r1, #9
 800fd48:	693b      	ldr	r3, [r7, #16]
 800fd4a:	895b      	ldrh	r3, [r3, #10]
 800fd4c:	3b01      	subs	r3, #1
 800fd4e:	4013      	ands	r3, r2
 800fd50:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800fd52:	69bb      	ldr	r3, [r7, #24]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d146      	bne.n	800fde6 <f_write+0x158>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800fd5e:	4313      	orrs	r3, r2
 800fd60:	d10c      	bne.n	800fd7c <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	689b      	ldr	r3, [r3, #8]
 800fd66:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800fd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d11a      	bne.n	800fda4 <f_write+0x116>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	2100      	movs	r1, #0
 800fd72:	4618      	mov	r0, r3
 800fd74:	f7fd fb0e 	bl	800d394 <create_chain>
 800fd78:	62b8      	str	r0, [r7, #40]	; 0x28
 800fd7a:	e013      	b.n	800fda4 <f_write+0x116>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d007      	beq.n	800fd94 <f_write+0x106>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800fd8a:	68f8      	ldr	r0, [r7, #12]
 800fd8c:	f7fd fc03 	bl	800d596 <clmt_clust>
 800fd90:	62b8      	str	r0, [r7, #40]	; 0x28
 800fd92:	e007      	b.n	800fda4 <f_write+0x116>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800fd94:	68fa      	ldr	r2, [r7, #12]
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd9a:	4619      	mov	r1, r3
 800fd9c:	4610      	mov	r0, r2
 800fd9e:	f7fd faf9 	bl	800d394 <create_chain>
 800fda2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	f000 8115 	beq.w	800ffd6 <f_write+0x348>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fdac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdae:	2b01      	cmp	r3, #1
 800fdb0:	d105      	bne.n	800fdbe <f_write+0x130>
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	2202      	movs	r2, #2
 800fdb6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800fdba:	2302      	movs	r3, #2
 800fdbc:	e116      	b.n	800ffec <f_write+0x35e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fdbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdc4:	d105      	bne.n	800fdd2 <f_write+0x144>
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	2201      	movs	r2, #1
 800fdca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800fdce:	2301      	movs	r3, #1
 800fdd0:	e10c      	b.n	800ffec <f_write+0x35e>
				fp->clust = clst;			/* Update current cluster */
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fdd6:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	689b      	ldr	r3, [r3, #8]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d102      	bne.n	800fde6 <f_write+0x158>
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fde4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fdec:	b25b      	sxtb	r3, r3
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	da1b      	bge.n	800fe2a <f_write+0x19c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fdf2:	693b      	ldr	r3, [r7, #16]
 800fdf4:	7858      	ldrb	r0, [r3, #1]
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fe00:	2301      	movs	r3, #1
 800fe02:	f7fc f9b5 	bl	800c170 <disk_write>
 800fe06:	4603      	mov	r3, r0
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d005      	beq.n	800fe18 <f_write+0x18a>
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	2201      	movs	r2, #1
 800fe10:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800fe14:	2301      	movs	r3, #1
 800fe16:	e0e9      	b.n	800ffec <f_write+0x35e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fe1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe22:	b2da      	uxtb	r2, r3
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fe2a:	693a      	ldr	r2, [r7, #16]
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe30:	4619      	mov	r1, r3
 800fe32:	4610      	mov	r0, r2
 800fe34:	f7fc fe8a 	bl	800cb4c <clust2sect>
 800fe38:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fe3a:	697b      	ldr	r3, [r7, #20]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d105      	bne.n	800fe4c <f_write+0x1be>
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	2202      	movs	r2, #2
 800fe44:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800fe48:	2302      	movs	r3, #2
 800fe4a:	e0cf      	b.n	800ffec <f_write+0x35e>
			sect += csect;
 800fe4c:	697a      	ldr	r2, [r7, #20]
 800fe4e:	69bb      	ldr	r3, [r7, #24]
 800fe50:	4413      	add	r3, r2
 800fe52:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	0a5b      	lsrs	r3, r3, #9
 800fe58:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800fe5a:	6a3b      	ldr	r3, [r7, #32]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d03f      	beq.n	800fee0 <f_write+0x252>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fe60:	69ba      	ldr	r2, [r7, #24]
 800fe62:	6a3b      	ldr	r3, [r7, #32]
 800fe64:	4413      	add	r3, r2
 800fe66:	693a      	ldr	r2, [r7, #16]
 800fe68:	8952      	ldrh	r2, [r2, #10]
 800fe6a:	4293      	cmp	r3, r2
 800fe6c:	d905      	bls.n	800fe7a <f_write+0x1ec>
					cc = fs->csize - csect;
 800fe6e:	693b      	ldr	r3, [r7, #16]
 800fe70:	895b      	ldrh	r3, [r3, #10]
 800fe72:	461a      	mov	r2, r3
 800fe74:	69bb      	ldr	r3, [r7, #24]
 800fe76:	1ad3      	subs	r3, r2, r3
 800fe78:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fe7a:	693b      	ldr	r3, [r7, #16]
 800fe7c:	7858      	ldrb	r0, [r3, #1]
 800fe7e:	6a3b      	ldr	r3, [r7, #32]
 800fe80:	697a      	ldr	r2, [r7, #20]
 800fe82:	69f9      	ldr	r1, [r7, #28]
 800fe84:	f7fc f974 	bl	800c170 <disk_write>
 800fe88:	4603      	mov	r3, r0
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d005      	beq.n	800fe9a <f_write+0x20c>
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	2201      	movs	r2, #1
 800fe92:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800fe96:	2301      	movs	r3, #1
 800fe98:	e0a8      	b.n	800ffec <f_write+0x35e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fe9e:	697b      	ldr	r3, [r7, #20]
 800fea0:	1ad3      	subs	r3, r2, r3
 800fea2:	6a3a      	ldr	r2, [r7, #32]
 800fea4:	429a      	cmp	r2, r3
 800fea6:	d917      	bls.n	800fed8 <f_write+0x24a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800feb2:	697b      	ldr	r3, [r7, #20]
 800feb4:	1ad3      	subs	r3, r2, r3
 800feb6:	025b      	lsls	r3, r3, #9
 800feb8:	69fa      	ldr	r2, [r7, #28]
 800feba:	4413      	add	r3, r2
 800febc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fec0:	4619      	mov	r1, r3
 800fec2:	f7fc fb78 	bl	800c5b6 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fed0:	b2da      	uxtb	r2, r3
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800fed8:	6a3b      	ldr	r3, [r7, #32]
 800feda:	025b      	lsls	r3, r3, #9
 800fedc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800fede:	e04a      	b.n	800ff76 <f_write+0x2e8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fee4:	697a      	ldr	r2, [r7, #20]
 800fee6:	429a      	cmp	r2, r3
 800fee8:	d01b      	beq.n	800ff22 <f_write+0x294>
				fp->fptr < fp->obj.objsize &&
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fef6:	4290      	cmp	r0, r2
 800fef8:	eb71 0303 	sbcs.w	r3, r1, r3
 800fefc:	d211      	bcs.n	800ff22 <f_write+0x294>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800fefe:	693b      	ldr	r3, [r7, #16]
 800ff00:	7858      	ldrb	r0, [r3, #1]
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800ff08:	2301      	movs	r3, #1
 800ff0a:	697a      	ldr	r2, [r7, #20]
 800ff0c:	f7fc f910 	bl	800c130 <disk_read>
 800ff10:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d005      	beq.n	800ff22 <f_write+0x294>
					ABORT(fs, FR_DISK_ERR);
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	2201      	movs	r2, #1
 800ff1a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ff1e:	2301      	movs	r3, #1
 800ff20:	e064      	b.n	800ffec <f_write+0x35e>
			}
#endif
			fp->sect = sect;
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	697a      	ldr	r2, [r7, #20]
 800ff26:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ff2e:	4613      	mov	r3, r2
 800ff30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff34:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ff38:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ff3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	429a      	cmp	r2, r3
 800ff40:	d901      	bls.n	800ff46 <f_write+0x2b8>
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ff52:	4613      	mov	r3, r2
 800ff54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff58:	440b      	add	r3, r1
 800ff5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff5c:	69f9      	ldr	r1, [r7, #28]
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f7fc fb29 	bl	800c5b6 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ff6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ff6e:	b2da      	uxtb	r2, r3
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ff76:	69fa      	ldr	r2, [r7, #28]
 800ff78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff7a:	4413      	add	r3, r2
 800ff7c:	61fb      	str	r3, [r7, #28]
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ff84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ff86:	2000      	movs	r0, #0
 800ff88:	4688      	mov	r8, r1
 800ff8a:	4681      	mov	r9, r0
 800ff8c:	eb12 0a08 	adds.w	sl, r2, r8
 800ff90:	eb43 0b09 	adc.w	fp, r3, r9
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ffa0:	68f9      	ldr	r1, [r7, #12]
 800ffa2:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
 800ffa6:	4282      	cmp	r2, r0
 800ffa8:	eb73 0c01 	sbcs.w	ip, r3, r1
 800ffac:	d201      	bcs.n	800ffb2 <f_write+0x324>
 800ffae:	4602      	mov	r2, r0
 800ffb0:	460b      	mov	r3, r1
 800ffb2:	68f9      	ldr	r1, [r7, #12]
 800ffb4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800ffb8:	683b      	ldr	r3, [r7, #0]
 800ffba:	681a      	ldr	r2, [r3, #0]
 800ffbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffbe:	441a      	add	r2, r3
 800ffc0:	683b      	ldr	r3, [r7, #0]
 800ffc2:	601a      	str	r2, [r3, #0]
 800ffc4:	687a      	ldr	r2, [r7, #4]
 800ffc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc8:	1ad3      	subs	r3, r2, r3
 800ffca:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	f47f aea5 	bne.w	800fd1e <f_write+0x90>
 800ffd4:	e000      	b.n	800ffd8 <f_write+0x34a>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ffd6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ffde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffe2:	b2da      	uxtb	r2, r3
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 800ffea:	2300      	movs	r3, #0
}
 800ffec:	4618      	mov	r0, r3
 800ffee:	3730      	adds	r7, #48	; 0x30
 800fff0:	46bd      	mov	sp, r7
 800fff2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800fff6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800fff6:	b580      	push	{r7, lr}
 800fff8:	b09a      	sub	sp, #104	; 0x68
 800fffa:	af00      	add	r7, sp, #0
 800fffc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010004:	4611      	mov	r1, r2
 8010006:	4618      	mov	r0, r3
 8010008:	f7ff fb04 	bl	800f614 <validate>
 801000c:	4603      	mov	r3, r0
 801000e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8010012:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010016:	2b00      	cmp	r3, #0
 8010018:	f040 8105 	bne.w	8010226 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010026:	2b00      	cmp	r3, #0
 8010028:	f000 80fd 	beq.w	8010226 <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010032:	b25b      	sxtb	r3, r3
 8010034:	2b00      	cmp	r3, #0
 8010036:	da17      	bge.n	8010068 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010038:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801003a:	7858      	ldrb	r0, [r3, #1]
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010046:	2301      	movs	r3, #1
 8010048:	f7fc f892 	bl	800c170 <disk_write>
 801004c:	4603      	mov	r3, r0
 801004e:	2b00      	cmp	r3, #0
 8010050:	d001      	beq.n	8010056 <f_sync+0x60>
 8010052:	2301      	movs	r3, #1
 8010054:	e0e9      	b.n	801022a <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801005c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010060:	b2da      	uxtb	r2, r3
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010068:	f7f9 fa26 	bl	80094b8 <get_fattime>
 801006c:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 801006e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010070:	781b      	ldrb	r3, [r3, #0]
 8010072:	2b04      	cmp	r3, #4
 8010074:	f040 808c 	bne.w	8010190 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	4618      	mov	r0, r3
 801007c:	f7fd f876 	bl	800d16c <fill_first_frag>
 8010080:	4603      	mov	r3, r0
 8010082:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 8010086:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801008a:	2b00      	cmp	r3, #0
 801008c:	d10a      	bne.n	80100a4 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 801008e:	6878      	ldr	r0, [r7, #4]
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010094:	f04f 32ff 	mov.w	r2, #4294967295
 8010098:	4619      	mov	r1, r3
 801009a:	f7fd f896 	bl	800d1ca <fill_last_frag>
 801009e:	4603      	mov	r3, r0
 80100a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 80100a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	f040 80bc 	bne.w	8010226 <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 80100ae:	687a      	ldr	r2, [r7, #4]
 80100b0:	f107 0308 	add.w	r3, r7, #8
 80100b4:	4611      	mov	r1, r2
 80100b6:	4618      	mov	r0, r3
 80100b8:	f7fd ffb8 	bl	800e02c <load_obj_dir>
 80100bc:	4603      	mov	r3, r0
 80100be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 80100c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	f040 80ad 	bne.w	8010226 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 80100cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80100ce:	691b      	ldr	r3, [r3, #16]
 80100d0:	3304      	adds	r3, #4
 80100d2:	781a      	ldrb	r2, [r3, #0]
 80100d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80100d6:	691b      	ldr	r3, [r3, #16]
 80100d8:	3304      	adds	r3, #4
 80100da:	f042 0220 	orr.w	r2, r2, #32
 80100de:	b2d2      	uxtb	r2, r2
 80100e0:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	79da      	ldrb	r2, [r3, #7]
 80100e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80100e8:	691b      	ldr	r3, [r3, #16]
 80100ea:	3321      	adds	r3, #33	; 0x21
 80100ec:	f042 0201 	orr.w	r2, r2, #1
 80100f0:	b2d2      	uxtb	r2, r2
 80100f2:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 80100f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80100f6:	691b      	ldr	r3, [r3, #16]
 80100f8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	689b      	ldr	r3, [r3, #8]
 8010100:	4619      	mov	r1, r3
 8010102:	4610      	mov	r0, r2
 8010104:	f7fc f9a3 	bl	800c44e <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8010108:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801010a:	691b      	ldr	r3, [r3, #16]
 801010c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010116:	4608      	mov	r0, r1
 8010118:	f7fc f9c5 	bl	800c4a6 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 801011c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801011e:	691b      	ldr	r3, [r3, #16]
 8010120:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801012a:	4608      	mov	r0, r1
 801012c:	f7fc f9bb 	bl	800c4a6 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8010130:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010132:	691b      	ldr	r3, [r3, #16]
 8010134:	330c      	adds	r3, #12
 8010136:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010138:	4618      	mov	r0, r3
 801013a:	f7fc f988 	bl	800c44e <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 801013e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010140:	691b      	ldr	r3, [r3, #16]
 8010142:	3315      	adds	r3, #21
 8010144:	2200      	movs	r2, #0
 8010146:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8010148:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801014a:	691b      	ldr	r3, [r3, #16]
 801014c:	3310      	adds	r3, #16
 801014e:	2100      	movs	r1, #0
 8010150:	4618      	mov	r0, r3
 8010152:	f7fc f97c 	bl	800c44e <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8010156:	f107 0308 	add.w	r3, r7, #8
 801015a:	4618      	mov	r0, r3
 801015c:	f7fd ff9c 	bl	800e098 <store_xdir>
 8010160:	4603      	mov	r3, r0
 8010162:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8010166:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801016a:	2b00      	cmp	r3, #0
 801016c:	d15b      	bne.n	8010226 <f_sync+0x230>
							res = sync_fs(fs);
 801016e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010170:	4618      	mov	r0, r3
 8010172:	f7fc fc7d 	bl	800ca70 <sync_fs>
 8010176:	4603      	mov	r3, r0
 8010178:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010182:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010186:	b2da      	uxtb	r2, r3
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 801018e:	e04a      	b.n	8010226 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010190:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010196:	4619      	mov	r1, r3
 8010198:	4610      	mov	r0, r2
 801019a:	f7fc fc3b 	bl	800ca14 <move_window>
 801019e:	4603      	mov	r3, r0
 80101a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 80101a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d13c      	bne.n	8010226 <f_sync+0x230>
					dir = fp->dir_ptr;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80101b0:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80101b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80101b4:	330b      	adds	r3, #11
 80101b6:	781a      	ldrb	r2, [r3, #0]
 80101b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80101ba:	330b      	adds	r3, #11
 80101bc:	f042 0220 	orr.w	r2, r2, #32
 80101c0:	b2d2      	uxtb	r2, r2
 80101c2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	6818      	ldr	r0, [r3, #0]
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	689b      	ldr	r3, [r3, #8]
 80101cc:	461a      	mov	r2, r3
 80101ce:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80101d0:	f7fd fbfb 	bl	800d9ca <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80101d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80101d6:	f103 001c 	add.w	r0, r3, #28
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80101e0:	4613      	mov	r3, r2
 80101e2:	4619      	mov	r1, r3
 80101e4:	f7fc f933 	bl	800c44e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80101e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80101ea:	3316      	adds	r3, #22
 80101ec:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80101ee:	4618      	mov	r0, r3
 80101f0:	f7fc f92d 	bl	800c44e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80101f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80101f6:	3312      	adds	r3, #18
 80101f8:	2100      	movs	r1, #0
 80101fa:	4618      	mov	r0, r3
 80101fc:	f7fc f90c 	bl	800c418 <st_word>
					fs->wflag = 1;
 8010200:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010202:	2201      	movs	r2, #1
 8010204:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010206:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010208:	4618      	mov	r0, r3
 801020a:	f7fc fc31 	bl	800ca70 <sync_fs>
 801020e:	4603      	mov	r3, r0
 8010210:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801021a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801021e:	b2da      	uxtb	r2, r3
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010226:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 801022a:	4618      	mov	r0, r3
 801022c:	3768      	adds	r7, #104	; 0x68
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}

08010232 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010232:	b580      	push	{r7, lr}
 8010234:	b084      	sub	sp, #16
 8010236:	af00      	add	r7, sp, #0
 8010238:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801023a:	6878      	ldr	r0, [r7, #4]
 801023c:	f7ff fedb 	bl	800fff6 <f_sync>
 8010240:	4603      	mov	r3, r0
 8010242:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010244:	7bfb      	ldrb	r3, [r7, #15]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d118      	bne.n	801027c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f107 0208 	add.w	r2, r7, #8
 8010250:	4611      	mov	r1, r2
 8010252:	4618      	mov	r0, r3
 8010254:	f7ff f9de 	bl	800f614 <validate>
 8010258:	4603      	mov	r3, r0
 801025a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801025c:	7bfb      	ldrb	r3, [r7, #15]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d10c      	bne.n	801027c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010266:	4618      	mov	r0, r3
 8010268:	f7fc fb30 	bl	800c8cc <dec_lock>
 801026c:	4603      	mov	r3, r0
 801026e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010270:	7bfb      	ldrb	r3, [r7, #15]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d102      	bne.n	801027c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2200      	movs	r2, #0
 801027a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801027c:	7bfb      	ldrb	r3, [r7, #15]
}
 801027e:	4618      	mov	r0, r3
 8010280:	3710      	adds	r7, #16
 8010282:	46bd      	mov	sp, r7
 8010284:	bd80      	pop	{r7, pc}

08010286 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010286:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801028a:	b0b6      	sub	sp, #216	; 0xd8
 801028c:	af00      	add	r7, sp, #0
 801028e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 8010292:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010296:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801029a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801029e:	4619      	mov	r1, r3
 80102a0:	4610      	mov	r0, r2
 80102a2:	f7ff f9b7 	bl	800f614 <validate>
 80102a6:	4603      	mov	r3, r0
 80102a8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	if (res == FR_OK) res = (FRESULT)fp->err;
 80102ac:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d105      	bne.n	80102c0 <f_lseek+0x3a>
 80102b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80102b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80102bc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 80102c0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d111      	bne.n	80102ec <f_lseek+0x66>
 80102c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80102cc:	781b      	ldrb	r3, [r3, #0]
 80102ce:	2b04      	cmp	r3, #4
 80102d0:	d10c      	bne.n	80102ec <f_lseek+0x66>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 80102d2:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80102d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80102da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102dc:	f04f 32ff 	mov.w	r2, #4294967295
 80102e0:	4619      	mov	r1, r3
 80102e2:	f7fc ff72 	bl	800d1ca <fill_last_frag>
 80102e6:	4603      	mov	r3, r0
 80102e8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80102ec:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d002      	beq.n	80102fa <f_lseek+0x74>
 80102f4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80102f8:	e38c      	b.n	8010a14 <f_lseek+0x78e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80102fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80102fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010300:	2b00      	cmp	r3, #0
 8010302:	f000 8141 	beq.w	8010588 <f_lseek+0x302>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010306:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801030a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801030e:	bf08      	it	eq
 8010310:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8010314:	f040 8087 	bne.w	8010426 <f_lseek+0x1a0>
			tbl = fp->cltbl;
 8010318:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801031c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801031e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010322:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010326:	1d1a      	adds	r2, r3, #4
 8010328:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010332:	2302      	movs	r3, #2
 8010334:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010338:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801033c:	689b      	ldr	r3, [r3, #8]
 801033e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
			if (cl) {
 8010342:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010346:	2b00      	cmp	r3, #0
 8010348:	d058      	beq.n	80103fc <f_lseek+0x176>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801034a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801034e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8010352:	2300      	movs	r3, #0
 8010354:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010358:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801035c:	3302      	adds	r3, #2
 801035e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
					do {
						pcl = cl; ncl++;
 8010362:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010366:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801036a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801036e:	3301      	adds	r3, #1
 8010370:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
						cl = get_fat(&fp->obj, cl);
 8010374:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010378:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 801037c:	4618      	mov	r0, r3
 801037e:	f7fc fc05 	bl	800cb8c <get_fat>
 8010382:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010386:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801038a:	2b01      	cmp	r3, #1
 801038c:	d806      	bhi.n	801039c <f_lseek+0x116>
 801038e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010392:	2202      	movs	r2, #2
 8010394:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010398:	2302      	movs	r3, #2
 801039a:	e33b      	b.n	8010a14 <f_lseek+0x78e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801039c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80103a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103a4:	d106      	bne.n	80103b4 <f_lseek+0x12e>
 80103a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80103aa:	2201      	movs	r2, #1
 80103ac:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80103b0:	2301      	movs	r3, #1
 80103b2:	e32f      	b.n	8010a14 <f_lseek+0x78e>
					} while (cl == pcl + 1);
 80103b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80103b8:	3301      	adds	r3, #1
 80103ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80103be:	429a      	cmp	r2, r3
 80103c0:	d0cf      	beq.n	8010362 <f_lseek+0xdc>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80103c2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80103c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80103ca:	429a      	cmp	r2, r3
 80103cc:	d80f      	bhi.n	80103ee <f_lseek+0x168>
						*tbl++ = ncl; *tbl++ = tcl;
 80103ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80103d2:	1d1a      	adds	r2, r3, #4
 80103d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80103d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80103dc:	601a      	str	r2, [r3, #0]
 80103de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80103e2:	1d1a      	adds	r2, r3, #4
 80103e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80103e8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80103ec:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80103ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80103f2:	69db      	ldr	r3, [r3, #28]
 80103f4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80103f8:	429a      	cmp	r2, r3
 80103fa:	d3a6      	bcc.n	801034a <f_lseek+0xc4>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80103fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010402:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010406:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010408:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801040c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010410:	429a      	cmp	r2, r3
 8010412:	d804      	bhi.n	801041e <f_lseek+0x198>
				*tbl = 0;		/* Terminate table */
 8010414:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010418:	2200      	movs	r2, #0
 801041a:	601a      	str	r2, [r3, #0]
 801041c:	e2f8      	b.n	8010a10 <f_lseek+0x78a>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801041e:	2311      	movs	r3, #17
 8010420:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8010424:	e2f4      	b.n	8010a10 <f_lseek+0x78a>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010426:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801042a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 801042e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010432:	4290      	cmp	r0, r2
 8010434:	eb71 0303 	sbcs.w	r3, r1, r3
 8010438:	d205      	bcs.n	8010446 <f_lseek+0x1c0>
 801043a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801043e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010442:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			fp->fptr = ofs;				/* Set file pointer */
 8010446:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 801044a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801044e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			if (ofs) {
 8010452:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010456:	4313      	orrs	r3, r2
 8010458:	f000 82da 	beq.w	8010a10 <f_lseek+0x78a>
				fp->clust = clmt_clust(fp, ofs - 1);
 801045c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010460:	f112 3aff 	adds.w	sl, r2, #4294967295
 8010464:	f143 3bff 	adc.w	fp, r3, #4294967295
 8010468:	4652      	mov	r2, sl
 801046a:	465b      	mov	r3, fp
 801046c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8010470:	f7fd f891 	bl	800d596 <clmt_clust>
 8010474:	4602      	mov	r2, r0
 8010476:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801047a:	641a      	str	r2, [r3, #64]	; 0x40
				dsc = clust2sect(fs, fp->clust);
 801047c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010480:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010486:	4619      	mov	r1, r3
 8010488:	4610      	mov	r0, r2
 801048a:	f7fc fb5f 	bl	800cb4c <clust2sect>
 801048e:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8010492:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010496:	2b00      	cmp	r3, #0
 8010498:	d106      	bne.n	80104a8 <f_lseek+0x222>
 801049a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801049e:	2202      	movs	r2, #2
 80104a0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80104a4:	2302      	movs	r3, #2
 80104a6:	e2b5      	b.n	8010a14 <f_lseek+0x78e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80104a8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80104ac:	1e54      	subs	r4, r2, #1
 80104ae:	f143 35ff 	adc.w	r5, r3, #4294967295
 80104b2:	f04f 0200 	mov.w	r2, #0
 80104b6:	f04f 0300 	mov.w	r3, #0
 80104ba:	0a62      	lsrs	r2, r4, #9
 80104bc:	ea42 52c5 	orr.w	r2, r2, r5, lsl #23
 80104c0:	0a6b      	lsrs	r3, r5, #9
 80104c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80104c6:	895b      	ldrh	r3, [r3, #10]
 80104c8:	3b01      	subs	r3, #1
 80104ca:	4013      	ands	r3, r2
 80104cc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80104d0:	4413      	add	r3, r2
 80104d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80104d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80104da:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80104de:	f3c2 0808 	ubfx	r8, r2, #0, #9
 80104e2:	f04f 0900 	mov.w	r9, #0
 80104e6:	ea58 0309 	orrs.w	r3, r8, r9
 80104ea:	f000 8291 	beq.w	8010a10 <f_lseek+0x78a>
 80104ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80104f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104f4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80104f8:	429a      	cmp	r2, r3
 80104fa:	f000 8289 	beq.w	8010a10 <f_lseek+0x78a>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80104fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010502:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010506:	b25b      	sxtb	r3, r3
 8010508:	2b00      	cmp	r3, #0
 801050a:	da21      	bge.n	8010550 <f_lseek+0x2ca>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801050c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010510:	7858      	ldrb	r0, [r3, #1]
 8010512:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010516:	f103 0154 	add.w	r1, r3, #84	; 0x54
 801051a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801051e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010520:	2301      	movs	r3, #1
 8010522:	f7fb fe25 	bl	800c170 <disk_write>
 8010526:	4603      	mov	r3, r0
 8010528:	2b00      	cmp	r3, #0
 801052a:	d006      	beq.n	801053a <f_lseek+0x2b4>
 801052c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010530:	2201      	movs	r2, #1
 8010532:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010536:	2301      	movs	r3, #1
 8010538:	e26c      	b.n	8010a14 <f_lseek+0x78e>
						fp->flag &= (BYTE)~FA_DIRTY;
 801053a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801053e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010546:	b2da      	uxtb	r2, r3
 8010548:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801054c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010550:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010554:	7858      	ldrb	r0, [r3, #1]
 8010556:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801055a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 801055e:	2301      	movs	r3, #1
 8010560:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010564:	f7fb fde4 	bl	800c130 <disk_read>
 8010568:	4603      	mov	r3, r0
 801056a:	2b00      	cmp	r3, #0
 801056c:	d006      	beq.n	801057c <f_lseek+0x2f6>
 801056e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010572:	2201      	movs	r2, #1
 8010574:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010578:	2301      	movs	r3, #1
 801057a:	e24b      	b.n	8010a14 <f_lseek+0x78e>
#endif
					fp->sect = dsc;
 801057c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010580:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010584:	645a      	str	r2, [r3, #68]	; 0x44
 8010586:	e243      	b.n	8010a10 <f_lseek+0x78a>
#endif

	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 8010588:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801058c:	781b      	ldrb	r3, [r3, #0]
 801058e:	2b04      	cmp	r3, #4
 8010590:	d009      	beq.n	80105a6 <f_lseek+0x320>
 8010592:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010596:	2b01      	cmp	r3, #1
 8010598:	d305      	bcc.n	80105a6 <f_lseek+0x320>
 801059a:	f04f 32ff 	mov.w	r2, #4294967295
 801059e:	f04f 0300 	mov.w	r3, #0
 80105a2:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80105a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80105aa:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80105ae:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80105b2:	4290      	cmp	r0, r2
 80105b4:	eb71 0303 	sbcs.w	r3, r1, r3
 80105b8:	d20d      	bcs.n	80105d6 <f_lseek+0x350>
 80105ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80105be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80105c2:	f003 0302 	and.w	r3, r3, #2
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d105      	bne.n	80105d6 <f_lseek+0x350>
			ofs = fp->obj.objsize;
 80105ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80105ce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80105d2:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		}
		ifptr = fp->fptr;
 80105d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80105da:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80105de:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
		fp->fptr = nsect = 0;
 80105e2:	2300      	movs	r3, #0
 80105e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80105e8:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80105ec:	f04f 0200 	mov.w	r2, #0
 80105f0:	f04f 0300 	mov.w	r3, #0
 80105f4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		if (ofs) {
 80105f8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80105fc:	4313      	orrs	r3, r2
 80105fe:	f000 818f 	beq.w	8010920 <f_lseek+0x69a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010602:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010606:	895b      	ldrh	r3, [r3, #10]
 8010608:	025b      	lsls	r3, r3, #9
 801060a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			if (ifptr > 0 &&
 801060e:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8010612:	4313      	orrs	r3, r2
 8010614:	d06b      	beq.n	80106ee <f_lseek+0x468>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010616:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801061a:	1e51      	subs	r1, r2, #1
 801061c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8010620:	f143 33ff 	adc.w	r3, r3, #4294967295
 8010624:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010628:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801062c:	2200      	movs	r2, #0
 801062e:	67bb      	str	r3, [r7, #120]	; 0x78
 8010630:	67fa      	str	r2, [r7, #124]	; 0x7c
 8010632:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8010636:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801063a:	f7ef fe31 	bl	80002a0 <__aeabi_uldivmod>
 801063e:	4602      	mov	r2, r0
 8010640:	460b      	mov	r3, r1
 8010642:	4614      	mov	r4, r2
 8010644:	461d      	mov	r5, r3
 8010646:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 801064a:	1e51      	subs	r1, r2, #1
 801064c:	6739      	str	r1, [r7, #112]	; 0x70
 801064e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8010652:	677b      	str	r3, [r7, #116]	; 0x74
 8010654:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010658:	2200      	movs	r2, #0
 801065a:	66bb      	str	r3, [r7, #104]	; 0x68
 801065c:	66fa      	str	r2, [r7, #108]	; 0x6c
 801065e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010662:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010666:	f7ef fe1b 	bl	80002a0 <__aeabi_uldivmod>
 801066a:	4602      	mov	r2, r0
 801066c:	460b      	mov	r3, r1
			if (ifptr > 0 &&
 801066e:	4294      	cmp	r4, r2
 8010670:	eb75 0303 	sbcs.w	r3, r5, r3
 8010674:	d33b      	bcc.n	80106ee <f_lseek+0x468>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010676:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 801067a:	1e51      	subs	r1, r2, #1
 801067c:	6639      	str	r1, [r7, #96]	; 0x60
 801067e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8010682:	667b      	str	r3, [r7, #100]	; 0x64
 8010684:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010688:	3b01      	subs	r3, #1
 801068a:	2200      	movs	r2, #0
 801068c:	65bb      	str	r3, [r7, #88]	; 0x58
 801068e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8010690:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8010694:	460b      	mov	r3, r1
 8010696:	43db      	mvns	r3, r3
 8010698:	653b      	str	r3, [r7, #80]	; 0x50
 801069a:	4613      	mov	r3, r2
 801069c:	43db      	mvns	r3, r3
 801069e:	657b      	str	r3, [r7, #84]	; 0x54
 80106a0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80106a4:	4623      	mov	r3, r4
 80106a6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80106aa:	4602      	mov	r2, r0
 80106ac:	4013      	ands	r3, r2
 80106ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80106b0:	462b      	mov	r3, r5
 80106b2:	460a      	mov	r2, r1
 80106b4:	4013      	ands	r3, r2
 80106b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80106b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80106bc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80106c0:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				ofs -= fp->fptr;
 80106c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80106c8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80106cc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80106d0:	1a14      	subs	r4, r2, r0
 80106d2:	60bc      	str	r4, [r7, #8]
 80106d4:	eb63 0301 	sbc.w	r3, r3, r1
 80106d8:	60fb      	str	r3, [r7, #12]
 80106da:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80106de:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
				clst = fp->clust;
 80106e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80106e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80106ec:	e031      	b.n	8010752 <f_lseek+0x4cc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80106ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80106f2:	689b      	ldr	r3, [r3, #8]
 80106f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80106f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d123      	bne.n	8010748 <f_lseek+0x4c2>
					clst = create_chain(&fp->obj, 0);
 8010700:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010704:	2100      	movs	r1, #0
 8010706:	4618      	mov	r0, r3
 8010708:	f7fc fe44 	bl	800d394 <create_chain>
 801070c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010710:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010714:	2b01      	cmp	r3, #1
 8010716:	d106      	bne.n	8010726 <f_lseek+0x4a0>
 8010718:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801071c:	2202      	movs	r2, #2
 801071e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010722:	2302      	movs	r3, #2
 8010724:	e176      	b.n	8010a14 <f_lseek+0x78e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010726:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801072a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801072e:	d106      	bne.n	801073e <f_lseek+0x4b8>
 8010730:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010734:	2201      	movs	r2, #1
 8010736:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801073a:	2301      	movs	r3, #1
 801073c:	e16a      	b.n	8010a14 <f_lseek+0x78e>
					fp->obj.sclust = clst;
 801073e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010742:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010746:	6093      	str	r3, [r2, #8]
				}
#endif
				fp->clust = clst;
 8010748:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801074c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010750:	6413      	str	r3, [r2, #64]	; 0x40
			}
			if (clst != 0) {
 8010752:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010756:	2b00      	cmp	r3, #0
 8010758:	f000 80e2 	beq.w	8010920 <f_lseek+0x69a>
				while (ofs > bcs) {						/* Cluster following loop */
 801075c:	e090      	b.n	8010880 <f_lseek+0x5fa>
					ofs -= bcs; fp->fptr += bcs;
 801075e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010762:	2200      	movs	r2, #0
 8010764:	643b      	str	r3, [r7, #64]	; 0x40
 8010766:	647a      	str	r2, [r7, #68]	; 0x44
 8010768:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801076c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8010770:	4621      	mov	r1, r4
 8010772:	1a51      	subs	r1, r2, r1
 8010774:	6039      	str	r1, [r7, #0]
 8010776:	4629      	mov	r1, r5
 8010778:	eb63 0301 	sbc.w	r3, r3, r1
 801077c:	607b      	str	r3, [r7, #4]
 801077e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010782:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
 8010786:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801078a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801078e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8010792:	2000      	movs	r0, #0
 8010794:	63b9      	str	r1, [r7, #56]	; 0x38
 8010796:	63f8      	str	r0, [r7, #60]	; 0x3c
 8010798:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 801079c:	4621      	mov	r1, r4
 801079e:	1851      	adds	r1, r2, r1
 80107a0:	6339      	str	r1, [r7, #48]	; 0x30
 80107a2:	4629      	mov	r1, r5
 80107a4:	414b      	adcs	r3, r1
 80107a6:	637b      	str	r3, [r7, #52]	; 0x34
 80107a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80107ac:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80107b0:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80107b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80107b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80107bc:	f003 0302 	and.w	r3, r3, #2
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d031      	beq.n	8010828 <f_lseek+0x5a2>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 80107c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80107c8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80107cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80107d0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80107d4:	4282      	cmp	r2, r0
 80107d6:	418b      	sbcs	r3, r1
 80107d8:	d212      	bcs.n	8010800 <f_lseek+0x57a>
							fp->obj.objsize = fp->fptr;
 80107da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80107de:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80107e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80107e6:	e9c3 0104 	strd	r0, r1, [r3, #16]
							fp->flag |= FA_MODIFIED;
 80107ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80107ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80107f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80107f6:	b2db      	uxtb	r3, r3
 80107f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80107fc:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010800:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010804:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8010808:	4618      	mov	r0, r3
 801080a:	f7fc fdc3 	bl	800d394 <create_chain>
 801080e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
						if (clst == 0) {				/* Clip file size in case of disk full */
 8010812:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010816:	2b00      	cmp	r3, #0
 8010818:	d10f      	bne.n	801083a <f_lseek+0x5b4>
							ofs = 0; break;
 801081a:	f04f 0200 	mov.w	r2, #0
 801081e:	f04f 0300 	mov.w	r3, #0
 8010822:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 8010826:	e03b      	b.n	80108a0 <f_lseek+0x61a>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8010828:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801082c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8010830:	4618      	mov	r0, r3
 8010832:	f7fc f9ab 	bl	800cb8c <get_fat>
 8010836:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801083a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801083e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010842:	d106      	bne.n	8010852 <f_lseek+0x5cc>
 8010844:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010848:	2201      	movs	r2, #1
 801084a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801084e:	2301      	movs	r3, #1
 8010850:	e0e0      	b.n	8010a14 <f_lseek+0x78e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8010852:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010856:	2b01      	cmp	r3, #1
 8010858:	d906      	bls.n	8010868 <f_lseek+0x5e2>
 801085a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801085e:	69da      	ldr	r2, [r3, #28]
 8010860:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010864:	4293      	cmp	r3, r2
 8010866:	d306      	bcc.n	8010876 <f_lseek+0x5f0>
 8010868:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801086c:	2202      	movs	r2, #2
 801086e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010872:	2302      	movs	r3, #2
 8010874:	e0ce      	b.n	8010a14 <f_lseek+0x78e>
					fp->clust = clst;
 8010876:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801087a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801087e:	6413      	str	r3, [r2, #64]	; 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 8010880:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010884:	2200      	movs	r2, #0
 8010886:	62bb      	str	r3, [r7, #40]	; 0x28
 8010888:	62fa      	str	r2, [r7, #44]	; 0x2c
 801088a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801088e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8010892:	4621      	mov	r1, r4
 8010894:	4291      	cmp	r1, r2
 8010896:	4629      	mov	r1, r5
 8010898:	eb71 0303 	sbcs.w	r3, r1, r3
 801089c:	f4ff af5f 	bcc.w	801075e <f_lseek+0x4d8>
				}
				fp->fptr += ofs;
 80108a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80108a4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80108a8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80108ac:	1884      	adds	r4, r0, r2
 80108ae:	623c      	str	r4, [r7, #32]
 80108b0:	eb41 0303 	adc.w	r3, r1, r3
 80108b4:	627b      	str	r3, [r7, #36]	; 0x24
 80108b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80108ba:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80108be:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				if (ofs % SS(fs)) {
 80108c2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80108c6:	f3c2 0308 	ubfx	r3, r2, #0, #9
 80108ca:	61bb      	str	r3, [r7, #24]
 80108cc:	2300      	movs	r3, #0
 80108ce:	61fb      	str	r3, [r7, #28]
 80108d0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80108d4:	460b      	mov	r3, r1
 80108d6:	4313      	orrs	r3, r2
 80108d8:	d022      	beq.n	8010920 <f_lseek+0x69a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80108da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80108de:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80108e2:	4618      	mov	r0, r3
 80108e4:	f7fc f932 	bl	800cb4c <clust2sect>
 80108e8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80108ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d106      	bne.n	8010902 <f_lseek+0x67c>
 80108f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80108f8:	2202      	movs	r2, #2
 80108fa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80108fe:	2302      	movs	r3, #2
 8010900:	e088      	b.n	8010a14 <f_lseek+0x78e>
					nsect += (DWORD)(ofs / SS(fs));
 8010902:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8010906:	f04f 0200 	mov.w	r2, #0
 801090a:	f04f 0300 	mov.w	r3, #0
 801090e:	0a42      	lsrs	r2, r0, #9
 8010910:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8010914:	0a4b      	lsrs	r3, r1, #9
 8010916:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801091a:	4413      	add	r3, r2
 801091c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8010920:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010924:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010928:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 801092c:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8010930:	4290      	cmp	r0, r2
 8010932:	eb71 0303 	sbcs.w	r3, r1, r3
 8010936:	d212      	bcs.n	801095e <f_lseek+0x6d8>
			fp->obj.objsize = fp->fptr;
 8010938:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801093c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010940:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8010944:	e9c1 2304 	strd	r2, r3, [r1, #16]
			fp->flag |= FA_MODIFIED;
 8010948:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801094c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010954:	b2da      	uxtb	r2, r3
 8010956:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801095a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801095e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010962:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010966:	f3c2 0308 	ubfx	r3, r2, #0, #9
 801096a:	613b      	str	r3, [r7, #16]
 801096c:	2300      	movs	r3, #0
 801096e:	617b      	str	r3, [r7, #20]
 8010970:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8010974:	460b      	mov	r3, r1
 8010976:	4313      	orrs	r3, r2
 8010978:	d04a      	beq.n	8010a10 <f_lseek+0x78a>
 801097a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801097e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010980:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8010984:	429a      	cmp	r2, r3
 8010986:	d043      	beq.n	8010a10 <f_lseek+0x78a>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8010988:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801098c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010990:	b25b      	sxtb	r3, r3
 8010992:	2b00      	cmp	r3, #0
 8010994:	da21      	bge.n	80109da <f_lseek+0x754>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010996:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801099a:	7858      	ldrb	r0, [r3, #1]
 801099c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80109a0:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80109a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80109a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80109aa:	2301      	movs	r3, #1
 80109ac:	f7fb fbe0 	bl	800c170 <disk_write>
 80109b0:	4603      	mov	r3, r0
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d006      	beq.n	80109c4 <f_lseek+0x73e>
 80109b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80109ba:	2201      	movs	r2, #1
 80109bc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80109c0:	2301      	movs	r3, #1
 80109c2:	e027      	b.n	8010a14 <f_lseek+0x78e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80109c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80109c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80109cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109d0:	b2da      	uxtb	r2, r3
 80109d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80109d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80109da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80109de:	7858      	ldrb	r0, [r3, #1]
 80109e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80109e4:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80109e8:	2301      	movs	r3, #1
 80109ea:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80109ee:	f7fb fb9f 	bl	800c130 <disk_read>
 80109f2:	4603      	mov	r3, r0
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d006      	beq.n	8010a06 <f_lseek+0x780>
 80109f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80109fc:	2201      	movs	r2, #1
 80109fe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010a02:	2301      	movs	r3, #1
 8010a04:	e006      	b.n	8010a14 <f_lseek+0x78e>
#endif
			fp->sect = nsect;
 8010a06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010a0a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8010a0e:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}

	LEAVE_FF(fs, res);
 8010a10:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8010a14:	4618      	mov	r0, r3
 8010a16:	37d8      	adds	r7, #216	; 0xd8
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010a1e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8010a1e:	b580      	push	{r7, lr}
 8010a20:	b09a      	sub	sp, #104	; 0x68
 8010a22:	af00      	add	r7, sp, #0
 8010a24:	60f8      	str	r0, [r7, #12]
 8010a26:	60b9      	str	r1, [r7, #8]
 8010a28:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8010a2a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8010a2e:	f107 030c 	add.w	r3, r7, #12
 8010a32:	2200      	movs	r2, #0
 8010a34:	4618      	mov	r0, r3
 8010a36:	f7fe fa91 	bl	800ef5c <find_volume>
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8010a40:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	f040 80e6 	bne.w	8010c16 <f_getfree+0x1f8>
		*fatfs = fs;				/* Return ptr to the fs object */
 8010a4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8010a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a52:	699a      	ldr	r2, [r3, #24]
 8010a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a56:	69db      	ldr	r3, [r3, #28]
 8010a58:	3b02      	subs	r3, #2
 8010a5a:	429a      	cmp	r2, r3
 8010a5c:	d804      	bhi.n	8010a68 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8010a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a60:	699a      	ldr	r2, [r3, #24]
 8010a62:	68bb      	ldr	r3, [r7, #8]
 8010a64:	601a      	str	r2, [r3, #0]
 8010a66:	e0d6      	b.n	8010c16 <f_getfree+0x1f8>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8010a68:	2300      	movs	r3, #0
 8010a6a:	663b      	str	r3, [r7, #96]	; 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8010a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a6e:	781b      	ldrb	r3, [r3, #0]
 8010a70:	2b01      	cmp	r3, #1
 8010a72:	d128      	bne.n	8010ac6 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8010a74:	2302      	movs	r3, #2
 8010a76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a7a:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 8010a7c:	f107 0310 	add.w	r3, r7, #16
 8010a80:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8010a82:	4618      	mov	r0, r3
 8010a84:	f7fc f882 	bl	800cb8c <get_fat>
 8010a88:	6478      	str	r0, [r7, #68]	; 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8010a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a90:	d103      	bne.n	8010a9a <f_getfree+0x7c>
 8010a92:	2301      	movs	r3, #1
 8010a94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010a98:	e0b0      	b.n	8010bfc <f_getfree+0x1de>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8010a9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a9c:	2b01      	cmp	r3, #1
 8010a9e:	d103      	bne.n	8010aa8 <f_getfree+0x8a>
 8010aa0:	2302      	movs	r3, #2
 8010aa2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010aa6:	e0a9      	b.n	8010bfc <f_getfree+0x1de>
					if (stat == 0) nfree++;
 8010aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d102      	bne.n	8010ab4 <f_getfree+0x96>
 8010aae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010ab0:	3301      	adds	r3, #1
 8010ab2:	663b      	str	r3, [r7, #96]	; 0x60
				} while (++clst < fs->n_fatent);
 8010ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010ab6:	3301      	adds	r3, #1
 8010ab8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010aba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010abc:	69db      	ldr	r3, [r3, #28]
 8010abe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	d3db      	bcc.n	8010a7c <f_getfree+0x5e>
 8010ac4:	e09a      	b.n	8010bfc <f_getfree+0x1de>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 8010ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ac8:	781b      	ldrb	r3, [r3, #0]
 8010aca:	2b04      	cmp	r3, #4
 8010acc:	d146      	bne.n	8010b5c <f_getfree+0x13e>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 8010ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ad0:	69db      	ldr	r3, [r3, #28]
 8010ad2:	3b02      	subs	r3, #2
 8010ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
					sect = fs->database;
 8010ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ada:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0;
 8010adc:	2300      	movs	r3, #0
 8010ade:	657b      	str	r3, [r7, #84]	; 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 8010ae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d10d      	bne.n	8010b02 <f_getfree+0xe4>
 8010ae6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010ae8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010aea:	1c5a      	adds	r2, r3, #1
 8010aec:	65ba      	str	r2, [r7, #88]	; 0x58
 8010aee:	4619      	mov	r1, r3
 8010af0:	f7fb ff90 	bl	800ca14 <move_window>
 8010af4:	4603      	mov	r3, r0
 8010af6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010afa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d179      	bne.n	8010bf6 <f_getfree+0x1d8>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 8010b02:	2308      	movs	r3, #8
 8010b04:	64bb      	str	r3, [r7, #72]	; 0x48
 8010b06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010b08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b0a:	4413      	add	r3, r2
 8010b0c:	3338      	adds	r3, #56	; 0x38
 8010b0e:	781b      	ldrb	r3, [r3, #0]
 8010b10:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8010b14:	e013      	b.n	8010b3e <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 8010b16:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010b1a:	f003 0301 	and.w	r3, r3, #1
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d102      	bne.n	8010b28 <f_getfree+0x10a>
 8010b22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010b24:	3301      	adds	r3, #1
 8010b26:	663b      	str	r3, [r7, #96]	; 0x60
							bm >>= 1;
 8010b28:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010b2c:	085b      	lsrs	r3, r3, #1
 8010b2e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 8010b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b34:	3b01      	subs	r3, #1
 8010b36:	64bb      	str	r3, [r7, #72]	; 0x48
 8010b38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b3a:	3b01      	subs	r3, #1
 8010b3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d002      	beq.n	8010b4a <f_getfree+0x12c>
 8010b44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d1e5      	bne.n	8010b16 <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 8010b4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b4c:	3301      	adds	r3, #1
 8010b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b52:	657b      	str	r3, [r7, #84]	; 0x54
					} while (clst);
 8010b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d1c2      	bne.n	8010ae0 <f_getfree+0xc2>
 8010b5a:	e04f      	b.n	8010bfc <f_getfree+0x1de>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8010b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b5e:	69db      	ldr	r3, [r3, #28]
 8010b60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b66:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0; p = 0;
 8010b68:	2300      	movs	r3, #0
 8010b6a:	657b      	str	r3, [r7, #84]	; 0x54
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	653b      	str	r3, [r7, #80]	; 0x50
					do {
						if (i == 0) {
 8010b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d113      	bne.n	8010b9e <f_getfree+0x180>
							res = move_window(fs, sect++);
 8010b76:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010b78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010b7a:	1c5a      	adds	r2, r3, #1
 8010b7c:	65ba      	str	r2, [r7, #88]	; 0x58
 8010b7e:	4619      	mov	r1, r3
 8010b80:	f7fb ff48 	bl	800ca14 <move_window>
 8010b84:	4603      	mov	r3, r0
 8010b86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							if (res != FR_OK) break;
 8010b8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d133      	bne.n	8010bfa <f_getfree+0x1dc>
							p = fs->win;
 8010b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b94:	3338      	adds	r3, #56	; 0x38
 8010b96:	653b      	str	r3, [r7, #80]	; 0x50
							i = SS(fs);
 8010b98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010b9c:	657b      	str	r3, [r7, #84]	; 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 8010b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ba0:	781b      	ldrb	r3, [r3, #0]
 8010ba2:	2b02      	cmp	r3, #2
 8010ba4:	d10f      	bne.n	8010bc6 <f_getfree+0x1a8>
							if (ld_word(p) == 0) nfree++;
 8010ba6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010ba8:	f7fb fb20 	bl	800c1ec <ld_word>
 8010bac:	4603      	mov	r3, r0
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d102      	bne.n	8010bb8 <f_getfree+0x19a>
 8010bb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010bb4:	3301      	adds	r3, #1
 8010bb6:	663b      	str	r3, [r7, #96]	; 0x60
							p += 2; i -= 2;
 8010bb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bba:	3302      	adds	r3, #2
 8010bbc:	653b      	str	r3, [r7, #80]	; 0x50
 8010bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010bc0:	3b02      	subs	r3, #2
 8010bc2:	657b      	str	r3, [r7, #84]	; 0x54
 8010bc4:	e010      	b.n	8010be8 <f_getfree+0x1ca>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8010bc6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010bc8:	f7fb fb28 	bl	800c21c <ld_dword>
 8010bcc:	4603      	mov	r3, r0
 8010bce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d102      	bne.n	8010bdc <f_getfree+0x1be>
 8010bd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010bd8:	3301      	adds	r3, #1
 8010bda:	663b      	str	r3, [r7, #96]	; 0x60
							p += 4; i -= 4;
 8010bdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bde:	3304      	adds	r3, #4
 8010be0:	653b      	str	r3, [r7, #80]	; 0x50
 8010be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010be4:	3b04      	subs	r3, #4
 8010be6:	657b      	str	r3, [r7, #84]	; 0x54
						}
					} while (--clst);
 8010be8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010bea:	3b01      	subs	r3, #1
 8010bec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010bee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d1bd      	bne.n	8010b70 <f_getfree+0x152>
 8010bf4:	e002      	b.n	8010bfc <f_getfree+0x1de>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 8010bf6:	bf00      	nop
 8010bf8:	e000      	b.n	8010bfc <f_getfree+0x1de>
							if (res != FR_OK) break;
 8010bfa:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8010bfc:	68bb      	ldr	r3, [r7, #8]
 8010bfe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010c00:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8010c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010c06:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8010c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c0a:	791a      	ldrb	r2, [r3, #4]
 8010c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c0e:	f042 0201 	orr.w	r2, r2, #1
 8010c12:	b2d2      	uxtb	r2, r2
 8010c14:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8010c16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	3768      	adds	r7, #104	; 0x68
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}
	...

08010c24 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010c24:	b480      	push	{r7}
 8010c26:	b087      	sub	sp, #28
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	60f8      	str	r0, [r7, #12]
 8010c2c:	60b9      	str	r1, [r7, #8]
 8010c2e:	4613      	mov	r3, r2
 8010c30:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010c32:	2301      	movs	r3, #1
 8010c34:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010c36:	2300      	movs	r3, #0
 8010c38:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010c3a:	4b1f      	ldr	r3, [pc, #124]	; (8010cb8 <FATFS_LinkDriverEx+0x94>)
 8010c3c:	7e1b      	ldrb	r3, [r3, #24]
 8010c3e:	b2db      	uxtb	r3, r3
 8010c40:	2b03      	cmp	r3, #3
 8010c42:	d831      	bhi.n	8010ca8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010c44:	4b1c      	ldr	r3, [pc, #112]	; (8010cb8 <FATFS_LinkDriverEx+0x94>)
 8010c46:	7e1b      	ldrb	r3, [r3, #24]
 8010c48:	b2db      	uxtb	r3, r3
 8010c4a:	461a      	mov	r2, r3
 8010c4c:	4b1a      	ldr	r3, [pc, #104]	; (8010cb8 <FATFS_LinkDriverEx+0x94>)
 8010c4e:	2100      	movs	r1, #0
 8010c50:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010c52:	4b19      	ldr	r3, [pc, #100]	; (8010cb8 <FATFS_LinkDriverEx+0x94>)
 8010c54:	7e1b      	ldrb	r3, [r3, #24]
 8010c56:	b2db      	uxtb	r3, r3
 8010c58:	4a17      	ldr	r2, [pc, #92]	; (8010cb8 <FATFS_LinkDriverEx+0x94>)
 8010c5a:	009b      	lsls	r3, r3, #2
 8010c5c:	4413      	add	r3, r2
 8010c5e:	68fa      	ldr	r2, [r7, #12]
 8010c60:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010c62:	4b15      	ldr	r3, [pc, #84]	; (8010cb8 <FATFS_LinkDriverEx+0x94>)
 8010c64:	7e1b      	ldrb	r3, [r3, #24]
 8010c66:	b2db      	uxtb	r3, r3
 8010c68:	461a      	mov	r2, r3
 8010c6a:	4b13      	ldr	r3, [pc, #76]	; (8010cb8 <FATFS_LinkDriverEx+0x94>)
 8010c6c:	4413      	add	r3, r2
 8010c6e:	79fa      	ldrb	r2, [r7, #7]
 8010c70:	751a      	strb	r2, [r3, #20]
    DiskNum = disk.nbr++;
 8010c72:	4b11      	ldr	r3, [pc, #68]	; (8010cb8 <FATFS_LinkDriverEx+0x94>)
 8010c74:	7e1b      	ldrb	r3, [r3, #24]
 8010c76:	b2db      	uxtb	r3, r3
 8010c78:	1c5a      	adds	r2, r3, #1
 8010c7a:	b2d1      	uxtb	r1, r2
 8010c7c:	4a0e      	ldr	r2, [pc, #56]	; (8010cb8 <FATFS_LinkDriverEx+0x94>)
 8010c7e:	7611      	strb	r1, [r2, #24]
 8010c80:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010c82:	7dbb      	ldrb	r3, [r7, #22]
 8010c84:	3330      	adds	r3, #48	; 0x30
 8010c86:	b2da      	uxtb	r2, r3
 8010c88:	68bb      	ldr	r3, [r7, #8]
 8010c8a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010c8c:	68bb      	ldr	r3, [r7, #8]
 8010c8e:	3301      	adds	r3, #1
 8010c90:	223a      	movs	r2, #58	; 0x3a
 8010c92:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010c94:	68bb      	ldr	r3, [r7, #8]
 8010c96:	3302      	adds	r3, #2
 8010c98:	222f      	movs	r2, #47	; 0x2f
 8010c9a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010c9c:	68bb      	ldr	r3, [r7, #8]
 8010c9e:	3303      	adds	r3, #3
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010caa:	4618      	mov	r0, r3
 8010cac:	371c      	adds	r7, #28
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop
 8010cb8:	2000219c 	.word	0x2000219c

08010cbc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b082      	sub	sp, #8
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
 8010cc4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	6839      	ldr	r1, [r7, #0]
 8010cca:	6878      	ldr	r0, [r7, #4]
 8010ccc:	f7ff ffaa 	bl	8010c24 <FATFS_LinkDriverEx>
 8010cd0:	4603      	mov	r3, r0
}
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	3708      	adds	r7, #8
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	bd80      	pop	{r7, pc}
	...

08010cdc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010cdc:	b480      	push	{r7}
 8010cde:	b085      	sub	sp, #20
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	6039      	str	r1, [r7, #0]
 8010ce6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010ce8:	88fb      	ldrh	r3, [r7, #6]
 8010cea:	2b7f      	cmp	r3, #127	; 0x7f
 8010cec:	d802      	bhi.n	8010cf4 <ff_convert+0x18>
		c = chr;
 8010cee:	88fb      	ldrh	r3, [r7, #6]
 8010cf0:	81fb      	strh	r3, [r7, #14]
 8010cf2:	e025      	b.n	8010d40 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010cf4:	683b      	ldr	r3, [r7, #0]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d00b      	beq.n	8010d12 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010cfa:	88fb      	ldrh	r3, [r7, #6]
 8010cfc:	2bff      	cmp	r3, #255	; 0xff
 8010cfe:	d805      	bhi.n	8010d0c <ff_convert+0x30>
 8010d00:	88fb      	ldrh	r3, [r7, #6]
 8010d02:	3b80      	subs	r3, #128	; 0x80
 8010d04:	4a12      	ldr	r2, [pc, #72]	; (8010d50 <ff_convert+0x74>)
 8010d06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d0a:	e000      	b.n	8010d0e <ff_convert+0x32>
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	81fb      	strh	r3, [r7, #14]
 8010d10:	e016      	b.n	8010d40 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8010d12:	2300      	movs	r3, #0
 8010d14:	81fb      	strh	r3, [r7, #14]
 8010d16:	e009      	b.n	8010d2c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010d18:	89fb      	ldrh	r3, [r7, #14]
 8010d1a:	4a0d      	ldr	r2, [pc, #52]	; (8010d50 <ff_convert+0x74>)
 8010d1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d20:	88fa      	ldrh	r2, [r7, #6]
 8010d22:	429a      	cmp	r2, r3
 8010d24:	d006      	beq.n	8010d34 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010d26:	89fb      	ldrh	r3, [r7, #14]
 8010d28:	3301      	adds	r3, #1
 8010d2a:	81fb      	strh	r3, [r7, #14]
 8010d2c:	89fb      	ldrh	r3, [r7, #14]
 8010d2e:	2b7f      	cmp	r3, #127	; 0x7f
 8010d30:	d9f2      	bls.n	8010d18 <ff_convert+0x3c>
 8010d32:	e000      	b.n	8010d36 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010d34:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010d36:	89fb      	ldrh	r3, [r7, #14]
 8010d38:	3380      	adds	r3, #128	; 0x80
 8010d3a:	b29b      	uxth	r3, r3
 8010d3c:	b2db      	uxtb	r3, r3
 8010d3e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010d40:	89fb      	ldrh	r3, [r7, #14]
}
 8010d42:	4618      	mov	r0, r3
 8010d44:	3714      	adds	r7, #20
 8010d46:	46bd      	mov	sp, r7
 8010d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4c:	4770      	bx	lr
 8010d4e:	bf00      	nop
 8010d50:	0801557c 	.word	0x0801557c

08010d54 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010d54:	b480      	push	{r7}
 8010d56:	b087      	sub	sp, #28
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8010d5e:	88fb      	ldrh	r3, [r7, #6]
 8010d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010d64:	d201      	bcs.n	8010d6a <ff_wtoupper+0x16>
 8010d66:	4b3e      	ldr	r3, [pc, #248]	; (8010e60 <ff_wtoupper+0x10c>)
 8010d68:	e000      	b.n	8010d6c <ff_wtoupper+0x18>
 8010d6a:	4b3e      	ldr	r3, [pc, #248]	; (8010e64 <ff_wtoupper+0x110>)
 8010d6c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8010d6e:	697b      	ldr	r3, [r7, #20]
 8010d70:	1c9a      	adds	r2, r3, #2
 8010d72:	617a      	str	r2, [r7, #20]
 8010d74:	881b      	ldrh	r3, [r3, #0]
 8010d76:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010d78:	8a7b      	ldrh	r3, [r7, #18]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d068      	beq.n	8010e50 <ff_wtoupper+0xfc>
 8010d7e:	88fa      	ldrh	r2, [r7, #6]
 8010d80:	8a7b      	ldrh	r3, [r7, #18]
 8010d82:	429a      	cmp	r2, r3
 8010d84:	d364      	bcc.n	8010e50 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010d86:	697b      	ldr	r3, [r7, #20]
 8010d88:	1c9a      	adds	r2, r3, #2
 8010d8a:	617a      	str	r2, [r7, #20]
 8010d8c:	881b      	ldrh	r3, [r3, #0]
 8010d8e:	823b      	strh	r3, [r7, #16]
 8010d90:	8a3b      	ldrh	r3, [r7, #16]
 8010d92:	0a1b      	lsrs	r3, r3, #8
 8010d94:	81fb      	strh	r3, [r7, #14]
 8010d96:	8a3b      	ldrh	r3, [r7, #16]
 8010d98:	b2db      	uxtb	r3, r3
 8010d9a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010d9c:	88fa      	ldrh	r2, [r7, #6]
 8010d9e:	8a79      	ldrh	r1, [r7, #18]
 8010da0:	8a3b      	ldrh	r3, [r7, #16]
 8010da2:	440b      	add	r3, r1
 8010da4:	429a      	cmp	r2, r3
 8010da6:	da49      	bge.n	8010e3c <ff_wtoupper+0xe8>
			switch (cmd) {
 8010da8:	89fb      	ldrh	r3, [r7, #14]
 8010daa:	2b08      	cmp	r3, #8
 8010dac:	d84f      	bhi.n	8010e4e <ff_wtoupper+0xfa>
 8010dae:	a201      	add	r2, pc, #4	; (adr r2, 8010db4 <ff_wtoupper+0x60>)
 8010db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010db4:	08010dd9 	.word	0x08010dd9
 8010db8:	08010deb 	.word	0x08010deb
 8010dbc:	08010e01 	.word	0x08010e01
 8010dc0:	08010e09 	.word	0x08010e09
 8010dc4:	08010e11 	.word	0x08010e11
 8010dc8:	08010e19 	.word	0x08010e19
 8010dcc:	08010e21 	.word	0x08010e21
 8010dd0:	08010e29 	.word	0x08010e29
 8010dd4:	08010e31 	.word	0x08010e31
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010dd8:	88fa      	ldrh	r2, [r7, #6]
 8010dda:	8a7b      	ldrh	r3, [r7, #18]
 8010ddc:	1ad3      	subs	r3, r2, r3
 8010dde:	005b      	lsls	r3, r3, #1
 8010de0:	697a      	ldr	r2, [r7, #20]
 8010de2:	4413      	add	r3, r2
 8010de4:	881b      	ldrh	r3, [r3, #0]
 8010de6:	80fb      	strh	r3, [r7, #6]
 8010de8:	e027      	b.n	8010e3a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8010dea:	88fa      	ldrh	r2, [r7, #6]
 8010dec:	8a7b      	ldrh	r3, [r7, #18]
 8010dee:	1ad3      	subs	r3, r2, r3
 8010df0:	b29b      	uxth	r3, r3
 8010df2:	f003 0301 	and.w	r3, r3, #1
 8010df6:	b29b      	uxth	r3, r3
 8010df8:	88fa      	ldrh	r2, [r7, #6]
 8010dfa:	1ad3      	subs	r3, r2, r3
 8010dfc:	80fb      	strh	r3, [r7, #6]
 8010dfe:	e01c      	b.n	8010e3a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010e00:	88fb      	ldrh	r3, [r7, #6]
 8010e02:	3b10      	subs	r3, #16
 8010e04:	80fb      	strh	r3, [r7, #6]
 8010e06:	e018      	b.n	8010e3a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010e08:	88fb      	ldrh	r3, [r7, #6]
 8010e0a:	3b20      	subs	r3, #32
 8010e0c:	80fb      	strh	r3, [r7, #6]
 8010e0e:	e014      	b.n	8010e3a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010e10:	88fb      	ldrh	r3, [r7, #6]
 8010e12:	3b30      	subs	r3, #48	; 0x30
 8010e14:	80fb      	strh	r3, [r7, #6]
 8010e16:	e010      	b.n	8010e3a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010e18:	88fb      	ldrh	r3, [r7, #6]
 8010e1a:	3b1a      	subs	r3, #26
 8010e1c:	80fb      	strh	r3, [r7, #6]
 8010e1e:	e00c      	b.n	8010e3a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010e20:	88fb      	ldrh	r3, [r7, #6]
 8010e22:	3308      	adds	r3, #8
 8010e24:	80fb      	strh	r3, [r7, #6]
 8010e26:	e008      	b.n	8010e3a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010e28:	88fb      	ldrh	r3, [r7, #6]
 8010e2a:	3b50      	subs	r3, #80	; 0x50
 8010e2c:	80fb      	strh	r3, [r7, #6]
 8010e2e:	e004      	b.n	8010e3a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010e30:	88fb      	ldrh	r3, [r7, #6]
 8010e32:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8010e36:	80fb      	strh	r3, [r7, #6]
 8010e38:	bf00      	nop
			}
			break;
 8010e3a:	e008      	b.n	8010e4e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010e3c:	89fb      	ldrh	r3, [r7, #14]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d195      	bne.n	8010d6e <ff_wtoupper+0x1a>
 8010e42:	8a3b      	ldrh	r3, [r7, #16]
 8010e44:	005b      	lsls	r3, r3, #1
 8010e46:	697a      	ldr	r2, [r7, #20]
 8010e48:	4413      	add	r3, r2
 8010e4a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010e4c:	e78f      	b.n	8010d6e <ff_wtoupper+0x1a>
			break;
 8010e4e:	bf00      	nop
	}

	return chr;
 8010e50:	88fb      	ldrh	r3, [r7, #6]
}
 8010e52:	4618      	mov	r0, r3
 8010e54:	371c      	adds	r7, #28
 8010e56:	46bd      	mov	sp, r7
 8010e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5c:	4770      	bx	lr
 8010e5e:	bf00      	nop
 8010e60:	0801567c 	.word	0x0801567c
 8010e64:	08015870 	.word	0x08015870

08010e68 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8010e68:	b480      	push	{r7}
 8010e6a:	b085      	sub	sp, #20
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	4603      	mov	r3, r0
 8010e70:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010e72:	2300      	movs	r3, #0
 8010e74:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8010e76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010e7a:	2b84      	cmp	r3, #132	; 0x84
 8010e7c:	d005      	beq.n	8010e8a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8010e7e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	4413      	add	r3, r2
 8010e86:	3303      	adds	r3, #3
 8010e88:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8010e8a:	68fb      	ldr	r3, [r7, #12]
}
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	3714      	adds	r7, #20
 8010e90:	46bd      	mov	sp, r7
 8010e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e96:	4770      	bx	lr

08010e98 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8010e98:	b480      	push	{r7}
 8010e9a:	b083      	sub	sp, #12
 8010e9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e9e:	f3ef 8305 	mrs	r3, IPSR
 8010ea2:	607b      	str	r3, [r7, #4]
  return(result);
 8010ea4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	bf14      	ite	ne
 8010eaa:	2301      	movne	r3, #1
 8010eac:	2300      	moveq	r3, #0
 8010eae:	b2db      	uxtb	r3, r3
}
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	370c      	adds	r7, #12
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eba:	4770      	bx	lr

08010ebc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8010ec0:	f001 f916 	bl	80120f0 <vTaskStartScheduler>
  
  return osOK;
 8010ec4:	2300      	movs	r3, #0
}
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	bd80      	pop	{r7, pc}

08010eca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010eca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ecc:	b089      	sub	sp, #36	; 0x24
 8010ece:	af04      	add	r7, sp, #16
 8010ed0:	6078      	str	r0, [r7, #4]
 8010ed2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	695b      	ldr	r3, [r3, #20]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d020      	beq.n	8010f1e <osThreadCreate+0x54>
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	699b      	ldr	r3, [r3, #24]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d01c      	beq.n	8010f1e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	685c      	ldr	r4, [r3, #4]
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	681d      	ldr	r5, [r3, #0]
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	691e      	ldr	r6, [r3, #16]
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	f7ff ffb6 	bl	8010e68 <makeFreeRtosPriority>
 8010efc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	695b      	ldr	r3, [r3, #20]
 8010f02:	687a      	ldr	r2, [r7, #4]
 8010f04:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010f06:	9202      	str	r2, [sp, #8]
 8010f08:	9301      	str	r3, [sp, #4]
 8010f0a:	9100      	str	r1, [sp, #0]
 8010f0c:	683b      	ldr	r3, [r7, #0]
 8010f0e:	4632      	mov	r2, r6
 8010f10:	4629      	mov	r1, r5
 8010f12:	4620      	mov	r0, r4
 8010f14:	f000 ff0e 	bl	8011d34 <xTaskCreateStatic>
 8010f18:	4603      	mov	r3, r0
 8010f1a:	60fb      	str	r3, [r7, #12]
 8010f1c:	e01c      	b.n	8010f58 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	685c      	ldr	r4, [r3, #4]
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010f2a:	b29e      	uxth	r6, r3
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010f32:	4618      	mov	r0, r3
 8010f34:	f7ff ff98 	bl	8010e68 <makeFreeRtosPriority>
 8010f38:	4602      	mov	r2, r0
 8010f3a:	f107 030c 	add.w	r3, r7, #12
 8010f3e:	9301      	str	r3, [sp, #4]
 8010f40:	9200      	str	r2, [sp, #0]
 8010f42:	683b      	ldr	r3, [r7, #0]
 8010f44:	4632      	mov	r2, r6
 8010f46:	4629      	mov	r1, r5
 8010f48:	4620      	mov	r0, r4
 8010f4a:	f000 ff50 	bl	8011dee <xTaskCreate>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	2b01      	cmp	r3, #1
 8010f52:	d001      	beq.n	8010f58 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8010f54:	2300      	movs	r3, #0
 8010f56:	e000      	b.n	8010f5a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8010f58:	68fb      	ldr	r3, [r7, #12]
}
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	3714      	adds	r7, #20
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010f62 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8010f62:	b580      	push	{r7, lr}
 8010f64:	b084      	sub	sp, #16
 8010f66:	af00      	add	r7, sp, #0
 8010f68:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d001      	beq.n	8010f78 <osDelay+0x16>
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	e000      	b.n	8010f7a <osDelay+0x18>
 8010f78:	2301      	movs	r3, #1
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f001 f884 	bl	8012088 <vTaskDelay>
  
  return osOK;
 8010f80:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010f82:	4618      	mov	r0, r3
 8010f84:	3710      	adds	r7, #16
 8010f86:	46bd      	mov	sp, r7
 8010f88:	bd80      	pop	{r7, pc}

08010f8a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8010f8a:	b590      	push	{r4, r7, lr}
 8010f8c:	b085      	sub	sp, #20
 8010f8e:	af02      	add	r7, sp, #8
 8010f90:	6078      	str	r0, [r7, #4]
 8010f92:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	689b      	ldr	r3, [r3, #8]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d011      	beq.n	8010fc0 <osMessageCreate+0x36>
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	68db      	ldr	r3, [r3, #12]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d00d      	beq.n	8010fc0 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	6818      	ldr	r0, [r3, #0]
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	6859      	ldr	r1, [r3, #4]
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	689a      	ldr	r2, [r3, #8]
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	68db      	ldr	r3, [r3, #12]
 8010fb4:	2400      	movs	r4, #0
 8010fb6:	9400      	str	r4, [sp, #0]
 8010fb8:	f000 f9e0 	bl	801137c <xQueueGenericCreateStatic>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	e008      	b.n	8010fd2 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	6818      	ldr	r0, [r3, #0]
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	685b      	ldr	r3, [r3, #4]
 8010fc8:	2200      	movs	r2, #0
 8010fca:	4619      	mov	r1, r3
 8010fcc:	f000 fa4e 	bl	801146c <xQueueGenericCreate>
 8010fd0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	370c      	adds	r7, #12
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	bd90      	pop	{r4, r7, pc}
	...

08010fdc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b086      	sub	sp, #24
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	60f8      	str	r0, [r7, #12]
 8010fe4:	60b9      	str	r1, [r7, #8]
 8010fe6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8010fe8:	2300      	movs	r3, #0
 8010fea:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8010ff0:	697b      	ldr	r3, [r7, #20]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d101      	bne.n	8010ffa <osMessagePut+0x1e>
    ticks = 1;
 8010ff6:	2301      	movs	r3, #1
 8010ff8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8010ffa:	f7ff ff4d 	bl	8010e98 <inHandlerMode>
 8010ffe:	4603      	mov	r3, r0
 8011000:	2b00      	cmp	r3, #0
 8011002:	d018      	beq.n	8011036 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8011004:	f107 0210 	add.w	r2, r7, #16
 8011008:	f107 0108 	add.w	r1, r7, #8
 801100c:	2300      	movs	r3, #0
 801100e:	68f8      	ldr	r0, [r7, #12]
 8011010:	f000 fb84 	bl	801171c <xQueueGenericSendFromISR>
 8011014:	4603      	mov	r3, r0
 8011016:	2b01      	cmp	r3, #1
 8011018:	d001      	beq.n	801101e <osMessagePut+0x42>
      return osErrorOS;
 801101a:	23ff      	movs	r3, #255	; 0xff
 801101c:	e018      	b.n	8011050 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801101e:	693b      	ldr	r3, [r7, #16]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d014      	beq.n	801104e <osMessagePut+0x72>
 8011024:	4b0c      	ldr	r3, [pc, #48]	; (8011058 <osMessagePut+0x7c>)
 8011026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801102a:	601a      	str	r2, [r3, #0]
 801102c:	f3bf 8f4f 	dsb	sy
 8011030:	f3bf 8f6f 	isb	sy
 8011034:	e00b      	b.n	801104e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8011036:	f107 0108 	add.w	r1, r7, #8
 801103a:	2300      	movs	r3, #0
 801103c:	697a      	ldr	r2, [r7, #20]
 801103e:	68f8      	ldr	r0, [r7, #12]
 8011040:	f000 fa6e 	bl	8011520 <xQueueGenericSend>
 8011044:	4603      	mov	r3, r0
 8011046:	2b01      	cmp	r3, #1
 8011048:	d001      	beq.n	801104e <osMessagePut+0x72>
      return osErrorOS;
 801104a:	23ff      	movs	r3, #255	; 0xff
 801104c:	e000      	b.n	8011050 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 801104e:	2300      	movs	r3, #0
}
 8011050:	4618      	mov	r0, r3
 8011052:	3718      	adds	r7, #24
 8011054:	46bd      	mov	sp, r7
 8011056:	bd80      	pop	{r7, pc}
 8011058:	e000ed04 	.word	0xe000ed04

0801105c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 801105c:	b590      	push	{r4, r7, lr}
 801105e:	b08b      	sub	sp, #44	; 0x2c
 8011060:	af00      	add	r7, sp, #0
 8011062:	60f8      	str	r0, [r7, #12]
 8011064:	60b9      	str	r1, [r7, #8]
 8011066:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8011068:	68bb      	ldr	r3, [r7, #8]
 801106a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 801106c:	2300      	movs	r3, #0
 801106e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8011070:	68bb      	ldr	r3, [r7, #8]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d10a      	bne.n	801108c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8011076:	2380      	movs	r3, #128	; 0x80
 8011078:	617b      	str	r3, [r7, #20]
    return event;
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	461c      	mov	r4, r3
 801107e:	f107 0314 	add.w	r3, r7, #20
 8011082:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011086:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801108a:	e054      	b.n	8011136 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 801108c:	2300      	movs	r3, #0
 801108e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8011090:	2300      	movs	r3, #0
 8011092:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	f1b3 3fff 	cmp.w	r3, #4294967295
 801109a:	d103      	bne.n	80110a4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 801109c:	f04f 33ff 	mov.w	r3, #4294967295
 80110a0:	627b      	str	r3, [r7, #36]	; 0x24
 80110a2:	e009      	b.n	80110b8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d006      	beq.n	80110b8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80110ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d101      	bne.n	80110b8 <osMessageGet+0x5c>
      ticks = 1;
 80110b4:	2301      	movs	r3, #1
 80110b6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80110b8:	f7ff feee 	bl	8010e98 <inHandlerMode>
 80110bc:	4603      	mov	r3, r0
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d01c      	beq.n	80110fc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80110c2:	f107 0220 	add.w	r2, r7, #32
 80110c6:	f107 0314 	add.w	r3, r7, #20
 80110ca:	3304      	adds	r3, #4
 80110cc:	4619      	mov	r1, r3
 80110ce:	68b8      	ldr	r0, [r7, #8]
 80110d0:	f000 fca0 	bl	8011a14 <xQueueReceiveFromISR>
 80110d4:	4603      	mov	r3, r0
 80110d6:	2b01      	cmp	r3, #1
 80110d8:	d102      	bne.n	80110e0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80110da:	2310      	movs	r3, #16
 80110dc:	617b      	str	r3, [r7, #20]
 80110de:	e001      	b.n	80110e4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80110e0:	2300      	movs	r3, #0
 80110e2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80110e4:	6a3b      	ldr	r3, [r7, #32]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d01d      	beq.n	8011126 <osMessageGet+0xca>
 80110ea:	4b15      	ldr	r3, [pc, #84]	; (8011140 <osMessageGet+0xe4>)
 80110ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110f0:	601a      	str	r2, [r3, #0]
 80110f2:	f3bf 8f4f 	dsb	sy
 80110f6:	f3bf 8f6f 	isb	sy
 80110fa:	e014      	b.n	8011126 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80110fc:	f107 0314 	add.w	r3, r7, #20
 8011100:	3304      	adds	r3, #4
 8011102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011104:	4619      	mov	r1, r3
 8011106:	68b8      	ldr	r0, [r7, #8]
 8011108:	f000 fba4 	bl	8011854 <xQueueReceive>
 801110c:	4603      	mov	r3, r0
 801110e:	2b01      	cmp	r3, #1
 8011110:	d102      	bne.n	8011118 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8011112:	2310      	movs	r3, #16
 8011114:	617b      	str	r3, [r7, #20]
 8011116:	e006      	b.n	8011126 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8011118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801111a:	2b00      	cmp	r3, #0
 801111c:	d101      	bne.n	8011122 <osMessageGet+0xc6>
 801111e:	2300      	movs	r3, #0
 8011120:	e000      	b.n	8011124 <osMessageGet+0xc8>
 8011122:	2340      	movs	r3, #64	; 0x40
 8011124:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	461c      	mov	r4, r3
 801112a:	f107 0314 	add.w	r3, r7, #20
 801112e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011132:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011136:	68f8      	ldr	r0, [r7, #12]
 8011138:	372c      	adds	r7, #44	; 0x2c
 801113a:	46bd      	mov	sp, r7
 801113c:	bd90      	pop	{r4, r7, pc}
 801113e:	bf00      	nop
 8011140:	e000ed04 	.word	0xe000ed04

08011144 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011144:	b480      	push	{r7}
 8011146:	b083      	sub	sp, #12
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	f103 0208 	add.w	r2, r3, #8
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	f04f 32ff 	mov.w	r2, #4294967295
 801115c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	f103 0208 	add.w	r2, r3, #8
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	f103 0208 	add.w	r2, r3, #8
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	2200      	movs	r2, #0
 8011176:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011178:	bf00      	nop
 801117a:	370c      	adds	r7, #12
 801117c:	46bd      	mov	sp, r7
 801117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011182:	4770      	bx	lr

08011184 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011184:	b480      	push	{r7}
 8011186:	b083      	sub	sp, #12
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	2200      	movs	r2, #0
 8011190:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011192:	bf00      	nop
 8011194:	370c      	adds	r7, #12
 8011196:	46bd      	mov	sp, r7
 8011198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801119c:	4770      	bx	lr

0801119e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801119e:	b480      	push	{r7}
 80111a0:	b085      	sub	sp, #20
 80111a2:	af00      	add	r7, sp, #0
 80111a4:	6078      	str	r0, [r7, #4]
 80111a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	685b      	ldr	r3, [r3, #4]
 80111ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80111ae:	683b      	ldr	r3, [r7, #0]
 80111b0:	68fa      	ldr	r2, [r7, #12]
 80111b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	689a      	ldr	r2, [r3, #8]
 80111b8:	683b      	ldr	r3, [r7, #0]
 80111ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	689b      	ldr	r3, [r3, #8]
 80111c0:	683a      	ldr	r2, [r7, #0]
 80111c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	683a      	ldr	r2, [r7, #0]
 80111c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80111ca:	683b      	ldr	r3, [r7, #0]
 80111cc:	687a      	ldr	r2, [r7, #4]
 80111ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	1c5a      	adds	r2, r3, #1
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	601a      	str	r2, [r3, #0]
}
 80111da:	bf00      	nop
 80111dc:	3714      	adds	r7, #20
 80111de:	46bd      	mov	sp, r7
 80111e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e4:	4770      	bx	lr

080111e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80111e6:	b480      	push	{r7}
 80111e8:	b085      	sub	sp, #20
 80111ea:	af00      	add	r7, sp, #0
 80111ec:	6078      	str	r0, [r7, #4]
 80111ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80111f0:	683b      	ldr	r3, [r7, #0]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80111f6:	68bb      	ldr	r3, [r7, #8]
 80111f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111fc:	d103      	bne.n	8011206 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	691b      	ldr	r3, [r3, #16]
 8011202:	60fb      	str	r3, [r7, #12]
 8011204:	e00c      	b.n	8011220 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	3308      	adds	r3, #8
 801120a:	60fb      	str	r3, [r7, #12]
 801120c:	e002      	b.n	8011214 <vListInsert+0x2e>
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	685b      	ldr	r3, [r3, #4]
 8011212:	60fb      	str	r3, [r7, #12]
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	685b      	ldr	r3, [r3, #4]
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	68ba      	ldr	r2, [r7, #8]
 801121c:	429a      	cmp	r2, r3
 801121e:	d2f6      	bcs.n	801120e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	685a      	ldr	r2, [r3, #4]
 8011224:	683b      	ldr	r3, [r7, #0]
 8011226:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	685b      	ldr	r3, [r3, #4]
 801122c:	683a      	ldr	r2, [r7, #0]
 801122e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011230:	683b      	ldr	r3, [r7, #0]
 8011232:	68fa      	ldr	r2, [r7, #12]
 8011234:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	683a      	ldr	r2, [r7, #0]
 801123a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801123c:	683b      	ldr	r3, [r7, #0]
 801123e:	687a      	ldr	r2, [r7, #4]
 8011240:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	1c5a      	adds	r2, r3, #1
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	601a      	str	r2, [r3, #0]
}
 801124c:	bf00      	nop
 801124e:	3714      	adds	r7, #20
 8011250:	46bd      	mov	sp, r7
 8011252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011256:	4770      	bx	lr

08011258 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011258:	b480      	push	{r7}
 801125a:	b085      	sub	sp, #20
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	691b      	ldr	r3, [r3, #16]
 8011264:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	685b      	ldr	r3, [r3, #4]
 801126a:	687a      	ldr	r2, [r7, #4]
 801126c:	6892      	ldr	r2, [r2, #8]
 801126e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	689b      	ldr	r3, [r3, #8]
 8011274:	687a      	ldr	r2, [r7, #4]
 8011276:	6852      	ldr	r2, [r2, #4]
 8011278:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	685b      	ldr	r3, [r3, #4]
 801127e:	687a      	ldr	r2, [r7, #4]
 8011280:	429a      	cmp	r2, r3
 8011282:	d103      	bne.n	801128c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	689a      	ldr	r2, [r3, #8]
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	2200      	movs	r2, #0
 8011290:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	1e5a      	subs	r2, r3, #1
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	681b      	ldr	r3, [r3, #0]
}
 80112a0:	4618      	mov	r0, r3
 80112a2:	3714      	adds	r7, #20
 80112a4:	46bd      	mov	sp, r7
 80112a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112aa:	4770      	bx	lr

080112ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b084      	sub	sp, #16
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
 80112b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d10a      	bne.n	80112d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80112c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112c4:	f383 8811 	msr	BASEPRI, r3
 80112c8:	f3bf 8f6f 	isb	sy
 80112cc:	f3bf 8f4f 	dsb	sy
 80112d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80112d2:	bf00      	nop
 80112d4:	e7fe      	b.n	80112d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80112d6:	f001 fd65 	bl	8012da4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	681a      	ldr	r2, [r3, #0]
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80112e2:	68f9      	ldr	r1, [r7, #12]
 80112e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80112e6:	fb01 f303 	mul.w	r3, r1, r3
 80112ea:	441a      	add	r2, r3
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	2200      	movs	r2, #0
 80112f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	681a      	ldr	r2, [r3, #0]
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	681a      	ldr	r2, [r3, #0]
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011306:	3b01      	subs	r3, #1
 8011308:	68f9      	ldr	r1, [r7, #12]
 801130a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801130c:	fb01 f303 	mul.w	r3, r1, r3
 8011310:	441a      	add	r2, r3
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	22ff      	movs	r2, #255	; 0xff
 801131a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	22ff      	movs	r2, #255	; 0xff
 8011322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011326:	683b      	ldr	r3, [r7, #0]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d114      	bne.n	8011356 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	691b      	ldr	r3, [r3, #16]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d01a      	beq.n	801136a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	3310      	adds	r3, #16
 8011338:	4618      	mov	r0, r3
 801133a:	f001 f93b 	bl	80125b4 <xTaskRemoveFromEventList>
 801133e:	4603      	mov	r3, r0
 8011340:	2b00      	cmp	r3, #0
 8011342:	d012      	beq.n	801136a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011344:	4b0c      	ldr	r3, [pc, #48]	; (8011378 <xQueueGenericReset+0xcc>)
 8011346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801134a:	601a      	str	r2, [r3, #0]
 801134c:	f3bf 8f4f 	dsb	sy
 8011350:	f3bf 8f6f 	isb	sy
 8011354:	e009      	b.n	801136a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	3310      	adds	r3, #16
 801135a:	4618      	mov	r0, r3
 801135c:	f7ff fef2 	bl	8011144 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	3324      	adds	r3, #36	; 0x24
 8011364:	4618      	mov	r0, r3
 8011366:	f7ff feed 	bl	8011144 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801136a:	f001 fd4b 	bl	8012e04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801136e:	2301      	movs	r3, #1
}
 8011370:	4618      	mov	r0, r3
 8011372:	3710      	adds	r7, #16
 8011374:	46bd      	mov	sp, r7
 8011376:	bd80      	pop	{r7, pc}
 8011378:	e000ed04 	.word	0xe000ed04

0801137c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801137c:	b580      	push	{r7, lr}
 801137e:	b08e      	sub	sp, #56	; 0x38
 8011380:	af02      	add	r7, sp, #8
 8011382:	60f8      	str	r0, [r7, #12]
 8011384:	60b9      	str	r1, [r7, #8]
 8011386:	607a      	str	r2, [r7, #4]
 8011388:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d10a      	bne.n	80113a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8011390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011394:	f383 8811 	msr	BASEPRI, r3
 8011398:	f3bf 8f6f 	isb	sy
 801139c:	f3bf 8f4f 	dsb	sy
 80113a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80113a2:	bf00      	nop
 80113a4:	e7fe      	b.n	80113a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80113a6:	683b      	ldr	r3, [r7, #0]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d10a      	bne.n	80113c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80113ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113b0:	f383 8811 	msr	BASEPRI, r3
 80113b4:	f3bf 8f6f 	isb	sy
 80113b8:	f3bf 8f4f 	dsb	sy
 80113bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80113be:	bf00      	nop
 80113c0:	e7fe      	b.n	80113c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d002      	beq.n	80113ce <xQueueGenericCreateStatic+0x52>
 80113c8:	68bb      	ldr	r3, [r7, #8]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d001      	beq.n	80113d2 <xQueueGenericCreateStatic+0x56>
 80113ce:	2301      	movs	r3, #1
 80113d0:	e000      	b.n	80113d4 <xQueueGenericCreateStatic+0x58>
 80113d2:	2300      	movs	r3, #0
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d10a      	bne.n	80113ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80113d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113dc:	f383 8811 	msr	BASEPRI, r3
 80113e0:	f3bf 8f6f 	isb	sy
 80113e4:	f3bf 8f4f 	dsb	sy
 80113e8:	623b      	str	r3, [r7, #32]
}
 80113ea:	bf00      	nop
 80113ec:	e7fe      	b.n	80113ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d102      	bne.n	80113fa <xQueueGenericCreateStatic+0x7e>
 80113f4:	68bb      	ldr	r3, [r7, #8]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d101      	bne.n	80113fe <xQueueGenericCreateStatic+0x82>
 80113fa:	2301      	movs	r3, #1
 80113fc:	e000      	b.n	8011400 <xQueueGenericCreateStatic+0x84>
 80113fe:	2300      	movs	r3, #0
 8011400:	2b00      	cmp	r3, #0
 8011402:	d10a      	bne.n	801141a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8011404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011408:	f383 8811 	msr	BASEPRI, r3
 801140c:	f3bf 8f6f 	isb	sy
 8011410:	f3bf 8f4f 	dsb	sy
 8011414:	61fb      	str	r3, [r7, #28]
}
 8011416:	bf00      	nop
 8011418:	e7fe      	b.n	8011418 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801141a:	2348      	movs	r3, #72	; 0x48
 801141c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801141e:	697b      	ldr	r3, [r7, #20]
 8011420:	2b48      	cmp	r3, #72	; 0x48
 8011422:	d00a      	beq.n	801143a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8011424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011428:	f383 8811 	msr	BASEPRI, r3
 801142c:	f3bf 8f6f 	isb	sy
 8011430:	f3bf 8f4f 	dsb	sy
 8011434:	61bb      	str	r3, [r7, #24]
}
 8011436:	bf00      	nop
 8011438:	e7fe      	b.n	8011438 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801143a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801143c:	683b      	ldr	r3, [r7, #0]
 801143e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011442:	2b00      	cmp	r3, #0
 8011444:	d00d      	beq.n	8011462 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011448:	2201      	movs	r2, #1
 801144a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801144e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011454:	9300      	str	r3, [sp, #0]
 8011456:	4613      	mov	r3, r2
 8011458:	687a      	ldr	r2, [r7, #4]
 801145a:	68b9      	ldr	r1, [r7, #8]
 801145c:	68f8      	ldr	r0, [r7, #12]
 801145e:	f000 f83f 	bl	80114e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011464:	4618      	mov	r0, r3
 8011466:	3730      	adds	r7, #48	; 0x30
 8011468:	46bd      	mov	sp, r7
 801146a:	bd80      	pop	{r7, pc}

0801146c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801146c:	b580      	push	{r7, lr}
 801146e:	b08a      	sub	sp, #40	; 0x28
 8011470:	af02      	add	r7, sp, #8
 8011472:	60f8      	str	r0, [r7, #12]
 8011474:	60b9      	str	r1, [r7, #8]
 8011476:	4613      	mov	r3, r2
 8011478:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d10a      	bne.n	8011496 <xQueueGenericCreate+0x2a>
	__asm volatile
 8011480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011484:	f383 8811 	msr	BASEPRI, r3
 8011488:	f3bf 8f6f 	isb	sy
 801148c:	f3bf 8f4f 	dsb	sy
 8011490:	613b      	str	r3, [r7, #16]
}
 8011492:	bf00      	nop
 8011494:	e7fe      	b.n	8011494 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	68ba      	ldr	r2, [r7, #8]
 801149a:	fb02 f303 	mul.w	r3, r2, r3
 801149e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80114a0:	69fb      	ldr	r3, [r7, #28]
 80114a2:	3348      	adds	r3, #72	; 0x48
 80114a4:	4618      	mov	r0, r3
 80114a6:	f001 fd9f 	bl	8012fe8 <pvPortMalloc>
 80114aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80114ac:	69bb      	ldr	r3, [r7, #24]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d011      	beq.n	80114d6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80114b2:	69bb      	ldr	r3, [r7, #24]
 80114b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80114b6:	697b      	ldr	r3, [r7, #20]
 80114b8:	3348      	adds	r3, #72	; 0x48
 80114ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80114bc:	69bb      	ldr	r3, [r7, #24]
 80114be:	2200      	movs	r2, #0
 80114c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80114c4:	79fa      	ldrb	r2, [r7, #7]
 80114c6:	69bb      	ldr	r3, [r7, #24]
 80114c8:	9300      	str	r3, [sp, #0]
 80114ca:	4613      	mov	r3, r2
 80114cc:	697a      	ldr	r2, [r7, #20]
 80114ce:	68b9      	ldr	r1, [r7, #8]
 80114d0:	68f8      	ldr	r0, [r7, #12]
 80114d2:	f000 f805 	bl	80114e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80114d6:	69bb      	ldr	r3, [r7, #24]
	}
 80114d8:	4618      	mov	r0, r3
 80114da:	3720      	adds	r7, #32
 80114dc:	46bd      	mov	sp, r7
 80114de:	bd80      	pop	{r7, pc}

080114e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b084      	sub	sp, #16
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	60f8      	str	r0, [r7, #12]
 80114e8:	60b9      	str	r1, [r7, #8]
 80114ea:	607a      	str	r2, [r7, #4]
 80114ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80114ee:	68bb      	ldr	r3, [r7, #8]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d103      	bne.n	80114fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80114f4:	69bb      	ldr	r3, [r7, #24]
 80114f6:	69ba      	ldr	r2, [r7, #24]
 80114f8:	601a      	str	r2, [r3, #0]
 80114fa:	e002      	b.n	8011502 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80114fc:	69bb      	ldr	r3, [r7, #24]
 80114fe:	687a      	ldr	r2, [r7, #4]
 8011500:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011502:	69bb      	ldr	r3, [r7, #24]
 8011504:	68fa      	ldr	r2, [r7, #12]
 8011506:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011508:	69bb      	ldr	r3, [r7, #24]
 801150a:	68ba      	ldr	r2, [r7, #8]
 801150c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801150e:	2101      	movs	r1, #1
 8011510:	69b8      	ldr	r0, [r7, #24]
 8011512:	f7ff fecb 	bl	80112ac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011516:	bf00      	nop
 8011518:	3710      	adds	r7, #16
 801151a:	46bd      	mov	sp, r7
 801151c:	bd80      	pop	{r7, pc}
	...

08011520 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011520:	b580      	push	{r7, lr}
 8011522:	b08e      	sub	sp, #56	; 0x38
 8011524:	af00      	add	r7, sp, #0
 8011526:	60f8      	str	r0, [r7, #12]
 8011528:	60b9      	str	r1, [r7, #8]
 801152a:	607a      	str	r2, [r7, #4]
 801152c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801152e:	2300      	movs	r3, #0
 8011530:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011538:	2b00      	cmp	r3, #0
 801153a:	d10a      	bne.n	8011552 <xQueueGenericSend+0x32>
	__asm volatile
 801153c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011540:	f383 8811 	msr	BASEPRI, r3
 8011544:	f3bf 8f6f 	isb	sy
 8011548:	f3bf 8f4f 	dsb	sy
 801154c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801154e:	bf00      	nop
 8011550:	e7fe      	b.n	8011550 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011552:	68bb      	ldr	r3, [r7, #8]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d103      	bne.n	8011560 <xQueueGenericSend+0x40>
 8011558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801155c:	2b00      	cmp	r3, #0
 801155e:	d101      	bne.n	8011564 <xQueueGenericSend+0x44>
 8011560:	2301      	movs	r3, #1
 8011562:	e000      	b.n	8011566 <xQueueGenericSend+0x46>
 8011564:	2300      	movs	r3, #0
 8011566:	2b00      	cmp	r3, #0
 8011568:	d10a      	bne.n	8011580 <xQueueGenericSend+0x60>
	__asm volatile
 801156a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801156e:	f383 8811 	msr	BASEPRI, r3
 8011572:	f3bf 8f6f 	isb	sy
 8011576:	f3bf 8f4f 	dsb	sy
 801157a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801157c:	bf00      	nop
 801157e:	e7fe      	b.n	801157e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011580:	683b      	ldr	r3, [r7, #0]
 8011582:	2b02      	cmp	r3, #2
 8011584:	d103      	bne.n	801158e <xQueueGenericSend+0x6e>
 8011586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801158a:	2b01      	cmp	r3, #1
 801158c:	d101      	bne.n	8011592 <xQueueGenericSend+0x72>
 801158e:	2301      	movs	r3, #1
 8011590:	e000      	b.n	8011594 <xQueueGenericSend+0x74>
 8011592:	2300      	movs	r3, #0
 8011594:	2b00      	cmp	r3, #0
 8011596:	d10a      	bne.n	80115ae <xQueueGenericSend+0x8e>
	__asm volatile
 8011598:	f04f 0350 	mov.w	r3, #80	; 0x50
 801159c:	f383 8811 	msr	BASEPRI, r3
 80115a0:	f3bf 8f6f 	isb	sy
 80115a4:	f3bf 8f4f 	dsb	sy
 80115a8:	623b      	str	r3, [r7, #32]
}
 80115aa:	bf00      	nop
 80115ac:	e7fe      	b.n	80115ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80115ae:	f001 f9c1 	bl	8012934 <xTaskGetSchedulerState>
 80115b2:	4603      	mov	r3, r0
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d102      	bne.n	80115be <xQueueGenericSend+0x9e>
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d101      	bne.n	80115c2 <xQueueGenericSend+0xa2>
 80115be:	2301      	movs	r3, #1
 80115c0:	e000      	b.n	80115c4 <xQueueGenericSend+0xa4>
 80115c2:	2300      	movs	r3, #0
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d10a      	bne.n	80115de <xQueueGenericSend+0xbe>
	__asm volatile
 80115c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115cc:	f383 8811 	msr	BASEPRI, r3
 80115d0:	f3bf 8f6f 	isb	sy
 80115d4:	f3bf 8f4f 	dsb	sy
 80115d8:	61fb      	str	r3, [r7, #28]
}
 80115da:	bf00      	nop
 80115dc:	e7fe      	b.n	80115dc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80115de:	f001 fbe1 	bl	8012da4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80115e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80115e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115ea:	429a      	cmp	r2, r3
 80115ec:	d302      	bcc.n	80115f4 <xQueueGenericSend+0xd4>
 80115ee:	683b      	ldr	r3, [r7, #0]
 80115f0:	2b02      	cmp	r3, #2
 80115f2:	d129      	bne.n	8011648 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80115f4:	683a      	ldr	r2, [r7, #0]
 80115f6:	68b9      	ldr	r1, [r7, #8]
 80115f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80115fa:	f000 fa8b 	bl	8011b14 <prvCopyDataToQueue>
 80115fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011604:	2b00      	cmp	r3, #0
 8011606:	d010      	beq.n	801162a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801160a:	3324      	adds	r3, #36	; 0x24
 801160c:	4618      	mov	r0, r3
 801160e:	f000 ffd1 	bl	80125b4 <xTaskRemoveFromEventList>
 8011612:	4603      	mov	r3, r0
 8011614:	2b00      	cmp	r3, #0
 8011616:	d013      	beq.n	8011640 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011618:	4b3f      	ldr	r3, [pc, #252]	; (8011718 <xQueueGenericSend+0x1f8>)
 801161a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801161e:	601a      	str	r2, [r3, #0]
 8011620:	f3bf 8f4f 	dsb	sy
 8011624:	f3bf 8f6f 	isb	sy
 8011628:	e00a      	b.n	8011640 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801162a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801162c:	2b00      	cmp	r3, #0
 801162e:	d007      	beq.n	8011640 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011630:	4b39      	ldr	r3, [pc, #228]	; (8011718 <xQueueGenericSend+0x1f8>)
 8011632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011636:	601a      	str	r2, [r3, #0]
 8011638:	f3bf 8f4f 	dsb	sy
 801163c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011640:	f001 fbe0 	bl	8012e04 <vPortExitCritical>
				return pdPASS;
 8011644:	2301      	movs	r3, #1
 8011646:	e063      	b.n	8011710 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d103      	bne.n	8011656 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801164e:	f001 fbd9 	bl	8012e04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011652:	2300      	movs	r3, #0
 8011654:	e05c      	b.n	8011710 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011658:	2b00      	cmp	r3, #0
 801165a:	d106      	bne.n	801166a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801165c:	f107 0314 	add.w	r3, r7, #20
 8011660:	4618      	mov	r0, r3
 8011662:	f001 f809 	bl	8012678 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011666:	2301      	movs	r3, #1
 8011668:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801166a:	f001 fbcb 	bl	8012e04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801166e:	f000 fda9 	bl	80121c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011672:	f001 fb97 	bl	8012da4 <vPortEnterCritical>
 8011676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011678:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801167c:	b25b      	sxtb	r3, r3
 801167e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011682:	d103      	bne.n	801168c <xQueueGenericSend+0x16c>
 8011684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011686:	2200      	movs	r2, #0
 8011688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801168c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801168e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011692:	b25b      	sxtb	r3, r3
 8011694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011698:	d103      	bne.n	80116a2 <xQueueGenericSend+0x182>
 801169a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801169c:	2200      	movs	r2, #0
 801169e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80116a2:	f001 fbaf 	bl	8012e04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80116a6:	1d3a      	adds	r2, r7, #4
 80116a8:	f107 0314 	add.w	r3, r7, #20
 80116ac:	4611      	mov	r1, r2
 80116ae:	4618      	mov	r0, r3
 80116b0:	f000 fff8 	bl	80126a4 <xTaskCheckForTimeOut>
 80116b4:	4603      	mov	r3, r0
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d124      	bne.n	8011704 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80116ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116bc:	f000 fb22 	bl	8011d04 <prvIsQueueFull>
 80116c0:	4603      	mov	r3, r0
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d018      	beq.n	80116f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80116c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116c8:	3310      	adds	r3, #16
 80116ca:	687a      	ldr	r2, [r7, #4]
 80116cc:	4611      	mov	r1, r2
 80116ce:	4618      	mov	r0, r3
 80116d0:	f000 ff4c 	bl	801256c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80116d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116d6:	f000 faad 	bl	8011c34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80116da:	f000 fd81 	bl	80121e0 <xTaskResumeAll>
 80116de:	4603      	mov	r3, r0
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	f47f af7c 	bne.w	80115de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80116e6:	4b0c      	ldr	r3, [pc, #48]	; (8011718 <xQueueGenericSend+0x1f8>)
 80116e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116ec:	601a      	str	r2, [r3, #0]
 80116ee:	f3bf 8f4f 	dsb	sy
 80116f2:	f3bf 8f6f 	isb	sy
 80116f6:	e772      	b.n	80115de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80116f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116fa:	f000 fa9b 	bl	8011c34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80116fe:	f000 fd6f 	bl	80121e0 <xTaskResumeAll>
 8011702:	e76c      	b.n	80115de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011704:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011706:	f000 fa95 	bl	8011c34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801170a:	f000 fd69 	bl	80121e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801170e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011710:	4618      	mov	r0, r3
 8011712:	3738      	adds	r7, #56	; 0x38
 8011714:	46bd      	mov	sp, r7
 8011716:	bd80      	pop	{r7, pc}
 8011718:	e000ed04 	.word	0xe000ed04

0801171c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b090      	sub	sp, #64	; 0x40
 8011720:	af00      	add	r7, sp, #0
 8011722:	60f8      	str	r0, [r7, #12]
 8011724:	60b9      	str	r1, [r7, #8]
 8011726:	607a      	str	r2, [r7, #4]
 8011728:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801172e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011730:	2b00      	cmp	r3, #0
 8011732:	d10a      	bne.n	801174a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8011734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011738:	f383 8811 	msr	BASEPRI, r3
 801173c:	f3bf 8f6f 	isb	sy
 8011740:	f3bf 8f4f 	dsb	sy
 8011744:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011746:	bf00      	nop
 8011748:	e7fe      	b.n	8011748 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801174a:	68bb      	ldr	r3, [r7, #8]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d103      	bne.n	8011758 <xQueueGenericSendFromISR+0x3c>
 8011750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011754:	2b00      	cmp	r3, #0
 8011756:	d101      	bne.n	801175c <xQueueGenericSendFromISR+0x40>
 8011758:	2301      	movs	r3, #1
 801175a:	e000      	b.n	801175e <xQueueGenericSendFromISR+0x42>
 801175c:	2300      	movs	r3, #0
 801175e:	2b00      	cmp	r3, #0
 8011760:	d10a      	bne.n	8011778 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8011762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011766:	f383 8811 	msr	BASEPRI, r3
 801176a:	f3bf 8f6f 	isb	sy
 801176e:	f3bf 8f4f 	dsb	sy
 8011772:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011774:	bf00      	nop
 8011776:	e7fe      	b.n	8011776 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011778:	683b      	ldr	r3, [r7, #0]
 801177a:	2b02      	cmp	r3, #2
 801177c:	d103      	bne.n	8011786 <xQueueGenericSendFromISR+0x6a>
 801177e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011782:	2b01      	cmp	r3, #1
 8011784:	d101      	bne.n	801178a <xQueueGenericSendFromISR+0x6e>
 8011786:	2301      	movs	r3, #1
 8011788:	e000      	b.n	801178c <xQueueGenericSendFromISR+0x70>
 801178a:	2300      	movs	r3, #0
 801178c:	2b00      	cmp	r3, #0
 801178e:	d10a      	bne.n	80117a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8011790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011794:	f383 8811 	msr	BASEPRI, r3
 8011798:	f3bf 8f6f 	isb	sy
 801179c:	f3bf 8f4f 	dsb	sy
 80117a0:	623b      	str	r3, [r7, #32]
}
 80117a2:	bf00      	nop
 80117a4:	e7fe      	b.n	80117a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80117a6:	f001 fbdf 	bl	8012f68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80117aa:	f3ef 8211 	mrs	r2, BASEPRI
 80117ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117b2:	f383 8811 	msr	BASEPRI, r3
 80117b6:	f3bf 8f6f 	isb	sy
 80117ba:	f3bf 8f4f 	dsb	sy
 80117be:	61fa      	str	r2, [r7, #28]
 80117c0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80117c2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80117c4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80117c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80117ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117ce:	429a      	cmp	r2, r3
 80117d0:	d302      	bcc.n	80117d8 <xQueueGenericSendFromISR+0xbc>
 80117d2:	683b      	ldr	r3, [r7, #0]
 80117d4:	2b02      	cmp	r3, #2
 80117d6:	d12f      	bne.n	8011838 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80117d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80117de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80117e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80117e8:	683a      	ldr	r2, [r7, #0]
 80117ea:	68b9      	ldr	r1, [r7, #8]
 80117ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80117ee:	f000 f991 	bl	8011b14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80117f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80117f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117fa:	d112      	bne.n	8011822 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80117fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011800:	2b00      	cmp	r3, #0
 8011802:	d016      	beq.n	8011832 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011806:	3324      	adds	r3, #36	; 0x24
 8011808:	4618      	mov	r0, r3
 801180a:	f000 fed3 	bl	80125b4 <xTaskRemoveFromEventList>
 801180e:	4603      	mov	r3, r0
 8011810:	2b00      	cmp	r3, #0
 8011812:	d00e      	beq.n	8011832 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d00b      	beq.n	8011832 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	2201      	movs	r2, #1
 801181e:	601a      	str	r2, [r3, #0]
 8011820:	e007      	b.n	8011832 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011822:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011826:	3301      	adds	r3, #1
 8011828:	b2db      	uxtb	r3, r3
 801182a:	b25a      	sxtb	r2, r3
 801182c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801182e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011832:	2301      	movs	r3, #1
 8011834:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8011836:	e001      	b.n	801183c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011838:	2300      	movs	r3, #0
 801183a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801183c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801183e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011840:	697b      	ldr	r3, [r7, #20]
 8011842:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011846:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801184a:	4618      	mov	r0, r3
 801184c:	3740      	adds	r7, #64	; 0x40
 801184e:	46bd      	mov	sp, r7
 8011850:	bd80      	pop	{r7, pc}
	...

08011854 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b08c      	sub	sp, #48	; 0x30
 8011858:	af00      	add	r7, sp, #0
 801185a:	60f8      	str	r0, [r7, #12]
 801185c:	60b9      	str	r1, [r7, #8]
 801185e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011860:	2300      	movs	r3, #0
 8011862:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801186a:	2b00      	cmp	r3, #0
 801186c:	d10a      	bne.n	8011884 <xQueueReceive+0x30>
	__asm volatile
 801186e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011872:	f383 8811 	msr	BASEPRI, r3
 8011876:	f3bf 8f6f 	isb	sy
 801187a:	f3bf 8f4f 	dsb	sy
 801187e:	623b      	str	r3, [r7, #32]
}
 8011880:	bf00      	nop
 8011882:	e7fe      	b.n	8011882 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011884:	68bb      	ldr	r3, [r7, #8]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d103      	bne.n	8011892 <xQueueReceive+0x3e>
 801188a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801188e:	2b00      	cmp	r3, #0
 8011890:	d101      	bne.n	8011896 <xQueueReceive+0x42>
 8011892:	2301      	movs	r3, #1
 8011894:	e000      	b.n	8011898 <xQueueReceive+0x44>
 8011896:	2300      	movs	r3, #0
 8011898:	2b00      	cmp	r3, #0
 801189a:	d10a      	bne.n	80118b2 <xQueueReceive+0x5e>
	__asm volatile
 801189c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118a0:	f383 8811 	msr	BASEPRI, r3
 80118a4:	f3bf 8f6f 	isb	sy
 80118a8:	f3bf 8f4f 	dsb	sy
 80118ac:	61fb      	str	r3, [r7, #28]
}
 80118ae:	bf00      	nop
 80118b0:	e7fe      	b.n	80118b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80118b2:	f001 f83f 	bl	8012934 <xTaskGetSchedulerState>
 80118b6:	4603      	mov	r3, r0
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d102      	bne.n	80118c2 <xQueueReceive+0x6e>
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d101      	bne.n	80118c6 <xQueueReceive+0x72>
 80118c2:	2301      	movs	r3, #1
 80118c4:	e000      	b.n	80118c8 <xQueueReceive+0x74>
 80118c6:	2300      	movs	r3, #0
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d10a      	bne.n	80118e2 <xQueueReceive+0x8e>
	__asm volatile
 80118cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118d0:	f383 8811 	msr	BASEPRI, r3
 80118d4:	f3bf 8f6f 	isb	sy
 80118d8:	f3bf 8f4f 	dsb	sy
 80118dc:	61bb      	str	r3, [r7, #24]
}
 80118de:	bf00      	nop
 80118e0:	e7fe      	b.n	80118e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80118e2:	f001 fa5f 	bl	8012da4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80118e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80118ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d01f      	beq.n	8011932 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80118f2:	68b9      	ldr	r1, [r7, #8]
 80118f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80118f6:	f000 f977 	bl	8011be8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80118fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118fc:	1e5a      	subs	r2, r3, #1
 80118fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011900:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011904:	691b      	ldr	r3, [r3, #16]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d00f      	beq.n	801192a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801190a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801190c:	3310      	adds	r3, #16
 801190e:	4618      	mov	r0, r3
 8011910:	f000 fe50 	bl	80125b4 <xTaskRemoveFromEventList>
 8011914:	4603      	mov	r3, r0
 8011916:	2b00      	cmp	r3, #0
 8011918:	d007      	beq.n	801192a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801191a:	4b3d      	ldr	r3, [pc, #244]	; (8011a10 <xQueueReceive+0x1bc>)
 801191c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011920:	601a      	str	r2, [r3, #0]
 8011922:	f3bf 8f4f 	dsb	sy
 8011926:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801192a:	f001 fa6b 	bl	8012e04 <vPortExitCritical>
				return pdPASS;
 801192e:	2301      	movs	r3, #1
 8011930:	e069      	b.n	8011a06 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d103      	bne.n	8011940 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011938:	f001 fa64 	bl	8012e04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801193c:	2300      	movs	r3, #0
 801193e:	e062      	b.n	8011a06 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011942:	2b00      	cmp	r3, #0
 8011944:	d106      	bne.n	8011954 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011946:	f107 0310 	add.w	r3, r7, #16
 801194a:	4618      	mov	r0, r3
 801194c:	f000 fe94 	bl	8012678 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011950:	2301      	movs	r3, #1
 8011952:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011954:	f001 fa56 	bl	8012e04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011958:	f000 fc34 	bl	80121c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801195c:	f001 fa22 	bl	8012da4 <vPortEnterCritical>
 8011960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011962:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011966:	b25b      	sxtb	r3, r3
 8011968:	f1b3 3fff 	cmp.w	r3, #4294967295
 801196c:	d103      	bne.n	8011976 <xQueueReceive+0x122>
 801196e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011970:	2200      	movs	r2, #0
 8011972:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011978:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801197c:	b25b      	sxtb	r3, r3
 801197e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011982:	d103      	bne.n	801198c <xQueueReceive+0x138>
 8011984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011986:	2200      	movs	r2, #0
 8011988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801198c:	f001 fa3a 	bl	8012e04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011990:	1d3a      	adds	r2, r7, #4
 8011992:	f107 0310 	add.w	r3, r7, #16
 8011996:	4611      	mov	r1, r2
 8011998:	4618      	mov	r0, r3
 801199a:	f000 fe83 	bl	80126a4 <xTaskCheckForTimeOut>
 801199e:	4603      	mov	r3, r0
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d123      	bne.n	80119ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80119a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80119a6:	f000 f997 	bl	8011cd8 <prvIsQueueEmpty>
 80119aa:	4603      	mov	r3, r0
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d017      	beq.n	80119e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80119b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119b2:	3324      	adds	r3, #36	; 0x24
 80119b4:	687a      	ldr	r2, [r7, #4]
 80119b6:	4611      	mov	r1, r2
 80119b8:	4618      	mov	r0, r3
 80119ba:	f000 fdd7 	bl	801256c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80119be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80119c0:	f000 f938 	bl	8011c34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80119c4:	f000 fc0c 	bl	80121e0 <xTaskResumeAll>
 80119c8:	4603      	mov	r3, r0
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d189      	bne.n	80118e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80119ce:	4b10      	ldr	r3, [pc, #64]	; (8011a10 <xQueueReceive+0x1bc>)
 80119d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119d4:	601a      	str	r2, [r3, #0]
 80119d6:	f3bf 8f4f 	dsb	sy
 80119da:	f3bf 8f6f 	isb	sy
 80119de:	e780      	b.n	80118e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80119e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80119e2:	f000 f927 	bl	8011c34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80119e6:	f000 fbfb 	bl	80121e0 <xTaskResumeAll>
 80119ea:	e77a      	b.n	80118e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80119ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80119ee:	f000 f921 	bl	8011c34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80119f2:	f000 fbf5 	bl	80121e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80119f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80119f8:	f000 f96e 	bl	8011cd8 <prvIsQueueEmpty>
 80119fc:	4603      	mov	r3, r0
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	f43f af6f 	beq.w	80118e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011a04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011a06:	4618      	mov	r0, r3
 8011a08:	3730      	adds	r7, #48	; 0x30
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	bd80      	pop	{r7, pc}
 8011a0e:	bf00      	nop
 8011a10:	e000ed04 	.word	0xe000ed04

08011a14 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b08e      	sub	sp, #56	; 0x38
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	60f8      	str	r0, [r7, #12]
 8011a1c:	60b9      	str	r1, [r7, #8]
 8011a1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d10a      	bne.n	8011a40 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8011a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a2e:	f383 8811 	msr	BASEPRI, r3
 8011a32:	f3bf 8f6f 	isb	sy
 8011a36:	f3bf 8f4f 	dsb	sy
 8011a3a:	623b      	str	r3, [r7, #32]
}
 8011a3c:	bf00      	nop
 8011a3e:	e7fe      	b.n	8011a3e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011a40:	68bb      	ldr	r3, [r7, #8]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d103      	bne.n	8011a4e <xQueueReceiveFromISR+0x3a>
 8011a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d101      	bne.n	8011a52 <xQueueReceiveFromISR+0x3e>
 8011a4e:	2301      	movs	r3, #1
 8011a50:	e000      	b.n	8011a54 <xQueueReceiveFromISR+0x40>
 8011a52:	2300      	movs	r3, #0
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d10a      	bne.n	8011a6e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8011a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a5c:	f383 8811 	msr	BASEPRI, r3
 8011a60:	f3bf 8f6f 	isb	sy
 8011a64:	f3bf 8f4f 	dsb	sy
 8011a68:	61fb      	str	r3, [r7, #28]
}
 8011a6a:	bf00      	nop
 8011a6c:	e7fe      	b.n	8011a6c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011a6e:	f001 fa7b 	bl	8012f68 <vPortValidateInterruptPriority>
	__asm volatile
 8011a72:	f3ef 8211 	mrs	r2, BASEPRI
 8011a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a7a:	f383 8811 	msr	BASEPRI, r3
 8011a7e:	f3bf 8f6f 	isb	sy
 8011a82:	f3bf 8f4f 	dsb	sy
 8011a86:	61ba      	str	r2, [r7, #24]
 8011a88:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011a8a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a92:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d02f      	beq.n	8011afa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011aa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011aa4:	68b9      	ldr	r1, [r7, #8]
 8011aa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011aa8:	f000 f89e 	bl	8011be8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aae:	1e5a      	subs	r2, r3, #1
 8011ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ab2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011ab4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011abc:	d112      	bne.n	8011ae4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ac0:	691b      	ldr	r3, [r3, #16]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d016      	beq.n	8011af4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ac8:	3310      	adds	r3, #16
 8011aca:	4618      	mov	r0, r3
 8011acc:	f000 fd72 	bl	80125b4 <xTaskRemoveFromEventList>
 8011ad0:	4603      	mov	r3, r0
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d00e      	beq.n	8011af4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d00b      	beq.n	8011af4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	2201      	movs	r2, #1
 8011ae0:	601a      	str	r2, [r3, #0]
 8011ae2:	e007      	b.n	8011af4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ae8:	3301      	adds	r3, #1
 8011aea:	b2db      	uxtb	r3, r3
 8011aec:	b25a      	sxtb	r2, r3
 8011aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011af4:	2301      	movs	r3, #1
 8011af6:	637b      	str	r3, [r7, #52]	; 0x34
 8011af8:	e001      	b.n	8011afe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8011afa:	2300      	movs	r3, #0
 8011afc:	637b      	str	r3, [r7, #52]	; 0x34
 8011afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b00:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011b02:	693b      	ldr	r3, [r7, #16]
 8011b04:	f383 8811 	msr	BASEPRI, r3
}
 8011b08:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	3738      	adds	r7, #56	; 0x38
 8011b10:	46bd      	mov	sp, r7
 8011b12:	bd80      	pop	{r7, pc}

08011b14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b086      	sub	sp, #24
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	60f8      	str	r0, [r7, #12]
 8011b1c:	60b9      	str	r1, [r7, #8]
 8011b1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011b20:	2300      	movs	r3, #0
 8011b22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d10d      	bne.n	8011b4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d14d      	bne.n	8011bd6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	689b      	ldr	r3, [r3, #8]
 8011b3e:	4618      	mov	r0, r3
 8011b40:	f000 ff16 	bl	8012970 <xTaskPriorityDisinherit>
 8011b44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	2200      	movs	r2, #0
 8011b4a:	609a      	str	r2, [r3, #8]
 8011b4c:	e043      	b.n	8011bd6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d119      	bne.n	8011b88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	6858      	ldr	r0, [r3, #4]
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b5c:	461a      	mov	r2, r3
 8011b5e:	68b9      	ldr	r1, [r7, #8]
 8011b60:	f002 f8ca 	bl	8013cf8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	685a      	ldr	r2, [r3, #4]
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b6c:	441a      	add	r2, r3
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	685a      	ldr	r2, [r3, #4]
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	689b      	ldr	r3, [r3, #8]
 8011b7a:	429a      	cmp	r2, r3
 8011b7c:	d32b      	bcc.n	8011bd6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	681a      	ldr	r2, [r3, #0]
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	605a      	str	r2, [r3, #4]
 8011b86:	e026      	b.n	8011bd6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	68d8      	ldr	r0, [r3, #12]
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b90:	461a      	mov	r2, r3
 8011b92:	68b9      	ldr	r1, [r7, #8]
 8011b94:	f002 f8b0 	bl	8013cf8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	68da      	ldr	r2, [r3, #12]
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ba0:	425b      	negs	r3, r3
 8011ba2:	441a      	add	r2, r3
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	68da      	ldr	r2, [r3, #12]
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	429a      	cmp	r2, r3
 8011bb2:	d207      	bcs.n	8011bc4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	689a      	ldr	r2, [r3, #8]
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bbc:	425b      	negs	r3, r3
 8011bbe:	441a      	add	r2, r3
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	2b02      	cmp	r3, #2
 8011bc8:	d105      	bne.n	8011bd6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011bca:	693b      	ldr	r3, [r7, #16]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d002      	beq.n	8011bd6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011bd0:	693b      	ldr	r3, [r7, #16]
 8011bd2:	3b01      	subs	r3, #1
 8011bd4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011bd6:	693b      	ldr	r3, [r7, #16]
 8011bd8:	1c5a      	adds	r2, r3, #1
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011bde:	697b      	ldr	r3, [r7, #20]
}
 8011be0:	4618      	mov	r0, r3
 8011be2:	3718      	adds	r7, #24
 8011be4:	46bd      	mov	sp, r7
 8011be6:	bd80      	pop	{r7, pc}

08011be8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b082      	sub	sp, #8
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
 8011bf0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d018      	beq.n	8011c2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	68da      	ldr	r2, [r3, #12]
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c02:	441a      	add	r2, r3
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	68da      	ldr	r2, [r3, #12]
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	689b      	ldr	r3, [r3, #8]
 8011c10:	429a      	cmp	r2, r3
 8011c12:	d303      	bcc.n	8011c1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	681a      	ldr	r2, [r3, #0]
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	68d9      	ldr	r1, [r3, #12]
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c24:	461a      	mov	r2, r3
 8011c26:	6838      	ldr	r0, [r7, #0]
 8011c28:	f002 f866 	bl	8013cf8 <memcpy>
	}
}
 8011c2c:	bf00      	nop
 8011c2e:	3708      	adds	r7, #8
 8011c30:	46bd      	mov	sp, r7
 8011c32:	bd80      	pop	{r7, pc}

08011c34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b084      	sub	sp, #16
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011c3c:	f001 f8b2 	bl	8012da4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011c46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011c48:	e011      	b.n	8011c6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d012      	beq.n	8011c78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	3324      	adds	r3, #36	; 0x24
 8011c56:	4618      	mov	r0, r3
 8011c58:	f000 fcac 	bl	80125b4 <xTaskRemoveFromEventList>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d001      	beq.n	8011c66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011c62:	f000 fd81 	bl	8012768 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011c66:	7bfb      	ldrb	r3, [r7, #15]
 8011c68:	3b01      	subs	r3, #1
 8011c6a:	b2db      	uxtb	r3, r3
 8011c6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	dce9      	bgt.n	8011c4a <prvUnlockQueue+0x16>
 8011c76:	e000      	b.n	8011c7a <prvUnlockQueue+0x46>
					break;
 8011c78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	22ff      	movs	r2, #255	; 0xff
 8011c7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011c82:	f001 f8bf 	bl	8012e04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011c86:	f001 f88d 	bl	8012da4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011c90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011c92:	e011      	b.n	8011cb8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	691b      	ldr	r3, [r3, #16]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d012      	beq.n	8011cc2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	3310      	adds	r3, #16
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	f000 fc87 	bl	80125b4 <xTaskRemoveFromEventList>
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d001      	beq.n	8011cb0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011cac:	f000 fd5c 	bl	8012768 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011cb0:	7bbb      	ldrb	r3, [r7, #14]
 8011cb2:	3b01      	subs	r3, #1
 8011cb4:	b2db      	uxtb	r3, r3
 8011cb6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011cb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	dce9      	bgt.n	8011c94 <prvUnlockQueue+0x60>
 8011cc0:	e000      	b.n	8011cc4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011cc2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	22ff      	movs	r2, #255	; 0xff
 8011cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011ccc:	f001 f89a 	bl	8012e04 <vPortExitCritical>
}
 8011cd0:	bf00      	nop
 8011cd2:	3710      	adds	r7, #16
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	bd80      	pop	{r7, pc}

08011cd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b084      	sub	sp, #16
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011ce0:	f001 f860 	bl	8012da4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d102      	bne.n	8011cf2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011cec:	2301      	movs	r3, #1
 8011cee:	60fb      	str	r3, [r7, #12]
 8011cf0:	e001      	b.n	8011cf6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011cf2:	2300      	movs	r3, #0
 8011cf4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011cf6:	f001 f885 	bl	8012e04 <vPortExitCritical>

	return xReturn;
 8011cfa:	68fb      	ldr	r3, [r7, #12]
}
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	3710      	adds	r7, #16
 8011d00:	46bd      	mov	sp, r7
 8011d02:	bd80      	pop	{r7, pc}

08011d04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b084      	sub	sp, #16
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011d0c:	f001 f84a 	bl	8012da4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d18:	429a      	cmp	r2, r3
 8011d1a:	d102      	bne.n	8011d22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011d1c:	2301      	movs	r3, #1
 8011d1e:	60fb      	str	r3, [r7, #12]
 8011d20:	e001      	b.n	8011d26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011d22:	2300      	movs	r3, #0
 8011d24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011d26:	f001 f86d 	bl	8012e04 <vPortExitCritical>

	return xReturn;
 8011d2a:	68fb      	ldr	r3, [r7, #12]
}
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	3710      	adds	r7, #16
 8011d30:	46bd      	mov	sp, r7
 8011d32:	bd80      	pop	{r7, pc}

08011d34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b08e      	sub	sp, #56	; 0x38
 8011d38:	af04      	add	r7, sp, #16
 8011d3a:	60f8      	str	r0, [r7, #12]
 8011d3c:	60b9      	str	r1, [r7, #8]
 8011d3e:	607a      	str	r2, [r7, #4]
 8011d40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d10a      	bne.n	8011d5e <xTaskCreateStatic+0x2a>
	__asm volatile
 8011d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d4c:	f383 8811 	msr	BASEPRI, r3
 8011d50:	f3bf 8f6f 	isb	sy
 8011d54:	f3bf 8f4f 	dsb	sy
 8011d58:	623b      	str	r3, [r7, #32]
}
 8011d5a:	bf00      	nop
 8011d5c:	e7fe      	b.n	8011d5c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d10a      	bne.n	8011d7a <xTaskCreateStatic+0x46>
	__asm volatile
 8011d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d68:	f383 8811 	msr	BASEPRI, r3
 8011d6c:	f3bf 8f6f 	isb	sy
 8011d70:	f3bf 8f4f 	dsb	sy
 8011d74:	61fb      	str	r3, [r7, #28]
}
 8011d76:	bf00      	nop
 8011d78:	e7fe      	b.n	8011d78 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011d7a:	23b4      	movs	r3, #180	; 0xb4
 8011d7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011d7e:	693b      	ldr	r3, [r7, #16]
 8011d80:	2bb4      	cmp	r3, #180	; 0xb4
 8011d82:	d00a      	beq.n	8011d9a <xTaskCreateStatic+0x66>
	__asm volatile
 8011d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d88:	f383 8811 	msr	BASEPRI, r3
 8011d8c:	f3bf 8f6f 	isb	sy
 8011d90:	f3bf 8f4f 	dsb	sy
 8011d94:	61bb      	str	r3, [r7, #24]
}
 8011d96:	bf00      	nop
 8011d98:	e7fe      	b.n	8011d98 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011d9a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d01e      	beq.n	8011de0 <xTaskCreateStatic+0xac>
 8011da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d01b      	beq.n	8011de0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011daa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011db0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011db4:	2202      	movs	r2, #2
 8011db6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011dba:	2300      	movs	r3, #0
 8011dbc:	9303      	str	r3, [sp, #12]
 8011dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dc0:	9302      	str	r3, [sp, #8]
 8011dc2:	f107 0314 	add.w	r3, r7, #20
 8011dc6:	9301      	str	r3, [sp, #4]
 8011dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dca:	9300      	str	r3, [sp, #0]
 8011dcc:	683b      	ldr	r3, [r7, #0]
 8011dce:	687a      	ldr	r2, [r7, #4]
 8011dd0:	68b9      	ldr	r1, [r7, #8]
 8011dd2:	68f8      	ldr	r0, [r7, #12]
 8011dd4:	f000 f850 	bl	8011e78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011dd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011dda:	f000 f8eb 	bl	8011fb4 <prvAddNewTaskToReadyList>
 8011dde:	e001      	b.n	8011de4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8011de0:	2300      	movs	r3, #0
 8011de2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011de4:	697b      	ldr	r3, [r7, #20]
	}
 8011de6:	4618      	mov	r0, r3
 8011de8:	3728      	adds	r7, #40	; 0x28
 8011dea:	46bd      	mov	sp, r7
 8011dec:	bd80      	pop	{r7, pc}

08011dee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011dee:	b580      	push	{r7, lr}
 8011df0:	b08c      	sub	sp, #48	; 0x30
 8011df2:	af04      	add	r7, sp, #16
 8011df4:	60f8      	str	r0, [r7, #12]
 8011df6:	60b9      	str	r1, [r7, #8]
 8011df8:	603b      	str	r3, [r7, #0]
 8011dfa:	4613      	mov	r3, r2
 8011dfc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011dfe:	88fb      	ldrh	r3, [r7, #6]
 8011e00:	009b      	lsls	r3, r3, #2
 8011e02:	4618      	mov	r0, r3
 8011e04:	f001 f8f0 	bl	8012fe8 <pvPortMalloc>
 8011e08:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011e0a:	697b      	ldr	r3, [r7, #20]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d00e      	beq.n	8011e2e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011e10:	20b4      	movs	r0, #180	; 0xb4
 8011e12:	f001 f8e9 	bl	8012fe8 <pvPortMalloc>
 8011e16:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011e18:	69fb      	ldr	r3, [r7, #28]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d003      	beq.n	8011e26 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011e1e:	69fb      	ldr	r3, [r7, #28]
 8011e20:	697a      	ldr	r2, [r7, #20]
 8011e22:	631a      	str	r2, [r3, #48]	; 0x30
 8011e24:	e005      	b.n	8011e32 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011e26:	6978      	ldr	r0, [r7, #20]
 8011e28:	f001 f9aa 	bl	8013180 <vPortFree>
 8011e2c:	e001      	b.n	8011e32 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011e2e:	2300      	movs	r3, #0
 8011e30:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011e32:	69fb      	ldr	r3, [r7, #28]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d017      	beq.n	8011e68 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011e38:	69fb      	ldr	r3, [r7, #28]
 8011e3a:	2200      	movs	r2, #0
 8011e3c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011e40:	88fa      	ldrh	r2, [r7, #6]
 8011e42:	2300      	movs	r3, #0
 8011e44:	9303      	str	r3, [sp, #12]
 8011e46:	69fb      	ldr	r3, [r7, #28]
 8011e48:	9302      	str	r3, [sp, #8]
 8011e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e4c:	9301      	str	r3, [sp, #4]
 8011e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e50:	9300      	str	r3, [sp, #0]
 8011e52:	683b      	ldr	r3, [r7, #0]
 8011e54:	68b9      	ldr	r1, [r7, #8]
 8011e56:	68f8      	ldr	r0, [r7, #12]
 8011e58:	f000 f80e 	bl	8011e78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011e5c:	69f8      	ldr	r0, [r7, #28]
 8011e5e:	f000 f8a9 	bl	8011fb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011e62:	2301      	movs	r3, #1
 8011e64:	61bb      	str	r3, [r7, #24]
 8011e66:	e002      	b.n	8011e6e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011e68:	f04f 33ff 	mov.w	r3, #4294967295
 8011e6c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011e6e:	69bb      	ldr	r3, [r7, #24]
	}
 8011e70:	4618      	mov	r0, r3
 8011e72:	3720      	adds	r7, #32
 8011e74:	46bd      	mov	sp, r7
 8011e76:	bd80      	pop	{r7, pc}

08011e78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b088      	sub	sp, #32
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	60f8      	str	r0, [r7, #12]
 8011e80:	60b9      	str	r1, [r7, #8]
 8011e82:	607a      	str	r2, [r7, #4]
 8011e84:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011e90:	3b01      	subs	r3, #1
 8011e92:	009b      	lsls	r3, r3, #2
 8011e94:	4413      	add	r3, r2
 8011e96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011e98:	69bb      	ldr	r3, [r7, #24]
 8011e9a:	f023 0307 	bic.w	r3, r3, #7
 8011e9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011ea0:	69bb      	ldr	r3, [r7, #24]
 8011ea2:	f003 0307 	and.w	r3, r3, #7
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d00a      	beq.n	8011ec0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8011eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eae:	f383 8811 	msr	BASEPRI, r3
 8011eb2:	f3bf 8f6f 	isb	sy
 8011eb6:	f3bf 8f4f 	dsb	sy
 8011eba:	617b      	str	r3, [r7, #20]
}
 8011ebc:	bf00      	nop
 8011ebe:	e7fe      	b.n	8011ebe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011ec0:	68bb      	ldr	r3, [r7, #8]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d01f      	beq.n	8011f06 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	61fb      	str	r3, [r7, #28]
 8011eca:	e012      	b.n	8011ef2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011ecc:	68ba      	ldr	r2, [r7, #8]
 8011ece:	69fb      	ldr	r3, [r7, #28]
 8011ed0:	4413      	add	r3, r2
 8011ed2:	7819      	ldrb	r1, [r3, #0]
 8011ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ed6:	69fb      	ldr	r3, [r7, #28]
 8011ed8:	4413      	add	r3, r2
 8011eda:	3334      	adds	r3, #52	; 0x34
 8011edc:	460a      	mov	r2, r1
 8011ede:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011ee0:	68ba      	ldr	r2, [r7, #8]
 8011ee2:	69fb      	ldr	r3, [r7, #28]
 8011ee4:	4413      	add	r3, r2
 8011ee6:	781b      	ldrb	r3, [r3, #0]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d006      	beq.n	8011efa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011eec:	69fb      	ldr	r3, [r7, #28]
 8011eee:	3301      	adds	r3, #1
 8011ef0:	61fb      	str	r3, [r7, #28]
 8011ef2:	69fb      	ldr	r3, [r7, #28]
 8011ef4:	2b0f      	cmp	r3, #15
 8011ef6:	d9e9      	bls.n	8011ecc <prvInitialiseNewTask+0x54>
 8011ef8:	e000      	b.n	8011efc <prvInitialiseNewTask+0x84>
			{
				break;
 8011efa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011efe:	2200      	movs	r2, #0
 8011f00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011f04:	e003      	b.n	8011f0e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f08:	2200      	movs	r2, #0
 8011f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f10:	2b06      	cmp	r3, #6
 8011f12:	d901      	bls.n	8011f18 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011f14:	2306      	movs	r3, #6
 8011f16:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f1c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f22:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8011f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f26:	2200      	movs	r2, #0
 8011f28:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f2c:	3304      	adds	r3, #4
 8011f2e:	4618      	mov	r0, r3
 8011f30:	f7ff f928 	bl	8011184 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f36:	3318      	adds	r3, #24
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f7ff f923 	bl	8011184 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f46:	f1c3 0207 	rsb	r2, r3, #7
 8011f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f52:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f56:	2200      	movs	r2, #0
 8011f58:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f5e:	2200      	movs	r2, #0
 8011f60:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8011f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f66:	334c      	adds	r3, #76	; 0x4c
 8011f68:	2260      	movs	r2, #96	; 0x60
 8011f6a:	2100      	movs	r1, #0
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	f001 fed1 	bl	8013d14 <memset>
 8011f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f74:	4a0c      	ldr	r2, [pc, #48]	; (8011fa8 <prvInitialiseNewTask+0x130>)
 8011f76:	651a      	str	r2, [r3, #80]	; 0x50
 8011f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f7a:	4a0c      	ldr	r2, [pc, #48]	; (8011fac <prvInitialiseNewTask+0x134>)
 8011f7c:	655a      	str	r2, [r3, #84]	; 0x54
 8011f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f80:	4a0b      	ldr	r2, [pc, #44]	; (8011fb0 <prvInitialiseNewTask+0x138>)
 8011f82:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011f84:	683a      	ldr	r2, [r7, #0]
 8011f86:	68f9      	ldr	r1, [r7, #12]
 8011f88:	69b8      	ldr	r0, [r7, #24]
 8011f8a:	f000 fddd 	bl	8012b48 <pxPortInitialiseStack>
 8011f8e:	4602      	mov	r2, r0
 8011f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f92:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d002      	beq.n	8011fa0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f9e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011fa0:	bf00      	nop
 8011fa2:	3720      	adds	r7, #32
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	bd80      	pop	{r7, pc}
 8011fa8:	0801594c 	.word	0x0801594c
 8011fac:	0801596c 	.word	0x0801596c
 8011fb0:	0801592c 	.word	0x0801592c

08011fb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b082      	sub	sp, #8
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011fbc:	f000 fef2 	bl	8012da4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011fc0:	4b2a      	ldr	r3, [pc, #168]	; (801206c <prvAddNewTaskToReadyList+0xb8>)
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	3301      	adds	r3, #1
 8011fc6:	4a29      	ldr	r2, [pc, #164]	; (801206c <prvAddNewTaskToReadyList+0xb8>)
 8011fc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011fca:	4b29      	ldr	r3, [pc, #164]	; (8012070 <prvAddNewTaskToReadyList+0xbc>)
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d109      	bne.n	8011fe6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011fd2:	4a27      	ldr	r2, [pc, #156]	; (8012070 <prvAddNewTaskToReadyList+0xbc>)
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011fd8:	4b24      	ldr	r3, [pc, #144]	; (801206c <prvAddNewTaskToReadyList+0xb8>)
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	2b01      	cmp	r3, #1
 8011fde:	d110      	bne.n	8012002 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011fe0:	f000 fbe6 	bl	80127b0 <prvInitialiseTaskLists>
 8011fe4:	e00d      	b.n	8012002 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011fe6:	4b23      	ldr	r3, [pc, #140]	; (8012074 <prvAddNewTaskToReadyList+0xc0>)
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d109      	bne.n	8012002 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011fee:	4b20      	ldr	r3, [pc, #128]	; (8012070 <prvAddNewTaskToReadyList+0xbc>)
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ff8:	429a      	cmp	r2, r3
 8011ffa:	d802      	bhi.n	8012002 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011ffc:	4a1c      	ldr	r2, [pc, #112]	; (8012070 <prvAddNewTaskToReadyList+0xbc>)
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012002:	4b1d      	ldr	r3, [pc, #116]	; (8012078 <prvAddNewTaskToReadyList+0xc4>)
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	3301      	adds	r3, #1
 8012008:	4a1b      	ldr	r2, [pc, #108]	; (8012078 <prvAddNewTaskToReadyList+0xc4>)
 801200a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012010:	2201      	movs	r2, #1
 8012012:	409a      	lsls	r2, r3
 8012014:	4b19      	ldr	r3, [pc, #100]	; (801207c <prvAddNewTaskToReadyList+0xc8>)
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	4313      	orrs	r3, r2
 801201a:	4a18      	ldr	r2, [pc, #96]	; (801207c <prvAddNewTaskToReadyList+0xc8>)
 801201c:	6013      	str	r3, [r2, #0]
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012022:	4613      	mov	r3, r2
 8012024:	009b      	lsls	r3, r3, #2
 8012026:	4413      	add	r3, r2
 8012028:	009b      	lsls	r3, r3, #2
 801202a:	4a15      	ldr	r2, [pc, #84]	; (8012080 <prvAddNewTaskToReadyList+0xcc>)
 801202c:	441a      	add	r2, r3
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	3304      	adds	r3, #4
 8012032:	4619      	mov	r1, r3
 8012034:	4610      	mov	r0, r2
 8012036:	f7ff f8b2 	bl	801119e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801203a:	f000 fee3 	bl	8012e04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801203e:	4b0d      	ldr	r3, [pc, #52]	; (8012074 <prvAddNewTaskToReadyList+0xc0>)
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d00e      	beq.n	8012064 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012046:	4b0a      	ldr	r3, [pc, #40]	; (8012070 <prvAddNewTaskToReadyList+0xbc>)
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012050:	429a      	cmp	r2, r3
 8012052:	d207      	bcs.n	8012064 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012054:	4b0b      	ldr	r3, [pc, #44]	; (8012084 <prvAddNewTaskToReadyList+0xd0>)
 8012056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801205a:	601a      	str	r2, [r3, #0]
 801205c:	f3bf 8f4f 	dsb	sy
 8012060:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012064:	bf00      	nop
 8012066:	3708      	adds	r7, #8
 8012068:	46bd      	mov	sp, r7
 801206a:	bd80      	pop	{r7, pc}
 801206c:	200022b8 	.word	0x200022b8
 8012070:	200021b8 	.word	0x200021b8
 8012074:	200022c4 	.word	0x200022c4
 8012078:	200022d4 	.word	0x200022d4
 801207c:	200022c0 	.word	0x200022c0
 8012080:	200021bc 	.word	0x200021bc
 8012084:	e000ed04 	.word	0xe000ed04

08012088 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012088:	b580      	push	{r7, lr}
 801208a:	b084      	sub	sp, #16
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012090:	2300      	movs	r3, #0
 8012092:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d017      	beq.n	80120ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801209a:	4b13      	ldr	r3, [pc, #76]	; (80120e8 <vTaskDelay+0x60>)
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d00a      	beq.n	80120b8 <vTaskDelay+0x30>
	__asm volatile
 80120a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120a6:	f383 8811 	msr	BASEPRI, r3
 80120aa:	f3bf 8f6f 	isb	sy
 80120ae:	f3bf 8f4f 	dsb	sy
 80120b2:	60bb      	str	r3, [r7, #8]
}
 80120b4:	bf00      	nop
 80120b6:	e7fe      	b.n	80120b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80120b8:	f000 f884 	bl	80121c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80120bc:	2100      	movs	r1, #0
 80120be:	6878      	ldr	r0, [r7, #4]
 80120c0:	f000 fcdc 	bl	8012a7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80120c4:	f000 f88c 	bl	80121e0 <xTaskResumeAll>
 80120c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d107      	bne.n	80120e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80120d0:	4b06      	ldr	r3, [pc, #24]	; (80120ec <vTaskDelay+0x64>)
 80120d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80120d6:	601a      	str	r2, [r3, #0]
 80120d8:	f3bf 8f4f 	dsb	sy
 80120dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80120e0:	bf00      	nop
 80120e2:	3710      	adds	r7, #16
 80120e4:	46bd      	mov	sp, r7
 80120e6:	bd80      	pop	{r7, pc}
 80120e8:	200022e0 	.word	0x200022e0
 80120ec:	e000ed04 	.word	0xe000ed04

080120f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b08a      	sub	sp, #40	; 0x28
 80120f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80120f6:	2300      	movs	r3, #0
 80120f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80120fa:	2300      	movs	r3, #0
 80120fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80120fe:	463a      	mov	r2, r7
 8012100:	1d39      	adds	r1, r7, #4
 8012102:	f107 0308 	add.w	r3, r7, #8
 8012106:	4618      	mov	r0, r3
 8012108:	f7ee fed0 	bl	8000eac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801210c:	6839      	ldr	r1, [r7, #0]
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	68ba      	ldr	r2, [r7, #8]
 8012112:	9202      	str	r2, [sp, #8]
 8012114:	9301      	str	r3, [sp, #4]
 8012116:	2300      	movs	r3, #0
 8012118:	9300      	str	r3, [sp, #0]
 801211a:	2300      	movs	r3, #0
 801211c:	460a      	mov	r2, r1
 801211e:	4921      	ldr	r1, [pc, #132]	; (80121a4 <vTaskStartScheduler+0xb4>)
 8012120:	4821      	ldr	r0, [pc, #132]	; (80121a8 <vTaskStartScheduler+0xb8>)
 8012122:	f7ff fe07 	bl	8011d34 <xTaskCreateStatic>
 8012126:	4603      	mov	r3, r0
 8012128:	4a20      	ldr	r2, [pc, #128]	; (80121ac <vTaskStartScheduler+0xbc>)
 801212a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801212c:	4b1f      	ldr	r3, [pc, #124]	; (80121ac <vTaskStartScheduler+0xbc>)
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d002      	beq.n	801213a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012134:	2301      	movs	r3, #1
 8012136:	617b      	str	r3, [r7, #20]
 8012138:	e001      	b.n	801213e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801213a:	2300      	movs	r3, #0
 801213c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801213e:	697b      	ldr	r3, [r7, #20]
 8012140:	2b01      	cmp	r3, #1
 8012142:	d11b      	bne.n	801217c <vTaskStartScheduler+0x8c>
	__asm volatile
 8012144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012148:	f383 8811 	msr	BASEPRI, r3
 801214c:	f3bf 8f6f 	isb	sy
 8012150:	f3bf 8f4f 	dsb	sy
 8012154:	613b      	str	r3, [r7, #16]
}
 8012156:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012158:	4b15      	ldr	r3, [pc, #84]	; (80121b0 <vTaskStartScheduler+0xc0>)
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	334c      	adds	r3, #76	; 0x4c
 801215e:	4a15      	ldr	r2, [pc, #84]	; (80121b4 <vTaskStartScheduler+0xc4>)
 8012160:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012162:	4b15      	ldr	r3, [pc, #84]	; (80121b8 <vTaskStartScheduler+0xc8>)
 8012164:	f04f 32ff 	mov.w	r2, #4294967295
 8012168:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801216a:	4b14      	ldr	r3, [pc, #80]	; (80121bc <vTaskStartScheduler+0xcc>)
 801216c:	2201      	movs	r2, #1
 801216e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012170:	4b13      	ldr	r3, [pc, #76]	; (80121c0 <vTaskStartScheduler+0xd0>)
 8012172:	2200      	movs	r2, #0
 8012174:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012176:	f000 fd73 	bl	8012c60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801217a:	e00e      	b.n	801219a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801217c:	697b      	ldr	r3, [r7, #20]
 801217e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012182:	d10a      	bne.n	801219a <vTaskStartScheduler+0xaa>
	__asm volatile
 8012184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012188:	f383 8811 	msr	BASEPRI, r3
 801218c:	f3bf 8f6f 	isb	sy
 8012190:	f3bf 8f4f 	dsb	sy
 8012194:	60fb      	str	r3, [r7, #12]
}
 8012196:	bf00      	nop
 8012198:	e7fe      	b.n	8012198 <vTaskStartScheduler+0xa8>
}
 801219a:	bf00      	nop
 801219c:	3718      	adds	r7, #24
 801219e:	46bd      	mov	sp, r7
 80121a0:	bd80      	pop	{r7, pc}
 80121a2:	bf00      	nop
 80121a4:	080154c4 	.word	0x080154c4
 80121a8:	08012781 	.word	0x08012781
 80121ac:	200022dc 	.word	0x200022dc
 80121b0:	200021b8 	.word	0x200021b8
 80121b4:	200002b0 	.word	0x200002b0
 80121b8:	200022d8 	.word	0x200022d8
 80121bc:	200022c4 	.word	0x200022c4
 80121c0:	200022bc 	.word	0x200022bc

080121c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80121c4:	b480      	push	{r7}
 80121c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80121c8:	4b04      	ldr	r3, [pc, #16]	; (80121dc <vTaskSuspendAll+0x18>)
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	3301      	adds	r3, #1
 80121ce:	4a03      	ldr	r2, [pc, #12]	; (80121dc <vTaskSuspendAll+0x18>)
 80121d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80121d2:	bf00      	nop
 80121d4:	46bd      	mov	sp, r7
 80121d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121da:	4770      	bx	lr
 80121dc:	200022e0 	.word	0x200022e0

080121e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b084      	sub	sp, #16
 80121e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80121e6:	2300      	movs	r3, #0
 80121e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80121ea:	2300      	movs	r3, #0
 80121ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80121ee:	4b41      	ldr	r3, [pc, #260]	; (80122f4 <xTaskResumeAll+0x114>)
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d10a      	bne.n	801220c <xTaskResumeAll+0x2c>
	__asm volatile
 80121f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121fa:	f383 8811 	msr	BASEPRI, r3
 80121fe:	f3bf 8f6f 	isb	sy
 8012202:	f3bf 8f4f 	dsb	sy
 8012206:	603b      	str	r3, [r7, #0]
}
 8012208:	bf00      	nop
 801220a:	e7fe      	b.n	801220a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801220c:	f000 fdca 	bl	8012da4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012210:	4b38      	ldr	r3, [pc, #224]	; (80122f4 <xTaskResumeAll+0x114>)
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	3b01      	subs	r3, #1
 8012216:	4a37      	ldr	r2, [pc, #220]	; (80122f4 <xTaskResumeAll+0x114>)
 8012218:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801221a:	4b36      	ldr	r3, [pc, #216]	; (80122f4 <xTaskResumeAll+0x114>)
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d161      	bne.n	80122e6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012222:	4b35      	ldr	r3, [pc, #212]	; (80122f8 <xTaskResumeAll+0x118>)
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d05d      	beq.n	80122e6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801222a:	e02e      	b.n	801228a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801222c:	4b33      	ldr	r3, [pc, #204]	; (80122fc <xTaskResumeAll+0x11c>)
 801222e:	68db      	ldr	r3, [r3, #12]
 8012230:	68db      	ldr	r3, [r3, #12]
 8012232:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	3318      	adds	r3, #24
 8012238:	4618      	mov	r0, r3
 801223a:	f7ff f80d 	bl	8011258 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	3304      	adds	r3, #4
 8012242:	4618      	mov	r0, r3
 8012244:	f7ff f808 	bl	8011258 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801224c:	2201      	movs	r2, #1
 801224e:	409a      	lsls	r2, r3
 8012250:	4b2b      	ldr	r3, [pc, #172]	; (8012300 <xTaskResumeAll+0x120>)
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	4313      	orrs	r3, r2
 8012256:	4a2a      	ldr	r2, [pc, #168]	; (8012300 <xTaskResumeAll+0x120>)
 8012258:	6013      	str	r3, [r2, #0]
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801225e:	4613      	mov	r3, r2
 8012260:	009b      	lsls	r3, r3, #2
 8012262:	4413      	add	r3, r2
 8012264:	009b      	lsls	r3, r3, #2
 8012266:	4a27      	ldr	r2, [pc, #156]	; (8012304 <xTaskResumeAll+0x124>)
 8012268:	441a      	add	r2, r3
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	3304      	adds	r3, #4
 801226e:	4619      	mov	r1, r3
 8012270:	4610      	mov	r0, r2
 8012272:	f7fe ff94 	bl	801119e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801227a:	4b23      	ldr	r3, [pc, #140]	; (8012308 <xTaskResumeAll+0x128>)
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012280:	429a      	cmp	r2, r3
 8012282:	d302      	bcc.n	801228a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8012284:	4b21      	ldr	r3, [pc, #132]	; (801230c <xTaskResumeAll+0x12c>)
 8012286:	2201      	movs	r2, #1
 8012288:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801228a:	4b1c      	ldr	r3, [pc, #112]	; (80122fc <xTaskResumeAll+0x11c>)
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d1cc      	bne.n	801222c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d001      	beq.n	801229c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012298:	f000 fb2c 	bl	80128f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801229c:	4b1c      	ldr	r3, [pc, #112]	; (8012310 <xTaskResumeAll+0x130>)
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d010      	beq.n	80122ca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80122a8:	f000 f846 	bl	8012338 <xTaskIncrementTick>
 80122ac:	4603      	mov	r3, r0
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d002      	beq.n	80122b8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80122b2:	4b16      	ldr	r3, [pc, #88]	; (801230c <xTaskResumeAll+0x12c>)
 80122b4:	2201      	movs	r2, #1
 80122b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	3b01      	subs	r3, #1
 80122bc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d1f1      	bne.n	80122a8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80122c4:	4b12      	ldr	r3, [pc, #72]	; (8012310 <xTaskResumeAll+0x130>)
 80122c6:	2200      	movs	r2, #0
 80122c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80122ca:	4b10      	ldr	r3, [pc, #64]	; (801230c <xTaskResumeAll+0x12c>)
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d009      	beq.n	80122e6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80122d2:	2301      	movs	r3, #1
 80122d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80122d6:	4b0f      	ldr	r3, [pc, #60]	; (8012314 <xTaskResumeAll+0x134>)
 80122d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122dc:	601a      	str	r2, [r3, #0]
 80122de:	f3bf 8f4f 	dsb	sy
 80122e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80122e6:	f000 fd8d 	bl	8012e04 <vPortExitCritical>

	return xAlreadyYielded;
 80122ea:	68bb      	ldr	r3, [r7, #8]
}
 80122ec:	4618      	mov	r0, r3
 80122ee:	3710      	adds	r7, #16
 80122f0:	46bd      	mov	sp, r7
 80122f2:	bd80      	pop	{r7, pc}
 80122f4:	200022e0 	.word	0x200022e0
 80122f8:	200022b8 	.word	0x200022b8
 80122fc:	20002278 	.word	0x20002278
 8012300:	200022c0 	.word	0x200022c0
 8012304:	200021bc 	.word	0x200021bc
 8012308:	200021b8 	.word	0x200021b8
 801230c:	200022cc 	.word	0x200022cc
 8012310:	200022c8 	.word	0x200022c8
 8012314:	e000ed04 	.word	0xe000ed04

08012318 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012318:	b480      	push	{r7}
 801231a:	b083      	sub	sp, #12
 801231c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801231e:	4b05      	ldr	r3, [pc, #20]	; (8012334 <xTaskGetTickCount+0x1c>)
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012324:	687b      	ldr	r3, [r7, #4]
}
 8012326:	4618      	mov	r0, r3
 8012328:	370c      	adds	r7, #12
 801232a:	46bd      	mov	sp, r7
 801232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012330:	4770      	bx	lr
 8012332:	bf00      	nop
 8012334:	200022bc 	.word	0x200022bc

08012338 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b086      	sub	sp, #24
 801233c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801233e:	2300      	movs	r3, #0
 8012340:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012342:	4b4e      	ldr	r3, [pc, #312]	; (801247c <xTaskIncrementTick+0x144>)
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	2b00      	cmp	r3, #0
 8012348:	f040 808e 	bne.w	8012468 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801234c:	4b4c      	ldr	r3, [pc, #304]	; (8012480 <xTaskIncrementTick+0x148>)
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	3301      	adds	r3, #1
 8012352:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012354:	4a4a      	ldr	r2, [pc, #296]	; (8012480 <xTaskIncrementTick+0x148>)
 8012356:	693b      	ldr	r3, [r7, #16]
 8012358:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801235a:	693b      	ldr	r3, [r7, #16]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d120      	bne.n	80123a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8012360:	4b48      	ldr	r3, [pc, #288]	; (8012484 <xTaskIncrementTick+0x14c>)
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d00a      	beq.n	8012380 <xTaskIncrementTick+0x48>
	__asm volatile
 801236a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801236e:	f383 8811 	msr	BASEPRI, r3
 8012372:	f3bf 8f6f 	isb	sy
 8012376:	f3bf 8f4f 	dsb	sy
 801237a:	603b      	str	r3, [r7, #0]
}
 801237c:	bf00      	nop
 801237e:	e7fe      	b.n	801237e <xTaskIncrementTick+0x46>
 8012380:	4b40      	ldr	r3, [pc, #256]	; (8012484 <xTaskIncrementTick+0x14c>)
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	60fb      	str	r3, [r7, #12]
 8012386:	4b40      	ldr	r3, [pc, #256]	; (8012488 <xTaskIncrementTick+0x150>)
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	4a3e      	ldr	r2, [pc, #248]	; (8012484 <xTaskIncrementTick+0x14c>)
 801238c:	6013      	str	r3, [r2, #0]
 801238e:	4a3e      	ldr	r2, [pc, #248]	; (8012488 <xTaskIncrementTick+0x150>)
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	6013      	str	r3, [r2, #0]
 8012394:	4b3d      	ldr	r3, [pc, #244]	; (801248c <xTaskIncrementTick+0x154>)
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	3301      	adds	r3, #1
 801239a:	4a3c      	ldr	r2, [pc, #240]	; (801248c <xTaskIncrementTick+0x154>)
 801239c:	6013      	str	r3, [r2, #0]
 801239e:	f000 faa9 	bl	80128f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80123a2:	4b3b      	ldr	r3, [pc, #236]	; (8012490 <xTaskIncrementTick+0x158>)
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	693a      	ldr	r2, [r7, #16]
 80123a8:	429a      	cmp	r2, r3
 80123aa:	d348      	bcc.n	801243e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80123ac:	4b35      	ldr	r3, [pc, #212]	; (8012484 <xTaskIncrementTick+0x14c>)
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d104      	bne.n	80123c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80123b6:	4b36      	ldr	r3, [pc, #216]	; (8012490 <xTaskIncrementTick+0x158>)
 80123b8:	f04f 32ff 	mov.w	r2, #4294967295
 80123bc:	601a      	str	r2, [r3, #0]
					break;
 80123be:	e03e      	b.n	801243e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80123c0:	4b30      	ldr	r3, [pc, #192]	; (8012484 <xTaskIncrementTick+0x14c>)
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	68db      	ldr	r3, [r3, #12]
 80123c6:	68db      	ldr	r3, [r3, #12]
 80123c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80123ca:	68bb      	ldr	r3, [r7, #8]
 80123cc:	685b      	ldr	r3, [r3, #4]
 80123ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80123d0:	693a      	ldr	r2, [r7, #16]
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	429a      	cmp	r2, r3
 80123d6:	d203      	bcs.n	80123e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80123d8:	4a2d      	ldr	r2, [pc, #180]	; (8012490 <xTaskIncrementTick+0x158>)
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80123de:	e02e      	b.n	801243e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80123e0:	68bb      	ldr	r3, [r7, #8]
 80123e2:	3304      	adds	r3, #4
 80123e4:	4618      	mov	r0, r3
 80123e6:	f7fe ff37 	bl	8011258 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80123ea:	68bb      	ldr	r3, [r7, #8]
 80123ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d004      	beq.n	80123fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80123f2:	68bb      	ldr	r3, [r7, #8]
 80123f4:	3318      	adds	r3, #24
 80123f6:	4618      	mov	r0, r3
 80123f8:	f7fe ff2e 	bl	8011258 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80123fc:	68bb      	ldr	r3, [r7, #8]
 80123fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012400:	2201      	movs	r2, #1
 8012402:	409a      	lsls	r2, r3
 8012404:	4b23      	ldr	r3, [pc, #140]	; (8012494 <xTaskIncrementTick+0x15c>)
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	4313      	orrs	r3, r2
 801240a:	4a22      	ldr	r2, [pc, #136]	; (8012494 <xTaskIncrementTick+0x15c>)
 801240c:	6013      	str	r3, [r2, #0]
 801240e:	68bb      	ldr	r3, [r7, #8]
 8012410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012412:	4613      	mov	r3, r2
 8012414:	009b      	lsls	r3, r3, #2
 8012416:	4413      	add	r3, r2
 8012418:	009b      	lsls	r3, r3, #2
 801241a:	4a1f      	ldr	r2, [pc, #124]	; (8012498 <xTaskIncrementTick+0x160>)
 801241c:	441a      	add	r2, r3
 801241e:	68bb      	ldr	r3, [r7, #8]
 8012420:	3304      	adds	r3, #4
 8012422:	4619      	mov	r1, r3
 8012424:	4610      	mov	r0, r2
 8012426:	f7fe feba 	bl	801119e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801242a:	68bb      	ldr	r3, [r7, #8]
 801242c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801242e:	4b1b      	ldr	r3, [pc, #108]	; (801249c <xTaskIncrementTick+0x164>)
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012434:	429a      	cmp	r2, r3
 8012436:	d3b9      	bcc.n	80123ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8012438:	2301      	movs	r3, #1
 801243a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801243c:	e7b6      	b.n	80123ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801243e:	4b17      	ldr	r3, [pc, #92]	; (801249c <xTaskIncrementTick+0x164>)
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012444:	4914      	ldr	r1, [pc, #80]	; (8012498 <xTaskIncrementTick+0x160>)
 8012446:	4613      	mov	r3, r2
 8012448:	009b      	lsls	r3, r3, #2
 801244a:	4413      	add	r3, r2
 801244c:	009b      	lsls	r3, r3, #2
 801244e:	440b      	add	r3, r1
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	2b01      	cmp	r3, #1
 8012454:	d901      	bls.n	801245a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8012456:	2301      	movs	r3, #1
 8012458:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801245a:	4b11      	ldr	r3, [pc, #68]	; (80124a0 <xTaskIncrementTick+0x168>)
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d007      	beq.n	8012472 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8012462:	2301      	movs	r3, #1
 8012464:	617b      	str	r3, [r7, #20]
 8012466:	e004      	b.n	8012472 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8012468:	4b0e      	ldr	r3, [pc, #56]	; (80124a4 <xTaskIncrementTick+0x16c>)
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	3301      	adds	r3, #1
 801246e:	4a0d      	ldr	r2, [pc, #52]	; (80124a4 <xTaskIncrementTick+0x16c>)
 8012470:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012472:	697b      	ldr	r3, [r7, #20]
}
 8012474:	4618      	mov	r0, r3
 8012476:	3718      	adds	r7, #24
 8012478:	46bd      	mov	sp, r7
 801247a:	bd80      	pop	{r7, pc}
 801247c:	200022e0 	.word	0x200022e0
 8012480:	200022bc 	.word	0x200022bc
 8012484:	20002270 	.word	0x20002270
 8012488:	20002274 	.word	0x20002274
 801248c:	200022d0 	.word	0x200022d0
 8012490:	200022d8 	.word	0x200022d8
 8012494:	200022c0 	.word	0x200022c0
 8012498:	200021bc 	.word	0x200021bc
 801249c:	200021b8 	.word	0x200021b8
 80124a0:	200022cc 	.word	0x200022cc
 80124a4:	200022c8 	.word	0x200022c8

080124a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80124a8:	b480      	push	{r7}
 80124aa:	b087      	sub	sp, #28
 80124ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80124ae:	4b29      	ldr	r3, [pc, #164]	; (8012554 <vTaskSwitchContext+0xac>)
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d003      	beq.n	80124be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80124b6:	4b28      	ldr	r3, [pc, #160]	; (8012558 <vTaskSwitchContext+0xb0>)
 80124b8:	2201      	movs	r2, #1
 80124ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80124bc:	e044      	b.n	8012548 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80124be:	4b26      	ldr	r3, [pc, #152]	; (8012558 <vTaskSwitchContext+0xb0>)
 80124c0:	2200      	movs	r2, #0
 80124c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80124c4:	4b25      	ldr	r3, [pc, #148]	; (801255c <vTaskSwitchContext+0xb4>)
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	fab3 f383 	clz	r3, r3
 80124d0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80124d2:	7afb      	ldrb	r3, [r7, #11]
 80124d4:	f1c3 031f 	rsb	r3, r3, #31
 80124d8:	617b      	str	r3, [r7, #20]
 80124da:	4921      	ldr	r1, [pc, #132]	; (8012560 <vTaskSwitchContext+0xb8>)
 80124dc:	697a      	ldr	r2, [r7, #20]
 80124de:	4613      	mov	r3, r2
 80124e0:	009b      	lsls	r3, r3, #2
 80124e2:	4413      	add	r3, r2
 80124e4:	009b      	lsls	r3, r3, #2
 80124e6:	440b      	add	r3, r1
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d10a      	bne.n	8012504 <vTaskSwitchContext+0x5c>
	__asm volatile
 80124ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124f2:	f383 8811 	msr	BASEPRI, r3
 80124f6:	f3bf 8f6f 	isb	sy
 80124fa:	f3bf 8f4f 	dsb	sy
 80124fe:	607b      	str	r3, [r7, #4]
}
 8012500:	bf00      	nop
 8012502:	e7fe      	b.n	8012502 <vTaskSwitchContext+0x5a>
 8012504:	697a      	ldr	r2, [r7, #20]
 8012506:	4613      	mov	r3, r2
 8012508:	009b      	lsls	r3, r3, #2
 801250a:	4413      	add	r3, r2
 801250c:	009b      	lsls	r3, r3, #2
 801250e:	4a14      	ldr	r2, [pc, #80]	; (8012560 <vTaskSwitchContext+0xb8>)
 8012510:	4413      	add	r3, r2
 8012512:	613b      	str	r3, [r7, #16]
 8012514:	693b      	ldr	r3, [r7, #16]
 8012516:	685b      	ldr	r3, [r3, #4]
 8012518:	685a      	ldr	r2, [r3, #4]
 801251a:	693b      	ldr	r3, [r7, #16]
 801251c:	605a      	str	r2, [r3, #4]
 801251e:	693b      	ldr	r3, [r7, #16]
 8012520:	685a      	ldr	r2, [r3, #4]
 8012522:	693b      	ldr	r3, [r7, #16]
 8012524:	3308      	adds	r3, #8
 8012526:	429a      	cmp	r2, r3
 8012528:	d104      	bne.n	8012534 <vTaskSwitchContext+0x8c>
 801252a:	693b      	ldr	r3, [r7, #16]
 801252c:	685b      	ldr	r3, [r3, #4]
 801252e:	685a      	ldr	r2, [r3, #4]
 8012530:	693b      	ldr	r3, [r7, #16]
 8012532:	605a      	str	r2, [r3, #4]
 8012534:	693b      	ldr	r3, [r7, #16]
 8012536:	685b      	ldr	r3, [r3, #4]
 8012538:	68db      	ldr	r3, [r3, #12]
 801253a:	4a0a      	ldr	r2, [pc, #40]	; (8012564 <vTaskSwitchContext+0xbc>)
 801253c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801253e:	4b09      	ldr	r3, [pc, #36]	; (8012564 <vTaskSwitchContext+0xbc>)
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	334c      	adds	r3, #76	; 0x4c
 8012544:	4a08      	ldr	r2, [pc, #32]	; (8012568 <vTaskSwitchContext+0xc0>)
 8012546:	6013      	str	r3, [r2, #0]
}
 8012548:	bf00      	nop
 801254a:	371c      	adds	r7, #28
 801254c:	46bd      	mov	sp, r7
 801254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012552:	4770      	bx	lr
 8012554:	200022e0 	.word	0x200022e0
 8012558:	200022cc 	.word	0x200022cc
 801255c:	200022c0 	.word	0x200022c0
 8012560:	200021bc 	.word	0x200021bc
 8012564:	200021b8 	.word	0x200021b8
 8012568:	200002b0 	.word	0x200002b0

0801256c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b084      	sub	sp, #16
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
 8012574:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d10a      	bne.n	8012592 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801257c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012580:	f383 8811 	msr	BASEPRI, r3
 8012584:	f3bf 8f6f 	isb	sy
 8012588:	f3bf 8f4f 	dsb	sy
 801258c:	60fb      	str	r3, [r7, #12]
}
 801258e:	bf00      	nop
 8012590:	e7fe      	b.n	8012590 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012592:	4b07      	ldr	r3, [pc, #28]	; (80125b0 <vTaskPlaceOnEventList+0x44>)
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	3318      	adds	r3, #24
 8012598:	4619      	mov	r1, r3
 801259a:	6878      	ldr	r0, [r7, #4]
 801259c:	f7fe fe23 	bl	80111e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80125a0:	2101      	movs	r1, #1
 80125a2:	6838      	ldr	r0, [r7, #0]
 80125a4:	f000 fa6a 	bl	8012a7c <prvAddCurrentTaskToDelayedList>
}
 80125a8:	bf00      	nop
 80125aa:	3710      	adds	r7, #16
 80125ac:	46bd      	mov	sp, r7
 80125ae:	bd80      	pop	{r7, pc}
 80125b0:	200021b8 	.word	0x200021b8

080125b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80125b4:	b580      	push	{r7, lr}
 80125b6:	b086      	sub	sp, #24
 80125b8:	af00      	add	r7, sp, #0
 80125ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	68db      	ldr	r3, [r3, #12]
 80125c0:	68db      	ldr	r3, [r3, #12]
 80125c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80125c4:	693b      	ldr	r3, [r7, #16]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d10a      	bne.n	80125e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80125ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125ce:	f383 8811 	msr	BASEPRI, r3
 80125d2:	f3bf 8f6f 	isb	sy
 80125d6:	f3bf 8f4f 	dsb	sy
 80125da:	60fb      	str	r3, [r7, #12]
}
 80125dc:	bf00      	nop
 80125de:	e7fe      	b.n	80125de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80125e0:	693b      	ldr	r3, [r7, #16]
 80125e2:	3318      	adds	r3, #24
 80125e4:	4618      	mov	r0, r3
 80125e6:	f7fe fe37 	bl	8011258 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80125ea:	4b1d      	ldr	r3, [pc, #116]	; (8012660 <xTaskRemoveFromEventList+0xac>)
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d11c      	bne.n	801262c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80125f2:	693b      	ldr	r3, [r7, #16]
 80125f4:	3304      	adds	r3, #4
 80125f6:	4618      	mov	r0, r3
 80125f8:	f7fe fe2e 	bl	8011258 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80125fc:	693b      	ldr	r3, [r7, #16]
 80125fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012600:	2201      	movs	r2, #1
 8012602:	409a      	lsls	r2, r3
 8012604:	4b17      	ldr	r3, [pc, #92]	; (8012664 <xTaskRemoveFromEventList+0xb0>)
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	4313      	orrs	r3, r2
 801260a:	4a16      	ldr	r2, [pc, #88]	; (8012664 <xTaskRemoveFromEventList+0xb0>)
 801260c:	6013      	str	r3, [r2, #0]
 801260e:	693b      	ldr	r3, [r7, #16]
 8012610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012612:	4613      	mov	r3, r2
 8012614:	009b      	lsls	r3, r3, #2
 8012616:	4413      	add	r3, r2
 8012618:	009b      	lsls	r3, r3, #2
 801261a:	4a13      	ldr	r2, [pc, #76]	; (8012668 <xTaskRemoveFromEventList+0xb4>)
 801261c:	441a      	add	r2, r3
 801261e:	693b      	ldr	r3, [r7, #16]
 8012620:	3304      	adds	r3, #4
 8012622:	4619      	mov	r1, r3
 8012624:	4610      	mov	r0, r2
 8012626:	f7fe fdba 	bl	801119e <vListInsertEnd>
 801262a:	e005      	b.n	8012638 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801262c:	693b      	ldr	r3, [r7, #16]
 801262e:	3318      	adds	r3, #24
 8012630:	4619      	mov	r1, r3
 8012632:	480e      	ldr	r0, [pc, #56]	; (801266c <xTaskRemoveFromEventList+0xb8>)
 8012634:	f7fe fdb3 	bl	801119e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012638:	693b      	ldr	r3, [r7, #16]
 801263a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801263c:	4b0c      	ldr	r3, [pc, #48]	; (8012670 <xTaskRemoveFromEventList+0xbc>)
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012642:	429a      	cmp	r2, r3
 8012644:	d905      	bls.n	8012652 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012646:	2301      	movs	r3, #1
 8012648:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801264a:	4b0a      	ldr	r3, [pc, #40]	; (8012674 <xTaskRemoveFromEventList+0xc0>)
 801264c:	2201      	movs	r2, #1
 801264e:	601a      	str	r2, [r3, #0]
 8012650:	e001      	b.n	8012656 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8012652:	2300      	movs	r3, #0
 8012654:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012656:	697b      	ldr	r3, [r7, #20]
}
 8012658:	4618      	mov	r0, r3
 801265a:	3718      	adds	r7, #24
 801265c:	46bd      	mov	sp, r7
 801265e:	bd80      	pop	{r7, pc}
 8012660:	200022e0 	.word	0x200022e0
 8012664:	200022c0 	.word	0x200022c0
 8012668:	200021bc 	.word	0x200021bc
 801266c:	20002278 	.word	0x20002278
 8012670:	200021b8 	.word	0x200021b8
 8012674:	200022cc 	.word	0x200022cc

08012678 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012678:	b480      	push	{r7}
 801267a:	b083      	sub	sp, #12
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012680:	4b06      	ldr	r3, [pc, #24]	; (801269c <vTaskInternalSetTimeOutState+0x24>)
 8012682:	681a      	ldr	r2, [r3, #0]
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012688:	4b05      	ldr	r3, [pc, #20]	; (80126a0 <vTaskInternalSetTimeOutState+0x28>)
 801268a:	681a      	ldr	r2, [r3, #0]
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	605a      	str	r2, [r3, #4]
}
 8012690:	bf00      	nop
 8012692:	370c      	adds	r7, #12
 8012694:	46bd      	mov	sp, r7
 8012696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269a:	4770      	bx	lr
 801269c:	200022d0 	.word	0x200022d0
 80126a0:	200022bc 	.word	0x200022bc

080126a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b088      	sub	sp, #32
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
 80126ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d10a      	bne.n	80126ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80126b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126b8:	f383 8811 	msr	BASEPRI, r3
 80126bc:	f3bf 8f6f 	isb	sy
 80126c0:	f3bf 8f4f 	dsb	sy
 80126c4:	613b      	str	r3, [r7, #16]
}
 80126c6:	bf00      	nop
 80126c8:	e7fe      	b.n	80126c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80126ca:	683b      	ldr	r3, [r7, #0]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d10a      	bne.n	80126e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80126d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126d4:	f383 8811 	msr	BASEPRI, r3
 80126d8:	f3bf 8f6f 	isb	sy
 80126dc:	f3bf 8f4f 	dsb	sy
 80126e0:	60fb      	str	r3, [r7, #12]
}
 80126e2:	bf00      	nop
 80126e4:	e7fe      	b.n	80126e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80126e6:	f000 fb5d 	bl	8012da4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80126ea:	4b1d      	ldr	r3, [pc, #116]	; (8012760 <xTaskCheckForTimeOut+0xbc>)
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	685b      	ldr	r3, [r3, #4]
 80126f4:	69ba      	ldr	r2, [r7, #24]
 80126f6:	1ad3      	subs	r3, r2, r3
 80126f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80126fa:	683b      	ldr	r3, [r7, #0]
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012702:	d102      	bne.n	801270a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012704:	2300      	movs	r3, #0
 8012706:	61fb      	str	r3, [r7, #28]
 8012708:	e023      	b.n	8012752 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	681a      	ldr	r2, [r3, #0]
 801270e:	4b15      	ldr	r3, [pc, #84]	; (8012764 <xTaskCheckForTimeOut+0xc0>)
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	429a      	cmp	r2, r3
 8012714:	d007      	beq.n	8012726 <xTaskCheckForTimeOut+0x82>
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	685b      	ldr	r3, [r3, #4]
 801271a:	69ba      	ldr	r2, [r7, #24]
 801271c:	429a      	cmp	r2, r3
 801271e:	d302      	bcc.n	8012726 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012720:	2301      	movs	r3, #1
 8012722:	61fb      	str	r3, [r7, #28]
 8012724:	e015      	b.n	8012752 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012726:	683b      	ldr	r3, [r7, #0]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	697a      	ldr	r2, [r7, #20]
 801272c:	429a      	cmp	r2, r3
 801272e:	d20b      	bcs.n	8012748 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012730:	683b      	ldr	r3, [r7, #0]
 8012732:	681a      	ldr	r2, [r3, #0]
 8012734:	697b      	ldr	r3, [r7, #20]
 8012736:	1ad2      	subs	r2, r2, r3
 8012738:	683b      	ldr	r3, [r7, #0]
 801273a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801273c:	6878      	ldr	r0, [r7, #4]
 801273e:	f7ff ff9b 	bl	8012678 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012742:	2300      	movs	r3, #0
 8012744:	61fb      	str	r3, [r7, #28]
 8012746:	e004      	b.n	8012752 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8012748:	683b      	ldr	r3, [r7, #0]
 801274a:	2200      	movs	r2, #0
 801274c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801274e:	2301      	movs	r3, #1
 8012750:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012752:	f000 fb57 	bl	8012e04 <vPortExitCritical>

	return xReturn;
 8012756:	69fb      	ldr	r3, [r7, #28]
}
 8012758:	4618      	mov	r0, r3
 801275a:	3720      	adds	r7, #32
 801275c:	46bd      	mov	sp, r7
 801275e:	bd80      	pop	{r7, pc}
 8012760:	200022bc 	.word	0x200022bc
 8012764:	200022d0 	.word	0x200022d0

08012768 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012768:	b480      	push	{r7}
 801276a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801276c:	4b03      	ldr	r3, [pc, #12]	; (801277c <vTaskMissedYield+0x14>)
 801276e:	2201      	movs	r2, #1
 8012770:	601a      	str	r2, [r3, #0]
}
 8012772:	bf00      	nop
 8012774:	46bd      	mov	sp, r7
 8012776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801277a:	4770      	bx	lr
 801277c:	200022cc 	.word	0x200022cc

08012780 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012780:	b580      	push	{r7, lr}
 8012782:	b082      	sub	sp, #8
 8012784:	af00      	add	r7, sp, #0
 8012786:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012788:	f000 f852 	bl	8012830 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801278c:	4b06      	ldr	r3, [pc, #24]	; (80127a8 <prvIdleTask+0x28>)
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	2b01      	cmp	r3, #1
 8012792:	d9f9      	bls.n	8012788 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012794:	4b05      	ldr	r3, [pc, #20]	; (80127ac <prvIdleTask+0x2c>)
 8012796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801279a:	601a      	str	r2, [r3, #0]
 801279c:	f3bf 8f4f 	dsb	sy
 80127a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80127a4:	e7f0      	b.n	8012788 <prvIdleTask+0x8>
 80127a6:	bf00      	nop
 80127a8:	200021bc 	.word	0x200021bc
 80127ac:	e000ed04 	.word	0xe000ed04

080127b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b082      	sub	sp, #8
 80127b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80127b6:	2300      	movs	r3, #0
 80127b8:	607b      	str	r3, [r7, #4]
 80127ba:	e00c      	b.n	80127d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80127bc:	687a      	ldr	r2, [r7, #4]
 80127be:	4613      	mov	r3, r2
 80127c0:	009b      	lsls	r3, r3, #2
 80127c2:	4413      	add	r3, r2
 80127c4:	009b      	lsls	r3, r3, #2
 80127c6:	4a12      	ldr	r2, [pc, #72]	; (8012810 <prvInitialiseTaskLists+0x60>)
 80127c8:	4413      	add	r3, r2
 80127ca:	4618      	mov	r0, r3
 80127cc:	f7fe fcba 	bl	8011144 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	3301      	adds	r3, #1
 80127d4:	607b      	str	r3, [r7, #4]
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	2b06      	cmp	r3, #6
 80127da:	d9ef      	bls.n	80127bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80127dc:	480d      	ldr	r0, [pc, #52]	; (8012814 <prvInitialiseTaskLists+0x64>)
 80127de:	f7fe fcb1 	bl	8011144 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80127e2:	480d      	ldr	r0, [pc, #52]	; (8012818 <prvInitialiseTaskLists+0x68>)
 80127e4:	f7fe fcae 	bl	8011144 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80127e8:	480c      	ldr	r0, [pc, #48]	; (801281c <prvInitialiseTaskLists+0x6c>)
 80127ea:	f7fe fcab 	bl	8011144 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80127ee:	480c      	ldr	r0, [pc, #48]	; (8012820 <prvInitialiseTaskLists+0x70>)
 80127f0:	f7fe fca8 	bl	8011144 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80127f4:	480b      	ldr	r0, [pc, #44]	; (8012824 <prvInitialiseTaskLists+0x74>)
 80127f6:	f7fe fca5 	bl	8011144 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80127fa:	4b0b      	ldr	r3, [pc, #44]	; (8012828 <prvInitialiseTaskLists+0x78>)
 80127fc:	4a05      	ldr	r2, [pc, #20]	; (8012814 <prvInitialiseTaskLists+0x64>)
 80127fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012800:	4b0a      	ldr	r3, [pc, #40]	; (801282c <prvInitialiseTaskLists+0x7c>)
 8012802:	4a05      	ldr	r2, [pc, #20]	; (8012818 <prvInitialiseTaskLists+0x68>)
 8012804:	601a      	str	r2, [r3, #0]
}
 8012806:	bf00      	nop
 8012808:	3708      	adds	r7, #8
 801280a:	46bd      	mov	sp, r7
 801280c:	bd80      	pop	{r7, pc}
 801280e:	bf00      	nop
 8012810:	200021bc 	.word	0x200021bc
 8012814:	20002248 	.word	0x20002248
 8012818:	2000225c 	.word	0x2000225c
 801281c:	20002278 	.word	0x20002278
 8012820:	2000228c 	.word	0x2000228c
 8012824:	200022a4 	.word	0x200022a4
 8012828:	20002270 	.word	0x20002270
 801282c:	20002274 	.word	0x20002274

08012830 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012830:	b580      	push	{r7, lr}
 8012832:	b082      	sub	sp, #8
 8012834:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012836:	e019      	b.n	801286c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012838:	f000 fab4 	bl	8012da4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801283c:	4b10      	ldr	r3, [pc, #64]	; (8012880 <prvCheckTasksWaitingTermination+0x50>)
 801283e:	68db      	ldr	r3, [r3, #12]
 8012840:	68db      	ldr	r3, [r3, #12]
 8012842:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	3304      	adds	r3, #4
 8012848:	4618      	mov	r0, r3
 801284a:	f7fe fd05 	bl	8011258 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801284e:	4b0d      	ldr	r3, [pc, #52]	; (8012884 <prvCheckTasksWaitingTermination+0x54>)
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	3b01      	subs	r3, #1
 8012854:	4a0b      	ldr	r2, [pc, #44]	; (8012884 <prvCheckTasksWaitingTermination+0x54>)
 8012856:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012858:	4b0b      	ldr	r3, [pc, #44]	; (8012888 <prvCheckTasksWaitingTermination+0x58>)
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	3b01      	subs	r3, #1
 801285e:	4a0a      	ldr	r2, [pc, #40]	; (8012888 <prvCheckTasksWaitingTermination+0x58>)
 8012860:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012862:	f000 facf 	bl	8012e04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012866:	6878      	ldr	r0, [r7, #4]
 8012868:	f000 f810 	bl	801288c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801286c:	4b06      	ldr	r3, [pc, #24]	; (8012888 <prvCheckTasksWaitingTermination+0x58>)
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d1e1      	bne.n	8012838 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012874:	bf00      	nop
 8012876:	bf00      	nop
 8012878:	3708      	adds	r7, #8
 801287a:	46bd      	mov	sp, r7
 801287c:	bd80      	pop	{r7, pc}
 801287e:	bf00      	nop
 8012880:	2000228c 	.word	0x2000228c
 8012884:	200022b8 	.word	0x200022b8
 8012888:	200022a0 	.word	0x200022a0

0801288c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801288c:	b580      	push	{r7, lr}
 801288e:	b084      	sub	sp, #16
 8012890:	af00      	add	r7, sp, #0
 8012892:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	334c      	adds	r3, #76	; 0x4c
 8012898:	4618      	mov	r0, r3
 801289a:	f001 fb31 	bl	8013f00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d108      	bne.n	80128ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128ac:	4618      	mov	r0, r3
 80128ae:	f000 fc67 	bl	8013180 <vPortFree>
				vPortFree( pxTCB );
 80128b2:	6878      	ldr	r0, [r7, #4]
 80128b4:	f000 fc64 	bl	8013180 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80128b8:	e018      	b.n	80128ec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80128c0:	2b01      	cmp	r3, #1
 80128c2:	d103      	bne.n	80128cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80128c4:	6878      	ldr	r0, [r7, #4]
 80128c6:	f000 fc5b 	bl	8013180 <vPortFree>
	}
 80128ca:	e00f      	b.n	80128ec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80128d2:	2b02      	cmp	r3, #2
 80128d4:	d00a      	beq.n	80128ec <prvDeleteTCB+0x60>
	__asm volatile
 80128d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128da:	f383 8811 	msr	BASEPRI, r3
 80128de:	f3bf 8f6f 	isb	sy
 80128e2:	f3bf 8f4f 	dsb	sy
 80128e6:	60fb      	str	r3, [r7, #12]
}
 80128e8:	bf00      	nop
 80128ea:	e7fe      	b.n	80128ea <prvDeleteTCB+0x5e>
	}
 80128ec:	bf00      	nop
 80128ee:	3710      	adds	r7, #16
 80128f0:	46bd      	mov	sp, r7
 80128f2:	bd80      	pop	{r7, pc}

080128f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80128f4:	b480      	push	{r7}
 80128f6:	b083      	sub	sp, #12
 80128f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80128fa:	4b0c      	ldr	r3, [pc, #48]	; (801292c <prvResetNextTaskUnblockTime+0x38>)
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d104      	bne.n	801290e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012904:	4b0a      	ldr	r3, [pc, #40]	; (8012930 <prvResetNextTaskUnblockTime+0x3c>)
 8012906:	f04f 32ff 	mov.w	r2, #4294967295
 801290a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801290c:	e008      	b.n	8012920 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801290e:	4b07      	ldr	r3, [pc, #28]	; (801292c <prvResetNextTaskUnblockTime+0x38>)
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	68db      	ldr	r3, [r3, #12]
 8012914:	68db      	ldr	r3, [r3, #12]
 8012916:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	685b      	ldr	r3, [r3, #4]
 801291c:	4a04      	ldr	r2, [pc, #16]	; (8012930 <prvResetNextTaskUnblockTime+0x3c>)
 801291e:	6013      	str	r3, [r2, #0]
}
 8012920:	bf00      	nop
 8012922:	370c      	adds	r7, #12
 8012924:	46bd      	mov	sp, r7
 8012926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292a:	4770      	bx	lr
 801292c:	20002270 	.word	0x20002270
 8012930:	200022d8 	.word	0x200022d8

08012934 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012934:	b480      	push	{r7}
 8012936:	b083      	sub	sp, #12
 8012938:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801293a:	4b0b      	ldr	r3, [pc, #44]	; (8012968 <xTaskGetSchedulerState+0x34>)
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d102      	bne.n	8012948 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012942:	2301      	movs	r3, #1
 8012944:	607b      	str	r3, [r7, #4]
 8012946:	e008      	b.n	801295a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012948:	4b08      	ldr	r3, [pc, #32]	; (801296c <xTaskGetSchedulerState+0x38>)
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	2b00      	cmp	r3, #0
 801294e:	d102      	bne.n	8012956 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012950:	2302      	movs	r3, #2
 8012952:	607b      	str	r3, [r7, #4]
 8012954:	e001      	b.n	801295a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012956:	2300      	movs	r3, #0
 8012958:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801295a:	687b      	ldr	r3, [r7, #4]
	}
 801295c:	4618      	mov	r0, r3
 801295e:	370c      	adds	r7, #12
 8012960:	46bd      	mov	sp, r7
 8012962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012966:	4770      	bx	lr
 8012968:	200022c4 	.word	0x200022c4
 801296c:	200022e0 	.word	0x200022e0

08012970 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012970:	b580      	push	{r7, lr}
 8012972:	b086      	sub	sp, #24
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801297c:	2300      	movs	r3, #0
 801297e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d06e      	beq.n	8012a64 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012986:	4b3a      	ldr	r3, [pc, #232]	; (8012a70 <xTaskPriorityDisinherit+0x100>)
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	693a      	ldr	r2, [r7, #16]
 801298c:	429a      	cmp	r2, r3
 801298e:	d00a      	beq.n	80129a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8012990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012994:	f383 8811 	msr	BASEPRI, r3
 8012998:	f3bf 8f6f 	isb	sy
 801299c:	f3bf 8f4f 	dsb	sy
 80129a0:	60fb      	str	r3, [r7, #12]
}
 80129a2:	bf00      	nop
 80129a4:	e7fe      	b.n	80129a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80129a6:	693b      	ldr	r3, [r7, #16]
 80129a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d10a      	bne.n	80129c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80129ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129b2:	f383 8811 	msr	BASEPRI, r3
 80129b6:	f3bf 8f6f 	isb	sy
 80129ba:	f3bf 8f4f 	dsb	sy
 80129be:	60bb      	str	r3, [r7, #8]
}
 80129c0:	bf00      	nop
 80129c2:	e7fe      	b.n	80129c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80129c4:	693b      	ldr	r3, [r7, #16]
 80129c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80129c8:	1e5a      	subs	r2, r3, #1
 80129ca:	693b      	ldr	r3, [r7, #16]
 80129cc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80129ce:	693b      	ldr	r3, [r7, #16]
 80129d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129d2:	693b      	ldr	r3, [r7, #16]
 80129d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80129d6:	429a      	cmp	r2, r3
 80129d8:	d044      	beq.n	8012a64 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80129da:	693b      	ldr	r3, [r7, #16]
 80129dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d140      	bne.n	8012a64 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80129e2:	693b      	ldr	r3, [r7, #16]
 80129e4:	3304      	adds	r3, #4
 80129e6:	4618      	mov	r0, r3
 80129e8:	f7fe fc36 	bl	8011258 <uxListRemove>
 80129ec:	4603      	mov	r3, r0
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d115      	bne.n	8012a1e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80129f2:	693b      	ldr	r3, [r7, #16]
 80129f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129f6:	491f      	ldr	r1, [pc, #124]	; (8012a74 <xTaskPriorityDisinherit+0x104>)
 80129f8:	4613      	mov	r3, r2
 80129fa:	009b      	lsls	r3, r3, #2
 80129fc:	4413      	add	r3, r2
 80129fe:	009b      	lsls	r3, r3, #2
 8012a00:	440b      	add	r3, r1
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d10a      	bne.n	8012a1e <xTaskPriorityDisinherit+0xae>
 8012a08:	693b      	ldr	r3, [r7, #16]
 8012a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a0c:	2201      	movs	r2, #1
 8012a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8012a12:	43da      	mvns	r2, r3
 8012a14:	4b18      	ldr	r3, [pc, #96]	; (8012a78 <xTaskPriorityDisinherit+0x108>)
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	4013      	ands	r3, r2
 8012a1a:	4a17      	ldr	r2, [pc, #92]	; (8012a78 <xTaskPriorityDisinherit+0x108>)
 8012a1c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012a1e:	693b      	ldr	r3, [r7, #16]
 8012a20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012a22:	693b      	ldr	r3, [r7, #16]
 8012a24:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a26:	693b      	ldr	r3, [r7, #16]
 8012a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a2a:	f1c3 0207 	rsb	r2, r3, #7
 8012a2e:	693b      	ldr	r3, [r7, #16]
 8012a30:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012a32:	693b      	ldr	r3, [r7, #16]
 8012a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a36:	2201      	movs	r2, #1
 8012a38:	409a      	lsls	r2, r3
 8012a3a:	4b0f      	ldr	r3, [pc, #60]	; (8012a78 <xTaskPriorityDisinherit+0x108>)
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	4313      	orrs	r3, r2
 8012a40:	4a0d      	ldr	r2, [pc, #52]	; (8012a78 <xTaskPriorityDisinherit+0x108>)
 8012a42:	6013      	str	r3, [r2, #0]
 8012a44:	693b      	ldr	r3, [r7, #16]
 8012a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a48:	4613      	mov	r3, r2
 8012a4a:	009b      	lsls	r3, r3, #2
 8012a4c:	4413      	add	r3, r2
 8012a4e:	009b      	lsls	r3, r3, #2
 8012a50:	4a08      	ldr	r2, [pc, #32]	; (8012a74 <xTaskPriorityDisinherit+0x104>)
 8012a52:	441a      	add	r2, r3
 8012a54:	693b      	ldr	r3, [r7, #16]
 8012a56:	3304      	adds	r3, #4
 8012a58:	4619      	mov	r1, r3
 8012a5a:	4610      	mov	r0, r2
 8012a5c:	f7fe fb9f 	bl	801119e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012a60:	2301      	movs	r3, #1
 8012a62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012a64:	697b      	ldr	r3, [r7, #20]
	}
 8012a66:	4618      	mov	r0, r3
 8012a68:	3718      	adds	r7, #24
 8012a6a:	46bd      	mov	sp, r7
 8012a6c:	bd80      	pop	{r7, pc}
 8012a6e:	bf00      	nop
 8012a70:	200021b8 	.word	0x200021b8
 8012a74:	200021bc 	.word	0x200021bc
 8012a78:	200022c0 	.word	0x200022c0

08012a7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012a7c:	b580      	push	{r7, lr}
 8012a7e:	b084      	sub	sp, #16
 8012a80:	af00      	add	r7, sp, #0
 8012a82:	6078      	str	r0, [r7, #4]
 8012a84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012a86:	4b29      	ldr	r3, [pc, #164]	; (8012b2c <prvAddCurrentTaskToDelayedList+0xb0>)
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012a8c:	4b28      	ldr	r3, [pc, #160]	; (8012b30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	3304      	adds	r3, #4
 8012a92:	4618      	mov	r0, r3
 8012a94:	f7fe fbe0 	bl	8011258 <uxListRemove>
 8012a98:	4603      	mov	r3, r0
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d10b      	bne.n	8012ab6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8012a9e:	4b24      	ldr	r3, [pc, #144]	; (8012b30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012aa4:	2201      	movs	r2, #1
 8012aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8012aaa:	43da      	mvns	r2, r3
 8012aac:	4b21      	ldr	r3, [pc, #132]	; (8012b34 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	4013      	ands	r3, r2
 8012ab2:	4a20      	ldr	r2, [pc, #128]	; (8012b34 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012ab4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012abc:	d10a      	bne.n	8012ad4 <prvAddCurrentTaskToDelayedList+0x58>
 8012abe:	683b      	ldr	r3, [r7, #0]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d007      	beq.n	8012ad4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012ac4:	4b1a      	ldr	r3, [pc, #104]	; (8012b30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	3304      	adds	r3, #4
 8012aca:	4619      	mov	r1, r3
 8012acc:	481a      	ldr	r0, [pc, #104]	; (8012b38 <prvAddCurrentTaskToDelayedList+0xbc>)
 8012ace:	f7fe fb66 	bl	801119e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012ad2:	e026      	b.n	8012b22 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012ad4:	68fa      	ldr	r2, [r7, #12]
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	4413      	add	r3, r2
 8012ada:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012adc:	4b14      	ldr	r3, [pc, #80]	; (8012b30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	68ba      	ldr	r2, [r7, #8]
 8012ae2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012ae4:	68ba      	ldr	r2, [r7, #8]
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	429a      	cmp	r2, r3
 8012aea:	d209      	bcs.n	8012b00 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012aec:	4b13      	ldr	r3, [pc, #76]	; (8012b3c <prvAddCurrentTaskToDelayedList+0xc0>)
 8012aee:	681a      	ldr	r2, [r3, #0]
 8012af0:	4b0f      	ldr	r3, [pc, #60]	; (8012b30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	3304      	adds	r3, #4
 8012af6:	4619      	mov	r1, r3
 8012af8:	4610      	mov	r0, r2
 8012afa:	f7fe fb74 	bl	80111e6 <vListInsert>
}
 8012afe:	e010      	b.n	8012b22 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012b00:	4b0f      	ldr	r3, [pc, #60]	; (8012b40 <prvAddCurrentTaskToDelayedList+0xc4>)
 8012b02:	681a      	ldr	r2, [r3, #0]
 8012b04:	4b0a      	ldr	r3, [pc, #40]	; (8012b30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	3304      	adds	r3, #4
 8012b0a:	4619      	mov	r1, r3
 8012b0c:	4610      	mov	r0, r2
 8012b0e:	f7fe fb6a 	bl	80111e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012b12:	4b0c      	ldr	r3, [pc, #48]	; (8012b44 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	68ba      	ldr	r2, [r7, #8]
 8012b18:	429a      	cmp	r2, r3
 8012b1a:	d202      	bcs.n	8012b22 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8012b1c:	4a09      	ldr	r2, [pc, #36]	; (8012b44 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012b1e:	68bb      	ldr	r3, [r7, #8]
 8012b20:	6013      	str	r3, [r2, #0]
}
 8012b22:	bf00      	nop
 8012b24:	3710      	adds	r7, #16
 8012b26:	46bd      	mov	sp, r7
 8012b28:	bd80      	pop	{r7, pc}
 8012b2a:	bf00      	nop
 8012b2c:	200022bc 	.word	0x200022bc
 8012b30:	200021b8 	.word	0x200021b8
 8012b34:	200022c0 	.word	0x200022c0
 8012b38:	200022a4 	.word	0x200022a4
 8012b3c:	20002274 	.word	0x20002274
 8012b40:	20002270 	.word	0x20002270
 8012b44:	200022d8 	.word	0x200022d8

08012b48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012b48:	b480      	push	{r7}
 8012b4a:	b085      	sub	sp, #20
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	60f8      	str	r0, [r7, #12]
 8012b50:	60b9      	str	r1, [r7, #8]
 8012b52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	3b04      	subs	r3, #4
 8012b58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012b60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	3b04      	subs	r3, #4
 8012b66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012b68:	68bb      	ldr	r3, [r7, #8]
 8012b6a:	f023 0201 	bic.w	r2, r3, #1
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	3b04      	subs	r3, #4
 8012b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012b78:	4a0c      	ldr	r2, [pc, #48]	; (8012bac <pxPortInitialiseStack+0x64>)
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	3b14      	subs	r3, #20
 8012b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012b84:	687a      	ldr	r2, [r7, #4]
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	3b04      	subs	r3, #4
 8012b8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	f06f 0202 	mvn.w	r2, #2
 8012b96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	3b20      	subs	r3, #32
 8012b9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012b9e:	68fb      	ldr	r3, [r7, #12]
}
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	3714      	adds	r7, #20
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012baa:	4770      	bx	lr
 8012bac:	08012bb1 	.word	0x08012bb1

08012bb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012bb0:	b480      	push	{r7}
 8012bb2:	b085      	sub	sp, #20
 8012bb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012bb6:	2300      	movs	r3, #0
 8012bb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012bba:	4b12      	ldr	r3, [pc, #72]	; (8012c04 <prvTaskExitError+0x54>)
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bc2:	d00a      	beq.n	8012bda <prvTaskExitError+0x2a>
	__asm volatile
 8012bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bc8:	f383 8811 	msr	BASEPRI, r3
 8012bcc:	f3bf 8f6f 	isb	sy
 8012bd0:	f3bf 8f4f 	dsb	sy
 8012bd4:	60fb      	str	r3, [r7, #12]
}
 8012bd6:	bf00      	nop
 8012bd8:	e7fe      	b.n	8012bd8 <prvTaskExitError+0x28>
	__asm volatile
 8012bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bde:	f383 8811 	msr	BASEPRI, r3
 8012be2:	f3bf 8f6f 	isb	sy
 8012be6:	f3bf 8f4f 	dsb	sy
 8012bea:	60bb      	str	r3, [r7, #8]
}
 8012bec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012bee:	bf00      	nop
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d0fc      	beq.n	8012bf0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012bf6:	bf00      	nop
 8012bf8:	bf00      	nop
 8012bfa:	3714      	adds	r7, #20
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c02:	4770      	bx	lr
 8012c04:	200002ac 	.word	0x200002ac
	...

08012c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012c10:	4b07      	ldr	r3, [pc, #28]	; (8012c30 <pxCurrentTCBConst2>)
 8012c12:	6819      	ldr	r1, [r3, #0]
 8012c14:	6808      	ldr	r0, [r1, #0]
 8012c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c1a:	f380 8809 	msr	PSP, r0
 8012c1e:	f3bf 8f6f 	isb	sy
 8012c22:	f04f 0000 	mov.w	r0, #0
 8012c26:	f380 8811 	msr	BASEPRI, r0
 8012c2a:	4770      	bx	lr
 8012c2c:	f3af 8000 	nop.w

08012c30 <pxCurrentTCBConst2>:
 8012c30:	200021b8 	.word	0x200021b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012c34:	bf00      	nop
 8012c36:	bf00      	nop

08012c38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012c38:	4808      	ldr	r0, [pc, #32]	; (8012c5c <prvPortStartFirstTask+0x24>)
 8012c3a:	6800      	ldr	r0, [r0, #0]
 8012c3c:	6800      	ldr	r0, [r0, #0]
 8012c3e:	f380 8808 	msr	MSP, r0
 8012c42:	f04f 0000 	mov.w	r0, #0
 8012c46:	f380 8814 	msr	CONTROL, r0
 8012c4a:	b662      	cpsie	i
 8012c4c:	b661      	cpsie	f
 8012c4e:	f3bf 8f4f 	dsb	sy
 8012c52:	f3bf 8f6f 	isb	sy
 8012c56:	df00      	svc	0
 8012c58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012c5a:	bf00      	nop
 8012c5c:	e000ed08 	.word	0xe000ed08

08012c60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012c60:	b580      	push	{r7, lr}
 8012c62:	b086      	sub	sp, #24
 8012c64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012c66:	4b46      	ldr	r3, [pc, #280]	; (8012d80 <xPortStartScheduler+0x120>)
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	4a46      	ldr	r2, [pc, #280]	; (8012d84 <xPortStartScheduler+0x124>)
 8012c6c:	4293      	cmp	r3, r2
 8012c6e:	d10a      	bne.n	8012c86 <xPortStartScheduler+0x26>
	__asm volatile
 8012c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c74:	f383 8811 	msr	BASEPRI, r3
 8012c78:	f3bf 8f6f 	isb	sy
 8012c7c:	f3bf 8f4f 	dsb	sy
 8012c80:	613b      	str	r3, [r7, #16]
}
 8012c82:	bf00      	nop
 8012c84:	e7fe      	b.n	8012c84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012c86:	4b3e      	ldr	r3, [pc, #248]	; (8012d80 <xPortStartScheduler+0x120>)
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	4a3f      	ldr	r2, [pc, #252]	; (8012d88 <xPortStartScheduler+0x128>)
 8012c8c:	4293      	cmp	r3, r2
 8012c8e:	d10a      	bne.n	8012ca6 <xPortStartScheduler+0x46>
	__asm volatile
 8012c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c94:	f383 8811 	msr	BASEPRI, r3
 8012c98:	f3bf 8f6f 	isb	sy
 8012c9c:	f3bf 8f4f 	dsb	sy
 8012ca0:	60fb      	str	r3, [r7, #12]
}
 8012ca2:	bf00      	nop
 8012ca4:	e7fe      	b.n	8012ca4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012ca6:	4b39      	ldr	r3, [pc, #228]	; (8012d8c <xPortStartScheduler+0x12c>)
 8012ca8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012caa:	697b      	ldr	r3, [r7, #20]
 8012cac:	781b      	ldrb	r3, [r3, #0]
 8012cae:	b2db      	uxtb	r3, r3
 8012cb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012cb2:	697b      	ldr	r3, [r7, #20]
 8012cb4:	22ff      	movs	r2, #255	; 0xff
 8012cb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012cb8:	697b      	ldr	r3, [r7, #20]
 8012cba:	781b      	ldrb	r3, [r3, #0]
 8012cbc:	b2db      	uxtb	r3, r3
 8012cbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012cc0:	78fb      	ldrb	r3, [r7, #3]
 8012cc2:	b2db      	uxtb	r3, r3
 8012cc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012cc8:	b2da      	uxtb	r2, r3
 8012cca:	4b31      	ldr	r3, [pc, #196]	; (8012d90 <xPortStartScheduler+0x130>)
 8012ccc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012cce:	4b31      	ldr	r3, [pc, #196]	; (8012d94 <xPortStartScheduler+0x134>)
 8012cd0:	2207      	movs	r2, #7
 8012cd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012cd4:	e009      	b.n	8012cea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012cd6:	4b2f      	ldr	r3, [pc, #188]	; (8012d94 <xPortStartScheduler+0x134>)
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	3b01      	subs	r3, #1
 8012cdc:	4a2d      	ldr	r2, [pc, #180]	; (8012d94 <xPortStartScheduler+0x134>)
 8012cde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012ce0:	78fb      	ldrb	r3, [r7, #3]
 8012ce2:	b2db      	uxtb	r3, r3
 8012ce4:	005b      	lsls	r3, r3, #1
 8012ce6:	b2db      	uxtb	r3, r3
 8012ce8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012cea:	78fb      	ldrb	r3, [r7, #3]
 8012cec:	b2db      	uxtb	r3, r3
 8012cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012cf2:	2b80      	cmp	r3, #128	; 0x80
 8012cf4:	d0ef      	beq.n	8012cd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012cf6:	4b27      	ldr	r3, [pc, #156]	; (8012d94 <xPortStartScheduler+0x134>)
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	f1c3 0307 	rsb	r3, r3, #7
 8012cfe:	2b04      	cmp	r3, #4
 8012d00:	d00a      	beq.n	8012d18 <xPortStartScheduler+0xb8>
	__asm volatile
 8012d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d06:	f383 8811 	msr	BASEPRI, r3
 8012d0a:	f3bf 8f6f 	isb	sy
 8012d0e:	f3bf 8f4f 	dsb	sy
 8012d12:	60bb      	str	r3, [r7, #8]
}
 8012d14:	bf00      	nop
 8012d16:	e7fe      	b.n	8012d16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012d18:	4b1e      	ldr	r3, [pc, #120]	; (8012d94 <xPortStartScheduler+0x134>)
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	021b      	lsls	r3, r3, #8
 8012d1e:	4a1d      	ldr	r2, [pc, #116]	; (8012d94 <xPortStartScheduler+0x134>)
 8012d20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012d22:	4b1c      	ldr	r3, [pc, #112]	; (8012d94 <xPortStartScheduler+0x134>)
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012d2a:	4a1a      	ldr	r2, [pc, #104]	; (8012d94 <xPortStartScheduler+0x134>)
 8012d2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	b2da      	uxtb	r2, r3
 8012d32:	697b      	ldr	r3, [r7, #20]
 8012d34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012d36:	4b18      	ldr	r3, [pc, #96]	; (8012d98 <xPortStartScheduler+0x138>)
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	4a17      	ldr	r2, [pc, #92]	; (8012d98 <xPortStartScheduler+0x138>)
 8012d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012d40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012d42:	4b15      	ldr	r3, [pc, #84]	; (8012d98 <xPortStartScheduler+0x138>)
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	4a14      	ldr	r2, [pc, #80]	; (8012d98 <xPortStartScheduler+0x138>)
 8012d48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012d4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012d4e:	f000 f8dd 	bl	8012f0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012d52:	4b12      	ldr	r3, [pc, #72]	; (8012d9c <xPortStartScheduler+0x13c>)
 8012d54:	2200      	movs	r2, #0
 8012d56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012d58:	f000 f8fc 	bl	8012f54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012d5c:	4b10      	ldr	r3, [pc, #64]	; (8012da0 <xPortStartScheduler+0x140>)
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	4a0f      	ldr	r2, [pc, #60]	; (8012da0 <xPortStartScheduler+0x140>)
 8012d62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012d66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012d68:	f7ff ff66 	bl	8012c38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012d6c:	f7ff fb9c 	bl	80124a8 <vTaskSwitchContext>
	prvTaskExitError();
 8012d70:	f7ff ff1e 	bl	8012bb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012d74:	2300      	movs	r3, #0
}
 8012d76:	4618      	mov	r0, r3
 8012d78:	3718      	adds	r7, #24
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	bd80      	pop	{r7, pc}
 8012d7e:	bf00      	nop
 8012d80:	e000ed00 	.word	0xe000ed00
 8012d84:	410fc271 	.word	0x410fc271
 8012d88:	410fc270 	.word	0x410fc270
 8012d8c:	e000e400 	.word	0xe000e400
 8012d90:	200022e4 	.word	0x200022e4
 8012d94:	200022e8 	.word	0x200022e8
 8012d98:	e000ed20 	.word	0xe000ed20
 8012d9c:	200002ac 	.word	0x200002ac
 8012da0:	e000ef34 	.word	0xe000ef34

08012da4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012da4:	b480      	push	{r7}
 8012da6:	b083      	sub	sp, #12
 8012da8:	af00      	add	r7, sp, #0
	__asm volatile
 8012daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dae:	f383 8811 	msr	BASEPRI, r3
 8012db2:	f3bf 8f6f 	isb	sy
 8012db6:	f3bf 8f4f 	dsb	sy
 8012dba:	607b      	str	r3, [r7, #4]
}
 8012dbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012dbe:	4b0f      	ldr	r3, [pc, #60]	; (8012dfc <vPortEnterCritical+0x58>)
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	3301      	adds	r3, #1
 8012dc4:	4a0d      	ldr	r2, [pc, #52]	; (8012dfc <vPortEnterCritical+0x58>)
 8012dc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012dc8:	4b0c      	ldr	r3, [pc, #48]	; (8012dfc <vPortEnterCritical+0x58>)
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	2b01      	cmp	r3, #1
 8012dce:	d10f      	bne.n	8012df0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012dd0:	4b0b      	ldr	r3, [pc, #44]	; (8012e00 <vPortEnterCritical+0x5c>)
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	b2db      	uxtb	r3, r3
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d00a      	beq.n	8012df0 <vPortEnterCritical+0x4c>
	__asm volatile
 8012dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dde:	f383 8811 	msr	BASEPRI, r3
 8012de2:	f3bf 8f6f 	isb	sy
 8012de6:	f3bf 8f4f 	dsb	sy
 8012dea:	603b      	str	r3, [r7, #0]
}
 8012dec:	bf00      	nop
 8012dee:	e7fe      	b.n	8012dee <vPortEnterCritical+0x4a>
	}
}
 8012df0:	bf00      	nop
 8012df2:	370c      	adds	r7, #12
 8012df4:	46bd      	mov	sp, r7
 8012df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dfa:	4770      	bx	lr
 8012dfc:	200002ac 	.word	0x200002ac
 8012e00:	e000ed04 	.word	0xe000ed04

08012e04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012e04:	b480      	push	{r7}
 8012e06:	b083      	sub	sp, #12
 8012e08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012e0a:	4b12      	ldr	r3, [pc, #72]	; (8012e54 <vPortExitCritical+0x50>)
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d10a      	bne.n	8012e28 <vPortExitCritical+0x24>
	__asm volatile
 8012e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e16:	f383 8811 	msr	BASEPRI, r3
 8012e1a:	f3bf 8f6f 	isb	sy
 8012e1e:	f3bf 8f4f 	dsb	sy
 8012e22:	607b      	str	r3, [r7, #4]
}
 8012e24:	bf00      	nop
 8012e26:	e7fe      	b.n	8012e26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012e28:	4b0a      	ldr	r3, [pc, #40]	; (8012e54 <vPortExitCritical+0x50>)
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	3b01      	subs	r3, #1
 8012e2e:	4a09      	ldr	r2, [pc, #36]	; (8012e54 <vPortExitCritical+0x50>)
 8012e30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012e32:	4b08      	ldr	r3, [pc, #32]	; (8012e54 <vPortExitCritical+0x50>)
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d105      	bne.n	8012e46 <vPortExitCritical+0x42>
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012e3e:	683b      	ldr	r3, [r7, #0]
 8012e40:	f383 8811 	msr	BASEPRI, r3
}
 8012e44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012e46:	bf00      	nop
 8012e48:	370c      	adds	r7, #12
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e50:	4770      	bx	lr
 8012e52:	bf00      	nop
 8012e54:	200002ac 	.word	0x200002ac
	...

08012e60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012e60:	f3ef 8009 	mrs	r0, PSP
 8012e64:	f3bf 8f6f 	isb	sy
 8012e68:	4b15      	ldr	r3, [pc, #84]	; (8012ec0 <pxCurrentTCBConst>)
 8012e6a:	681a      	ldr	r2, [r3, #0]
 8012e6c:	f01e 0f10 	tst.w	lr, #16
 8012e70:	bf08      	it	eq
 8012e72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012e76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e7a:	6010      	str	r0, [r2, #0]
 8012e7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012e80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012e84:	f380 8811 	msr	BASEPRI, r0
 8012e88:	f3bf 8f4f 	dsb	sy
 8012e8c:	f3bf 8f6f 	isb	sy
 8012e90:	f7ff fb0a 	bl	80124a8 <vTaskSwitchContext>
 8012e94:	f04f 0000 	mov.w	r0, #0
 8012e98:	f380 8811 	msr	BASEPRI, r0
 8012e9c:	bc09      	pop	{r0, r3}
 8012e9e:	6819      	ldr	r1, [r3, #0]
 8012ea0:	6808      	ldr	r0, [r1, #0]
 8012ea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ea6:	f01e 0f10 	tst.w	lr, #16
 8012eaa:	bf08      	it	eq
 8012eac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012eb0:	f380 8809 	msr	PSP, r0
 8012eb4:	f3bf 8f6f 	isb	sy
 8012eb8:	4770      	bx	lr
 8012eba:	bf00      	nop
 8012ebc:	f3af 8000 	nop.w

08012ec0 <pxCurrentTCBConst>:
 8012ec0:	200021b8 	.word	0x200021b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012ec4:	bf00      	nop
 8012ec6:	bf00      	nop

08012ec8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b082      	sub	sp, #8
 8012ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8012ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ed2:	f383 8811 	msr	BASEPRI, r3
 8012ed6:	f3bf 8f6f 	isb	sy
 8012eda:	f3bf 8f4f 	dsb	sy
 8012ede:	607b      	str	r3, [r7, #4]
}
 8012ee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012ee2:	f7ff fa29 	bl	8012338 <xTaskIncrementTick>
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d003      	beq.n	8012ef4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012eec:	4b06      	ldr	r3, [pc, #24]	; (8012f08 <SysTick_Handler+0x40>)
 8012eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ef2:	601a      	str	r2, [r3, #0]
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012ef8:	683b      	ldr	r3, [r7, #0]
 8012efa:	f383 8811 	msr	BASEPRI, r3
}
 8012efe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012f00:	bf00      	nop
 8012f02:	3708      	adds	r7, #8
 8012f04:	46bd      	mov	sp, r7
 8012f06:	bd80      	pop	{r7, pc}
 8012f08:	e000ed04 	.word	0xe000ed04

08012f0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012f0c:	b480      	push	{r7}
 8012f0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012f10:	4b0b      	ldr	r3, [pc, #44]	; (8012f40 <vPortSetupTimerInterrupt+0x34>)
 8012f12:	2200      	movs	r2, #0
 8012f14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012f16:	4b0b      	ldr	r3, [pc, #44]	; (8012f44 <vPortSetupTimerInterrupt+0x38>)
 8012f18:	2200      	movs	r2, #0
 8012f1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012f1c:	4b0a      	ldr	r3, [pc, #40]	; (8012f48 <vPortSetupTimerInterrupt+0x3c>)
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	4a0a      	ldr	r2, [pc, #40]	; (8012f4c <vPortSetupTimerInterrupt+0x40>)
 8012f22:	fba2 2303 	umull	r2, r3, r2, r3
 8012f26:	099b      	lsrs	r3, r3, #6
 8012f28:	4a09      	ldr	r2, [pc, #36]	; (8012f50 <vPortSetupTimerInterrupt+0x44>)
 8012f2a:	3b01      	subs	r3, #1
 8012f2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012f2e:	4b04      	ldr	r3, [pc, #16]	; (8012f40 <vPortSetupTimerInterrupt+0x34>)
 8012f30:	2207      	movs	r2, #7
 8012f32:	601a      	str	r2, [r3, #0]
}
 8012f34:	bf00      	nop
 8012f36:	46bd      	mov	sp, r7
 8012f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3c:	4770      	bx	lr
 8012f3e:	bf00      	nop
 8012f40:	e000e010 	.word	0xe000e010
 8012f44:	e000e018 	.word	0xe000e018
 8012f48:	20000230 	.word	0x20000230
 8012f4c:	10624dd3 	.word	0x10624dd3
 8012f50:	e000e014 	.word	0xe000e014

08012f54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012f54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012f64 <vPortEnableVFP+0x10>
 8012f58:	6801      	ldr	r1, [r0, #0]
 8012f5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012f5e:	6001      	str	r1, [r0, #0]
 8012f60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012f62:	bf00      	nop
 8012f64:	e000ed88 	.word	0xe000ed88

08012f68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012f68:	b480      	push	{r7}
 8012f6a:	b085      	sub	sp, #20
 8012f6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012f6e:	f3ef 8305 	mrs	r3, IPSR
 8012f72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	2b0f      	cmp	r3, #15
 8012f78:	d914      	bls.n	8012fa4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012f7a:	4a17      	ldr	r2, [pc, #92]	; (8012fd8 <vPortValidateInterruptPriority+0x70>)
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	4413      	add	r3, r2
 8012f80:	781b      	ldrb	r3, [r3, #0]
 8012f82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012f84:	4b15      	ldr	r3, [pc, #84]	; (8012fdc <vPortValidateInterruptPriority+0x74>)
 8012f86:	781b      	ldrb	r3, [r3, #0]
 8012f88:	7afa      	ldrb	r2, [r7, #11]
 8012f8a:	429a      	cmp	r2, r3
 8012f8c:	d20a      	bcs.n	8012fa4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8012f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f92:	f383 8811 	msr	BASEPRI, r3
 8012f96:	f3bf 8f6f 	isb	sy
 8012f9a:	f3bf 8f4f 	dsb	sy
 8012f9e:	607b      	str	r3, [r7, #4]
}
 8012fa0:	bf00      	nop
 8012fa2:	e7fe      	b.n	8012fa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012fa4:	4b0e      	ldr	r3, [pc, #56]	; (8012fe0 <vPortValidateInterruptPriority+0x78>)
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012fac:	4b0d      	ldr	r3, [pc, #52]	; (8012fe4 <vPortValidateInterruptPriority+0x7c>)
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	429a      	cmp	r2, r3
 8012fb2:	d90a      	bls.n	8012fca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fb8:	f383 8811 	msr	BASEPRI, r3
 8012fbc:	f3bf 8f6f 	isb	sy
 8012fc0:	f3bf 8f4f 	dsb	sy
 8012fc4:	603b      	str	r3, [r7, #0]
}
 8012fc6:	bf00      	nop
 8012fc8:	e7fe      	b.n	8012fc8 <vPortValidateInterruptPriority+0x60>
	}
 8012fca:	bf00      	nop
 8012fcc:	3714      	adds	r7, #20
 8012fce:	46bd      	mov	sp, r7
 8012fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd4:	4770      	bx	lr
 8012fd6:	bf00      	nop
 8012fd8:	e000e3f0 	.word	0xe000e3f0
 8012fdc:	200022e4 	.word	0x200022e4
 8012fe0:	e000ed0c 	.word	0xe000ed0c
 8012fe4:	200022e8 	.word	0x200022e8

08012fe8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012fe8:	b580      	push	{r7, lr}
 8012fea:	b08a      	sub	sp, #40	; 0x28
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012ff4:	f7ff f8e6 	bl	80121c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012ff8:	4b5b      	ldr	r3, [pc, #364]	; (8013168 <pvPortMalloc+0x180>)
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d101      	bne.n	8013004 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013000:	f000 f920 	bl	8013244 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013004:	4b59      	ldr	r3, [pc, #356]	; (801316c <pvPortMalloc+0x184>)
 8013006:	681a      	ldr	r2, [r3, #0]
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	4013      	ands	r3, r2
 801300c:	2b00      	cmp	r3, #0
 801300e:	f040 8093 	bne.w	8013138 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	2b00      	cmp	r3, #0
 8013016:	d01d      	beq.n	8013054 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8013018:	2208      	movs	r2, #8
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	4413      	add	r3, r2
 801301e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	f003 0307 	and.w	r3, r3, #7
 8013026:	2b00      	cmp	r3, #0
 8013028:	d014      	beq.n	8013054 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	f023 0307 	bic.w	r3, r3, #7
 8013030:	3308      	adds	r3, #8
 8013032:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	f003 0307 	and.w	r3, r3, #7
 801303a:	2b00      	cmp	r3, #0
 801303c:	d00a      	beq.n	8013054 <pvPortMalloc+0x6c>
	__asm volatile
 801303e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013042:	f383 8811 	msr	BASEPRI, r3
 8013046:	f3bf 8f6f 	isb	sy
 801304a:	f3bf 8f4f 	dsb	sy
 801304e:	617b      	str	r3, [r7, #20]
}
 8013050:	bf00      	nop
 8013052:	e7fe      	b.n	8013052 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d06e      	beq.n	8013138 <pvPortMalloc+0x150>
 801305a:	4b45      	ldr	r3, [pc, #276]	; (8013170 <pvPortMalloc+0x188>)
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	687a      	ldr	r2, [r7, #4]
 8013060:	429a      	cmp	r2, r3
 8013062:	d869      	bhi.n	8013138 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013064:	4b43      	ldr	r3, [pc, #268]	; (8013174 <pvPortMalloc+0x18c>)
 8013066:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013068:	4b42      	ldr	r3, [pc, #264]	; (8013174 <pvPortMalloc+0x18c>)
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801306e:	e004      	b.n	801307a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8013070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013072:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801307c:	685b      	ldr	r3, [r3, #4]
 801307e:	687a      	ldr	r2, [r7, #4]
 8013080:	429a      	cmp	r2, r3
 8013082:	d903      	bls.n	801308c <pvPortMalloc+0xa4>
 8013084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	2b00      	cmp	r3, #0
 801308a:	d1f1      	bne.n	8013070 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801308c:	4b36      	ldr	r3, [pc, #216]	; (8013168 <pvPortMalloc+0x180>)
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013092:	429a      	cmp	r2, r3
 8013094:	d050      	beq.n	8013138 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013096:	6a3b      	ldr	r3, [r7, #32]
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	2208      	movs	r2, #8
 801309c:	4413      	add	r3, r2
 801309e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80130a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130a2:	681a      	ldr	r2, [r3, #0]
 80130a4:	6a3b      	ldr	r3, [r7, #32]
 80130a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80130a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130aa:	685a      	ldr	r2, [r3, #4]
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	1ad2      	subs	r2, r2, r3
 80130b0:	2308      	movs	r3, #8
 80130b2:	005b      	lsls	r3, r3, #1
 80130b4:	429a      	cmp	r2, r3
 80130b6:	d91f      	bls.n	80130f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80130b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	4413      	add	r3, r2
 80130be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80130c0:	69bb      	ldr	r3, [r7, #24]
 80130c2:	f003 0307 	and.w	r3, r3, #7
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d00a      	beq.n	80130e0 <pvPortMalloc+0xf8>
	__asm volatile
 80130ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ce:	f383 8811 	msr	BASEPRI, r3
 80130d2:	f3bf 8f6f 	isb	sy
 80130d6:	f3bf 8f4f 	dsb	sy
 80130da:	613b      	str	r3, [r7, #16]
}
 80130dc:	bf00      	nop
 80130de:	e7fe      	b.n	80130de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80130e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130e2:	685a      	ldr	r2, [r3, #4]
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	1ad2      	subs	r2, r2, r3
 80130e8:	69bb      	ldr	r3, [r7, #24]
 80130ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80130ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ee:	687a      	ldr	r2, [r7, #4]
 80130f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80130f2:	69b8      	ldr	r0, [r7, #24]
 80130f4:	f000 f908 	bl	8013308 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80130f8:	4b1d      	ldr	r3, [pc, #116]	; (8013170 <pvPortMalloc+0x188>)
 80130fa:	681a      	ldr	r2, [r3, #0]
 80130fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130fe:	685b      	ldr	r3, [r3, #4]
 8013100:	1ad3      	subs	r3, r2, r3
 8013102:	4a1b      	ldr	r2, [pc, #108]	; (8013170 <pvPortMalloc+0x188>)
 8013104:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013106:	4b1a      	ldr	r3, [pc, #104]	; (8013170 <pvPortMalloc+0x188>)
 8013108:	681a      	ldr	r2, [r3, #0]
 801310a:	4b1b      	ldr	r3, [pc, #108]	; (8013178 <pvPortMalloc+0x190>)
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	429a      	cmp	r2, r3
 8013110:	d203      	bcs.n	801311a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013112:	4b17      	ldr	r3, [pc, #92]	; (8013170 <pvPortMalloc+0x188>)
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	4a18      	ldr	r2, [pc, #96]	; (8013178 <pvPortMalloc+0x190>)
 8013118:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801311c:	685a      	ldr	r2, [r3, #4]
 801311e:	4b13      	ldr	r3, [pc, #76]	; (801316c <pvPortMalloc+0x184>)
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	431a      	orrs	r2, r3
 8013124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013126:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801312a:	2200      	movs	r2, #0
 801312c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801312e:	4b13      	ldr	r3, [pc, #76]	; (801317c <pvPortMalloc+0x194>)
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	3301      	adds	r3, #1
 8013134:	4a11      	ldr	r2, [pc, #68]	; (801317c <pvPortMalloc+0x194>)
 8013136:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013138:	f7ff f852 	bl	80121e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801313c:	69fb      	ldr	r3, [r7, #28]
 801313e:	f003 0307 	and.w	r3, r3, #7
 8013142:	2b00      	cmp	r3, #0
 8013144:	d00a      	beq.n	801315c <pvPortMalloc+0x174>
	__asm volatile
 8013146:	f04f 0350 	mov.w	r3, #80	; 0x50
 801314a:	f383 8811 	msr	BASEPRI, r3
 801314e:	f3bf 8f6f 	isb	sy
 8013152:	f3bf 8f4f 	dsb	sy
 8013156:	60fb      	str	r3, [r7, #12]
}
 8013158:	bf00      	nop
 801315a:	e7fe      	b.n	801315a <pvPortMalloc+0x172>
	return pvReturn;
 801315c:	69fb      	ldr	r3, [r7, #28]
}
 801315e:	4618      	mov	r0, r3
 8013160:	3728      	adds	r7, #40	; 0x28
 8013162:	46bd      	mov	sp, r7
 8013164:	bd80      	pop	{r7, pc}
 8013166:	bf00      	nop
 8013168:	200080b4 	.word	0x200080b4
 801316c:	200080c8 	.word	0x200080c8
 8013170:	200080b8 	.word	0x200080b8
 8013174:	200080ac 	.word	0x200080ac
 8013178:	200080bc 	.word	0x200080bc
 801317c:	200080c0 	.word	0x200080c0

08013180 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013180:	b580      	push	{r7, lr}
 8013182:	b086      	sub	sp, #24
 8013184:	af00      	add	r7, sp, #0
 8013186:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d04d      	beq.n	801322e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013192:	2308      	movs	r3, #8
 8013194:	425b      	negs	r3, r3
 8013196:	697a      	ldr	r2, [r7, #20]
 8013198:	4413      	add	r3, r2
 801319a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801319c:	697b      	ldr	r3, [r7, #20]
 801319e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80131a0:	693b      	ldr	r3, [r7, #16]
 80131a2:	685a      	ldr	r2, [r3, #4]
 80131a4:	4b24      	ldr	r3, [pc, #144]	; (8013238 <vPortFree+0xb8>)
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	4013      	ands	r3, r2
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d10a      	bne.n	80131c4 <vPortFree+0x44>
	__asm volatile
 80131ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131b2:	f383 8811 	msr	BASEPRI, r3
 80131b6:	f3bf 8f6f 	isb	sy
 80131ba:	f3bf 8f4f 	dsb	sy
 80131be:	60fb      	str	r3, [r7, #12]
}
 80131c0:	bf00      	nop
 80131c2:	e7fe      	b.n	80131c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80131c4:	693b      	ldr	r3, [r7, #16]
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d00a      	beq.n	80131e2 <vPortFree+0x62>
	__asm volatile
 80131cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131d0:	f383 8811 	msr	BASEPRI, r3
 80131d4:	f3bf 8f6f 	isb	sy
 80131d8:	f3bf 8f4f 	dsb	sy
 80131dc:	60bb      	str	r3, [r7, #8]
}
 80131de:	bf00      	nop
 80131e0:	e7fe      	b.n	80131e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80131e2:	693b      	ldr	r3, [r7, #16]
 80131e4:	685a      	ldr	r2, [r3, #4]
 80131e6:	4b14      	ldr	r3, [pc, #80]	; (8013238 <vPortFree+0xb8>)
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	4013      	ands	r3, r2
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d01e      	beq.n	801322e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80131f0:	693b      	ldr	r3, [r7, #16]
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d11a      	bne.n	801322e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80131f8:	693b      	ldr	r3, [r7, #16]
 80131fa:	685a      	ldr	r2, [r3, #4]
 80131fc:	4b0e      	ldr	r3, [pc, #56]	; (8013238 <vPortFree+0xb8>)
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	43db      	mvns	r3, r3
 8013202:	401a      	ands	r2, r3
 8013204:	693b      	ldr	r3, [r7, #16]
 8013206:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013208:	f7fe ffdc 	bl	80121c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801320c:	693b      	ldr	r3, [r7, #16]
 801320e:	685a      	ldr	r2, [r3, #4]
 8013210:	4b0a      	ldr	r3, [pc, #40]	; (801323c <vPortFree+0xbc>)
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	4413      	add	r3, r2
 8013216:	4a09      	ldr	r2, [pc, #36]	; (801323c <vPortFree+0xbc>)
 8013218:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801321a:	6938      	ldr	r0, [r7, #16]
 801321c:	f000 f874 	bl	8013308 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8013220:	4b07      	ldr	r3, [pc, #28]	; (8013240 <vPortFree+0xc0>)
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	3301      	adds	r3, #1
 8013226:	4a06      	ldr	r2, [pc, #24]	; (8013240 <vPortFree+0xc0>)
 8013228:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801322a:	f7fe ffd9 	bl	80121e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801322e:	bf00      	nop
 8013230:	3718      	adds	r7, #24
 8013232:	46bd      	mov	sp, r7
 8013234:	bd80      	pop	{r7, pc}
 8013236:	bf00      	nop
 8013238:	200080c8 	.word	0x200080c8
 801323c:	200080b8 	.word	0x200080b8
 8013240:	200080c4 	.word	0x200080c4

08013244 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013244:	b480      	push	{r7}
 8013246:	b085      	sub	sp, #20
 8013248:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801324a:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 801324e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013250:	4b27      	ldr	r3, [pc, #156]	; (80132f0 <prvHeapInit+0xac>)
 8013252:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	f003 0307 	and.w	r3, r3, #7
 801325a:	2b00      	cmp	r3, #0
 801325c:	d00c      	beq.n	8013278 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	3307      	adds	r3, #7
 8013262:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	f023 0307 	bic.w	r3, r3, #7
 801326a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801326c:	68ba      	ldr	r2, [r7, #8]
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	1ad3      	subs	r3, r2, r3
 8013272:	4a1f      	ldr	r2, [pc, #124]	; (80132f0 <prvHeapInit+0xac>)
 8013274:	4413      	add	r3, r2
 8013276:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801327c:	4a1d      	ldr	r2, [pc, #116]	; (80132f4 <prvHeapInit+0xb0>)
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013282:	4b1c      	ldr	r3, [pc, #112]	; (80132f4 <prvHeapInit+0xb0>)
 8013284:	2200      	movs	r2, #0
 8013286:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	68ba      	ldr	r2, [r7, #8]
 801328c:	4413      	add	r3, r2
 801328e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013290:	2208      	movs	r2, #8
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	1a9b      	subs	r3, r3, r2
 8013296:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	f023 0307 	bic.w	r3, r3, #7
 801329e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	4a15      	ldr	r2, [pc, #84]	; (80132f8 <prvHeapInit+0xb4>)
 80132a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80132a6:	4b14      	ldr	r3, [pc, #80]	; (80132f8 <prvHeapInit+0xb4>)
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	2200      	movs	r2, #0
 80132ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80132ae:	4b12      	ldr	r3, [pc, #72]	; (80132f8 <prvHeapInit+0xb4>)
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	2200      	movs	r2, #0
 80132b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80132ba:	683b      	ldr	r3, [r7, #0]
 80132bc:	68fa      	ldr	r2, [r7, #12]
 80132be:	1ad2      	subs	r2, r2, r3
 80132c0:	683b      	ldr	r3, [r7, #0]
 80132c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80132c4:	4b0c      	ldr	r3, [pc, #48]	; (80132f8 <prvHeapInit+0xb4>)
 80132c6:	681a      	ldr	r2, [r3, #0]
 80132c8:	683b      	ldr	r3, [r7, #0]
 80132ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80132cc:	683b      	ldr	r3, [r7, #0]
 80132ce:	685b      	ldr	r3, [r3, #4]
 80132d0:	4a0a      	ldr	r2, [pc, #40]	; (80132fc <prvHeapInit+0xb8>)
 80132d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80132d4:	683b      	ldr	r3, [r7, #0]
 80132d6:	685b      	ldr	r3, [r3, #4]
 80132d8:	4a09      	ldr	r2, [pc, #36]	; (8013300 <prvHeapInit+0xbc>)
 80132da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80132dc:	4b09      	ldr	r3, [pc, #36]	; (8013304 <prvHeapInit+0xc0>)
 80132de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80132e2:	601a      	str	r2, [r3, #0]
}
 80132e4:	bf00      	nop
 80132e6:	3714      	adds	r7, #20
 80132e8:	46bd      	mov	sp, r7
 80132ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ee:	4770      	bx	lr
 80132f0:	200022ec 	.word	0x200022ec
 80132f4:	200080ac 	.word	0x200080ac
 80132f8:	200080b4 	.word	0x200080b4
 80132fc:	200080bc 	.word	0x200080bc
 8013300:	200080b8 	.word	0x200080b8
 8013304:	200080c8 	.word	0x200080c8

08013308 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013308:	b480      	push	{r7}
 801330a:	b085      	sub	sp, #20
 801330c:	af00      	add	r7, sp, #0
 801330e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013310:	4b28      	ldr	r3, [pc, #160]	; (80133b4 <prvInsertBlockIntoFreeList+0xac>)
 8013312:	60fb      	str	r3, [r7, #12]
 8013314:	e002      	b.n	801331c <prvInsertBlockIntoFreeList+0x14>
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	60fb      	str	r3, [r7, #12]
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	687a      	ldr	r2, [r7, #4]
 8013322:	429a      	cmp	r2, r3
 8013324:	d8f7      	bhi.n	8013316 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	685b      	ldr	r3, [r3, #4]
 801332e:	68ba      	ldr	r2, [r7, #8]
 8013330:	4413      	add	r3, r2
 8013332:	687a      	ldr	r2, [r7, #4]
 8013334:	429a      	cmp	r2, r3
 8013336:	d108      	bne.n	801334a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	685a      	ldr	r2, [r3, #4]
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	685b      	ldr	r3, [r3, #4]
 8013340:	441a      	add	r2, r3
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	685b      	ldr	r3, [r3, #4]
 8013352:	68ba      	ldr	r2, [r7, #8]
 8013354:	441a      	add	r2, r3
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	429a      	cmp	r2, r3
 801335c:	d118      	bne.n	8013390 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	681a      	ldr	r2, [r3, #0]
 8013362:	4b15      	ldr	r3, [pc, #84]	; (80133b8 <prvInsertBlockIntoFreeList+0xb0>)
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	429a      	cmp	r2, r3
 8013368:	d00d      	beq.n	8013386 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	685a      	ldr	r2, [r3, #4]
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	685b      	ldr	r3, [r3, #4]
 8013374:	441a      	add	r2, r3
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	681a      	ldr	r2, [r3, #0]
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	601a      	str	r2, [r3, #0]
 8013384:	e008      	b.n	8013398 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013386:	4b0c      	ldr	r3, [pc, #48]	; (80133b8 <prvInsertBlockIntoFreeList+0xb0>)
 8013388:	681a      	ldr	r2, [r3, #0]
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	601a      	str	r2, [r3, #0]
 801338e:	e003      	b.n	8013398 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	681a      	ldr	r2, [r3, #0]
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013398:	68fa      	ldr	r2, [r7, #12]
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	429a      	cmp	r2, r3
 801339e:	d002      	beq.n	80133a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	687a      	ldr	r2, [r7, #4]
 80133a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80133a6:	bf00      	nop
 80133a8:	3714      	adds	r7, #20
 80133aa:	46bd      	mov	sp, r7
 80133ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b0:	4770      	bx	lr
 80133b2:	bf00      	nop
 80133b4:	200080ac 	.word	0x200080ac
 80133b8:	200080b4 	.word	0x200080b4

080133bc <USB_transmit_msg>:

/*
 * -- Insert your variables declaration here --
 */
/* USER CODE BEGIN 0 */
void USB_transmit_msg(uint8_t* data,uint32_t size){
 80133bc:	b580      	push	{r7, lr}
 80133be:	b082      	sub	sp, #8
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	6078      	str	r0, [r7, #4]
 80133c4:	6039      	str	r1, [r7, #0]
  USBH_CDC_Stop(&hUsbHostFS);
 80133c6:	4806      	ldr	r0, [pc, #24]	; (80133e0 <USB_transmit_msg+0x24>)
 80133c8:	f7f6 fd9f 	bl	8009f0a <USBH_CDC_Stop>
  USBH_CDC_Transmit(&hUsbHostFS,data, size);
 80133cc:	683a      	ldr	r2, [r7, #0]
 80133ce:	6879      	ldr	r1, [r7, #4]
 80133d0:	4803      	ldr	r0, [pc, #12]	; (80133e0 <USB_transmit_msg+0x24>)
 80133d2:	f7f6 fe2a 	bl	800a02a <USBH_CDC_Transmit>
}
 80133d6:	bf00      	nop
 80133d8:	3708      	adds	r7, #8
 80133da:	46bd      	mov	sp, r7
 80133dc:	bd80      	pop	{r7, pc}
 80133de:	bf00      	nop
 80133e0:	2000c534 	.word	0x2000c534

080133e4 <USB_receive_msg>:

void USB_receive_msg(){
 80133e4:	b580      	push	{r7, lr}
 80133e6:	af00      	add	r7, sp, #0
  USBH_CDC_Stop(&hUsbHostFS);
 80133e8:	4809      	ldr	r0, [pc, #36]	; (8013410 <USB_receive_msg+0x2c>)
 80133ea:	f7f6 fd8e 	bl	8009f0a <USBH_CDC_Stop>
  USBH_CDC_Receive(&hUsbHostFS,usb_rx_buff[usb_rx_buff_active],USB_RX_BUFF_SIZE);
 80133ee:	4b09      	ldr	r3, [pc, #36]	; (8013414 <USB_receive_msg+0x30>)
 80133f0:	781b      	ldrb	r3, [r3, #0]
 80133f2:	461a      	mov	r2, r3
 80133f4:	f640 53ac 	movw	r3, #3500	; 0xdac
 80133f8:	fb02 f303 	mul.w	r3, r2, r3
 80133fc:	4a06      	ldr	r2, [pc, #24]	; (8013418 <USB_receive_msg+0x34>)
 80133fe:	4413      	add	r3, r2
 8013400:	f640 52ac 	movw	r2, #3500	; 0xdac
 8013404:	4619      	mov	r1, r3
 8013406:	4802      	ldr	r0, [pc, #8]	; (8013410 <USB_receive_msg+0x2c>)
 8013408:	f7f6 fe4a 	bl	800a0a0 <USBH_CDC_Receive>
}
 801340c:	bf00      	nop
 801340e:	bd80      	pop	{r7, pc}
 8013410:	2000c534 	.word	0x2000c534
 8013414:	2000c530 	.word	0x2000c530
 8013418:	200080d4 	.word	0x200080d4

0801341c <USB_set_line_coding>:


void USB_set_line_coding(){
 801341c:	b580      	push	{r7, lr}
 801341e:	af00      	add	r7, sp, #0
	FrameFormat.b.dwDTERate = 1250000;
 8013420:	4b08      	ldr	r3, [pc, #32]	; (8013444 <USB_set_line_coding+0x28>)
 8013422:	4a09      	ldr	r2, [pc, #36]	; (8013448 <USB_set_line_coding+0x2c>)
 8013424:	601a      	str	r2, [r3, #0]
	FrameFormat.b.bCharFormat = 0;
 8013426:	4b07      	ldr	r3, [pc, #28]	; (8013444 <USB_set_line_coding+0x28>)
 8013428:	2200      	movs	r2, #0
 801342a:	711a      	strb	r2, [r3, #4]
	FrameFormat.b.bDataBits = 8;
 801342c:	4b05      	ldr	r3, [pc, #20]	; (8013444 <USB_set_line_coding+0x28>)
 801342e:	2208      	movs	r2, #8
 8013430:	719a      	strb	r2, [r3, #6]
	FrameFormat.b.bParityType = 0;
 8013432:	4b04      	ldr	r3, [pc, #16]	; (8013444 <USB_set_line_coding+0x28>)
 8013434:	2200      	movs	r2, #0
 8013436:	715a      	strb	r2, [r3, #5]

	USBH_CDC_SetLineCoding(&hUsbHostFS, &FrameFormat);
 8013438:	4902      	ldr	r1, [pc, #8]	; (8013444 <USB_set_line_coding+0x28>)
 801343a:	4804      	ldr	r0, [pc, #16]	; (801344c <USB_set_line_coding+0x30>)
 801343c:	f7f6 fdcc 	bl	8009fd8 <USBH_CDC_SetLineCoding>
}
 8013440:	bf00      	nop
 8013442:	bd80      	pop	{r7, pc}
 8013444:	200080cc 	.word	0x200080cc
 8013448:	001312d0 	.word	0x001312d0
 801344c:	2000c534 	.word	0x2000c534

08013450 <USBH_CDC_TransmitCallback>:
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */

void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8013450:	b580      	push	{r7, lr}
 8013452:	b082      	sub	sp, #8
 8013454:	af00      	add	r7, sp, #0
 8013456:	6078      	str	r0, [r7, #4]
  USB_receive_msg();
 8013458:	f7ff ffc4 	bl	80133e4 <USB_receive_msg>
}
 801345c:	bf00      	nop
 801345e:	3708      	adds	r7, #8
 8013460:	46bd      	mov	sp, r7
 8013462:	bd80      	pop	{r7, pc}

08013464 <USBH_CDC_ReceiveCallback>:


void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8013464:	b480      	push	{r7}
 8013466:	b083      	sub	sp, #12
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
}
 801346c:	bf00      	nop
 801346e:	370c      	adds	r7, #12
 8013470:	46bd      	mov	sp, r7
 8013472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013476:	4770      	bx	lr

08013478 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8013478:	b580      	push	{r7, lr}
 801347a:	af00      	add	r7, sp, #0


  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801347c:	2201      	movs	r2, #1
 801347e:	490e      	ldr	r1, [pc, #56]	; (80134b8 <MX_USB_HOST_Init+0x40>)
 8013480:	480e      	ldr	r0, [pc, #56]	; (80134bc <MX_USB_HOST_Init+0x44>)
 8013482:	f7f6 ff91 	bl	800a3a8 <USBH_Init>
 8013486:	4603      	mov	r3, r0
 8013488:	2b00      	cmp	r3, #0
 801348a:	d001      	beq.n	8013490 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801348c:	f7ee fae2 	bl	8001a54 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8013490:	490b      	ldr	r1, [pc, #44]	; (80134c0 <MX_USB_HOST_Init+0x48>)
 8013492:	480a      	ldr	r0, [pc, #40]	; (80134bc <MX_USB_HOST_Init+0x44>)
 8013494:	f7f7 f83e 	bl	800a514 <USBH_RegisterClass>
 8013498:	4603      	mov	r3, r0
 801349a:	2b00      	cmp	r3, #0
 801349c:	d001      	beq.n	80134a2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801349e:	f7ee fad9 	bl	8001a54 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80134a2:	4806      	ldr	r0, [pc, #24]	; (80134bc <MX_USB_HOST_Init+0x44>)
 80134a4:	f7f7 f8c2 	bl	800a62c <USBH_Start>
 80134a8:	4603      	mov	r3, r0
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d001      	beq.n	80134b2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80134ae:	f7ee fad1 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80134b2:	bf00      	nop
 80134b4:	bd80      	pop	{r7, pc}
 80134b6:	bf00      	nop
 80134b8:	080134c5 	.word	0x080134c5
 80134bc:	2000c534 	.word	0x2000c534
 80134c0:	2000028c 	.word	0x2000028c

080134c4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b082      	sub	sp, #8
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	6078      	str	r0, [r7, #4]
 80134cc:	460b      	mov	r3, r1
 80134ce:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80134d0:	78fb      	ldrb	r3, [r7, #3]
 80134d2:	3b01      	subs	r3, #1
 80134d4:	2b04      	cmp	r3, #4
 80134d6:	d82e      	bhi.n	8013536 <USBH_UserProcess+0x72>
 80134d8:	a201      	add	r2, pc, #4	; (adr r2, 80134e0 <USBH_UserProcess+0x1c>)
 80134da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134de:	bf00      	nop
 80134e0:	08013537 	.word	0x08013537
 80134e4:	0801350b 	.word	0x0801350b
 80134e8:	08013537 	.word	0x08013537
 80134ec:	08013521 	.word	0x08013521
 80134f0:	080134f5 	.word	0x080134f5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80134f4:	4b12      	ldr	r3, [pc, #72]	; (8013540 <USBH_UserProcess+0x7c>)
 80134f6:	2203      	movs	r2, #3
 80134f8:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_DISCONNECT, 0);
 80134fa:	4b12      	ldr	r3, [pc, #72]	; (8013544 <USBH_UserProcess+0x80>)
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	2200      	movs	r2, #0
 8013500:	2103      	movs	r1, #3
 8013502:	4618      	mov	r0, r3
 8013504:	f7fd fd6a 	bl	8010fdc <osMessagePut>
  break;
 8013508:	e016      	b.n	8013538 <USBH_UserProcess+0x74>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801350a:	4b0d      	ldr	r3, [pc, #52]	; (8013540 <USBH_UserProcess+0x7c>)
 801350c:	2202      	movs	r2, #2
 801350e:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_READY, 0);
 8013510:	4b0c      	ldr	r3, [pc, #48]	; (8013544 <USBH_UserProcess+0x80>)
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	2200      	movs	r2, #0
 8013516:	2102      	movs	r1, #2
 8013518:	4618      	mov	r0, r3
 801351a:	f7fd fd5f 	bl	8010fdc <osMessagePut>
  break;
 801351e:	e00b      	b.n	8013538 <USBH_UserProcess+0x74>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8013520:	4b07      	ldr	r3, [pc, #28]	; (8013540 <USBH_UserProcess+0x7c>)
 8013522:	2201      	movs	r2, #1
 8013524:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_START, 0);
 8013526:	4b07      	ldr	r3, [pc, #28]	; (8013544 <USBH_UserProcess+0x80>)
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	2200      	movs	r2, #0
 801352c:	2101      	movs	r1, #1
 801352e:	4618      	mov	r0, r3
 8013530:	f7fd fd54 	bl	8010fdc <osMessagePut>
  break;
 8013534:	e000      	b.n	8013538 <USBH_UserProcess+0x74>

  default:
  break;
 8013536:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8013538:	bf00      	nop
 801353a:	3708      	adds	r7, #8
 801353c:	46bd      	mov	sp, r7
 801353e:	bd80      	pop	{r7, pc}
 8013540:	2000c918 	.word	0x2000c918
 8013544:	2000093c 	.word	0x2000093c

08013548 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8013548:	b580      	push	{r7, lr}
 801354a:	b08a      	sub	sp, #40	; 0x28
 801354c:	af00      	add	r7, sp, #0
 801354e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013550:	f107 0314 	add.w	r3, r7, #20
 8013554:	2200      	movs	r2, #0
 8013556:	601a      	str	r2, [r3, #0]
 8013558:	605a      	str	r2, [r3, #4]
 801355a:	609a      	str	r2, [r3, #8]
 801355c:	60da      	str	r2, [r3, #12]
 801355e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013568:	d13a      	bne.n	80135e0 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801356a:	2300      	movs	r3, #0
 801356c:	613b      	str	r3, [r7, #16]
 801356e:	4b1e      	ldr	r3, [pc, #120]	; (80135e8 <HAL_HCD_MspInit+0xa0>)
 8013570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013572:	4a1d      	ldr	r2, [pc, #116]	; (80135e8 <HAL_HCD_MspInit+0xa0>)
 8013574:	f043 0301 	orr.w	r3, r3, #1
 8013578:	6313      	str	r3, [r2, #48]	; 0x30
 801357a:	4b1b      	ldr	r3, [pc, #108]	; (80135e8 <HAL_HCD_MspInit+0xa0>)
 801357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801357e:	f003 0301 	and.w	r3, r3, #1
 8013582:	613b      	str	r3, [r7, #16]
 8013584:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8013586:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801358a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801358c:	2302      	movs	r3, #2
 801358e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013590:	2300      	movs	r3, #0
 8013592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013594:	2303      	movs	r3, #3
 8013596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8013598:	230a      	movs	r3, #10
 801359a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801359c:	f107 0314 	add.w	r3, r7, #20
 80135a0:	4619      	mov	r1, r3
 80135a2:	4812      	ldr	r0, [pc, #72]	; (80135ec <HAL_HCD_MspInit+0xa4>)
 80135a4:	f7f0 f90c 	bl	80037c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80135a8:	4b0f      	ldr	r3, [pc, #60]	; (80135e8 <HAL_HCD_MspInit+0xa0>)
 80135aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80135ac:	4a0e      	ldr	r2, [pc, #56]	; (80135e8 <HAL_HCD_MspInit+0xa0>)
 80135ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80135b2:	6353      	str	r3, [r2, #52]	; 0x34
 80135b4:	2300      	movs	r3, #0
 80135b6:	60fb      	str	r3, [r7, #12]
 80135b8:	4b0b      	ldr	r3, [pc, #44]	; (80135e8 <HAL_HCD_MspInit+0xa0>)
 80135ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80135bc:	4a0a      	ldr	r2, [pc, #40]	; (80135e8 <HAL_HCD_MspInit+0xa0>)
 80135be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80135c2:	6453      	str	r3, [r2, #68]	; 0x44
 80135c4:	4b08      	ldr	r3, [pc, #32]	; (80135e8 <HAL_HCD_MspInit+0xa0>)
 80135c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80135c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80135cc:	60fb      	str	r3, [r7, #12]
 80135ce:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80135d0:	2200      	movs	r2, #0
 80135d2:	2105      	movs	r1, #5
 80135d4:	2043      	movs	r0, #67	; 0x43
 80135d6:	f7ef fa75 	bl	8002ac4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80135da:	2043      	movs	r0, #67	; 0x43
 80135dc:	f7ef fa8e 	bl	8002afc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80135e0:	bf00      	nop
 80135e2:	3728      	adds	r7, #40	; 0x28
 80135e4:	46bd      	mov	sp, r7
 80135e6:	bd80      	pop	{r7, pc}
 80135e8:	40023800 	.word	0x40023800
 80135ec:	40020000 	.word	0x40020000

080135f0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b082      	sub	sp, #8
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80135fe:	4618      	mov	r0, r3
 8013600:	f7f7 fccb 	bl	800af9a <USBH_LL_IncTimer>
}
 8013604:	bf00      	nop
 8013606:	3708      	adds	r7, #8
 8013608:	46bd      	mov	sp, r7
 801360a:	bd80      	pop	{r7, pc}

0801360c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801360c:	b580      	push	{r7, lr}
 801360e:	b082      	sub	sp, #8
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801361a:	4618      	mov	r0, r3
 801361c:	f7f7 fd0f 	bl	800b03e <USBH_LL_Connect>
}
 8013620:	bf00      	nop
 8013622:	3708      	adds	r7, #8
 8013624:	46bd      	mov	sp, r7
 8013626:	bd80      	pop	{r7, pc}

08013628 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8013628:	b580      	push	{r7, lr}
 801362a:	b082      	sub	sp, #8
 801362c:	af00      	add	r7, sp, #0
 801362e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8013636:	4618      	mov	r0, r3
 8013638:	f7f7 fd24 	bl	800b084 <USBH_LL_Disconnect>
}
 801363c:	bf00      	nop
 801363e:	3708      	adds	r7, #8
 8013640:	46bd      	mov	sp, r7
 8013642:	bd80      	pop	{r7, pc}

08013644 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8013644:	b580      	push	{r7, lr}
 8013646:	b082      	sub	sp, #8
 8013648:	af00      	add	r7, sp, #0
 801364a:	6078      	str	r0, [r7, #4]
 801364c:	460b      	mov	r3, r1
 801364e:	70fb      	strb	r3, [r7, #3]
 8013650:	4613      	mov	r3, r2
 8013652:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801365a:	4618      	mov	r0, r3
 801365c:	f7f7 fd59 	bl	800b112 <USBH_LL_NotifyURBChange>
#endif
}
 8013660:	bf00      	nop
 8013662:	3708      	adds	r7, #8
 8013664:	46bd      	mov	sp, r7
 8013666:	bd80      	pop	{r7, pc}

08013668 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8013668:	b580      	push	{r7, lr}
 801366a:	b082      	sub	sp, #8
 801366c:	af00      	add	r7, sp, #0
 801366e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8013676:	4618      	mov	r0, r3
 8013678:	f7f7 fcb9 	bl	800afee <USBH_LL_PortEnabled>
}
 801367c:	bf00      	nop
 801367e:	3708      	adds	r7, #8
 8013680:	46bd      	mov	sp, r7
 8013682:	bd80      	pop	{r7, pc}

08013684 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8013684:	b580      	push	{r7, lr}
 8013686:	b082      	sub	sp, #8
 8013688:	af00      	add	r7, sp, #0
 801368a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8013692:	4618      	mov	r0, r3
 8013694:	f7f7 fcc5 	bl	800b022 <USBH_LL_PortDisabled>
}
 8013698:	bf00      	nop
 801369a:	3708      	adds	r7, #8
 801369c:	46bd      	mov	sp, r7
 801369e:	bd80      	pop	{r7, pc}

080136a0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80136a0:	b580      	push	{r7, lr}
 80136a2:	b082      	sub	sp, #8
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80136ae:	2b01      	cmp	r3, #1
 80136b0:	d12a      	bne.n	8013708 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80136b2:	4a18      	ldr	r2, [pc, #96]	; (8013714 <USBH_LL_Init+0x74>)
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	4a15      	ldr	r2, [pc, #84]	; (8013714 <USBH_LL_Init+0x74>)
 80136be:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80136c2:	4b14      	ldr	r3, [pc, #80]	; (8013714 <USBH_LL_Init+0x74>)
 80136c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80136c8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80136ca:	4b12      	ldr	r3, [pc, #72]	; (8013714 <USBH_LL_Init+0x74>)
 80136cc:	2208      	movs	r2, #8
 80136ce:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80136d0:	4b10      	ldr	r3, [pc, #64]	; (8013714 <USBH_LL_Init+0x74>)
 80136d2:	2201      	movs	r2, #1
 80136d4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80136d6:	4b0f      	ldr	r3, [pc, #60]	; (8013714 <USBH_LL_Init+0x74>)
 80136d8:	2200      	movs	r2, #0
 80136da:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80136dc:	4b0d      	ldr	r3, [pc, #52]	; (8013714 <USBH_LL_Init+0x74>)
 80136de:	2202      	movs	r2, #2
 80136e0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80136e2:	4b0c      	ldr	r3, [pc, #48]	; (8013714 <USBH_LL_Init+0x74>)
 80136e4:	2200      	movs	r2, #0
 80136e6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80136e8:	480a      	ldr	r0, [pc, #40]	; (8013714 <USBH_LL_Init+0x74>)
 80136ea:	f7f0 fa1e 	bl	8003b2a <HAL_HCD_Init>
 80136ee:	4603      	mov	r3, r0
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d001      	beq.n	80136f8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80136f4:	f7ee f9ae 	bl	8001a54 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80136f8:	4806      	ldr	r0, [pc, #24]	; (8013714 <USBH_LL_Init+0x74>)
 80136fa:	f7f0 fe02 	bl	8004302 <HAL_HCD_GetCurrentFrame>
 80136fe:	4603      	mov	r3, r0
 8013700:	4619      	mov	r1, r3
 8013702:	6878      	ldr	r0, [r7, #4]
 8013704:	f7f7 fc3a 	bl	800af7c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8013708:	2300      	movs	r3, #0
}
 801370a:	4618      	mov	r0, r3
 801370c:	3708      	adds	r7, #8
 801370e:	46bd      	mov	sp, r7
 8013710:	bd80      	pop	{r7, pc}
 8013712:	bf00      	nop
 8013714:	2000c91c 	.word	0x2000c91c

08013718 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8013718:	b580      	push	{r7, lr}
 801371a:	b084      	sub	sp, #16
 801371c:	af00      	add	r7, sp, #0
 801371e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013720:	2300      	movs	r3, #0
 8013722:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013724:	2300      	movs	r3, #0
 8013726:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801372e:	4618      	mov	r0, r3
 8013730:	f7f0 fd71 	bl	8004216 <HAL_HCD_Start>
 8013734:	4603      	mov	r3, r0
 8013736:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013738:	7bfb      	ldrb	r3, [r7, #15]
 801373a:	4618      	mov	r0, r3
 801373c:	f000 f95c 	bl	80139f8 <USBH_Get_USB_Status>
 8013740:	4603      	mov	r3, r0
 8013742:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013744:	7bbb      	ldrb	r3, [r7, #14]
}
 8013746:	4618      	mov	r0, r3
 8013748:	3710      	adds	r7, #16
 801374a:	46bd      	mov	sp, r7
 801374c:	bd80      	pop	{r7, pc}

0801374e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801374e:	b580      	push	{r7, lr}
 8013750:	b084      	sub	sp, #16
 8013752:	af00      	add	r7, sp, #0
 8013754:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013756:	2300      	movs	r3, #0
 8013758:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801375a:	2300      	movs	r3, #0
 801375c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013764:	4618      	mov	r0, r3
 8013766:	f7f0 fd79 	bl	800425c <HAL_HCD_Stop>
 801376a:	4603      	mov	r3, r0
 801376c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801376e:	7bfb      	ldrb	r3, [r7, #15]
 8013770:	4618      	mov	r0, r3
 8013772:	f000 f941 	bl	80139f8 <USBH_Get_USB_Status>
 8013776:	4603      	mov	r3, r0
 8013778:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801377a:	7bbb      	ldrb	r3, [r7, #14]
}
 801377c:	4618      	mov	r0, r3
 801377e:	3710      	adds	r7, #16
 8013780:	46bd      	mov	sp, r7
 8013782:	bd80      	pop	{r7, pc}

08013784 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8013784:	b580      	push	{r7, lr}
 8013786:	b084      	sub	sp, #16
 8013788:	af00      	add	r7, sp, #0
 801378a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801378c:	2301      	movs	r3, #1
 801378e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013796:	4618      	mov	r0, r3
 8013798:	f7f0 fdc1 	bl	800431e <HAL_HCD_GetCurrentSpeed>
 801379c:	4603      	mov	r3, r0
 801379e:	2b02      	cmp	r3, #2
 80137a0:	d00c      	beq.n	80137bc <USBH_LL_GetSpeed+0x38>
 80137a2:	2b02      	cmp	r3, #2
 80137a4:	d80d      	bhi.n	80137c2 <USBH_LL_GetSpeed+0x3e>
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d002      	beq.n	80137b0 <USBH_LL_GetSpeed+0x2c>
 80137aa:	2b01      	cmp	r3, #1
 80137ac:	d003      	beq.n	80137b6 <USBH_LL_GetSpeed+0x32>
 80137ae:	e008      	b.n	80137c2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80137b0:	2300      	movs	r3, #0
 80137b2:	73fb      	strb	r3, [r7, #15]
    break;
 80137b4:	e008      	b.n	80137c8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80137b6:	2301      	movs	r3, #1
 80137b8:	73fb      	strb	r3, [r7, #15]
    break;
 80137ba:	e005      	b.n	80137c8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80137bc:	2302      	movs	r3, #2
 80137be:	73fb      	strb	r3, [r7, #15]
    break;
 80137c0:	e002      	b.n	80137c8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80137c2:	2301      	movs	r3, #1
 80137c4:	73fb      	strb	r3, [r7, #15]
    break;
 80137c6:	bf00      	nop
  }
  return  speed;
 80137c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80137ca:	4618      	mov	r0, r3
 80137cc:	3710      	adds	r7, #16
 80137ce:	46bd      	mov	sp, r7
 80137d0:	bd80      	pop	{r7, pc}

080137d2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80137d2:	b580      	push	{r7, lr}
 80137d4:	b084      	sub	sp, #16
 80137d6:	af00      	add	r7, sp, #0
 80137d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80137da:	2300      	movs	r3, #0
 80137dc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80137de:	2300      	movs	r3, #0
 80137e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80137e8:	4618      	mov	r0, r3
 80137ea:	f7f0 fd54 	bl	8004296 <HAL_HCD_ResetPort>
 80137ee:	4603      	mov	r3, r0
 80137f0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80137f2:	7bfb      	ldrb	r3, [r7, #15]
 80137f4:	4618      	mov	r0, r3
 80137f6:	f000 f8ff 	bl	80139f8 <USBH_Get_USB_Status>
 80137fa:	4603      	mov	r3, r0
 80137fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80137fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8013800:	4618      	mov	r0, r3
 8013802:	3710      	adds	r7, #16
 8013804:	46bd      	mov	sp, r7
 8013806:	bd80      	pop	{r7, pc}

08013808 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013808:	b580      	push	{r7, lr}
 801380a:	b082      	sub	sp, #8
 801380c:	af00      	add	r7, sp, #0
 801380e:	6078      	str	r0, [r7, #4]
 8013810:	460b      	mov	r3, r1
 8013812:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801381a:	78fa      	ldrb	r2, [r7, #3]
 801381c:	4611      	mov	r1, r2
 801381e:	4618      	mov	r0, r3
 8013820:	f7f0 fd5b 	bl	80042da <HAL_HCD_HC_GetXferCount>
 8013824:	4603      	mov	r3, r0
}
 8013826:	4618      	mov	r0, r3
 8013828:	3708      	adds	r7, #8
 801382a:	46bd      	mov	sp, r7
 801382c:	bd80      	pop	{r7, pc}

0801382e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801382e:	b590      	push	{r4, r7, lr}
 8013830:	b089      	sub	sp, #36	; 0x24
 8013832:	af04      	add	r7, sp, #16
 8013834:	6078      	str	r0, [r7, #4]
 8013836:	4608      	mov	r0, r1
 8013838:	4611      	mov	r1, r2
 801383a:	461a      	mov	r2, r3
 801383c:	4603      	mov	r3, r0
 801383e:	70fb      	strb	r3, [r7, #3]
 8013840:	460b      	mov	r3, r1
 8013842:	70bb      	strb	r3, [r7, #2]
 8013844:	4613      	mov	r3, r2
 8013846:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013848:	2300      	movs	r3, #0
 801384a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801384c:	2300      	movs	r3, #0
 801384e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8013856:	787c      	ldrb	r4, [r7, #1]
 8013858:	78ba      	ldrb	r2, [r7, #2]
 801385a:	78f9      	ldrb	r1, [r7, #3]
 801385c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801385e:	9302      	str	r3, [sp, #8]
 8013860:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013864:	9301      	str	r3, [sp, #4]
 8013866:	f897 3020 	ldrb.w	r3, [r7, #32]
 801386a:	9300      	str	r3, [sp, #0]
 801386c:	4623      	mov	r3, r4
 801386e:	f7f0 f9be 	bl	8003bee <HAL_HCD_HC_Init>
 8013872:	4603      	mov	r3, r0
 8013874:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8013876:	7bfb      	ldrb	r3, [r7, #15]
 8013878:	4618      	mov	r0, r3
 801387a:	f000 f8bd 	bl	80139f8 <USBH_Get_USB_Status>
 801387e:	4603      	mov	r3, r0
 8013880:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013882:	7bbb      	ldrb	r3, [r7, #14]
}
 8013884:	4618      	mov	r0, r3
 8013886:	3714      	adds	r7, #20
 8013888:	46bd      	mov	sp, r7
 801388a:	bd90      	pop	{r4, r7, pc}

0801388c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801388c:	b580      	push	{r7, lr}
 801388e:	b084      	sub	sp, #16
 8013890:	af00      	add	r7, sp, #0
 8013892:	6078      	str	r0, [r7, #4]
 8013894:	460b      	mov	r3, r1
 8013896:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013898:	2300      	movs	r3, #0
 801389a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801389c:	2300      	movs	r3, #0
 801389e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80138a6:	78fa      	ldrb	r2, [r7, #3]
 80138a8:	4611      	mov	r1, r2
 80138aa:	4618      	mov	r0, r3
 80138ac:	f7f0 fa2e 	bl	8003d0c <HAL_HCD_HC_Halt>
 80138b0:	4603      	mov	r3, r0
 80138b2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80138b4:	7bfb      	ldrb	r3, [r7, #15]
 80138b6:	4618      	mov	r0, r3
 80138b8:	f000 f89e 	bl	80139f8 <USBH_Get_USB_Status>
 80138bc:	4603      	mov	r3, r0
 80138be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80138c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80138c2:	4618      	mov	r0, r3
 80138c4:	3710      	adds	r7, #16
 80138c6:	46bd      	mov	sp, r7
 80138c8:	bd80      	pop	{r7, pc}

080138ca <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80138ca:	b590      	push	{r4, r7, lr}
 80138cc:	b089      	sub	sp, #36	; 0x24
 80138ce:	af04      	add	r7, sp, #16
 80138d0:	6078      	str	r0, [r7, #4]
 80138d2:	4608      	mov	r0, r1
 80138d4:	4611      	mov	r1, r2
 80138d6:	461a      	mov	r2, r3
 80138d8:	4603      	mov	r3, r0
 80138da:	70fb      	strb	r3, [r7, #3]
 80138dc:	460b      	mov	r3, r1
 80138de:	70bb      	strb	r3, [r7, #2]
 80138e0:	4613      	mov	r3, r2
 80138e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80138e4:	2300      	movs	r3, #0
 80138e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80138e8:	2300      	movs	r3, #0
 80138ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80138f2:	787c      	ldrb	r4, [r7, #1]
 80138f4:	78ba      	ldrb	r2, [r7, #2]
 80138f6:	78f9      	ldrb	r1, [r7, #3]
 80138f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80138fc:	9303      	str	r3, [sp, #12]
 80138fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013900:	9302      	str	r3, [sp, #8]
 8013902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013904:	9301      	str	r3, [sp, #4]
 8013906:	f897 3020 	ldrb.w	r3, [r7, #32]
 801390a:	9300      	str	r3, [sp, #0]
 801390c:	4623      	mov	r3, r4
 801390e:	f7f0 fa21 	bl	8003d54 <HAL_HCD_HC_SubmitRequest>
 8013912:	4603      	mov	r3, r0
 8013914:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8013916:	7bfb      	ldrb	r3, [r7, #15]
 8013918:	4618      	mov	r0, r3
 801391a:	f000 f86d 	bl	80139f8 <USBH_Get_USB_Status>
 801391e:	4603      	mov	r3, r0
 8013920:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013922:	7bbb      	ldrb	r3, [r7, #14]
}
 8013924:	4618      	mov	r0, r3
 8013926:	3714      	adds	r7, #20
 8013928:	46bd      	mov	sp, r7
 801392a:	bd90      	pop	{r4, r7, pc}

0801392c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801392c:	b580      	push	{r7, lr}
 801392e:	b082      	sub	sp, #8
 8013930:	af00      	add	r7, sp, #0
 8013932:	6078      	str	r0, [r7, #4]
 8013934:	460b      	mov	r3, r1
 8013936:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801393e:	78fa      	ldrb	r2, [r7, #3]
 8013940:	4611      	mov	r1, r2
 8013942:	4618      	mov	r0, r3
 8013944:	f7f0 fcb5 	bl	80042b2 <HAL_HCD_HC_GetURBState>
 8013948:	4603      	mov	r3, r0
}
 801394a:	4618      	mov	r0, r3
 801394c:	3708      	adds	r7, #8
 801394e:	46bd      	mov	sp, r7
 8013950:	bd80      	pop	{r7, pc}

08013952 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8013952:	b580      	push	{r7, lr}
 8013954:	b082      	sub	sp, #8
 8013956:	af00      	add	r7, sp, #0
 8013958:	6078      	str	r0, [r7, #4]
 801395a:	460b      	mov	r3, r1
 801395c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8013964:	2b01      	cmp	r3, #1
 8013966:	d103      	bne.n	8013970 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8013968:	78fb      	ldrb	r3, [r7, #3]
 801396a:	4618      	mov	r0, r3
 801396c:	f000 f870 	bl	8013a50 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8013970:	20c8      	movs	r0, #200	; 0xc8
 8013972:	f7ee ffcb 	bl	800290c <HAL_Delay>
  return USBH_OK;
 8013976:	2300      	movs	r3, #0
}
 8013978:	4618      	mov	r0, r3
 801397a:	3708      	adds	r7, #8
 801397c:	46bd      	mov	sp, r7
 801397e:	bd80      	pop	{r7, pc}

08013980 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8013980:	b480      	push	{r7}
 8013982:	b085      	sub	sp, #20
 8013984:	af00      	add	r7, sp, #0
 8013986:	6078      	str	r0, [r7, #4]
 8013988:	460b      	mov	r3, r1
 801398a:	70fb      	strb	r3, [r7, #3]
 801398c:	4613      	mov	r3, r2
 801398e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013996:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8013998:	78fb      	ldrb	r3, [r7, #3]
 801399a:	68fa      	ldr	r2, [r7, #12]
 801399c:	212c      	movs	r1, #44	; 0x2c
 801399e:	fb01 f303 	mul.w	r3, r1, r3
 80139a2:	4413      	add	r3, r2
 80139a4:	333b      	adds	r3, #59	; 0x3b
 80139a6:	781b      	ldrb	r3, [r3, #0]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d009      	beq.n	80139c0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80139ac:	78fb      	ldrb	r3, [r7, #3]
 80139ae:	68fa      	ldr	r2, [r7, #12]
 80139b0:	212c      	movs	r1, #44	; 0x2c
 80139b2:	fb01 f303 	mul.w	r3, r1, r3
 80139b6:	4413      	add	r3, r2
 80139b8:	3354      	adds	r3, #84	; 0x54
 80139ba:	78ba      	ldrb	r2, [r7, #2]
 80139bc:	701a      	strb	r2, [r3, #0]
 80139be:	e008      	b.n	80139d2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80139c0:	78fb      	ldrb	r3, [r7, #3]
 80139c2:	68fa      	ldr	r2, [r7, #12]
 80139c4:	212c      	movs	r1, #44	; 0x2c
 80139c6:	fb01 f303 	mul.w	r3, r1, r3
 80139ca:	4413      	add	r3, r2
 80139cc:	3355      	adds	r3, #85	; 0x55
 80139ce:	78ba      	ldrb	r2, [r7, #2]
 80139d0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80139d2:	2300      	movs	r3, #0
}
 80139d4:	4618      	mov	r0, r3
 80139d6:	3714      	adds	r7, #20
 80139d8:	46bd      	mov	sp, r7
 80139da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139de:	4770      	bx	lr

080139e0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80139e0:	b580      	push	{r7, lr}
 80139e2:	b082      	sub	sp, #8
 80139e4:	af00      	add	r7, sp, #0
 80139e6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80139e8:	6878      	ldr	r0, [r7, #4]
 80139ea:	f7ee ff8f 	bl	800290c <HAL_Delay>
}
 80139ee:	bf00      	nop
 80139f0:	3708      	adds	r7, #8
 80139f2:	46bd      	mov	sp, r7
 80139f4:	bd80      	pop	{r7, pc}
	...

080139f8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80139f8:	b480      	push	{r7}
 80139fa:	b085      	sub	sp, #20
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	4603      	mov	r3, r0
 8013a00:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013a02:	2300      	movs	r3, #0
 8013a04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013a06:	79fb      	ldrb	r3, [r7, #7]
 8013a08:	2b03      	cmp	r3, #3
 8013a0a:	d817      	bhi.n	8013a3c <USBH_Get_USB_Status+0x44>
 8013a0c:	a201      	add	r2, pc, #4	; (adr r2, 8013a14 <USBH_Get_USB_Status+0x1c>)
 8013a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a12:	bf00      	nop
 8013a14:	08013a25 	.word	0x08013a25
 8013a18:	08013a2b 	.word	0x08013a2b
 8013a1c:	08013a31 	.word	0x08013a31
 8013a20:	08013a37 	.word	0x08013a37
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8013a24:	2300      	movs	r3, #0
 8013a26:	73fb      	strb	r3, [r7, #15]
    break;
 8013a28:	e00b      	b.n	8013a42 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8013a2a:	2302      	movs	r3, #2
 8013a2c:	73fb      	strb	r3, [r7, #15]
    break;
 8013a2e:	e008      	b.n	8013a42 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8013a30:	2301      	movs	r3, #1
 8013a32:	73fb      	strb	r3, [r7, #15]
    break;
 8013a34:	e005      	b.n	8013a42 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8013a36:	2302      	movs	r3, #2
 8013a38:	73fb      	strb	r3, [r7, #15]
    break;
 8013a3a:	e002      	b.n	8013a42 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8013a3c:	2302      	movs	r3, #2
 8013a3e:	73fb      	strb	r3, [r7, #15]
    break;
 8013a40:	bf00      	nop
  }
  return usb_status;
 8013a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a44:	4618      	mov	r0, r3
 8013a46:	3714      	adds	r7, #20
 8013a48:	46bd      	mov	sp, r7
 8013a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a4e:	4770      	bx	lr

08013a50 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b084      	sub	sp, #16
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	4603      	mov	r3, r0
 8013a58:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8013a5a:	79fb      	ldrb	r3, [r7, #7]
 8013a5c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8013a5e:	79fb      	ldrb	r3, [r7, #7]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d102      	bne.n	8013a6a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8013a64:	2301      	movs	r3, #1
 8013a66:	73fb      	strb	r3, [r7, #15]
 8013a68:	e001      	b.n	8013a6e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8013a6a:	2300      	movs	r3, #0
 8013a6c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,(GPIO_PinState)data);
 8013a6e:	7bfb      	ldrb	r3, [r7, #15]
 8013a70:	461a      	mov	r2, r3
 8013a72:	2101      	movs	r1, #1
 8013a74:	4803      	ldr	r0, [pc, #12]	; (8013a84 <MX_DriverVbusFS+0x34>)
 8013a76:	f7f0 f83f 	bl	8003af8 <HAL_GPIO_WritePin>
}
 8013a7a:	bf00      	nop
 8013a7c:	3710      	adds	r7, #16
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	bd80      	pop	{r7, pc}
 8013a82:	bf00      	nop
 8013a84:	40020400 	.word	0x40020400

08013a88 <atol>:
 8013a88:	220a      	movs	r2, #10
 8013a8a:	2100      	movs	r1, #0
 8013a8c:	f000 bbe6 	b.w	801425c <strtol>

08013a90 <__errno>:
 8013a90:	4b01      	ldr	r3, [pc, #4]	; (8013a98 <__errno+0x8>)
 8013a92:	6818      	ldr	r0, [r3, #0]
 8013a94:	4770      	bx	lr
 8013a96:	bf00      	nop
 8013a98:	200002b0 	.word	0x200002b0

08013a9c <std>:
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	b510      	push	{r4, lr}
 8013aa0:	4604      	mov	r4, r0
 8013aa2:	e9c0 3300 	strd	r3, r3, [r0]
 8013aa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013aaa:	6083      	str	r3, [r0, #8]
 8013aac:	8181      	strh	r1, [r0, #12]
 8013aae:	6643      	str	r3, [r0, #100]	; 0x64
 8013ab0:	81c2      	strh	r2, [r0, #14]
 8013ab2:	6183      	str	r3, [r0, #24]
 8013ab4:	4619      	mov	r1, r3
 8013ab6:	2208      	movs	r2, #8
 8013ab8:	305c      	adds	r0, #92	; 0x5c
 8013aba:	f000 f92b 	bl	8013d14 <memset>
 8013abe:	4b05      	ldr	r3, [pc, #20]	; (8013ad4 <std+0x38>)
 8013ac0:	6263      	str	r3, [r4, #36]	; 0x24
 8013ac2:	4b05      	ldr	r3, [pc, #20]	; (8013ad8 <std+0x3c>)
 8013ac4:	62a3      	str	r3, [r4, #40]	; 0x28
 8013ac6:	4b05      	ldr	r3, [pc, #20]	; (8013adc <std+0x40>)
 8013ac8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013aca:	4b05      	ldr	r3, [pc, #20]	; (8013ae0 <std+0x44>)
 8013acc:	6224      	str	r4, [r4, #32]
 8013ace:	6323      	str	r3, [r4, #48]	; 0x30
 8013ad0:	bd10      	pop	{r4, pc}
 8013ad2:	bf00      	nop
 8013ad4:	08014019 	.word	0x08014019
 8013ad8:	0801403b 	.word	0x0801403b
 8013adc:	08014073 	.word	0x08014073
 8013ae0:	08014097 	.word	0x08014097

08013ae4 <_cleanup_r>:
 8013ae4:	4901      	ldr	r1, [pc, #4]	; (8013aec <_cleanup_r+0x8>)
 8013ae6:	f000 b8af 	b.w	8013c48 <_fwalk_reent>
 8013aea:	bf00      	nop
 8013aec:	080143fd 	.word	0x080143fd

08013af0 <__sfmoreglue>:
 8013af0:	b570      	push	{r4, r5, r6, lr}
 8013af2:	2268      	movs	r2, #104	; 0x68
 8013af4:	1e4d      	subs	r5, r1, #1
 8013af6:	4355      	muls	r5, r2
 8013af8:	460e      	mov	r6, r1
 8013afa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013afe:	f000 f97d 	bl	8013dfc <_malloc_r>
 8013b02:	4604      	mov	r4, r0
 8013b04:	b140      	cbz	r0, 8013b18 <__sfmoreglue+0x28>
 8013b06:	2100      	movs	r1, #0
 8013b08:	e9c0 1600 	strd	r1, r6, [r0]
 8013b0c:	300c      	adds	r0, #12
 8013b0e:	60a0      	str	r0, [r4, #8]
 8013b10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013b14:	f000 f8fe 	bl	8013d14 <memset>
 8013b18:	4620      	mov	r0, r4
 8013b1a:	bd70      	pop	{r4, r5, r6, pc}

08013b1c <__sfp_lock_acquire>:
 8013b1c:	4801      	ldr	r0, [pc, #4]	; (8013b24 <__sfp_lock_acquire+0x8>)
 8013b1e:	f000 b8d8 	b.w	8013cd2 <__retarget_lock_acquire_recursive>
 8013b22:	bf00      	nop
 8013b24:	2000cc21 	.word	0x2000cc21

08013b28 <__sfp_lock_release>:
 8013b28:	4801      	ldr	r0, [pc, #4]	; (8013b30 <__sfp_lock_release+0x8>)
 8013b2a:	f000 b8d3 	b.w	8013cd4 <__retarget_lock_release_recursive>
 8013b2e:	bf00      	nop
 8013b30:	2000cc21 	.word	0x2000cc21

08013b34 <__sinit_lock_acquire>:
 8013b34:	4801      	ldr	r0, [pc, #4]	; (8013b3c <__sinit_lock_acquire+0x8>)
 8013b36:	f000 b8cc 	b.w	8013cd2 <__retarget_lock_acquire_recursive>
 8013b3a:	bf00      	nop
 8013b3c:	2000cc22 	.word	0x2000cc22

08013b40 <__sinit_lock_release>:
 8013b40:	4801      	ldr	r0, [pc, #4]	; (8013b48 <__sinit_lock_release+0x8>)
 8013b42:	f000 b8c7 	b.w	8013cd4 <__retarget_lock_release_recursive>
 8013b46:	bf00      	nop
 8013b48:	2000cc22 	.word	0x2000cc22

08013b4c <__sinit>:
 8013b4c:	b510      	push	{r4, lr}
 8013b4e:	4604      	mov	r4, r0
 8013b50:	f7ff fff0 	bl	8013b34 <__sinit_lock_acquire>
 8013b54:	69a3      	ldr	r3, [r4, #24]
 8013b56:	b11b      	cbz	r3, 8013b60 <__sinit+0x14>
 8013b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b5c:	f7ff bff0 	b.w	8013b40 <__sinit_lock_release>
 8013b60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013b64:	6523      	str	r3, [r4, #80]	; 0x50
 8013b66:	4b13      	ldr	r3, [pc, #76]	; (8013bb4 <__sinit+0x68>)
 8013b68:	4a13      	ldr	r2, [pc, #76]	; (8013bb8 <__sinit+0x6c>)
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8013b6e:	42a3      	cmp	r3, r4
 8013b70:	bf04      	itt	eq
 8013b72:	2301      	moveq	r3, #1
 8013b74:	61a3      	streq	r3, [r4, #24]
 8013b76:	4620      	mov	r0, r4
 8013b78:	f000 f820 	bl	8013bbc <__sfp>
 8013b7c:	6060      	str	r0, [r4, #4]
 8013b7e:	4620      	mov	r0, r4
 8013b80:	f000 f81c 	bl	8013bbc <__sfp>
 8013b84:	60a0      	str	r0, [r4, #8]
 8013b86:	4620      	mov	r0, r4
 8013b88:	f000 f818 	bl	8013bbc <__sfp>
 8013b8c:	2200      	movs	r2, #0
 8013b8e:	60e0      	str	r0, [r4, #12]
 8013b90:	2104      	movs	r1, #4
 8013b92:	6860      	ldr	r0, [r4, #4]
 8013b94:	f7ff ff82 	bl	8013a9c <std>
 8013b98:	68a0      	ldr	r0, [r4, #8]
 8013b9a:	2201      	movs	r2, #1
 8013b9c:	2109      	movs	r1, #9
 8013b9e:	f7ff ff7d 	bl	8013a9c <std>
 8013ba2:	68e0      	ldr	r0, [r4, #12]
 8013ba4:	2202      	movs	r2, #2
 8013ba6:	2112      	movs	r1, #18
 8013ba8:	f7ff ff78 	bl	8013a9c <std>
 8013bac:	2301      	movs	r3, #1
 8013bae:	61a3      	str	r3, [r4, #24]
 8013bb0:	e7d2      	b.n	8013b58 <__sinit+0xc>
 8013bb2:	bf00      	nop
 8013bb4:	0801598c 	.word	0x0801598c
 8013bb8:	08013ae5 	.word	0x08013ae5

08013bbc <__sfp>:
 8013bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bbe:	4607      	mov	r7, r0
 8013bc0:	f7ff ffac 	bl	8013b1c <__sfp_lock_acquire>
 8013bc4:	4b1e      	ldr	r3, [pc, #120]	; (8013c40 <__sfp+0x84>)
 8013bc6:	681e      	ldr	r6, [r3, #0]
 8013bc8:	69b3      	ldr	r3, [r6, #24]
 8013bca:	b913      	cbnz	r3, 8013bd2 <__sfp+0x16>
 8013bcc:	4630      	mov	r0, r6
 8013bce:	f7ff ffbd 	bl	8013b4c <__sinit>
 8013bd2:	3648      	adds	r6, #72	; 0x48
 8013bd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013bd8:	3b01      	subs	r3, #1
 8013bda:	d503      	bpl.n	8013be4 <__sfp+0x28>
 8013bdc:	6833      	ldr	r3, [r6, #0]
 8013bde:	b30b      	cbz	r3, 8013c24 <__sfp+0x68>
 8013be0:	6836      	ldr	r6, [r6, #0]
 8013be2:	e7f7      	b.n	8013bd4 <__sfp+0x18>
 8013be4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013be8:	b9d5      	cbnz	r5, 8013c20 <__sfp+0x64>
 8013bea:	4b16      	ldr	r3, [pc, #88]	; (8013c44 <__sfp+0x88>)
 8013bec:	60e3      	str	r3, [r4, #12]
 8013bee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013bf2:	6665      	str	r5, [r4, #100]	; 0x64
 8013bf4:	f000 f86c 	bl	8013cd0 <__retarget_lock_init_recursive>
 8013bf8:	f7ff ff96 	bl	8013b28 <__sfp_lock_release>
 8013bfc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013c00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013c04:	6025      	str	r5, [r4, #0]
 8013c06:	61a5      	str	r5, [r4, #24]
 8013c08:	2208      	movs	r2, #8
 8013c0a:	4629      	mov	r1, r5
 8013c0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013c10:	f000 f880 	bl	8013d14 <memset>
 8013c14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013c18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013c1c:	4620      	mov	r0, r4
 8013c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c20:	3468      	adds	r4, #104	; 0x68
 8013c22:	e7d9      	b.n	8013bd8 <__sfp+0x1c>
 8013c24:	2104      	movs	r1, #4
 8013c26:	4638      	mov	r0, r7
 8013c28:	f7ff ff62 	bl	8013af0 <__sfmoreglue>
 8013c2c:	4604      	mov	r4, r0
 8013c2e:	6030      	str	r0, [r6, #0]
 8013c30:	2800      	cmp	r0, #0
 8013c32:	d1d5      	bne.n	8013be0 <__sfp+0x24>
 8013c34:	f7ff ff78 	bl	8013b28 <__sfp_lock_release>
 8013c38:	230c      	movs	r3, #12
 8013c3a:	603b      	str	r3, [r7, #0]
 8013c3c:	e7ee      	b.n	8013c1c <__sfp+0x60>
 8013c3e:	bf00      	nop
 8013c40:	0801598c 	.word	0x0801598c
 8013c44:	ffff0001 	.word	0xffff0001

08013c48 <_fwalk_reent>:
 8013c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c4c:	4606      	mov	r6, r0
 8013c4e:	4688      	mov	r8, r1
 8013c50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013c54:	2700      	movs	r7, #0
 8013c56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013c5a:	f1b9 0901 	subs.w	r9, r9, #1
 8013c5e:	d505      	bpl.n	8013c6c <_fwalk_reent+0x24>
 8013c60:	6824      	ldr	r4, [r4, #0]
 8013c62:	2c00      	cmp	r4, #0
 8013c64:	d1f7      	bne.n	8013c56 <_fwalk_reent+0xe>
 8013c66:	4638      	mov	r0, r7
 8013c68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c6c:	89ab      	ldrh	r3, [r5, #12]
 8013c6e:	2b01      	cmp	r3, #1
 8013c70:	d907      	bls.n	8013c82 <_fwalk_reent+0x3a>
 8013c72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013c76:	3301      	adds	r3, #1
 8013c78:	d003      	beq.n	8013c82 <_fwalk_reent+0x3a>
 8013c7a:	4629      	mov	r1, r5
 8013c7c:	4630      	mov	r0, r6
 8013c7e:	47c0      	blx	r8
 8013c80:	4307      	orrs	r7, r0
 8013c82:	3568      	adds	r5, #104	; 0x68
 8013c84:	e7e9      	b.n	8013c5a <_fwalk_reent+0x12>
	...

08013c88 <__libc_init_array>:
 8013c88:	b570      	push	{r4, r5, r6, lr}
 8013c8a:	4d0d      	ldr	r5, [pc, #52]	; (8013cc0 <__libc_init_array+0x38>)
 8013c8c:	4c0d      	ldr	r4, [pc, #52]	; (8013cc4 <__libc_init_array+0x3c>)
 8013c8e:	1b64      	subs	r4, r4, r5
 8013c90:	10a4      	asrs	r4, r4, #2
 8013c92:	2600      	movs	r6, #0
 8013c94:	42a6      	cmp	r6, r4
 8013c96:	d109      	bne.n	8013cac <__libc_init_array+0x24>
 8013c98:	4d0b      	ldr	r5, [pc, #44]	; (8013cc8 <__libc_init_array+0x40>)
 8013c9a:	4c0c      	ldr	r4, [pc, #48]	; (8013ccc <__libc_init_array+0x44>)
 8013c9c:	f001 fa5a 	bl	8015154 <_init>
 8013ca0:	1b64      	subs	r4, r4, r5
 8013ca2:	10a4      	asrs	r4, r4, #2
 8013ca4:	2600      	movs	r6, #0
 8013ca6:	42a6      	cmp	r6, r4
 8013ca8:	d105      	bne.n	8013cb6 <__libc_init_array+0x2e>
 8013caa:	bd70      	pop	{r4, r5, r6, pc}
 8013cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8013cb0:	4798      	blx	r3
 8013cb2:	3601      	adds	r6, #1
 8013cb4:	e7ee      	b.n	8013c94 <__libc_init_array+0xc>
 8013cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8013cba:	4798      	blx	r3
 8013cbc:	3601      	adds	r6, #1
 8013cbe:	e7f2      	b.n	8013ca6 <__libc_init_array+0x1e>
 8013cc0:	08015b7c 	.word	0x08015b7c
 8013cc4:	08015b7c 	.word	0x08015b7c
 8013cc8:	08015b7c 	.word	0x08015b7c
 8013ccc:	08015b80 	.word	0x08015b80

08013cd0 <__retarget_lock_init_recursive>:
 8013cd0:	4770      	bx	lr

08013cd2 <__retarget_lock_acquire_recursive>:
 8013cd2:	4770      	bx	lr

08013cd4 <__retarget_lock_release_recursive>:
 8013cd4:	4770      	bx	lr
	...

08013cd8 <malloc>:
 8013cd8:	4b02      	ldr	r3, [pc, #8]	; (8013ce4 <malloc+0xc>)
 8013cda:	4601      	mov	r1, r0
 8013cdc:	6818      	ldr	r0, [r3, #0]
 8013cde:	f000 b88d 	b.w	8013dfc <_malloc_r>
 8013ce2:	bf00      	nop
 8013ce4:	200002b0 	.word	0x200002b0

08013ce8 <free>:
 8013ce8:	4b02      	ldr	r3, [pc, #8]	; (8013cf4 <free+0xc>)
 8013cea:	4601      	mov	r1, r0
 8013cec:	6818      	ldr	r0, [r3, #0]
 8013cee:	f000 b819 	b.w	8013d24 <_free_r>
 8013cf2:	bf00      	nop
 8013cf4:	200002b0 	.word	0x200002b0

08013cf8 <memcpy>:
 8013cf8:	440a      	add	r2, r1
 8013cfa:	4291      	cmp	r1, r2
 8013cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8013d00:	d100      	bne.n	8013d04 <memcpy+0xc>
 8013d02:	4770      	bx	lr
 8013d04:	b510      	push	{r4, lr}
 8013d06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013d0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013d0e:	4291      	cmp	r1, r2
 8013d10:	d1f9      	bne.n	8013d06 <memcpy+0xe>
 8013d12:	bd10      	pop	{r4, pc}

08013d14 <memset>:
 8013d14:	4402      	add	r2, r0
 8013d16:	4603      	mov	r3, r0
 8013d18:	4293      	cmp	r3, r2
 8013d1a:	d100      	bne.n	8013d1e <memset+0xa>
 8013d1c:	4770      	bx	lr
 8013d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8013d22:	e7f9      	b.n	8013d18 <memset+0x4>

08013d24 <_free_r>:
 8013d24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013d26:	2900      	cmp	r1, #0
 8013d28:	d044      	beq.n	8013db4 <_free_r+0x90>
 8013d2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d2e:	9001      	str	r0, [sp, #4]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	f1a1 0404 	sub.w	r4, r1, #4
 8013d36:	bfb8      	it	lt
 8013d38:	18e4      	addlt	r4, r4, r3
 8013d3a:	f000 fbbf 	bl	80144bc <__malloc_lock>
 8013d3e:	4a1e      	ldr	r2, [pc, #120]	; (8013db8 <_free_r+0x94>)
 8013d40:	9801      	ldr	r0, [sp, #4]
 8013d42:	6813      	ldr	r3, [r2, #0]
 8013d44:	b933      	cbnz	r3, 8013d54 <_free_r+0x30>
 8013d46:	6063      	str	r3, [r4, #4]
 8013d48:	6014      	str	r4, [r2, #0]
 8013d4a:	b003      	add	sp, #12
 8013d4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013d50:	f000 bbba 	b.w	80144c8 <__malloc_unlock>
 8013d54:	42a3      	cmp	r3, r4
 8013d56:	d908      	bls.n	8013d6a <_free_r+0x46>
 8013d58:	6825      	ldr	r5, [r4, #0]
 8013d5a:	1961      	adds	r1, r4, r5
 8013d5c:	428b      	cmp	r3, r1
 8013d5e:	bf01      	itttt	eq
 8013d60:	6819      	ldreq	r1, [r3, #0]
 8013d62:	685b      	ldreq	r3, [r3, #4]
 8013d64:	1949      	addeq	r1, r1, r5
 8013d66:	6021      	streq	r1, [r4, #0]
 8013d68:	e7ed      	b.n	8013d46 <_free_r+0x22>
 8013d6a:	461a      	mov	r2, r3
 8013d6c:	685b      	ldr	r3, [r3, #4]
 8013d6e:	b10b      	cbz	r3, 8013d74 <_free_r+0x50>
 8013d70:	42a3      	cmp	r3, r4
 8013d72:	d9fa      	bls.n	8013d6a <_free_r+0x46>
 8013d74:	6811      	ldr	r1, [r2, #0]
 8013d76:	1855      	adds	r5, r2, r1
 8013d78:	42a5      	cmp	r5, r4
 8013d7a:	d10b      	bne.n	8013d94 <_free_r+0x70>
 8013d7c:	6824      	ldr	r4, [r4, #0]
 8013d7e:	4421      	add	r1, r4
 8013d80:	1854      	adds	r4, r2, r1
 8013d82:	42a3      	cmp	r3, r4
 8013d84:	6011      	str	r1, [r2, #0]
 8013d86:	d1e0      	bne.n	8013d4a <_free_r+0x26>
 8013d88:	681c      	ldr	r4, [r3, #0]
 8013d8a:	685b      	ldr	r3, [r3, #4]
 8013d8c:	6053      	str	r3, [r2, #4]
 8013d8e:	4421      	add	r1, r4
 8013d90:	6011      	str	r1, [r2, #0]
 8013d92:	e7da      	b.n	8013d4a <_free_r+0x26>
 8013d94:	d902      	bls.n	8013d9c <_free_r+0x78>
 8013d96:	230c      	movs	r3, #12
 8013d98:	6003      	str	r3, [r0, #0]
 8013d9a:	e7d6      	b.n	8013d4a <_free_r+0x26>
 8013d9c:	6825      	ldr	r5, [r4, #0]
 8013d9e:	1961      	adds	r1, r4, r5
 8013da0:	428b      	cmp	r3, r1
 8013da2:	bf04      	itt	eq
 8013da4:	6819      	ldreq	r1, [r3, #0]
 8013da6:	685b      	ldreq	r3, [r3, #4]
 8013da8:	6063      	str	r3, [r4, #4]
 8013daa:	bf04      	itt	eq
 8013dac:	1949      	addeq	r1, r1, r5
 8013dae:	6021      	streq	r1, [r4, #0]
 8013db0:	6054      	str	r4, [r2, #4]
 8013db2:	e7ca      	b.n	8013d4a <_free_r+0x26>
 8013db4:	b003      	add	sp, #12
 8013db6:	bd30      	pop	{r4, r5, pc}
 8013db8:	2000cc24 	.word	0x2000cc24

08013dbc <sbrk_aligned>:
 8013dbc:	b570      	push	{r4, r5, r6, lr}
 8013dbe:	4e0e      	ldr	r6, [pc, #56]	; (8013df8 <sbrk_aligned+0x3c>)
 8013dc0:	460c      	mov	r4, r1
 8013dc2:	6831      	ldr	r1, [r6, #0]
 8013dc4:	4605      	mov	r5, r0
 8013dc6:	b911      	cbnz	r1, 8013dce <sbrk_aligned+0x12>
 8013dc8:	f000 f8f6 	bl	8013fb8 <_sbrk_r>
 8013dcc:	6030      	str	r0, [r6, #0]
 8013dce:	4621      	mov	r1, r4
 8013dd0:	4628      	mov	r0, r5
 8013dd2:	f000 f8f1 	bl	8013fb8 <_sbrk_r>
 8013dd6:	1c43      	adds	r3, r0, #1
 8013dd8:	d00a      	beq.n	8013df0 <sbrk_aligned+0x34>
 8013dda:	1cc4      	adds	r4, r0, #3
 8013ddc:	f024 0403 	bic.w	r4, r4, #3
 8013de0:	42a0      	cmp	r0, r4
 8013de2:	d007      	beq.n	8013df4 <sbrk_aligned+0x38>
 8013de4:	1a21      	subs	r1, r4, r0
 8013de6:	4628      	mov	r0, r5
 8013de8:	f000 f8e6 	bl	8013fb8 <_sbrk_r>
 8013dec:	3001      	adds	r0, #1
 8013dee:	d101      	bne.n	8013df4 <sbrk_aligned+0x38>
 8013df0:	f04f 34ff 	mov.w	r4, #4294967295
 8013df4:	4620      	mov	r0, r4
 8013df6:	bd70      	pop	{r4, r5, r6, pc}
 8013df8:	2000cc28 	.word	0x2000cc28

08013dfc <_malloc_r>:
 8013dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e00:	1ccd      	adds	r5, r1, #3
 8013e02:	f025 0503 	bic.w	r5, r5, #3
 8013e06:	3508      	adds	r5, #8
 8013e08:	2d0c      	cmp	r5, #12
 8013e0a:	bf38      	it	cc
 8013e0c:	250c      	movcc	r5, #12
 8013e0e:	2d00      	cmp	r5, #0
 8013e10:	4607      	mov	r7, r0
 8013e12:	db01      	blt.n	8013e18 <_malloc_r+0x1c>
 8013e14:	42a9      	cmp	r1, r5
 8013e16:	d905      	bls.n	8013e24 <_malloc_r+0x28>
 8013e18:	230c      	movs	r3, #12
 8013e1a:	603b      	str	r3, [r7, #0]
 8013e1c:	2600      	movs	r6, #0
 8013e1e:	4630      	mov	r0, r6
 8013e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e24:	4e2e      	ldr	r6, [pc, #184]	; (8013ee0 <_malloc_r+0xe4>)
 8013e26:	f000 fb49 	bl	80144bc <__malloc_lock>
 8013e2a:	6833      	ldr	r3, [r6, #0]
 8013e2c:	461c      	mov	r4, r3
 8013e2e:	bb34      	cbnz	r4, 8013e7e <_malloc_r+0x82>
 8013e30:	4629      	mov	r1, r5
 8013e32:	4638      	mov	r0, r7
 8013e34:	f7ff ffc2 	bl	8013dbc <sbrk_aligned>
 8013e38:	1c43      	adds	r3, r0, #1
 8013e3a:	4604      	mov	r4, r0
 8013e3c:	d14d      	bne.n	8013eda <_malloc_r+0xde>
 8013e3e:	6834      	ldr	r4, [r6, #0]
 8013e40:	4626      	mov	r6, r4
 8013e42:	2e00      	cmp	r6, #0
 8013e44:	d140      	bne.n	8013ec8 <_malloc_r+0xcc>
 8013e46:	6823      	ldr	r3, [r4, #0]
 8013e48:	4631      	mov	r1, r6
 8013e4a:	4638      	mov	r0, r7
 8013e4c:	eb04 0803 	add.w	r8, r4, r3
 8013e50:	f000 f8b2 	bl	8013fb8 <_sbrk_r>
 8013e54:	4580      	cmp	r8, r0
 8013e56:	d13a      	bne.n	8013ece <_malloc_r+0xd2>
 8013e58:	6821      	ldr	r1, [r4, #0]
 8013e5a:	3503      	adds	r5, #3
 8013e5c:	1a6d      	subs	r5, r5, r1
 8013e5e:	f025 0503 	bic.w	r5, r5, #3
 8013e62:	3508      	adds	r5, #8
 8013e64:	2d0c      	cmp	r5, #12
 8013e66:	bf38      	it	cc
 8013e68:	250c      	movcc	r5, #12
 8013e6a:	4629      	mov	r1, r5
 8013e6c:	4638      	mov	r0, r7
 8013e6e:	f7ff ffa5 	bl	8013dbc <sbrk_aligned>
 8013e72:	3001      	adds	r0, #1
 8013e74:	d02b      	beq.n	8013ece <_malloc_r+0xd2>
 8013e76:	6823      	ldr	r3, [r4, #0]
 8013e78:	442b      	add	r3, r5
 8013e7a:	6023      	str	r3, [r4, #0]
 8013e7c:	e00e      	b.n	8013e9c <_malloc_r+0xa0>
 8013e7e:	6822      	ldr	r2, [r4, #0]
 8013e80:	1b52      	subs	r2, r2, r5
 8013e82:	d41e      	bmi.n	8013ec2 <_malloc_r+0xc6>
 8013e84:	2a0b      	cmp	r2, #11
 8013e86:	d916      	bls.n	8013eb6 <_malloc_r+0xba>
 8013e88:	1961      	adds	r1, r4, r5
 8013e8a:	42a3      	cmp	r3, r4
 8013e8c:	6025      	str	r5, [r4, #0]
 8013e8e:	bf18      	it	ne
 8013e90:	6059      	strne	r1, [r3, #4]
 8013e92:	6863      	ldr	r3, [r4, #4]
 8013e94:	bf08      	it	eq
 8013e96:	6031      	streq	r1, [r6, #0]
 8013e98:	5162      	str	r2, [r4, r5]
 8013e9a:	604b      	str	r3, [r1, #4]
 8013e9c:	4638      	mov	r0, r7
 8013e9e:	f104 060b 	add.w	r6, r4, #11
 8013ea2:	f000 fb11 	bl	80144c8 <__malloc_unlock>
 8013ea6:	f026 0607 	bic.w	r6, r6, #7
 8013eaa:	1d23      	adds	r3, r4, #4
 8013eac:	1af2      	subs	r2, r6, r3
 8013eae:	d0b6      	beq.n	8013e1e <_malloc_r+0x22>
 8013eb0:	1b9b      	subs	r3, r3, r6
 8013eb2:	50a3      	str	r3, [r4, r2]
 8013eb4:	e7b3      	b.n	8013e1e <_malloc_r+0x22>
 8013eb6:	6862      	ldr	r2, [r4, #4]
 8013eb8:	42a3      	cmp	r3, r4
 8013eba:	bf0c      	ite	eq
 8013ebc:	6032      	streq	r2, [r6, #0]
 8013ebe:	605a      	strne	r2, [r3, #4]
 8013ec0:	e7ec      	b.n	8013e9c <_malloc_r+0xa0>
 8013ec2:	4623      	mov	r3, r4
 8013ec4:	6864      	ldr	r4, [r4, #4]
 8013ec6:	e7b2      	b.n	8013e2e <_malloc_r+0x32>
 8013ec8:	4634      	mov	r4, r6
 8013eca:	6876      	ldr	r6, [r6, #4]
 8013ecc:	e7b9      	b.n	8013e42 <_malloc_r+0x46>
 8013ece:	230c      	movs	r3, #12
 8013ed0:	603b      	str	r3, [r7, #0]
 8013ed2:	4638      	mov	r0, r7
 8013ed4:	f000 faf8 	bl	80144c8 <__malloc_unlock>
 8013ed8:	e7a1      	b.n	8013e1e <_malloc_r+0x22>
 8013eda:	6025      	str	r5, [r4, #0]
 8013edc:	e7de      	b.n	8013e9c <_malloc_r+0xa0>
 8013ede:	bf00      	nop
 8013ee0:	2000cc24 	.word	0x2000cc24

08013ee4 <cleanup_glue>:
 8013ee4:	b538      	push	{r3, r4, r5, lr}
 8013ee6:	460c      	mov	r4, r1
 8013ee8:	6809      	ldr	r1, [r1, #0]
 8013eea:	4605      	mov	r5, r0
 8013eec:	b109      	cbz	r1, 8013ef2 <cleanup_glue+0xe>
 8013eee:	f7ff fff9 	bl	8013ee4 <cleanup_glue>
 8013ef2:	4621      	mov	r1, r4
 8013ef4:	4628      	mov	r0, r5
 8013ef6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013efa:	f7ff bf13 	b.w	8013d24 <_free_r>
	...

08013f00 <_reclaim_reent>:
 8013f00:	4b2c      	ldr	r3, [pc, #176]	; (8013fb4 <_reclaim_reent+0xb4>)
 8013f02:	681b      	ldr	r3, [r3, #0]
 8013f04:	4283      	cmp	r3, r0
 8013f06:	b570      	push	{r4, r5, r6, lr}
 8013f08:	4604      	mov	r4, r0
 8013f0a:	d051      	beq.n	8013fb0 <_reclaim_reent+0xb0>
 8013f0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013f0e:	b143      	cbz	r3, 8013f22 <_reclaim_reent+0x22>
 8013f10:	68db      	ldr	r3, [r3, #12]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d14a      	bne.n	8013fac <_reclaim_reent+0xac>
 8013f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013f18:	6819      	ldr	r1, [r3, #0]
 8013f1a:	b111      	cbz	r1, 8013f22 <_reclaim_reent+0x22>
 8013f1c:	4620      	mov	r0, r4
 8013f1e:	f7ff ff01 	bl	8013d24 <_free_r>
 8013f22:	6961      	ldr	r1, [r4, #20]
 8013f24:	b111      	cbz	r1, 8013f2c <_reclaim_reent+0x2c>
 8013f26:	4620      	mov	r0, r4
 8013f28:	f7ff fefc 	bl	8013d24 <_free_r>
 8013f2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013f2e:	b111      	cbz	r1, 8013f36 <_reclaim_reent+0x36>
 8013f30:	4620      	mov	r0, r4
 8013f32:	f7ff fef7 	bl	8013d24 <_free_r>
 8013f36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013f38:	b111      	cbz	r1, 8013f40 <_reclaim_reent+0x40>
 8013f3a:	4620      	mov	r0, r4
 8013f3c:	f7ff fef2 	bl	8013d24 <_free_r>
 8013f40:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8013f42:	b111      	cbz	r1, 8013f4a <_reclaim_reent+0x4a>
 8013f44:	4620      	mov	r0, r4
 8013f46:	f7ff feed 	bl	8013d24 <_free_r>
 8013f4a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8013f4c:	b111      	cbz	r1, 8013f54 <_reclaim_reent+0x54>
 8013f4e:	4620      	mov	r0, r4
 8013f50:	f7ff fee8 	bl	8013d24 <_free_r>
 8013f54:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8013f56:	b111      	cbz	r1, 8013f5e <_reclaim_reent+0x5e>
 8013f58:	4620      	mov	r0, r4
 8013f5a:	f7ff fee3 	bl	8013d24 <_free_r>
 8013f5e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8013f60:	b111      	cbz	r1, 8013f68 <_reclaim_reent+0x68>
 8013f62:	4620      	mov	r0, r4
 8013f64:	f7ff fede 	bl	8013d24 <_free_r>
 8013f68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013f6a:	b111      	cbz	r1, 8013f72 <_reclaim_reent+0x72>
 8013f6c:	4620      	mov	r0, r4
 8013f6e:	f7ff fed9 	bl	8013d24 <_free_r>
 8013f72:	69a3      	ldr	r3, [r4, #24]
 8013f74:	b1e3      	cbz	r3, 8013fb0 <_reclaim_reent+0xb0>
 8013f76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013f78:	4620      	mov	r0, r4
 8013f7a:	4798      	blx	r3
 8013f7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8013f7e:	b1b9      	cbz	r1, 8013fb0 <_reclaim_reent+0xb0>
 8013f80:	4620      	mov	r0, r4
 8013f82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f86:	f7ff bfad 	b.w	8013ee4 <cleanup_glue>
 8013f8a:	5949      	ldr	r1, [r1, r5]
 8013f8c:	b941      	cbnz	r1, 8013fa0 <_reclaim_reent+0xa0>
 8013f8e:	3504      	adds	r5, #4
 8013f90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013f92:	2d80      	cmp	r5, #128	; 0x80
 8013f94:	68d9      	ldr	r1, [r3, #12]
 8013f96:	d1f8      	bne.n	8013f8a <_reclaim_reent+0x8a>
 8013f98:	4620      	mov	r0, r4
 8013f9a:	f7ff fec3 	bl	8013d24 <_free_r>
 8013f9e:	e7ba      	b.n	8013f16 <_reclaim_reent+0x16>
 8013fa0:	680e      	ldr	r6, [r1, #0]
 8013fa2:	4620      	mov	r0, r4
 8013fa4:	f7ff febe 	bl	8013d24 <_free_r>
 8013fa8:	4631      	mov	r1, r6
 8013faa:	e7ef      	b.n	8013f8c <_reclaim_reent+0x8c>
 8013fac:	2500      	movs	r5, #0
 8013fae:	e7ef      	b.n	8013f90 <_reclaim_reent+0x90>
 8013fb0:	bd70      	pop	{r4, r5, r6, pc}
 8013fb2:	bf00      	nop
 8013fb4:	200002b0 	.word	0x200002b0

08013fb8 <_sbrk_r>:
 8013fb8:	b538      	push	{r3, r4, r5, lr}
 8013fba:	4d06      	ldr	r5, [pc, #24]	; (8013fd4 <_sbrk_r+0x1c>)
 8013fbc:	2300      	movs	r3, #0
 8013fbe:	4604      	mov	r4, r0
 8013fc0:	4608      	mov	r0, r1
 8013fc2:	602b      	str	r3, [r5, #0]
 8013fc4:	f7ee fb4a 	bl	800265c <_sbrk>
 8013fc8:	1c43      	adds	r3, r0, #1
 8013fca:	d102      	bne.n	8013fd2 <_sbrk_r+0x1a>
 8013fcc:	682b      	ldr	r3, [r5, #0]
 8013fce:	b103      	cbz	r3, 8013fd2 <_sbrk_r+0x1a>
 8013fd0:	6023      	str	r3, [r4, #0]
 8013fd2:	bd38      	pop	{r3, r4, r5, pc}
 8013fd4:	2000cc2c 	.word	0x2000cc2c

08013fd8 <siprintf>:
 8013fd8:	b40e      	push	{r1, r2, r3}
 8013fda:	b500      	push	{lr}
 8013fdc:	b09c      	sub	sp, #112	; 0x70
 8013fde:	ab1d      	add	r3, sp, #116	; 0x74
 8013fe0:	9002      	str	r0, [sp, #8]
 8013fe2:	9006      	str	r0, [sp, #24]
 8013fe4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013fe8:	4809      	ldr	r0, [pc, #36]	; (8014010 <siprintf+0x38>)
 8013fea:	9107      	str	r1, [sp, #28]
 8013fec:	9104      	str	r1, [sp, #16]
 8013fee:	4909      	ldr	r1, [pc, #36]	; (8014014 <siprintf+0x3c>)
 8013ff0:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ff4:	9105      	str	r1, [sp, #20]
 8013ff6:	6800      	ldr	r0, [r0, #0]
 8013ff8:	9301      	str	r3, [sp, #4]
 8013ffa:	a902      	add	r1, sp, #8
 8013ffc:	f000 fac6 	bl	801458c <_svfiprintf_r>
 8014000:	9b02      	ldr	r3, [sp, #8]
 8014002:	2200      	movs	r2, #0
 8014004:	701a      	strb	r2, [r3, #0]
 8014006:	b01c      	add	sp, #112	; 0x70
 8014008:	f85d eb04 	ldr.w	lr, [sp], #4
 801400c:	b003      	add	sp, #12
 801400e:	4770      	bx	lr
 8014010:	200002b0 	.word	0x200002b0
 8014014:	ffff0208 	.word	0xffff0208

08014018 <__sread>:
 8014018:	b510      	push	{r4, lr}
 801401a:	460c      	mov	r4, r1
 801401c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014020:	f000 fea2 	bl	8014d68 <_read_r>
 8014024:	2800      	cmp	r0, #0
 8014026:	bfab      	itete	ge
 8014028:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801402a:	89a3      	ldrhlt	r3, [r4, #12]
 801402c:	181b      	addge	r3, r3, r0
 801402e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014032:	bfac      	ite	ge
 8014034:	6563      	strge	r3, [r4, #84]	; 0x54
 8014036:	81a3      	strhlt	r3, [r4, #12]
 8014038:	bd10      	pop	{r4, pc}

0801403a <__swrite>:
 801403a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801403e:	461f      	mov	r7, r3
 8014040:	898b      	ldrh	r3, [r1, #12]
 8014042:	05db      	lsls	r3, r3, #23
 8014044:	4605      	mov	r5, r0
 8014046:	460c      	mov	r4, r1
 8014048:	4616      	mov	r6, r2
 801404a:	d505      	bpl.n	8014058 <__swrite+0x1e>
 801404c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014050:	2302      	movs	r3, #2
 8014052:	2200      	movs	r2, #0
 8014054:	f000 fa20 	bl	8014498 <_lseek_r>
 8014058:	89a3      	ldrh	r3, [r4, #12]
 801405a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801405e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014062:	81a3      	strh	r3, [r4, #12]
 8014064:	4632      	mov	r2, r6
 8014066:	463b      	mov	r3, r7
 8014068:	4628      	mov	r0, r5
 801406a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801406e:	f000 b8ff 	b.w	8014270 <_write_r>

08014072 <__sseek>:
 8014072:	b510      	push	{r4, lr}
 8014074:	460c      	mov	r4, r1
 8014076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801407a:	f000 fa0d 	bl	8014498 <_lseek_r>
 801407e:	1c43      	adds	r3, r0, #1
 8014080:	89a3      	ldrh	r3, [r4, #12]
 8014082:	bf15      	itete	ne
 8014084:	6560      	strne	r0, [r4, #84]	; 0x54
 8014086:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801408a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801408e:	81a3      	strheq	r3, [r4, #12]
 8014090:	bf18      	it	ne
 8014092:	81a3      	strhne	r3, [r4, #12]
 8014094:	bd10      	pop	{r4, pc}

08014096 <__sclose>:
 8014096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801409a:	f000 b919 	b.w	80142d0 <_close_r>
	...

080140a0 <strtok>:
 80140a0:	4b16      	ldr	r3, [pc, #88]	; (80140fc <strtok+0x5c>)
 80140a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80140a4:	681e      	ldr	r6, [r3, #0]
 80140a6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80140a8:	4605      	mov	r5, r0
 80140aa:	b9fc      	cbnz	r4, 80140ec <strtok+0x4c>
 80140ac:	2050      	movs	r0, #80	; 0x50
 80140ae:	9101      	str	r1, [sp, #4]
 80140b0:	f7ff fe12 	bl	8013cd8 <malloc>
 80140b4:	9901      	ldr	r1, [sp, #4]
 80140b6:	65b0      	str	r0, [r6, #88]	; 0x58
 80140b8:	4602      	mov	r2, r0
 80140ba:	b920      	cbnz	r0, 80140c6 <strtok+0x26>
 80140bc:	4b10      	ldr	r3, [pc, #64]	; (8014100 <strtok+0x60>)
 80140be:	4811      	ldr	r0, [pc, #68]	; (8014104 <strtok+0x64>)
 80140c0:	2157      	movs	r1, #87	; 0x57
 80140c2:	f000 f8e7 	bl	8014294 <__assert_func>
 80140c6:	e9c0 4400 	strd	r4, r4, [r0]
 80140ca:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80140ce:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80140d2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80140d6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80140da:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80140de:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80140e2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80140e6:	6184      	str	r4, [r0, #24]
 80140e8:	7704      	strb	r4, [r0, #28]
 80140ea:	6244      	str	r4, [r0, #36]	; 0x24
 80140ec:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80140ee:	2301      	movs	r3, #1
 80140f0:	4628      	mov	r0, r5
 80140f2:	b002      	add	sp, #8
 80140f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80140f8:	f000 b806 	b.w	8014108 <__strtok_r>
 80140fc:	200002b0 	.word	0x200002b0
 8014100:	08015990 	.word	0x08015990
 8014104:	080159a7 	.word	0x080159a7

08014108 <__strtok_r>:
 8014108:	b5f0      	push	{r4, r5, r6, r7, lr}
 801410a:	b908      	cbnz	r0, 8014110 <__strtok_r+0x8>
 801410c:	6810      	ldr	r0, [r2, #0]
 801410e:	b188      	cbz	r0, 8014134 <__strtok_r+0x2c>
 8014110:	4604      	mov	r4, r0
 8014112:	4620      	mov	r0, r4
 8014114:	f814 5b01 	ldrb.w	r5, [r4], #1
 8014118:	460f      	mov	r7, r1
 801411a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801411e:	b91e      	cbnz	r6, 8014128 <__strtok_r+0x20>
 8014120:	b965      	cbnz	r5, 801413c <__strtok_r+0x34>
 8014122:	6015      	str	r5, [r2, #0]
 8014124:	4628      	mov	r0, r5
 8014126:	e005      	b.n	8014134 <__strtok_r+0x2c>
 8014128:	42b5      	cmp	r5, r6
 801412a:	d1f6      	bne.n	801411a <__strtok_r+0x12>
 801412c:	2b00      	cmp	r3, #0
 801412e:	d1f0      	bne.n	8014112 <__strtok_r+0xa>
 8014130:	6014      	str	r4, [r2, #0]
 8014132:	7003      	strb	r3, [r0, #0]
 8014134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014136:	461c      	mov	r4, r3
 8014138:	e00c      	b.n	8014154 <__strtok_r+0x4c>
 801413a:	b915      	cbnz	r5, 8014142 <__strtok_r+0x3a>
 801413c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014140:	460e      	mov	r6, r1
 8014142:	f816 5b01 	ldrb.w	r5, [r6], #1
 8014146:	42ab      	cmp	r3, r5
 8014148:	d1f7      	bne.n	801413a <__strtok_r+0x32>
 801414a:	2b00      	cmp	r3, #0
 801414c:	d0f3      	beq.n	8014136 <__strtok_r+0x2e>
 801414e:	2300      	movs	r3, #0
 8014150:	f804 3c01 	strb.w	r3, [r4, #-1]
 8014154:	6014      	str	r4, [r2, #0]
 8014156:	e7ed      	b.n	8014134 <__strtok_r+0x2c>

08014158 <_strtol_l.constprop.0>:
 8014158:	2b01      	cmp	r3, #1
 801415a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801415e:	d001      	beq.n	8014164 <_strtol_l.constprop.0+0xc>
 8014160:	2b24      	cmp	r3, #36	; 0x24
 8014162:	d906      	bls.n	8014172 <_strtol_l.constprop.0+0x1a>
 8014164:	f7ff fc94 	bl	8013a90 <__errno>
 8014168:	2316      	movs	r3, #22
 801416a:	6003      	str	r3, [r0, #0]
 801416c:	2000      	movs	r0, #0
 801416e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014172:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8014258 <_strtol_l.constprop.0+0x100>
 8014176:	460d      	mov	r5, r1
 8014178:	462e      	mov	r6, r5
 801417a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801417e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8014182:	f017 0708 	ands.w	r7, r7, #8
 8014186:	d1f7      	bne.n	8014178 <_strtol_l.constprop.0+0x20>
 8014188:	2c2d      	cmp	r4, #45	; 0x2d
 801418a:	d132      	bne.n	80141f2 <_strtol_l.constprop.0+0x9a>
 801418c:	782c      	ldrb	r4, [r5, #0]
 801418e:	2701      	movs	r7, #1
 8014190:	1cb5      	adds	r5, r6, #2
 8014192:	2b00      	cmp	r3, #0
 8014194:	d05b      	beq.n	801424e <_strtol_l.constprop.0+0xf6>
 8014196:	2b10      	cmp	r3, #16
 8014198:	d109      	bne.n	80141ae <_strtol_l.constprop.0+0x56>
 801419a:	2c30      	cmp	r4, #48	; 0x30
 801419c:	d107      	bne.n	80141ae <_strtol_l.constprop.0+0x56>
 801419e:	782c      	ldrb	r4, [r5, #0]
 80141a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80141a4:	2c58      	cmp	r4, #88	; 0x58
 80141a6:	d14d      	bne.n	8014244 <_strtol_l.constprop.0+0xec>
 80141a8:	786c      	ldrb	r4, [r5, #1]
 80141aa:	2310      	movs	r3, #16
 80141ac:	3502      	adds	r5, #2
 80141ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80141b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80141b6:	f04f 0c00 	mov.w	ip, #0
 80141ba:	fbb8 f9f3 	udiv	r9, r8, r3
 80141be:	4666      	mov	r6, ip
 80141c0:	fb03 8a19 	mls	sl, r3, r9, r8
 80141c4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80141c8:	f1be 0f09 	cmp.w	lr, #9
 80141cc:	d816      	bhi.n	80141fc <_strtol_l.constprop.0+0xa4>
 80141ce:	4674      	mov	r4, lr
 80141d0:	42a3      	cmp	r3, r4
 80141d2:	dd24      	ble.n	801421e <_strtol_l.constprop.0+0xc6>
 80141d4:	f1bc 0f00 	cmp.w	ip, #0
 80141d8:	db1e      	blt.n	8014218 <_strtol_l.constprop.0+0xc0>
 80141da:	45b1      	cmp	r9, r6
 80141dc:	d31c      	bcc.n	8014218 <_strtol_l.constprop.0+0xc0>
 80141de:	d101      	bne.n	80141e4 <_strtol_l.constprop.0+0x8c>
 80141e0:	45a2      	cmp	sl, r4
 80141e2:	db19      	blt.n	8014218 <_strtol_l.constprop.0+0xc0>
 80141e4:	fb06 4603 	mla	r6, r6, r3, r4
 80141e8:	f04f 0c01 	mov.w	ip, #1
 80141ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80141f0:	e7e8      	b.n	80141c4 <_strtol_l.constprop.0+0x6c>
 80141f2:	2c2b      	cmp	r4, #43	; 0x2b
 80141f4:	bf04      	itt	eq
 80141f6:	782c      	ldrbeq	r4, [r5, #0]
 80141f8:	1cb5      	addeq	r5, r6, #2
 80141fa:	e7ca      	b.n	8014192 <_strtol_l.constprop.0+0x3a>
 80141fc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8014200:	f1be 0f19 	cmp.w	lr, #25
 8014204:	d801      	bhi.n	801420a <_strtol_l.constprop.0+0xb2>
 8014206:	3c37      	subs	r4, #55	; 0x37
 8014208:	e7e2      	b.n	80141d0 <_strtol_l.constprop.0+0x78>
 801420a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801420e:	f1be 0f19 	cmp.w	lr, #25
 8014212:	d804      	bhi.n	801421e <_strtol_l.constprop.0+0xc6>
 8014214:	3c57      	subs	r4, #87	; 0x57
 8014216:	e7db      	b.n	80141d0 <_strtol_l.constprop.0+0x78>
 8014218:	f04f 3cff 	mov.w	ip, #4294967295
 801421c:	e7e6      	b.n	80141ec <_strtol_l.constprop.0+0x94>
 801421e:	f1bc 0f00 	cmp.w	ip, #0
 8014222:	da05      	bge.n	8014230 <_strtol_l.constprop.0+0xd8>
 8014224:	2322      	movs	r3, #34	; 0x22
 8014226:	6003      	str	r3, [r0, #0]
 8014228:	4646      	mov	r6, r8
 801422a:	b942      	cbnz	r2, 801423e <_strtol_l.constprop.0+0xe6>
 801422c:	4630      	mov	r0, r6
 801422e:	e79e      	b.n	801416e <_strtol_l.constprop.0+0x16>
 8014230:	b107      	cbz	r7, 8014234 <_strtol_l.constprop.0+0xdc>
 8014232:	4276      	negs	r6, r6
 8014234:	2a00      	cmp	r2, #0
 8014236:	d0f9      	beq.n	801422c <_strtol_l.constprop.0+0xd4>
 8014238:	f1bc 0f00 	cmp.w	ip, #0
 801423c:	d000      	beq.n	8014240 <_strtol_l.constprop.0+0xe8>
 801423e:	1e69      	subs	r1, r5, #1
 8014240:	6011      	str	r1, [r2, #0]
 8014242:	e7f3      	b.n	801422c <_strtol_l.constprop.0+0xd4>
 8014244:	2430      	movs	r4, #48	; 0x30
 8014246:	2b00      	cmp	r3, #0
 8014248:	d1b1      	bne.n	80141ae <_strtol_l.constprop.0+0x56>
 801424a:	2308      	movs	r3, #8
 801424c:	e7af      	b.n	80141ae <_strtol_l.constprop.0+0x56>
 801424e:	2c30      	cmp	r4, #48	; 0x30
 8014250:	d0a5      	beq.n	801419e <_strtol_l.constprop.0+0x46>
 8014252:	230a      	movs	r3, #10
 8014254:	e7ab      	b.n	80141ae <_strtol_l.constprop.0+0x56>
 8014256:	bf00      	nop
 8014258:	08015a41 	.word	0x08015a41

0801425c <strtol>:
 801425c:	4613      	mov	r3, r2
 801425e:	460a      	mov	r2, r1
 8014260:	4601      	mov	r1, r0
 8014262:	4802      	ldr	r0, [pc, #8]	; (801426c <strtol+0x10>)
 8014264:	6800      	ldr	r0, [r0, #0]
 8014266:	f7ff bf77 	b.w	8014158 <_strtol_l.constprop.0>
 801426a:	bf00      	nop
 801426c:	200002b0 	.word	0x200002b0

08014270 <_write_r>:
 8014270:	b538      	push	{r3, r4, r5, lr}
 8014272:	4d07      	ldr	r5, [pc, #28]	; (8014290 <_write_r+0x20>)
 8014274:	4604      	mov	r4, r0
 8014276:	4608      	mov	r0, r1
 8014278:	4611      	mov	r1, r2
 801427a:	2200      	movs	r2, #0
 801427c:	602a      	str	r2, [r5, #0]
 801427e:	461a      	mov	r2, r3
 8014280:	f7ee f99b 	bl	80025ba <_write>
 8014284:	1c43      	adds	r3, r0, #1
 8014286:	d102      	bne.n	801428e <_write_r+0x1e>
 8014288:	682b      	ldr	r3, [r5, #0]
 801428a:	b103      	cbz	r3, 801428e <_write_r+0x1e>
 801428c:	6023      	str	r3, [r4, #0]
 801428e:	bd38      	pop	{r3, r4, r5, pc}
 8014290:	2000cc2c 	.word	0x2000cc2c

08014294 <__assert_func>:
 8014294:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014296:	4614      	mov	r4, r2
 8014298:	461a      	mov	r2, r3
 801429a:	4b09      	ldr	r3, [pc, #36]	; (80142c0 <__assert_func+0x2c>)
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	4605      	mov	r5, r0
 80142a0:	68d8      	ldr	r0, [r3, #12]
 80142a2:	b14c      	cbz	r4, 80142b8 <__assert_func+0x24>
 80142a4:	4b07      	ldr	r3, [pc, #28]	; (80142c4 <__assert_func+0x30>)
 80142a6:	9100      	str	r1, [sp, #0]
 80142a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80142ac:	4906      	ldr	r1, [pc, #24]	; (80142c8 <__assert_func+0x34>)
 80142ae:	462b      	mov	r3, r5
 80142b0:	f000 f8e0 	bl	8014474 <fiprintf>
 80142b4:	f000 fe2a 	bl	8014f0c <abort>
 80142b8:	4b04      	ldr	r3, [pc, #16]	; (80142cc <__assert_func+0x38>)
 80142ba:	461c      	mov	r4, r3
 80142bc:	e7f3      	b.n	80142a6 <__assert_func+0x12>
 80142be:	bf00      	nop
 80142c0:	200002b0 	.word	0x200002b0
 80142c4:	08015a04 	.word	0x08015a04
 80142c8:	08015a11 	.word	0x08015a11
 80142cc:	08015a3f 	.word	0x08015a3f

080142d0 <_close_r>:
 80142d0:	b538      	push	{r3, r4, r5, lr}
 80142d2:	4d06      	ldr	r5, [pc, #24]	; (80142ec <_close_r+0x1c>)
 80142d4:	2300      	movs	r3, #0
 80142d6:	4604      	mov	r4, r0
 80142d8:	4608      	mov	r0, r1
 80142da:	602b      	str	r3, [r5, #0]
 80142dc:	f7ee f989 	bl	80025f2 <_close>
 80142e0:	1c43      	adds	r3, r0, #1
 80142e2:	d102      	bne.n	80142ea <_close_r+0x1a>
 80142e4:	682b      	ldr	r3, [r5, #0]
 80142e6:	b103      	cbz	r3, 80142ea <_close_r+0x1a>
 80142e8:	6023      	str	r3, [r4, #0]
 80142ea:	bd38      	pop	{r3, r4, r5, pc}
 80142ec:	2000cc2c 	.word	0x2000cc2c

080142f0 <__sflush_r>:
 80142f0:	898a      	ldrh	r2, [r1, #12]
 80142f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142f6:	4605      	mov	r5, r0
 80142f8:	0710      	lsls	r0, r2, #28
 80142fa:	460c      	mov	r4, r1
 80142fc:	d458      	bmi.n	80143b0 <__sflush_r+0xc0>
 80142fe:	684b      	ldr	r3, [r1, #4]
 8014300:	2b00      	cmp	r3, #0
 8014302:	dc05      	bgt.n	8014310 <__sflush_r+0x20>
 8014304:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014306:	2b00      	cmp	r3, #0
 8014308:	dc02      	bgt.n	8014310 <__sflush_r+0x20>
 801430a:	2000      	movs	r0, #0
 801430c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014312:	2e00      	cmp	r6, #0
 8014314:	d0f9      	beq.n	801430a <__sflush_r+0x1a>
 8014316:	2300      	movs	r3, #0
 8014318:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801431c:	682f      	ldr	r7, [r5, #0]
 801431e:	602b      	str	r3, [r5, #0]
 8014320:	d032      	beq.n	8014388 <__sflush_r+0x98>
 8014322:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014324:	89a3      	ldrh	r3, [r4, #12]
 8014326:	075a      	lsls	r2, r3, #29
 8014328:	d505      	bpl.n	8014336 <__sflush_r+0x46>
 801432a:	6863      	ldr	r3, [r4, #4]
 801432c:	1ac0      	subs	r0, r0, r3
 801432e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014330:	b10b      	cbz	r3, 8014336 <__sflush_r+0x46>
 8014332:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014334:	1ac0      	subs	r0, r0, r3
 8014336:	2300      	movs	r3, #0
 8014338:	4602      	mov	r2, r0
 801433a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801433c:	6a21      	ldr	r1, [r4, #32]
 801433e:	4628      	mov	r0, r5
 8014340:	47b0      	blx	r6
 8014342:	1c43      	adds	r3, r0, #1
 8014344:	89a3      	ldrh	r3, [r4, #12]
 8014346:	d106      	bne.n	8014356 <__sflush_r+0x66>
 8014348:	6829      	ldr	r1, [r5, #0]
 801434a:	291d      	cmp	r1, #29
 801434c:	d82c      	bhi.n	80143a8 <__sflush_r+0xb8>
 801434e:	4a2a      	ldr	r2, [pc, #168]	; (80143f8 <__sflush_r+0x108>)
 8014350:	40ca      	lsrs	r2, r1
 8014352:	07d6      	lsls	r6, r2, #31
 8014354:	d528      	bpl.n	80143a8 <__sflush_r+0xb8>
 8014356:	2200      	movs	r2, #0
 8014358:	6062      	str	r2, [r4, #4]
 801435a:	04d9      	lsls	r1, r3, #19
 801435c:	6922      	ldr	r2, [r4, #16]
 801435e:	6022      	str	r2, [r4, #0]
 8014360:	d504      	bpl.n	801436c <__sflush_r+0x7c>
 8014362:	1c42      	adds	r2, r0, #1
 8014364:	d101      	bne.n	801436a <__sflush_r+0x7a>
 8014366:	682b      	ldr	r3, [r5, #0]
 8014368:	b903      	cbnz	r3, 801436c <__sflush_r+0x7c>
 801436a:	6560      	str	r0, [r4, #84]	; 0x54
 801436c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801436e:	602f      	str	r7, [r5, #0]
 8014370:	2900      	cmp	r1, #0
 8014372:	d0ca      	beq.n	801430a <__sflush_r+0x1a>
 8014374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014378:	4299      	cmp	r1, r3
 801437a:	d002      	beq.n	8014382 <__sflush_r+0x92>
 801437c:	4628      	mov	r0, r5
 801437e:	f7ff fcd1 	bl	8013d24 <_free_r>
 8014382:	2000      	movs	r0, #0
 8014384:	6360      	str	r0, [r4, #52]	; 0x34
 8014386:	e7c1      	b.n	801430c <__sflush_r+0x1c>
 8014388:	6a21      	ldr	r1, [r4, #32]
 801438a:	2301      	movs	r3, #1
 801438c:	4628      	mov	r0, r5
 801438e:	47b0      	blx	r6
 8014390:	1c41      	adds	r1, r0, #1
 8014392:	d1c7      	bne.n	8014324 <__sflush_r+0x34>
 8014394:	682b      	ldr	r3, [r5, #0]
 8014396:	2b00      	cmp	r3, #0
 8014398:	d0c4      	beq.n	8014324 <__sflush_r+0x34>
 801439a:	2b1d      	cmp	r3, #29
 801439c:	d001      	beq.n	80143a2 <__sflush_r+0xb2>
 801439e:	2b16      	cmp	r3, #22
 80143a0:	d101      	bne.n	80143a6 <__sflush_r+0xb6>
 80143a2:	602f      	str	r7, [r5, #0]
 80143a4:	e7b1      	b.n	801430a <__sflush_r+0x1a>
 80143a6:	89a3      	ldrh	r3, [r4, #12]
 80143a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80143ac:	81a3      	strh	r3, [r4, #12]
 80143ae:	e7ad      	b.n	801430c <__sflush_r+0x1c>
 80143b0:	690f      	ldr	r7, [r1, #16]
 80143b2:	2f00      	cmp	r7, #0
 80143b4:	d0a9      	beq.n	801430a <__sflush_r+0x1a>
 80143b6:	0793      	lsls	r3, r2, #30
 80143b8:	680e      	ldr	r6, [r1, #0]
 80143ba:	bf08      	it	eq
 80143bc:	694b      	ldreq	r3, [r1, #20]
 80143be:	600f      	str	r7, [r1, #0]
 80143c0:	bf18      	it	ne
 80143c2:	2300      	movne	r3, #0
 80143c4:	eba6 0807 	sub.w	r8, r6, r7
 80143c8:	608b      	str	r3, [r1, #8]
 80143ca:	f1b8 0f00 	cmp.w	r8, #0
 80143ce:	dd9c      	ble.n	801430a <__sflush_r+0x1a>
 80143d0:	6a21      	ldr	r1, [r4, #32]
 80143d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80143d4:	4643      	mov	r3, r8
 80143d6:	463a      	mov	r2, r7
 80143d8:	4628      	mov	r0, r5
 80143da:	47b0      	blx	r6
 80143dc:	2800      	cmp	r0, #0
 80143de:	dc06      	bgt.n	80143ee <__sflush_r+0xfe>
 80143e0:	89a3      	ldrh	r3, [r4, #12]
 80143e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80143e6:	81a3      	strh	r3, [r4, #12]
 80143e8:	f04f 30ff 	mov.w	r0, #4294967295
 80143ec:	e78e      	b.n	801430c <__sflush_r+0x1c>
 80143ee:	4407      	add	r7, r0
 80143f0:	eba8 0800 	sub.w	r8, r8, r0
 80143f4:	e7e9      	b.n	80143ca <__sflush_r+0xda>
 80143f6:	bf00      	nop
 80143f8:	20400001 	.word	0x20400001

080143fc <_fflush_r>:
 80143fc:	b538      	push	{r3, r4, r5, lr}
 80143fe:	690b      	ldr	r3, [r1, #16]
 8014400:	4605      	mov	r5, r0
 8014402:	460c      	mov	r4, r1
 8014404:	b913      	cbnz	r3, 801440c <_fflush_r+0x10>
 8014406:	2500      	movs	r5, #0
 8014408:	4628      	mov	r0, r5
 801440a:	bd38      	pop	{r3, r4, r5, pc}
 801440c:	b118      	cbz	r0, 8014416 <_fflush_r+0x1a>
 801440e:	6983      	ldr	r3, [r0, #24]
 8014410:	b90b      	cbnz	r3, 8014416 <_fflush_r+0x1a>
 8014412:	f7ff fb9b 	bl	8013b4c <__sinit>
 8014416:	4b14      	ldr	r3, [pc, #80]	; (8014468 <_fflush_r+0x6c>)
 8014418:	429c      	cmp	r4, r3
 801441a:	d11b      	bne.n	8014454 <_fflush_r+0x58>
 801441c:	686c      	ldr	r4, [r5, #4]
 801441e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d0ef      	beq.n	8014406 <_fflush_r+0xa>
 8014426:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014428:	07d0      	lsls	r0, r2, #31
 801442a:	d404      	bmi.n	8014436 <_fflush_r+0x3a>
 801442c:	0599      	lsls	r1, r3, #22
 801442e:	d402      	bmi.n	8014436 <_fflush_r+0x3a>
 8014430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014432:	f7ff fc4e 	bl	8013cd2 <__retarget_lock_acquire_recursive>
 8014436:	4628      	mov	r0, r5
 8014438:	4621      	mov	r1, r4
 801443a:	f7ff ff59 	bl	80142f0 <__sflush_r>
 801443e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014440:	07da      	lsls	r2, r3, #31
 8014442:	4605      	mov	r5, r0
 8014444:	d4e0      	bmi.n	8014408 <_fflush_r+0xc>
 8014446:	89a3      	ldrh	r3, [r4, #12]
 8014448:	059b      	lsls	r3, r3, #22
 801444a:	d4dd      	bmi.n	8014408 <_fflush_r+0xc>
 801444c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801444e:	f7ff fc41 	bl	8013cd4 <__retarget_lock_release_recursive>
 8014452:	e7d9      	b.n	8014408 <_fflush_r+0xc>
 8014454:	4b05      	ldr	r3, [pc, #20]	; (801446c <_fflush_r+0x70>)
 8014456:	429c      	cmp	r4, r3
 8014458:	d101      	bne.n	801445e <_fflush_r+0x62>
 801445a:	68ac      	ldr	r4, [r5, #8]
 801445c:	e7df      	b.n	801441e <_fflush_r+0x22>
 801445e:	4b04      	ldr	r3, [pc, #16]	; (8014470 <_fflush_r+0x74>)
 8014460:	429c      	cmp	r4, r3
 8014462:	bf08      	it	eq
 8014464:	68ec      	ldreq	r4, [r5, #12]
 8014466:	e7da      	b.n	801441e <_fflush_r+0x22>
 8014468:	0801594c 	.word	0x0801594c
 801446c:	0801596c 	.word	0x0801596c
 8014470:	0801592c 	.word	0x0801592c

08014474 <fiprintf>:
 8014474:	b40e      	push	{r1, r2, r3}
 8014476:	b503      	push	{r0, r1, lr}
 8014478:	4601      	mov	r1, r0
 801447a:	ab03      	add	r3, sp, #12
 801447c:	4805      	ldr	r0, [pc, #20]	; (8014494 <fiprintf+0x20>)
 801447e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014482:	6800      	ldr	r0, [r0, #0]
 8014484:	9301      	str	r3, [sp, #4]
 8014486:	f000 f9ab 	bl	80147e0 <_vfiprintf_r>
 801448a:	b002      	add	sp, #8
 801448c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014490:	b003      	add	sp, #12
 8014492:	4770      	bx	lr
 8014494:	200002b0 	.word	0x200002b0

08014498 <_lseek_r>:
 8014498:	b538      	push	{r3, r4, r5, lr}
 801449a:	4d07      	ldr	r5, [pc, #28]	; (80144b8 <_lseek_r+0x20>)
 801449c:	4604      	mov	r4, r0
 801449e:	4608      	mov	r0, r1
 80144a0:	4611      	mov	r1, r2
 80144a2:	2200      	movs	r2, #0
 80144a4:	602a      	str	r2, [r5, #0]
 80144a6:	461a      	mov	r2, r3
 80144a8:	f7ee f8ca 	bl	8002640 <_lseek>
 80144ac:	1c43      	adds	r3, r0, #1
 80144ae:	d102      	bne.n	80144b6 <_lseek_r+0x1e>
 80144b0:	682b      	ldr	r3, [r5, #0]
 80144b2:	b103      	cbz	r3, 80144b6 <_lseek_r+0x1e>
 80144b4:	6023      	str	r3, [r4, #0]
 80144b6:	bd38      	pop	{r3, r4, r5, pc}
 80144b8:	2000cc2c 	.word	0x2000cc2c

080144bc <__malloc_lock>:
 80144bc:	4801      	ldr	r0, [pc, #4]	; (80144c4 <__malloc_lock+0x8>)
 80144be:	f7ff bc08 	b.w	8013cd2 <__retarget_lock_acquire_recursive>
 80144c2:	bf00      	nop
 80144c4:	2000cc20 	.word	0x2000cc20

080144c8 <__malloc_unlock>:
 80144c8:	4801      	ldr	r0, [pc, #4]	; (80144d0 <__malloc_unlock+0x8>)
 80144ca:	f7ff bc03 	b.w	8013cd4 <__retarget_lock_release_recursive>
 80144ce:	bf00      	nop
 80144d0:	2000cc20 	.word	0x2000cc20

080144d4 <__ssputs_r>:
 80144d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144d8:	688e      	ldr	r6, [r1, #8]
 80144da:	429e      	cmp	r6, r3
 80144dc:	4682      	mov	sl, r0
 80144de:	460c      	mov	r4, r1
 80144e0:	4690      	mov	r8, r2
 80144e2:	461f      	mov	r7, r3
 80144e4:	d838      	bhi.n	8014558 <__ssputs_r+0x84>
 80144e6:	898a      	ldrh	r2, [r1, #12]
 80144e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80144ec:	d032      	beq.n	8014554 <__ssputs_r+0x80>
 80144ee:	6825      	ldr	r5, [r4, #0]
 80144f0:	6909      	ldr	r1, [r1, #16]
 80144f2:	eba5 0901 	sub.w	r9, r5, r1
 80144f6:	6965      	ldr	r5, [r4, #20]
 80144f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80144fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014500:	3301      	adds	r3, #1
 8014502:	444b      	add	r3, r9
 8014504:	106d      	asrs	r5, r5, #1
 8014506:	429d      	cmp	r5, r3
 8014508:	bf38      	it	cc
 801450a:	461d      	movcc	r5, r3
 801450c:	0553      	lsls	r3, r2, #21
 801450e:	d531      	bpl.n	8014574 <__ssputs_r+0xa0>
 8014510:	4629      	mov	r1, r5
 8014512:	f7ff fc73 	bl	8013dfc <_malloc_r>
 8014516:	4606      	mov	r6, r0
 8014518:	b950      	cbnz	r0, 8014530 <__ssputs_r+0x5c>
 801451a:	230c      	movs	r3, #12
 801451c:	f8ca 3000 	str.w	r3, [sl]
 8014520:	89a3      	ldrh	r3, [r4, #12]
 8014522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014526:	81a3      	strh	r3, [r4, #12]
 8014528:	f04f 30ff 	mov.w	r0, #4294967295
 801452c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014530:	6921      	ldr	r1, [r4, #16]
 8014532:	464a      	mov	r2, r9
 8014534:	f7ff fbe0 	bl	8013cf8 <memcpy>
 8014538:	89a3      	ldrh	r3, [r4, #12]
 801453a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801453e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014542:	81a3      	strh	r3, [r4, #12]
 8014544:	6126      	str	r6, [r4, #16]
 8014546:	6165      	str	r5, [r4, #20]
 8014548:	444e      	add	r6, r9
 801454a:	eba5 0509 	sub.w	r5, r5, r9
 801454e:	6026      	str	r6, [r4, #0]
 8014550:	60a5      	str	r5, [r4, #8]
 8014552:	463e      	mov	r6, r7
 8014554:	42be      	cmp	r6, r7
 8014556:	d900      	bls.n	801455a <__ssputs_r+0x86>
 8014558:	463e      	mov	r6, r7
 801455a:	6820      	ldr	r0, [r4, #0]
 801455c:	4632      	mov	r2, r6
 801455e:	4641      	mov	r1, r8
 8014560:	f000 fd40 	bl	8014fe4 <memmove>
 8014564:	68a3      	ldr	r3, [r4, #8]
 8014566:	1b9b      	subs	r3, r3, r6
 8014568:	60a3      	str	r3, [r4, #8]
 801456a:	6823      	ldr	r3, [r4, #0]
 801456c:	4433      	add	r3, r6
 801456e:	6023      	str	r3, [r4, #0]
 8014570:	2000      	movs	r0, #0
 8014572:	e7db      	b.n	801452c <__ssputs_r+0x58>
 8014574:	462a      	mov	r2, r5
 8014576:	f000 fd4f 	bl	8015018 <_realloc_r>
 801457a:	4606      	mov	r6, r0
 801457c:	2800      	cmp	r0, #0
 801457e:	d1e1      	bne.n	8014544 <__ssputs_r+0x70>
 8014580:	6921      	ldr	r1, [r4, #16]
 8014582:	4650      	mov	r0, sl
 8014584:	f7ff fbce 	bl	8013d24 <_free_r>
 8014588:	e7c7      	b.n	801451a <__ssputs_r+0x46>
	...

0801458c <_svfiprintf_r>:
 801458c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014590:	4698      	mov	r8, r3
 8014592:	898b      	ldrh	r3, [r1, #12]
 8014594:	061b      	lsls	r3, r3, #24
 8014596:	b09d      	sub	sp, #116	; 0x74
 8014598:	4607      	mov	r7, r0
 801459a:	460d      	mov	r5, r1
 801459c:	4614      	mov	r4, r2
 801459e:	d50e      	bpl.n	80145be <_svfiprintf_r+0x32>
 80145a0:	690b      	ldr	r3, [r1, #16]
 80145a2:	b963      	cbnz	r3, 80145be <_svfiprintf_r+0x32>
 80145a4:	2140      	movs	r1, #64	; 0x40
 80145a6:	f7ff fc29 	bl	8013dfc <_malloc_r>
 80145aa:	6028      	str	r0, [r5, #0]
 80145ac:	6128      	str	r0, [r5, #16]
 80145ae:	b920      	cbnz	r0, 80145ba <_svfiprintf_r+0x2e>
 80145b0:	230c      	movs	r3, #12
 80145b2:	603b      	str	r3, [r7, #0]
 80145b4:	f04f 30ff 	mov.w	r0, #4294967295
 80145b8:	e0d1      	b.n	801475e <_svfiprintf_r+0x1d2>
 80145ba:	2340      	movs	r3, #64	; 0x40
 80145bc:	616b      	str	r3, [r5, #20]
 80145be:	2300      	movs	r3, #0
 80145c0:	9309      	str	r3, [sp, #36]	; 0x24
 80145c2:	2320      	movs	r3, #32
 80145c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80145c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80145cc:	2330      	movs	r3, #48	; 0x30
 80145ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014778 <_svfiprintf_r+0x1ec>
 80145d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80145d6:	f04f 0901 	mov.w	r9, #1
 80145da:	4623      	mov	r3, r4
 80145dc:	469a      	mov	sl, r3
 80145de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80145e2:	b10a      	cbz	r2, 80145e8 <_svfiprintf_r+0x5c>
 80145e4:	2a25      	cmp	r2, #37	; 0x25
 80145e6:	d1f9      	bne.n	80145dc <_svfiprintf_r+0x50>
 80145e8:	ebba 0b04 	subs.w	fp, sl, r4
 80145ec:	d00b      	beq.n	8014606 <_svfiprintf_r+0x7a>
 80145ee:	465b      	mov	r3, fp
 80145f0:	4622      	mov	r2, r4
 80145f2:	4629      	mov	r1, r5
 80145f4:	4638      	mov	r0, r7
 80145f6:	f7ff ff6d 	bl	80144d4 <__ssputs_r>
 80145fa:	3001      	adds	r0, #1
 80145fc:	f000 80aa 	beq.w	8014754 <_svfiprintf_r+0x1c8>
 8014600:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014602:	445a      	add	r2, fp
 8014604:	9209      	str	r2, [sp, #36]	; 0x24
 8014606:	f89a 3000 	ldrb.w	r3, [sl]
 801460a:	2b00      	cmp	r3, #0
 801460c:	f000 80a2 	beq.w	8014754 <_svfiprintf_r+0x1c8>
 8014610:	2300      	movs	r3, #0
 8014612:	f04f 32ff 	mov.w	r2, #4294967295
 8014616:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801461a:	f10a 0a01 	add.w	sl, sl, #1
 801461e:	9304      	str	r3, [sp, #16]
 8014620:	9307      	str	r3, [sp, #28]
 8014622:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014626:	931a      	str	r3, [sp, #104]	; 0x68
 8014628:	4654      	mov	r4, sl
 801462a:	2205      	movs	r2, #5
 801462c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014630:	4851      	ldr	r0, [pc, #324]	; (8014778 <_svfiprintf_r+0x1ec>)
 8014632:	f7eb fde5 	bl	8000200 <memchr>
 8014636:	9a04      	ldr	r2, [sp, #16]
 8014638:	b9d8      	cbnz	r0, 8014672 <_svfiprintf_r+0xe6>
 801463a:	06d0      	lsls	r0, r2, #27
 801463c:	bf44      	itt	mi
 801463e:	2320      	movmi	r3, #32
 8014640:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014644:	0711      	lsls	r1, r2, #28
 8014646:	bf44      	itt	mi
 8014648:	232b      	movmi	r3, #43	; 0x2b
 801464a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801464e:	f89a 3000 	ldrb.w	r3, [sl]
 8014652:	2b2a      	cmp	r3, #42	; 0x2a
 8014654:	d015      	beq.n	8014682 <_svfiprintf_r+0xf6>
 8014656:	9a07      	ldr	r2, [sp, #28]
 8014658:	4654      	mov	r4, sl
 801465a:	2000      	movs	r0, #0
 801465c:	f04f 0c0a 	mov.w	ip, #10
 8014660:	4621      	mov	r1, r4
 8014662:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014666:	3b30      	subs	r3, #48	; 0x30
 8014668:	2b09      	cmp	r3, #9
 801466a:	d94e      	bls.n	801470a <_svfiprintf_r+0x17e>
 801466c:	b1b0      	cbz	r0, 801469c <_svfiprintf_r+0x110>
 801466e:	9207      	str	r2, [sp, #28]
 8014670:	e014      	b.n	801469c <_svfiprintf_r+0x110>
 8014672:	eba0 0308 	sub.w	r3, r0, r8
 8014676:	fa09 f303 	lsl.w	r3, r9, r3
 801467a:	4313      	orrs	r3, r2
 801467c:	9304      	str	r3, [sp, #16]
 801467e:	46a2      	mov	sl, r4
 8014680:	e7d2      	b.n	8014628 <_svfiprintf_r+0x9c>
 8014682:	9b03      	ldr	r3, [sp, #12]
 8014684:	1d19      	adds	r1, r3, #4
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	9103      	str	r1, [sp, #12]
 801468a:	2b00      	cmp	r3, #0
 801468c:	bfbb      	ittet	lt
 801468e:	425b      	neglt	r3, r3
 8014690:	f042 0202 	orrlt.w	r2, r2, #2
 8014694:	9307      	strge	r3, [sp, #28]
 8014696:	9307      	strlt	r3, [sp, #28]
 8014698:	bfb8      	it	lt
 801469a:	9204      	strlt	r2, [sp, #16]
 801469c:	7823      	ldrb	r3, [r4, #0]
 801469e:	2b2e      	cmp	r3, #46	; 0x2e
 80146a0:	d10c      	bne.n	80146bc <_svfiprintf_r+0x130>
 80146a2:	7863      	ldrb	r3, [r4, #1]
 80146a4:	2b2a      	cmp	r3, #42	; 0x2a
 80146a6:	d135      	bne.n	8014714 <_svfiprintf_r+0x188>
 80146a8:	9b03      	ldr	r3, [sp, #12]
 80146aa:	1d1a      	adds	r2, r3, #4
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	9203      	str	r2, [sp, #12]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	bfb8      	it	lt
 80146b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80146b8:	3402      	adds	r4, #2
 80146ba:	9305      	str	r3, [sp, #20]
 80146bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014788 <_svfiprintf_r+0x1fc>
 80146c0:	7821      	ldrb	r1, [r4, #0]
 80146c2:	2203      	movs	r2, #3
 80146c4:	4650      	mov	r0, sl
 80146c6:	f7eb fd9b 	bl	8000200 <memchr>
 80146ca:	b140      	cbz	r0, 80146de <_svfiprintf_r+0x152>
 80146cc:	2340      	movs	r3, #64	; 0x40
 80146ce:	eba0 000a 	sub.w	r0, r0, sl
 80146d2:	fa03 f000 	lsl.w	r0, r3, r0
 80146d6:	9b04      	ldr	r3, [sp, #16]
 80146d8:	4303      	orrs	r3, r0
 80146da:	3401      	adds	r4, #1
 80146dc:	9304      	str	r3, [sp, #16]
 80146de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80146e2:	4826      	ldr	r0, [pc, #152]	; (801477c <_svfiprintf_r+0x1f0>)
 80146e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80146e8:	2206      	movs	r2, #6
 80146ea:	f7eb fd89 	bl	8000200 <memchr>
 80146ee:	2800      	cmp	r0, #0
 80146f0:	d038      	beq.n	8014764 <_svfiprintf_r+0x1d8>
 80146f2:	4b23      	ldr	r3, [pc, #140]	; (8014780 <_svfiprintf_r+0x1f4>)
 80146f4:	bb1b      	cbnz	r3, 801473e <_svfiprintf_r+0x1b2>
 80146f6:	9b03      	ldr	r3, [sp, #12]
 80146f8:	3307      	adds	r3, #7
 80146fa:	f023 0307 	bic.w	r3, r3, #7
 80146fe:	3308      	adds	r3, #8
 8014700:	9303      	str	r3, [sp, #12]
 8014702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014704:	4433      	add	r3, r6
 8014706:	9309      	str	r3, [sp, #36]	; 0x24
 8014708:	e767      	b.n	80145da <_svfiprintf_r+0x4e>
 801470a:	fb0c 3202 	mla	r2, ip, r2, r3
 801470e:	460c      	mov	r4, r1
 8014710:	2001      	movs	r0, #1
 8014712:	e7a5      	b.n	8014660 <_svfiprintf_r+0xd4>
 8014714:	2300      	movs	r3, #0
 8014716:	3401      	adds	r4, #1
 8014718:	9305      	str	r3, [sp, #20]
 801471a:	4619      	mov	r1, r3
 801471c:	f04f 0c0a 	mov.w	ip, #10
 8014720:	4620      	mov	r0, r4
 8014722:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014726:	3a30      	subs	r2, #48	; 0x30
 8014728:	2a09      	cmp	r2, #9
 801472a:	d903      	bls.n	8014734 <_svfiprintf_r+0x1a8>
 801472c:	2b00      	cmp	r3, #0
 801472e:	d0c5      	beq.n	80146bc <_svfiprintf_r+0x130>
 8014730:	9105      	str	r1, [sp, #20]
 8014732:	e7c3      	b.n	80146bc <_svfiprintf_r+0x130>
 8014734:	fb0c 2101 	mla	r1, ip, r1, r2
 8014738:	4604      	mov	r4, r0
 801473a:	2301      	movs	r3, #1
 801473c:	e7f0      	b.n	8014720 <_svfiprintf_r+0x194>
 801473e:	ab03      	add	r3, sp, #12
 8014740:	9300      	str	r3, [sp, #0]
 8014742:	462a      	mov	r2, r5
 8014744:	4b0f      	ldr	r3, [pc, #60]	; (8014784 <_svfiprintf_r+0x1f8>)
 8014746:	a904      	add	r1, sp, #16
 8014748:	4638      	mov	r0, r7
 801474a:	f3af 8000 	nop.w
 801474e:	1c42      	adds	r2, r0, #1
 8014750:	4606      	mov	r6, r0
 8014752:	d1d6      	bne.n	8014702 <_svfiprintf_r+0x176>
 8014754:	89ab      	ldrh	r3, [r5, #12]
 8014756:	065b      	lsls	r3, r3, #25
 8014758:	f53f af2c 	bmi.w	80145b4 <_svfiprintf_r+0x28>
 801475c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801475e:	b01d      	add	sp, #116	; 0x74
 8014760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014764:	ab03      	add	r3, sp, #12
 8014766:	9300      	str	r3, [sp, #0]
 8014768:	462a      	mov	r2, r5
 801476a:	4b06      	ldr	r3, [pc, #24]	; (8014784 <_svfiprintf_r+0x1f8>)
 801476c:	a904      	add	r1, sp, #16
 801476e:	4638      	mov	r0, r7
 8014770:	f000 f9d4 	bl	8014b1c <_printf_i>
 8014774:	e7eb      	b.n	801474e <_svfiprintf_r+0x1c2>
 8014776:	bf00      	nop
 8014778:	08015b41 	.word	0x08015b41
 801477c:	08015b4b 	.word	0x08015b4b
 8014780:	00000000 	.word	0x00000000
 8014784:	080144d5 	.word	0x080144d5
 8014788:	08015b47 	.word	0x08015b47

0801478c <__sfputc_r>:
 801478c:	6893      	ldr	r3, [r2, #8]
 801478e:	3b01      	subs	r3, #1
 8014790:	2b00      	cmp	r3, #0
 8014792:	b410      	push	{r4}
 8014794:	6093      	str	r3, [r2, #8]
 8014796:	da08      	bge.n	80147aa <__sfputc_r+0x1e>
 8014798:	6994      	ldr	r4, [r2, #24]
 801479a:	42a3      	cmp	r3, r4
 801479c:	db01      	blt.n	80147a2 <__sfputc_r+0x16>
 801479e:	290a      	cmp	r1, #10
 80147a0:	d103      	bne.n	80147aa <__sfputc_r+0x1e>
 80147a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147a6:	f000 baf1 	b.w	8014d8c <__swbuf_r>
 80147aa:	6813      	ldr	r3, [r2, #0]
 80147ac:	1c58      	adds	r0, r3, #1
 80147ae:	6010      	str	r0, [r2, #0]
 80147b0:	7019      	strb	r1, [r3, #0]
 80147b2:	4608      	mov	r0, r1
 80147b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147b8:	4770      	bx	lr

080147ba <__sfputs_r>:
 80147ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147bc:	4606      	mov	r6, r0
 80147be:	460f      	mov	r7, r1
 80147c0:	4614      	mov	r4, r2
 80147c2:	18d5      	adds	r5, r2, r3
 80147c4:	42ac      	cmp	r4, r5
 80147c6:	d101      	bne.n	80147cc <__sfputs_r+0x12>
 80147c8:	2000      	movs	r0, #0
 80147ca:	e007      	b.n	80147dc <__sfputs_r+0x22>
 80147cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80147d0:	463a      	mov	r2, r7
 80147d2:	4630      	mov	r0, r6
 80147d4:	f7ff ffda 	bl	801478c <__sfputc_r>
 80147d8:	1c43      	adds	r3, r0, #1
 80147da:	d1f3      	bne.n	80147c4 <__sfputs_r+0xa>
 80147dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080147e0 <_vfiprintf_r>:
 80147e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147e4:	460d      	mov	r5, r1
 80147e6:	b09d      	sub	sp, #116	; 0x74
 80147e8:	4614      	mov	r4, r2
 80147ea:	4698      	mov	r8, r3
 80147ec:	4606      	mov	r6, r0
 80147ee:	b118      	cbz	r0, 80147f8 <_vfiprintf_r+0x18>
 80147f0:	6983      	ldr	r3, [r0, #24]
 80147f2:	b90b      	cbnz	r3, 80147f8 <_vfiprintf_r+0x18>
 80147f4:	f7ff f9aa 	bl	8013b4c <__sinit>
 80147f8:	4b89      	ldr	r3, [pc, #548]	; (8014a20 <_vfiprintf_r+0x240>)
 80147fa:	429d      	cmp	r5, r3
 80147fc:	d11b      	bne.n	8014836 <_vfiprintf_r+0x56>
 80147fe:	6875      	ldr	r5, [r6, #4]
 8014800:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014802:	07d9      	lsls	r1, r3, #31
 8014804:	d405      	bmi.n	8014812 <_vfiprintf_r+0x32>
 8014806:	89ab      	ldrh	r3, [r5, #12]
 8014808:	059a      	lsls	r2, r3, #22
 801480a:	d402      	bmi.n	8014812 <_vfiprintf_r+0x32>
 801480c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801480e:	f7ff fa60 	bl	8013cd2 <__retarget_lock_acquire_recursive>
 8014812:	89ab      	ldrh	r3, [r5, #12]
 8014814:	071b      	lsls	r3, r3, #28
 8014816:	d501      	bpl.n	801481c <_vfiprintf_r+0x3c>
 8014818:	692b      	ldr	r3, [r5, #16]
 801481a:	b9eb      	cbnz	r3, 8014858 <_vfiprintf_r+0x78>
 801481c:	4629      	mov	r1, r5
 801481e:	4630      	mov	r0, r6
 8014820:	f000 fb06 	bl	8014e30 <__swsetup_r>
 8014824:	b1c0      	cbz	r0, 8014858 <_vfiprintf_r+0x78>
 8014826:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014828:	07dc      	lsls	r4, r3, #31
 801482a:	d50e      	bpl.n	801484a <_vfiprintf_r+0x6a>
 801482c:	f04f 30ff 	mov.w	r0, #4294967295
 8014830:	b01d      	add	sp, #116	; 0x74
 8014832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014836:	4b7b      	ldr	r3, [pc, #492]	; (8014a24 <_vfiprintf_r+0x244>)
 8014838:	429d      	cmp	r5, r3
 801483a:	d101      	bne.n	8014840 <_vfiprintf_r+0x60>
 801483c:	68b5      	ldr	r5, [r6, #8]
 801483e:	e7df      	b.n	8014800 <_vfiprintf_r+0x20>
 8014840:	4b79      	ldr	r3, [pc, #484]	; (8014a28 <_vfiprintf_r+0x248>)
 8014842:	429d      	cmp	r5, r3
 8014844:	bf08      	it	eq
 8014846:	68f5      	ldreq	r5, [r6, #12]
 8014848:	e7da      	b.n	8014800 <_vfiprintf_r+0x20>
 801484a:	89ab      	ldrh	r3, [r5, #12]
 801484c:	0598      	lsls	r0, r3, #22
 801484e:	d4ed      	bmi.n	801482c <_vfiprintf_r+0x4c>
 8014850:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014852:	f7ff fa3f 	bl	8013cd4 <__retarget_lock_release_recursive>
 8014856:	e7e9      	b.n	801482c <_vfiprintf_r+0x4c>
 8014858:	2300      	movs	r3, #0
 801485a:	9309      	str	r3, [sp, #36]	; 0x24
 801485c:	2320      	movs	r3, #32
 801485e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014862:	f8cd 800c 	str.w	r8, [sp, #12]
 8014866:	2330      	movs	r3, #48	; 0x30
 8014868:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014a2c <_vfiprintf_r+0x24c>
 801486c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014870:	f04f 0901 	mov.w	r9, #1
 8014874:	4623      	mov	r3, r4
 8014876:	469a      	mov	sl, r3
 8014878:	f813 2b01 	ldrb.w	r2, [r3], #1
 801487c:	b10a      	cbz	r2, 8014882 <_vfiprintf_r+0xa2>
 801487e:	2a25      	cmp	r2, #37	; 0x25
 8014880:	d1f9      	bne.n	8014876 <_vfiprintf_r+0x96>
 8014882:	ebba 0b04 	subs.w	fp, sl, r4
 8014886:	d00b      	beq.n	80148a0 <_vfiprintf_r+0xc0>
 8014888:	465b      	mov	r3, fp
 801488a:	4622      	mov	r2, r4
 801488c:	4629      	mov	r1, r5
 801488e:	4630      	mov	r0, r6
 8014890:	f7ff ff93 	bl	80147ba <__sfputs_r>
 8014894:	3001      	adds	r0, #1
 8014896:	f000 80aa 	beq.w	80149ee <_vfiprintf_r+0x20e>
 801489a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801489c:	445a      	add	r2, fp
 801489e:	9209      	str	r2, [sp, #36]	; 0x24
 80148a0:	f89a 3000 	ldrb.w	r3, [sl]
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	f000 80a2 	beq.w	80149ee <_vfiprintf_r+0x20e>
 80148aa:	2300      	movs	r3, #0
 80148ac:	f04f 32ff 	mov.w	r2, #4294967295
 80148b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80148b4:	f10a 0a01 	add.w	sl, sl, #1
 80148b8:	9304      	str	r3, [sp, #16]
 80148ba:	9307      	str	r3, [sp, #28]
 80148bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80148c0:	931a      	str	r3, [sp, #104]	; 0x68
 80148c2:	4654      	mov	r4, sl
 80148c4:	2205      	movs	r2, #5
 80148c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148ca:	4858      	ldr	r0, [pc, #352]	; (8014a2c <_vfiprintf_r+0x24c>)
 80148cc:	f7eb fc98 	bl	8000200 <memchr>
 80148d0:	9a04      	ldr	r2, [sp, #16]
 80148d2:	b9d8      	cbnz	r0, 801490c <_vfiprintf_r+0x12c>
 80148d4:	06d1      	lsls	r1, r2, #27
 80148d6:	bf44      	itt	mi
 80148d8:	2320      	movmi	r3, #32
 80148da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80148de:	0713      	lsls	r3, r2, #28
 80148e0:	bf44      	itt	mi
 80148e2:	232b      	movmi	r3, #43	; 0x2b
 80148e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80148e8:	f89a 3000 	ldrb.w	r3, [sl]
 80148ec:	2b2a      	cmp	r3, #42	; 0x2a
 80148ee:	d015      	beq.n	801491c <_vfiprintf_r+0x13c>
 80148f0:	9a07      	ldr	r2, [sp, #28]
 80148f2:	4654      	mov	r4, sl
 80148f4:	2000      	movs	r0, #0
 80148f6:	f04f 0c0a 	mov.w	ip, #10
 80148fa:	4621      	mov	r1, r4
 80148fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014900:	3b30      	subs	r3, #48	; 0x30
 8014902:	2b09      	cmp	r3, #9
 8014904:	d94e      	bls.n	80149a4 <_vfiprintf_r+0x1c4>
 8014906:	b1b0      	cbz	r0, 8014936 <_vfiprintf_r+0x156>
 8014908:	9207      	str	r2, [sp, #28]
 801490a:	e014      	b.n	8014936 <_vfiprintf_r+0x156>
 801490c:	eba0 0308 	sub.w	r3, r0, r8
 8014910:	fa09 f303 	lsl.w	r3, r9, r3
 8014914:	4313      	orrs	r3, r2
 8014916:	9304      	str	r3, [sp, #16]
 8014918:	46a2      	mov	sl, r4
 801491a:	e7d2      	b.n	80148c2 <_vfiprintf_r+0xe2>
 801491c:	9b03      	ldr	r3, [sp, #12]
 801491e:	1d19      	adds	r1, r3, #4
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	9103      	str	r1, [sp, #12]
 8014924:	2b00      	cmp	r3, #0
 8014926:	bfbb      	ittet	lt
 8014928:	425b      	neglt	r3, r3
 801492a:	f042 0202 	orrlt.w	r2, r2, #2
 801492e:	9307      	strge	r3, [sp, #28]
 8014930:	9307      	strlt	r3, [sp, #28]
 8014932:	bfb8      	it	lt
 8014934:	9204      	strlt	r2, [sp, #16]
 8014936:	7823      	ldrb	r3, [r4, #0]
 8014938:	2b2e      	cmp	r3, #46	; 0x2e
 801493a:	d10c      	bne.n	8014956 <_vfiprintf_r+0x176>
 801493c:	7863      	ldrb	r3, [r4, #1]
 801493e:	2b2a      	cmp	r3, #42	; 0x2a
 8014940:	d135      	bne.n	80149ae <_vfiprintf_r+0x1ce>
 8014942:	9b03      	ldr	r3, [sp, #12]
 8014944:	1d1a      	adds	r2, r3, #4
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	9203      	str	r2, [sp, #12]
 801494a:	2b00      	cmp	r3, #0
 801494c:	bfb8      	it	lt
 801494e:	f04f 33ff 	movlt.w	r3, #4294967295
 8014952:	3402      	adds	r4, #2
 8014954:	9305      	str	r3, [sp, #20]
 8014956:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014a3c <_vfiprintf_r+0x25c>
 801495a:	7821      	ldrb	r1, [r4, #0]
 801495c:	2203      	movs	r2, #3
 801495e:	4650      	mov	r0, sl
 8014960:	f7eb fc4e 	bl	8000200 <memchr>
 8014964:	b140      	cbz	r0, 8014978 <_vfiprintf_r+0x198>
 8014966:	2340      	movs	r3, #64	; 0x40
 8014968:	eba0 000a 	sub.w	r0, r0, sl
 801496c:	fa03 f000 	lsl.w	r0, r3, r0
 8014970:	9b04      	ldr	r3, [sp, #16]
 8014972:	4303      	orrs	r3, r0
 8014974:	3401      	adds	r4, #1
 8014976:	9304      	str	r3, [sp, #16]
 8014978:	f814 1b01 	ldrb.w	r1, [r4], #1
 801497c:	482c      	ldr	r0, [pc, #176]	; (8014a30 <_vfiprintf_r+0x250>)
 801497e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014982:	2206      	movs	r2, #6
 8014984:	f7eb fc3c 	bl	8000200 <memchr>
 8014988:	2800      	cmp	r0, #0
 801498a:	d03f      	beq.n	8014a0c <_vfiprintf_r+0x22c>
 801498c:	4b29      	ldr	r3, [pc, #164]	; (8014a34 <_vfiprintf_r+0x254>)
 801498e:	bb1b      	cbnz	r3, 80149d8 <_vfiprintf_r+0x1f8>
 8014990:	9b03      	ldr	r3, [sp, #12]
 8014992:	3307      	adds	r3, #7
 8014994:	f023 0307 	bic.w	r3, r3, #7
 8014998:	3308      	adds	r3, #8
 801499a:	9303      	str	r3, [sp, #12]
 801499c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801499e:	443b      	add	r3, r7
 80149a0:	9309      	str	r3, [sp, #36]	; 0x24
 80149a2:	e767      	b.n	8014874 <_vfiprintf_r+0x94>
 80149a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80149a8:	460c      	mov	r4, r1
 80149aa:	2001      	movs	r0, #1
 80149ac:	e7a5      	b.n	80148fa <_vfiprintf_r+0x11a>
 80149ae:	2300      	movs	r3, #0
 80149b0:	3401      	adds	r4, #1
 80149b2:	9305      	str	r3, [sp, #20]
 80149b4:	4619      	mov	r1, r3
 80149b6:	f04f 0c0a 	mov.w	ip, #10
 80149ba:	4620      	mov	r0, r4
 80149bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80149c0:	3a30      	subs	r2, #48	; 0x30
 80149c2:	2a09      	cmp	r2, #9
 80149c4:	d903      	bls.n	80149ce <_vfiprintf_r+0x1ee>
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d0c5      	beq.n	8014956 <_vfiprintf_r+0x176>
 80149ca:	9105      	str	r1, [sp, #20]
 80149cc:	e7c3      	b.n	8014956 <_vfiprintf_r+0x176>
 80149ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80149d2:	4604      	mov	r4, r0
 80149d4:	2301      	movs	r3, #1
 80149d6:	e7f0      	b.n	80149ba <_vfiprintf_r+0x1da>
 80149d8:	ab03      	add	r3, sp, #12
 80149da:	9300      	str	r3, [sp, #0]
 80149dc:	462a      	mov	r2, r5
 80149de:	4b16      	ldr	r3, [pc, #88]	; (8014a38 <_vfiprintf_r+0x258>)
 80149e0:	a904      	add	r1, sp, #16
 80149e2:	4630      	mov	r0, r6
 80149e4:	f3af 8000 	nop.w
 80149e8:	4607      	mov	r7, r0
 80149ea:	1c78      	adds	r0, r7, #1
 80149ec:	d1d6      	bne.n	801499c <_vfiprintf_r+0x1bc>
 80149ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80149f0:	07d9      	lsls	r1, r3, #31
 80149f2:	d405      	bmi.n	8014a00 <_vfiprintf_r+0x220>
 80149f4:	89ab      	ldrh	r3, [r5, #12]
 80149f6:	059a      	lsls	r2, r3, #22
 80149f8:	d402      	bmi.n	8014a00 <_vfiprintf_r+0x220>
 80149fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80149fc:	f7ff f96a 	bl	8013cd4 <__retarget_lock_release_recursive>
 8014a00:	89ab      	ldrh	r3, [r5, #12]
 8014a02:	065b      	lsls	r3, r3, #25
 8014a04:	f53f af12 	bmi.w	801482c <_vfiprintf_r+0x4c>
 8014a08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014a0a:	e711      	b.n	8014830 <_vfiprintf_r+0x50>
 8014a0c:	ab03      	add	r3, sp, #12
 8014a0e:	9300      	str	r3, [sp, #0]
 8014a10:	462a      	mov	r2, r5
 8014a12:	4b09      	ldr	r3, [pc, #36]	; (8014a38 <_vfiprintf_r+0x258>)
 8014a14:	a904      	add	r1, sp, #16
 8014a16:	4630      	mov	r0, r6
 8014a18:	f000 f880 	bl	8014b1c <_printf_i>
 8014a1c:	e7e4      	b.n	80149e8 <_vfiprintf_r+0x208>
 8014a1e:	bf00      	nop
 8014a20:	0801594c 	.word	0x0801594c
 8014a24:	0801596c 	.word	0x0801596c
 8014a28:	0801592c 	.word	0x0801592c
 8014a2c:	08015b41 	.word	0x08015b41
 8014a30:	08015b4b 	.word	0x08015b4b
 8014a34:	00000000 	.word	0x00000000
 8014a38:	080147bb 	.word	0x080147bb
 8014a3c:	08015b47 	.word	0x08015b47

08014a40 <_printf_common>:
 8014a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a44:	4616      	mov	r6, r2
 8014a46:	4699      	mov	r9, r3
 8014a48:	688a      	ldr	r2, [r1, #8]
 8014a4a:	690b      	ldr	r3, [r1, #16]
 8014a4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014a50:	4293      	cmp	r3, r2
 8014a52:	bfb8      	it	lt
 8014a54:	4613      	movlt	r3, r2
 8014a56:	6033      	str	r3, [r6, #0]
 8014a58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014a5c:	4607      	mov	r7, r0
 8014a5e:	460c      	mov	r4, r1
 8014a60:	b10a      	cbz	r2, 8014a66 <_printf_common+0x26>
 8014a62:	3301      	adds	r3, #1
 8014a64:	6033      	str	r3, [r6, #0]
 8014a66:	6823      	ldr	r3, [r4, #0]
 8014a68:	0699      	lsls	r1, r3, #26
 8014a6a:	bf42      	ittt	mi
 8014a6c:	6833      	ldrmi	r3, [r6, #0]
 8014a6e:	3302      	addmi	r3, #2
 8014a70:	6033      	strmi	r3, [r6, #0]
 8014a72:	6825      	ldr	r5, [r4, #0]
 8014a74:	f015 0506 	ands.w	r5, r5, #6
 8014a78:	d106      	bne.n	8014a88 <_printf_common+0x48>
 8014a7a:	f104 0a19 	add.w	sl, r4, #25
 8014a7e:	68e3      	ldr	r3, [r4, #12]
 8014a80:	6832      	ldr	r2, [r6, #0]
 8014a82:	1a9b      	subs	r3, r3, r2
 8014a84:	42ab      	cmp	r3, r5
 8014a86:	dc26      	bgt.n	8014ad6 <_printf_common+0x96>
 8014a88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014a8c:	1e13      	subs	r3, r2, #0
 8014a8e:	6822      	ldr	r2, [r4, #0]
 8014a90:	bf18      	it	ne
 8014a92:	2301      	movne	r3, #1
 8014a94:	0692      	lsls	r2, r2, #26
 8014a96:	d42b      	bmi.n	8014af0 <_printf_common+0xb0>
 8014a98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014a9c:	4649      	mov	r1, r9
 8014a9e:	4638      	mov	r0, r7
 8014aa0:	47c0      	blx	r8
 8014aa2:	3001      	adds	r0, #1
 8014aa4:	d01e      	beq.n	8014ae4 <_printf_common+0xa4>
 8014aa6:	6823      	ldr	r3, [r4, #0]
 8014aa8:	68e5      	ldr	r5, [r4, #12]
 8014aaa:	6832      	ldr	r2, [r6, #0]
 8014aac:	f003 0306 	and.w	r3, r3, #6
 8014ab0:	2b04      	cmp	r3, #4
 8014ab2:	bf08      	it	eq
 8014ab4:	1aad      	subeq	r5, r5, r2
 8014ab6:	68a3      	ldr	r3, [r4, #8]
 8014ab8:	6922      	ldr	r2, [r4, #16]
 8014aba:	bf0c      	ite	eq
 8014abc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014ac0:	2500      	movne	r5, #0
 8014ac2:	4293      	cmp	r3, r2
 8014ac4:	bfc4      	itt	gt
 8014ac6:	1a9b      	subgt	r3, r3, r2
 8014ac8:	18ed      	addgt	r5, r5, r3
 8014aca:	2600      	movs	r6, #0
 8014acc:	341a      	adds	r4, #26
 8014ace:	42b5      	cmp	r5, r6
 8014ad0:	d11a      	bne.n	8014b08 <_printf_common+0xc8>
 8014ad2:	2000      	movs	r0, #0
 8014ad4:	e008      	b.n	8014ae8 <_printf_common+0xa8>
 8014ad6:	2301      	movs	r3, #1
 8014ad8:	4652      	mov	r2, sl
 8014ada:	4649      	mov	r1, r9
 8014adc:	4638      	mov	r0, r7
 8014ade:	47c0      	blx	r8
 8014ae0:	3001      	adds	r0, #1
 8014ae2:	d103      	bne.n	8014aec <_printf_common+0xac>
 8014ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8014ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014aec:	3501      	adds	r5, #1
 8014aee:	e7c6      	b.n	8014a7e <_printf_common+0x3e>
 8014af0:	18e1      	adds	r1, r4, r3
 8014af2:	1c5a      	adds	r2, r3, #1
 8014af4:	2030      	movs	r0, #48	; 0x30
 8014af6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014afa:	4422      	add	r2, r4
 8014afc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014b00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014b04:	3302      	adds	r3, #2
 8014b06:	e7c7      	b.n	8014a98 <_printf_common+0x58>
 8014b08:	2301      	movs	r3, #1
 8014b0a:	4622      	mov	r2, r4
 8014b0c:	4649      	mov	r1, r9
 8014b0e:	4638      	mov	r0, r7
 8014b10:	47c0      	blx	r8
 8014b12:	3001      	adds	r0, #1
 8014b14:	d0e6      	beq.n	8014ae4 <_printf_common+0xa4>
 8014b16:	3601      	adds	r6, #1
 8014b18:	e7d9      	b.n	8014ace <_printf_common+0x8e>
	...

08014b1c <_printf_i>:
 8014b1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014b20:	7e0f      	ldrb	r7, [r1, #24]
 8014b22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014b24:	2f78      	cmp	r7, #120	; 0x78
 8014b26:	4691      	mov	r9, r2
 8014b28:	4680      	mov	r8, r0
 8014b2a:	460c      	mov	r4, r1
 8014b2c:	469a      	mov	sl, r3
 8014b2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014b32:	d807      	bhi.n	8014b44 <_printf_i+0x28>
 8014b34:	2f62      	cmp	r7, #98	; 0x62
 8014b36:	d80a      	bhi.n	8014b4e <_printf_i+0x32>
 8014b38:	2f00      	cmp	r7, #0
 8014b3a:	f000 80d8 	beq.w	8014cee <_printf_i+0x1d2>
 8014b3e:	2f58      	cmp	r7, #88	; 0x58
 8014b40:	f000 80a3 	beq.w	8014c8a <_printf_i+0x16e>
 8014b44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014b48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014b4c:	e03a      	b.n	8014bc4 <_printf_i+0xa8>
 8014b4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014b52:	2b15      	cmp	r3, #21
 8014b54:	d8f6      	bhi.n	8014b44 <_printf_i+0x28>
 8014b56:	a101      	add	r1, pc, #4	; (adr r1, 8014b5c <_printf_i+0x40>)
 8014b58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014b5c:	08014bb5 	.word	0x08014bb5
 8014b60:	08014bc9 	.word	0x08014bc9
 8014b64:	08014b45 	.word	0x08014b45
 8014b68:	08014b45 	.word	0x08014b45
 8014b6c:	08014b45 	.word	0x08014b45
 8014b70:	08014b45 	.word	0x08014b45
 8014b74:	08014bc9 	.word	0x08014bc9
 8014b78:	08014b45 	.word	0x08014b45
 8014b7c:	08014b45 	.word	0x08014b45
 8014b80:	08014b45 	.word	0x08014b45
 8014b84:	08014b45 	.word	0x08014b45
 8014b88:	08014cd5 	.word	0x08014cd5
 8014b8c:	08014bf9 	.word	0x08014bf9
 8014b90:	08014cb7 	.word	0x08014cb7
 8014b94:	08014b45 	.word	0x08014b45
 8014b98:	08014b45 	.word	0x08014b45
 8014b9c:	08014cf7 	.word	0x08014cf7
 8014ba0:	08014b45 	.word	0x08014b45
 8014ba4:	08014bf9 	.word	0x08014bf9
 8014ba8:	08014b45 	.word	0x08014b45
 8014bac:	08014b45 	.word	0x08014b45
 8014bb0:	08014cbf 	.word	0x08014cbf
 8014bb4:	682b      	ldr	r3, [r5, #0]
 8014bb6:	1d1a      	adds	r2, r3, #4
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	602a      	str	r2, [r5, #0]
 8014bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014bc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014bc4:	2301      	movs	r3, #1
 8014bc6:	e0a3      	b.n	8014d10 <_printf_i+0x1f4>
 8014bc8:	6820      	ldr	r0, [r4, #0]
 8014bca:	6829      	ldr	r1, [r5, #0]
 8014bcc:	0606      	lsls	r6, r0, #24
 8014bce:	f101 0304 	add.w	r3, r1, #4
 8014bd2:	d50a      	bpl.n	8014bea <_printf_i+0xce>
 8014bd4:	680e      	ldr	r6, [r1, #0]
 8014bd6:	602b      	str	r3, [r5, #0]
 8014bd8:	2e00      	cmp	r6, #0
 8014bda:	da03      	bge.n	8014be4 <_printf_i+0xc8>
 8014bdc:	232d      	movs	r3, #45	; 0x2d
 8014bde:	4276      	negs	r6, r6
 8014be0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014be4:	485e      	ldr	r0, [pc, #376]	; (8014d60 <_printf_i+0x244>)
 8014be6:	230a      	movs	r3, #10
 8014be8:	e019      	b.n	8014c1e <_printf_i+0x102>
 8014bea:	680e      	ldr	r6, [r1, #0]
 8014bec:	602b      	str	r3, [r5, #0]
 8014bee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014bf2:	bf18      	it	ne
 8014bf4:	b236      	sxthne	r6, r6
 8014bf6:	e7ef      	b.n	8014bd8 <_printf_i+0xbc>
 8014bf8:	682b      	ldr	r3, [r5, #0]
 8014bfa:	6820      	ldr	r0, [r4, #0]
 8014bfc:	1d19      	adds	r1, r3, #4
 8014bfe:	6029      	str	r1, [r5, #0]
 8014c00:	0601      	lsls	r1, r0, #24
 8014c02:	d501      	bpl.n	8014c08 <_printf_i+0xec>
 8014c04:	681e      	ldr	r6, [r3, #0]
 8014c06:	e002      	b.n	8014c0e <_printf_i+0xf2>
 8014c08:	0646      	lsls	r6, r0, #25
 8014c0a:	d5fb      	bpl.n	8014c04 <_printf_i+0xe8>
 8014c0c:	881e      	ldrh	r6, [r3, #0]
 8014c0e:	4854      	ldr	r0, [pc, #336]	; (8014d60 <_printf_i+0x244>)
 8014c10:	2f6f      	cmp	r7, #111	; 0x6f
 8014c12:	bf0c      	ite	eq
 8014c14:	2308      	moveq	r3, #8
 8014c16:	230a      	movne	r3, #10
 8014c18:	2100      	movs	r1, #0
 8014c1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014c1e:	6865      	ldr	r5, [r4, #4]
 8014c20:	60a5      	str	r5, [r4, #8]
 8014c22:	2d00      	cmp	r5, #0
 8014c24:	bfa2      	ittt	ge
 8014c26:	6821      	ldrge	r1, [r4, #0]
 8014c28:	f021 0104 	bicge.w	r1, r1, #4
 8014c2c:	6021      	strge	r1, [r4, #0]
 8014c2e:	b90e      	cbnz	r6, 8014c34 <_printf_i+0x118>
 8014c30:	2d00      	cmp	r5, #0
 8014c32:	d04d      	beq.n	8014cd0 <_printf_i+0x1b4>
 8014c34:	4615      	mov	r5, r2
 8014c36:	fbb6 f1f3 	udiv	r1, r6, r3
 8014c3a:	fb03 6711 	mls	r7, r3, r1, r6
 8014c3e:	5dc7      	ldrb	r7, [r0, r7]
 8014c40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014c44:	4637      	mov	r7, r6
 8014c46:	42bb      	cmp	r3, r7
 8014c48:	460e      	mov	r6, r1
 8014c4a:	d9f4      	bls.n	8014c36 <_printf_i+0x11a>
 8014c4c:	2b08      	cmp	r3, #8
 8014c4e:	d10b      	bne.n	8014c68 <_printf_i+0x14c>
 8014c50:	6823      	ldr	r3, [r4, #0]
 8014c52:	07de      	lsls	r6, r3, #31
 8014c54:	d508      	bpl.n	8014c68 <_printf_i+0x14c>
 8014c56:	6923      	ldr	r3, [r4, #16]
 8014c58:	6861      	ldr	r1, [r4, #4]
 8014c5a:	4299      	cmp	r1, r3
 8014c5c:	bfde      	ittt	le
 8014c5e:	2330      	movle	r3, #48	; 0x30
 8014c60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014c64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014c68:	1b52      	subs	r2, r2, r5
 8014c6a:	6122      	str	r2, [r4, #16]
 8014c6c:	f8cd a000 	str.w	sl, [sp]
 8014c70:	464b      	mov	r3, r9
 8014c72:	aa03      	add	r2, sp, #12
 8014c74:	4621      	mov	r1, r4
 8014c76:	4640      	mov	r0, r8
 8014c78:	f7ff fee2 	bl	8014a40 <_printf_common>
 8014c7c:	3001      	adds	r0, #1
 8014c7e:	d14c      	bne.n	8014d1a <_printf_i+0x1fe>
 8014c80:	f04f 30ff 	mov.w	r0, #4294967295
 8014c84:	b004      	add	sp, #16
 8014c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c8a:	4835      	ldr	r0, [pc, #212]	; (8014d60 <_printf_i+0x244>)
 8014c8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014c90:	6829      	ldr	r1, [r5, #0]
 8014c92:	6823      	ldr	r3, [r4, #0]
 8014c94:	f851 6b04 	ldr.w	r6, [r1], #4
 8014c98:	6029      	str	r1, [r5, #0]
 8014c9a:	061d      	lsls	r5, r3, #24
 8014c9c:	d514      	bpl.n	8014cc8 <_printf_i+0x1ac>
 8014c9e:	07df      	lsls	r7, r3, #31
 8014ca0:	bf44      	itt	mi
 8014ca2:	f043 0320 	orrmi.w	r3, r3, #32
 8014ca6:	6023      	strmi	r3, [r4, #0]
 8014ca8:	b91e      	cbnz	r6, 8014cb2 <_printf_i+0x196>
 8014caa:	6823      	ldr	r3, [r4, #0]
 8014cac:	f023 0320 	bic.w	r3, r3, #32
 8014cb0:	6023      	str	r3, [r4, #0]
 8014cb2:	2310      	movs	r3, #16
 8014cb4:	e7b0      	b.n	8014c18 <_printf_i+0xfc>
 8014cb6:	6823      	ldr	r3, [r4, #0]
 8014cb8:	f043 0320 	orr.w	r3, r3, #32
 8014cbc:	6023      	str	r3, [r4, #0]
 8014cbe:	2378      	movs	r3, #120	; 0x78
 8014cc0:	4828      	ldr	r0, [pc, #160]	; (8014d64 <_printf_i+0x248>)
 8014cc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014cc6:	e7e3      	b.n	8014c90 <_printf_i+0x174>
 8014cc8:	0659      	lsls	r1, r3, #25
 8014cca:	bf48      	it	mi
 8014ccc:	b2b6      	uxthmi	r6, r6
 8014cce:	e7e6      	b.n	8014c9e <_printf_i+0x182>
 8014cd0:	4615      	mov	r5, r2
 8014cd2:	e7bb      	b.n	8014c4c <_printf_i+0x130>
 8014cd4:	682b      	ldr	r3, [r5, #0]
 8014cd6:	6826      	ldr	r6, [r4, #0]
 8014cd8:	6961      	ldr	r1, [r4, #20]
 8014cda:	1d18      	adds	r0, r3, #4
 8014cdc:	6028      	str	r0, [r5, #0]
 8014cde:	0635      	lsls	r5, r6, #24
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	d501      	bpl.n	8014ce8 <_printf_i+0x1cc>
 8014ce4:	6019      	str	r1, [r3, #0]
 8014ce6:	e002      	b.n	8014cee <_printf_i+0x1d2>
 8014ce8:	0670      	lsls	r0, r6, #25
 8014cea:	d5fb      	bpl.n	8014ce4 <_printf_i+0x1c8>
 8014cec:	8019      	strh	r1, [r3, #0]
 8014cee:	2300      	movs	r3, #0
 8014cf0:	6123      	str	r3, [r4, #16]
 8014cf2:	4615      	mov	r5, r2
 8014cf4:	e7ba      	b.n	8014c6c <_printf_i+0x150>
 8014cf6:	682b      	ldr	r3, [r5, #0]
 8014cf8:	1d1a      	adds	r2, r3, #4
 8014cfa:	602a      	str	r2, [r5, #0]
 8014cfc:	681d      	ldr	r5, [r3, #0]
 8014cfe:	6862      	ldr	r2, [r4, #4]
 8014d00:	2100      	movs	r1, #0
 8014d02:	4628      	mov	r0, r5
 8014d04:	f7eb fa7c 	bl	8000200 <memchr>
 8014d08:	b108      	cbz	r0, 8014d0e <_printf_i+0x1f2>
 8014d0a:	1b40      	subs	r0, r0, r5
 8014d0c:	6060      	str	r0, [r4, #4]
 8014d0e:	6863      	ldr	r3, [r4, #4]
 8014d10:	6123      	str	r3, [r4, #16]
 8014d12:	2300      	movs	r3, #0
 8014d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014d18:	e7a8      	b.n	8014c6c <_printf_i+0x150>
 8014d1a:	6923      	ldr	r3, [r4, #16]
 8014d1c:	462a      	mov	r2, r5
 8014d1e:	4649      	mov	r1, r9
 8014d20:	4640      	mov	r0, r8
 8014d22:	47d0      	blx	sl
 8014d24:	3001      	adds	r0, #1
 8014d26:	d0ab      	beq.n	8014c80 <_printf_i+0x164>
 8014d28:	6823      	ldr	r3, [r4, #0]
 8014d2a:	079b      	lsls	r3, r3, #30
 8014d2c:	d413      	bmi.n	8014d56 <_printf_i+0x23a>
 8014d2e:	68e0      	ldr	r0, [r4, #12]
 8014d30:	9b03      	ldr	r3, [sp, #12]
 8014d32:	4298      	cmp	r0, r3
 8014d34:	bfb8      	it	lt
 8014d36:	4618      	movlt	r0, r3
 8014d38:	e7a4      	b.n	8014c84 <_printf_i+0x168>
 8014d3a:	2301      	movs	r3, #1
 8014d3c:	4632      	mov	r2, r6
 8014d3e:	4649      	mov	r1, r9
 8014d40:	4640      	mov	r0, r8
 8014d42:	47d0      	blx	sl
 8014d44:	3001      	adds	r0, #1
 8014d46:	d09b      	beq.n	8014c80 <_printf_i+0x164>
 8014d48:	3501      	adds	r5, #1
 8014d4a:	68e3      	ldr	r3, [r4, #12]
 8014d4c:	9903      	ldr	r1, [sp, #12]
 8014d4e:	1a5b      	subs	r3, r3, r1
 8014d50:	42ab      	cmp	r3, r5
 8014d52:	dcf2      	bgt.n	8014d3a <_printf_i+0x21e>
 8014d54:	e7eb      	b.n	8014d2e <_printf_i+0x212>
 8014d56:	2500      	movs	r5, #0
 8014d58:	f104 0619 	add.w	r6, r4, #25
 8014d5c:	e7f5      	b.n	8014d4a <_printf_i+0x22e>
 8014d5e:	bf00      	nop
 8014d60:	08015b52 	.word	0x08015b52
 8014d64:	08015b63 	.word	0x08015b63

08014d68 <_read_r>:
 8014d68:	b538      	push	{r3, r4, r5, lr}
 8014d6a:	4d07      	ldr	r5, [pc, #28]	; (8014d88 <_read_r+0x20>)
 8014d6c:	4604      	mov	r4, r0
 8014d6e:	4608      	mov	r0, r1
 8014d70:	4611      	mov	r1, r2
 8014d72:	2200      	movs	r2, #0
 8014d74:	602a      	str	r2, [r5, #0]
 8014d76:	461a      	mov	r2, r3
 8014d78:	f7ed fc02 	bl	8002580 <_read>
 8014d7c:	1c43      	adds	r3, r0, #1
 8014d7e:	d102      	bne.n	8014d86 <_read_r+0x1e>
 8014d80:	682b      	ldr	r3, [r5, #0]
 8014d82:	b103      	cbz	r3, 8014d86 <_read_r+0x1e>
 8014d84:	6023      	str	r3, [r4, #0]
 8014d86:	bd38      	pop	{r3, r4, r5, pc}
 8014d88:	2000cc2c 	.word	0x2000cc2c

08014d8c <__swbuf_r>:
 8014d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d8e:	460e      	mov	r6, r1
 8014d90:	4614      	mov	r4, r2
 8014d92:	4605      	mov	r5, r0
 8014d94:	b118      	cbz	r0, 8014d9e <__swbuf_r+0x12>
 8014d96:	6983      	ldr	r3, [r0, #24]
 8014d98:	b90b      	cbnz	r3, 8014d9e <__swbuf_r+0x12>
 8014d9a:	f7fe fed7 	bl	8013b4c <__sinit>
 8014d9e:	4b21      	ldr	r3, [pc, #132]	; (8014e24 <__swbuf_r+0x98>)
 8014da0:	429c      	cmp	r4, r3
 8014da2:	d12b      	bne.n	8014dfc <__swbuf_r+0x70>
 8014da4:	686c      	ldr	r4, [r5, #4]
 8014da6:	69a3      	ldr	r3, [r4, #24]
 8014da8:	60a3      	str	r3, [r4, #8]
 8014daa:	89a3      	ldrh	r3, [r4, #12]
 8014dac:	071a      	lsls	r2, r3, #28
 8014dae:	d52f      	bpl.n	8014e10 <__swbuf_r+0x84>
 8014db0:	6923      	ldr	r3, [r4, #16]
 8014db2:	b36b      	cbz	r3, 8014e10 <__swbuf_r+0x84>
 8014db4:	6923      	ldr	r3, [r4, #16]
 8014db6:	6820      	ldr	r0, [r4, #0]
 8014db8:	1ac0      	subs	r0, r0, r3
 8014dba:	6963      	ldr	r3, [r4, #20]
 8014dbc:	b2f6      	uxtb	r6, r6
 8014dbe:	4283      	cmp	r3, r0
 8014dc0:	4637      	mov	r7, r6
 8014dc2:	dc04      	bgt.n	8014dce <__swbuf_r+0x42>
 8014dc4:	4621      	mov	r1, r4
 8014dc6:	4628      	mov	r0, r5
 8014dc8:	f7ff fb18 	bl	80143fc <_fflush_r>
 8014dcc:	bb30      	cbnz	r0, 8014e1c <__swbuf_r+0x90>
 8014dce:	68a3      	ldr	r3, [r4, #8]
 8014dd0:	3b01      	subs	r3, #1
 8014dd2:	60a3      	str	r3, [r4, #8]
 8014dd4:	6823      	ldr	r3, [r4, #0]
 8014dd6:	1c5a      	adds	r2, r3, #1
 8014dd8:	6022      	str	r2, [r4, #0]
 8014dda:	701e      	strb	r6, [r3, #0]
 8014ddc:	6963      	ldr	r3, [r4, #20]
 8014dde:	3001      	adds	r0, #1
 8014de0:	4283      	cmp	r3, r0
 8014de2:	d004      	beq.n	8014dee <__swbuf_r+0x62>
 8014de4:	89a3      	ldrh	r3, [r4, #12]
 8014de6:	07db      	lsls	r3, r3, #31
 8014de8:	d506      	bpl.n	8014df8 <__swbuf_r+0x6c>
 8014dea:	2e0a      	cmp	r6, #10
 8014dec:	d104      	bne.n	8014df8 <__swbuf_r+0x6c>
 8014dee:	4621      	mov	r1, r4
 8014df0:	4628      	mov	r0, r5
 8014df2:	f7ff fb03 	bl	80143fc <_fflush_r>
 8014df6:	b988      	cbnz	r0, 8014e1c <__swbuf_r+0x90>
 8014df8:	4638      	mov	r0, r7
 8014dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014dfc:	4b0a      	ldr	r3, [pc, #40]	; (8014e28 <__swbuf_r+0x9c>)
 8014dfe:	429c      	cmp	r4, r3
 8014e00:	d101      	bne.n	8014e06 <__swbuf_r+0x7a>
 8014e02:	68ac      	ldr	r4, [r5, #8]
 8014e04:	e7cf      	b.n	8014da6 <__swbuf_r+0x1a>
 8014e06:	4b09      	ldr	r3, [pc, #36]	; (8014e2c <__swbuf_r+0xa0>)
 8014e08:	429c      	cmp	r4, r3
 8014e0a:	bf08      	it	eq
 8014e0c:	68ec      	ldreq	r4, [r5, #12]
 8014e0e:	e7ca      	b.n	8014da6 <__swbuf_r+0x1a>
 8014e10:	4621      	mov	r1, r4
 8014e12:	4628      	mov	r0, r5
 8014e14:	f000 f80c 	bl	8014e30 <__swsetup_r>
 8014e18:	2800      	cmp	r0, #0
 8014e1a:	d0cb      	beq.n	8014db4 <__swbuf_r+0x28>
 8014e1c:	f04f 37ff 	mov.w	r7, #4294967295
 8014e20:	e7ea      	b.n	8014df8 <__swbuf_r+0x6c>
 8014e22:	bf00      	nop
 8014e24:	0801594c 	.word	0x0801594c
 8014e28:	0801596c 	.word	0x0801596c
 8014e2c:	0801592c 	.word	0x0801592c

08014e30 <__swsetup_r>:
 8014e30:	4b32      	ldr	r3, [pc, #200]	; (8014efc <__swsetup_r+0xcc>)
 8014e32:	b570      	push	{r4, r5, r6, lr}
 8014e34:	681d      	ldr	r5, [r3, #0]
 8014e36:	4606      	mov	r6, r0
 8014e38:	460c      	mov	r4, r1
 8014e3a:	b125      	cbz	r5, 8014e46 <__swsetup_r+0x16>
 8014e3c:	69ab      	ldr	r3, [r5, #24]
 8014e3e:	b913      	cbnz	r3, 8014e46 <__swsetup_r+0x16>
 8014e40:	4628      	mov	r0, r5
 8014e42:	f7fe fe83 	bl	8013b4c <__sinit>
 8014e46:	4b2e      	ldr	r3, [pc, #184]	; (8014f00 <__swsetup_r+0xd0>)
 8014e48:	429c      	cmp	r4, r3
 8014e4a:	d10f      	bne.n	8014e6c <__swsetup_r+0x3c>
 8014e4c:	686c      	ldr	r4, [r5, #4]
 8014e4e:	89a3      	ldrh	r3, [r4, #12]
 8014e50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014e54:	0719      	lsls	r1, r3, #28
 8014e56:	d42c      	bmi.n	8014eb2 <__swsetup_r+0x82>
 8014e58:	06dd      	lsls	r5, r3, #27
 8014e5a:	d411      	bmi.n	8014e80 <__swsetup_r+0x50>
 8014e5c:	2309      	movs	r3, #9
 8014e5e:	6033      	str	r3, [r6, #0]
 8014e60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014e64:	81a3      	strh	r3, [r4, #12]
 8014e66:	f04f 30ff 	mov.w	r0, #4294967295
 8014e6a:	e03e      	b.n	8014eea <__swsetup_r+0xba>
 8014e6c:	4b25      	ldr	r3, [pc, #148]	; (8014f04 <__swsetup_r+0xd4>)
 8014e6e:	429c      	cmp	r4, r3
 8014e70:	d101      	bne.n	8014e76 <__swsetup_r+0x46>
 8014e72:	68ac      	ldr	r4, [r5, #8]
 8014e74:	e7eb      	b.n	8014e4e <__swsetup_r+0x1e>
 8014e76:	4b24      	ldr	r3, [pc, #144]	; (8014f08 <__swsetup_r+0xd8>)
 8014e78:	429c      	cmp	r4, r3
 8014e7a:	bf08      	it	eq
 8014e7c:	68ec      	ldreq	r4, [r5, #12]
 8014e7e:	e7e6      	b.n	8014e4e <__swsetup_r+0x1e>
 8014e80:	0758      	lsls	r0, r3, #29
 8014e82:	d512      	bpl.n	8014eaa <__swsetup_r+0x7a>
 8014e84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014e86:	b141      	cbz	r1, 8014e9a <__swsetup_r+0x6a>
 8014e88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014e8c:	4299      	cmp	r1, r3
 8014e8e:	d002      	beq.n	8014e96 <__swsetup_r+0x66>
 8014e90:	4630      	mov	r0, r6
 8014e92:	f7fe ff47 	bl	8013d24 <_free_r>
 8014e96:	2300      	movs	r3, #0
 8014e98:	6363      	str	r3, [r4, #52]	; 0x34
 8014e9a:	89a3      	ldrh	r3, [r4, #12]
 8014e9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014ea0:	81a3      	strh	r3, [r4, #12]
 8014ea2:	2300      	movs	r3, #0
 8014ea4:	6063      	str	r3, [r4, #4]
 8014ea6:	6923      	ldr	r3, [r4, #16]
 8014ea8:	6023      	str	r3, [r4, #0]
 8014eaa:	89a3      	ldrh	r3, [r4, #12]
 8014eac:	f043 0308 	orr.w	r3, r3, #8
 8014eb0:	81a3      	strh	r3, [r4, #12]
 8014eb2:	6923      	ldr	r3, [r4, #16]
 8014eb4:	b94b      	cbnz	r3, 8014eca <__swsetup_r+0x9a>
 8014eb6:	89a3      	ldrh	r3, [r4, #12]
 8014eb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014ec0:	d003      	beq.n	8014eca <__swsetup_r+0x9a>
 8014ec2:	4621      	mov	r1, r4
 8014ec4:	4630      	mov	r0, r6
 8014ec6:	f000 f84d 	bl	8014f64 <__smakebuf_r>
 8014eca:	89a0      	ldrh	r0, [r4, #12]
 8014ecc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014ed0:	f010 0301 	ands.w	r3, r0, #1
 8014ed4:	d00a      	beq.n	8014eec <__swsetup_r+0xbc>
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	60a3      	str	r3, [r4, #8]
 8014eda:	6963      	ldr	r3, [r4, #20]
 8014edc:	425b      	negs	r3, r3
 8014ede:	61a3      	str	r3, [r4, #24]
 8014ee0:	6923      	ldr	r3, [r4, #16]
 8014ee2:	b943      	cbnz	r3, 8014ef6 <__swsetup_r+0xc6>
 8014ee4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014ee8:	d1ba      	bne.n	8014e60 <__swsetup_r+0x30>
 8014eea:	bd70      	pop	{r4, r5, r6, pc}
 8014eec:	0781      	lsls	r1, r0, #30
 8014eee:	bf58      	it	pl
 8014ef0:	6963      	ldrpl	r3, [r4, #20]
 8014ef2:	60a3      	str	r3, [r4, #8]
 8014ef4:	e7f4      	b.n	8014ee0 <__swsetup_r+0xb0>
 8014ef6:	2000      	movs	r0, #0
 8014ef8:	e7f7      	b.n	8014eea <__swsetup_r+0xba>
 8014efa:	bf00      	nop
 8014efc:	200002b0 	.word	0x200002b0
 8014f00:	0801594c 	.word	0x0801594c
 8014f04:	0801596c 	.word	0x0801596c
 8014f08:	0801592c 	.word	0x0801592c

08014f0c <abort>:
 8014f0c:	b508      	push	{r3, lr}
 8014f0e:	2006      	movs	r0, #6
 8014f10:	f000 f8da 	bl	80150c8 <raise>
 8014f14:	2001      	movs	r0, #1
 8014f16:	f7ed fb29 	bl	800256c <_exit>

08014f1a <__swhatbuf_r>:
 8014f1a:	b570      	push	{r4, r5, r6, lr}
 8014f1c:	460e      	mov	r6, r1
 8014f1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f22:	2900      	cmp	r1, #0
 8014f24:	b096      	sub	sp, #88	; 0x58
 8014f26:	4614      	mov	r4, r2
 8014f28:	461d      	mov	r5, r3
 8014f2a:	da08      	bge.n	8014f3e <__swhatbuf_r+0x24>
 8014f2c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014f30:	2200      	movs	r2, #0
 8014f32:	602a      	str	r2, [r5, #0]
 8014f34:	061a      	lsls	r2, r3, #24
 8014f36:	d410      	bmi.n	8014f5a <__swhatbuf_r+0x40>
 8014f38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014f3c:	e00e      	b.n	8014f5c <__swhatbuf_r+0x42>
 8014f3e:	466a      	mov	r2, sp
 8014f40:	f000 f8de 	bl	8015100 <_fstat_r>
 8014f44:	2800      	cmp	r0, #0
 8014f46:	dbf1      	blt.n	8014f2c <__swhatbuf_r+0x12>
 8014f48:	9a01      	ldr	r2, [sp, #4]
 8014f4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014f4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014f52:	425a      	negs	r2, r3
 8014f54:	415a      	adcs	r2, r3
 8014f56:	602a      	str	r2, [r5, #0]
 8014f58:	e7ee      	b.n	8014f38 <__swhatbuf_r+0x1e>
 8014f5a:	2340      	movs	r3, #64	; 0x40
 8014f5c:	2000      	movs	r0, #0
 8014f5e:	6023      	str	r3, [r4, #0]
 8014f60:	b016      	add	sp, #88	; 0x58
 8014f62:	bd70      	pop	{r4, r5, r6, pc}

08014f64 <__smakebuf_r>:
 8014f64:	898b      	ldrh	r3, [r1, #12]
 8014f66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014f68:	079d      	lsls	r5, r3, #30
 8014f6a:	4606      	mov	r6, r0
 8014f6c:	460c      	mov	r4, r1
 8014f6e:	d507      	bpl.n	8014f80 <__smakebuf_r+0x1c>
 8014f70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014f74:	6023      	str	r3, [r4, #0]
 8014f76:	6123      	str	r3, [r4, #16]
 8014f78:	2301      	movs	r3, #1
 8014f7a:	6163      	str	r3, [r4, #20]
 8014f7c:	b002      	add	sp, #8
 8014f7e:	bd70      	pop	{r4, r5, r6, pc}
 8014f80:	ab01      	add	r3, sp, #4
 8014f82:	466a      	mov	r2, sp
 8014f84:	f7ff ffc9 	bl	8014f1a <__swhatbuf_r>
 8014f88:	9900      	ldr	r1, [sp, #0]
 8014f8a:	4605      	mov	r5, r0
 8014f8c:	4630      	mov	r0, r6
 8014f8e:	f7fe ff35 	bl	8013dfc <_malloc_r>
 8014f92:	b948      	cbnz	r0, 8014fa8 <__smakebuf_r+0x44>
 8014f94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f98:	059a      	lsls	r2, r3, #22
 8014f9a:	d4ef      	bmi.n	8014f7c <__smakebuf_r+0x18>
 8014f9c:	f023 0303 	bic.w	r3, r3, #3
 8014fa0:	f043 0302 	orr.w	r3, r3, #2
 8014fa4:	81a3      	strh	r3, [r4, #12]
 8014fa6:	e7e3      	b.n	8014f70 <__smakebuf_r+0xc>
 8014fa8:	4b0d      	ldr	r3, [pc, #52]	; (8014fe0 <__smakebuf_r+0x7c>)
 8014faa:	62b3      	str	r3, [r6, #40]	; 0x28
 8014fac:	89a3      	ldrh	r3, [r4, #12]
 8014fae:	6020      	str	r0, [r4, #0]
 8014fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014fb4:	81a3      	strh	r3, [r4, #12]
 8014fb6:	9b00      	ldr	r3, [sp, #0]
 8014fb8:	6163      	str	r3, [r4, #20]
 8014fba:	9b01      	ldr	r3, [sp, #4]
 8014fbc:	6120      	str	r0, [r4, #16]
 8014fbe:	b15b      	cbz	r3, 8014fd8 <__smakebuf_r+0x74>
 8014fc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014fc4:	4630      	mov	r0, r6
 8014fc6:	f000 f8ad 	bl	8015124 <_isatty_r>
 8014fca:	b128      	cbz	r0, 8014fd8 <__smakebuf_r+0x74>
 8014fcc:	89a3      	ldrh	r3, [r4, #12]
 8014fce:	f023 0303 	bic.w	r3, r3, #3
 8014fd2:	f043 0301 	orr.w	r3, r3, #1
 8014fd6:	81a3      	strh	r3, [r4, #12]
 8014fd8:	89a0      	ldrh	r0, [r4, #12]
 8014fda:	4305      	orrs	r5, r0
 8014fdc:	81a5      	strh	r5, [r4, #12]
 8014fde:	e7cd      	b.n	8014f7c <__smakebuf_r+0x18>
 8014fe0:	08013ae5 	.word	0x08013ae5

08014fe4 <memmove>:
 8014fe4:	4288      	cmp	r0, r1
 8014fe6:	b510      	push	{r4, lr}
 8014fe8:	eb01 0402 	add.w	r4, r1, r2
 8014fec:	d902      	bls.n	8014ff4 <memmove+0x10>
 8014fee:	4284      	cmp	r4, r0
 8014ff0:	4623      	mov	r3, r4
 8014ff2:	d807      	bhi.n	8015004 <memmove+0x20>
 8014ff4:	1e43      	subs	r3, r0, #1
 8014ff6:	42a1      	cmp	r1, r4
 8014ff8:	d008      	beq.n	801500c <memmove+0x28>
 8014ffa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014ffe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015002:	e7f8      	b.n	8014ff6 <memmove+0x12>
 8015004:	4402      	add	r2, r0
 8015006:	4601      	mov	r1, r0
 8015008:	428a      	cmp	r2, r1
 801500a:	d100      	bne.n	801500e <memmove+0x2a>
 801500c:	bd10      	pop	{r4, pc}
 801500e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015012:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015016:	e7f7      	b.n	8015008 <memmove+0x24>

08015018 <_realloc_r>:
 8015018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801501c:	4680      	mov	r8, r0
 801501e:	4614      	mov	r4, r2
 8015020:	460e      	mov	r6, r1
 8015022:	b921      	cbnz	r1, 801502e <_realloc_r+0x16>
 8015024:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015028:	4611      	mov	r1, r2
 801502a:	f7fe bee7 	b.w	8013dfc <_malloc_r>
 801502e:	b92a      	cbnz	r2, 801503c <_realloc_r+0x24>
 8015030:	f7fe fe78 	bl	8013d24 <_free_r>
 8015034:	4625      	mov	r5, r4
 8015036:	4628      	mov	r0, r5
 8015038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801503c:	f000 f882 	bl	8015144 <_malloc_usable_size_r>
 8015040:	4284      	cmp	r4, r0
 8015042:	4607      	mov	r7, r0
 8015044:	d802      	bhi.n	801504c <_realloc_r+0x34>
 8015046:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801504a:	d812      	bhi.n	8015072 <_realloc_r+0x5a>
 801504c:	4621      	mov	r1, r4
 801504e:	4640      	mov	r0, r8
 8015050:	f7fe fed4 	bl	8013dfc <_malloc_r>
 8015054:	4605      	mov	r5, r0
 8015056:	2800      	cmp	r0, #0
 8015058:	d0ed      	beq.n	8015036 <_realloc_r+0x1e>
 801505a:	42bc      	cmp	r4, r7
 801505c:	4622      	mov	r2, r4
 801505e:	4631      	mov	r1, r6
 8015060:	bf28      	it	cs
 8015062:	463a      	movcs	r2, r7
 8015064:	f7fe fe48 	bl	8013cf8 <memcpy>
 8015068:	4631      	mov	r1, r6
 801506a:	4640      	mov	r0, r8
 801506c:	f7fe fe5a 	bl	8013d24 <_free_r>
 8015070:	e7e1      	b.n	8015036 <_realloc_r+0x1e>
 8015072:	4635      	mov	r5, r6
 8015074:	e7df      	b.n	8015036 <_realloc_r+0x1e>

08015076 <_raise_r>:
 8015076:	291f      	cmp	r1, #31
 8015078:	b538      	push	{r3, r4, r5, lr}
 801507a:	4604      	mov	r4, r0
 801507c:	460d      	mov	r5, r1
 801507e:	d904      	bls.n	801508a <_raise_r+0x14>
 8015080:	2316      	movs	r3, #22
 8015082:	6003      	str	r3, [r0, #0]
 8015084:	f04f 30ff 	mov.w	r0, #4294967295
 8015088:	bd38      	pop	{r3, r4, r5, pc}
 801508a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801508c:	b112      	cbz	r2, 8015094 <_raise_r+0x1e>
 801508e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015092:	b94b      	cbnz	r3, 80150a8 <_raise_r+0x32>
 8015094:	4620      	mov	r0, r4
 8015096:	f000 f831 	bl	80150fc <_getpid_r>
 801509a:	462a      	mov	r2, r5
 801509c:	4601      	mov	r1, r0
 801509e:	4620      	mov	r0, r4
 80150a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80150a4:	f000 b818 	b.w	80150d8 <_kill_r>
 80150a8:	2b01      	cmp	r3, #1
 80150aa:	d00a      	beq.n	80150c2 <_raise_r+0x4c>
 80150ac:	1c59      	adds	r1, r3, #1
 80150ae:	d103      	bne.n	80150b8 <_raise_r+0x42>
 80150b0:	2316      	movs	r3, #22
 80150b2:	6003      	str	r3, [r0, #0]
 80150b4:	2001      	movs	r0, #1
 80150b6:	e7e7      	b.n	8015088 <_raise_r+0x12>
 80150b8:	2400      	movs	r4, #0
 80150ba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80150be:	4628      	mov	r0, r5
 80150c0:	4798      	blx	r3
 80150c2:	2000      	movs	r0, #0
 80150c4:	e7e0      	b.n	8015088 <_raise_r+0x12>
	...

080150c8 <raise>:
 80150c8:	4b02      	ldr	r3, [pc, #8]	; (80150d4 <raise+0xc>)
 80150ca:	4601      	mov	r1, r0
 80150cc:	6818      	ldr	r0, [r3, #0]
 80150ce:	f7ff bfd2 	b.w	8015076 <_raise_r>
 80150d2:	bf00      	nop
 80150d4:	200002b0 	.word	0x200002b0

080150d8 <_kill_r>:
 80150d8:	b538      	push	{r3, r4, r5, lr}
 80150da:	4d07      	ldr	r5, [pc, #28]	; (80150f8 <_kill_r+0x20>)
 80150dc:	2300      	movs	r3, #0
 80150de:	4604      	mov	r4, r0
 80150e0:	4608      	mov	r0, r1
 80150e2:	4611      	mov	r1, r2
 80150e4:	602b      	str	r3, [r5, #0]
 80150e6:	f7ed fa31 	bl	800254c <_kill>
 80150ea:	1c43      	adds	r3, r0, #1
 80150ec:	d102      	bne.n	80150f4 <_kill_r+0x1c>
 80150ee:	682b      	ldr	r3, [r5, #0]
 80150f0:	b103      	cbz	r3, 80150f4 <_kill_r+0x1c>
 80150f2:	6023      	str	r3, [r4, #0]
 80150f4:	bd38      	pop	{r3, r4, r5, pc}
 80150f6:	bf00      	nop
 80150f8:	2000cc2c 	.word	0x2000cc2c

080150fc <_getpid_r>:
 80150fc:	f7ed ba1e 	b.w	800253c <_getpid>

08015100 <_fstat_r>:
 8015100:	b538      	push	{r3, r4, r5, lr}
 8015102:	4d07      	ldr	r5, [pc, #28]	; (8015120 <_fstat_r+0x20>)
 8015104:	2300      	movs	r3, #0
 8015106:	4604      	mov	r4, r0
 8015108:	4608      	mov	r0, r1
 801510a:	4611      	mov	r1, r2
 801510c:	602b      	str	r3, [r5, #0]
 801510e:	f7ed fa7c 	bl	800260a <_fstat>
 8015112:	1c43      	adds	r3, r0, #1
 8015114:	d102      	bne.n	801511c <_fstat_r+0x1c>
 8015116:	682b      	ldr	r3, [r5, #0]
 8015118:	b103      	cbz	r3, 801511c <_fstat_r+0x1c>
 801511a:	6023      	str	r3, [r4, #0]
 801511c:	bd38      	pop	{r3, r4, r5, pc}
 801511e:	bf00      	nop
 8015120:	2000cc2c 	.word	0x2000cc2c

08015124 <_isatty_r>:
 8015124:	b538      	push	{r3, r4, r5, lr}
 8015126:	4d06      	ldr	r5, [pc, #24]	; (8015140 <_isatty_r+0x1c>)
 8015128:	2300      	movs	r3, #0
 801512a:	4604      	mov	r4, r0
 801512c:	4608      	mov	r0, r1
 801512e:	602b      	str	r3, [r5, #0]
 8015130:	f7ed fa7b 	bl	800262a <_isatty>
 8015134:	1c43      	adds	r3, r0, #1
 8015136:	d102      	bne.n	801513e <_isatty_r+0x1a>
 8015138:	682b      	ldr	r3, [r5, #0]
 801513a:	b103      	cbz	r3, 801513e <_isatty_r+0x1a>
 801513c:	6023      	str	r3, [r4, #0]
 801513e:	bd38      	pop	{r3, r4, r5, pc}
 8015140:	2000cc2c 	.word	0x2000cc2c

08015144 <_malloc_usable_size_r>:
 8015144:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015148:	1f18      	subs	r0, r3, #4
 801514a:	2b00      	cmp	r3, #0
 801514c:	bfbc      	itt	lt
 801514e:	580b      	ldrlt	r3, [r1, r0]
 8015150:	18c0      	addlt	r0, r0, r3
 8015152:	4770      	bx	lr

08015154 <_init>:
 8015154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015156:	bf00      	nop
 8015158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801515a:	bc08      	pop	{r3}
 801515c:	469e      	mov	lr, r3
 801515e:	4770      	bx	lr

08015160 <_fini>:
 8015160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015162:	bf00      	nop
 8015164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015166:	bc08      	pop	{r3}
 8015168:	469e      	mov	lr, r3
 801516a:	4770      	bx	lr
