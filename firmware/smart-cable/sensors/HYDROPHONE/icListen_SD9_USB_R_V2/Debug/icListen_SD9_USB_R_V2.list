
icListen_SD9_USB_R_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013e0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008dc  08013f9c  08013f9c  00023f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014878  08014878  00030314  2**0
                  CONTENTS
  4 .ARM          00000008  08014878  08014878  00024878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014880  08014880  00030314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014880  08014880  00024880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014884  08014884  00024884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000314  20000000  08014888  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030314  2**0
                  CONTENTS
 10 .bss          0000bff0  20000314  20000314  00030314  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000c304  2000c304  00030314  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030314  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002fece  00000000  00000000  00030344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006e51  00000000  00000000  00060212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002310  00000000  00000000  00067068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002068  00000000  00000000  00069378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000298e2  00000000  00000000  0006b3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000302b7  00000000  00000000  00094cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4a51  00000000  00000000  000c4f79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001999ca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009c80  00000000  00000000  00199a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000314 	.word	0x20000314
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013f84 	.word	0x08013f84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000318 	.word	0x20000318
 80001cc:	08013f84 	.word	0x08013f84

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <UI_init>:
char temp_array[200];
const char* UI_commands_strings[]={"HELP HERE\r"};


void UI_init(UI_typedef* UI_obj)
{
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b096      	sub	sp, #88	; 0x58
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	UI_messages_init(UI_obj);
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f000 f967 	bl	8000880 <UI_messages_init>


	osMessageQDef(UI_events_q, 20, uint8_t);
 80005b2:	4b20      	ldr	r3, [pc, #128]	; (8000634 <UI_init+0x90>)
 80005b4:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80005b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UI_obj->events_q= osMessageCreate(osMessageQ(UI_events_q), NULL);
 80005be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005c2:	2100      	movs	r1, #0
 80005c4:	4618      	mov	r0, r3
 80005c6:	f00f fc98 	bl	800fefa <osMessageCreate>
 80005ca:	4602      	mov	r2, r0
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	609a      	str	r2, [r3, #8]

	osMessageQDef(UI_media_rx_q, 20, uint16_t);
 80005d0:	4b19      	ldr	r3, [pc, #100]	; (8000638 <UI_init+0x94>)
 80005d2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UI_obj->media_rx_messages_q= osMessageCreate(osMessageQ(UI_media_rx_q), NULL);
 80005dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f00f fc89 	bl	800fefa <osMessageCreate>
 80005e8:	4602      	mov	r2, r0
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	601a      	str	r2, [r3, #0]

	osMessageQDef(UI_media_tx_q, 200, uint8_t);
 80005ee:	4b13      	ldr	r3, [pc, #76]	; (800063c <UI_init+0x98>)
 80005f0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80005f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UI_obj->media_tx_q = osMessageCreate(osMessageQ(UI_media_tx_q), NULL);
 80005fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f00f fc7a 	bl	800fefa <osMessageCreate>
 8000606:	4602      	mov	r2, r0
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	605a      	str	r2, [r3, #4]

	osThreadDef(UI_task, UI_loop, osPriorityNormal, 0, 256);
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <UI_init+0x9c>)
 800060e:	f107 040c 	add.w	r4, r7, #12
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(UI_task), UI_obj);
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	6879      	ldr	r1, [r7, #4]
 8000626:	4618      	mov	r0, r3
 8000628:	f00f fc07 	bl	800fe3a <osThreadCreate>
}
 800062c:	bf00      	nop
 800062e:	3758      	adds	r7, #88	; 0x58
 8000630:	46bd      	mov	sp, r7
 8000632:	bdb0      	pop	{r4, r5, r7, pc}
 8000634:	08013fb0 	.word	0x08013fb0
 8000638:	08013fc0 	.word	0x08013fc0
 800063c:	08013fd0 	.word	0x08013fd0
 8000640:	08013fe0 	.word	0x08013fe0

08000644 <UI_loop>:


void UI_loop(UI_typedef* UI_obj)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	 uint16_t msg_indx;
	 for(;;)
	 {
		if(xQueueReceive(UI_obj->media_rx_messages_q,&msg_indx,osWaitForever))
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f107 010a 	add.w	r1, r7, #10
 8000654:	f04f 32ff 	mov.w	r2, #4294967295
 8000658:	4618      	mov	r0, r3
 800065a:	f010 f8b3 	bl	80107c4 <xQueueReceive>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0f3      	beq.n	800064c <UI_loop+0x8>
		{   uint8_t* msg=UI_obj->rx_buffer+msg_indx;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	330e      	adds	r3, #14
 8000668:	897a      	ldrh	r2, [r7, #10]
 800066a:	4413      	add	r3, r2
 800066c:	60fb      	str	r3, [r7, #12]
			UI_parse_message(UI_obj,msg);
 800066e:	68f9      	ldr	r1, [r7, #12]
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f000 f8c7 	bl	8000804 <UI_parse_message>
		if(xQueueReceive(UI_obj->media_rx_messages_q,&msg_indx,osWaitForever))
 8000676:	e7e9      	b.n	800064c <UI_loop+0x8>

08000678 <UI_media_process_byte>:

}


void UI_media_process_byte(UI_typedef* UI_obj,uint8_t rx_byte)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
	if(UI_obj->media_status==UI_MEDIA_READY && rx_byte!=0x00)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	7b5b      	ldrb	r3, [r3, #13]
 8000688:	2b0a      	cmp	r3, #10
 800068a:	d160      	bne.n	800074e <UI_media_process_byte+0xd6>
 800068c:	78fb      	ldrb	r3, [r7, #3]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d05d      	beq.n	800074e <UI_media_process_byte+0xd6>
	{
		UI_obj->rx_buffer[UI_obj->rx_buffer_indx]=rx_byte;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000698:	b29b      	uxth	r3, r3
 800069a:	461a      	mov	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4413      	add	r3, r2
 80006a0:	78fa      	ldrb	r2, [r7, #3]
 80006a2:	739a      	strb	r2, [r3, #14]
		if(rx_byte=='\r')
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	2b0d      	cmp	r3, #13
 80006a8:	d132      	bne.n	8000710 <UI_media_process_byte+0x98>
		{
			UI_obj->rx_buffer[UI_obj->rx_buffer_indx]=0x00;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	461a      	mov	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4413      	add	r3, r2
 80006b8:	2200      	movs	r2, #0
 80006ba:	739a      	strb	r2, [r3, #14]
			osMessagePut(UI_obj->media_rx_messages_q,UI_obj->rx_buffer_new_string_indx,0);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	6818      	ldr	r0, [r3, #0]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	2200      	movs	r2, #0
 80006ca:	4619      	mov	r1, r3
 80006cc:	f00f fc3e 	bl	800ff4c <osMessagePut>
			if(UI_obj->rx_buffer_indx>UI_RX_BUFFER_THR) UI_obj->rx_buffer_indx=0;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80006dc:	d907      	bls.n	80006ee <UI_media_process_byte+0x76>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 80006e6:	2200      	movs	r2, #0
 80006e8:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
 80006ec:	e008      	b.n	8000700 <UI_media_process_byte+0x88>
			else  UI_obj->rx_buffer_indx++;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	3301      	adds	r3, #1
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
			UI_obj->rx_buffer_new_string_indx=UI_obj->rx_buffer_indx;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000706:	b29a      	uxth	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
 800070e:	e008      	b.n	8000722 <UI_media_process_byte+0xaa>
		}
		else UI_obj->rx_buffer_indx++;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000716:	b29b      	uxth	r3, r3
 8000718:	3301      	adds	r3, #1
 800071a:	b29a      	uxth	r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
		if(UI_obj->rx_buffer_indx==UI_RX_BUFFER_SIZE)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000728:	b29b      	uxth	r3, r3
 800072a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800072e:	d11d      	bne.n	800076c <UI_media_process_byte+0xf4>
		{
			UI_obj->rx_buffer_indx=0;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2200      	movs	r2, #0
 8000734:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 8000738:	2200      	movs	r2, #0
 800073a:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
			UI_obj->rx_buffer_new_string_indx=UI_obj->rx_buffer_indx;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000744:	b29a      	uxth	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
		if(UI_obj->rx_buffer_indx==UI_RX_BUFFER_SIZE)
 800074c:	e00e      	b.n	800076c <UI_media_process_byte+0xf4>
		}
	}
	else
	{
		UI_obj->rx_buffer_indx=0;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2200      	movs	r2, #0
 8000752:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 8000756:	2200      	movs	r2, #0
 8000758:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
		UI_obj->rx_buffer_new_string_indx=UI_obj->rx_buffer_indx;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000762:	b29a      	uxth	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
	}
}
 800076a:	bf00      	nop
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <UI_media_get_byte>:

uint8_t UI_media_get_byte(UI_typedef* UI_obj,uint8_t* tx_byte)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
	osEvent res=osMessageGet(UI_obj->media_tx_q,0);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6859      	ldr	r1, [r3, #4]
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2200      	movs	r2, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f00f fc1f 	bl	800ffcc <osMessageGet>
	if(res.status==osEventMessage)
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	2b10      	cmp	r3, #16
 8000792:	d105      	bne.n	80007a0 <UI_media_get_byte+0x2c>
    {
		*tx_byte=res.value.v;
 8000794:	693b      	ldr	r3, [r7, #16]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	701a      	strb	r2, [r3, #0]
		return UI_F_OK;
 800079c:	2300      	movs	r3, #0
 800079e:	e000      	b.n	80007a2 <UI_media_get_byte+0x2e>
    }
  return UI_F_ERR;
 80007a0:	2301      	movs	r3, #1
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3718      	adds	r7, #24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <UI_send_msg>:


void UI_send_msg(UI_typedef* UI_obj,uint8_t cmd_id,void* arg)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	60f8      	str	r0, [r7, #12]
 80007b2:	460b      	mov	r3, r1
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	72fb      	strb	r3, [r7, #11]
 memory_region_pointer*  ptr=arg;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	613b      	str	r3, [r7, #16]

 switch(cmd_id)
 80007bc:	7afb      	ldrb	r3, [r7, #11]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d01a      	beq.n	80007f8 <UI_send_msg+0x4e>
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d000      	beq.n	80007c8 <UI_send_msg+0x1e>
		   osMessagePut(UI_obj->media_tx_q,*((uint8_t*)(ptr->start_addr)+i),osWaitForever);
	   }
     break;
 }

}
 80007c6:	e018      	b.n	80007fa <UI_send_msg+0x50>
       for(int i=0;i<ptr->size;i++)
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	e00e      	b.n	80007ec <UI_send_msg+0x42>
		   osMessagePut(UI_obj->media_tx_q,*((uint8_t*)(ptr->start_addr)+i),osWaitForever);
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	6858      	ldr	r0, [r3, #4]
 80007d2:	693b      	ldr	r3, [r7, #16]
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	4413      	add	r3, r2
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	f04f 32ff 	mov.w	r2, #4294967295
 80007e0:	4619      	mov	r1, r3
 80007e2:	f00f fbb3 	bl	800ff4c <osMessagePut>
       for(int i=0;i<ptr->size;i++)
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	3301      	adds	r3, #1
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	685a      	ldr	r2, [r3, #4]
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d8eb      	bhi.n	80007ce <UI_send_msg+0x24>
     break;
 80007f6:	e000      	b.n	80007fa <UI_send_msg+0x50>
	 break;
 80007f8:	bf00      	nop
}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <UI_parse_message>:
	return UI_F_ERR;
}


int UI_parse_message(UI_typedef* UI_obj,uint8_t* msg)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
 char* pch;
 pch=strtok(msg," ");
 800080e:	4919      	ldr	r1, [pc, #100]	; (8000874 <UI_parse_message+0x70>)
 8000810:	6838      	ldr	r0, [r7, #0]
 8000812:	f012 fbe9 	bl	8012fe8 <strtok>
 8000816:	60b8      	str	r0, [r7, #8]
 for(int i=0;i<UI_MSG_NUM_OF_FUNCTIONS;i++)
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	e022      	b.n	8000864 <UI_parse_message+0x60>
 {
	  if(strcmp(pch,UI_messages_strings[i])==0)
 800081e:	4a16      	ldr	r2, [pc, #88]	; (8000878 <UI_parse_message+0x74>)
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000826:	4619      	mov	r1, r3
 8000828:	68b8      	ldr	r0, [r7, #8]
 800082a:	f7ff fcd1 	bl	80001d0 <strcmp>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d114      	bne.n	800085e <UI_parse_message+0x5a>
		{
			if(UI_functions[i](UI_obj,pch+strlen(pch)+1)==UI_F_OK) return UI_F_OK;
 8000834:	4a11      	ldr	r2, [pc, #68]	; (800087c <UI_parse_message+0x78>)
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800083c:	68b8      	ldr	r0, [r7, #8]
 800083e:	f7ff fcd1 	bl	80001e4 <strlen>
 8000842:	4603      	mov	r3, r0
 8000844:	3301      	adds	r3, #1
 8000846:	68ba      	ldr	r2, [r7, #8]
 8000848:	4413      	add	r3, r2
 800084a:	4619      	mov	r1, r3
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	47a0      	blx	r4
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d101      	bne.n	800085a <UI_parse_message+0x56>
 8000856:	2300      	movs	r3, #0
 8000858:	e008      	b.n	800086c <UI_parse_message+0x68>
      else return UI_F_ERR;
 800085a:	2301      	movs	r3, #1
 800085c:	e006      	b.n	800086c <UI_parse_message+0x68>
 for(int i=0;i<UI_MSG_NUM_OF_FUNCTIONS;i++)
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	3301      	adds	r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2b03      	cmp	r3, #3
 8000868:	ddd9      	ble.n	800081e <UI_parse_message+0x1a>
		}

 }
 return UI_F_ERR;
 800086a:	2301      	movs	r3, #1
}
 800086c:	4618      	mov	r0, r3
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	bd90      	pop	{r4, r7, pc}
 8000874:	08013ffc 	.word	0x08013ffc
 8000878:	20000340 	.word	0x20000340
 800087c:	20000330 	.word	0x20000330

08000880 <UI_messages_init>:

void UI_messages_init(UI_typedef* UI_obj)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	UI_functions[UI_MSG_SET] = UI_MSG_SET_f;
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <UI_messages_init+0x44>)
 800088a:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <UI_messages_init+0x48>)
 800088c:	601a      	str	r2, [r3, #0]
	UI_functions[UI_MSG_SHOW] = UI_MSG_SHOW_f;
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <UI_messages_init+0x44>)
 8000890:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <UI_messages_init+0x4c>)
 8000892:	605a      	str	r2, [r3, #4]
	UI_functions[UI_MSG_RESET] = UI_MSG_RESET_f;
 8000894:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <UI_messages_init+0x44>)
 8000896:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <UI_messages_init+0x50>)
 8000898:	609a      	str	r2, [r3, #8]
	UI_functions[UI_MSG_HELP] = UI_MSG_HELP_f;
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <UI_messages_init+0x44>)
 800089c:	4a0d      	ldr	r2, [pc, #52]	; (80008d4 <UI_messages_init+0x54>)
 800089e:	60da      	str	r2, [r3, #12]

	UI_messages_strings[UI_MSG_SET] = "SET";
 80008a0:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <UI_messages_init+0x58>)
 80008a2:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <UI_messages_init+0x5c>)
 80008a4:	601a      	str	r2, [r3, #0]
	UI_messages_strings[UI_MSG_SHOW] = "SHOW";
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <UI_messages_init+0x58>)
 80008a8:	4a0d      	ldr	r2, [pc, #52]	; (80008e0 <UI_messages_init+0x60>)
 80008aa:	605a      	str	r2, [r3, #4]
	UI_messages_strings[UI_MSG_RESET] = "RESET";
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <UI_messages_init+0x58>)
 80008ae:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <UI_messages_init+0x64>)
 80008b0:	609a      	str	r2, [r3, #8]
	UI_messages_strings[UI_MSG_HELP] = "HELP";
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <UI_messages_init+0x58>)
 80008b4:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <UI_messages_init+0x68>)
 80008b6:	60da      	str	r2, [r3, #12]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	20000330 	.word	0x20000330
 80008c8:	08000acd 	.word	0x08000acd
 80008cc:	080009b5 	.word	0x080009b5
 80008d0:	0800091d 	.word	0x0800091d
 80008d4:	080008ed 	.word	0x080008ed
 80008d8:	20000340 	.word	0x20000340
 80008dc:	08014000 	.word	0x08014000
 80008e0:	08014004 	.word	0x08014004
 80008e4:	0801400c 	.word	0x0801400c
 80008e8:	08014014 	.word	0x08014014

080008ec <UI_MSG_HELP_f>:

int UI_MSG_HELP_f(UI_typedef* UI_obj,uint8_t* msg)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
	char * pch;
	memory_region_pointer ptr;

	pch = strtok (NULL," ");//subcomand
 80008f6:	4908      	ldr	r1, [pc, #32]	; (8000918 <UI_MSG_HELP_f+0x2c>)
 80008f8:	2000      	movs	r0, #0
 80008fa:	f012 fb75 	bl	8012fe8 <strtok>
 80008fe:	6178      	str	r0, [r7, #20]
	osMessagePut(UI_obj->events_q,UI_EVNT_HELP,1);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	2201      	movs	r2, #1
 8000906:	2103      	movs	r1, #3
 8000908:	4618      	mov	r0, r3
 800090a:	f00f fb1f 	bl	800ff4c <osMessagePut>
	return UI_F_OK;
 800090e:	2300      	movs	r3, #0
}
 8000910:	4618      	mov	r0, r3
 8000912:	3718      	adds	r7, #24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	08013ffc 	.word	0x08013ffc

0800091c <UI_MSG_RESET_f>:

int UI_MSG_RESET_f(UI_typedef* UI_obj,uint8_t* msg)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
	char * pch;
	memory_region_pointer ptr;

	pch = strtok (NULL," ");//subcomand
 8000926:	491f      	ldr	r1, [pc, #124]	; (80009a4 <UI_MSG_RESET_f+0x88>)
 8000928:	2000      	movs	r0, #0
 800092a:	f012 fb5d 	bl	8012fe8 <strtok>
 800092e:	6178      	str	r0, [r7, #20]
	if(strcmp(pch,"SETTINGS")==0){
 8000930:	491d      	ldr	r1, [pc, #116]	; (80009a8 <UI_MSG_RESET_f+0x8c>)
 8000932:	6978      	ldr	r0, [r7, #20]
 8000934:	f7ff fc4c 	bl	80001d0 <strcmp>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d126      	bne.n	800098c <UI_MSG_RESET_f+0x70>
		icListen.settings->wav_sample_rate=ICLISTEN_DEFAULT_WAV_SAMPLE_RATE;
 800093e:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <UI_MSG_RESET_f+0x90>)
 8000940:	6a1b      	ldr	r3, [r3, #32]
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]
 8000946:	2200      	movs	r2, #0
 8000948:	f042 027d 	orr.w	r2, r2, #125	; 0x7d
 800094c:	705a      	strb	r2, [r3, #1]
 800094e:	2200      	movs	r2, #0
 8000950:	709a      	strb	r2, [r3, #2]
 8000952:	2200      	movs	r2, #0
 8000954:	70da      	strb	r2, [r3, #3]
		icListen.settings->wav_sample_bit_depth=ICLISTEN_DEFAULT_WAV_SAMPLE_BIT_DEPTH;
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <UI_MSG_RESET_f+0x90>)
 8000958:	6a1b      	ldr	r3, [r3, #32]
 800095a:	2200      	movs	r2, #0
 800095c:	f042 0218 	orr.w	r2, r2, #24
 8000960:	711a      	strb	r2, [r3, #4]
 8000962:	2200      	movs	r2, #0
 8000964:	715a      	strb	r2, [r3, #5]
 8000966:	2200      	movs	r2, #0
 8000968:	719a      	strb	r2, [r3, #6]
 800096a:	2200      	movs	r2, #0
 800096c:	71da      	strb	r2, [r3, #7]
		icListen.settings->file_duration=ICLISTEN_DEFAULT_FILE_DURATION;
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <UI_MSG_RESET_f+0x90>)
 8000970:	6a1b      	ldr	r3, [r3, #32]
 8000972:	2200      	movs	r2, #0
 8000974:	f042 0201 	orr.w	r2, r2, #1
 8000978:	721a      	strb	r2, [r3, #8]
 800097a:	2200      	movs	r2, #0
 800097c:	725a      	strb	r2, [r3, #9]
 800097e:	2200      	movs	r2, #0
 8000980:	729a      	strb	r2, [r3, #10]
 8000982:	2200      	movs	r2, #0
 8000984:	72da      	strb	r2, [r3, #11]
		mcu_flash_save(&mcu_flash);
 8000986:	480a      	ldr	r0, [pc, #40]	; (80009b0 <UI_MSG_RESET_f+0x94>)
 8000988:	f000 ff26 	bl	80017d8 <mcu_flash_save>
	}
	osMessagePut(UI_obj->events_q,UI_EVNT_RESET,1);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	2201      	movs	r2, #1
 8000992:	2102      	movs	r1, #2
 8000994:	4618      	mov	r0, r3
 8000996:	f00f fad9 	bl	800ff4c <osMessagePut>
	return UI_F_OK;
 800099a:	2300      	movs	r3, #0
}
 800099c:	4618      	mov	r0, r3
 800099e:	3718      	adds	r7, #24
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	08013ffc 	.word	0x08013ffc
 80009a8:	0801401c 	.word	0x0801401c
 80009ac:	200006d4 	.word	0x200006d4
 80009b0:	20000c20 	.word	0x20000c20

080009b4 <UI_MSG_SHOW_f>:

int UI_MSG_SHOW_f(UI_typedef* UI_obj,uint8_t* msg)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af04      	add	r7, sp, #16
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
	char * pch;
	pch = strtok (NULL," ");//subcomand
 80009be:	4938      	ldr	r1, [pc, #224]	; (8000aa0 <UI_MSG_SHOW_f+0xec>)
 80009c0:	2000      	movs	r0, #0
 80009c2:	f012 fb11 	bl	8012fe8 <strtok>
 80009c6:	60f8      	str	r0, [r7, #12]

	if(strcmp(pch,"SENSOR")==0){
 80009c8:	4936      	ldr	r1, [pc, #216]	; (8000aa4 <UI_MSG_SHOW_f+0xf0>)
 80009ca:	68f8      	ldr	r0, [r7, #12]
 80009cc:	f7ff fc00 	bl	80001d0 <strcmp>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d120      	bne.n	8000a18 <UI_MSG_SHOW_f+0x64>
		sprintf(temp_array,"Device type: %d\rSerial num: %d\rFW version: %s\rBuild date: %s\rStatus: %d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status);
 80009d6:	4b34      	ldr	r3, [pc, #208]	; (8000aa8 <UI_MSG_SHOW_f+0xf4>)
 80009d8:	7f1b      	ldrb	r3, [r3, #28]
 80009da:	461a      	mov	r2, r3
 80009dc:	4b32      	ldr	r3, [pc, #200]	; (8000aa8 <UI_MSG_SHOW_f+0xf4>)
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	4619      	mov	r1, r3
 80009e2:	4b31      	ldr	r3, [pc, #196]	; (8000aa8 <UI_MSG_SHOW_f+0xf4>)
 80009e4:	7f5b      	ldrb	r3, [r3, #29]
 80009e6:	9302      	str	r3, [sp, #8]
 80009e8:	4b30      	ldr	r3, [pc, #192]	; (8000aac <UI_MSG_SHOW_f+0xf8>)
 80009ea:	9301      	str	r3, [sp, #4]
 80009ec:	4b30      	ldr	r3, [pc, #192]	; (8000ab0 <UI_MSG_SHOW_f+0xfc>)
 80009ee:	9300      	str	r3, [sp, #0]
 80009f0:	460b      	mov	r3, r1
 80009f2:	4930      	ldr	r1, [pc, #192]	; (8000ab4 <UI_MSG_SHOW_f+0x100>)
 80009f4:	4830      	ldr	r0, [pc, #192]	; (8000ab8 <UI_MSG_SHOW_f+0x104>)
 80009f6:	f012 fa93 	bl	8012f20 <siprintf>
		temp_ptr.start_addr=temp_array;
 80009fa:	4b30      	ldr	r3, [pc, #192]	; (8000abc <UI_MSG_SHOW_f+0x108>)
 80009fc:	4a2e      	ldr	r2, [pc, #184]	; (8000ab8 <UI_MSG_SHOW_f+0x104>)
 80009fe:	601a      	str	r2, [r3, #0]
		temp_ptr.size=strlen(temp_array);
 8000a00:	482d      	ldr	r0, [pc, #180]	; (8000ab8 <UI_MSG_SHOW_f+0x104>)
 8000a02:	f7ff fbef 	bl	80001e4 <strlen>
 8000a06:	4603      	mov	r3, r0
 8000a08:	4a2c      	ldr	r2, [pc, #176]	; (8000abc <UI_MSG_SHOW_f+0x108>)
 8000a0a:	6053      	str	r3, [r2, #4]
		UI_send_msg(UI_obj,UI_CMD_SEND_DATA,&temp_ptr);
 8000a0c:	4a2b      	ldr	r2, [pc, #172]	; (8000abc <UI_MSG_SHOW_f+0x108>)
 8000a0e:	2101      	movs	r1, #1
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff feca 	bl	80007aa <UI_send_msg>
 8000a16:	e036      	b.n	8000a86 <UI_MSG_SHOW_f+0xd2>
	}
	else if(strcmp(pch,"SETTINGS")==0){
 8000a18:	4929      	ldr	r1, [pc, #164]	; (8000ac0 <UI_MSG_SHOW_f+0x10c>)
 8000a1a:	68f8      	ldr	r0, [r7, #12]
 8000a1c:	f7ff fbd8 	bl	80001d0 <strcmp>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d11d      	bne.n	8000a62 <UI_MSG_SHOW_f+0xae>
		sprintf(temp_array,"File duration: %d\rWAV sample depth: %d\rWAV sample rate: %d\r",icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate);
 8000a26:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <UI_MSG_SHOW_f+0xf4>)
 8000a28:	6a1b      	ldr	r3, [r3, #32]
 8000a2a:	689a      	ldr	r2, [r3, #8]
 8000a2c:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <UI_MSG_SHOW_f+0xf4>)
 8000a2e:	6a1b      	ldr	r3, [r3, #32]
 8000a30:	6859      	ldr	r1, [r3, #4]
 8000a32:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <UI_MSG_SHOW_f+0xf4>)
 8000a34:	6a1b      	ldr	r3, [r3, #32]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	460b      	mov	r3, r1
 8000a3c:	4921      	ldr	r1, [pc, #132]	; (8000ac4 <UI_MSG_SHOW_f+0x110>)
 8000a3e:	481e      	ldr	r0, [pc, #120]	; (8000ab8 <UI_MSG_SHOW_f+0x104>)
 8000a40:	f012 fa6e 	bl	8012f20 <siprintf>
		temp_ptr.start_addr=temp_array;
 8000a44:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <UI_MSG_SHOW_f+0x108>)
 8000a46:	4a1c      	ldr	r2, [pc, #112]	; (8000ab8 <UI_MSG_SHOW_f+0x104>)
 8000a48:	601a      	str	r2, [r3, #0]
		temp_ptr.size=strlen(temp_array);
 8000a4a:	481b      	ldr	r0, [pc, #108]	; (8000ab8 <UI_MSG_SHOW_f+0x104>)
 8000a4c:	f7ff fbca 	bl	80001e4 <strlen>
 8000a50:	4603      	mov	r3, r0
 8000a52:	4a1a      	ldr	r2, [pc, #104]	; (8000abc <UI_MSG_SHOW_f+0x108>)
 8000a54:	6053      	str	r3, [r2, #4]
		UI_send_msg(UI_obj,UI_CMD_SEND_DATA,&temp_ptr);
 8000a56:	4a19      	ldr	r2, [pc, #100]	; (8000abc <UI_MSG_SHOW_f+0x108>)
 8000a58:	2101      	movs	r1, #1
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f7ff fea5 	bl	80007aa <UI_send_msg>
 8000a60:	e011      	b.n	8000a86 <UI_MSG_SHOW_f+0xd2>
	}
	else{
		sprintf(temp_array,"SETTINGS\rSENSOR\r");
 8000a62:	4919      	ldr	r1, [pc, #100]	; (8000ac8 <UI_MSG_SHOW_f+0x114>)
 8000a64:	4814      	ldr	r0, [pc, #80]	; (8000ab8 <UI_MSG_SHOW_f+0x104>)
 8000a66:	f012 fa5b 	bl	8012f20 <siprintf>
		temp_ptr.start_addr=temp_array;
 8000a6a:	4b14      	ldr	r3, [pc, #80]	; (8000abc <UI_MSG_SHOW_f+0x108>)
 8000a6c:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <UI_MSG_SHOW_f+0x104>)
 8000a6e:	601a      	str	r2, [r3, #0]
		temp_ptr.size=strlen(temp_array);
 8000a70:	4811      	ldr	r0, [pc, #68]	; (8000ab8 <UI_MSG_SHOW_f+0x104>)
 8000a72:	f7ff fbb7 	bl	80001e4 <strlen>
 8000a76:	4603      	mov	r3, r0
 8000a78:	4a10      	ldr	r2, [pc, #64]	; (8000abc <UI_MSG_SHOW_f+0x108>)
 8000a7a:	6053      	str	r3, [r2, #4]
		UI_send_msg(UI_obj,UI_CMD_SEND_DATA,&temp_ptr);
 8000a7c:	4a0f      	ldr	r2, [pc, #60]	; (8000abc <UI_MSG_SHOW_f+0x108>)
 8000a7e:	2101      	movs	r1, #1
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff fe92 	bl	80007aa <UI_send_msg>
	}
	osMessagePut(UI_obj->events_q,UI_EVNT_SHOW,1);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f00f fa5c 	bl	800ff4c <osMessagePut>
	return UI_F_OK;
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	08013ffc 	.word	0x08013ffc
 8000aa4:	08014028 	.word	0x08014028
 8000aa8:	200006d4 	.word	0x200006d4
 8000aac:	200006de 	.word	0x200006de
 8000ab0:	200006d6 	.word	0x200006d6
 8000ab4:	08014030 	.word	0x08014030
 8000ab8:	20000358 	.word	0x20000358
 8000abc:	20000350 	.word	0x20000350
 8000ac0:	0801401c 	.word	0x0801401c
 8000ac4:	0801407c 	.word	0x0801407c
 8000ac8:	080140b8 	.word	0x080140b8

08000acc <UI_MSG_SET_f>:

int UI_MSG_SET_f(UI_typedef* UI_obj,uint8_t* msg)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
	memcpy(UI_obj->date,pch,8);
	pch = strtok (NULL,",");//time
	memcpy(UI_obj->time,pch,6);
    */

	osMessagePut(UI_obj->events_q,UI_EVNT_SET,1);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	2201      	movs	r2, #1
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f00f fa34 	bl	800ff4c <osMessagePut>
	return UI_F_OK;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <crc16_arc_update>:
};



uint16_t crc16_arc_update( char data, uint16_t accum )
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	460a      	mov	r2, r1
 8000afa:	71fb      	strb	r3, [r7, #7]
 8000afc:	4613      	mov	r3, r2
 8000afe:	80bb      	strh	r3, [r7, #4]
  unsigned char comb_value;
  comb_value = ( accum&0x00ff ) ^ (unsigned char)data;
 8000b00:	88bb      	ldrh	r3, [r7, #4]
 8000b02:	b25a      	sxtb	r2, r3
 8000b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b08:	4053      	eors	r3, r2
 8000b0a:	b25b      	sxtb	r3, r3
 8000b0c:	73fb      	strb	r3, [r7, #15]
  accum = ( accum >> 8 ) ^ crc16_arc_table[ comb_value ];
 8000b0e:	88bb      	ldrh	r3, [r7, #4]
 8000b10:	0a1b      	lsrs	r3, r3, #8
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	4906      	ldr	r1, [pc, #24]	; (8000b30 <crc16_arc_update+0x40>)
 8000b18:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000b1c:	4053      	eors	r3, r2
 8000b1e:	80bb      	strh	r3, [r7, #4]
  return ( accum );
 8000b20:	88bb      	ldrh	r3, [r7, #4]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	20000000 	.word	0x20000000

08000b34 <get_crc16_arc>:

uint16_t get_crc16_arc( uint8_t* data,uint16_t length )
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	807b      	strh	r3, [r7, #2]
  uint16_t accm=0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	81fb      	strh	r3, [r7, #14]

  for(int i=0;i<length;i++)
 8000b44:	2300      	movs	r3, #0
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	e00d      	b.n	8000b66 <get_crc16_arc+0x32>
  {
    accm=crc16_arc_update(data[i], accm);
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	4413      	add	r3, r2
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	89fa      	ldrh	r2, [r7, #14]
 8000b54:	4611      	mov	r1, r2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff ffca 	bl	8000af0 <crc16_arc_update>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	81fb      	strh	r3, [r7, #14]
  for(int i=0;i<length;i++)
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	3301      	adds	r3, #1
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	887b      	ldrh	r3, [r7, #2]
 8000b68:	68ba      	ldr	r2, [r7, #8]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	dbed      	blt.n	8000b4a <get_crc16_arc+0x16>
  }

  return accm;
 8000b6e:	89fb      	ldrh	r3, [r7, #14]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <sd_storage_disk_init>:

extern ss_pp sd_cards_ss[4];
extern UART_HandleTypeDef huart1;

F_RES sd_storage_disk_init(FATFS* fs,char* path)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
	if(f_mount(fs,path,1)==FR_OK) return F_OK;
 8000b82:	2201      	movs	r2, #1
 8000b84:	6839      	ldr	r1, [r7, #0]
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f00d fd32 	bl	800e5f0 <f_mount>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d101      	bne.n	8000b96 <sd_storage_disk_init+0x1e>
 8000b92:	2300      	movs	r3, #0
 8000b94:	e000      	b.n	8000b98 <sd_storage_disk_init+0x20>
	else return F_ERR;
 8000b96:	2301      	movs	r3, #1
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <sd_storage_init>:
F_RES sd_storage_init(sd_storage_t* self_object)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  //char t5[10];
  FRESULT res;
  DWORD fre_clust, fre_sect, tot_sect;
  FATFS*  fs;

  MX_FATFS_Init();
 8000ba8:	f007 fc38 	bl	800841c <MX_FATFS_Init>

  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000bac:	2300      	movs	r3, #0
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
 8000bb0:	e078      	b.n	8000ca4 <sd_storage_init+0x104>
  {
	  sprintf(tt,"%d:",i);
 8000bb2:	f107 0310 	add.w	r3, r7, #16
 8000bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bb8:	493e      	ldr	r1, [pc, #248]	; (8000cb4 <sd_storage_init+0x114>)
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f012 f9b0 	bl	8012f20 <siprintf>
	  if(sd_storage_disk_init(&self_object->disks[i].fs,tt)==F_OK){
 8000bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc2:	f44f 7211 	mov.w	r2, #580	; 0x244
 8000bc6:	fb02 f303 	mul.w	r3, r2, r3
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	f107 0210 	add.w	r2, r7, #16
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ffcf 	bl	8000b78 <sd_storage_disk_init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d153      	bne.n	8000c88 <sd_storage_init+0xe8>
		  self_object->disks[i].status=DISK_PRESENT;
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be4:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000be8:	fb01 f303 	mul.w	r3, r1, r3
 8000bec:	4413      	add	r3, r2
 8000bee:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
		  //sprintf(t5,"InitID:%d\n",i);
  		  if(f_getfree(tt, &fre_clust, &fs)==FR_OK){
 8000bf6:	f107 0208 	add.w	r2, r7, #8
 8000bfa:	f107 010c 	add.w	r1, r7, #12
 8000bfe:	f107 0310 	add.w	r3, r7, #16
 8000c02:	4618      	mov	r0, r3
 8000c04:	f00e fec3 	bl	800f98e <f_getfree>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d147      	bne.n	8000c9e <sd_storage_init+0xfe>
		    tot_sect = (self_object->disks[i].fs.n_fatent - 2) * self_object->disks[i].fs.csize;
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c12:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000c16:	fb01 f303 	mul.w	r3, r1, r3
 8000c1a:	4413      	add	r3, r2
 8000c1c:	331c      	adds	r3, #28
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	3b02      	subs	r3, #2
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c26:	f44f 7011 	mov.w	r0, #580	; 0x244
 8000c2a:	fb00 f202 	mul.w	r2, r0, r2
 8000c2e:	440a      	add	r2, r1
 8000c30:	320a      	adds	r2, #10
 8000c32:	8812      	ldrh	r2, [r2, #0]
 8000c34:	fb02 f303 	mul.w	r3, r2, r3
 8000c38:	623b      	str	r3, [r7, #32]
			fre_sect = fre_clust * self_object->disks[i].fs.csize;
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3e:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000c42:	fb01 f303 	mul.w	r3, r1, r3
 8000c46:	4413      	add	r3, r2
 8000c48:	330a      	adds	r3, #10
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	fb02 f303 	mul.w	r3, r2, r3
 8000c54:	61fb      	str	r3, [r7, #28]
			self_object->disks[i].size=tot_sect/2;
 8000c56:	6a3b      	ldr	r3, [r7, #32]
 8000c58:	085a      	lsrs	r2, r3, #1
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5e:	f44f 7011 	mov.w	r0, #580	; 0x244
 8000c62:	fb00 f303 	mul.w	r3, r0, r3
 8000c66:	440b      	add	r3, r1
 8000c68:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000c6c:	601a      	str	r2, [r3, #0]
			self_object->disks[i].free_space=fre_sect/2;
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	085a      	lsrs	r2, r3, #1
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c76:	f44f 7011 	mov.w	r0, #580	; 0x244
 8000c7a:	fb00 f303 	mul.w	r3, r0, r3
 8000c7e:	440b      	add	r3, r1
 8000c80:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	e00a      	b.n	8000c9e <sd_storage_init+0xfe>
		  }
	  }
	  else
	  {
		 self_object->disks[i].status=DISK_ABSENT;
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8c:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000c90:	fb01 f303 	mul.w	r3, r1, r3
 8000c94:	4413      	add	r3, r2
 8000c96:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca6:	2b03      	cmp	r3, #3
 8000ca8:	dd83      	ble.n	8000bb2 <sd_storage_init+0x12>
	  }
  }
  return F_OK;
 8000caa:	2300      	movs	r3, #0
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3728      	adds	r7, #40	; 0x28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	080140cc 	.word	0x080140cc

08000cb8 <sd_storage_link_ss>:

F_RES sd_storage_link_ss(sd_storage_t* self_object,uint8_t disk_num, uint16_t sd_ss_pin,GPIO_TypeDef* sd_ss_port)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	72fb      	strb	r3, [r7, #11]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	813b      	strh	r3, [r7, #8]
	  sd_cards_ss[disk_num].sd_ss_pin=sd_ss_pin;
 8000cca:	7afb      	ldrb	r3, [r7, #11]
 8000ccc:	4908      	ldr	r1, [pc, #32]	; (8000cf0 <sd_storage_link_ss+0x38>)
 8000cce:	893a      	ldrh	r2, [r7, #8]
 8000cd0:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
	  sd_cards_ss[disk_num].sd_ss_port=sd_ss_port;
 8000cd4:	7afb      	ldrb	r3, [r7, #11]
 8000cd6:	4a06      	ldr	r2, [pc, #24]	; (8000cf0 <sd_storage_link_ss+0x38>)
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	4413      	add	r3, r2
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	605a      	str	r2, [r3, #4]
	  return F_OK;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20001914 	.word	0x20001914

08000cf4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4a07      	ldr	r2, [pc, #28]	; (8000d20 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	4a06      	ldr	r2, [pc, #24]	; (8000d24 <vApplicationGetIdleTaskMemory+0x30>)
 8000d0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2280      	movs	r2, #128	; 0x80
 8000d10:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d12:	bf00      	nop
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000420 	.word	0x20000420
 8000d24:	200004d4 	.word	0x200004d4

08000d28 <icListen_prepare_collect_msg>:
	msg->basic_hdr.length=sizeof(icListen_setup_full_msg)-4-2;
	msg->crc=get_crc16_arc((uint8_t*)msg,sizeof(icListen_setup_full_msg)-2);
}

void icListen_prepare_collect_msg(icListen_collect_short_mask_msg* msg,uint8_t mask)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	70fb      	strb	r3, [r7, #3]
	msg->basic_hdr.sync=MSG_SYNC;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	222a      	movs	r2, #42	; 0x2a
 8000d38:	701a      	strb	r2, [r3, #0]
    msg->basic_hdr.type=MSG_TYPE_COLLECT_DATA;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2243      	movs	r2, #67	; 0x43
 8000d3e:	705a      	strb	r2, [r3, #1]
    msg->mask_hdr.mask=mask;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	78fa      	ldrb	r2, [r7, #3]
 8000d44:	711a      	strb	r2, [r3, #4]
    msg->basic_hdr.length=1;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f042 0201 	orr.w	r2, r2, #1
 8000d4e:	709a      	strb	r2, [r3, #2]
 8000d50:	2200      	movs	r2, #0
 8000d52:	70da      	strb	r2, [r3, #3]
	msg->crc=get_crc16_arc((uint8_t*)msg,sizeof(icListen_collect_short_mask_msg)-2);
 8000d54:	2105      	movs	r1, #5
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff feec 	bl	8000b34 <get_crc16_arc>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	461a      	mov	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f8a3 2005 	strh.w	r2, [r3, #5]
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <icListen_parse_msg>:
	msg->crc=get_crc16_arc((uint8_t*)msg,sizeof(icListen_enquire_device_msg)-2);

}

F_RES icListen_parse_msg(uint8_t* msg,icListen_object_typedef* self_object)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]

	icListen_basic_header* basic_header=(icListen_basic_header*)msg;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	617b      	str	r3, [r7, #20]
	icListen_status_basic_msg* status_msg=(icListen_status_basic_msg*)msg;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	613b      	str	r3, [r7, #16]

	uint16_t crc_msg=*(uint16_t*)(msg+basic_header->length+4);
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	885b      	ldrh	r3, [r3, #2]
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	3304      	adds	r3, #4
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	881b      	ldrh	r3, [r3, #0]
 8000d90:	81fb      	strh	r3, [r7, #14]

	if(basic_header->sync==MSG_SYNC){
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b2a      	cmp	r3, #42	; 0x2a
 8000d98:	d14a      	bne.n	8000e30 <icListen_parse_msg+0xc0>

	switch(basic_header->type){
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	785b      	ldrb	r3, [r3, #1]
 8000d9e:	2b43      	cmp	r3, #67	; 0x43
 8000da0:	d033      	beq.n	8000e0a <icListen_parse_msg+0x9a>
 8000da2:	2b45      	cmp	r3, #69	; 0x45
 8000da4:	d146      	bne.n	8000e34 <icListen_parse_msg+0xc4>
	     case MSG_TYPE_ENQUIRE_DEVICE:
	    	 if(crc_msg==get_crc16_arc(msg,(uint16_t)basic_header->length+4)){
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	885b      	ldrh	r3, [r3, #2]
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	3304      	adds	r3, #4
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	4619      	mov	r1, r3
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff febe 	bl	8000b34 <get_crc16_arc>
 8000db8:	4603      	mov	r3, r0
 8000dba:	461a      	mov	r2, r3
 8000dbc:	89fb      	ldrh	r3, [r7, #14]
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d121      	bne.n	8000e06 <icListen_parse_msg+0x96>
		    	  self_object->status=status_msg->status;
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	775a      	strb	r2, [r3, #29]
		    	  memcpy(self_object->build_date,status_msg->build_date,18);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	f103 000a 	add.w	r0, r3, #10
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	330e      	adds	r3, #14
 8000dd6:	2212      	movs	r2, #18
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f011 ff31 	bl	8012c40 <memcpy>
		    	  memcpy(self_object->firmware_version,status_msg->firmware_version,8);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	1c98      	adds	r0, r3, #2
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	3306      	adds	r3, #6
 8000de6:	2208      	movs	r2, #8
 8000de8:	4619      	mov	r1, r3
 8000dea:	f011 ff29 	bl	8012c40 <memcpy>
		    	  self_object->serial_number=status_msg->serial_number;
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	889b      	ldrh	r3, [r3, #4]
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	801a      	strh	r2, [r3, #0]
		    	  self_object->device_type=status_msg->device_type;
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	771a      	strb	r2, [r3, #28]
		    	  return F_OK;
 8000e02:	2300      	movs	r3, #0
 8000e04:	e017      	b.n	8000e36 <icListen_parse_msg+0xc6>
	    	  }
	    	 else return F_ERR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e015      	b.n	8000e36 <icListen_parse_msg+0xc6>
	     break;
		 case MSG_TYPE_COLLECT_DATA:
		    	  msg_ptr2.start_addr=msg+sizeof(icListen_basic_header);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	4a0c      	ldr	r2, [pc, #48]	; (8000e40 <icListen_parse_msg+0xd0>)
 8000e10:	6013      	str	r3, [r2, #0]
		    	  msg_ptr2.size=basic_header->length;
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	885b      	ldrh	r3, [r3, #2]
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <icListen_parse_msg+0xd0>)
 8000e1c:	605a      	str	r2, [r3, #4]
		    	  osMessagePut(storage_wHandle,&msg_ptr2,0);
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <icListen_parse_msg+0xd4>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4907      	ldr	r1, [pc, #28]	; (8000e40 <icListen_parse_msg+0xd0>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f00f f890 	bl	800ff4c <osMessagePut>
		    	  return F_OK;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	e002      	b.n	8000e36 <icListen_parse_msg+0xc6>
		 break;
	 };
	}
	else{
		return F_ERR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	e000      	b.n	8000e36 <icListen_parse_msg+0xc6>
	}
	return F_ERR;
 8000e34:	2301      	movs	r3, #1
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200006f8 	.word	0x200006f8
 8000e44:	20000800 	.word	0x20000800

08000e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e48:	b5b0      	push	{r4, r5, r7, lr}
 8000e4a:	b0ac      	sub	sp, #176	; 0xb0
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e4e:	f001 fabb 	bl	80023c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e52:	f000 f8c3 	bl	8000fdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e56:	f000 f9d7 	bl	8001208 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e5a:	f000 f929 	bl	80010b0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000e5e:	f000 f9a9 	bl	80011b4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000e62:	f000 f95b 	bl	800111c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  UI_init(&user_interface);
 8000e66:	484a      	ldr	r0, [pc, #296]	; (8000f90 <main+0x148>)
 8000e68:	f7ff fb9c 	bl	80005a4 <UI_init>
  HAL_UART_Receive_IT(&UI_UART,&(user_interface.media_rx_byte),1);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	4949      	ldr	r1, [pc, #292]	; (8000f94 <main+0x14c>)
 8000e70:	4849      	ldr	r0, [pc, #292]	; (8000f98 <main+0x150>)
 8000e72:	f005 fb5f 	bl	8006534 <HAL_UART_Receive_IT>

  mcu_flash_init(&mcu_flash,FLASH_SECTOR_11);
 8000e76:	210b      	movs	r1, #11
 8000e78:	4848      	ldr	r0, [pc, #288]	; (8000f9c <main+0x154>)
 8000e7a:	f000 fc3b 	bl	80016f4 <mcu_flash_init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of AppliEvent */
  osMessageQDef(AppliEvent, 16, uint16_t);
 8000e7e:	4b48      	ldr	r3, [pc, #288]	; (8000fa0 <main+0x158>)
 8000e80:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8000e84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  AppliEventHandle = osMessageCreate(osMessageQ(AppliEvent), NULL);
 8000e8a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f00f f832 	bl	800fefa <osMessageCreate>
 8000e96:	4603      	mov	r3, r0
 8000e98:	4a42      	ldr	r2, [pc, #264]	; (8000fa4 <main+0x15c>)
 8000e9a:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_rx */
  osMessageQDef(USB_rx, 10, uint32_t);
 8000e9c:	4b42      	ldr	r3, [pc, #264]	; (8000fa8 <main+0x160>)
 8000e9e:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000ea2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ea4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  USB_rxHandle = osMessageCreate(osMessageQ(USB_rx), NULL);
 8000ea8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f00f f823 	bl	800fefa <osMessageCreate>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	4a3d      	ldr	r2, [pc, #244]	; (8000fac <main+0x164>)
 8000eb8:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_tx */
  osMessageQDef(USB_tx, 10, uint32_t);
 8000eba:	4b3b      	ldr	r3, [pc, #236]	; (8000fa8 <main+0x160>)
 8000ebc:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8000ec0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ec2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  USB_txHandle = osMessageCreate(osMessageQ(USB_tx), NULL);
 8000ec6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f00f f814 	bl	800fefa <osMessageCreate>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	4a36      	ldr	r2, [pc, #216]	; (8000fb0 <main+0x168>)
 8000ed6:	6013      	str	r3, [r2, #0]

  /* definition and creation of storage_w */
  osMessageQDef(storage_w, 5, uint32_t);
 8000ed8:	4b36      	ldr	r3, [pc, #216]	; (8000fb4 <main+0x16c>)
 8000eda:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000ede:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ee0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  storage_wHandle = osMessageCreate(osMessageQ(storage_w), NULL);
 8000ee4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f00f f805 	bl	800fefa <osMessageCreate>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	4a31      	ldr	r2, [pc, #196]	; (8000fb8 <main+0x170>)
 8000ef4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000ef6:	4b31      	ldr	r3, [pc, #196]	; (8000fbc <main+0x174>)
 8000ef8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000efc:	461d      	mov	r5, r3
 8000efe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000f0a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f00e ff92 	bl	800fe3a <osThreadCreate>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4a29      	ldr	r2, [pc, #164]	; (8000fc0 <main+0x178>)
 8000f1a:	6013      	str	r3, [r2, #0]

  /* definition and creation of storage_t */
  osThreadDef(storage_t, storage_f, osPriorityNormal, 0, 512);
 8000f1c:	4b29      	ldr	r3, [pc, #164]	; (8000fc4 <main+0x17c>)
 8000f1e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000f22:	461d      	mov	r5, r3
 8000f24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  storage_tHandle = osThreadCreate(osThread(storage_t), NULL);
 8000f30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f00e ff7f 	bl	800fe3a <osThreadCreate>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4a22      	ldr	r2, [pc, #136]	; (8000fc8 <main+0x180>)
 8000f40:	6013      	str	r3, [r2, #0]

  /* definition and creation of main_t */
  osThreadDef(main_t, main_f, osPriorityNormal, 0, 512);
 8000f42:	4b22      	ldr	r3, [pc, #136]	; (8000fcc <main+0x184>)
 8000f44:	f107 041c 	add.w	r4, r7, #28
 8000f48:	461d      	mov	r5, r3
 8000f4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  main_tHandle = osThreadCreate(osThread(main_t), NULL);
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f00e ff6c 	bl	800fe3a <osThreadCreate>
 8000f62:	4603      	mov	r3, r0
 8000f64:	4a1a      	ldr	r2, [pc, #104]	; (8000fd0 <main+0x188>)
 8000f66:	6013      	str	r3, [r2, #0]

  /* definition and creation of uart_t */
  osThreadDef(uart_t, uart_f, osPriorityNormal, 0, 256);
 8000f68:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <main+0x18c>)
 8000f6a:	463c      	mov	r4, r7
 8000f6c:	461d      	mov	r5, r3
 8000f6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart_tHandle = osThreadCreate(osThread(uart_t), NULL);
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f00e ff5b 	bl	800fe3a <osThreadCreate>
 8000f84:	4603      	mov	r3, r0
 8000f86:	4a14      	ldr	r2, [pc, #80]	; (8000fd8 <main+0x190>)
 8000f88:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f8a:	f00e ff4f 	bl	800fe2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <main+0x146>
 8000f90:	2000080c 	.word	0x2000080c
 8000f94:	20000818 	.word	0x20000818
 8000f98:	200007a0 	.word	0x200007a0
 8000f9c:	20000c20 	.word	0x20000c20
 8000fa0:	080140f8 	.word	0x080140f8
 8000fa4:	200007f4 	.word	0x200007f4
 8000fa8:	08014108 	.word	0x08014108
 8000fac:	200007f8 	.word	0x200007f8
 8000fb0:	200007fc 	.word	0x200007fc
 8000fb4:	08014118 	.word	0x08014118
 8000fb8:	20000800 	.word	0x20000800
 8000fbc:	08014128 	.word	0x08014128
 8000fc0:	200007e4 	.word	0x200007e4
 8000fc4:	08014144 	.word	0x08014144
 8000fc8:	200007e8 	.word	0x200007e8
 8000fcc:	08014160 	.word	0x08014160
 8000fd0:	200007ec 	.word	0x200007ec
 8000fd4:	0801417c 	.word	0x0801417c
 8000fd8:	200007f0 	.word	0x200007f0

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b094      	sub	sp, #80	; 0x50
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	f107 0320 	add.w	r3, r7, #32
 8000fe6:	2230      	movs	r2, #48	; 0x30
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f011 fe36 	bl	8012c5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <SystemClock_Config+0xcc>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	4a27      	ldr	r2, [pc, #156]	; (80010a8 <SystemClock_Config+0xcc>)
 800100a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100e:	6413      	str	r3, [r2, #64]	; 0x40
 8001010:	4b25      	ldr	r3, [pc, #148]	; (80010a8 <SystemClock_Config+0xcc>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800101c:	2300      	movs	r3, #0
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	4b22      	ldr	r3, [pc, #136]	; (80010ac <SystemClock_Config+0xd0>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a21      	ldr	r2, [pc, #132]	; (80010ac <SystemClock_Config+0xd0>)
 8001026:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <SystemClock_Config+0xd0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001038:	2301      	movs	r3, #1
 800103a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800103c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001042:	2302      	movs	r3, #2
 8001044:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001046:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800104a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800104c:	230f      	movs	r3, #15
 800104e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001050:	2390      	movs	r3, #144	; 0x90
 8001052:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001054:	2302      	movs	r3, #2
 8001056:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001058:	2305      	movs	r3, #5
 800105a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105c:	f107 0320 	add.w	r3, r7, #32
 8001060:	4618      	mov	r0, r3
 8001062:	f003 fc23 	bl	80048ac <HAL_RCC_OscConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800106c:	f000 fb3c 	bl	80016e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001070:	230f      	movs	r3, #15
 8001072:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001074:	2302      	movs	r3, #2
 8001076:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800107c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001080:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001086:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	2103      	movs	r1, #3
 800108e:	4618      	mov	r0, r3
 8001090:	f003 fe84 	bl	8004d9c <HAL_RCC_ClockConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800109a:	f000 fb25 	bl	80016e8 <Error_Handler>
  }
}
 800109e:	bf00      	nop
 80010a0:	3750      	adds	r7, #80	; 0x50
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40007000 	.word	0x40007000

080010b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010b4:	4b17      	ldr	r3, [pc, #92]	; (8001114 <MX_SPI1_Init+0x64>)
 80010b6:	4a18      	ldr	r2, [pc, #96]	; (8001118 <MX_SPI1_Init+0x68>)
 80010b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010ba:	4b16      	ldr	r3, [pc, #88]	; (8001114 <MX_SPI1_Init+0x64>)
 80010bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010c2:	4b14      	ldr	r3, [pc, #80]	; (8001114 <MX_SPI1_Init+0x64>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <MX_SPI1_Init+0x64>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_SPI1_Init+0x64>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <MX_SPI1_Init+0x64>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <MX_SPI1_Init+0x64>)
 80010dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80010e2:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <MX_SPI1_Init+0x64>)
 80010e4:	2208      	movs	r2, #8
 80010e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010e8:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <MX_SPI1_Init+0x64>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <MX_SPI1_Init+0x64>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <MX_SPI1_Init+0x64>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <MX_SPI1_Init+0x64>)
 80010fc:	220a      	movs	r2, #10
 80010fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001100:	4804      	ldr	r0, [pc, #16]	; (8001114 <MX_SPI1_Init+0x64>)
 8001102:	f004 f85d 	bl	80051c0 <HAL_SPI_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800110c:	f000 faec 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000700 	.word	0x20000700
 8001118:	40013000 	.word	0x40013000

0800111c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001130:	463b      	mov	r3, r7
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001138:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <MX_TIM2_Init+0x94>)
 800113a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800113e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001140:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <MX_TIM2_Init+0x94>)
 8001142:	2200      	movs	r2, #0
 8001144:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001146:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <MX_TIM2_Init+0x94>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800114c:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <MX_TIM2_Init+0x94>)
 800114e:	f04f 32ff 	mov.w	r2, #4294967295
 8001152:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001154:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <MX_TIM2_Init+0x94>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <MX_TIM2_Init+0x94>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001160:	4813      	ldr	r0, [pc, #76]	; (80011b0 <MX_TIM2_Init+0x94>)
 8001162:	f004 fc41 	bl	80059e8 <HAL_TIM_Base_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800116c:	f000 fabc 	bl	80016e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001170:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001174:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001176:	f107 0308 	add.w	r3, r7, #8
 800117a:	4619      	mov	r1, r3
 800117c:	480c      	ldr	r0, [pc, #48]	; (80011b0 <MX_TIM2_Init+0x94>)
 800117e:	f004 fdfb 	bl	8005d78 <HAL_TIM_ConfigClockSource>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001188:	f000 faae 	bl	80016e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118c:	2300      	movs	r3, #0
 800118e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001194:	463b      	mov	r3, r7
 8001196:	4619      	mov	r1, r3
 8001198:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_TIM2_Init+0x94>)
 800119a:	f005 f817 	bl	80061cc <HAL_TIMEx_MasterConfigSynchronization>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011a4:	f000 faa0 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000758 	.word	0x20000758

080011b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_USART1_UART_Init+0x4c>)
 80011ba:	4a12      	ldr	r2, [pc, #72]	; (8001204 <MX_USART1_UART_Init+0x50>)
 80011bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <MX_USART1_UART_Init+0x4c>)
 80011c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_USART1_UART_Init+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_USART1_UART_Init+0x4c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <MX_USART1_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011d8:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_USART1_UART_Init+0x4c>)
 80011da:	220c      	movs	r2, #12
 80011dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <MX_USART1_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_USART1_UART_Init+0x4c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_USART1_UART_Init+0x4c>)
 80011ec:	f005 f87e 	bl	80062ec <HAL_UART_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011f6:	f000 fa77 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200007a0 	.word	0x200007a0
 8001204:	40011000 	.word	0x40011000

08001208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	4b39      	ldr	r3, [pc, #228]	; (8001308 <MX_GPIO_Init+0x100>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a38      	ldr	r2, [pc, #224]	; (8001308 <MX_GPIO_Init+0x100>)
 8001228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b36      	ldr	r3, [pc, #216]	; (8001308 <MX_GPIO_Init+0x100>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b32      	ldr	r3, [pc, #200]	; (8001308 <MX_GPIO_Init+0x100>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a31      	ldr	r2, [pc, #196]	; (8001308 <MX_GPIO_Init+0x100>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b2f      	ldr	r3, [pc, #188]	; (8001308 <MX_GPIO_Init+0x100>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	4b2b      	ldr	r3, [pc, #172]	; (8001308 <MX_GPIO_Init+0x100>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a2a      	ldr	r2, [pc, #168]	; (8001308 <MX_GPIO_Init+0x100>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b28      	ldr	r3, [pc, #160]	; (8001308 <MX_GPIO_Init+0x100>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	4b24      	ldr	r3, [pc, #144]	; (8001308 <MX_GPIO_Init+0x100>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a23      	ldr	r2, [pc, #140]	; (8001308 <MX_GPIO_Init+0x100>)
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b21      	ldr	r3, [pc, #132]	; (8001308 <MX_GPIO_Init+0x100>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_SD3_GPIO_Port, SS_SD3_Pin, GPIO_PIN_SET);
 800128e:	2201      	movs	r2, #1
 8001290:	2102      	movs	r1, #2
 8001292:	481e      	ldr	r0, [pc, #120]	; (800130c <MX_GPIO_Init+0x104>)
 8001294:	f001 fee6 	bl	8003064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin, GPIO_PIN_SET);
 8001298:	2201      	movs	r2, #1
 800129a:	2186      	movs	r1, #134	; 0x86
 800129c:	481c      	ldr	r0, [pc, #112]	; (8001310 <MX_GPIO_Init+0x108>)
 800129e:	f001 fee1 	bl	8003064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_VBUS_GPIO_Port, USB_VBUS_Pin, GPIO_PIN_SET);
 80012a2:	2201      	movs	r2, #1
 80012a4:	2101      	movs	r1, #1
 80012a6:	481b      	ldr	r0, [pc, #108]	; (8001314 <MX_GPIO_Init+0x10c>)
 80012a8:	f001 fedc 	bl	8003064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SS_SD3_Pin */
  GPIO_InitStruct.Pin = SS_SD3_Pin;
 80012ac:	2302      	movs	r3, #2
 80012ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SS_SD3_GPIO_Port, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	4812      	ldr	r0, [pc, #72]	; (800130c <MX_GPIO_Init+0x104>)
 80012c4:	f001 fd32 	bl	8002d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : SS_SD1_Pin SS_SD2_Pin SS_SD4_Pin */
  GPIO_InitStruct.Pin = SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin;
 80012c8:	2386      	movs	r3, #134	; 0x86
 80012ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	480c      	ldr	r0, [pc, #48]	; (8001310 <MX_GPIO_Init+0x108>)
 80012e0:	f001 fd24 	bl	8002d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80012e4:	2301      	movs	r3, #1
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	4806      	ldr	r0, [pc, #24]	; (8001314 <MX_GPIO_Init+0x10c>)
 80012fc:	f001 fd16 	bl	8002d2c <HAL_GPIO_Init>

}
 8001300:	bf00      	nop
 8001302:	3728      	adds	r7, #40	; 0x28
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40023800 	.word	0x40023800
 800130c:	40020800 	.word	0x40020800
 8001310:	40020000 	.word	0x40020000
 8001314:	40020400 	.word	0x40020400

08001318 <HAL_UART_RxCpltCallback>:

uint8_t tmp1;
uint8_t tmp2;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 if(huart==&UI_UART)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a09      	ldr	r2, [pc, #36]	; (8001348 <HAL_UART_RxCpltCallback+0x30>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d10a      	bne.n	800133e <HAL_UART_RxCpltCallback+0x26>
 {
	 UI_media_process_byte(&user_interface,user_interface.media_rx_byte);
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <HAL_UART_RxCpltCallback+0x34>)
 800132a:	7b1b      	ldrb	r3, [r3, #12]
 800132c:	4619      	mov	r1, r3
 800132e:	4807      	ldr	r0, [pc, #28]	; (800134c <HAL_UART_RxCpltCallback+0x34>)
 8001330:	f7ff f9a2 	bl	8000678 <UI_media_process_byte>
	 HAL_UART_Receive_IT(&UI_UART,&(user_interface.media_rx_byte),1);
 8001334:	2201      	movs	r2, #1
 8001336:	4906      	ldr	r1, [pc, #24]	; (8001350 <HAL_UART_RxCpltCallback+0x38>)
 8001338:	4803      	ldr	r0, [pc, #12]	; (8001348 <HAL_UART_RxCpltCallback+0x30>)
 800133a:	f005 f8fb 	bl	8006534 <HAL_UART_Receive_IT>
 }
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200007a0 	.word	0x200007a0
 800134c:	2000080c 	.word	0x2000080c
 8001350:	20000818 	.word	0x20000818

08001354 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

 if(huart==&UI_UART)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a09      	ldr	r2, [pc, #36]	; (8001384 <HAL_UART_TxCpltCallback+0x30>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d10b      	bne.n	800137c <HAL_UART_TxCpltCallback+0x28>
 {
	 if(UI_media_get_byte(&user_interface,&tmp2)==UI_F_OK)
 8001364:	4908      	ldr	r1, [pc, #32]	; (8001388 <HAL_UART_TxCpltCallback+0x34>)
 8001366:	4809      	ldr	r0, [pc, #36]	; (800138c <HAL_UART_TxCpltCallback+0x38>)
 8001368:	f7ff fa04 	bl	8000774 <UI_media_get_byte>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d104      	bne.n	800137c <HAL_UART_TxCpltCallback+0x28>
	 {
	    HAL_UART_Transmit_IT(&UI_UART,&tmp2,1);
 8001372:	2201      	movs	r2, #1
 8001374:	4904      	ldr	r1, [pc, #16]	; (8001388 <HAL_UART_TxCpltCallback+0x34>)
 8001376:	4803      	ldr	r0, [pc, #12]	; (8001384 <HAL_UART_TxCpltCallback+0x30>)
 8001378:	f005 f897 	bl	80064aa <HAL_UART_Transmit_IT>
	 }
 }
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	200007a0 	.word	0x200007a0
 8001388:	20001908 	.word	0x20001908
 800138c:	2000080c 	.word	0x2000080c

08001390 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001398:	f011 f816 	bl	80123c8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
   osEvent event;
  /* Infinite loop */
  for(;;)
  {
	  event = osMessageGet(AppliEventHandle, osWaitForever);
 800139c:	4b17      	ldr	r3, [pc, #92]	; (80013fc <StartDefaultTask+0x6c>)
 800139e:	6819      	ldr	r1, [r3, #0]
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	f04f 32ff 	mov.w	r2, #4294967295
 80013a8:	4618      	mov	r0, r3
 80013aa:	f00e fe0f 	bl	800ffcc <osMessageGet>

	  if(event.status == osEventMessage)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2b10      	cmp	r3, #16
 80013b2:	d11f      	bne.n	80013f4 <StartDefaultTask+0x64>
	  {
		switch(event.value.v)
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	d006      	beq.n	80013c8 <StartDefaultTask+0x38>
 80013ba:	2b03      	cmp	r3, #3
 80013bc:	d81c      	bhi.n	80013f8 <StartDefaultTask+0x68>
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d015      	beq.n	80013ee <StartDefaultTask+0x5e>
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d004      	beq.n	80013d0 <StartDefaultTask+0x40>
		 case APPLICATION_START:
		   USB_set_line_coding();
		 break;

		 default:
		 break;
 80013c6:	e017      	b.n	80013f8 <StartDefaultTask+0x68>
			 icListen.status=DISCONNECTED;
 80013c8:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <StartDefaultTask+0x70>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	775a      	strb	r2, [r3, #29]
		 break;
 80013ce:	e014      	b.n	80013fa <StartDefaultTask+0x6a>
			 osDelay(5000);
 80013d0:	f241 3088 	movw	r0, #5000	; 0x1388
 80013d4:	f00e fd7d 	bl	800fed2 <osDelay>
			 icListen.status=CONNECTED;
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <StartDefaultTask+0x70>)
 80013da:	2200      	movs	r2, #0
 80013dc:	775a      	strb	r2, [r3, #29]
			 osMessagePut(USB_txHandle,&collect_msg_ptr, 0);
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <StartDefaultTask+0x74>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4909      	ldr	r1, [pc, #36]	; (8001408 <StartDefaultTask+0x78>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f00e fdb0 	bl	800ff4c <osMessagePut>
		 break;
 80013ec:	e005      	b.n	80013fa <StartDefaultTask+0x6a>
		   USB_set_line_coding();
 80013ee:	f010 ffbd 	bl	801236c <USB_set_line_coding>
		 break;
 80013f2:	e002      	b.n	80013fa <StartDefaultTask+0x6a>
		 }
	   }
 80013f4:	bf00      	nop
 80013f6:	e7d1      	b.n	800139c <StartDefaultTask+0xc>
		 break;
 80013f8:	bf00      	nop
	  event = osMessageGet(AppliEventHandle, osWaitForever);
 80013fa:	e7cf      	b.n	800139c <StartDefaultTask+0xc>
 80013fc:	200007f4 	.word	0x200007f4
 8001400:	200006d4 	.word	0x200006d4
 8001404:	200007fc 	.word	0x200007fc
 8001408:	20000804 	.word	0x20000804

0800140c <storage_f>:
* @retval None
*/

/* USER CODE END Header_storage_f */
void storage_f(void const * argument)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08e      	sub	sp, #56	; 0x38
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN storage_f */
  osDelay(500);
 8001414:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001418:	f00e fd5b 	bl	800fed2 <osDelay>
  char ttr[20];
  memory_region_pointer msg_ptr;
  memory_region_pointer* data_ptr;
  msg_ptr.start_addr=ttr;
 800141c:	f107 0320 	add.w	r3, r7, #32
 8001420:	61bb      	str	r3, [r7, #24]

  osEvent storage_w_event;

  sd_storage_link_ss(&microsd_storage,0,SS_SD1_Pin,GPIOA);
 8001422:	4b40      	ldr	r3, [pc, #256]	; (8001524 <storage_f+0x118>)
 8001424:	2202      	movs	r2, #2
 8001426:	2100      	movs	r1, #0
 8001428:	483f      	ldr	r0, [pc, #252]	; (8001528 <storage_f+0x11c>)
 800142a:	f7ff fc45 	bl	8000cb8 <sd_storage_link_ss>
  sd_storage_link_ss(&microsd_storage,1,SS_SD2_Pin,GPIOA);
 800142e:	4b3d      	ldr	r3, [pc, #244]	; (8001524 <storage_f+0x118>)
 8001430:	2204      	movs	r2, #4
 8001432:	2101      	movs	r1, #1
 8001434:	483c      	ldr	r0, [pc, #240]	; (8001528 <storage_f+0x11c>)
 8001436:	f7ff fc3f 	bl	8000cb8 <sd_storage_link_ss>
  sd_storage_link_ss(&microsd_storage,2,SS_SD3_Pin,SS_SD3_GPIO_Port);
 800143a:	4b3c      	ldr	r3, [pc, #240]	; (800152c <storage_f+0x120>)
 800143c:	2202      	movs	r2, #2
 800143e:	2102      	movs	r1, #2
 8001440:	4839      	ldr	r0, [pc, #228]	; (8001528 <storage_f+0x11c>)
 8001442:	f7ff fc39 	bl	8000cb8 <sd_storage_link_ss>
  sd_storage_link_ss(&microsd_storage,3,SS_SD4_Pin,GPIOA);
 8001446:	4b37      	ldr	r3, [pc, #220]	; (8001524 <storage_f+0x118>)
 8001448:	2280      	movs	r2, #128	; 0x80
 800144a:	2103      	movs	r1, #3
 800144c:	4836      	ldr	r0, [pc, #216]	; (8001528 <storage_f+0x11c>)
 800144e:	f7ff fc33 	bl	8000cb8 <sd_storage_link_ss>
  sd_storage_init(&microsd_storage);
 8001452:	4835      	ldr	r0, [pc, #212]	; (8001528 <storage_f+0x11c>)
 8001454:	f7ff fba4 	bl	8000ba0 <sd_storage_init>

  if(wav_file_open(&wav_file,"0:test.wav")==F_ERR)
 8001458:	4935      	ldr	r1, [pc, #212]	; (8001530 <storage_f+0x124>)
 800145a:	4836      	ldr	r0, [pc, #216]	; (8001534 <storage_f+0x128>)
 800145c:	f000 fedc 	bl	8002218 <wav_file_open>
 8001460:	4603      	mov	r3, r0
 8001462:	2b01      	cmp	r3, #1
 8001464:	d130      	bne.n	80014c8 <storage_f+0xbc>
  {
   if(wav_file_open(&wav_file,"1:test.wav")==F_ERR)
 8001466:	4934      	ldr	r1, [pc, #208]	; (8001538 <storage_f+0x12c>)
 8001468:	4832      	ldr	r0, [pc, #200]	; (8001534 <storage_f+0x128>)
 800146a:	f000 fed5 	bl	8002218 <wav_file_open>
 800146e:	4603      	mov	r3, r0
 8001470:	2b01      	cmp	r3, #1
 8001472:	d122      	bne.n	80014ba <storage_f+0xae>
   {
	if(wav_file_open(&wav_file,"2:test.wav")==F_ERR)
 8001474:	4931      	ldr	r1, [pc, #196]	; (800153c <storage_f+0x130>)
 8001476:	482f      	ldr	r0, [pc, #188]	; (8001534 <storage_f+0x128>)
 8001478:	f000 fece 	bl	8002218 <wav_file_open>
 800147c:	4603      	mov	r3, r0
 800147e:	2b01      	cmp	r3, #1
 8001480:	d114      	bne.n	80014ac <storage_f+0xa0>
	{
	 if(wav_file_open(&wav_file,"3:test.wav")==F_ERR)
 8001482:	492f      	ldr	r1, [pc, #188]	; (8001540 <storage_f+0x134>)
 8001484:	482b      	ldr	r0, [pc, #172]	; (8001534 <storage_f+0x128>)
 8001486:	f000 fec7 	bl	8002218 <wav_file_open>
 800148a:	4603      	mov	r3, r0
 800148c:	2b01      	cmp	r3, #1
 800148e:	d106      	bne.n	800149e <storage_f+0x92>
	 {
		 sprintf(ttr,"SD error\r");
 8001490:	f107 0320 	add.w	r3, r7, #32
 8001494:	492b      	ldr	r1, [pc, #172]	; (8001544 <storage_f+0x138>)
 8001496:	4618      	mov	r0, r3
 8001498:	f011 fd42 	bl	8012f20 <siprintf>
 800149c:	e01a      	b.n	80014d4 <storage_f+0xc8>
	 }
	 else sprintf(ttr,"SD3 detected\r");
 800149e:	f107 0320 	add.w	r3, r7, #32
 80014a2:	4929      	ldr	r1, [pc, #164]	; (8001548 <storage_f+0x13c>)
 80014a4:	4618      	mov	r0, r3
 80014a6:	f011 fd3b 	bl	8012f20 <siprintf>
 80014aa:	e013      	b.n	80014d4 <storage_f+0xc8>
	}
	else sprintf(ttr,"SD2 detected\r");
 80014ac:	f107 0320 	add.w	r3, r7, #32
 80014b0:	4926      	ldr	r1, [pc, #152]	; (800154c <storage_f+0x140>)
 80014b2:	4618      	mov	r0, r3
 80014b4:	f011 fd34 	bl	8012f20 <siprintf>
 80014b8:	e00c      	b.n	80014d4 <storage_f+0xc8>
   }
   else sprintf(ttr,"SD1 detected\r");
 80014ba:	f107 0320 	add.w	r3, r7, #32
 80014be:	4924      	ldr	r1, [pc, #144]	; (8001550 <storage_f+0x144>)
 80014c0:	4618      	mov	r0, r3
 80014c2:	f011 fd2d 	bl	8012f20 <siprintf>
 80014c6:	e005      	b.n	80014d4 <storage_f+0xc8>
  }
  else sprintf(ttr,"SD0 detected\r");
 80014c8:	f107 0320 	add.w	r3, r7, #32
 80014cc:	4921      	ldr	r1, [pc, #132]	; (8001554 <storage_f+0x148>)
 80014ce:	4618      	mov	r0, r3
 80014d0:	f011 fd26 	bl	8012f20 <siprintf>
  msg_ptr.size=strlen(msg_ptr.start_addr);
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7fe fe84 	bl	80001e4 <strlen>
 80014dc:	4603      	mov	r3, r0
 80014de:	61fb      	str	r3, [r7, #28]
  UI_send_msg(&user_interface,UI_CMD_SEND_DATA,&msg_ptr);
 80014e0:	f107 0318 	add.w	r3, r7, #24
 80014e4:	461a      	mov	r2, r3
 80014e6:	2101      	movs	r1, #1
 80014e8:	481b      	ldr	r0, [pc, #108]	; (8001558 <storage_f+0x14c>)
 80014ea:	f7ff f95e 	bl	80007aa <UI_send_msg>
  //f_unlink("0:test1.wav");

  /* Infinite loop */
  for(;;)
  {
	  storage_w_event = osMessageGet(storage_wHandle, osWaitForever);
 80014ee:	4b1b      	ldr	r3, [pc, #108]	; (800155c <storage_f+0x150>)
 80014f0:	6819      	ldr	r1, [r3, #0]
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	f04f 32ff 	mov.w	r2, #4294967295
 80014fa:	4618      	mov	r0, r3
 80014fc:	f00e fd66 	bl	800ffcc <osMessageGet>
	  if(storage_w_event.status == osEventMessage){
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2b10      	cmp	r3, #16
 8001504:	d1f3      	bne.n	80014ee <storage_f+0xe2>
		data_ptr=(memory_region_pointer*)storage_w_event.value.v;
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	637b      	str	r3, [r7, #52]	; 0x34
		wav_file_write(&wav_file,data_ptr->start_addr,data_ptr->size);
 800150a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800150c:	6819      	ldr	r1, [r3, #0]
 800150e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	461a      	mov	r2, r3
 8001514:	4807      	ldr	r0, [pc, #28]	; (8001534 <storage_f+0x128>)
 8001516:	f000 ff01 	bl	800231c <wav_file_write>
		wav_file_close(&wav_file);
 800151a:	4806      	ldr	r0, [pc, #24]	; (8001534 <storage_f+0x128>)
 800151c:	f000 fecc 	bl	80022b8 <wav_file_close>
	  storage_w_event = osMessageGet(storage_wHandle, osWaitForever);
 8001520:	e7e5      	b.n	80014ee <storage_f+0xe2>
 8001522:	bf00      	nop
 8001524:	40020000 	.word	0x40020000
 8001528:	20000c40 	.word	0x20000c40
 800152c:	40020800 	.word	0x40020800
 8001530:	08014198 	.word	0x08014198
 8001534:	20001550 	.word	0x20001550
 8001538:	080141a4 	.word	0x080141a4
 800153c:	080141b0 	.word	0x080141b0
 8001540:	080141bc 	.word	0x080141bc
 8001544:	080141c8 	.word	0x080141c8
 8001548:	080141d4 	.word	0x080141d4
 800154c:	080141e4 	.word	0x080141e4
 8001550:	080141f4 	.word	0x080141f4
 8001554:	08014204 	.word	0x08014204
 8001558:	2000080c 	.word	0x2000080c
 800155c:	20000800 	.word	0x20000800

08001560 <main_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_main_f */
void main_f(void const * argument)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08c      	sub	sp, #48	; 0x30
 8001564:	af00      	add	r7, sp, #0
 8001566:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN main_f */
  icListen.settings=(icListen_settings_typedef*)mcu_flash.data.raw_data;
 8001568:	4b3d      	ldr	r3, [pc, #244]	; (8001660 <main_f+0x100>)
 800156a:	4a3e      	ldr	r2, [pc, #248]	; (8001664 <main_f+0x104>)
 800156c:	621a      	str	r2, [r3, #32]
  memory_region_pointer* mem_ptr;


  icListen_collect_short_mask_msg collect_msg;
  icListen_prepare_collect_msg(&collect_msg,0x20);
 800156e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001572:	2120      	movs	r1, #32
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fbd7 	bl	8000d28 <icListen_prepare_collect_msg>

  collect_msg_ptr.start_addr=(uint8_t*)&collect_msg;
 800157a:	4a3b      	ldr	r2, [pc, #236]	; (8001668 <main_f+0x108>)
 800157c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001580:	6013      	str	r3, [r2, #0]
  collect_msg_ptr.size=sizeof(icListen_collect_short_mask_msg);
 8001582:	4b39      	ldr	r3, [pc, #228]	; (8001668 <main_f+0x108>)
 8001584:	2207      	movs	r2, #7
 8001586:	605a      	str	r2, [r3, #4]

  osEvent event;

  if(mcu_flash_read(&mcu_flash)!=F_OK){
 8001588:	4838      	ldr	r0, [pc, #224]	; (800166c <main_f+0x10c>)
 800158a:	f000 f905 	bl	8001798 <mcu_flash_read>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d026      	beq.n	80015e2 <main_f+0x82>
		icListen.settings->wav_sample_rate=ICLISTEN_DEFAULT_WAV_SAMPLE_RATE;
 8001594:	4b32      	ldr	r3, [pc, #200]	; (8001660 <main_f+0x100>)
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
 800159c:	2200      	movs	r2, #0
 800159e:	f042 027d 	orr.w	r2, r2, #125	; 0x7d
 80015a2:	705a      	strb	r2, [r3, #1]
 80015a4:	2200      	movs	r2, #0
 80015a6:	709a      	strb	r2, [r3, #2]
 80015a8:	2200      	movs	r2, #0
 80015aa:	70da      	strb	r2, [r3, #3]
		icListen.settings->wav_sample_bit_depth=ICLISTEN_DEFAULT_WAV_SAMPLE_BIT_DEPTH;
 80015ac:	4b2c      	ldr	r3, [pc, #176]	; (8001660 <main_f+0x100>)
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f042 0218 	orr.w	r2, r2, #24
 80015b6:	711a      	strb	r2, [r3, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	715a      	strb	r2, [r3, #5]
 80015bc:	2200      	movs	r2, #0
 80015be:	719a      	strb	r2, [r3, #6]
 80015c0:	2200      	movs	r2, #0
 80015c2:	71da      	strb	r2, [r3, #7]
		icListen.settings->file_duration=ICLISTEN_DEFAULT_FILE_DURATION;
 80015c4:	4b26      	ldr	r3, [pc, #152]	; (8001660 <main_f+0x100>)
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f042 0201 	orr.w	r2, r2, #1
 80015ce:	721a      	strb	r2, [r3, #8]
 80015d0:	2200      	movs	r2, #0
 80015d2:	725a      	strb	r2, [r3, #9]
 80015d4:	2200      	movs	r2, #0
 80015d6:	729a      	strb	r2, [r3, #10]
 80015d8:	2200      	movs	r2, #0
 80015da:	72da      	strb	r2, [r3, #11]
		mcu_flash_save(&mcu_flash);
 80015dc:	4823      	ldr	r0, [pc, #140]	; (800166c <main_f+0x10c>)
 80015de:	f000 f8fb 	bl	80017d8 <mcu_flash_save>
  }
  icListen.status=DISCONNECTED;
 80015e2:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <main_f+0x100>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	775a      	strb	r2, [r3, #29]

  while(icListen.status==DISCONNECTED) osDelay(1);
 80015e8:	e002      	b.n	80015f0 <main_f+0x90>
 80015ea:	2001      	movs	r0, #1
 80015ec:	f00e fc71 	bl	800fed2 <osDelay>
 80015f0:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <main_f+0x100>)
 80015f2:	7f5b      	ldrb	r3, [r3, #29]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d0f8      	beq.n	80015ea <main_f+0x8a>

  /* Infinite loop */
  for(;;)
  {
	  if(icListen.status==CONNECTED){
 80015f8:	4b19      	ldr	r3, [pc, #100]	; (8001660 <main_f+0x100>)
 80015fa:	7f5b      	ldrb	r3, [r3, #29]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d12a      	bne.n	8001656 <main_f+0xf6>
	   event = osMessageGet(USB_txHandle, osWaitForever);
 8001600:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <main_f+0x110>)
 8001602:	6819      	ldr	r1, [r3, #0]
 8001604:	f107 0318 	add.w	r3, r7, #24
 8001608:	f04f 32ff 	mov.w	r2, #4294967295
 800160c:	4618      	mov	r0, r3
 800160e:	f00e fcdd 	bl	800ffcc <osMessageGet>
	   if(event.status == osEventMessage){
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	2b10      	cmp	r3, #16
 8001616:	d109      	bne.n	800162c <main_f+0xcc>
		   mem_ptr=(memory_region_pointer*)event.value.v;
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	62fb      	str	r3, [r7, #44]	; 0x2c
		   USB_transmit_msg(mem_ptr->start_addr,mem_ptr->size);
 800161c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	4619      	mov	r1, r3
 8001626:	4610      	mov	r0, r2
 8001628:	f010 fe70 	bl	801230c <USB_transmit_msg>
		   //osMessagePut(USB_txHandle,(uint8_t*)&collect_msg_ptr, 0);
	   }
	   event = osMessageGet(USB_rxHandle, 10);
 800162c:	4b11      	ldr	r3, [pc, #68]	; (8001674 <main_f+0x114>)
 800162e:	6819      	ldr	r1, [r3, #0]
 8001630:	463b      	mov	r3, r7
 8001632:	220a      	movs	r2, #10
 8001634:	4618      	mov	r0, r3
 8001636:	f00e fcc9 	bl	800ffcc <osMessageGet>
 800163a:	f107 0318 	add.w	r3, r7, #24
 800163e:	463a      	mov	r2, r7
 8001640:	ca07      	ldmia	r2, {r0, r1, r2}
 8001642:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	   if(event.status == osEventMessage){
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	2b10      	cmp	r3, #16
 800164a:	d104      	bne.n	8001656 <main_f+0xf6>
		   icListen_parse_msg((uint8_t*)event.value.v,&icListen);
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	4904      	ldr	r1, [pc, #16]	; (8001660 <main_f+0x100>)
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fb8d 	bl	8000d70 <icListen_parse_msg>
	   }
	  }
   	  osDelay(2);
 8001656:	2002      	movs	r0, #2
 8001658:	f00e fc3b 	bl	800fed2 <osDelay>
	  if(icListen.status==CONNECTED){
 800165c:	e7cc      	b.n	80015f8 <main_f+0x98>
 800165e:	bf00      	nop
 8001660:	200006d4 	.word	0x200006d4
 8001664:	20000c2c 	.word	0x20000c2c
 8001668:	20000804 	.word	0x20000804
 800166c:	20000c20 	.word	0x20000c20
 8001670:	200007fc 	.word	0x200007fc
 8001674:	200007f8 	.word	0x200007f8

08001678 <uart_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart_f */
void uart_f(void const * argument)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uart_f */
  uint8_t tmp;
  /* Infinite loop */
  user_interface.media_status=UI_MEDIA_READY;
 8001680:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <uart_f+0x44>)
 8001682:	220a      	movs	r2, #10
 8001684:	735a      	strb	r2, [r3, #13]
  for(;;)
  {
	   if(UI_UART.gState!=HAL_UART_STATE_BUSY_TX)
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <uart_f+0x48>)
 8001688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b21      	cmp	r3, #33	; 0x21
 8001690:	d00f      	beq.n	80016b2 <uart_f+0x3a>
	   {
		if(UI_media_get_byte(&user_interface,&tmp)==UI_F_OK)
 8001692:	f107 030f 	add.w	r3, r7, #15
 8001696:	4619      	mov	r1, r3
 8001698:	4808      	ldr	r0, [pc, #32]	; (80016bc <uart_f+0x44>)
 800169a:	f7ff f86b 	bl	8000774 <UI_media_get_byte>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d106      	bne.n	80016b2 <uart_f+0x3a>
		{
		   HAL_UART_Transmit_IT(&UI_UART,&tmp,1);
 80016a4:	f107 030f 	add.w	r3, r7, #15
 80016a8:	2201      	movs	r2, #1
 80016aa:	4619      	mov	r1, r3
 80016ac:	4804      	ldr	r0, [pc, #16]	; (80016c0 <uart_f+0x48>)
 80016ae:	f004 fefc 	bl	80064aa <HAL_UART_Transmit_IT>
		}
	   }
	  osDelay(1);
 80016b2:	2001      	movs	r0, #1
 80016b4:	f00e fc0d 	bl	800fed2 <osDelay>
	   if(UI_UART.gState!=HAL_UART_STATE_BUSY_TX)
 80016b8:	e7e5      	b.n	8001686 <uart_f+0xe>
 80016ba:	bf00      	nop
 80016bc:	2000080c 	.word	0x2000080c
 80016c0:	200007a0 	.word	0x200007a0

080016c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d101      	bne.n	80016da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016d6:	f000 fe99 	bl	800240c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40010000 	.word	0x40010000

080016e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ec:	b672      	cpsid	i
}
 80016ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <Error_Handler+0x8>
	...

080016f4 <mcu_flash_init>:
#if defined(STM32F205xx)  //KB
uint32_t  flash_block_size[]={16,16,16,16,64,128,128,128,128,128,128,128};
#endif

void mcu_flash_init(mcu_flash_typedef* mcu_flash_obj,uint32_t first_block)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b087      	sub	sp, #28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
	uint32_t temp=0;
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
	int32_t temp2=0;
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
	if(first_block<FLASH_NUM_OF_BLOCKS){
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	2b0b      	cmp	r3, #11
 800170a:	d83d      	bhi.n	8001788 <mcu_flash_init+0x94>
      mcu_flash_obj->first_block_num=first_block;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	605a      	str	r2, [r3, #4]
      for(int i=0;i<first_block;i++) temp+=flash_block_size[i];
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	e009      	b.n	800172c <mcu_flash_init+0x38>
 8001718:	4a1e      	ldr	r2, [pc, #120]	; (8001794 <mcu_flash_init+0xa0>)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	4413      	add	r3, r2
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	3301      	adds	r3, #1
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	429a      	cmp	r2, r3
 8001732:	d8f1      	bhi.n	8001718 <mcu_flash_init+0x24>
	  mcu_flash_obj->first_block_addr=FLASH_BASE+(temp*1024);
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800173a:	029a      	lsls	r2, r3, #10
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	601a      	str	r2, [r3, #0]

	  temp2=FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE;
 8001740:	2312      	movs	r3, #18
 8001742:	613b      	str	r3, [r7, #16]
	  mcu_flash_obj->num_of_blocks=0;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	721a      	strb	r2, [r3, #8]
 800174a:	2200      	movs	r2, #0
 800174c:	725a      	strb	r2, [r3, #9]
 800174e:	2200      	movs	r2, #0
 8001750:	729a      	strb	r2, [r3, #10]
 8001752:	2200      	movs	r2, #0
 8001754:	72da      	strb	r2, [r3, #11]
	  for(int i=mcu_flash_obj->first_block_num;i<FLASH_NUM_OF_BLOCKS&&temp2>0;i++) {
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	e00e      	b.n	800177c <mcu_flash_init+0x88>
		  temp2-=flash_block_size[i];
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	490c      	ldr	r1, [pc, #48]	; (8001794 <mcu_flash_init+0xa0>)
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	613b      	str	r3, [r7, #16]
		  mcu_flash_obj->num_of_blocks++;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	1c5a      	adds	r2, r3, #1
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	609a      	str	r2, [r3, #8]
	  for(int i=mcu_flash_obj->first_block_num;i<FLASH_NUM_OF_BLOCKS&&temp2>0;i++) {
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	3301      	adds	r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2b0b      	cmp	r3, #11
 8001780:	dc02      	bgt.n	8001788 <mcu_flash_init+0x94>
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	2b00      	cmp	r3, #0
 8001786:	dcea      	bgt.n	800175e <mcu_flash_init+0x6a>
	  }
	}
}
 8001788:	bf00      	nop
 800178a:	371c      	adds	r7, #28
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	20000200 	.word	0x20000200

08001798 <mcu_flash_read>:

F_RES mcu_flash_read(mcu_flash_typedef* mcu_flash_obj)
{
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	 memcpy((uint8_t*)&(mcu_flash_obj->data),(uint8_t*)mcu_flash_obj->first_block_addr,FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f103 000c 	add.w	r0, r3, #12
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2212      	movs	r2, #18
 80017ac:	4619      	mov	r1, r3
 80017ae:	f011 fa47 	bl	8012c40 <memcpy>
	 if(mcu_flash_obj->data.crc==get_crc16_arc(mcu_flash_obj->data.raw_data,FLASH_DATA_SIZE)){
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	8b9b      	ldrh	r3, [r3, #28]
 80017b6:	b29c      	uxth	r4, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	330c      	adds	r3, #12
 80017bc:	2110      	movs	r1, #16
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff f9b8 	bl	8000b34 <get_crc16_arc>
 80017c4:	4603      	mov	r3, r0
 80017c6:	429c      	cmp	r4, r3
 80017c8:	d101      	bne.n	80017ce <mcu_flash_read+0x36>
		 return F_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	e000      	b.n	80017d0 <mcu_flash_read+0x38>
	 }
	 else{
		 return F_ERR;
 80017ce:	2301      	movs	r3, #1
	 }

}
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd90      	pop	{r4, r7, pc}

080017d8 <mcu_flash_save>:
void mcu_flash_save(mcu_flash_typedef* mcu_flash_obj)
{
 80017d8:	b5b0      	push	{r4, r5, r7, lr}
 80017da:	b08c      	sub	sp, #48	; 0x30
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	uint32_t i=0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t tmp;
	uint32_t pgerr = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	623b      	str	r3, [r7, #32]
	uint8_t* data=(uint8_t*)&mcu_flash_obj->data;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	330c      	adds	r3, #12
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24

	mcu_flash_obj->data.crc=get_crc16_arc(mcu_flash_obj->data.raw_data,FLASH_DATA_SIZE);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	330c      	adds	r3, #12
 80017f2:	2110      	movs	r1, #16
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff f99d 	bl	8000b34 <get_crc16_arc>
 80017fa:	4603      	mov	r3, r0
 80017fc:	461a      	mov	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	839a      	strh	r2, [r3, #28]

    HAL_FLASH_Unlock();
 8001802:	f001 f80f 	bl	8002824 <HAL_FLASH_Unlock>
    #if defined(STM32F405xx)
	FLASH_EraseInitTypeDef erase_info = {
 8001806:	f107 030c 	add.w	r3, r7, #12
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	611a      	str	r2, [r3, #16]
		.TypeErase = FLASH_TYPEERASE_SECTORS,
		.Sector = mcu_flash_obj->first_block_num,
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
	FLASH_EraseInitTypeDef erase_info = {
 800181a:	617b      	str	r3, [r7, #20]
		.NbSectors = mcu_flash_obj->num_of_blocks,
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
	FLASH_EraseInitTypeDef erase_info = {
 8001820:	61bb      	str	r3, [r7, #24]
	.NbPages = mcu_flash_obj->num_of_blocks,
    };
    #endif


	HAL_FLASHEx_Erase(&erase_info, &pgerr);
 8001822:	f107 0220 	add.w	r2, r7, #32
 8001826:	f107 030c 	add.w	r3, r7, #12
 800182a:	4611      	mov	r1, r2
 800182c:	4618      	mov	r0, r3
 800182e:	f001 f95b 	bl	8002ae8 <HAL_FLASHEx_Erase>

	if(pgerr != 0xFFFFFFFFul)
 8001832:	6a3b      	ldr	r3, [r7, #32]
 8001834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001838:	d027      	beq.n	800188a <mcu_flash_save+0xb2>
	{
		HAL_FLASH_Lock();
 800183a:	f001 f815 	bl	8002868 <HAL_FLASH_Lock>
 800183e:	e029      	b.n	8001894 <mcu_flash_save+0xbc>
		return ;
	}

	while(i<(FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE))
	{
        tmp=(tmp&0x0000)|(data[i]&0x00FF);
 8001840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001844:	4413      	add	r3, r2
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	857b      	strh	r3, [r7, #42]	; 0x2a
		if((i+1)<(FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE)) tmp=tmp|(data[i+1]<<8&0xFF00);
 800184a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184c:	3301      	adds	r3, #1
 800184e:	2b11      	cmp	r3, #17
 8001850:	d80b      	bhi.n	800186a <mcu_flash_save+0x92>
 8001852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001854:	3301      	adds	r3, #1
 8001856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001858:	4413      	add	r3, r2
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	021b      	lsls	r3, r3, #8
 800185e:	b21a      	sxth	r2, r3
 8001860:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001864:	4313      	orrs	r3, r2
 8001866:	b21b      	sxth	r3, r3
 8001868:	857b      	strh	r3, [r7, #42]	; 0x2a
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,mcu_flash_obj->first_block_addr+i,tmp);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001870:	18d1      	adds	r1, r2, r3
 8001872:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001874:	2200      	movs	r2, #0
 8001876:	461c      	mov	r4, r3
 8001878:	4615      	mov	r5, r2
 800187a:	4622      	mov	r2, r4
 800187c:	462b      	mov	r3, r5
 800187e:	2001      	movs	r0, #1
 8001880:	f000 ff7c 	bl	800277c <HAL_FLASH_Program>
		i=i+2;
 8001884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001886:	3302      	adds	r3, #2
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(i<(FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE))
 800188a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188c:	2b11      	cmp	r3, #17
 800188e:	d9d7      	bls.n	8001840 <mcu_flash_save+0x68>
	}

	HAL_FLASH_Lock();
 8001890:	f000 ffea 	bl	8002868 <HAL_FLASH_Lock>
}
 8001894:	3730      	adds	r7, #48	; 0x30
 8001896:	46bd      	mov	sp, r7
 8001898:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800189c <sd_ss_set_active>:
extern UART_HandleTypeDef huart1;
extern volatile uint16_t htim2;


void sd_ss_set_active(uint8_t drv)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
  active_sd_ss_pin=sd_cards_ss[drv].sd_ss_pin;
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	4a08      	ldr	r2, [pc, #32]	; (80018cc <sd_ss_set_active+0x30>)
 80018aa:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 80018ae:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <sd_ss_set_active+0x34>)
 80018b0:	801a      	strh	r2, [r3, #0]
  active_sd_ss_port=sd_cards_ss[drv].sd_ss_port;
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	4a05      	ldr	r2, [pc, #20]	; (80018cc <sd_ss_set_active+0x30>)
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	4413      	add	r3, r2
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	4a05      	ldr	r2, [pc, #20]	; (80018d4 <sd_ss_set_active+0x38>)
 80018be:	6013      	str	r3, [r2, #0]
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	20001914 	.word	0x20001914
 80018d0:	2000190e 	.word	0x2000190e
 80018d4:	20001910 	.word	0x20001910

080018d8 <sd_ss_active_pin_down>:

void sd_ss_active_pin_down()
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(active_sd_ss_port, active_sd_ss_pin, GPIO_PIN_RESET);
 80018dc:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <sd_ss_active_pin_down+0x18>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <sd_ss_active_pin_down+0x1c>)
 80018e2:	8811      	ldrh	r1, [r2, #0]
 80018e4:	2200      	movs	r2, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f001 fbbc 	bl	8003064 <HAL_GPIO_WritePin>
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20001910 	.word	0x20001910
 80018f4:	2000190e 	.word	0x2000190e

080018f8 <sd_ss_active_pin_up>:
void sd_ss_active_pin_up()
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(active_sd_ss_port, active_sd_ss_pin, GPIO_PIN_SET);
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <sd_ss_active_pin_up+0x18>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a04      	ldr	r2, [pc, #16]	; (8001914 <sd_ss_active_pin_up+0x1c>)
 8001902:	8811      	ldrh	r1, [r2, #0]
 8001904:	2201      	movs	r2, #1
 8001906:	4618      	mov	r0, r3
 8001908:	f001 fbac 	bl	8003064 <HAL_GPIO_WritePin>
}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20001910 	.word	0x20001910
 8001914:	2000190e 	.word	0x2000190e

08001918 <SD_cmd>:



//-----------------------------------------------
static uint8_t SD_cmd (uint8_t cmd, uint32_t arg)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	6039      	str	r1, [r7, #0]
 8001922:	71fb      	strb	r3, [r7, #7]
  uint8_t n, res;
  // ACMD<n> is the command sequense of CMD55-CMD<n>
  if (cmd & 0x80)
 8001924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001928:	2b00      	cmp	r3, #0
 800192a:	da0e      	bge.n	800194a <SD_cmd+0x32>
  {
    cmd &= 0x7F;
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001932:	71fb      	strb	r3, [r7, #7]
    res = SD_cmd(CMD55, 0);
 8001934:	2100      	movs	r1, #0
 8001936:	2077      	movs	r0, #119	; 0x77
 8001938:	f7ff ffee 	bl	8001918 <SD_cmd>
 800193c:	4603      	mov	r3, r0
 800193e:	73bb      	strb	r3, [r7, #14]
    if (res > 1) return res;
 8001940:	7bbb      	ldrb	r3, [r7, #14]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d901      	bls.n	800194a <SD_cmd+0x32>
 8001946:	7bbb      	ldrb	r3, [r7, #14]
 8001948:	e043      	b.n	80019d2 <SD_cmd+0xba>
  }
  // Select the card
  SS_SD_DESELECT();
 800194a:	f7ff ffd5 	bl	80018f8 <sd_ss_active_pin_up>
  SPI_ReceiveByte();
 800194e:	f000 f94c 	bl	8001bea <SPI_ReceiveByte>

  SS_SD_SELECT();
 8001952:	f7ff ffc1 	bl	80018d8 <sd_ss_active_pin_down>
  SPI_ReceiveByte();
 8001956:	f000 f948 	bl	8001bea <SPI_ReceiveByte>
  // Send a command packet
  SPI_SendByte(cmd); // Start + Command index
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	4618      	mov	r0, r3
 800195e:	f000 f937 	bl	8001bd0 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 24)); // Argument[31..24]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	0e1b      	lsrs	r3, r3, #24
 8001966:	b2db      	uxtb	r3, r3
 8001968:	4618      	mov	r0, r3
 800196a:	f000 f931 	bl	8001bd0 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 16)); // Argument[23..16]
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	0c1b      	lsrs	r3, r3, #16
 8001972:	b2db      	uxtb	r3, r3
 8001974:	4618      	mov	r0, r3
 8001976:	f000 f92b 	bl	8001bd0 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 8)); // Argument[15..8]
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	0a1b      	lsrs	r3, r3, #8
 800197e:	b2db      	uxtb	r3, r3
 8001980:	4618      	mov	r0, r3
 8001982:	f000 f925 	bl	8001bd0 <SPI_SendByte>
  SPI_SendByte((uint8_t)arg); // Argument[7..0]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	4618      	mov	r0, r3
 800198c:	f000 f920 	bl	8001bd0 <SPI_SendByte>

  n = 0x01; // Dummy CRC + Stop
 8001990:	2301      	movs	r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0) {n = 0x95;} // Valid CRC for CMD0(0)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	2b40      	cmp	r3, #64	; 0x40
 8001998:	d101      	bne.n	800199e <SD_cmd+0x86>
 800199a:	2395      	movs	r3, #149	; 0x95
 800199c:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD8) {n = 0x87;} // Valid CRC for CMD8(0x1AA)
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	2b48      	cmp	r3, #72	; 0x48
 80019a2:	d101      	bne.n	80019a8 <SD_cmd+0x90>
 80019a4:	2387      	movs	r3, #135	; 0x87
 80019a6:	73fb      	strb	r3, [r7, #15]
  SPI_SendByte(n);
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 f910 	bl	8001bd0 <SPI_SendByte>
  // Receive a command response
  n = 10; // Wait for a valid response in timeout of 10 attempts
 80019b0:	230a      	movs	r3, #10
 80019b2:	73fb      	strb	r3, [r7, #15]
  do {
    res = SPI_ReceiveByte();
 80019b4:	f000 f919 	bl	8001bea <SPI_ReceiveByte>
 80019b8:	4603      	mov	r3, r0
 80019ba:	73bb      	strb	r3, [r7, #14]
  } while ((res & 0x80) && --n);
 80019bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	da05      	bge.n	80019d0 <SD_cmd+0xb8>
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	73fb      	strb	r3, [r7, #15]
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1f1      	bne.n	80019b4 <SD_cmd+0x9c>
  return res;
 80019d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <sd_ini>:
//-----------------------------------------------

uint8_t sd_ini(void)
{
 80019dc:	b590      	push	{r4, r7, lr}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
	  uint8_t i, cmd;;
	  uint8_t ocr[4];
	  int16_t tmr;
	  uint32_t temp;
	  //LD_OFF;
	  sdinfo.type = 0;
 80019e2:	4b57      	ldr	r3, [pc, #348]	; (8001b40 <sd_ini+0x164>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]

	  hspi1.Init.BaudRatePrescaler = temp;
	  HAL_SPI_Init(&hspi1);
	  */

	  SS_SD_SELECT();
 80019e8:	f7ff ff76 	bl	80018d8 <sd_ss_active_pin_down>
	  if (SD_cmd(CMD0, 0) == 1) // Enter Idle state
 80019ec:	2100      	movs	r1, #0
 80019ee:	2040      	movs	r0, #64	; 0x40
 80019f0:	f7ff ff92 	bl	8001918 <SD_cmd>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	f040 809a 	bne.w	8001b30 <sd_ini+0x154>
	  {
		  SPI_Release();
 80019fc:	f000 f902 	bl	8001c04 <SPI_Release>
		  if (SD_cmd(CMD8, 0x1AA) == 1) // SDv2
 8001a00:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001a04:	2048      	movs	r0, #72	; 0x48
 8001a06:	f7ff ff87 	bl	8001918 <SD_cmd>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d157      	bne.n	8001ac0 <sd_ini+0xe4>
		  {
			  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8001a10:	2300      	movs	r3, #0
 8001a12:	71fb      	strb	r3, [r7, #7]
 8001a14:	e00c      	b.n	8001a30 <sd_ini+0x54>
 8001a16:	79fc      	ldrb	r4, [r7, #7]
 8001a18:	f000 f8e7 	bl	8001bea <SPI_ReceiveByte>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	461a      	mov	r2, r3
 8001a20:	f104 0308 	add.w	r3, r4, #8
 8001a24:	443b      	add	r3, r7
 8001a26:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	71fb      	strb	r3, [r7, #7]
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d9ef      	bls.n	8001a16 <sd_ini+0x3a>

			    // Get trailing return value of R7 resp
			    if (ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 8001a36:	78bb      	ldrb	r3, [r7, #2]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d17b      	bne.n	8001b34 <sd_ini+0x158>
 8001a3c:	78fb      	ldrb	r3, [r7, #3]
 8001a3e:	2baa      	cmp	r3, #170	; 0xaa
 8001a40:	d178      	bne.n	8001b34 <sd_ini+0x158>
			    {
			    	for (tmr = 12000; tmr && SD_cmd(ACMD41, 1UL << 30); tmr--)
 8001a42:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8001a46:	80bb      	strh	r3, [r7, #4]
 8001a48:	e005      	b.n	8001a56 <sd_ini+0x7a>
 8001a4a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	3b01      	subs	r3, #1
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	80bb      	strh	r3, [r7, #4]
 8001a56:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d007      	beq.n	8001a6e <sd_ini+0x92>
 8001a5e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a62:	20e9      	movs	r0, #233	; 0xe9
 8001a64:	f7ff ff58 	bl	8001918 <SD_cmd>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1ed      	bne.n	8001a4a <sd_ini+0x6e>
			    	    ; // Wait for leaving idle state (ACMD41 with HCS bit)
			    	if (tmr && SD_cmd(CMD58, 0) == 0)
 8001a6e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d05e      	beq.n	8001b34 <sd_ini+0x158>
 8001a76:	2100      	movs	r1, #0
 8001a78:	207a      	movs	r0, #122	; 0x7a
 8001a7a:	f7ff ff4d 	bl	8001918 <SD_cmd>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d157      	bne.n	8001b34 <sd_ini+0x158>
			    	 { // Check CCS bit in the OCR
			    	  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8001a84:	2300      	movs	r3, #0
 8001a86:	71fb      	strb	r3, [r7, #7]
 8001a88:	e00c      	b.n	8001aa4 <sd_ini+0xc8>
 8001a8a:	79fc      	ldrb	r4, [r7, #7]
 8001a8c:	f000 f8ad 	bl	8001bea <SPI_ReceiveByte>
 8001a90:	4603      	mov	r3, r0
 8001a92:	461a      	mov	r2, r3
 8001a94:	f104 0308 	add.w	r3, r4, #8
 8001a98:	443b      	add	r3, r7
 8001a9a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	71fb      	strb	r3, [r7, #7]
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	2b03      	cmp	r3, #3
 8001aa8:	d9ef      	bls.n	8001a8a <sd_ini+0xae>
			     	   sdinfo.type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 8001aaa:	783b      	ldrb	r3, [r7, #0]
 8001aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <sd_ini+0xdc>
 8001ab4:	220c      	movs	r2, #12
 8001ab6:	e000      	b.n	8001aba <sd_ini+0xde>
 8001ab8:	2204      	movs	r2, #4
 8001aba:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <sd_ini+0x164>)
 8001abc:	701a      	strb	r2, [r3, #0]
 8001abe:	e039      	b.n	8001b34 <sd_ini+0x158>
			    	}
			    }
		  }
		  else //SDv1 or MMCv3
		  {
			  if (SD_cmd(ACMD41, 0) <= 1)
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	20e9      	movs	r0, #233	; 0xe9
 8001ac4:	f7ff ff28 	bl	8001918 <SD_cmd>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d805      	bhi.n	8001ada <sd_ini+0xfe>
			    {
			      sdinfo.type = CT_SD1; cmd = ACMD41; // SDv1
 8001ace:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <sd_ini+0x164>)
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	701a      	strb	r2, [r3, #0]
 8001ad4:	23e9      	movs	r3, #233	; 0xe9
 8001ad6:	71bb      	strb	r3, [r7, #6]
 8001ad8:	e004      	b.n	8001ae4 <sd_ini+0x108>
			    }
			    else
			    {
			      sdinfo.type = CT_MMC; cmd = CMD1; // MMCv3
 8001ada:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <sd_ini+0x164>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	701a      	strb	r2, [r3, #0]
 8001ae0:	2341      	movs	r3, #65	; 0x41
 8001ae2:	71bb      	strb	r3, [r7, #6]
			    }
			    for (tmr = 25000; tmr && SD_cmd(cmd, 0); tmr--) ; // Wait for leaving idle state
 8001ae4:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8001ae8:	80bb      	strh	r3, [r7, #4]
 8001aea:	e005      	b.n	8001af8 <sd_ini+0x11c>
 8001aec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	3b01      	subs	r3, #1
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	80bb      	strh	r3, [r7, #4]
 8001af8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d007      	beq.n	8001b10 <sd_ini+0x134>
 8001b00:	79bb      	ldrb	r3, [r7, #6]
 8001b02:	2100      	movs	r1, #0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff07 	bl	8001918 <SD_cmd>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1ed      	bne.n	8001aec <sd_ini+0x110>
			    if (!tmr || SD_cmd(CMD16, 512) != 0) // Set R/W block length to 512
 8001b10:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d007      	beq.n	8001b28 <sd_ini+0x14c>
 8001b18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b1c:	2050      	movs	r0, #80	; 0x50
 8001b1e:	f7ff fefb 	bl	8001918 <SD_cmd>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <sd_ini+0x158>
			    sdinfo.type = 0;
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <sd_ini+0x164>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
 8001b2e:	e001      	b.n	8001b34 <sd_ini+0x158>

	  }
	  else
	  {

	    return 1;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <sd_ini+0x15a>
	  }




  return 0;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd90      	pop	{r4, r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	2000190c 	.word	0x2000190c

08001b44 <Error>:

//-----------------------------------------------
static void Error (void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  //LD_ON;
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <SPI_wait_ready>:
//-----------------------------------------------
//-----------------------------------------------
uint8_t SPI_wait_ready(void)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
  uint8_t res;
  uint16_t cnt;
  cnt=0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	80fb      	strh	r3, [r7, #6]
  do {
    res=SPI_ReceiveByte();
 8001b5c:	f000 f845 	bl	8001bea <SPI_ReceiveByte>
 8001b60:	4603      	mov	r3, r0
 8001b62:	717b      	strb	r3, [r7, #5]
    cnt++;
 8001b64:	88fb      	ldrh	r3, [r7, #6]
 8001b66:	3301      	adds	r3, #1
 8001b68:	80fb      	strh	r3, [r7, #6]
  } while ( (res!=0xFF)&&(cnt<0xFFFF) );
 8001b6a:	797b      	ldrb	r3, [r7, #5]
 8001b6c:	2bff      	cmp	r3, #255	; 0xff
 8001b6e:	d004      	beq.n	8001b7a <SPI_wait_ready+0x28>
 8001b70:	88fb      	ldrh	r3, [r7, #6]
 8001b72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d1f0      	bne.n	8001b5c <SPI_wait_ready+0xa>
  if (cnt>=0xFFFF) return 1;
 8001b7a:	88fb      	ldrh	r3, [r7, #6]
 8001b7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d101      	bne.n	8001b88 <SPI_wait_ready+0x36>
 8001b84:	2301      	movs	r3, #1
 8001b86:	e000      	b.n	8001b8a <SPI_wait_ready+0x38>
  return res;
 8001b88:	797b      	ldrb	r3, [r7, #5]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <SPIx_WriteRead>:
//-----------------------------------------------

//-----------------------------------------------
uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af02      	add	r7, sp, #8
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 8001ba2:	f107 020f 	add.w	r2, r7, #15
 8001ba6:	1df9      	adds	r1, r7, #7
 8001ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	2301      	movs	r3, #1
 8001bb0:	4806      	ldr	r0, [pc, #24]	; (8001bcc <SPIx_WriteRead+0x38>)
 8001bb2:	f003 fb8e 	bl	80052d2 <HAL_SPI_TransmitReceive>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <SPIx_WriteRead+0x2c>
  {
    Error();
 8001bbc:	f7ff ffc2 	bl	8001b44 <Error>
  }
  return receivedbyte;
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000700 	.word	0x20000700

08001bd0 <SPI_SendByte>:
//-----------------------------------------------

//-----------------------------------------------
void SPI_SendByte(uint8_t bt)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	71fb      	strb	r3, [r7, #7]
  SPIx_WriteRead(bt);
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ffd9 	bl	8001b94 <SPIx_WriteRead>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <SPI_ReceiveByte>:
//-----------------------------------------------
uint8_t SPI_ReceiveByte(void)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
  uint8_t bt = SPIx_WriteRead(0xFF);
 8001bf0:	20ff      	movs	r0, #255	; 0xff
 8001bf2:	f7ff ffcf 	bl	8001b94 <SPIx_WriteRead>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
  return bt;
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <SPI_Release>:
//-----------------------------------------------
void SPI_Release(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  SPIx_WriteRead(0xFF);
 8001c08:	20ff      	movs	r0, #255	; 0xff
 8001c0a:	f7ff ffc3 	bl	8001b94 <SPIx_WriteRead>
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <SD_Read_Block>:
//-----------------------------------------------

//-----------------------------------------------
uint8_t SD_Read_Block (uint8_t *buff, uint32_t lba)
{
 8001c12:	b590      	push	{r4, r7, lr}
 8001c14:	b085      	sub	sp, #20
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	6039      	str	r1, [r7, #0]
  uint8_t result;
  uint16_t cnt;

  result=SD_cmd (CMD17, lba);
 8001c1c:	6839      	ldr	r1, [r7, #0]
 8001c1e:	2051      	movs	r0, #81	; 0x51
 8001c20:	f7ff fe7a 	bl	8001918 <SD_cmd>
 8001c24:	4603      	mov	r3, r0
 8001c26:	737b      	strb	r3, [r7, #13]
  if (result!=0x00){
 8001c28:	7b7b      	ldrb	r3, [r7, #13]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <SD_Read_Block+0x20>
	  return 5;
 8001c2e:	2305      	movs	r3, #5
 8001c30:	e02f      	b.n	8001c92 <SD_Read_Block+0x80>
  }

  SPI_Release();
 8001c32:	f7ff ffe7 	bl	8001c04 <SPI_Release>
   cnt=0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	81fb      	strh	r3, [r7, #14]
   do{
     result=SPI_ReceiveByte();
 8001c3a:	f7ff ffd6 	bl	8001bea <SPI_ReceiveByte>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	737b      	strb	r3, [r7, #13]
     cnt++;
 8001c42:	89fb      	ldrh	r3, [r7, #14]
 8001c44:	3301      	adds	r3, #1
 8001c46:	81fb      	strh	r3, [r7, #14]
   } while ( (result!=0xFE)&&(cnt<0xFFFF) );
 8001c48:	7b7b      	ldrb	r3, [r7, #13]
 8001c4a:	2bfe      	cmp	r3, #254	; 0xfe
 8001c4c:	d004      	beq.n	8001c58 <SD_Read_Block+0x46>
 8001c4e:	89fb      	ldrh	r3, [r7, #14]
 8001c50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d1f0      	bne.n	8001c3a <SD_Read_Block+0x28>
   if (cnt>=0xFFFF) {
 8001c58:	89fb      	ldrh	r3, [r7, #14]
 8001c5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d101      	bne.n	8001c66 <SD_Read_Block+0x54>
	   return 5;
 8001c62:	2305      	movs	r3, #5
 8001c64:	e015      	b.n	8001c92 <SD_Read_Block+0x80>
   }
   for (cnt=0;cnt<512;cnt++) buff[cnt]=SPI_ReceiveByte();
 8001c66:	2300      	movs	r3, #0
 8001c68:	81fb      	strh	r3, [r7, #14]
 8001c6a:	e009      	b.n	8001c80 <SD_Read_Block+0x6e>
 8001c6c:	89fb      	ldrh	r3, [r7, #14]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	18d4      	adds	r4, r2, r3
 8001c72:	f7ff ffba 	bl	8001bea <SPI_ReceiveByte>
 8001c76:	4603      	mov	r3, r0
 8001c78:	7023      	strb	r3, [r4, #0]
 8001c7a:	89fb      	ldrh	r3, [r7, #14]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	81fb      	strh	r3, [r7, #14]
 8001c80:	89fb      	ldrh	r3, [r7, #14]
 8001c82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c86:	d3f1      	bcc.n	8001c6c <SD_Read_Block+0x5a>
   SPI_Release();
 8001c88:	f7ff ffbc 	bl	8001c04 <SPI_Release>
   SPI_Release();
 8001c8c:	f7ff ffba 	bl	8001c04 <SPI_Release>



  return 0;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd90      	pop	{r4, r7, pc}

08001c9a <SD_Write_Block>:
//-----------------------------------------------

//-----------------------------------------------
uint8_t SD_Write_Block (uint8_t *buff, uint32_t lba)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b084      	sub	sp, #16
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	6039      	str	r1, [r7, #0]

  uint8_t result;
  uint16_t cnt;
  result=SD_cmd(CMD24,lba);
 8001ca4:	6839      	ldr	r1, [r7, #0]
 8001ca6:	2058      	movs	r0, #88	; 0x58
 8001ca8:	f7ff fe36 	bl	8001918 <SD_cmd>
 8001cac:	4603      	mov	r3, r0
 8001cae:	737b      	strb	r3, [r7, #13]
  if (result!=0x00){
 8001cb0:	7b7b      	ldrb	r3, [r7, #13]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <SD_Write_Block+0x20>
	  return 6;
 8001cb6:	2306      	movs	r3, #6
 8001cb8:	e03d      	b.n	8001d36 <SD_Write_Block+0x9c>
  }
  SPI_Release();
 8001cba:	f7ff ffa3 	bl	8001c04 <SPI_Release>
  SPI_SendByte (0xFE);
 8001cbe:	20fe      	movs	r0, #254	; 0xfe
 8001cc0:	f7ff ff86 	bl	8001bd0 <SPI_SendByte>
  for (cnt=0;cnt<512;cnt++) SPI_SendByte(buff[cnt]);
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	81fb      	strh	r3, [r7, #14]
 8001cc8:	e009      	b.n	8001cde <SD_Write_Block+0x44>
 8001cca:	89fb      	ldrh	r3, [r7, #14]
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	4413      	add	r3, r2
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff ff7c 	bl	8001bd0 <SPI_SendByte>
 8001cd8:	89fb      	ldrh	r3, [r7, #14]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	81fb      	strh	r3, [r7, #14]
 8001cde:	89fb      	ldrh	r3, [r7, #14]
 8001ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ce4:	d3f1      	bcc.n	8001cca <SD_Write_Block+0x30>
  SPI_Release();
 8001ce6:	f7ff ff8d 	bl	8001c04 <SPI_Release>
  SPI_Release();
 8001cea:	f7ff ff8b 	bl	8001c04 <SPI_Release>
  result=SPI_ReceiveByte();
 8001cee:	f7ff ff7c 	bl	8001bea <SPI_ReceiveByte>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	737b      	strb	r3, [r7, #13]
  if ((result&0x05)!=0x05) {
 8001cf6:	7b7b      	ldrb	r3, [r7, #13]
 8001cf8:	f003 0305 	and.w	r3, r3, #5
 8001cfc:	2b05      	cmp	r3, #5
 8001cfe:	d001      	beq.n	8001d04 <SD_Write_Block+0x6a>
	  return 6;
 8001d00:	2306      	movs	r3, #6
 8001d02:	e018      	b.n	8001d36 <SD_Write_Block+0x9c>
  }
  cnt=0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	81fb      	strh	r3, [r7, #14]
  do {
    result=SPI_ReceiveByte();
 8001d08:	f7ff ff6f 	bl	8001bea <SPI_ReceiveByte>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	737b      	strb	r3, [r7, #13]
    cnt++;
 8001d10:	89fb      	ldrh	r3, [r7, #14]
 8001d12:	3301      	adds	r3, #1
 8001d14:	81fb      	strh	r3, [r7, #14]
  } while ( (result!=0xFF)&&(cnt<0xFFFF) );
 8001d16:	7b7b      	ldrb	r3, [r7, #13]
 8001d18:	2bff      	cmp	r3, #255	; 0xff
 8001d1a:	d004      	beq.n	8001d26 <SD_Write_Block+0x8c>
 8001d1c:	89fb      	ldrh	r3, [r7, #14]
 8001d1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d1f0      	bne.n	8001d08 <SD_Write_Block+0x6e>
  if (cnt>=0xFFFF) {
 8001d26:	89fb      	ldrh	r3, [r7, #14]
 8001d28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d101      	bne.n	8001d34 <SD_Write_Block+0x9a>
	  return 6;
 8001d30:	2306      	movs	r3, #6
 8001d32:	e000      	b.n	8001d36 <SD_Write_Block+0x9c>
  }

  return 0;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	607b      	str	r3, [r7, #4]
 8001d4a:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <HAL_MspInit+0x54>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	4a11      	ldr	r2, [pc, #68]	; (8001d94 <HAL_MspInit+0x54>)
 8001d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d54:	6453      	str	r3, [r2, #68]	; 0x44
 8001d56:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <HAL_MspInit+0x54>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d5e:	607b      	str	r3, [r7, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	603b      	str	r3, [r7, #0]
 8001d66:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <HAL_MspInit+0x54>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <HAL_MspInit+0x54>)
 8001d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d70:	6413      	str	r3, [r2, #64]	; 0x40
 8001d72:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <HAL_MspInit+0x54>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	603b      	str	r3, [r7, #0]
 8001d7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	210f      	movs	r1, #15
 8001d82:	f06f 0001 	mvn.w	r0, #1
 8001d86:	f000 fc3d 	bl	8002604 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40023800 	.word	0x40023800

08001d98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08a      	sub	sp, #40	; 0x28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a1d      	ldr	r2, [pc, #116]	; (8001e2c <HAL_SPI_MspInit+0x94>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d133      	bne.n	8001e22 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	4b1c      	ldr	r3, [pc, #112]	; (8001e30 <HAL_SPI_MspInit+0x98>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	4a1b      	ldr	r2, [pc, #108]	; (8001e30 <HAL_SPI_MspInit+0x98>)
 8001dc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dca:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <HAL_SPI_MspInit+0x98>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <HAL_SPI_MspInit+0x98>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <HAL_SPI_MspInit+0x98>)
 8001de0:	f043 0302 	orr.w	r3, r3, #2
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_SPI_MspInit+0x98>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001df2:	2338      	movs	r3, #56	; 0x38
 8001df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df6:	2302      	movs	r3, #2
 8001df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e02:	2305      	movs	r3, #5
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e06:	f107 0314 	add.w	r3, r7, #20
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4809      	ldr	r0, [pc, #36]	; (8001e34 <HAL_SPI_MspInit+0x9c>)
 8001e0e:	f000 ff8d 	bl	8002d2c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2105      	movs	r1, #5
 8001e16:	2023      	movs	r0, #35	; 0x23
 8001e18:	f000 fbf4 	bl	8002604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001e1c:	2023      	movs	r0, #35	; 0x23
 8001e1e:	f000 fc0d 	bl	800263c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e22:	bf00      	nop
 8001e24:	3728      	adds	r7, #40	; 0x28
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40013000 	.word	0x40013000
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40020400 	.word	0x40020400

08001e38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e48:	d115      	bne.n	8001e76 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <HAL_TIM_Base_MspInit+0x48>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	4a0b      	ldr	r2, [pc, #44]	; (8001e80 <HAL_TIM_Base_MspInit+0x48>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5a:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <HAL_TIM_Base_MspInit+0x48>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2105      	movs	r1, #5
 8001e6a:	201c      	movs	r0, #28
 8001e6c:	f000 fbca 	bl	8002604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e70:	201c      	movs	r0, #28
 8001e72:	f000 fbe3 	bl	800263c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800

08001e84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	; 0x28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a1d      	ldr	r2, [pc, #116]	; (8001f18 <HAL_UART_MspInit+0x94>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d134      	bne.n	8001f10 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	4b1c      	ldr	r3, [pc, #112]	; (8001f1c <HAL_UART_MspInit+0x98>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	4a1b      	ldr	r2, [pc, #108]	; (8001f1c <HAL_UART_MspInit+0x98>)
 8001eb0:	f043 0310 	orr.w	r3, r3, #16
 8001eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb6:	4b19      	ldr	r3, [pc, #100]	; (8001f1c <HAL_UART_MspInit+0x98>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <HAL_UART_MspInit+0x98>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	4a14      	ldr	r2, [pc, #80]	; (8001f1c <HAL_UART_MspInit+0x98>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed2:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <HAL_UART_MspInit+0x98>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ede:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eec:	2303      	movs	r3, #3
 8001eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ef0:	2307      	movs	r3, #7
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4809      	ldr	r0, [pc, #36]	; (8001f20 <HAL_UART_MspInit+0x9c>)
 8001efc:	f000 ff16 	bl	8002d2c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001f00:	2200      	movs	r2, #0
 8001f02:	2105      	movs	r1, #5
 8001f04:	2025      	movs	r0, #37	; 0x25
 8001f06:	f000 fb7d 	bl	8002604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f0a:	2025      	movs	r0, #37	; 0x25
 8001f0c:	f000 fb96 	bl	800263c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f10:	bf00      	nop
 8001f12:	3728      	adds	r7, #40	; 0x28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40011000 	.word	0x40011000
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40020000 	.word	0x40020000

08001f24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08c      	sub	sp, #48	; 0x30
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001f34:	2200      	movs	r2, #0
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	2019      	movs	r0, #25
 8001f3a:	f000 fb63 	bl	8002604 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f3e:	2019      	movs	r0, #25
 8001f40:	f000 fb7c 	bl	800263c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	4b1f      	ldr	r3, [pc, #124]	; (8001fc8 <HAL_InitTick+0xa4>)
 8001f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4c:	4a1e      	ldr	r2, [pc, #120]	; (8001fc8 <HAL_InitTick+0xa4>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	6453      	str	r3, [r2, #68]	; 0x44
 8001f54:	4b1c      	ldr	r3, [pc, #112]	; (8001fc8 <HAL_InitTick+0xa4>)
 8001f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f60:	f107 0210 	add.w	r2, r7, #16
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	4611      	mov	r1, r2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f003 f8f6 	bl	800515c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001f70:	f003 f8e0 	bl	8005134 <HAL_RCC_GetPCLK2Freq>
 8001f74:	4603      	mov	r3, r0
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7c:	4a13      	ldr	r2, [pc, #76]	; (8001fcc <HAL_InitTick+0xa8>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	0c9b      	lsrs	r3, r3, #18
 8001f84:	3b01      	subs	r3, #1
 8001f86:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001f88:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <HAL_InitTick+0xac>)
 8001f8a:	4a12      	ldr	r2, [pc, #72]	; (8001fd4 <HAL_InitTick+0xb0>)
 8001f8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <HAL_InitTick+0xac>)
 8001f90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f94:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001f96:	4a0e      	ldr	r2, [pc, #56]	; (8001fd0 <HAL_InitTick+0xac>)
 8001f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <HAL_InitTick+0xac>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_InitTick+0xac>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001fa8:	4809      	ldr	r0, [pc, #36]	; (8001fd0 <HAL_InitTick+0xac>)
 8001faa:	f003 fd1d 	bl	80059e8 <HAL_TIM_Base_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d104      	bne.n	8001fbe <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001fb4:	4806      	ldr	r0, [pc, #24]	; (8001fd0 <HAL_InitTick+0xac>)
 8001fb6:	f003 fd67 	bl	8005a88 <HAL_TIM_Base_Start_IT>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	e000      	b.n	8001fc0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3730      	adds	r7, #48	; 0x30
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	431bde83 	.word	0x431bde83
 8001fd0:	20001934 	.word	0x20001934
 8001fd4:	40010000 	.word	0x40010000

08001fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fdc:	e7fe      	b.n	8001fdc <NMI_Handler+0x4>

08001fde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fe2:	e7fe      	b.n	8001fe2 <HardFault_Handler+0x4>

08001fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fe8:	e7fe      	b.n	8001fe8 <MemManage_Handler+0x4>

08001fea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fea:	b480      	push	{r7}
 8001fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fee:	e7fe      	b.n	8001fee <BusFault_Handler+0x4>

08001ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ff4:	e7fe      	b.n	8001ff4 <UsageFault_Handler+0x4>

08001ff6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002008:	4802      	ldr	r0, [pc, #8]	; (8002014 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800200a:	f003 fdad 	bl	8005b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20001934 	.word	0x20001934

08002018 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800201c:	4802      	ldr	r0, [pc, #8]	; (8002028 <TIM2_IRQHandler+0x10>)
 800201e:	f003 fda3 	bl	8005b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000758 	.word	0x20000758

0800202c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002030:	4802      	ldr	r0, [pc, #8]	; (800203c <SPI1_IRQHandler+0x10>)
 8002032:	f003 faf1 	bl	8005618 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000700 	.word	0x20000700

08002040 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002044:	4802      	ldr	r0, [pc, #8]	; (8002050 <USART1_IRQHandler+0x10>)
 8002046:	f004 faa5 	bl	8006594 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200007a0 	.word	0x200007a0

08002054 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002058:	4802      	ldr	r0, [pc, #8]	; (8002064 <OTG_FS_IRQHandler+0x10>)
 800205a:	f001 fa87 	bl	800356c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	2000bff0 	.word	0x2000bff0

08002068 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
	return 1;
 800206c:	2301      	movs	r3, #1
}
 800206e:	4618      	mov	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <_kill>:

int _kill(int pid, int sig)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002082:	f010 fca9 	bl	80129d8 <__errno>
 8002086:	4603      	mov	r3, r0
 8002088:	2216      	movs	r2, #22
 800208a:	601a      	str	r2, [r3, #0]
	return -1;
 800208c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <_exit>:

void _exit (int status)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020a0:	f04f 31ff 	mov.w	r1, #4294967295
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff ffe7 	bl	8002078 <_kill>
	while (1) {}		/* Make sure we hang here */
 80020aa:	e7fe      	b.n	80020aa <_exit+0x12>

080020ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	e00a      	b.n	80020d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020be:	f3af 8000 	nop.w
 80020c2:	4601      	mov	r1, r0
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	1c5a      	adds	r2, r3, #1
 80020c8:	60ba      	str	r2, [r7, #8]
 80020ca:	b2ca      	uxtb	r2, r1
 80020cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	3301      	adds	r3, #1
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	429a      	cmp	r2, r3
 80020da:	dbf0      	blt.n	80020be <_read+0x12>
	}

return len;
 80020dc:	687b      	ldr	r3, [r7, #4]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b086      	sub	sp, #24
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	60f8      	str	r0, [r7, #12]
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	e009      	b.n	800210c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	1c5a      	adds	r2, r3, #1
 80020fc:	60ba      	str	r2, [r7, #8]
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	3301      	adds	r3, #1
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	429a      	cmp	r2, r3
 8002112:	dbf1      	blt.n	80020f8 <_write+0x12>
	}
	return len;
 8002114:	687b      	ldr	r3, [r7, #4]
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <_close>:

int _close(int file)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
	return -1;
 8002126:	f04f 33ff 	mov.w	r3, #4294967295
}
 800212a:	4618      	mov	r0, r3
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002146:	605a      	str	r2, [r3, #4]
	return 0;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <_isatty>:

int _isatty(int file)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
	return 1;
 800215e:	2301      	movs	r3, #1
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
	return 0;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002190:	4a14      	ldr	r2, [pc, #80]	; (80021e4 <_sbrk+0x5c>)
 8002192:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <_sbrk+0x60>)
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800219c:	4b13      	ldr	r3, [pc, #76]	; (80021ec <_sbrk+0x64>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d102      	bne.n	80021aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021a4:	4b11      	ldr	r3, [pc, #68]	; (80021ec <_sbrk+0x64>)
 80021a6:	4a12      	ldr	r2, [pc, #72]	; (80021f0 <_sbrk+0x68>)
 80021a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021aa:	4b10      	ldr	r3, [pc, #64]	; (80021ec <_sbrk+0x64>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d207      	bcs.n	80021c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021b8:	f010 fc0e 	bl	80129d8 <__errno>
 80021bc:	4603      	mov	r3, r0
 80021be:	220c      	movs	r2, #12
 80021c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021c2:	f04f 33ff 	mov.w	r3, #4294967295
 80021c6:	e009      	b.n	80021dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021c8:	4b08      	ldr	r3, [pc, #32]	; (80021ec <_sbrk+0x64>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ce:	4b07      	ldr	r3, [pc, #28]	; (80021ec <_sbrk+0x64>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	4a05      	ldr	r2, [pc, #20]	; (80021ec <_sbrk+0x64>)
 80021d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021da:	68fb      	ldr	r3, [r7, #12]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20020000 	.word	0x20020000
 80021e8:	00000400 	.word	0x00000400
 80021ec:	2000197c 	.word	0x2000197c
 80021f0:	2000c308 	.word	0x2000c308

080021f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <SystemInit+0x20>)
 80021fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fe:	4a05      	ldr	r2, [pc, #20]	; (8002214 <SystemInit+0x20>)
 8002200:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002204:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <wav_file_open>:


extern UART_HandleTypeDef huart1;

F_RES wav_file_open(wav_file_typedef* self_object,char* filename)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  memcpy(self_object->header.chunk.prefix,"RIFF",4);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2204      	movs	r2, #4
 8002226:	4920      	ldr	r1, [pc, #128]	; (80022a8 <wav_file_open+0x90>)
 8002228:	4618      	mov	r0, r3
 800222a:	f010 fd09 	bl	8012c40 <memcpy>
  memcpy(self_object->header.chunk.postfix,"WAVE",4);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3308      	adds	r3, #8
 8002232:	2204      	movs	r2, #4
 8002234:	491d      	ldr	r1, [pc, #116]	; (80022ac <wav_file_open+0x94>)
 8002236:	4618      	mov	r0, r3
 8002238:	f010 fd02 	bl	8012c40 <memcpy>
  memcpy(self_object->header.subchunk_fmt.prefix,"fmt ",4);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	330c      	adds	r3, #12
 8002240:	2204      	movs	r2, #4
 8002242:	491b      	ldr	r1, [pc, #108]	; (80022b0 <wav_file_open+0x98>)
 8002244:	4618      	mov	r0, r3
 8002246:	f010 fcfb 	bl	8012c40 <memcpy>
  memcpy(self_object->header.subchunk_data.prefix,"data",4);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3324      	adds	r3, #36	; 0x24
 800224e:	2204      	movs	r2, #4
 8002250:	4918      	ldr	r1, [pc, #96]	; (80022b4 <wav_file_open+0x9c>)
 8002252:	4618      	mov	r0, r3
 8002254:	f010 fcf4 	bl	8012c40 <memcpy>
  self_object->data_counter=0;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8002260:	2200      	movs	r2, #0
 8002262:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8002266:	2200      	movs	r2, #0
 8002268:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800226c:	2200      	movs	r2, #0
 800226e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  if(f_open(&self_object->media.file,filename,FA_CREATE_ALWAYS|FA_WRITE)==FR_OK){
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3330      	adds	r3, #48	; 0x30
 8002276:	220a      	movs	r2, #10
 8002278:	6839      	ldr	r1, [r7, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f00c f9fe 	bl	800e67c <f_open>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10b      	bne.n	800229e <wav_file_open+0x86>
   f_lseek(&self_object->media.file, sizeof(self_object->header));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800228c:	f04f 022c 	mov.w	r2, #44	; 0x2c
 8002290:	f04f 0300 	mov.w	r3, #0
 8002294:	4608      	mov	r0, r1
 8002296:	f00c ffae 	bl	800f1f6 <f_lseek>
   return F_OK;
 800229a:	2300      	movs	r3, #0
 800229c:	e000      	b.n	80022a0 <wav_file_open+0x88>
  }
  return F_ERR;
 800229e:	2301      	movs	r3, #1
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	08014214 	.word	0x08014214
 80022ac:	0801421c 	.word	0x0801421c
 80022b0:	08014224 	.word	0x08014224
 80022b4:	0801422c 	.word	0x0801422c

080022b8 <wav_file_close>:

F_RES wav_file_close(wav_file_typedef* self_object)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
	self_object->header.subchunk_data.size=self_object->data_counter;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	629a      	str	r2, [r3, #40]	; 0x28
	self_object->header.chunk.size=36+self_object->data_counter;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	605a      	str	r2, [r3, #4]
 	f_lseek(&self_object->media.file, 0);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	4608      	mov	r0, r1
 80022e4:	f00c ff87 	bl	800f1f6 <f_lseek>
 	if(f_write(&self_object->media.file,(uint8_t*)&self_object->header,sizeof(self_object->header),(void*)&self_object->media.byteswritten)==FR_OK){
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 80022f6:	222c      	movs	r2, #44	; 0x2c
 80022f8:	f00c fc81 	bl	800ebfe <f_write>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d106      	bne.n	8002310 <wav_file_close+0x58>
 	  f_close(&self_object->media.file);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3330      	adds	r3, #48	; 0x30
 8002306:	4618      	mov	r0, r3
 8002308:	f00c ff4b 	bl	800f1a2 <f_close>
 	  return F_OK;
 800230c:	2300      	movs	r3, #0
 800230e:	e000      	b.n	8002312 <wav_file_close+0x5a>
 	}
 	return F_ERR;
 8002310:	2301      	movs	r3, #1
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <wav_file_write>:

F_RES wav_file_write(wav_file_typedef* self_object,uint8_t* data,uint32_t length)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
	FRESULT res;
	self_object->data_counter+=length;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	441a      	add	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	62da      	str	r2, [r3, #44]	; 0x2c
	res=f_write(&self_object->media.file,data,length,(void*)&self_object->media.byteswritten);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	68b9      	ldr	r1, [r7, #8]
 8002344:	f00c fc5b 	bl	800ebfe <f_write>
 8002348:	4603      	mov	r3, r0
 800234a:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit(&huart1,(uint8_t*)&res,1,100);
 800234c:	f107 0117 	add.w	r1, r7, #23
 8002350:	2364      	movs	r3, #100	; 0x64
 8002352:	2201      	movs	r2, #1
 8002354:	4806      	ldr	r0, [pc, #24]	; (8002370 <wav_file_write+0x54>)
 8002356:	f004 f816 	bl	8006386 <HAL_UART_Transmit>
	if(res==FR_OK) return F_OK;
 800235a:	7dfb      	ldrb	r3, [r7, #23]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <wav_file_write+0x48>
 8002360:	2300      	movs	r3, #0
 8002362:	e000      	b.n	8002366 <wav_file_write+0x4a>
	return F_ERR;
 8002364:	2301      	movs	r3, #1
}
 8002366:	4618      	mov	r0, r3
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	200007a0 	.word	0x200007a0

08002374 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002374:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002378:	480d      	ldr	r0, [pc, #52]	; (80023b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800237a:	490e      	ldr	r1, [pc, #56]	; (80023b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800237c:	4a0e      	ldr	r2, [pc, #56]	; (80023b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800237e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002380:	e002      	b.n	8002388 <LoopCopyDataInit>

08002382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002386:	3304      	adds	r3, #4

08002388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800238a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800238c:	d3f9      	bcc.n	8002382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800238e:	4a0b      	ldr	r2, [pc, #44]	; (80023bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002390:	4c0b      	ldr	r4, [pc, #44]	; (80023c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002394:	e001      	b.n	800239a <LoopFillZerobss>

08002396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002398:	3204      	adds	r2, #4

0800239a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800239a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800239c:	d3fb      	bcc.n	8002396 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800239e:	f7ff ff29 	bl	80021f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023a2:	f010 fc15 	bl	8012bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023a6:	f7fe fd4f 	bl	8000e48 <main>
  bx  lr    
 80023aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80023ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023b4:	20000314 	.word	0x20000314
  ldr r2, =_sidata
 80023b8:	08014888 	.word	0x08014888
  ldr r2, =_sbss
 80023bc:	20000314 	.word	0x20000314
  ldr r4, =_ebss
 80023c0:	2000c304 	.word	0x2000c304

080023c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023c4:	e7fe      	b.n	80023c4 <ADC_IRQHandler>
	...

080023c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023cc:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <HAL_Init+0x40>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a0d      	ldr	r2, [pc, #52]	; (8002408 <HAL_Init+0x40>)
 80023d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023d8:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <HAL_Init+0x40>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <HAL_Init+0x40>)
 80023de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023e4:	4b08      	ldr	r3, [pc, #32]	; (8002408 <HAL_Init+0x40>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a07      	ldr	r2, [pc, #28]	; (8002408 <HAL_Init+0x40>)
 80023ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023f0:	2003      	movs	r0, #3
 80023f2:	f000 f8fc 	bl	80025ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023f6:	200f      	movs	r0, #15
 80023f8:	f7ff fd94 	bl	8001f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023fc:	f7ff fca0 	bl	8001d40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40023c00 	.word	0x40023c00

0800240c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <HAL_IncTick+0x20>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	461a      	mov	r2, r3
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_IncTick+0x24>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4413      	add	r3, r2
 800241c:	4a04      	ldr	r2, [pc, #16]	; (8002430 <HAL_IncTick+0x24>)
 800241e:	6013      	str	r3, [r2, #0]
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	20000238 	.word	0x20000238
 8002430:	20001980 	.word	0x20001980

08002434 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return uwTick;
 8002438:	4b03      	ldr	r3, [pc, #12]	; (8002448 <HAL_GetTick+0x14>)
 800243a:	681b      	ldr	r3, [r3, #0]
}
 800243c:	4618      	mov	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	20001980 	.word	0x20001980

0800244c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002454:	f7ff ffee 	bl	8002434 <HAL_GetTick>
 8002458:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002464:	d005      	beq.n	8002472 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002466:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <HAL_Delay+0x44>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4413      	add	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002472:	bf00      	nop
 8002474:	f7ff ffde 	bl	8002434 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	429a      	cmp	r2, r3
 8002482:	d8f7      	bhi.n	8002474 <HAL_Delay+0x28>
  {
  }
}
 8002484:	bf00      	nop
 8002486:	bf00      	nop
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20000238 	.word	0x20000238

08002494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <__NVIC_SetPriorityGrouping+0x44>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024b0:	4013      	ands	r3, r2
 80024b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024c6:	4a04      	ldr	r2, [pc, #16]	; (80024d8 <__NVIC_SetPriorityGrouping+0x44>)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	60d3      	str	r3, [r2, #12]
}
 80024cc:	bf00      	nop
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <__NVIC_GetPriorityGrouping+0x18>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	0a1b      	lsrs	r3, r3, #8
 80024e6:	f003 0307 	and.w	r3, r3, #7
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002506:	2b00      	cmp	r3, #0
 8002508:	db0b      	blt.n	8002522 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	f003 021f 	and.w	r2, r3, #31
 8002510:	4907      	ldr	r1, [pc, #28]	; (8002530 <__NVIC_EnableIRQ+0x38>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	095b      	lsrs	r3, r3, #5
 8002518:	2001      	movs	r0, #1
 800251a:	fa00 f202 	lsl.w	r2, r0, r2
 800251e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	e000e100 	.word	0xe000e100

08002534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	6039      	str	r1, [r7, #0]
 800253e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002544:	2b00      	cmp	r3, #0
 8002546:	db0a      	blt.n	800255e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	b2da      	uxtb	r2, r3
 800254c:	490c      	ldr	r1, [pc, #48]	; (8002580 <__NVIC_SetPriority+0x4c>)
 800254e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002552:	0112      	lsls	r2, r2, #4
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	440b      	add	r3, r1
 8002558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800255c:	e00a      	b.n	8002574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4908      	ldr	r1, [pc, #32]	; (8002584 <__NVIC_SetPriority+0x50>)
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	3b04      	subs	r3, #4
 800256c:	0112      	lsls	r2, r2, #4
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	440b      	add	r3, r1
 8002572:	761a      	strb	r2, [r3, #24]
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000e100 	.word	0xe000e100
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002588:	b480      	push	{r7}
 800258a:	b089      	sub	sp, #36	; 0x24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f1c3 0307 	rsb	r3, r3, #7
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	bf28      	it	cs
 80025a6:	2304      	movcs	r3, #4
 80025a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3304      	adds	r3, #4
 80025ae:	2b06      	cmp	r3, #6
 80025b0:	d902      	bls.n	80025b8 <NVIC_EncodePriority+0x30>
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3b03      	subs	r3, #3
 80025b6:	e000      	b.n	80025ba <NVIC_EncodePriority+0x32>
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025bc:	f04f 32ff 	mov.w	r2, #4294967295
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43da      	mvns	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	401a      	ands	r2, r3
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025d0:	f04f 31ff 	mov.w	r1, #4294967295
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	fa01 f303 	lsl.w	r3, r1, r3
 80025da:	43d9      	mvns	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e0:	4313      	orrs	r3, r2
         );
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3724      	adds	r7, #36	; 0x24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b082      	sub	sp, #8
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7ff ff4c 	bl	8002494 <__NVIC_SetPriorityGrouping>
}
 80025fc:	bf00      	nop
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
 8002610:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002616:	f7ff ff61 	bl	80024dc <__NVIC_GetPriorityGrouping>
 800261a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	68b9      	ldr	r1, [r7, #8]
 8002620:	6978      	ldr	r0, [r7, #20]
 8002622:	f7ff ffb1 	bl	8002588 <NVIC_EncodePriority>
 8002626:	4602      	mov	r2, r0
 8002628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800262c:	4611      	mov	r1, r2
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff ff80 	bl	8002534 <__NVIC_SetPriority>
}
 8002634:	bf00      	nop
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff ff54 	bl	80024f8 <__NVIC_EnableIRQ>
}
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002664:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002666:	f7ff fee5 	bl	8002434 <HAL_GetTick>
 800266a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d008      	beq.n	800268a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2280      	movs	r2, #128	; 0x80
 800267c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e052      	b.n	8002730 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0216 	bic.w	r2, r2, #22
 8002698:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695a      	ldr	r2, [r3, #20]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d103      	bne.n	80026ba <HAL_DMA_Abort+0x62>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d007      	beq.n	80026ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0208 	bic.w	r2, r2, #8
 80026c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0201 	bic.w	r2, r2, #1
 80026d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026da:	e013      	b.n	8002704 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026dc:	f7ff feaa 	bl	8002434 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b05      	cmp	r3, #5
 80026e8:	d90c      	bls.n	8002704 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2220      	movs	r2, #32
 80026ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2203      	movs	r2, #3
 80026f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e015      	b.n	8002730 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1e4      	bne.n	80026dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002716:	223f      	movs	r2, #63	; 0x3f
 8002718:	409a      	lsls	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d004      	beq.n	8002756 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2280      	movs	r2, #128	; 0x80
 8002750:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e00c      	b.n	8002770 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2205      	movs	r2, #5
 800275a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0201 	bic.w	r2, r2, #1
 800276c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800278e:	4b23      	ldr	r3, [pc, #140]	; (800281c <HAL_FLASH_Program+0xa0>)
 8002790:	7e1b      	ldrb	r3, [r3, #24]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <HAL_FLASH_Program+0x1e>
 8002796:	2302      	movs	r3, #2
 8002798:	e03b      	b.n	8002812 <HAL_FLASH_Program+0x96>
 800279a:	4b20      	ldr	r3, [pc, #128]	; (800281c <HAL_FLASH_Program+0xa0>)
 800279c:	2201      	movs	r2, #1
 800279e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80027a4:	f000 f870 	bl	8002888 <FLASH_WaitForLastOperation>
 80027a8:	4603      	mov	r3, r0
 80027aa:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80027ac:	7dfb      	ldrb	r3, [r7, #23]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d12b      	bne.n	800280a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d105      	bne.n	80027c4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80027b8:	783b      	ldrb	r3, [r7, #0]
 80027ba:	4619      	mov	r1, r3
 80027bc:	68b8      	ldr	r0, [r7, #8]
 80027be:	f000 f91b 	bl	80029f8 <FLASH_Program_Byte>
 80027c2:	e016      	b.n	80027f2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d105      	bne.n	80027d6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80027ca:	883b      	ldrh	r3, [r7, #0]
 80027cc:	4619      	mov	r1, r3
 80027ce:	68b8      	ldr	r0, [r7, #8]
 80027d0:	f000 f8ee 	bl	80029b0 <FLASH_Program_HalfWord>
 80027d4:	e00d      	b.n	80027f2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d105      	bne.n	80027e8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	4619      	mov	r1, r3
 80027e0:	68b8      	ldr	r0, [r7, #8]
 80027e2:	f000 f8c3 	bl	800296c <FLASH_Program_Word>
 80027e6:	e004      	b.n	80027f2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80027e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027ec:	68b8      	ldr	r0, [r7, #8]
 80027ee:	f000 f88b 	bl	8002908 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027f2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80027f6:	f000 f847 	bl	8002888 <FLASH_WaitForLastOperation>
 80027fa:	4603      	mov	r3, r0
 80027fc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80027fe:	4b08      	ldr	r3, [pc, #32]	; (8002820 <HAL_FLASH_Program+0xa4>)
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	4a07      	ldr	r2, [pc, #28]	; (8002820 <HAL_FLASH_Program+0xa4>)
 8002804:	f023 0301 	bic.w	r3, r3, #1
 8002808:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800280a:	4b04      	ldr	r3, [pc, #16]	; (800281c <HAL_FLASH_Program+0xa0>)
 800280c:	2200      	movs	r2, #0
 800280e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002810:	7dfb      	ldrb	r3, [r7, #23]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20001984 	.word	0x20001984
 8002820:	40023c00 	.word	0x40023c00

08002824 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800282e:	4b0b      	ldr	r3, [pc, #44]	; (800285c <HAL_FLASH_Unlock+0x38>)
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	2b00      	cmp	r3, #0
 8002834:	da0b      	bge.n	800284e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002836:	4b09      	ldr	r3, [pc, #36]	; (800285c <HAL_FLASH_Unlock+0x38>)
 8002838:	4a09      	ldr	r2, [pc, #36]	; (8002860 <HAL_FLASH_Unlock+0x3c>)
 800283a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800283c:	4b07      	ldr	r3, [pc, #28]	; (800285c <HAL_FLASH_Unlock+0x38>)
 800283e:	4a09      	ldr	r2, [pc, #36]	; (8002864 <HAL_FLASH_Unlock+0x40>)
 8002840:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002842:	4b06      	ldr	r3, [pc, #24]	; (800285c <HAL_FLASH_Unlock+0x38>)
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	2b00      	cmp	r3, #0
 8002848:	da01      	bge.n	800284e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800284e:	79fb      	ldrb	r3, [r7, #7]
}
 8002850:	4618      	mov	r0, r3
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	40023c00 	.word	0x40023c00
 8002860:	45670123 	.word	0x45670123
 8002864:	cdef89ab 	.word	0xcdef89ab

08002868 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800286c:	4b05      	ldr	r3, [pc, #20]	; (8002884 <HAL_FLASH_Lock+0x1c>)
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	4a04      	ldr	r2, [pc, #16]	; (8002884 <HAL_FLASH_Lock+0x1c>)
 8002872:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002876:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	40023c00 	.word	0x40023c00

08002888 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002894:	4b1a      	ldr	r3, [pc, #104]	; (8002900 <FLASH_WaitForLastOperation+0x78>)
 8002896:	2200      	movs	r2, #0
 8002898:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800289a:	f7ff fdcb 	bl	8002434 <HAL_GetTick>
 800289e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80028a0:	e010      	b.n	80028c4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a8:	d00c      	beq.n	80028c4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d007      	beq.n	80028c0 <FLASH_WaitForLastOperation+0x38>
 80028b0:	f7ff fdc0 	bl	8002434 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d201      	bcs.n	80028c4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e019      	b.n	80028f8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80028c4:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <FLASH_WaitForLastOperation+0x7c>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1e8      	bne.n	80028a2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80028d0:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <FLASH_WaitForLastOperation+0x7c>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80028dc:	4b09      	ldr	r3, [pc, #36]	; (8002904 <FLASH_WaitForLastOperation+0x7c>)
 80028de:	2201      	movs	r2, #1
 80028e0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80028e2:	4b08      	ldr	r3, [pc, #32]	; (8002904 <FLASH_WaitForLastOperation+0x7c>)
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80028ee:	f000 f8a5 	bl	8002a3c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
  
}  
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20001984 	.word	0x20001984
 8002904:	40023c00 	.word	0x40023c00

08002908 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002914:	4b14      	ldr	r3, [pc, #80]	; (8002968 <FLASH_Program_DoubleWord+0x60>)
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	4a13      	ldr	r2, [pc, #76]	; (8002968 <FLASH_Program_DoubleWord+0x60>)
 800291a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800291e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002920:	4b11      	ldr	r3, [pc, #68]	; (8002968 <FLASH_Program_DoubleWord+0x60>)
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	4a10      	ldr	r2, [pc, #64]	; (8002968 <FLASH_Program_DoubleWord+0x60>)
 8002926:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800292a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800292c:	4b0e      	ldr	r3, [pc, #56]	; (8002968 <FLASH_Program_DoubleWord+0x60>)
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	4a0d      	ldr	r2, [pc, #52]	; (8002968 <FLASH_Program_DoubleWord+0x60>)
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800293e:	f3bf 8f6f 	isb	sy
}
 8002942:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002944:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	000a      	movs	r2, r1
 8002952:	2300      	movs	r3, #0
 8002954:	68f9      	ldr	r1, [r7, #12]
 8002956:	3104      	adds	r1, #4
 8002958:	4613      	mov	r3, r2
 800295a:	600b      	str	r3, [r1, #0]
}
 800295c:	bf00      	nop
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	40023c00 	.word	0x40023c00

0800296c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002976:	4b0d      	ldr	r3, [pc, #52]	; (80029ac <FLASH_Program_Word+0x40>)
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	4a0c      	ldr	r2, [pc, #48]	; (80029ac <FLASH_Program_Word+0x40>)
 800297c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002980:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002982:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <FLASH_Program_Word+0x40>)
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	4a09      	ldr	r2, [pc, #36]	; (80029ac <FLASH_Program_Word+0x40>)
 8002988:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800298c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800298e:	4b07      	ldr	r3, [pc, #28]	; (80029ac <FLASH_Program_Word+0x40>)
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	4a06      	ldr	r2, [pc, #24]	; (80029ac <FLASH_Program_Word+0x40>)
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	601a      	str	r2, [r3, #0]
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	40023c00 	.word	0x40023c00

080029b0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	460b      	mov	r3, r1
 80029ba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80029bc:	4b0d      	ldr	r3, [pc, #52]	; (80029f4 <FLASH_Program_HalfWord+0x44>)
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	4a0c      	ldr	r2, [pc, #48]	; (80029f4 <FLASH_Program_HalfWord+0x44>)
 80029c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80029c8:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <FLASH_Program_HalfWord+0x44>)
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	4a09      	ldr	r2, [pc, #36]	; (80029f4 <FLASH_Program_HalfWord+0x44>)
 80029ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80029d4:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <FLASH_Program_HalfWord+0x44>)
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	4a06      	ldr	r2, [pc, #24]	; (80029f4 <FLASH_Program_HalfWord+0x44>)
 80029da:	f043 0301 	orr.w	r3, r3, #1
 80029de:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	887a      	ldrh	r2, [r7, #2]
 80029e4:	801a      	strh	r2, [r3, #0]
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	40023c00 	.word	0x40023c00

080029f8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002a04:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <FLASH_Program_Byte+0x40>)
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	4a0b      	ldr	r2, [pc, #44]	; (8002a38 <FLASH_Program_Byte+0x40>)
 8002a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002a10:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <FLASH_Program_Byte+0x40>)
 8002a12:	4a09      	ldr	r2, [pc, #36]	; (8002a38 <FLASH_Program_Byte+0x40>)
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002a18:	4b07      	ldr	r3, [pc, #28]	; (8002a38 <FLASH_Program_Byte+0x40>)
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	4a06      	ldr	r2, [pc, #24]	; (8002a38 <FLASH_Program_Byte+0x40>)
 8002a1e:	f043 0301 	orr.w	r3, r3, #1
 8002a22:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	78fa      	ldrb	r2, [r7, #3]
 8002a28:	701a      	strb	r2, [r3, #0]
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40023c00 	.word	0x40023c00

08002a3c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002a40:	4b27      	ldr	r3, [pc, #156]	; (8002ae0 <FLASH_SetErrorCode+0xa4>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f003 0310 	and.w	r3, r3, #16
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002a4c:	4b25      	ldr	r3, [pc, #148]	; (8002ae4 <FLASH_SetErrorCode+0xa8>)
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	f043 0310 	orr.w	r3, r3, #16
 8002a54:	4a23      	ldr	r2, [pc, #140]	; (8002ae4 <FLASH_SetErrorCode+0xa8>)
 8002a56:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002a58:	4b21      	ldr	r3, [pc, #132]	; (8002ae0 <FLASH_SetErrorCode+0xa4>)
 8002a5a:	2210      	movs	r2, #16
 8002a5c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002a5e:	4b20      	ldr	r3, [pc, #128]	; (8002ae0 <FLASH_SetErrorCode+0xa4>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d008      	beq.n	8002a7c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002a6a:	4b1e      	ldr	r3, [pc, #120]	; (8002ae4 <FLASH_SetErrorCode+0xa8>)
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	f043 0308 	orr.w	r3, r3, #8
 8002a72:	4a1c      	ldr	r2, [pc, #112]	; (8002ae4 <FLASH_SetErrorCode+0xa8>)
 8002a74:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002a76:	4b1a      	ldr	r3, [pc, #104]	; (8002ae0 <FLASH_SetErrorCode+0xa4>)
 8002a78:	2220      	movs	r2, #32
 8002a7a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002a7c:	4b18      	ldr	r3, [pc, #96]	; (8002ae0 <FLASH_SetErrorCode+0xa4>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d008      	beq.n	8002a9a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002a88:	4b16      	ldr	r3, [pc, #88]	; (8002ae4 <FLASH_SetErrorCode+0xa8>)
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	f043 0304 	orr.w	r3, r3, #4
 8002a90:	4a14      	ldr	r2, [pc, #80]	; (8002ae4 <FLASH_SetErrorCode+0xa8>)
 8002a92:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002a94:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <FLASH_SetErrorCode+0xa4>)
 8002a96:	2240      	movs	r2, #64	; 0x40
 8002a98:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002a9a:	4b11      	ldr	r3, [pc, #68]	; (8002ae0 <FLASH_SetErrorCode+0xa4>)
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d008      	beq.n	8002ab8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002aa6:	4b0f      	ldr	r3, [pc, #60]	; (8002ae4 <FLASH_SetErrorCode+0xa8>)
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	f043 0302 	orr.w	r3, r3, #2
 8002aae:	4a0d      	ldr	r2, [pc, #52]	; (8002ae4 <FLASH_SetErrorCode+0xa8>)
 8002ab0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002ab2:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <FLASH_SetErrorCode+0xa4>)
 8002ab4:	2280      	movs	r2, #128	; 0x80
 8002ab6:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002ab8:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <FLASH_SetErrorCode+0xa4>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002ac4:	4b07      	ldr	r3, [pc, #28]	; (8002ae4 <FLASH_SetErrorCode+0xa8>)
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	f043 0320 	orr.w	r3, r3, #32
 8002acc:	4a05      	ldr	r2, [pc, #20]	; (8002ae4 <FLASH_SetErrorCode+0xa8>)
 8002ace:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002ad0:	4b03      	ldr	r3, [pc, #12]	; (8002ae0 <FLASH_SetErrorCode+0xa4>)
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	60da      	str	r2, [r3, #12]
  }
}
 8002ad6:	bf00      	nop
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	40023c00 	.word	0x40023c00
 8002ae4:	20001984 	.word	0x20001984

08002ae8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002afa:	4b31      	ldr	r3, [pc, #196]	; (8002bc0 <HAL_FLASHEx_Erase+0xd8>)
 8002afc:	7e1b      	ldrb	r3, [r3, #24]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <HAL_FLASHEx_Erase+0x1e>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e058      	b.n	8002bb8 <HAL_FLASHEx_Erase+0xd0>
 8002b06:	4b2e      	ldr	r3, [pc, #184]	; (8002bc0 <HAL_FLASHEx_Erase+0xd8>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b10:	f7ff feba 	bl	8002888 <FLASH_WaitForLastOperation>
 8002b14:	4603      	mov	r3, r0
 8002b16:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d148      	bne.n	8002bb0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	f04f 32ff 	mov.w	r2, #4294967295
 8002b24:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d115      	bne.n	8002b5a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	f000 f844 	bl	8002bc8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b40:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b44:	f7ff fea0 	bl	8002888 <FLASH_WaitForLastOperation>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002b4c:	4b1d      	ldr	r3, [pc, #116]	; (8002bc4 <HAL_FLASHEx_Erase+0xdc>)
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	4a1c      	ldr	r2, [pc, #112]	; (8002bc4 <HAL_FLASHEx_Erase+0xdc>)
 8002b52:	f023 0304 	bic.w	r3, r3, #4
 8002b56:	6113      	str	r3, [r2, #16]
 8002b58:	e028      	b.n	8002bac <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	60bb      	str	r3, [r7, #8]
 8002b60:	e01c      	b.n	8002b9c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	4619      	mov	r1, r3
 8002b6a:	68b8      	ldr	r0, [r7, #8]
 8002b6c:	f000 f850 	bl	8002c10 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b70:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b74:	f7ff fe88 	bl	8002888 <FLASH_WaitForLastOperation>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002b7c:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <HAL_FLASHEx_Erase+0xdc>)
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	4a10      	ldr	r2, [pc, #64]	; (8002bc4 <HAL_FLASHEx_Erase+0xdc>)
 8002b82:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002b86:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	601a      	str	r2, [r3, #0]
          break;
 8002b94:	e00a      	b.n	8002bac <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68da      	ldr	r2, [r3, #12]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d3da      	bcc.n	8002b62 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002bac:	f000 f878 	bl	8002ca0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002bb0:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <HAL_FLASHEx_Erase+0xd8>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	761a      	strb	r2, [r3, #24]

  return status;
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	20001984 	.word	0x20001984
 8002bc4:	40023c00 	.word	0x40023c00

08002bc8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	6039      	str	r1, [r7, #0]
 8002bd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002bd4:	4b0d      	ldr	r3, [pc, #52]	; (8002c0c <FLASH_MassErase+0x44>)
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	4a0c      	ldr	r2, [pc, #48]	; (8002c0c <FLASH_MassErase+0x44>)
 8002bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bde:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002be0:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <FLASH_MassErase+0x44>)
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	4a09      	ldr	r2, [pc, #36]	; (8002c0c <FLASH_MassErase+0x44>)
 8002be6:	f043 0304 	orr.w	r3, r3, #4
 8002bea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002bec:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <FLASH_MassErase+0x44>)
 8002bee:	691a      	ldr	r2, [r3, #16]
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	021b      	lsls	r3, r3, #8
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	4a05      	ldr	r2, [pc, #20]	; (8002c0c <FLASH_MassErase+0x44>)
 8002bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfc:	6113      	str	r3, [r2, #16]
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40023c00 	.word	0x40023c00

08002c10 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002c20:	78fb      	ldrb	r3, [r7, #3]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d102      	bne.n	8002c2c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	e010      	b.n	8002c4e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002c2c:	78fb      	ldrb	r3, [r7, #3]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d103      	bne.n	8002c3a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002c32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	e009      	b.n	8002c4e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002c3a:	78fb      	ldrb	r3, [r7, #3]
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d103      	bne.n	8002c48 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002c40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	e002      	b.n	8002c4e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002c48:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c4c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002c4e:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <FLASH_Erase_Sector+0x8c>)
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	4a12      	ldr	r2, [pc, #72]	; (8002c9c <FLASH_Erase_Sector+0x8c>)
 8002c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c58:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002c5a:	4b10      	ldr	r3, [pc, #64]	; (8002c9c <FLASH_Erase_Sector+0x8c>)
 8002c5c:	691a      	ldr	r2, [r3, #16]
 8002c5e:	490f      	ldr	r1, [pc, #60]	; (8002c9c <FLASH_Erase_Sector+0x8c>)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002c66:	4b0d      	ldr	r3, [pc, #52]	; (8002c9c <FLASH_Erase_Sector+0x8c>)
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	4a0c      	ldr	r2, [pc, #48]	; (8002c9c <FLASH_Erase_Sector+0x8c>)
 8002c6c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002c70:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002c72:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <FLASH_Erase_Sector+0x8c>)
 8002c74:	691a      	ldr	r2, [r3, #16]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	4a07      	ldr	r2, [pc, #28]	; (8002c9c <FLASH_Erase_Sector+0x8c>)
 8002c7e:	f043 0302 	orr.w	r3, r3, #2
 8002c82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <FLASH_Erase_Sector+0x8c>)
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	4a04      	ldr	r2, [pc, #16]	; (8002c9c <FLASH_Erase_Sector+0x8c>)
 8002c8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8e:	6113      	str	r3, [r2, #16]
}
 8002c90:	bf00      	nop
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	40023c00 	.word	0x40023c00

08002ca0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002ca4:	4b20      	ldr	r3, [pc, #128]	; (8002d28 <FLASH_FlushCaches+0x88>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d017      	beq.n	8002ce0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002cb0:	4b1d      	ldr	r3, [pc, #116]	; (8002d28 <FLASH_FlushCaches+0x88>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a1c      	ldr	r2, [pc, #112]	; (8002d28 <FLASH_FlushCaches+0x88>)
 8002cb6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002cba:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002cbc:	4b1a      	ldr	r3, [pc, #104]	; (8002d28 <FLASH_FlushCaches+0x88>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a19      	ldr	r2, [pc, #100]	; (8002d28 <FLASH_FlushCaches+0x88>)
 8002cc2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002cc6:	6013      	str	r3, [r2, #0]
 8002cc8:	4b17      	ldr	r3, [pc, #92]	; (8002d28 <FLASH_FlushCaches+0x88>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a16      	ldr	r2, [pc, #88]	; (8002d28 <FLASH_FlushCaches+0x88>)
 8002cce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cd2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cd4:	4b14      	ldr	r3, [pc, #80]	; (8002d28 <FLASH_FlushCaches+0x88>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a13      	ldr	r2, [pc, #76]	; (8002d28 <FLASH_FlushCaches+0x88>)
 8002cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cde:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002ce0:	4b11      	ldr	r3, [pc, #68]	; (8002d28 <FLASH_FlushCaches+0x88>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d017      	beq.n	8002d1c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002cec:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <FLASH_FlushCaches+0x88>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a0d      	ldr	r2, [pc, #52]	; (8002d28 <FLASH_FlushCaches+0x88>)
 8002cf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cf6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002cf8:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <FLASH_FlushCaches+0x88>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a0a      	ldr	r2, [pc, #40]	; (8002d28 <FLASH_FlushCaches+0x88>)
 8002cfe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d02:	6013      	str	r3, [r2, #0]
 8002d04:	4b08      	ldr	r3, [pc, #32]	; (8002d28 <FLASH_FlushCaches+0x88>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a07      	ldr	r2, [pc, #28]	; (8002d28 <FLASH_FlushCaches+0x88>)
 8002d0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d0e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d10:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <FLASH_FlushCaches+0x88>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a04      	ldr	r2, [pc, #16]	; (8002d28 <FLASH_FlushCaches+0x88>)
 8002d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d1a:	6013      	str	r3, [r2, #0]
  }
}
 8002d1c:	bf00      	nop
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40023c00 	.word	0x40023c00

08002d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b089      	sub	sp, #36	; 0x24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d42:	2300      	movs	r3, #0
 8002d44:	61fb      	str	r3, [r7, #28]
 8002d46:	e16b      	b.n	8003020 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d48:	2201      	movs	r2, #1
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	f040 815a 	bne.w	800301a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d005      	beq.n	8002d7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d130      	bne.n	8002de0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	2203      	movs	r2, #3
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4013      	ands	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002db4:	2201      	movs	r2, #1
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	091b      	lsrs	r3, r3, #4
 8002dca:	f003 0201 	and.w	r2, r3, #1
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f003 0303 	and.w	r3, r3, #3
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d017      	beq.n	8002e1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	2203      	movs	r2, #3
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4013      	ands	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d123      	bne.n	8002e70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	08da      	lsrs	r2, r3, #3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3208      	adds	r2, #8
 8002e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	220f      	movs	r2, #15
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	691a      	ldr	r2, [r3, #16]
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	08da      	lsrs	r2, r3, #3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	3208      	adds	r2, #8
 8002e6a:	69b9      	ldr	r1, [r7, #24]
 8002e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	2203      	movs	r2, #3
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	43db      	mvns	r3, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 0203 	and.w	r2, r3, #3
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 80b4 	beq.w	800301a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	4b60      	ldr	r3, [pc, #384]	; (8003038 <HAL_GPIO_Init+0x30c>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eba:	4a5f      	ldr	r2, [pc, #380]	; (8003038 <HAL_GPIO_Init+0x30c>)
 8002ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ec2:	4b5d      	ldr	r3, [pc, #372]	; (8003038 <HAL_GPIO_Init+0x30c>)
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ece:	4a5b      	ldr	r2, [pc, #364]	; (800303c <HAL_GPIO_Init+0x310>)
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	089b      	lsrs	r3, r3, #2
 8002ed4:	3302      	adds	r3, #2
 8002ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	220f      	movs	r2, #15
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	43db      	mvns	r3, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a52      	ldr	r2, [pc, #328]	; (8003040 <HAL_GPIO_Init+0x314>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d02b      	beq.n	8002f52 <HAL_GPIO_Init+0x226>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a51      	ldr	r2, [pc, #324]	; (8003044 <HAL_GPIO_Init+0x318>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d025      	beq.n	8002f4e <HAL_GPIO_Init+0x222>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a50      	ldr	r2, [pc, #320]	; (8003048 <HAL_GPIO_Init+0x31c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d01f      	beq.n	8002f4a <HAL_GPIO_Init+0x21e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a4f      	ldr	r2, [pc, #316]	; (800304c <HAL_GPIO_Init+0x320>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d019      	beq.n	8002f46 <HAL_GPIO_Init+0x21a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a4e      	ldr	r2, [pc, #312]	; (8003050 <HAL_GPIO_Init+0x324>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d013      	beq.n	8002f42 <HAL_GPIO_Init+0x216>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a4d      	ldr	r2, [pc, #308]	; (8003054 <HAL_GPIO_Init+0x328>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d00d      	beq.n	8002f3e <HAL_GPIO_Init+0x212>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a4c      	ldr	r2, [pc, #304]	; (8003058 <HAL_GPIO_Init+0x32c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d007      	beq.n	8002f3a <HAL_GPIO_Init+0x20e>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a4b      	ldr	r2, [pc, #300]	; (800305c <HAL_GPIO_Init+0x330>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d101      	bne.n	8002f36 <HAL_GPIO_Init+0x20a>
 8002f32:	2307      	movs	r3, #7
 8002f34:	e00e      	b.n	8002f54 <HAL_GPIO_Init+0x228>
 8002f36:	2308      	movs	r3, #8
 8002f38:	e00c      	b.n	8002f54 <HAL_GPIO_Init+0x228>
 8002f3a:	2306      	movs	r3, #6
 8002f3c:	e00a      	b.n	8002f54 <HAL_GPIO_Init+0x228>
 8002f3e:	2305      	movs	r3, #5
 8002f40:	e008      	b.n	8002f54 <HAL_GPIO_Init+0x228>
 8002f42:	2304      	movs	r3, #4
 8002f44:	e006      	b.n	8002f54 <HAL_GPIO_Init+0x228>
 8002f46:	2303      	movs	r3, #3
 8002f48:	e004      	b.n	8002f54 <HAL_GPIO_Init+0x228>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e002      	b.n	8002f54 <HAL_GPIO_Init+0x228>
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e000      	b.n	8002f54 <HAL_GPIO_Init+0x228>
 8002f52:	2300      	movs	r3, #0
 8002f54:	69fa      	ldr	r2, [r7, #28]
 8002f56:	f002 0203 	and.w	r2, r2, #3
 8002f5a:	0092      	lsls	r2, r2, #2
 8002f5c:	4093      	lsls	r3, r2
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f64:	4935      	ldr	r1, [pc, #212]	; (800303c <HAL_GPIO_Init+0x310>)
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	089b      	lsrs	r3, r3, #2
 8002f6a:	3302      	adds	r3, #2
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f72:	4b3b      	ldr	r3, [pc, #236]	; (8003060 <HAL_GPIO_Init+0x334>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f96:	4a32      	ldr	r2, [pc, #200]	; (8003060 <HAL_GPIO_Init+0x334>)
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f9c:	4b30      	ldr	r3, [pc, #192]	; (8003060 <HAL_GPIO_Init+0x334>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fc0:	4a27      	ldr	r2, [pc, #156]	; (8003060 <HAL_GPIO_Init+0x334>)
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fc6:	4b26      	ldr	r3, [pc, #152]	; (8003060 <HAL_GPIO_Init+0x334>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fea:	4a1d      	ldr	r2, [pc, #116]	; (8003060 <HAL_GPIO_Init+0x334>)
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ff0:	4b1b      	ldr	r3, [pc, #108]	; (8003060 <HAL_GPIO_Init+0x334>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003014:	4a12      	ldr	r2, [pc, #72]	; (8003060 <HAL_GPIO_Init+0x334>)
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	3301      	adds	r3, #1
 800301e:	61fb      	str	r3, [r7, #28]
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	2b0f      	cmp	r3, #15
 8003024:	f67f ae90 	bls.w	8002d48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003028:	bf00      	nop
 800302a:	bf00      	nop
 800302c:	3724      	adds	r7, #36	; 0x24
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	40023800 	.word	0x40023800
 800303c:	40013800 	.word	0x40013800
 8003040:	40020000 	.word	0x40020000
 8003044:	40020400 	.word	0x40020400
 8003048:	40020800 	.word	0x40020800
 800304c:	40020c00 	.word	0x40020c00
 8003050:	40021000 	.word	0x40021000
 8003054:	40021400 	.word	0x40021400
 8003058:	40021800 	.word	0x40021800
 800305c:	40021c00 	.word	0x40021c00
 8003060:	40013c00 	.word	0x40013c00

08003064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	807b      	strh	r3, [r7, #2]
 8003070:	4613      	mov	r3, r2
 8003072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003074:	787b      	ldrb	r3, [r7, #1]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800307a:	887a      	ldrh	r2, [r7, #2]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003080:	e003      	b.n	800308a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003082:	887b      	ldrh	r3, [r7, #2]
 8003084:	041a      	lsls	r2, r3, #16
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	619a      	str	r2, [r3, #24]
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003096:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003098:	b08f      	sub	sp, #60	; 0x3c
 800309a:	af0a      	add	r7, sp, #40	; 0x28
 800309c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e054      	b.n	8003152 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d106      	bne.n	80030c8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f00f f9e8 	bl	8012498 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2203      	movs	r2, #3
 80030cc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d102      	bne.n	80030e2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f004 fa24 	bl	8007534 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	603b      	str	r3, [r7, #0]
 80030f2:	687e      	ldr	r6, [r7, #4]
 80030f4:	466d      	mov	r5, sp
 80030f6:	f106 0410 	add.w	r4, r6, #16
 80030fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003100:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003102:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003106:	e885 0003 	stmia.w	r5, {r0, r1}
 800310a:	1d33      	adds	r3, r6, #4
 800310c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800310e:	6838      	ldr	r0, [r7, #0]
 8003110:	f004 f99e 	bl	8007450 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2101      	movs	r1, #1
 800311a:	4618      	mov	r0, r3
 800311c:	f004 fa1b 	bl	8007556 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	603b      	str	r3, [r7, #0]
 8003126:	687e      	ldr	r6, [r7, #4]
 8003128:	466d      	mov	r5, sp
 800312a:	f106 0410 	add.w	r4, r6, #16
 800312e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003130:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003132:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003134:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003136:	e894 0003 	ldmia.w	r4, {r0, r1}
 800313a:	e885 0003 	stmia.w	r5, {r0, r1}
 800313e:	1d33      	adds	r3, r6, #4
 8003140:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003142:	6838      	ldr	r0, [r7, #0]
 8003144:	f004 fba4 	bl	8007890 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800315a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800315a:	b590      	push	{r4, r7, lr}
 800315c:	b089      	sub	sp, #36	; 0x24
 800315e:	af04      	add	r7, sp, #16
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	4608      	mov	r0, r1
 8003164:	4611      	mov	r1, r2
 8003166:	461a      	mov	r2, r3
 8003168:	4603      	mov	r3, r0
 800316a:	70fb      	strb	r3, [r7, #3]
 800316c:	460b      	mov	r3, r1
 800316e:	70bb      	strb	r3, [r7, #2]
 8003170:	4613      	mov	r3, r2
 8003172:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800317a:	2b01      	cmp	r3, #1
 800317c:	d101      	bne.n	8003182 <HAL_HCD_HC_Init+0x28>
 800317e:	2302      	movs	r3, #2
 8003180:	e076      	b.n	8003270 <HAL_HCD_HC_Init+0x116>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800318a:	78fb      	ldrb	r3, [r7, #3]
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	212c      	movs	r1, #44	; 0x2c
 8003190:	fb01 f303 	mul.w	r3, r1, r3
 8003194:	4413      	add	r3, r2
 8003196:	333d      	adds	r3, #61	; 0x3d
 8003198:	2200      	movs	r2, #0
 800319a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800319c:	78fb      	ldrb	r3, [r7, #3]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	212c      	movs	r1, #44	; 0x2c
 80031a2:	fb01 f303 	mul.w	r3, r1, r3
 80031a6:	4413      	add	r3, r2
 80031a8:	3338      	adds	r3, #56	; 0x38
 80031aa:	787a      	ldrb	r2, [r7, #1]
 80031ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80031ae:	78fb      	ldrb	r3, [r7, #3]
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	212c      	movs	r1, #44	; 0x2c
 80031b4:	fb01 f303 	mul.w	r3, r1, r3
 80031b8:	4413      	add	r3, r2
 80031ba:	3340      	adds	r3, #64	; 0x40
 80031bc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80031be:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80031c0:	78fb      	ldrb	r3, [r7, #3]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	212c      	movs	r1, #44	; 0x2c
 80031c6:	fb01 f303 	mul.w	r3, r1, r3
 80031ca:	4413      	add	r3, r2
 80031cc:	3339      	adds	r3, #57	; 0x39
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80031d2:	78fb      	ldrb	r3, [r7, #3]
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	212c      	movs	r1, #44	; 0x2c
 80031d8:	fb01 f303 	mul.w	r3, r1, r3
 80031dc:	4413      	add	r3, r2
 80031de:	333f      	adds	r3, #63	; 0x3f
 80031e0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80031e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80031e6:	78fb      	ldrb	r3, [r7, #3]
 80031e8:	78ba      	ldrb	r2, [r7, #2]
 80031ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031ee:	b2d0      	uxtb	r0, r2
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	212c      	movs	r1, #44	; 0x2c
 80031f4:	fb01 f303 	mul.w	r3, r1, r3
 80031f8:	4413      	add	r3, r2
 80031fa:	333a      	adds	r3, #58	; 0x3a
 80031fc:	4602      	mov	r2, r0
 80031fe:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003200:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003204:	2b00      	cmp	r3, #0
 8003206:	da09      	bge.n	800321c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003208:	78fb      	ldrb	r3, [r7, #3]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	212c      	movs	r1, #44	; 0x2c
 800320e:	fb01 f303 	mul.w	r3, r1, r3
 8003212:	4413      	add	r3, r2
 8003214:	333b      	adds	r3, #59	; 0x3b
 8003216:	2201      	movs	r2, #1
 8003218:	701a      	strb	r2, [r3, #0]
 800321a:	e008      	b.n	800322e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800321c:	78fb      	ldrb	r3, [r7, #3]
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	212c      	movs	r1, #44	; 0x2c
 8003222:	fb01 f303 	mul.w	r3, r1, r3
 8003226:	4413      	add	r3, r2
 8003228:	333b      	adds	r3, #59	; 0x3b
 800322a:	2200      	movs	r2, #0
 800322c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800322e:	78fb      	ldrb	r3, [r7, #3]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	212c      	movs	r1, #44	; 0x2c
 8003234:	fb01 f303 	mul.w	r3, r1, r3
 8003238:	4413      	add	r3, r2
 800323a:	333c      	adds	r3, #60	; 0x3c
 800323c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003240:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6818      	ldr	r0, [r3, #0]
 8003246:	787c      	ldrb	r4, [r7, #1]
 8003248:	78ba      	ldrb	r2, [r7, #2]
 800324a:	78f9      	ldrb	r1, [r7, #3]
 800324c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800324e:	9302      	str	r3, [sp, #8]
 8003250:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003254:	9301      	str	r3, [sp, #4]
 8003256:	f897 3020 	ldrb.w	r3, [r7, #32]
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	4623      	mov	r3, r4
 800325e:	f004 fc9d 	bl	8007b9c <USB_HC_Init>
 8003262:	4603      	mov	r3, r0
 8003264:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800326e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	bd90      	pop	{r4, r7, pc}

08003278 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	460b      	mov	r3, r1
 8003282:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003284:	2300      	movs	r3, #0
 8003286:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800328e:	2b01      	cmp	r3, #1
 8003290:	d101      	bne.n	8003296 <HAL_HCD_HC_Halt+0x1e>
 8003292:	2302      	movs	r3, #2
 8003294:	e00f      	b.n	80032b6 <HAL_HCD_HC_Halt+0x3e>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	4611      	mov	r1, r2
 80032a6:	4618      	mov	r0, r3
 80032a8:	f004 feed 	bl	8008086 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	4608      	mov	r0, r1
 80032ca:	4611      	mov	r1, r2
 80032cc:	461a      	mov	r2, r3
 80032ce:	4603      	mov	r3, r0
 80032d0:	70fb      	strb	r3, [r7, #3]
 80032d2:	460b      	mov	r3, r1
 80032d4:	70bb      	strb	r3, [r7, #2]
 80032d6:	4613      	mov	r3, r2
 80032d8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80032da:	78fb      	ldrb	r3, [r7, #3]
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	212c      	movs	r1, #44	; 0x2c
 80032e0:	fb01 f303 	mul.w	r3, r1, r3
 80032e4:	4413      	add	r3, r2
 80032e6:	333b      	adds	r3, #59	; 0x3b
 80032e8:	78ba      	ldrb	r2, [r7, #2]
 80032ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	212c      	movs	r1, #44	; 0x2c
 80032f2:	fb01 f303 	mul.w	r3, r1, r3
 80032f6:	4413      	add	r3, r2
 80032f8:	333f      	adds	r3, #63	; 0x3f
 80032fa:	787a      	ldrb	r2, [r7, #1]
 80032fc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80032fe:	7c3b      	ldrb	r3, [r7, #16]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d112      	bne.n	800332a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003304:	78fb      	ldrb	r3, [r7, #3]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	212c      	movs	r1, #44	; 0x2c
 800330a:	fb01 f303 	mul.w	r3, r1, r3
 800330e:	4413      	add	r3, r2
 8003310:	3342      	adds	r3, #66	; 0x42
 8003312:	2203      	movs	r2, #3
 8003314:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003316:	78fb      	ldrb	r3, [r7, #3]
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	212c      	movs	r1, #44	; 0x2c
 800331c:	fb01 f303 	mul.w	r3, r1, r3
 8003320:	4413      	add	r3, r2
 8003322:	333d      	adds	r3, #61	; 0x3d
 8003324:	7f3a      	ldrb	r2, [r7, #28]
 8003326:	701a      	strb	r2, [r3, #0]
 8003328:	e008      	b.n	800333c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800332a:	78fb      	ldrb	r3, [r7, #3]
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	212c      	movs	r1, #44	; 0x2c
 8003330:	fb01 f303 	mul.w	r3, r1, r3
 8003334:	4413      	add	r3, r2
 8003336:	3342      	adds	r3, #66	; 0x42
 8003338:	2202      	movs	r2, #2
 800333a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800333c:	787b      	ldrb	r3, [r7, #1]
 800333e:	2b03      	cmp	r3, #3
 8003340:	f200 80c6 	bhi.w	80034d0 <HAL_HCD_HC_SubmitRequest+0x210>
 8003344:	a201      	add	r2, pc, #4	; (adr r2, 800334c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334a:	bf00      	nop
 800334c:	0800335d 	.word	0x0800335d
 8003350:	080034bd 	.word	0x080034bd
 8003354:	080033c1 	.word	0x080033c1
 8003358:	0800343f 	.word	0x0800343f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800335c:	7c3b      	ldrb	r3, [r7, #16]
 800335e:	2b01      	cmp	r3, #1
 8003360:	f040 80b8 	bne.w	80034d4 <HAL_HCD_HC_SubmitRequest+0x214>
 8003364:	78bb      	ldrb	r3, [r7, #2]
 8003366:	2b00      	cmp	r3, #0
 8003368:	f040 80b4 	bne.w	80034d4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800336c:	8b3b      	ldrh	r3, [r7, #24]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d108      	bne.n	8003384 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003372:	78fb      	ldrb	r3, [r7, #3]
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	212c      	movs	r1, #44	; 0x2c
 8003378:	fb01 f303 	mul.w	r3, r1, r3
 800337c:	4413      	add	r3, r2
 800337e:	3355      	adds	r3, #85	; 0x55
 8003380:	2201      	movs	r2, #1
 8003382:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	212c      	movs	r1, #44	; 0x2c
 800338a:	fb01 f303 	mul.w	r3, r1, r3
 800338e:	4413      	add	r3, r2
 8003390:	3355      	adds	r3, #85	; 0x55
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d109      	bne.n	80033ac <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003398:	78fb      	ldrb	r3, [r7, #3]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	212c      	movs	r1, #44	; 0x2c
 800339e:	fb01 f303 	mul.w	r3, r1, r3
 80033a2:	4413      	add	r3, r2
 80033a4:	3342      	adds	r3, #66	; 0x42
 80033a6:	2200      	movs	r2, #0
 80033a8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80033aa:	e093      	b.n	80034d4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033ac:	78fb      	ldrb	r3, [r7, #3]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	212c      	movs	r1, #44	; 0x2c
 80033b2:	fb01 f303 	mul.w	r3, r1, r3
 80033b6:	4413      	add	r3, r2
 80033b8:	3342      	adds	r3, #66	; 0x42
 80033ba:	2202      	movs	r2, #2
 80033bc:	701a      	strb	r2, [r3, #0]
      break;
 80033be:	e089      	b.n	80034d4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80033c0:	78bb      	ldrb	r3, [r7, #2]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d11d      	bne.n	8003402 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80033c6:	78fb      	ldrb	r3, [r7, #3]
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	212c      	movs	r1, #44	; 0x2c
 80033cc:	fb01 f303 	mul.w	r3, r1, r3
 80033d0:	4413      	add	r3, r2
 80033d2:	3355      	adds	r3, #85	; 0x55
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d109      	bne.n	80033ee <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033da:	78fb      	ldrb	r3, [r7, #3]
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	212c      	movs	r1, #44	; 0x2c
 80033e0:	fb01 f303 	mul.w	r3, r1, r3
 80033e4:	4413      	add	r3, r2
 80033e6:	3342      	adds	r3, #66	; 0x42
 80033e8:	2200      	movs	r2, #0
 80033ea:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80033ec:	e073      	b.n	80034d6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033ee:	78fb      	ldrb	r3, [r7, #3]
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	212c      	movs	r1, #44	; 0x2c
 80033f4:	fb01 f303 	mul.w	r3, r1, r3
 80033f8:	4413      	add	r3, r2
 80033fa:	3342      	adds	r3, #66	; 0x42
 80033fc:	2202      	movs	r2, #2
 80033fe:	701a      	strb	r2, [r3, #0]
      break;
 8003400:	e069      	b.n	80034d6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003402:	78fb      	ldrb	r3, [r7, #3]
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	212c      	movs	r1, #44	; 0x2c
 8003408:	fb01 f303 	mul.w	r3, r1, r3
 800340c:	4413      	add	r3, r2
 800340e:	3354      	adds	r3, #84	; 0x54
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d109      	bne.n	800342a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003416:	78fb      	ldrb	r3, [r7, #3]
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	212c      	movs	r1, #44	; 0x2c
 800341c:	fb01 f303 	mul.w	r3, r1, r3
 8003420:	4413      	add	r3, r2
 8003422:	3342      	adds	r3, #66	; 0x42
 8003424:	2200      	movs	r2, #0
 8003426:	701a      	strb	r2, [r3, #0]
      break;
 8003428:	e055      	b.n	80034d6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800342a:	78fb      	ldrb	r3, [r7, #3]
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	212c      	movs	r1, #44	; 0x2c
 8003430:	fb01 f303 	mul.w	r3, r1, r3
 8003434:	4413      	add	r3, r2
 8003436:	3342      	adds	r3, #66	; 0x42
 8003438:	2202      	movs	r2, #2
 800343a:	701a      	strb	r2, [r3, #0]
      break;
 800343c:	e04b      	b.n	80034d6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800343e:	78bb      	ldrb	r3, [r7, #2]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d11d      	bne.n	8003480 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003444:	78fb      	ldrb	r3, [r7, #3]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	212c      	movs	r1, #44	; 0x2c
 800344a:	fb01 f303 	mul.w	r3, r1, r3
 800344e:	4413      	add	r3, r2
 8003450:	3355      	adds	r3, #85	; 0x55
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d109      	bne.n	800346c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003458:	78fb      	ldrb	r3, [r7, #3]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	212c      	movs	r1, #44	; 0x2c
 800345e:	fb01 f303 	mul.w	r3, r1, r3
 8003462:	4413      	add	r3, r2
 8003464:	3342      	adds	r3, #66	; 0x42
 8003466:	2200      	movs	r2, #0
 8003468:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800346a:	e034      	b.n	80034d6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	212c      	movs	r1, #44	; 0x2c
 8003472:	fb01 f303 	mul.w	r3, r1, r3
 8003476:	4413      	add	r3, r2
 8003478:	3342      	adds	r3, #66	; 0x42
 800347a:	2202      	movs	r2, #2
 800347c:	701a      	strb	r2, [r3, #0]
      break;
 800347e:	e02a      	b.n	80034d6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	212c      	movs	r1, #44	; 0x2c
 8003486:	fb01 f303 	mul.w	r3, r1, r3
 800348a:	4413      	add	r3, r2
 800348c:	3354      	adds	r3, #84	; 0x54
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d109      	bne.n	80034a8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003494:	78fb      	ldrb	r3, [r7, #3]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	212c      	movs	r1, #44	; 0x2c
 800349a:	fb01 f303 	mul.w	r3, r1, r3
 800349e:	4413      	add	r3, r2
 80034a0:	3342      	adds	r3, #66	; 0x42
 80034a2:	2200      	movs	r2, #0
 80034a4:	701a      	strb	r2, [r3, #0]
      break;
 80034a6:	e016      	b.n	80034d6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034a8:	78fb      	ldrb	r3, [r7, #3]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	212c      	movs	r1, #44	; 0x2c
 80034ae:	fb01 f303 	mul.w	r3, r1, r3
 80034b2:	4413      	add	r3, r2
 80034b4:	3342      	adds	r3, #66	; 0x42
 80034b6:	2202      	movs	r2, #2
 80034b8:	701a      	strb	r2, [r3, #0]
      break;
 80034ba:	e00c      	b.n	80034d6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034bc:	78fb      	ldrb	r3, [r7, #3]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	212c      	movs	r1, #44	; 0x2c
 80034c2:	fb01 f303 	mul.w	r3, r1, r3
 80034c6:	4413      	add	r3, r2
 80034c8:	3342      	adds	r3, #66	; 0x42
 80034ca:	2200      	movs	r2, #0
 80034cc:	701a      	strb	r2, [r3, #0]
      break;
 80034ce:	e002      	b.n	80034d6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80034d0:	bf00      	nop
 80034d2:	e000      	b.n	80034d6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80034d4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80034d6:	78fb      	ldrb	r3, [r7, #3]
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	212c      	movs	r1, #44	; 0x2c
 80034dc:	fb01 f303 	mul.w	r3, r1, r3
 80034e0:	4413      	add	r3, r2
 80034e2:	3344      	adds	r3, #68	; 0x44
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80034e8:	78fb      	ldrb	r3, [r7, #3]
 80034ea:	8b3a      	ldrh	r2, [r7, #24]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	202c      	movs	r0, #44	; 0x2c
 80034f0:	fb00 f303 	mul.w	r3, r0, r3
 80034f4:	440b      	add	r3, r1
 80034f6:	334c      	adds	r3, #76	; 0x4c
 80034f8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80034fa:	78fb      	ldrb	r3, [r7, #3]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	212c      	movs	r1, #44	; 0x2c
 8003500:	fb01 f303 	mul.w	r3, r1, r3
 8003504:	4413      	add	r3, r2
 8003506:	3360      	adds	r3, #96	; 0x60
 8003508:	2200      	movs	r2, #0
 800350a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800350c:	78fb      	ldrb	r3, [r7, #3]
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	212c      	movs	r1, #44	; 0x2c
 8003512:	fb01 f303 	mul.w	r3, r1, r3
 8003516:	4413      	add	r3, r2
 8003518:	3350      	adds	r3, #80	; 0x50
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800351e:	78fb      	ldrb	r3, [r7, #3]
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	212c      	movs	r1, #44	; 0x2c
 8003524:	fb01 f303 	mul.w	r3, r1, r3
 8003528:	4413      	add	r3, r2
 800352a:	3339      	adds	r3, #57	; 0x39
 800352c:	78fa      	ldrb	r2, [r7, #3]
 800352e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003530:	78fb      	ldrb	r3, [r7, #3]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	212c      	movs	r1, #44	; 0x2c
 8003536:	fb01 f303 	mul.w	r3, r1, r3
 800353a:	4413      	add	r3, r2
 800353c:	3361      	adds	r3, #97	; 0x61
 800353e:	2200      	movs	r2, #0
 8003540:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	78fb      	ldrb	r3, [r7, #3]
 8003548:	222c      	movs	r2, #44	; 0x2c
 800354a:	fb02 f303 	mul.w	r3, r2, r3
 800354e:	3338      	adds	r3, #56	; 0x38
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	18d1      	adds	r1, r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	461a      	mov	r2, r3
 800355c:	f004 fc40 	bl	8007de0 <USB_HC_StartXfer>
 8003560:	4603      	mov	r3, r0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop

0800356c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f004 f941 	bl	800780a <USB_GetMode>
 8003588:	4603      	mov	r3, r0
 800358a:	2b01      	cmp	r3, #1
 800358c:	f040 80f6 	bne.w	800377c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f004 f925 	bl	80077e4 <USB_ReadInterrupts>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 80ec 	beq.w	800377a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f004 f91c 	bl	80077e4 <USB_ReadInterrupts>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035b6:	d104      	bne.n	80035c2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80035c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f004 f90c 	bl	80077e4 <USB_ReadInterrupts>
 80035cc:	4603      	mov	r3, r0
 80035ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035d6:	d104      	bne.n	80035e2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80035e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f004 f8fc 	bl	80077e4 <USB_ReadInterrupts>
 80035ec:	4603      	mov	r3, r0
 80035ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035f6:	d104      	bne.n	8003602 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003600:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f004 f8ec 	bl	80077e4 <USB_ReadInterrupts>
 800360c:	4603      	mov	r3, r0
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b02      	cmp	r3, #2
 8003614:	d103      	bne.n	800361e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2202      	movs	r2, #2
 800361c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f004 f8de 	bl	80077e4 <USB_ReadInterrupts>
 8003628:	4603      	mov	r3, r0
 800362a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800362e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003632:	d11c      	bne.n	800366e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800363c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10f      	bne.n	800366e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800364e:	2110      	movs	r1, #16
 8003650:	6938      	ldr	r0, [r7, #16]
 8003652:	f003 ffcd 	bl	80075f0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003656:	6938      	ldr	r0, [r7, #16]
 8003658:	f003 fffe 	bl	8007658 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2101      	movs	r1, #1
 8003662:	4618      	mov	r0, r3
 8003664:	f004 f9d4 	bl	8007a10 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f00e ff85 	bl	8012578 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f004 f8b6 	bl	80077e4 <USB_ReadInterrupts>
 8003678:	4603      	mov	r3, r0
 800367a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800367e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003682:	d102      	bne.n	800368a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f001 f89e 	bl	80047c6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f004 f8a8 	bl	80077e4 <USB_ReadInterrupts>
 8003694:	4603      	mov	r3, r0
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b08      	cmp	r3, #8
 800369c:	d106      	bne.n	80036ac <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f00e ff4e 	bl	8012540 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2208      	movs	r2, #8
 80036aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f004 f897 	bl	80077e4 <USB_ReadInterrupts>
 80036b6:	4603      	mov	r3, r0
 80036b8:	f003 0310 	and.w	r3, r3, #16
 80036bc:	2b10      	cmp	r3, #16
 80036be:	d101      	bne.n	80036c4 <HAL_HCD_IRQHandler+0x158>
 80036c0:	2301      	movs	r3, #1
 80036c2:	e000      	b.n	80036c6 <HAL_HCD_IRQHandler+0x15a>
 80036c4:	2300      	movs	r3, #0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d012      	beq.n	80036f0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699a      	ldr	r2, [r3, #24]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0210 	bic.w	r2, r2, #16
 80036d8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 ffa1 	bl	8004622 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699a      	ldr	r2, [r3, #24]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0210 	orr.w	r2, r2, #16
 80036ee:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f004 f875 	bl	80077e4 <USB_ReadInterrupts>
 80036fa:	4603      	mov	r3, r0
 80036fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003700:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003704:	d13a      	bne.n	800377c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f004 fcaa 	bl	8008064 <USB_HC_ReadInterrupt>
 8003710:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003712:	2300      	movs	r3, #0
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	e025      	b.n	8003764 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	fa22 f303 	lsr.w	r3, r2, r3
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d018      	beq.n	800375e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	015a      	lsls	r2, r3, #5
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4413      	add	r3, r2
 8003734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800373e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003742:	d106      	bne.n	8003752 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	b2db      	uxtb	r3, r3
 8003748:	4619      	mov	r1, r3
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f8ab 	bl	80038a6 <HCD_HC_IN_IRQHandler>
 8003750:	e005      	b.n	800375e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	b2db      	uxtb	r3, r3
 8003756:	4619      	mov	r1, r3
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 fbf9 	bl	8003f50 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	3301      	adds	r3, #1
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	429a      	cmp	r2, r3
 800376c:	d3d4      	bcc.n	8003718 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003776:	615a      	str	r2, [r3, #20]
 8003778:	e000      	b.n	800377c <HAL_HCD_IRQHandler+0x210>
      return;
 800377a:	bf00      	nop
    }
  }
}
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b082      	sub	sp, #8
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003790:	2b01      	cmp	r3, #1
 8003792:	d101      	bne.n	8003798 <HAL_HCD_Start+0x16>
 8003794:	2302      	movs	r3, #2
 8003796:	e013      	b.n	80037c0 <HAL_HCD_Start+0x3e>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2101      	movs	r1, #1
 80037a6:	4618      	mov	r0, r3
 80037a8:	f004 f996 	bl	8007ad8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f003 feae 	bl	8007512 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d101      	bne.n	80037de <HAL_HCD_Stop+0x16>
 80037da:	2302      	movs	r3, #2
 80037dc:	e00d      	b.n	80037fa <HAL_HCD_Stop+0x32>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f004 fd84 	bl	80082f8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f004 f938 	bl	8007a84 <USB_ResetPort>
 8003814:	4603      	mov	r3, r0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	460b      	mov	r3, r1
 8003828:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800382a:	78fb      	ldrb	r3, [r7, #3]
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	212c      	movs	r1, #44	; 0x2c
 8003830:	fb01 f303 	mul.w	r3, r1, r3
 8003834:	4413      	add	r3, r2
 8003836:	3360      	adds	r3, #96	; 0x60
 8003838:	781b      	ldrb	r3, [r3, #0]
}
 800383a:	4618      	mov	r0, r3
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	460b      	mov	r3, r1
 8003850:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003852:	78fb      	ldrb	r3, [r7, #3]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	212c      	movs	r1, #44	; 0x2c
 8003858:	fb01 f303 	mul.w	r3, r1, r3
 800385c:	4413      	add	r3, r2
 800385e:	3350      	adds	r3, #80	; 0x50
 8003860:	681b      	ldr	r3, [r3, #0]
}
 8003862:	4618      	mov	r0, r3
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b082      	sub	sp, #8
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f004 f97c 	bl	8007b78 <USB_GetCurrentFrame>
 8003880:	4603      	mov	r3, r0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b082      	sub	sp, #8
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f004 f957 	bl	8007b4a <USB_GetHostSpeed>
 800389c:	4603      	mov	r3, r0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b086      	sub	sp, #24
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	460b      	mov	r3, r1
 80038b0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80038bc:	78fb      	ldrb	r3, [r7, #3]
 80038be:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	015a      	lsls	r2, r3, #5
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	4413      	add	r3, r2
 80038c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d11a      	bne.n	800390c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e2:	461a      	mov	r2, r3
 80038e4:	2304      	movs	r3, #4
 80038e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	212c      	movs	r1, #44	; 0x2c
 80038ee:	fb01 f303 	mul.w	r3, r1, r3
 80038f2:	4413      	add	r3, r2
 80038f4:	3361      	adds	r3, #97	; 0x61
 80038f6:	2206      	movs	r2, #6
 80038f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	4611      	mov	r1, r2
 8003904:	4618      	mov	r0, r3
 8003906:	f004 fbbe 	bl	8008086 <USB_HC_Halt>
 800390a:	e0af      	b.n	8003a6c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	015a      	lsls	r2, r3, #5
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	4413      	add	r3, r2
 8003914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003922:	d11b      	bne.n	800395c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	4413      	add	r3, r2
 800392c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003930:	461a      	mov	r2, r3
 8003932:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003936:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	212c      	movs	r1, #44	; 0x2c
 800393e:	fb01 f303 	mul.w	r3, r1, r3
 8003942:	4413      	add	r3, r2
 8003944:	3361      	adds	r3, #97	; 0x61
 8003946:	2207      	movs	r2, #7
 8003948:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	4611      	mov	r1, r2
 8003954:	4618      	mov	r0, r3
 8003956:	f004 fb96 	bl	8008086 <USB_HC_Halt>
 800395a:	e087      	b.n	8003a6c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	4413      	add	r3, r2
 8003964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 0320 	and.w	r3, r3, #32
 800396e:	2b20      	cmp	r3, #32
 8003970:	d109      	bne.n	8003986 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	015a      	lsls	r2, r3, #5
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	4413      	add	r3, r2
 800397a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397e:	461a      	mov	r2, r3
 8003980:	2320      	movs	r3, #32
 8003982:	6093      	str	r3, [r2, #8]
 8003984:	e072      	b.n	8003a6c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	015a      	lsls	r2, r3, #5
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	4413      	add	r3, r2
 800398e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b08      	cmp	r3, #8
 800399a:	d11a      	bne.n	80039d2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a8:	461a      	mov	r2, r3
 80039aa:	2308      	movs	r3, #8
 80039ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	212c      	movs	r1, #44	; 0x2c
 80039b4:	fb01 f303 	mul.w	r3, r1, r3
 80039b8:	4413      	add	r3, r2
 80039ba:	3361      	adds	r3, #97	; 0x61
 80039bc:	2205      	movs	r2, #5
 80039be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	4611      	mov	r1, r2
 80039ca:	4618      	mov	r0, r3
 80039cc:	f004 fb5b 	bl	8008086 <USB_HC_Halt>
 80039d0:	e04c      	b.n	8003a6c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	015a      	lsls	r2, r3, #5
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	4413      	add	r3, r2
 80039da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039e8:	d11b      	bne.n	8003a22 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039f6:	461a      	mov	r2, r3
 80039f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	212c      	movs	r1, #44	; 0x2c
 8003a04:	fb01 f303 	mul.w	r3, r1, r3
 8003a08:	4413      	add	r3, r2
 8003a0a:	3361      	adds	r3, #97	; 0x61
 8003a0c:	2208      	movs	r2, #8
 8003a0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	4611      	mov	r1, r2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f004 fb33 	bl	8008086 <USB_HC_Halt>
 8003a20:	e024      	b.n	8003a6c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	015a      	lsls	r2, r3, #5
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a34:	2b80      	cmp	r3, #128	; 0x80
 8003a36:	d119      	bne.n	8003a6c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	015a      	lsls	r2, r3, #5
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a44:	461a      	mov	r2, r3
 8003a46:	2380      	movs	r3, #128	; 0x80
 8003a48:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	212c      	movs	r1, #44	; 0x2c
 8003a50:	fb01 f303 	mul.w	r3, r1, r3
 8003a54:	4413      	add	r3, r2
 8003a56:	3361      	adds	r3, #97	; 0x61
 8003a58:	2206      	movs	r2, #6
 8003a5a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	4611      	mov	r1, r2
 8003a66:	4618      	mov	r0, r3
 8003a68:	f004 fb0d 	bl	8008086 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a82:	d112      	bne.n	8003aaa <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	4611      	mov	r1, r2
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f004 faf9 	bl	8008086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003aa6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003aa8:	e24e      	b.n	8003f48 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	015a      	lsls	r2, r3, #5
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	f040 80df 	bne.w	8003c80 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d019      	beq.n	8003afe <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	212c      	movs	r1, #44	; 0x2c
 8003ad0:	fb01 f303 	mul.w	r3, r1, r3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	3348      	adds	r3, #72	; 0x48
 8003ad8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	0159      	lsls	r1, r3, #5
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	440b      	add	r3, r1
 8003ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003aec:	1ad2      	subs	r2, r2, r3
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	202c      	movs	r0, #44	; 0x2c
 8003af4:	fb00 f303 	mul.w	r3, r0, r3
 8003af8:	440b      	add	r3, r1
 8003afa:	3350      	adds	r3, #80	; 0x50
 8003afc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	212c      	movs	r1, #44	; 0x2c
 8003b04:	fb01 f303 	mul.w	r3, r1, r3
 8003b08:	4413      	add	r3, r2
 8003b0a:	3361      	adds	r3, #97	; 0x61
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	212c      	movs	r1, #44	; 0x2c
 8003b16:	fb01 f303 	mul.w	r3, r1, r3
 8003b1a:	4413      	add	r3, r2
 8003b1c:	335c      	adds	r3, #92	; 0x5c
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	015a      	lsls	r2, r3, #5
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	4413      	add	r3, r2
 8003b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b2e:	461a      	mov	r2, r3
 8003b30:	2301      	movs	r3, #1
 8003b32:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	212c      	movs	r1, #44	; 0x2c
 8003b3a:	fb01 f303 	mul.w	r3, r1, r3
 8003b3e:	4413      	add	r3, r2
 8003b40:	333f      	adds	r3, #63	; 0x3f
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d009      	beq.n	8003b5c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	212c      	movs	r1, #44	; 0x2c
 8003b4e:	fb01 f303 	mul.w	r3, r1, r3
 8003b52:	4413      	add	r3, r2
 8003b54:	333f      	adds	r3, #63	; 0x3f
 8003b56:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d111      	bne.n	8003b80 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	4611      	mov	r1, r2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f004 fa8d 	bl	8008086 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b78:	461a      	mov	r2, r3
 8003b7a:	2310      	movs	r3, #16
 8003b7c:	6093      	str	r3, [r2, #8]
 8003b7e:	e03a      	b.n	8003bf6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	212c      	movs	r1, #44	; 0x2c
 8003b86:	fb01 f303 	mul.w	r3, r1, r3
 8003b8a:	4413      	add	r3, r2
 8003b8c:	333f      	adds	r3, #63	; 0x3f
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	d009      	beq.n	8003ba8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	212c      	movs	r1, #44	; 0x2c
 8003b9a:	fb01 f303 	mul.w	r3, r1, r3
 8003b9e:	4413      	add	r3, r2
 8003ba0:	333f      	adds	r3, #63	; 0x3f
 8003ba2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d126      	bne.n	8003bf6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	0151      	lsls	r1, r2, #5
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	440a      	add	r2, r1
 8003bbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003bc6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	212c      	movs	r1, #44	; 0x2c
 8003bce:	fb01 f303 	mul.w	r3, r1, r3
 8003bd2:	4413      	add	r3, r2
 8003bd4:	3360      	adds	r3, #96	; 0x60
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	b2d9      	uxtb	r1, r3
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	202c      	movs	r0, #44	; 0x2c
 8003be4:	fb00 f303 	mul.w	r3, r0, r3
 8003be8:	4413      	add	r3, r2
 8003bea:	3360      	adds	r3, #96	; 0x60
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f00e fccf 	bl	8012594 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d12b      	bne.n	8003c56 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	212c      	movs	r1, #44	; 0x2c
 8003c04:	fb01 f303 	mul.w	r3, r1, r3
 8003c08:	4413      	add	r3, r2
 8003c0a:	3348      	adds	r3, #72	; 0x48
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	202c      	movs	r0, #44	; 0x2c
 8003c14:	fb00 f202 	mul.w	r2, r0, r2
 8003c18:	440a      	add	r2, r1
 8003c1a:	3240      	adds	r2, #64	; 0x40
 8003c1c:	8812      	ldrh	r2, [r2, #0]
 8003c1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 818e 	beq.w	8003f48 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	212c      	movs	r1, #44	; 0x2c
 8003c32:	fb01 f303 	mul.w	r3, r1, r3
 8003c36:	4413      	add	r3, r2
 8003c38:	3354      	adds	r3, #84	; 0x54
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	f083 0301 	eor.w	r3, r3, #1
 8003c40:	b2d8      	uxtb	r0, r3
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	212c      	movs	r1, #44	; 0x2c
 8003c48:	fb01 f303 	mul.w	r3, r1, r3
 8003c4c:	4413      	add	r3, r2
 8003c4e:	3354      	adds	r3, #84	; 0x54
 8003c50:	4602      	mov	r2, r0
 8003c52:	701a      	strb	r2, [r3, #0]
}
 8003c54:	e178      	b.n	8003f48 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	212c      	movs	r1, #44	; 0x2c
 8003c5c:	fb01 f303 	mul.w	r3, r1, r3
 8003c60:	4413      	add	r3, r2
 8003c62:	3354      	adds	r3, #84	; 0x54
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	f083 0301 	eor.w	r3, r3, #1
 8003c6a:	b2d8      	uxtb	r0, r3
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	212c      	movs	r1, #44	; 0x2c
 8003c72:	fb01 f303 	mul.w	r3, r1, r3
 8003c76:	4413      	add	r3, r2
 8003c78:	3354      	adds	r3, #84	; 0x54
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	701a      	strb	r2, [r3, #0]
}
 8003c7e:	e163      	b.n	8003f48 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	f040 80f6 	bne.w	8003e84 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	212c      	movs	r1, #44	; 0x2c
 8003c9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ca2:	4413      	add	r3, r2
 8003ca4:	3361      	adds	r3, #97	; 0x61
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d109      	bne.n	8003cc0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	212c      	movs	r1, #44	; 0x2c
 8003cb2:	fb01 f303 	mul.w	r3, r1, r3
 8003cb6:	4413      	add	r3, r2
 8003cb8:	3360      	adds	r3, #96	; 0x60
 8003cba:	2201      	movs	r2, #1
 8003cbc:	701a      	strb	r2, [r3, #0]
 8003cbe:	e0c9      	b.n	8003e54 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	212c      	movs	r1, #44	; 0x2c
 8003cc6:	fb01 f303 	mul.w	r3, r1, r3
 8003cca:	4413      	add	r3, r2
 8003ccc:	3361      	adds	r3, #97	; 0x61
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	2b05      	cmp	r3, #5
 8003cd2:	d109      	bne.n	8003ce8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	212c      	movs	r1, #44	; 0x2c
 8003cda:	fb01 f303 	mul.w	r3, r1, r3
 8003cde:	4413      	add	r3, r2
 8003ce0:	3360      	adds	r3, #96	; 0x60
 8003ce2:	2205      	movs	r2, #5
 8003ce4:	701a      	strb	r2, [r3, #0]
 8003ce6:	e0b5      	b.n	8003e54 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	212c      	movs	r1, #44	; 0x2c
 8003cee:	fb01 f303 	mul.w	r3, r1, r3
 8003cf2:	4413      	add	r3, r2
 8003cf4:	3361      	adds	r3, #97	; 0x61
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	2b06      	cmp	r3, #6
 8003cfa:	d009      	beq.n	8003d10 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	212c      	movs	r1, #44	; 0x2c
 8003d02:	fb01 f303 	mul.w	r3, r1, r3
 8003d06:	4413      	add	r3, r2
 8003d08:	3361      	adds	r3, #97	; 0x61
 8003d0a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d150      	bne.n	8003db2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	212c      	movs	r1, #44	; 0x2c
 8003d16:	fb01 f303 	mul.w	r3, r1, r3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	335c      	adds	r3, #92	; 0x5c
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	1c5a      	adds	r2, r3, #1
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	202c      	movs	r0, #44	; 0x2c
 8003d28:	fb00 f303 	mul.w	r3, r0, r3
 8003d2c:	440b      	add	r3, r1
 8003d2e:	335c      	adds	r3, #92	; 0x5c
 8003d30:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	212c      	movs	r1, #44	; 0x2c
 8003d38:	fb01 f303 	mul.w	r3, r1, r3
 8003d3c:	4413      	add	r3, r2
 8003d3e:	335c      	adds	r3, #92	; 0x5c
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d912      	bls.n	8003d6c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	212c      	movs	r1, #44	; 0x2c
 8003d4c:	fb01 f303 	mul.w	r3, r1, r3
 8003d50:	4413      	add	r3, r2
 8003d52:	335c      	adds	r3, #92	; 0x5c
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	212c      	movs	r1, #44	; 0x2c
 8003d5e:	fb01 f303 	mul.w	r3, r1, r3
 8003d62:	4413      	add	r3, r2
 8003d64:	3360      	adds	r3, #96	; 0x60
 8003d66:	2204      	movs	r2, #4
 8003d68:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d6a:	e073      	b.n	8003e54 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	212c      	movs	r1, #44	; 0x2c
 8003d72:	fb01 f303 	mul.w	r3, r1, r3
 8003d76:	4413      	add	r3, r2
 8003d78:	3360      	adds	r3, #96	; 0x60
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	015a      	lsls	r2, r3, #5
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d94:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d9c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003daa:	461a      	mov	r2, r3
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003db0:	e050      	b.n	8003e54 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	212c      	movs	r1, #44	; 0x2c
 8003db8:	fb01 f303 	mul.w	r3, r1, r3
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3361      	adds	r3, #97	; 0x61
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2b03      	cmp	r3, #3
 8003dc4:	d122      	bne.n	8003e0c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	212c      	movs	r1, #44	; 0x2c
 8003dcc:	fb01 f303 	mul.w	r3, r1, r3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	3360      	adds	r3, #96	; 0x60
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003dee:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003df6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e04:	461a      	mov	r2, r3
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	e023      	b.n	8003e54 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	212c      	movs	r1, #44	; 0x2c
 8003e12:	fb01 f303 	mul.w	r3, r1, r3
 8003e16:	4413      	add	r3, r2
 8003e18:	3361      	adds	r3, #97	; 0x61
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b07      	cmp	r3, #7
 8003e1e:	d119      	bne.n	8003e54 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	212c      	movs	r1, #44	; 0x2c
 8003e26:	fb01 f303 	mul.w	r3, r1, r3
 8003e2a:	4413      	add	r3, r2
 8003e2c:	335c      	adds	r3, #92	; 0x5c
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	202c      	movs	r0, #44	; 0x2c
 8003e38:	fb00 f303 	mul.w	r3, r0, r3
 8003e3c:	440b      	add	r3, r1
 8003e3e:	335c      	adds	r3, #92	; 0x5c
 8003e40:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	212c      	movs	r1, #44	; 0x2c
 8003e48:	fb01 f303 	mul.w	r3, r1, r3
 8003e4c:	4413      	add	r3, r2
 8003e4e:	3360      	adds	r3, #96	; 0x60
 8003e50:	2204      	movs	r2, #4
 8003e52:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e60:	461a      	mov	r2, r3
 8003e62:	2302      	movs	r3, #2
 8003e64:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	b2d9      	uxtb	r1, r3
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	202c      	movs	r0, #44	; 0x2c
 8003e70:	fb00 f303 	mul.w	r3, r0, r3
 8003e74:	4413      	add	r3, r2
 8003e76:	3360      	adds	r3, #96	; 0x60
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f00e fb89 	bl	8012594 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003e82:	e061      	b.n	8003f48 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 0310 	and.w	r3, r3, #16
 8003e96:	2b10      	cmp	r3, #16
 8003e98:	d156      	bne.n	8003f48 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	212c      	movs	r1, #44	; 0x2c
 8003ea0:	fb01 f303 	mul.w	r3, r1, r3
 8003ea4:	4413      	add	r3, r2
 8003ea6:	333f      	adds	r3, #63	; 0x3f
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	2b03      	cmp	r3, #3
 8003eac:	d111      	bne.n	8003ed2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	212c      	movs	r1, #44	; 0x2c
 8003eb4:	fb01 f303 	mul.w	r3, r1, r3
 8003eb8:	4413      	add	r3, r2
 8003eba:	335c      	adds	r3, #92	; 0x5c
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	4611      	mov	r1, r2
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f004 f8db 	bl	8008086 <USB_HC_Halt>
 8003ed0:	e031      	b.n	8003f36 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	212c      	movs	r1, #44	; 0x2c
 8003ed8:	fb01 f303 	mul.w	r3, r1, r3
 8003edc:	4413      	add	r3, r2
 8003ede:	333f      	adds	r3, #63	; 0x3f
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d009      	beq.n	8003efa <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	212c      	movs	r1, #44	; 0x2c
 8003eec:	fb01 f303 	mul.w	r3, r1, r3
 8003ef0:	4413      	add	r3, r2
 8003ef2:	333f      	adds	r3, #63	; 0x3f
 8003ef4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d11d      	bne.n	8003f36 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	212c      	movs	r1, #44	; 0x2c
 8003f00:	fb01 f303 	mul.w	r3, r1, r3
 8003f04:	4413      	add	r3, r2
 8003f06:	335c      	adds	r3, #92	; 0x5c
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d110      	bne.n	8003f36 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	212c      	movs	r1, #44	; 0x2c
 8003f1a:	fb01 f303 	mul.w	r3, r1, r3
 8003f1e:	4413      	add	r3, r2
 8003f20:	3361      	adds	r3, #97	; 0x61
 8003f22:	2203      	movs	r2, #3
 8003f24:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	b2d2      	uxtb	r2, r2
 8003f2e:	4611      	mov	r1, r2
 8003f30:	4618      	mov	r0, r3
 8003f32:	f004 f8a8 	bl	8008086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	015a      	lsls	r2, r3, #5
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f42:	461a      	mov	r2, r3
 8003f44:	2310      	movs	r3, #16
 8003f46:	6093      	str	r3, [r2, #8]
}
 8003f48:	bf00      	nop
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b088      	sub	sp, #32
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	460b      	mov	r3, r1
 8003f5a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003f66:	78fb      	ldrb	r3, [r7, #3]
 8003f68:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	015a      	lsls	r2, r3, #5
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d11a      	bne.n	8003fb6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	2304      	movs	r3, #4
 8003f90:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	212c      	movs	r1, #44	; 0x2c
 8003f98:	fb01 f303 	mul.w	r3, r1, r3
 8003f9c:	4413      	add	r3, r2
 8003f9e:	3361      	adds	r3, #97	; 0x61
 8003fa0:	2206      	movs	r2, #6
 8003fa2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	b2d2      	uxtb	r2, r2
 8003fac:	4611      	mov	r1, r2
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f004 f869 	bl	8008086 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003fb4:	e331      	b.n	800461a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	015a      	lsls	r2, r3, #5
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 0320 	and.w	r3, r3, #32
 8003fc8:	2b20      	cmp	r3, #32
 8003fca:	d12e      	bne.n	800402a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	015a      	lsls	r2, r3, #5
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd8:	461a      	mov	r2, r3
 8003fda:	2320      	movs	r3, #32
 8003fdc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	212c      	movs	r1, #44	; 0x2c
 8003fe4:	fb01 f303 	mul.w	r3, r1, r3
 8003fe8:	4413      	add	r3, r2
 8003fea:	333d      	adds	r3, #61	; 0x3d
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	f040 8313 	bne.w	800461a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	212c      	movs	r1, #44	; 0x2c
 8003ffa:	fb01 f303 	mul.w	r3, r1, r3
 8003ffe:	4413      	add	r3, r2
 8004000:	333d      	adds	r3, #61	; 0x3d
 8004002:	2200      	movs	r2, #0
 8004004:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	212c      	movs	r1, #44	; 0x2c
 800400c:	fb01 f303 	mul.w	r3, r1, r3
 8004010:	4413      	add	r3, r2
 8004012:	3360      	adds	r3, #96	; 0x60
 8004014:	2202      	movs	r2, #2
 8004016:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	4611      	mov	r1, r2
 8004022:	4618      	mov	r0, r3
 8004024:	f004 f82f 	bl	8008086 <USB_HC_Halt>
}
 8004028:	e2f7      	b.n	800461a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	015a      	lsls	r2, r3, #5
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	4413      	add	r3, r2
 8004032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800403c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004040:	d112      	bne.n	8004068 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	015a      	lsls	r2, r3, #5
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	4413      	add	r3, r2
 800404a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800404e:	461a      	mov	r2, r3
 8004050:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004054:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	b2d2      	uxtb	r2, r2
 800405e:	4611      	mov	r1, r2
 8004060:	4618      	mov	r0, r3
 8004062:	f004 f810 	bl	8008086 <USB_HC_Halt>
}
 8004066:	e2d8      	b.n	800461a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	4413      	add	r3, r2
 8004070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b01      	cmp	r3, #1
 800407c:	d140      	bne.n	8004100 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	212c      	movs	r1, #44	; 0x2c
 8004084:	fb01 f303 	mul.w	r3, r1, r3
 8004088:	4413      	add	r3, r2
 800408a:	335c      	adds	r3, #92	; 0x5c
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	4413      	add	r3, r2
 8004098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a2:	2b40      	cmp	r3, #64	; 0x40
 80040a4:	d111      	bne.n	80040ca <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	212c      	movs	r1, #44	; 0x2c
 80040ac:	fb01 f303 	mul.w	r3, r1, r3
 80040b0:	4413      	add	r3, r2
 80040b2:	333d      	adds	r3, #61	; 0x3d
 80040b4:	2201      	movs	r2, #1
 80040b6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c4:	461a      	mov	r2, r3
 80040c6:	2340      	movs	r3, #64	; 0x40
 80040c8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d6:	461a      	mov	r2, r3
 80040d8:	2301      	movs	r3, #1
 80040da:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	212c      	movs	r1, #44	; 0x2c
 80040e2:	fb01 f303 	mul.w	r3, r1, r3
 80040e6:	4413      	add	r3, r2
 80040e8:	3361      	adds	r3, #97	; 0x61
 80040ea:	2201      	movs	r2, #1
 80040ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	4611      	mov	r1, r2
 80040f8:	4618      	mov	r0, r3
 80040fa:	f003 ffc4 	bl	8008086 <USB_HC_Halt>
}
 80040fe:	e28c      	b.n	800461a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	4413      	add	r3, r2
 8004108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004112:	2b40      	cmp	r3, #64	; 0x40
 8004114:	d12c      	bne.n	8004170 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	212c      	movs	r1, #44	; 0x2c
 800411c:	fb01 f303 	mul.w	r3, r1, r3
 8004120:	4413      	add	r3, r2
 8004122:	3361      	adds	r3, #97	; 0x61
 8004124:	2204      	movs	r2, #4
 8004126:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	212c      	movs	r1, #44	; 0x2c
 800412e:	fb01 f303 	mul.w	r3, r1, r3
 8004132:	4413      	add	r3, r2
 8004134:	333d      	adds	r3, #61	; 0x3d
 8004136:	2201      	movs	r2, #1
 8004138:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	212c      	movs	r1, #44	; 0x2c
 8004140:	fb01 f303 	mul.w	r3, r1, r3
 8004144:	4413      	add	r3, r2
 8004146:	335c      	adds	r3, #92	; 0x5c
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	b2d2      	uxtb	r2, r2
 8004154:	4611      	mov	r1, r2
 8004156:	4618      	mov	r0, r3
 8004158:	f003 ff95 	bl	8008086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	4413      	add	r3, r2
 8004164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004168:	461a      	mov	r2, r3
 800416a:	2340      	movs	r3, #64	; 0x40
 800416c:	6093      	str	r3, [r2, #8]
}
 800416e:	e254      	b.n	800461a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	015a      	lsls	r2, r3, #5
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	4413      	add	r3, r2
 8004178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 0308 	and.w	r3, r3, #8
 8004182:	2b08      	cmp	r3, #8
 8004184:	d11a      	bne.n	80041bc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	4413      	add	r3, r2
 800418e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004192:	461a      	mov	r2, r3
 8004194:	2308      	movs	r3, #8
 8004196:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	212c      	movs	r1, #44	; 0x2c
 800419e:	fb01 f303 	mul.w	r3, r1, r3
 80041a2:	4413      	add	r3, r2
 80041a4:	3361      	adds	r3, #97	; 0x61
 80041a6:	2205      	movs	r2, #5
 80041a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	4611      	mov	r1, r2
 80041b4:	4618      	mov	r0, r3
 80041b6:	f003 ff66 	bl	8008086 <USB_HC_Halt>
}
 80041ba:	e22e      	b.n	800461a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 0310 	and.w	r3, r3, #16
 80041ce:	2b10      	cmp	r3, #16
 80041d0:	d140      	bne.n	8004254 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	212c      	movs	r1, #44	; 0x2c
 80041d8:	fb01 f303 	mul.w	r3, r1, r3
 80041dc:	4413      	add	r3, r2
 80041de:	335c      	adds	r3, #92	; 0x5c
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	212c      	movs	r1, #44	; 0x2c
 80041ea:	fb01 f303 	mul.w	r3, r1, r3
 80041ee:	4413      	add	r3, r2
 80041f0:	3361      	adds	r3, #97	; 0x61
 80041f2:	2203      	movs	r2, #3
 80041f4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	212c      	movs	r1, #44	; 0x2c
 80041fc:	fb01 f303 	mul.w	r3, r1, r3
 8004200:	4413      	add	r3, r2
 8004202:	333d      	adds	r3, #61	; 0x3d
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d112      	bne.n	8004230 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	212c      	movs	r1, #44	; 0x2c
 8004210:	fb01 f303 	mul.w	r3, r1, r3
 8004214:	4413      	add	r3, r2
 8004216:	333c      	adds	r3, #60	; 0x3c
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d108      	bne.n	8004230 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	212c      	movs	r1, #44	; 0x2c
 8004224:	fb01 f303 	mul.w	r3, r1, r3
 8004228:	4413      	add	r3, r2
 800422a:	333d      	adds	r3, #61	; 0x3d
 800422c:	2201      	movs	r2, #1
 800422e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	b2d2      	uxtb	r2, r2
 8004238:	4611      	mov	r1, r2
 800423a:	4618      	mov	r0, r3
 800423c:	f003 ff23 	bl	8008086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	015a      	lsls	r2, r3, #5
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	4413      	add	r3, r2
 8004248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800424c:	461a      	mov	r2, r3
 800424e:	2310      	movs	r3, #16
 8004250:	6093      	str	r3, [r2, #8]
}
 8004252:	e1e2      	b.n	800461a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	4413      	add	r3, r2
 800425c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004266:	2b80      	cmp	r3, #128	; 0x80
 8004268:	d164      	bne.n	8004334 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d111      	bne.n	8004296 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	212c      	movs	r1, #44	; 0x2c
 8004278:	fb01 f303 	mul.w	r3, r1, r3
 800427c:	4413      	add	r3, r2
 800427e:	3361      	adds	r3, #97	; 0x61
 8004280:	2206      	movs	r2, #6
 8004282:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	4611      	mov	r1, r2
 800428e:	4618      	mov	r0, r3
 8004290:	f003 fef9 	bl	8008086 <USB_HC_Halt>
 8004294:	e044      	b.n	8004320 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	212c      	movs	r1, #44	; 0x2c
 800429c:	fb01 f303 	mul.w	r3, r1, r3
 80042a0:	4413      	add	r3, r2
 80042a2:	335c      	adds	r3, #92	; 0x5c
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	1c5a      	adds	r2, r3, #1
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	202c      	movs	r0, #44	; 0x2c
 80042ae:	fb00 f303 	mul.w	r3, r0, r3
 80042b2:	440b      	add	r3, r1
 80042b4:	335c      	adds	r3, #92	; 0x5c
 80042b6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	212c      	movs	r1, #44	; 0x2c
 80042be:	fb01 f303 	mul.w	r3, r1, r3
 80042c2:	4413      	add	r3, r2
 80042c4:	335c      	adds	r3, #92	; 0x5c
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d920      	bls.n	800430e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	212c      	movs	r1, #44	; 0x2c
 80042d2:	fb01 f303 	mul.w	r3, r1, r3
 80042d6:	4413      	add	r3, r2
 80042d8:	335c      	adds	r3, #92	; 0x5c
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	212c      	movs	r1, #44	; 0x2c
 80042e4:	fb01 f303 	mul.w	r3, r1, r3
 80042e8:	4413      	add	r3, r2
 80042ea:	3360      	adds	r3, #96	; 0x60
 80042ec:	2204      	movs	r2, #4
 80042ee:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	b2d9      	uxtb	r1, r3
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	202c      	movs	r0, #44	; 0x2c
 80042fa:	fb00 f303 	mul.w	r3, r0, r3
 80042fe:	4413      	add	r3, r2
 8004300:	3360      	adds	r3, #96	; 0x60
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	461a      	mov	r2, r3
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f00e f944 	bl	8012594 <HAL_HCD_HC_NotifyURBChange_Callback>
 800430c:	e008      	b.n	8004320 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	212c      	movs	r1, #44	; 0x2c
 8004314:	fb01 f303 	mul.w	r3, r1, r3
 8004318:	4413      	add	r3, r2
 800431a:	3360      	adds	r3, #96	; 0x60
 800431c:	2202      	movs	r2, #2
 800431e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	4413      	add	r3, r2
 8004328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800432c:	461a      	mov	r2, r3
 800432e:	2380      	movs	r3, #128	; 0x80
 8004330:	6093      	str	r3, [r2, #8]
}
 8004332:	e172      	b.n	800461a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	4413      	add	r3, r2
 800433c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800434a:	d11b      	bne.n	8004384 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	212c      	movs	r1, #44	; 0x2c
 8004352:	fb01 f303 	mul.w	r3, r1, r3
 8004356:	4413      	add	r3, r2
 8004358:	3361      	adds	r3, #97	; 0x61
 800435a:	2208      	movs	r2, #8
 800435c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	b2d2      	uxtb	r2, r2
 8004366:	4611      	mov	r1, r2
 8004368:	4618      	mov	r0, r3
 800436a:	f003 fe8c 	bl	8008086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	015a      	lsls	r2, r3, #5
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	4413      	add	r3, r2
 8004376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800437a:	461a      	mov	r2, r3
 800437c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004380:	6093      	str	r3, [r2, #8]
}
 8004382:	e14a      	b.n	800461a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	4413      	add	r3, r2
 800438c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b02      	cmp	r3, #2
 8004398:	f040 813f 	bne.w	800461a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	212c      	movs	r1, #44	; 0x2c
 80043a2:	fb01 f303 	mul.w	r3, r1, r3
 80043a6:	4413      	add	r3, r2
 80043a8:	3361      	adds	r3, #97	; 0x61
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d17d      	bne.n	80044ac <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	212c      	movs	r1, #44	; 0x2c
 80043b6:	fb01 f303 	mul.w	r3, r1, r3
 80043ba:	4413      	add	r3, r2
 80043bc:	3360      	adds	r3, #96	; 0x60
 80043be:	2201      	movs	r2, #1
 80043c0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	212c      	movs	r1, #44	; 0x2c
 80043c8:	fb01 f303 	mul.w	r3, r1, r3
 80043cc:	4413      	add	r3, r2
 80043ce:	333f      	adds	r3, #63	; 0x3f
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d00a      	beq.n	80043ec <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	212c      	movs	r1, #44	; 0x2c
 80043dc:	fb01 f303 	mul.w	r3, r1, r3
 80043e0:	4413      	add	r3, r2
 80043e2:	333f      	adds	r3, #63	; 0x3f
 80043e4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80043e6:	2b03      	cmp	r3, #3
 80043e8:	f040 8100 	bne.w	80045ec <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d113      	bne.n	800441c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	212c      	movs	r1, #44	; 0x2c
 80043fa:	fb01 f303 	mul.w	r3, r1, r3
 80043fe:	4413      	add	r3, r2
 8004400:	3355      	adds	r3, #85	; 0x55
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	f083 0301 	eor.w	r3, r3, #1
 8004408:	b2d8      	uxtb	r0, r3
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	212c      	movs	r1, #44	; 0x2c
 8004410:	fb01 f303 	mul.w	r3, r1, r3
 8004414:	4413      	add	r3, r2
 8004416:	3355      	adds	r3, #85	; 0x55
 8004418:	4602      	mov	r2, r0
 800441a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	2b01      	cmp	r3, #1
 8004422:	f040 80e3 	bne.w	80045ec <HCD_HC_OUT_IRQHandler+0x69c>
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	212c      	movs	r1, #44	; 0x2c
 800442c:	fb01 f303 	mul.w	r3, r1, r3
 8004430:	4413      	add	r3, r2
 8004432:	334c      	adds	r3, #76	; 0x4c
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 80d8 	beq.w	80045ec <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	212c      	movs	r1, #44	; 0x2c
 8004442:	fb01 f303 	mul.w	r3, r1, r3
 8004446:	4413      	add	r3, r2
 8004448:	334c      	adds	r3, #76	; 0x4c
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6879      	ldr	r1, [r7, #4]
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	202c      	movs	r0, #44	; 0x2c
 8004452:	fb00 f202 	mul.w	r2, r0, r2
 8004456:	440a      	add	r2, r1
 8004458:	3240      	adds	r2, #64	; 0x40
 800445a:	8812      	ldrh	r2, [r2, #0]
 800445c:	4413      	add	r3, r2
 800445e:	3b01      	subs	r3, #1
 8004460:	6879      	ldr	r1, [r7, #4]
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	202c      	movs	r0, #44	; 0x2c
 8004466:	fb00 f202 	mul.w	r2, r0, r2
 800446a:	440a      	add	r2, r1
 800446c:	3240      	adds	r2, #64	; 0x40
 800446e:	8812      	ldrh	r2, [r2, #0]
 8004470:	fbb3 f3f2 	udiv	r3, r3, r2
 8004474:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 80b5 	beq.w	80045ec <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	212c      	movs	r1, #44	; 0x2c
 8004488:	fb01 f303 	mul.w	r3, r1, r3
 800448c:	4413      	add	r3, r2
 800448e:	3355      	adds	r3, #85	; 0x55
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	f083 0301 	eor.w	r3, r3, #1
 8004496:	b2d8      	uxtb	r0, r3
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	212c      	movs	r1, #44	; 0x2c
 800449e:	fb01 f303 	mul.w	r3, r1, r3
 80044a2:	4413      	add	r3, r2
 80044a4:	3355      	adds	r3, #85	; 0x55
 80044a6:	4602      	mov	r2, r0
 80044a8:	701a      	strb	r2, [r3, #0]
 80044aa:	e09f      	b.n	80045ec <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	212c      	movs	r1, #44	; 0x2c
 80044b2:	fb01 f303 	mul.w	r3, r1, r3
 80044b6:	4413      	add	r3, r2
 80044b8:	3361      	adds	r3, #97	; 0x61
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2b03      	cmp	r3, #3
 80044be:	d109      	bne.n	80044d4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	212c      	movs	r1, #44	; 0x2c
 80044c6:	fb01 f303 	mul.w	r3, r1, r3
 80044ca:	4413      	add	r3, r2
 80044cc:	3360      	adds	r3, #96	; 0x60
 80044ce:	2202      	movs	r2, #2
 80044d0:	701a      	strb	r2, [r3, #0]
 80044d2:	e08b      	b.n	80045ec <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	212c      	movs	r1, #44	; 0x2c
 80044da:	fb01 f303 	mul.w	r3, r1, r3
 80044de:	4413      	add	r3, r2
 80044e0:	3361      	adds	r3, #97	; 0x61
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b04      	cmp	r3, #4
 80044e6:	d109      	bne.n	80044fc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	212c      	movs	r1, #44	; 0x2c
 80044ee:	fb01 f303 	mul.w	r3, r1, r3
 80044f2:	4413      	add	r3, r2
 80044f4:	3360      	adds	r3, #96	; 0x60
 80044f6:	2202      	movs	r2, #2
 80044f8:	701a      	strb	r2, [r3, #0]
 80044fa:	e077      	b.n	80045ec <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	212c      	movs	r1, #44	; 0x2c
 8004502:	fb01 f303 	mul.w	r3, r1, r3
 8004506:	4413      	add	r3, r2
 8004508:	3361      	adds	r3, #97	; 0x61
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	2b05      	cmp	r3, #5
 800450e:	d109      	bne.n	8004524 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	212c      	movs	r1, #44	; 0x2c
 8004516:	fb01 f303 	mul.w	r3, r1, r3
 800451a:	4413      	add	r3, r2
 800451c:	3360      	adds	r3, #96	; 0x60
 800451e:	2205      	movs	r2, #5
 8004520:	701a      	strb	r2, [r3, #0]
 8004522:	e063      	b.n	80045ec <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	212c      	movs	r1, #44	; 0x2c
 800452a:	fb01 f303 	mul.w	r3, r1, r3
 800452e:	4413      	add	r3, r2
 8004530:	3361      	adds	r3, #97	; 0x61
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b06      	cmp	r3, #6
 8004536:	d009      	beq.n	800454c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	212c      	movs	r1, #44	; 0x2c
 800453e:	fb01 f303 	mul.w	r3, r1, r3
 8004542:	4413      	add	r3, r2
 8004544:	3361      	adds	r3, #97	; 0x61
 8004546:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004548:	2b08      	cmp	r3, #8
 800454a:	d14f      	bne.n	80045ec <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	212c      	movs	r1, #44	; 0x2c
 8004552:	fb01 f303 	mul.w	r3, r1, r3
 8004556:	4413      	add	r3, r2
 8004558:	335c      	adds	r3, #92	; 0x5c
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	1c5a      	adds	r2, r3, #1
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	202c      	movs	r0, #44	; 0x2c
 8004564:	fb00 f303 	mul.w	r3, r0, r3
 8004568:	440b      	add	r3, r1
 800456a:	335c      	adds	r3, #92	; 0x5c
 800456c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	212c      	movs	r1, #44	; 0x2c
 8004574:	fb01 f303 	mul.w	r3, r1, r3
 8004578:	4413      	add	r3, r2
 800457a:	335c      	adds	r3, #92	; 0x5c
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b02      	cmp	r3, #2
 8004580:	d912      	bls.n	80045a8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	212c      	movs	r1, #44	; 0x2c
 8004588:	fb01 f303 	mul.w	r3, r1, r3
 800458c:	4413      	add	r3, r2
 800458e:	335c      	adds	r3, #92	; 0x5c
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	212c      	movs	r1, #44	; 0x2c
 800459a:	fb01 f303 	mul.w	r3, r1, r3
 800459e:	4413      	add	r3, r2
 80045a0:	3360      	adds	r3, #96	; 0x60
 80045a2:	2204      	movs	r2, #4
 80045a4:	701a      	strb	r2, [r3, #0]
 80045a6:	e021      	b.n	80045ec <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	212c      	movs	r1, #44	; 0x2c
 80045ae:	fb01 f303 	mul.w	r3, r1, r3
 80045b2:	4413      	add	r3, r2
 80045b4:	3360      	adds	r3, #96	; 0x60
 80045b6:	2202      	movs	r2, #2
 80045b8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	015a      	lsls	r2, r3, #5
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	4413      	add	r3, r2
 80045c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045d0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045d8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e6:	461a      	mov	r2, r3
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f8:	461a      	mov	r2, r3
 80045fa:	2302      	movs	r3, #2
 80045fc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	b2d9      	uxtb	r1, r3
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	202c      	movs	r0, #44	; 0x2c
 8004608:	fb00 f303 	mul.w	r3, r0, r3
 800460c:	4413      	add	r3, r2
 800460e:	3360      	adds	r3, #96	; 0x60
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	461a      	mov	r2, r3
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f00d ffbd 	bl	8012594 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800461a:	bf00      	nop
 800461c:	3720      	adds	r7, #32
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b08a      	sub	sp, #40	; 0x28
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	0c5b      	lsrs	r3, r3, #17
 8004648:	f003 030f 	and.w	r3, r3, #15
 800464c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	091b      	lsrs	r3, r3, #4
 8004652:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004656:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	2b02      	cmp	r3, #2
 800465c:	d004      	beq.n	8004668 <HCD_RXQLVL_IRQHandler+0x46>
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2b05      	cmp	r3, #5
 8004662:	f000 80a9 	beq.w	80047b8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004666:	e0aa      	b.n	80047be <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 80a6 	beq.w	80047bc <HCD_RXQLVL_IRQHandler+0x19a>
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	212c      	movs	r1, #44	; 0x2c
 8004676:	fb01 f303 	mul.w	r3, r1, r3
 800467a:	4413      	add	r3, r2
 800467c:	3344      	adds	r3, #68	; 0x44
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 809b 	beq.w	80047bc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	212c      	movs	r1, #44	; 0x2c
 800468c:	fb01 f303 	mul.w	r3, r1, r3
 8004690:	4413      	add	r3, r2
 8004692:	3350      	adds	r3, #80	; 0x50
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	441a      	add	r2, r3
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	202c      	movs	r0, #44	; 0x2c
 80046a0:	fb00 f303 	mul.w	r3, r0, r3
 80046a4:	440b      	add	r3, r1
 80046a6:	334c      	adds	r3, #76	; 0x4c
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d87a      	bhi.n	80047a4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6818      	ldr	r0, [r3, #0]
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	212c      	movs	r1, #44	; 0x2c
 80046b8:	fb01 f303 	mul.w	r3, r1, r3
 80046bc:	4413      	add	r3, r2
 80046be:	3344      	adds	r3, #68	; 0x44
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	b292      	uxth	r2, r2
 80046c6:	4619      	mov	r1, r3
 80046c8:	f003 f834 	bl	8007734 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	212c      	movs	r1, #44	; 0x2c
 80046d2:	fb01 f303 	mul.w	r3, r1, r3
 80046d6:	4413      	add	r3, r2
 80046d8:	3344      	adds	r3, #68	; 0x44
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	441a      	add	r2, r3
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	202c      	movs	r0, #44	; 0x2c
 80046e6:	fb00 f303 	mul.w	r3, r0, r3
 80046ea:	440b      	add	r3, r1
 80046ec:	3344      	adds	r3, #68	; 0x44
 80046ee:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	212c      	movs	r1, #44	; 0x2c
 80046f6:	fb01 f303 	mul.w	r3, r1, r3
 80046fa:	4413      	add	r3, r2
 80046fc:	3350      	adds	r3, #80	; 0x50
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	441a      	add	r2, r3
 8004704:	6879      	ldr	r1, [r7, #4]
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	202c      	movs	r0, #44	; 0x2c
 800470a:	fb00 f303 	mul.w	r3, r0, r3
 800470e:	440b      	add	r3, r1
 8004710:	3350      	adds	r3, #80	; 0x50
 8004712:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	4413      	add	r3, r2
 800471c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	0cdb      	lsrs	r3, r3, #19
 8004724:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004728:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	212c      	movs	r1, #44	; 0x2c
 8004730:	fb01 f303 	mul.w	r3, r1, r3
 8004734:	4413      	add	r3, r2
 8004736:	3340      	adds	r3, #64	; 0x40
 8004738:	881b      	ldrh	r3, [r3, #0]
 800473a:	461a      	mov	r2, r3
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	4293      	cmp	r3, r2
 8004740:	d13c      	bne.n	80047bc <HCD_RXQLVL_IRQHandler+0x19a>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d039      	beq.n	80047bc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	4413      	add	r3, r2
 8004750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800475e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004766:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	6a3b      	ldr	r3, [r7, #32]
 800476e:	4413      	add	r3, r2
 8004770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004774:	461a      	mov	r2, r3
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	212c      	movs	r1, #44	; 0x2c
 8004780:	fb01 f303 	mul.w	r3, r1, r3
 8004784:	4413      	add	r3, r2
 8004786:	3354      	adds	r3, #84	; 0x54
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	f083 0301 	eor.w	r3, r3, #1
 800478e:	b2d8      	uxtb	r0, r3
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	212c      	movs	r1, #44	; 0x2c
 8004796:	fb01 f303 	mul.w	r3, r1, r3
 800479a:	4413      	add	r3, r2
 800479c:	3354      	adds	r3, #84	; 0x54
 800479e:	4602      	mov	r2, r0
 80047a0:	701a      	strb	r2, [r3, #0]
      break;
 80047a2:	e00b      	b.n	80047bc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	212c      	movs	r1, #44	; 0x2c
 80047aa:	fb01 f303 	mul.w	r3, r1, r3
 80047ae:	4413      	add	r3, r2
 80047b0:	3360      	adds	r3, #96	; 0x60
 80047b2:	2204      	movs	r2, #4
 80047b4:	701a      	strb	r2, [r3, #0]
      break;
 80047b6:	e001      	b.n	80047bc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80047b8:	bf00      	nop
 80047ba:	e000      	b.n	80047be <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80047bc:	bf00      	nop
  }
}
 80047be:	bf00      	nop
 80047c0:	3728      	adds	r7, #40	; 0x28
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b086      	sub	sp, #24
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80047f2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d10b      	bne.n	8004816 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b01      	cmp	r3, #1
 8004806:	d102      	bne.n	800480e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f00d fea7 	bl	801255c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	f043 0302 	orr.w	r3, r3, #2
 8004814:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f003 0308 	and.w	r3, r3, #8
 800481c:	2b08      	cmp	r3, #8
 800481e:	d132      	bne.n	8004886 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	f043 0308 	orr.w	r3, r3, #8
 8004826:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f003 0304 	and.w	r3, r3, #4
 800482e:	2b04      	cmp	r3, #4
 8004830:	d126      	bne.n	8004880 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	2b02      	cmp	r3, #2
 8004838:	d113      	bne.n	8004862 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004840:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004844:	d106      	bne.n	8004854 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2102      	movs	r1, #2
 800484c:	4618      	mov	r0, r3
 800484e:	f003 f8df 	bl	8007a10 <USB_InitFSLSPClkSel>
 8004852:	e011      	b.n	8004878 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2101      	movs	r1, #1
 800485a:	4618      	mov	r0, r3
 800485c:	f003 f8d8 	bl	8007a10 <USB_InitFSLSPClkSel>
 8004860:	e00a      	b.n	8004878 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d106      	bne.n	8004878 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004870:	461a      	mov	r2, r3
 8004872:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004876:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f00d fe9d 	bl	80125b8 <HAL_HCD_PortEnabled_Callback>
 800487e:	e002      	b.n	8004886 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f00d fea7 	bl	80125d4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f003 0320 	and.w	r3, r3, #32
 800488c:	2b20      	cmp	r3, #32
 800488e:	d103      	bne.n	8004898 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f043 0320 	orr.w	r3, r3, #32
 8004896:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800489e:	461a      	mov	r2, r3
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	6013      	str	r3, [r2, #0]
}
 80048a4:	bf00      	nop
 80048a6:	3718      	adds	r7, #24
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e267      	b.n	8004d8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d075      	beq.n	80049b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048ca:	4b88      	ldr	r3, [pc, #544]	; (8004aec <HAL_RCC_OscConfig+0x240>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 030c 	and.w	r3, r3, #12
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	d00c      	beq.n	80048f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048d6:	4b85      	ldr	r3, [pc, #532]	; (8004aec <HAL_RCC_OscConfig+0x240>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048de:	2b08      	cmp	r3, #8
 80048e0:	d112      	bne.n	8004908 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048e2:	4b82      	ldr	r3, [pc, #520]	; (8004aec <HAL_RCC_OscConfig+0x240>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048ee:	d10b      	bne.n	8004908 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f0:	4b7e      	ldr	r3, [pc, #504]	; (8004aec <HAL_RCC_OscConfig+0x240>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d05b      	beq.n	80049b4 <HAL_RCC_OscConfig+0x108>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d157      	bne.n	80049b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e242      	b.n	8004d8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004910:	d106      	bne.n	8004920 <HAL_RCC_OscConfig+0x74>
 8004912:	4b76      	ldr	r3, [pc, #472]	; (8004aec <HAL_RCC_OscConfig+0x240>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a75      	ldr	r2, [pc, #468]	; (8004aec <HAL_RCC_OscConfig+0x240>)
 8004918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800491c:	6013      	str	r3, [r2, #0]
 800491e:	e01d      	b.n	800495c <HAL_RCC_OscConfig+0xb0>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004928:	d10c      	bne.n	8004944 <HAL_RCC_OscConfig+0x98>
 800492a:	4b70      	ldr	r3, [pc, #448]	; (8004aec <HAL_RCC_OscConfig+0x240>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a6f      	ldr	r2, [pc, #444]	; (8004aec <HAL_RCC_OscConfig+0x240>)
 8004930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004934:	6013      	str	r3, [r2, #0]
 8004936:	4b6d      	ldr	r3, [pc, #436]	; (8004aec <HAL_RCC_OscConfig+0x240>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a6c      	ldr	r2, [pc, #432]	; (8004aec <HAL_RCC_OscConfig+0x240>)
 800493c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004940:	6013      	str	r3, [r2, #0]
 8004942:	e00b      	b.n	800495c <HAL_RCC_OscConfig+0xb0>
 8004944:	4b69      	ldr	r3, [pc, #420]	; (8004aec <HAL_RCC_OscConfig+0x240>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a68      	ldr	r2, [pc, #416]	; (8004aec <HAL_RCC_OscConfig+0x240>)
 800494a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800494e:	6013      	str	r3, [r2, #0]
 8004950:	4b66      	ldr	r3, [pc, #408]	; (8004aec <HAL_RCC_OscConfig+0x240>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a65      	ldr	r2, [pc, #404]	; (8004aec <HAL_RCC_OscConfig+0x240>)
 8004956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800495a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d013      	beq.n	800498c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004964:	f7fd fd66 	bl	8002434 <HAL_GetTick>
 8004968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496a:	e008      	b.n	800497e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800496c:	f7fd fd62 	bl	8002434 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b64      	cmp	r3, #100	; 0x64
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e207      	b.n	8004d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497e:	4b5b      	ldr	r3, [pc, #364]	; (8004aec <HAL_RCC_OscConfig+0x240>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0f0      	beq.n	800496c <HAL_RCC_OscConfig+0xc0>
 800498a:	e014      	b.n	80049b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498c:	f7fd fd52 	bl	8002434 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004994:	f7fd fd4e 	bl	8002434 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b64      	cmp	r3, #100	; 0x64
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e1f3      	b.n	8004d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049a6:	4b51      	ldr	r3, [pc, #324]	; (8004aec <HAL_RCC_OscConfig+0x240>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1f0      	bne.n	8004994 <HAL_RCC_OscConfig+0xe8>
 80049b2:	e000      	b.n	80049b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d063      	beq.n	8004a8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049c2:	4b4a      	ldr	r3, [pc, #296]	; (8004aec <HAL_RCC_OscConfig+0x240>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 030c 	and.w	r3, r3, #12
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00b      	beq.n	80049e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ce:	4b47      	ldr	r3, [pc, #284]	; (8004aec <HAL_RCC_OscConfig+0x240>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049d6:	2b08      	cmp	r3, #8
 80049d8:	d11c      	bne.n	8004a14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049da:	4b44      	ldr	r3, [pc, #272]	; (8004aec <HAL_RCC_OscConfig+0x240>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d116      	bne.n	8004a14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049e6:	4b41      	ldr	r3, [pc, #260]	; (8004aec <HAL_RCC_OscConfig+0x240>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d005      	beq.n	80049fe <HAL_RCC_OscConfig+0x152>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d001      	beq.n	80049fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e1c7      	b.n	8004d8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049fe:	4b3b      	ldr	r3, [pc, #236]	; (8004aec <HAL_RCC_OscConfig+0x240>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	4937      	ldr	r1, [pc, #220]	; (8004aec <HAL_RCC_OscConfig+0x240>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a12:	e03a      	b.n	8004a8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d020      	beq.n	8004a5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a1c:	4b34      	ldr	r3, [pc, #208]	; (8004af0 <HAL_RCC_OscConfig+0x244>)
 8004a1e:	2201      	movs	r2, #1
 8004a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a22:	f7fd fd07 	bl	8002434 <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a28:	e008      	b.n	8004a3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a2a:	f7fd fd03 	bl	8002434 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e1a8      	b.n	8004d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a3c:	4b2b      	ldr	r3, [pc, #172]	; (8004aec <HAL_RCC_OscConfig+0x240>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0f0      	beq.n	8004a2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a48:	4b28      	ldr	r3, [pc, #160]	; (8004aec <HAL_RCC_OscConfig+0x240>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	4925      	ldr	r1, [pc, #148]	; (8004aec <HAL_RCC_OscConfig+0x240>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	600b      	str	r3, [r1, #0]
 8004a5c:	e015      	b.n	8004a8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a5e:	4b24      	ldr	r3, [pc, #144]	; (8004af0 <HAL_RCC_OscConfig+0x244>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a64:	f7fd fce6 	bl	8002434 <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a6c:	f7fd fce2 	bl	8002434 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e187      	b.n	8004d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a7e:	4b1b      	ldr	r3, [pc, #108]	; (8004aec <HAL_RCC_OscConfig+0x240>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1f0      	bne.n	8004a6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0308 	and.w	r3, r3, #8
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d036      	beq.n	8004b04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d016      	beq.n	8004acc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a9e:	4b15      	ldr	r3, [pc, #84]	; (8004af4 <HAL_RCC_OscConfig+0x248>)
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa4:	f7fd fcc6 	bl	8002434 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aac:	f7fd fcc2 	bl	8002434 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e167      	b.n	8004d8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004abe:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <HAL_RCC_OscConfig+0x240>)
 8004ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0f0      	beq.n	8004aac <HAL_RCC_OscConfig+0x200>
 8004aca:	e01b      	b.n	8004b04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004acc:	4b09      	ldr	r3, [pc, #36]	; (8004af4 <HAL_RCC_OscConfig+0x248>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ad2:	f7fd fcaf 	bl	8002434 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ad8:	e00e      	b.n	8004af8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ada:	f7fd fcab 	bl	8002434 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d907      	bls.n	8004af8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e150      	b.n	8004d8e <HAL_RCC_OscConfig+0x4e2>
 8004aec:	40023800 	.word	0x40023800
 8004af0:	42470000 	.word	0x42470000
 8004af4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004af8:	4b88      	ldr	r3, [pc, #544]	; (8004d1c <HAL_RCC_OscConfig+0x470>)
 8004afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1ea      	bne.n	8004ada <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 8097 	beq.w	8004c40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b12:	2300      	movs	r3, #0
 8004b14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b16:	4b81      	ldr	r3, [pc, #516]	; (8004d1c <HAL_RCC_OscConfig+0x470>)
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10f      	bne.n	8004b42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b22:	2300      	movs	r3, #0
 8004b24:	60bb      	str	r3, [r7, #8]
 8004b26:	4b7d      	ldr	r3, [pc, #500]	; (8004d1c <HAL_RCC_OscConfig+0x470>)
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	4a7c      	ldr	r2, [pc, #496]	; (8004d1c <HAL_RCC_OscConfig+0x470>)
 8004b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b30:	6413      	str	r3, [r2, #64]	; 0x40
 8004b32:	4b7a      	ldr	r3, [pc, #488]	; (8004d1c <HAL_RCC_OscConfig+0x470>)
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b3a:	60bb      	str	r3, [r7, #8]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b42:	4b77      	ldr	r3, [pc, #476]	; (8004d20 <HAL_RCC_OscConfig+0x474>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d118      	bne.n	8004b80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b4e:	4b74      	ldr	r3, [pc, #464]	; (8004d20 <HAL_RCC_OscConfig+0x474>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a73      	ldr	r2, [pc, #460]	; (8004d20 <HAL_RCC_OscConfig+0x474>)
 8004b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b5a:	f7fd fc6b 	bl	8002434 <HAL_GetTick>
 8004b5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b60:	e008      	b.n	8004b74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b62:	f7fd fc67 	bl	8002434 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e10c      	b.n	8004d8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b74:	4b6a      	ldr	r3, [pc, #424]	; (8004d20 <HAL_RCC_OscConfig+0x474>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0f0      	beq.n	8004b62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d106      	bne.n	8004b96 <HAL_RCC_OscConfig+0x2ea>
 8004b88:	4b64      	ldr	r3, [pc, #400]	; (8004d1c <HAL_RCC_OscConfig+0x470>)
 8004b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8c:	4a63      	ldr	r2, [pc, #396]	; (8004d1c <HAL_RCC_OscConfig+0x470>)
 8004b8e:	f043 0301 	orr.w	r3, r3, #1
 8004b92:	6713      	str	r3, [r2, #112]	; 0x70
 8004b94:	e01c      	b.n	8004bd0 <HAL_RCC_OscConfig+0x324>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	2b05      	cmp	r3, #5
 8004b9c:	d10c      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x30c>
 8004b9e:	4b5f      	ldr	r3, [pc, #380]	; (8004d1c <HAL_RCC_OscConfig+0x470>)
 8004ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba2:	4a5e      	ldr	r2, [pc, #376]	; (8004d1c <HAL_RCC_OscConfig+0x470>)
 8004ba4:	f043 0304 	orr.w	r3, r3, #4
 8004ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8004baa:	4b5c      	ldr	r3, [pc, #368]	; (8004d1c <HAL_RCC_OscConfig+0x470>)
 8004bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bae:	4a5b      	ldr	r2, [pc, #364]	; (8004d1c <HAL_RCC_OscConfig+0x470>)
 8004bb0:	f043 0301 	orr.w	r3, r3, #1
 8004bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb6:	e00b      	b.n	8004bd0 <HAL_RCC_OscConfig+0x324>
 8004bb8:	4b58      	ldr	r3, [pc, #352]	; (8004d1c <HAL_RCC_OscConfig+0x470>)
 8004bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbc:	4a57      	ldr	r2, [pc, #348]	; (8004d1c <HAL_RCC_OscConfig+0x470>)
 8004bbe:	f023 0301 	bic.w	r3, r3, #1
 8004bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8004bc4:	4b55      	ldr	r3, [pc, #340]	; (8004d1c <HAL_RCC_OscConfig+0x470>)
 8004bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc8:	4a54      	ldr	r2, [pc, #336]	; (8004d1c <HAL_RCC_OscConfig+0x470>)
 8004bca:	f023 0304 	bic.w	r3, r3, #4
 8004bce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d015      	beq.n	8004c04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd8:	f7fd fc2c 	bl	8002434 <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bde:	e00a      	b.n	8004bf6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004be0:	f7fd fc28 	bl	8002434 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e0cb      	b.n	8004d8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf6:	4b49      	ldr	r3, [pc, #292]	; (8004d1c <HAL_RCC_OscConfig+0x470>)
 8004bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0ee      	beq.n	8004be0 <HAL_RCC_OscConfig+0x334>
 8004c02:	e014      	b.n	8004c2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c04:	f7fd fc16 	bl	8002434 <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c0a:	e00a      	b.n	8004c22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c0c:	f7fd fc12 	bl	8002434 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e0b5      	b.n	8004d8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c22:	4b3e      	ldr	r3, [pc, #248]	; (8004d1c <HAL_RCC_OscConfig+0x470>)
 8004c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1ee      	bne.n	8004c0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c2e:	7dfb      	ldrb	r3, [r7, #23]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d105      	bne.n	8004c40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c34:	4b39      	ldr	r3, [pc, #228]	; (8004d1c <HAL_RCC_OscConfig+0x470>)
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	4a38      	ldr	r2, [pc, #224]	; (8004d1c <HAL_RCC_OscConfig+0x470>)
 8004c3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 80a1 	beq.w	8004d8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c4a:	4b34      	ldr	r3, [pc, #208]	; (8004d1c <HAL_RCC_OscConfig+0x470>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 030c 	and.w	r3, r3, #12
 8004c52:	2b08      	cmp	r3, #8
 8004c54:	d05c      	beq.n	8004d10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d141      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c5e:	4b31      	ldr	r3, [pc, #196]	; (8004d24 <HAL_RCC_OscConfig+0x478>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c64:	f7fd fbe6 	bl	8002434 <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c6c:	f7fd fbe2 	bl	8002434 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e087      	b.n	8004d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c7e:	4b27      	ldr	r3, [pc, #156]	; (8004d1c <HAL_RCC_OscConfig+0x470>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1f0      	bne.n	8004c6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	69da      	ldr	r2, [r3, #28]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	431a      	orrs	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	019b      	lsls	r3, r3, #6
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca0:	085b      	lsrs	r3, r3, #1
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	041b      	lsls	r3, r3, #16
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cac:	061b      	lsls	r3, r3, #24
 8004cae:	491b      	ldr	r1, [pc, #108]	; (8004d1c <HAL_RCC_OscConfig+0x470>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cb4:	4b1b      	ldr	r3, [pc, #108]	; (8004d24 <HAL_RCC_OscConfig+0x478>)
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cba:	f7fd fbbb 	bl	8002434 <HAL_GetTick>
 8004cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cc2:	f7fd fbb7 	bl	8002434 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e05c      	b.n	8004d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cd4:	4b11      	ldr	r3, [pc, #68]	; (8004d1c <HAL_RCC_OscConfig+0x470>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0f0      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x416>
 8004ce0:	e054      	b.n	8004d8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ce2:	4b10      	ldr	r3, [pc, #64]	; (8004d24 <HAL_RCC_OscConfig+0x478>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce8:	f7fd fba4 	bl	8002434 <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cf0:	f7fd fba0 	bl	8002434 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e045      	b.n	8004d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d02:	4b06      	ldr	r3, [pc, #24]	; (8004d1c <HAL_RCC_OscConfig+0x470>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1f0      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x444>
 8004d0e:	e03d      	b.n	8004d8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d107      	bne.n	8004d28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e038      	b.n	8004d8e <HAL_RCC_OscConfig+0x4e2>
 8004d1c:	40023800 	.word	0x40023800
 8004d20:	40007000 	.word	0x40007000
 8004d24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d28:	4b1b      	ldr	r3, [pc, #108]	; (8004d98 <HAL_RCC_OscConfig+0x4ec>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d028      	beq.n	8004d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d121      	bne.n	8004d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d11a      	bne.n	8004d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d58:	4013      	ands	r3, r2
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d111      	bne.n	8004d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6e:	085b      	lsrs	r3, r3, #1
 8004d70:	3b01      	subs	r3, #1
 8004d72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d107      	bne.n	8004d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d001      	beq.n	8004d8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e000      	b.n	8004d8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	40023800 	.word	0x40023800

08004d9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e0cc      	b.n	8004f4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004db0:	4b68      	ldr	r3, [pc, #416]	; (8004f54 <HAL_RCC_ClockConfig+0x1b8>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d90c      	bls.n	8004dd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dbe:	4b65      	ldr	r3, [pc, #404]	; (8004f54 <HAL_RCC_ClockConfig+0x1b8>)
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc6:	4b63      	ldr	r3, [pc, #396]	; (8004f54 <HAL_RCC_ClockConfig+0x1b8>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0307 	and.w	r3, r3, #7
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d001      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e0b8      	b.n	8004f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d020      	beq.n	8004e26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d005      	beq.n	8004dfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004df0:	4b59      	ldr	r3, [pc, #356]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	4a58      	ldr	r2, [pc, #352]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004df6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0308 	and.w	r3, r3, #8
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d005      	beq.n	8004e14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e08:	4b53      	ldr	r3, [pc, #332]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	4a52      	ldr	r2, [pc, #328]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e14:	4b50      	ldr	r3, [pc, #320]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	494d      	ldr	r1, [pc, #308]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d044      	beq.n	8004ebc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d107      	bne.n	8004e4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e3a:	4b47      	ldr	r3, [pc, #284]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d119      	bne.n	8004e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e07f      	b.n	8004f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d003      	beq.n	8004e5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e56:	2b03      	cmp	r3, #3
 8004e58:	d107      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e5a:	4b3f      	ldr	r3, [pc, #252]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d109      	bne.n	8004e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e06f      	b.n	8004f4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e6a:	4b3b      	ldr	r3, [pc, #236]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e067      	b.n	8004f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e7a:	4b37      	ldr	r3, [pc, #220]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f023 0203 	bic.w	r2, r3, #3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	4934      	ldr	r1, [pc, #208]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e8c:	f7fd fad2 	bl	8002434 <HAL_GetTick>
 8004e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e92:	e00a      	b.n	8004eaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e94:	f7fd face 	bl	8002434 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e04f      	b.n	8004f4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eaa:	4b2b      	ldr	r3, [pc, #172]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 020c 	and.w	r2, r3, #12
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d1eb      	bne.n	8004e94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ebc:	4b25      	ldr	r3, [pc, #148]	; (8004f54 <HAL_RCC_ClockConfig+0x1b8>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0307 	and.w	r3, r3, #7
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d20c      	bcs.n	8004ee4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eca:	4b22      	ldr	r3, [pc, #136]	; (8004f54 <HAL_RCC_ClockConfig+0x1b8>)
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ed2:	4b20      	ldr	r3, [pc, #128]	; (8004f54 <HAL_RCC_ClockConfig+0x1b8>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0307 	and.w	r3, r3, #7
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d001      	beq.n	8004ee4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e032      	b.n	8004f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d008      	beq.n	8004f02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ef0:	4b19      	ldr	r3, [pc, #100]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	4916      	ldr	r1, [pc, #88]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0308 	and.w	r3, r3, #8
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d009      	beq.n	8004f22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f0e:	4b12      	ldr	r3, [pc, #72]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	00db      	lsls	r3, r3, #3
 8004f1c:	490e      	ldr	r1, [pc, #56]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f22:	f000 f821 	bl	8004f68 <HAL_RCC_GetSysClockFreq>
 8004f26:	4602      	mov	r2, r0
 8004f28:	4b0b      	ldr	r3, [pc, #44]	; (8004f58 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	091b      	lsrs	r3, r3, #4
 8004f2e:	f003 030f 	and.w	r3, r3, #15
 8004f32:	490a      	ldr	r1, [pc, #40]	; (8004f5c <HAL_RCC_ClockConfig+0x1c0>)
 8004f34:	5ccb      	ldrb	r3, [r1, r3]
 8004f36:	fa22 f303 	lsr.w	r3, r2, r3
 8004f3a:	4a09      	ldr	r2, [pc, #36]	; (8004f60 <HAL_RCC_ClockConfig+0x1c4>)
 8004f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f3e:	4b09      	ldr	r3, [pc, #36]	; (8004f64 <HAL_RCC_ClockConfig+0x1c8>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7fc ffee 	bl	8001f24 <HAL_InitTick>

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	40023c00 	.word	0x40023c00
 8004f58:	40023800 	.word	0x40023800
 8004f5c:	080142d8 	.word	0x080142d8
 8004f60:	20000230 	.word	0x20000230
 8004f64:	20000234 	.word	0x20000234

08004f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f6c:	b090      	sub	sp, #64	; 0x40
 8004f6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	637b      	str	r3, [r7, #52]	; 0x34
 8004f74:	2300      	movs	r3, #0
 8004f76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f78:	2300      	movs	r3, #0
 8004f7a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f80:	4b59      	ldr	r3, [pc, #356]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f003 030c 	and.w	r3, r3, #12
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	d00d      	beq.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x40>
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	f200 80a1 	bhi.w	80050d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d002      	beq.n	8004f9c <HAL_RCC_GetSysClockFreq+0x34>
 8004f96:	2b04      	cmp	r3, #4
 8004f98:	d003      	beq.n	8004fa2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f9a:	e09b      	b.n	80050d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f9c:	4b53      	ldr	r3, [pc, #332]	; (80050ec <HAL_RCC_GetSysClockFreq+0x184>)
 8004f9e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004fa0:	e09b      	b.n	80050da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fa2:	4b53      	ldr	r3, [pc, #332]	; (80050f0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004fa4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004fa6:	e098      	b.n	80050da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fa8:	4b4f      	ldr	r3, [pc, #316]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fb0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fb2:	4b4d      	ldr	r3, [pc, #308]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d028      	beq.n	8005010 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fbe:	4b4a      	ldr	r3, [pc, #296]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	099b      	lsrs	r3, r3, #6
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	623b      	str	r3, [r7, #32]
 8004fc8:	627a      	str	r2, [r7, #36]	; 0x24
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	4b47      	ldr	r3, [pc, #284]	; (80050f0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004fd4:	fb03 f201 	mul.w	r2, r3, r1
 8004fd8:	2300      	movs	r3, #0
 8004fda:	fb00 f303 	mul.w	r3, r0, r3
 8004fde:	4413      	add	r3, r2
 8004fe0:	4a43      	ldr	r2, [pc, #268]	; (80050f0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004fe2:	fba0 1202 	umull	r1, r2, r0, r2
 8004fe6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fe8:	460a      	mov	r2, r1
 8004fea:	62ba      	str	r2, [r7, #40]	; 0x28
 8004fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fee:	4413      	add	r3, r2
 8004ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	61bb      	str	r3, [r7, #24]
 8004ff8:	61fa      	str	r2, [r7, #28]
 8004ffa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ffe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005002:	f7fb f94d 	bl	80002a0 <__aeabi_uldivmod>
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	4613      	mov	r3, r2
 800500c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800500e:	e053      	b.n	80050b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005010:	4b35      	ldr	r3, [pc, #212]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	099b      	lsrs	r3, r3, #6
 8005016:	2200      	movs	r2, #0
 8005018:	613b      	str	r3, [r7, #16]
 800501a:	617a      	str	r2, [r7, #20]
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005022:	f04f 0b00 	mov.w	fp, #0
 8005026:	4652      	mov	r2, sl
 8005028:	465b      	mov	r3, fp
 800502a:	f04f 0000 	mov.w	r0, #0
 800502e:	f04f 0100 	mov.w	r1, #0
 8005032:	0159      	lsls	r1, r3, #5
 8005034:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005038:	0150      	lsls	r0, r2, #5
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
 800503e:	ebb2 080a 	subs.w	r8, r2, sl
 8005042:	eb63 090b 	sbc.w	r9, r3, fp
 8005046:	f04f 0200 	mov.w	r2, #0
 800504a:	f04f 0300 	mov.w	r3, #0
 800504e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005052:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005056:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800505a:	ebb2 0408 	subs.w	r4, r2, r8
 800505e:	eb63 0509 	sbc.w	r5, r3, r9
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	f04f 0300 	mov.w	r3, #0
 800506a:	00eb      	lsls	r3, r5, #3
 800506c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005070:	00e2      	lsls	r2, r4, #3
 8005072:	4614      	mov	r4, r2
 8005074:	461d      	mov	r5, r3
 8005076:	eb14 030a 	adds.w	r3, r4, sl
 800507a:	603b      	str	r3, [r7, #0]
 800507c:	eb45 030b 	adc.w	r3, r5, fp
 8005080:	607b      	str	r3, [r7, #4]
 8005082:	f04f 0200 	mov.w	r2, #0
 8005086:	f04f 0300 	mov.w	r3, #0
 800508a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800508e:	4629      	mov	r1, r5
 8005090:	028b      	lsls	r3, r1, #10
 8005092:	4621      	mov	r1, r4
 8005094:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005098:	4621      	mov	r1, r4
 800509a:	028a      	lsls	r2, r1, #10
 800509c:	4610      	mov	r0, r2
 800509e:	4619      	mov	r1, r3
 80050a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a2:	2200      	movs	r2, #0
 80050a4:	60bb      	str	r3, [r7, #8]
 80050a6:	60fa      	str	r2, [r7, #12]
 80050a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050ac:	f7fb f8f8 	bl	80002a0 <__aeabi_uldivmod>
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	4613      	mov	r3, r2
 80050b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050b8:	4b0b      	ldr	r3, [pc, #44]	; (80050e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	0c1b      	lsrs	r3, r3, #16
 80050be:	f003 0303 	and.w	r3, r3, #3
 80050c2:	3301      	adds	r3, #1
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80050c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80050d2:	e002      	b.n	80050da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050d4:	4b05      	ldr	r3, [pc, #20]	; (80050ec <HAL_RCC_GetSysClockFreq+0x184>)
 80050d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80050d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3740      	adds	r7, #64	; 0x40
 80050e0:	46bd      	mov	sp, r7
 80050e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050e6:	bf00      	nop
 80050e8:	40023800 	.word	0x40023800
 80050ec:	00f42400 	.word	0x00f42400
 80050f0:	017d7840 	.word	0x017d7840

080050f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050f8:	4b03      	ldr	r3, [pc, #12]	; (8005108 <HAL_RCC_GetHCLKFreq+0x14>)
 80050fa:	681b      	ldr	r3, [r3, #0]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	20000230 	.word	0x20000230

0800510c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005110:	f7ff fff0 	bl	80050f4 <HAL_RCC_GetHCLKFreq>
 8005114:	4602      	mov	r2, r0
 8005116:	4b05      	ldr	r3, [pc, #20]	; (800512c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	0a9b      	lsrs	r3, r3, #10
 800511c:	f003 0307 	and.w	r3, r3, #7
 8005120:	4903      	ldr	r1, [pc, #12]	; (8005130 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005122:	5ccb      	ldrb	r3, [r1, r3]
 8005124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005128:	4618      	mov	r0, r3
 800512a:	bd80      	pop	{r7, pc}
 800512c:	40023800 	.word	0x40023800
 8005130:	080142e8 	.word	0x080142e8

08005134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005138:	f7ff ffdc 	bl	80050f4 <HAL_RCC_GetHCLKFreq>
 800513c:	4602      	mov	r2, r0
 800513e:	4b05      	ldr	r3, [pc, #20]	; (8005154 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	0b5b      	lsrs	r3, r3, #13
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	4903      	ldr	r1, [pc, #12]	; (8005158 <HAL_RCC_GetPCLK2Freq+0x24>)
 800514a:	5ccb      	ldrb	r3, [r1, r3]
 800514c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005150:	4618      	mov	r0, r3
 8005152:	bd80      	pop	{r7, pc}
 8005154:	40023800 	.word	0x40023800
 8005158:	080142e8 	.word	0x080142e8

0800515c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	220f      	movs	r2, #15
 800516a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800516c:	4b12      	ldr	r3, [pc, #72]	; (80051b8 <HAL_RCC_GetClockConfig+0x5c>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f003 0203 	and.w	r2, r3, #3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005178:	4b0f      	ldr	r3, [pc, #60]	; (80051b8 <HAL_RCC_GetClockConfig+0x5c>)
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005184:	4b0c      	ldr	r3, [pc, #48]	; (80051b8 <HAL_RCC_GetClockConfig+0x5c>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005190:	4b09      	ldr	r3, [pc, #36]	; (80051b8 <HAL_RCC_GetClockConfig+0x5c>)
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	08db      	lsrs	r3, r3, #3
 8005196:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800519e:	4b07      	ldr	r3, [pc, #28]	; (80051bc <HAL_RCC_GetClockConfig+0x60>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0207 	and.w	r2, r3, #7
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	601a      	str	r2, [r3, #0]
}
 80051aa:	bf00      	nop
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	40023800 	.word	0x40023800
 80051bc:	40023c00 	.word	0x40023c00

080051c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e07b      	b.n	80052ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d108      	bne.n	80051ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051e2:	d009      	beq.n	80051f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	61da      	str	r2, [r3, #28]
 80051ea:	e005      	b.n	80051f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d106      	bne.n	8005218 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7fc fdc0 	bl	8001d98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2202      	movs	r2, #2
 800521c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800522e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005240:	431a      	orrs	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800524a:	431a      	orrs	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	431a      	orrs	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	431a      	orrs	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005268:	431a      	orrs	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005272:	431a      	orrs	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800527c:	ea42 0103 	orr.w	r1, r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005284:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	0c1b      	lsrs	r3, r3, #16
 8005296:	f003 0104 	and.w	r1, r3, #4
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	f003 0210 	and.w	r2, r3, #16
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	69da      	ldr	r2, [r3, #28]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b08c      	sub	sp, #48	; 0x30
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	60b9      	str	r1, [r7, #8]
 80052dc:	607a      	str	r2, [r7, #4]
 80052de:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80052e0:	2301      	movs	r3, #1
 80052e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80052e4:	2300      	movs	r3, #0
 80052e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d101      	bne.n	80052f8 <HAL_SPI_TransmitReceive+0x26>
 80052f4:	2302      	movs	r3, #2
 80052f6:	e18a      	b.n	800560e <HAL_SPI_TransmitReceive+0x33c>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005300:	f7fd f898 	bl	8002434 <HAL_GetTick>
 8005304:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800530c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005316:	887b      	ldrh	r3, [r7, #2]
 8005318:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800531a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800531e:	2b01      	cmp	r3, #1
 8005320:	d00f      	beq.n	8005342 <HAL_SPI_TransmitReceive+0x70>
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005328:	d107      	bne.n	800533a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d103      	bne.n	800533a <HAL_SPI_TransmitReceive+0x68>
 8005332:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005336:	2b04      	cmp	r3, #4
 8005338:	d003      	beq.n	8005342 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800533a:	2302      	movs	r3, #2
 800533c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005340:	e15b      	b.n	80055fa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d005      	beq.n	8005354 <HAL_SPI_TransmitReceive+0x82>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d002      	beq.n	8005354 <HAL_SPI_TransmitReceive+0x82>
 800534e:	887b      	ldrh	r3, [r7, #2]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d103      	bne.n	800535c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800535a:	e14e      	b.n	80055fa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b04      	cmp	r3, #4
 8005366:	d003      	beq.n	8005370 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2205      	movs	r2, #5
 800536c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	887a      	ldrh	r2, [r7, #2]
 8005380:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	887a      	ldrh	r2, [r7, #2]
 8005386:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	887a      	ldrh	r2, [r7, #2]
 8005392:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	887a      	ldrh	r2, [r7, #2]
 8005398:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b0:	2b40      	cmp	r3, #64	; 0x40
 80053b2:	d007      	beq.n	80053c4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053cc:	d178      	bne.n	80054c0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <HAL_SPI_TransmitReceive+0x10a>
 80053d6:	8b7b      	ldrh	r3, [r7, #26]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d166      	bne.n	80054aa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e0:	881a      	ldrh	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ec:	1c9a      	adds	r2, r3, #2
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	3b01      	subs	r3, #1
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005400:	e053      	b.n	80054aa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f003 0302 	and.w	r3, r3, #2
 800540c:	2b02      	cmp	r3, #2
 800540e:	d11b      	bne.n	8005448 <HAL_SPI_TransmitReceive+0x176>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005414:	b29b      	uxth	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d016      	beq.n	8005448 <HAL_SPI_TransmitReceive+0x176>
 800541a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541c:	2b01      	cmp	r3, #1
 800541e:	d113      	bne.n	8005448 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005424:	881a      	ldrh	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005430:	1c9a      	adds	r2, r3, #2
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800543a:	b29b      	uxth	r3, r3
 800543c:	3b01      	subs	r3, #1
 800543e:	b29a      	uxth	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005444:	2300      	movs	r3, #0
 8005446:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b01      	cmp	r3, #1
 8005454:	d119      	bne.n	800548a <HAL_SPI_TransmitReceive+0x1b8>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800545a:	b29b      	uxth	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	d014      	beq.n	800548a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68da      	ldr	r2, [r3, #12]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546a:	b292      	uxth	r2, r2
 800546c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005472:	1c9a      	adds	r2, r3, #2
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800547c:	b29b      	uxth	r3, r3
 800547e:	3b01      	subs	r3, #1
 8005480:	b29a      	uxth	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005486:	2301      	movs	r3, #1
 8005488:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800548a:	f7fc ffd3 	bl	8002434 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005496:	429a      	cmp	r2, r3
 8005498:	d807      	bhi.n	80054aa <HAL_SPI_TransmitReceive+0x1d8>
 800549a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a0:	d003      	beq.n	80054aa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80054a8:	e0a7      	b.n	80055fa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1a6      	bne.n	8005402 <HAL_SPI_TransmitReceive+0x130>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1a1      	bne.n	8005402 <HAL_SPI_TransmitReceive+0x130>
 80054be:	e07c      	b.n	80055ba <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d002      	beq.n	80054ce <HAL_SPI_TransmitReceive+0x1fc>
 80054c8:	8b7b      	ldrh	r3, [r7, #26]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d16b      	bne.n	80055a6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	330c      	adds	r3, #12
 80054d8:	7812      	ldrb	r2, [r2, #0]
 80054da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e0:	1c5a      	adds	r2, r3, #1
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	3b01      	subs	r3, #1
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054f4:	e057      	b.n	80055a6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	2b02      	cmp	r3, #2
 8005502:	d11c      	bne.n	800553e <HAL_SPI_TransmitReceive+0x26c>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005508:	b29b      	uxth	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d017      	beq.n	800553e <HAL_SPI_TransmitReceive+0x26c>
 800550e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005510:	2b01      	cmp	r3, #1
 8005512:	d114      	bne.n	800553e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	330c      	adds	r3, #12
 800551e:	7812      	ldrb	r2, [r2, #0]
 8005520:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005526:	1c5a      	adds	r2, r3, #1
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005530:	b29b      	uxth	r3, r3
 8005532:	3b01      	subs	r3, #1
 8005534:	b29a      	uxth	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800553a:	2300      	movs	r3, #0
 800553c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	2b01      	cmp	r3, #1
 800554a:	d119      	bne.n	8005580 <HAL_SPI_TransmitReceive+0x2ae>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005550:	b29b      	uxth	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d014      	beq.n	8005580 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68da      	ldr	r2, [r3, #12]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005560:	b2d2      	uxtb	r2, r2
 8005562:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005568:	1c5a      	adds	r2, r3, #1
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005572:	b29b      	uxth	r3, r3
 8005574:	3b01      	subs	r3, #1
 8005576:	b29a      	uxth	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800557c:	2301      	movs	r3, #1
 800557e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005580:	f7fc ff58 	bl	8002434 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800558c:	429a      	cmp	r2, r3
 800558e:	d803      	bhi.n	8005598 <HAL_SPI_TransmitReceive+0x2c6>
 8005590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005596:	d102      	bne.n	800559e <HAL_SPI_TransmitReceive+0x2cc>
 8005598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559a:	2b00      	cmp	r3, #0
 800559c:	d103      	bne.n	80055a6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80055a4:	e029      	b.n	80055fa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1a2      	bne.n	80054f6 <HAL_SPI_TransmitReceive+0x224>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d19d      	bne.n	80054f6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 f9d0 	bl	8005964 <SPI_EndRxTxTransaction>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d006      	beq.n	80055d8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2220      	movs	r2, #32
 80055d4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80055d6:	e010      	b.n	80055fa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10b      	bne.n	80055f8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055e0:	2300      	movs	r3, #0
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	e000      	b.n	80055fa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80055f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800560a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800560e:	4618      	mov	r0, r3
 8005610:	3730      	adds	r7, #48	; 0x30
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b088      	sub	sp, #32
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	099b      	lsrs	r3, r3, #6
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10f      	bne.n	800565c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00a      	beq.n	800565c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	099b      	lsrs	r3, r3, #6
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d004      	beq.n	800565c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	4798      	blx	r3
    return;
 800565a:	e0d7      	b.n	800580c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	085b      	lsrs	r3, r3, #1
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00a      	beq.n	800567e <HAL_SPI_IRQHandler+0x66>
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	09db      	lsrs	r3, r3, #7
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	2b00      	cmp	r3, #0
 8005672:	d004      	beq.n	800567e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	4798      	blx	r3
    return;
 800567c:	e0c6      	b.n	800580c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	095b      	lsrs	r3, r3, #5
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10c      	bne.n	80056a4 <HAL_SPI_IRQHandler+0x8c>
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	099b      	lsrs	r3, r3, #6
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d106      	bne.n	80056a4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	0a1b      	lsrs	r3, r3, #8
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 80b4 	beq.w	800580c <HAL_SPI_IRQHandler+0x1f4>
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	095b      	lsrs	r3, r3, #5
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 80ad 	beq.w	800580c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	099b      	lsrs	r3, r3, #6
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d023      	beq.n	8005706 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b03      	cmp	r3, #3
 80056c8:	d011      	beq.n	80056ee <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ce:	f043 0204 	orr.w	r2, r3, #4
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056d6:	2300      	movs	r3, #0
 80056d8:	617b      	str	r3, [r7, #20]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	617b      	str	r3, [r7, #20]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	617b      	str	r3, [r7, #20]
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	e00b      	b.n	8005706 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056ee:	2300      	movs	r3, #0
 80056f0:	613b      	str	r3, [r7, #16]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	613b      	str	r3, [r7, #16]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	613b      	str	r3, [r7, #16]
 8005702:	693b      	ldr	r3, [r7, #16]
        return;
 8005704:	e082      	b.n	800580c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	095b      	lsrs	r3, r3, #5
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d014      	beq.n	800573c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005716:	f043 0201 	orr.w	r2, r3, #1
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800571e:	2300      	movs	r3, #0
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	0a1b      	lsrs	r3, r3, #8
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00c      	beq.n	8005762 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574c:	f043 0208 	orr.w	r2, r3, #8
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005754:	2300      	movs	r3, #0
 8005756:	60bb      	str	r3, [r7, #8]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	60bb      	str	r3, [r7, #8]
 8005760:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005766:	2b00      	cmp	r3, #0
 8005768:	d04f      	beq.n	800580a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	685a      	ldr	r2, [r3, #4]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005778:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d104      	bne.n	8005796 <HAL_SPI_IRQHandler+0x17e>
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d034      	beq.n	8005800 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0203 	bic.w	r2, r2, #3
 80057a4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d011      	beq.n	80057d2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057b2:	4a18      	ldr	r2, [pc, #96]	; (8005814 <HAL_SPI_IRQHandler+0x1fc>)
 80057b4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7fc ffbc 	bl	8002738 <HAL_DMA_Abort_IT>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d005      	beq.n	80057d2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d016      	beq.n	8005808 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057de:	4a0d      	ldr	r2, [pc, #52]	; (8005814 <HAL_SPI_IRQHandler+0x1fc>)
 80057e0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fc ffa6 	bl	8002738 <HAL_DMA_Abort_IT>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00a      	beq.n	8005808 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80057fe:	e003      	b.n	8005808 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 f809 	bl	8005818 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005806:	e000      	b.n	800580a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005808:	bf00      	nop
    return;
 800580a:	bf00      	nop
  }
}
 800580c:	3720      	adds	r7, #32
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	0800582d 	.word	0x0800582d

08005818 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005838:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f7ff ffe6 	bl	8005818 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800584c:	bf00      	nop
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b088      	sub	sp, #32
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	603b      	str	r3, [r7, #0]
 8005860:	4613      	mov	r3, r2
 8005862:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005864:	f7fc fde6 	bl	8002434 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586c:	1a9b      	subs	r3, r3, r2
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	4413      	add	r3, r2
 8005872:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005874:	f7fc fdde 	bl	8002434 <HAL_GetTick>
 8005878:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800587a:	4b39      	ldr	r3, [pc, #228]	; (8005960 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	015b      	lsls	r3, r3, #5
 8005880:	0d1b      	lsrs	r3, r3, #20
 8005882:	69fa      	ldr	r2, [r7, #28]
 8005884:	fb02 f303 	mul.w	r3, r2, r3
 8005888:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800588a:	e054      	b.n	8005936 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005892:	d050      	beq.n	8005936 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005894:	f7fc fdce 	bl	8002434 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	69fa      	ldr	r2, [r7, #28]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d902      	bls.n	80058aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d13d      	bne.n	8005926 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058c2:	d111      	bne.n	80058e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058cc:	d004      	beq.n	80058d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058d6:	d107      	bne.n	80058e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058f0:	d10f      	bne.n	8005912 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005910:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e017      	b.n	8005956 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800592c:	2300      	movs	r3, #0
 800592e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	3b01      	subs	r3, #1
 8005934:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	689a      	ldr	r2, [r3, #8]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	4013      	ands	r3, r2
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	429a      	cmp	r2, r3
 8005944:	bf0c      	ite	eq
 8005946:	2301      	moveq	r3, #1
 8005948:	2300      	movne	r3, #0
 800594a:	b2db      	uxtb	r3, r3
 800594c:	461a      	mov	r2, r3
 800594e:	79fb      	ldrb	r3, [r7, #7]
 8005950:	429a      	cmp	r2, r3
 8005952:	d19b      	bne.n	800588c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3720      	adds	r7, #32
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	20000230 	.word	0x20000230

08005964 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b088      	sub	sp, #32
 8005968:	af02      	add	r7, sp, #8
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005970:	4b1b      	ldr	r3, [pc, #108]	; (80059e0 <SPI_EndRxTxTransaction+0x7c>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a1b      	ldr	r2, [pc, #108]	; (80059e4 <SPI_EndRxTxTransaction+0x80>)
 8005976:	fba2 2303 	umull	r2, r3, r2, r3
 800597a:	0d5b      	lsrs	r3, r3, #21
 800597c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005980:	fb02 f303 	mul.w	r3, r2, r3
 8005984:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800598e:	d112      	bne.n	80059b6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	2200      	movs	r2, #0
 8005998:	2180      	movs	r1, #128	; 0x80
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f7ff ff5a 	bl	8005854 <SPI_WaitFlagStateUntilTimeout>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d016      	beq.n	80059d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059aa:	f043 0220 	orr.w	r2, r3, #32
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e00f      	b.n	80059d6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00a      	beq.n	80059d2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	3b01      	subs	r3, #1
 80059c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059cc:	2b80      	cmp	r3, #128	; 0x80
 80059ce:	d0f2      	beq.n	80059b6 <SPI_EndRxTxTransaction+0x52>
 80059d0:	e000      	b.n	80059d4 <SPI_EndRxTxTransaction+0x70>
        break;
 80059d2:	bf00      	nop
  }

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	20000230 	.word	0x20000230
 80059e4:	165e9f81 	.word	0x165e9f81

080059e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e041      	b.n	8005a7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d106      	bne.n	8005a14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7fc fa12 	bl	8001e38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2202      	movs	r2, #2
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	3304      	adds	r3, #4
 8005a24:	4619      	mov	r1, r3
 8005a26:	4610      	mov	r0, r2
 8005a28:	f000 fa96 	bl	8005f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
	...

08005a88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d001      	beq.n	8005aa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e04e      	b.n	8005b3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68da      	ldr	r2, [r3, #12]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f042 0201 	orr.w	r2, r2, #1
 8005ab6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a23      	ldr	r2, [pc, #140]	; (8005b4c <HAL_TIM_Base_Start_IT+0xc4>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d022      	beq.n	8005b08 <HAL_TIM_Base_Start_IT+0x80>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aca:	d01d      	beq.n	8005b08 <HAL_TIM_Base_Start_IT+0x80>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a1f      	ldr	r2, [pc, #124]	; (8005b50 <HAL_TIM_Base_Start_IT+0xc8>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d018      	beq.n	8005b08 <HAL_TIM_Base_Start_IT+0x80>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a1e      	ldr	r2, [pc, #120]	; (8005b54 <HAL_TIM_Base_Start_IT+0xcc>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d013      	beq.n	8005b08 <HAL_TIM_Base_Start_IT+0x80>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a1c      	ldr	r2, [pc, #112]	; (8005b58 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d00e      	beq.n	8005b08 <HAL_TIM_Base_Start_IT+0x80>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a1b      	ldr	r2, [pc, #108]	; (8005b5c <HAL_TIM_Base_Start_IT+0xd4>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d009      	beq.n	8005b08 <HAL_TIM_Base_Start_IT+0x80>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a19      	ldr	r2, [pc, #100]	; (8005b60 <HAL_TIM_Base_Start_IT+0xd8>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d004      	beq.n	8005b08 <HAL_TIM_Base_Start_IT+0x80>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a18      	ldr	r2, [pc, #96]	; (8005b64 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d111      	bne.n	8005b2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f003 0307 	and.w	r3, r3, #7
 8005b12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2b06      	cmp	r3, #6
 8005b18:	d010      	beq.n	8005b3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f042 0201 	orr.w	r2, r2, #1
 8005b28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b2a:	e007      	b.n	8005b3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f042 0201 	orr.w	r2, r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	40010000 	.word	0x40010000
 8005b50:	40000400 	.word	0x40000400
 8005b54:	40000800 	.word	0x40000800
 8005b58:	40000c00 	.word	0x40000c00
 8005b5c:	40010400 	.word	0x40010400
 8005b60:	40014000 	.word	0x40014000
 8005b64:	40001800 	.word	0x40001800

08005b68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d122      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d11b      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f06f 0202 	mvn.w	r2, #2
 8005b94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	f003 0303 	and.w	r3, r3, #3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d003      	beq.n	8005bb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f9b5 	bl	8005f1a <HAL_TIM_IC_CaptureCallback>
 8005bb0:	e005      	b.n	8005bbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f9a7 	bl	8005f06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f9b8 	bl	8005f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	f003 0304 	and.w	r3, r3, #4
 8005bce:	2b04      	cmp	r3, #4
 8005bd0:	d122      	bne.n	8005c18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	2b04      	cmp	r3, #4
 8005bde:	d11b      	bne.n	8005c18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f06f 0204 	mvn.w	r2, #4
 8005be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2202      	movs	r2, #2
 8005bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d003      	beq.n	8005c06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f98b 	bl	8005f1a <HAL_TIM_IC_CaptureCallback>
 8005c04:	e005      	b.n	8005c12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 f97d 	bl	8005f06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f98e 	bl	8005f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	f003 0308 	and.w	r3, r3, #8
 8005c22:	2b08      	cmp	r3, #8
 8005c24:	d122      	bne.n	8005c6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	f003 0308 	and.w	r3, r3, #8
 8005c30:	2b08      	cmp	r3, #8
 8005c32:	d11b      	bne.n	8005c6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f06f 0208 	mvn.w	r2, #8
 8005c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2204      	movs	r2, #4
 8005c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	f003 0303 	and.w	r3, r3, #3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f961 	bl	8005f1a <HAL_TIM_IC_CaptureCallback>
 8005c58:	e005      	b.n	8005c66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f953 	bl	8005f06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 f964 	bl	8005f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	f003 0310 	and.w	r3, r3, #16
 8005c76:	2b10      	cmp	r3, #16
 8005c78:	d122      	bne.n	8005cc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f003 0310 	and.w	r3, r3, #16
 8005c84:	2b10      	cmp	r3, #16
 8005c86:	d11b      	bne.n	8005cc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f06f 0210 	mvn.w	r2, #16
 8005c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2208      	movs	r2, #8
 8005c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d003      	beq.n	8005cae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 f937 	bl	8005f1a <HAL_TIM_IC_CaptureCallback>
 8005cac:	e005      	b.n	8005cba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 f929 	bl	8005f06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 f93a 	bl	8005f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d10e      	bne.n	8005cec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d107      	bne.n	8005cec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f06f 0201 	mvn.w	r2, #1
 8005ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7fb fcec 	bl	80016c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf6:	2b80      	cmp	r3, #128	; 0x80
 8005cf8:	d10e      	bne.n	8005d18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d04:	2b80      	cmp	r3, #128	; 0x80
 8005d06:	d107      	bne.n	8005d18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fae0 	bl	80062d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d22:	2b40      	cmp	r3, #64	; 0x40
 8005d24:	d10e      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d30:	2b40      	cmp	r3, #64	; 0x40
 8005d32:	d107      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f8ff 	bl	8005f42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	f003 0320 	and.w	r3, r3, #32
 8005d4e:	2b20      	cmp	r3, #32
 8005d50:	d10e      	bne.n	8005d70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f003 0320 	and.w	r3, r3, #32
 8005d5c:	2b20      	cmp	r3, #32
 8005d5e:	d107      	bne.n	8005d70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f06f 0220 	mvn.w	r2, #32
 8005d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 faaa 	bl	80062c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d70:	bf00      	nop
 8005d72:	3708      	adds	r7, #8
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d82:	2300      	movs	r3, #0
 8005d84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d101      	bne.n	8005d94 <HAL_TIM_ConfigClockSource+0x1c>
 8005d90:	2302      	movs	r3, #2
 8005d92:	e0b4      	b.n	8005efe <HAL_TIM_ConfigClockSource+0x186>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2202      	movs	r2, #2
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005db2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dcc:	d03e      	beq.n	8005e4c <HAL_TIM_ConfigClockSource+0xd4>
 8005dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dd2:	f200 8087 	bhi.w	8005ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dda:	f000 8086 	beq.w	8005eea <HAL_TIM_ConfigClockSource+0x172>
 8005dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005de2:	d87f      	bhi.n	8005ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8005de4:	2b70      	cmp	r3, #112	; 0x70
 8005de6:	d01a      	beq.n	8005e1e <HAL_TIM_ConfigClockSource+0xa6>
 8005de8:	2b70      	cmp	r3, #112	; 0x70
 8005dea:	d87b      	bhi.n	8005ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dec:	2b60      	cmp	r3, #96	; 0x60
 8005dee:	d050      	beq.n	8005e92 <HAL_TIM_ConfigClockSource+0x11a>
 8005df0:	2b60      	cmp	r3, #96	; 0x60
 8005df2:	d877      	bhi.n	8005ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8005df4:	2b50      	cmp	r3, #80	; 0x50
 8005df6:	d03c      	beq.n	8005e72 <HAL_TIM_ConfigClockSource+0xfa>
 8005df8:	2b50      	cmp	r3, #80	; 0x50
 8005dfa:	d873      	bhi.n	8005ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dfc:	2b40      	cmp	r3, #64	; 0x40
 8005dfe:	d058      	beq.n	8005eb2 <HAL_TIM_ConfigClockSource+0x13a>
 8005e00:	2b40      	cmp	r3, #64	; 0x40
 8005e02:	d86f      	bhi.n	8005ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8005e04:	2b30      	cmp	r3, #48	; 0x30
 8005e06:	d064      	beq.n	8005ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e08:	2b30      	cmp	r3, #48	; 0x30
 8005e0a:	d86b      	bhi.n	8005ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8005e0c:	2b20      	cmp	r3, #32
 8005e0e:	d060      	beq.n	8005ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e10:	2b20      	cmp	r3, #32
 8005e12:	d867      	bhi.n	8005ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d05c      	beq.n	8005ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e18:	2b10      	cmp	r3, #16
 8005e1a:	d05a      	beq.n	8005ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e1c:	e062      	b.n	8005ee4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6818      	ldr	r0, [r3, #0]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	6899      	ldr	r1, [r3, #8]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	685a      	ldr	r2, [r3, #4]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	f000 f9ad 	bl	800618c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	609a      	str	r2, [r3, #8]
      break;
 8005e4a:	e04f      	b.n	8005eec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6818      	ldr	r0, [r3, #0]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	6899      	ldr	r1, [r3, #8]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f000 f996 	bl	800618c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689a      	ldr	r2, [r3, #8]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e6e:	609a      	str	r2, [r3, #8]
      break;
 8005e70:	e03c      	b.n	8005eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6818      	ldr	r0, [r3, #0]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	6859      	ldr	r1, [r3, #4]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	f000 f90a 	bl	8006098 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2150      	movs	r1, #80	; 0x50
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f000 f963 	bl	8006156 <TIM_ITRx_SetConfig>
      break;
 8005e90:	e02c      	b.n	8005eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6818      	ldr	r0, [r3, #0]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	6859      	ldr	r1, [r3, #4]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	f000 f929 	bl	80060f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2160      	movs	r1, #96	; 0x60
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f000 f953 	bl	8006156 <TIM_ITRx_SetConfig>
      break;
 8005eb0:	e01c      	b.n	8005eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6818      	ldr	r0, [r3, #0]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	6859      	ldr	r1, [r3, #4]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	f000 f8ea 	bl	8006098 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2140      	movs	r1, #64	; 0x40
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f000 f943 	bl	8006156 <TIM_ITRx_SetConfig>
      break;
 8005ed0:	e00c      	b.n	8005eec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4619      	mov	r1, r3
 8005edc:	4610      	mov	r0, r2
 8005ede:	f000 f93a 	bl	8006156 <TIM_ITRx_SetConfig>
      break;
 8005ee2:	e003      	b.n	8005eec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ee8:	e000      	b.n	8005eec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005eea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b083      	sub	sp, #12
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f22:	bf00      	nop
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b083      	sub	sp, #12
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f36:	bf00      	nop
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b083      	sub	sp, #12
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f4a:	bf00      	nop
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
	...

08005f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a40      	ldr	r2, [pc, #256]	; (800606c <TIM_Base_SetConfig+0x114>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d013      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f76:	d00f      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a3d      	ldr	r2, [pc, #244]	; (8006070 <TIM_Base_SetConfig+0x118>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d00b      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a3c      	ldr	r2, [pc, #240]	; (8006074 <TIM_Base_SetConfig+0x11c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d007      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a3b      	ldr	r2, [pc, #236]	; (8006078 <TIM_Base_SetConfig+0x120>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d003      	beq.n	8005f98 <TIM_Base_SetConfig+0x40>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a3a      	ldr	r2, [pc, #232]	; (800607c <TIM_Base_SetConfig+0x124>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d108      	bne.n	8005faa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a2f      	ldr	r2, [pc, #188]	; (800606c <TIM_Base_SetConfig+0x114>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d02b      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb8:	d027      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a2c      	ldr	r2, [pc, #176]	; (8006070 <TIM_Base_SetConfig+0x118>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d023      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a2b      	ldr	r2, [pc, #172]	; (8006074 <TIM_Base_SetConfig+0x11c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d01f      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a2a      	ldr	r2, [pc, #168]	; (8006078 <TIM_Base_SetConfig+0x120>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d01b      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a29      	ldr	r2, [pc, #164]	; (800607c <TIM_Base_SetConfig+0x124>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d017      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a28      	ldr	r2, [pc, #160]	; (8006080 <TIM_Base_SetConfig+0x128>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d013      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a27      	ldr	r2, [pc, #156]	; (8006084 <TIM_Base_SetConfig+0x12c>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d00f      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a26      	ldr	r2, [pc, #152]	; (8006088 <TIM_Base_SetConfig+0x130>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d00b      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a25      	ldr	r2, [pc, #148]	; (800608c <TIM_Base_SetConfig+0x134>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d007      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a24      	ldr	r2, [pc, #144]	; (8006090 <TIM_Base_SetConfig+0x138>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d003      	beq.n	800600a <TIM_Base_SetConfig+0xb2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a23      	ldr	r2, [pc, #140]	; (8006094 <TIM_Base_SetConfig+0x13c>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d108      	bne.n	800601c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	4313      	orrs	r3, r2
 800601a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	4313      	orrs	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a0a      	ldr	r2, [pc, #40]	; (800606c <TIM_Base_SetConfig+0x114>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d003      	beq.n	8006050 <TIM_Base_SetConfig+0xf8>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a0c      	ldr	r2, [pc, #48]	; (800607c <TIM_Base_SetConfig+0x124>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d103      	bne.n	8006058 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	691a      	ldr	r2, [r3, #16]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	615a      	str	r2, [r3, #20]
}
 800605e:	bf00      	nop
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	40010000 	.word	0x40010000
 8006070:	40000400 	.word	0x40000400
 8006074:	40000800 	.word	0x40000800
 8006078:	40000c00 	.word	0x40000c00
 800607c:	40010400 	.word	0x40010400
 8006080:	40014000 	.word	0x40014000
 8006084:	40014400 	.word	0x40014400
 8006088:	40014800 	.word	0x40014800
 800608c:	40001800 	.word	0x40001800
 8006090:	40001c00 	.word	0x40001c00
 8006094:	40002000 	.word	0x40002000

08006098 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006098:	b480      	push	{r7}
 800609a:	b087      	sub	sp, #28
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6a1b      	ldr	r3, [r3, #32]
 80060a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	f023 0201 	bic.w	r2, r3, #1
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	011b      	lsls	r3, r3, #4
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f023 030a 	bic.w	r3, r3, #10
 80060d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	4313      	orrs	r3, r2
 80060dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	621a      	str	r2, [r3, #32]
}
 80060ea:	bf00      	nop
 80060ec:	371c      	adds	r7, #28
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b087      	sub	sp, #28
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	60f8      	str	r0, [r7, #12]
 80060fe:	60b9      	str	r1, [r7, #8]
 8006100:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	f023 0210 	bic.w	r2, r3, #16
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6a1b      	ldr	r3, [r3, #32]
 8006118:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006120:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	031b      	lsls	r3, r3, #12
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	4313      	orrs	r3, r2
 800612a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006132:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	011b      	lsls	r3, r3, #4
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	4313      	orrs	r3, r2
 800613c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	621a      	str	r2, [r3, #32]
}
 800614a:	bf00      	nop
 800614c:	371c      	adds	r7, #28
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006156:	b480      	push	{r7}
 8006158:	b085      	sub	sp, #20
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
 800615e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800616c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	4313      	orrs	r3, r2
 8006174:	f043 0307 	orr.w	r3, r3, #7
 8006178:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	609a      	str	r2, [r3, #8]
}
 8006180:	bf00      	nop
 8006182:	3714      	adds	r7, #20
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800618c:	b480      	push	{r7}
 800618e:	b087      	sub	sp, #28
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
 8006198:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	021a      	lsls	r2, r3, #8
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	431a      	orrs	r2, r3
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	609a      	str	r2, [r3, #8]
}
 80061c0:	bf00      	nop
 80061c2:	371c      	adds	r7, #28
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d101      	bne.n	80061e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061e0:	2302      	movs	r3, #2
 80061e2:	e05a      	b.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800620a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	4313      	orrs	r3, r2
 8006214:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a21      	ldr	r2, [pc, #132]	; (80062a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d022      	beq.n	800626e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006230:	d01d      	beq.n	800626e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a1d      	ldr	r2, [pc, #116]	; (80062ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d018      	beq.n	800626e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a1b      	ldr	r2, [pc, #108]	; (80062b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d013      	beq.n	800626e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a1a      	ldr	r2, [pc, #104]	; (80062b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d00e      	beq.n	800626e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a18      	ldr	r2, [pc, #96]	; (80062b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d009      	beq.n	800626e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a17      	ldr	r2, [pc, #92]	; (80062bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d004      	beq.n	800626e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a15      	ldr	r2, [pc, #84]	; (80062c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d10c      	bne.n	8006288 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006274:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	4313      	orrs	r3, r2
 800627e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	40010000 	.word	0x40010000
 80062ac:	40000400 	.word	0x40000400
 80062b0:	40000800 	.word	0x40000800
 80062b4:	40000c00 	.word	0x40000c00
 80062b8:	40010400 	.word	0x40010400
 80062bc:	40014000 	.word	0x40014000
 80062c0:	40001800 	.word	0x40001800

080062c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e03f      	b.n	800637e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d106      	bne.n	8006318 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f7fb fdb6 	bl	8001e84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2224      	movs	r2, #36	; 0x24
 800631c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68da      	ldr	r2, [r3, #12]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800632e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fe19 	bl	8006f68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	691a      	ldr	r2, [r3, #16]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006344:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	695a      	ldr	r2, [r3, #20]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006354:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68da      	ldr	r2, [r3, #12]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006364:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2220      	movs	r2, #32
 8006370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2220      	movs	r2, #32
 8006378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b08a      	sub	sp, #40	; 0x28
 800638a:	af02      	add	r7, sp, #8
 800638c:	60f8      	str	r0, [r7, #12]
 800638e:	60b9      	str	r1, [r7, #8]
 8006390:	603b      	str	r3, [r7, #0]
 8006392:	4613      	mov	r3, r2
 8006394:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006396:	2300      	movs	r3, #0
 8006398:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b20      	cmp	r3, #32
 80063a4:	d17c      	bne.n	80064a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d002      	beq.n	80063b2 <HAL_UART_Transmit+0x2c>
 80063ac:	88fb      	ldrh	r3, [r7, #6]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e075      	b.n	80064a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d101      	bne.n	80063c4 <HAL_UART_Transmit+0x3e>
 80063c0:	2302      	movs	r3, #2
 80063c2:	e06e      	b.n	80064a2 <HAL_UART_Transmit+0x11c>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2221      	movs	r2, #33	; 0x21
 80063d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063da:	f7fc f82b 	bl	8002434 <HAL_GetTick>
 80063de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	88fa      	ldrh	r2, [r7, #6]
 80063e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	88fa      	ldrh	r2, [r7, #6]
 80063ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063f4:	d108      	bne.n	8006408 <HAL_UART_Transmit+0x82>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d104      	bne.n	8006408 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80063fe:	2300      	movs	r3, #0
 8006400:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	61bb      	str	r3, [r7, #24]
 8006406:	e003      	b.n	8006410 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800640c:	2300      	movs	r3, #0
 800640e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006418:	e02a      	b.n	8006470 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	2200      	movs	r2, #0
 8006422:	2180      	movs	r1, #128	; 0x80
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 fb59 	bl	8006adc <UART_WaitOnFlagUntilTimeout>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e036      	b.n	80064a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10b      	bne.n	8006452 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	461a      	mov	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006448:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	3302      	adds	r3, #2
 800644e:	61bb      	str	r3, [r7, #24]
 8006450:	e007      	b.n	8006462 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	781a      	ldrb	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	3301      	adds	r3, #1
 8006460:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006466:	b29b      	uxth	r3, r3
 8006468:	3b01      	subs	r3, #1
 800646a:	b29a      	uxth	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006474:	b29b      	uxth	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1cf      	bne.n	800641a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	2200      	movs	r2, #0
 8006482:	2140      	movs	r1, #64	; 0x40
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 fb29 	bl	8006adc <UART_WaitOnFlagUntilTimeout>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e006      	b.n	80064a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2220      	movs	r2, #32
 8006498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800649c:	2300      	movs	r3, #0
 800649e:	e000      	b.n	80064a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80064a0:	2302      	movs	r3, #2
  }
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3720      	adds	r7, #32
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b085      	sub	sp, #20
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	60f8      	str	r0, [r7, #12]
 80064b2:	60b9      	str	r1, [r7, #8]
 80064b4:	4613      	mov	r3, r2
 80064b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	2b20      	cmp	r3, #32
 80064c2:	d130      	bne.n	8006526 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d002      	beq.n	80064d0 <HAL_UART_Transmit_IT+0x26>
 80064ca:	88fb      	ldrh	r3, [r7, #6]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d101      	bne.n	80064d4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e029      	b.n	8006528 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d101      	bne.n	80064e2 <HAL_UART_Transmit_IT+0x38>
 80064de:	2302      	movs	r3, #2
 80064e0:	e022      	b.n	8006528 <HAL_UART_Transmit_IT+0x7e>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	88fa      	ldrh	r2, [r7, #6]
 80064f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	88fa      	ldrh	r2, [r7, #6]
 80064fa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2221      	movs	r2, #33	; 0x21
 8006506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68da      	ldr	r2, [r3, #12]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006520:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006522:	2300      	movs	r3, #0
 8006524:	e000      	b.n	8006528 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006526:	2302      	movs	r3, #2
  }
}
 8006528:	4618      	mov	r0, r3
 800652a:	3714      	adds	r7, #20
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	4613      	mov	r3, r2
 8006540:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b20      	cmp	r3, #32
 800654c:	d11d      	bne.n	800658a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <HAL_UART_Receive_IT+0x26>
 8006554:	88fb      	ldrh	r3, [r7, #6]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e016      	b.n	800658c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006564:	2b01      	cmp	r3, #1
 8006566:	d101      	bne.n	800656c <HAL_UART_Receive_IT+0x38>
 8006568:	2302      	movs	r3, #2
 800656a:	e00f      	b.n	800658c <HAL_UART_Receive_IT+0x58>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800657a:	88fb      	ldrh	r3, [r7, #6]
 800657c:	461a      	mov	r2, r3
 800657e:	68b9      	ldr	r1, [r7, #8]
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 fb19 	bl	8006bb8 <UART_Start_Receive_IT>
 8006586:	4603      	mov	r3, r0
 8006588:	e000      	b.n	800658c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800658a:	2302      	movs	r3, #2
  }
}
 800658c:	4618      	mov	r0, r3
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b0ba      	sub	sp, #232	; 0xe8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80065c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ca:	f003 030f 	and.w	r3, r3, #15
 80065ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80065d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10f      	bne.n	80065fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065de:	f003 0320 	and.w	r3, r3, #32
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d009      	beq.n	80065fa <HAL_UART_IRQHandler+0x66>
 80065e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065ea:	f003 0320 	and.w	r3, r3, #32
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 fbfd 	bl	8006df2 <UART_Receive_IT>
      return;
 80065f8:	e256      	b.n	8006aa8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80065fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f000 80de 	beq.w	80067c0 <HAL_UART_IRQHandler+0x22c>
 8006604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	2b00      	cmp	r3, #0
 800660e:	d106      	bne.n	800661e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006614:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 80d1 	beq.w	80067c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800661e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00b      	beq.n	8006642 <HAL_UART_IRQHandler+0xae>
 800662a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800662e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006632:	2b00      	cmp	r3, #0
 8006634:	d005      	beq.n	8006642 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663a:	f043 0201 	orr.w	r2, r3, #1
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006646:	f003 0304 	and.w	r3, r3, #4
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00b      	beq.n	8006666 <HAL_UART_IRQHandler+0xd2>
 800664e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b00      	cmp	r3, #0
 8006658:	d005      	beq.n	8006666 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665e:	f043 0202 	orr.w	r2, r3, #2
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800666a:	f003 0302 	and.w	r3, r3, #2
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00b      	beq.n	800668a <HAL_UART_IRQHandler+0xf6>
 8006672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b00      	cmp	r3, #0
 800667c:	d005      	beq.n	800668a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006682:	f043 0204 	orr.w	r2, r3, #4
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800668a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800668e:	f003 0308 	and.w	r3, r3, #8
 8006692:	2b00      	cmp	r3, #0
 8006694:	d011      	beq.n	80066ba <HAL_UART_IRQHandler+0x126>
 8006696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800669a:	f003 0320 	and.w	r3, r3, #32
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d105      	bne.n	80066ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80066a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d005      	beq.n	80066ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	f043 0208 	orr.w	r2, r3, #8
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f000 81ed 	beq.w	8006a9e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066c8:	f003 0320 	and.w	r3, r3, #32
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d008      	beq.n	80066e2 <HAL_UART_IRQHandler+0x14e>
 80066d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066d4:	f003 0320 	and.w	r3, r3, #32
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d002      	beq.n	80066e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 fb88 	bl	8006df2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	695b      	ldr	r3, [r3, #20]
 80066e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ec:	2b40      	cmp	r3, #64	; 0x40
 80066ee:	bf0c      	ite	eq
 80066f0:	2301      	moveq	r3, #1
 80066f2:	2300      	movne	r3, #0
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fe:	f003 0308 	and.w	r3, r3, #8
 8006702:	2b00      	cmp	r3, #0
 8006704:	d103      	bne.n	800670e <HAL_UART_IRQHandler+0x17a>
 8006706:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800670a:	2b00      	cmp	r3, #0
 800670c:	d04f      	beq.n	80067ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 fa90 	bl	8006c34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671e:	2b40      	cmp	r3, #64	; 0x40
 8006720:	d141      	bne.n	80067a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	3314      	adds	r3, #20
 8006728:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006730:	e853 3f00 	ldrex	r3, [r3]
 8006734:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006738:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800673c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006740:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	3314      	adds	r3, #20
 800674a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800674e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006752:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006756:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800675a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800675e:	e841 2300 	strex	r3, r2, [r1]
 8006762:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006766:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1d9      	bne.n	8006722 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006772:	2b00      	cmp	r3, #0
 8006774:	d013      	beq.n	800679e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677a:	4a7d      	ldr	r2, [pc, #500]	; (8006970 <HAL_UART_IRQHandler+0x3dc>)
 800677c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006782:	4618      	mov	r0, r3
 8006784:	f7fb ffd8 	bl	8002738 <HAL_DMA_Abort_IT>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d016      	beq.n	80067bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006798:	4610      	mov	r0, r2
 800679a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800679c:	e00e      	b.n	80067bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f986 	bl	8006ab0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a4:	e00a      	b.n	80067bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f982 	bl	8006ab0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ac:	e006      	b.n	80067bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f97e 	bl	8006ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80067ba:	e170      	b.n	8006a9e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067bc:	bf00      	nop
    return;
 80067be:	e16e      	b.n	8006a9e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	f040 814a 	bne.w	8006a5e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80067ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ce:	f003 0310 	and.w	r3, r3, #16
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f000 8143 	beq.w	8006a5e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80067d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067dc:	f003 0310 	and.w	r3, r3, #16
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f000 813c 	beq.w	8006a5e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80067e6:	2300      	movs	r3, #0
 80067e8:	60bb      	str	r3, [r7, #8]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	60bb      	str	r3, [r7, #8]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	60bb      	str	r3, [r7, #8]
 80067fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006806:	2b40      	cmp	r3, #64	; 0x40
 8006808:	f040 80b4 	bne.w	8006974 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006818:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 8140 	beq.w	8006aa2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006826:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800682a:	429a      	cmp	r2, r3
 800682c:	f080 8139 	bcs.w	8006aa2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006836:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006842:	f000 8088 	beq.w	8006956 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	330c      	adds	r3, #12
 800684c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006850:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006854:	e853 3f00 	ldrex	r3, [r3]
 8006858:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800685c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006864:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	330c      	adds	r3, #12
 800686e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006872:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006876:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800687e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006882:	e841 2300 	strex	r3, r2, [r1]
 8006886:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800688a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1d9      	bne.n	8006846 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	3314      	adds	r3, #20
 8006898:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800689c:	e853 3f00 	ldrex	r3, [r3]
 80068a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80068a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068a4:	f023 0301 	bic.w	r3, r3, #1
 80068a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3314      	adds	r3, #20
 80068b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80068b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80068ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80068be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80068c2:	e841 2300 	strex	r3, r2, [r1]
 80068c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80068c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1e1      	bne.n	8006892 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	3314      	adds	r3, #20
 80068d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068d8:	e853 3f00 	ldrex	r3, [r3]
 80068dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80068de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3314      	adds	r3, #20
 80068ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80068f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80068f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80068f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80068fa:	e841 2300 	strex	r3, r2, [r1]
 80068fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1e3      	bne.n	80068ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2220      	movs	r2, #32
 800690a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	330c      	adds	r3, #12
 800691a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800691e:	e853 3f00 	ldrex	r3, [r3]
 8006922:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006926:	f023 0310 	bic.w	r3, r3, #16
 800692a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	330c      	adds	r3, #12
 8006934:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006938:	65ba      	str	r2, [r7, #88]	; 0x58
 800693a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800693e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006940:	e841 2300 	strex	r3, r2, [r1]
 8006944:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1e3      	bne.n	8006914 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006950:	4618      	mov	r0, r3
 8006952:	f7fb fe81 	bl	8002658 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800695e:	b29b      	uxth	r3, r3
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	b29b      	uxth	r3, r3
 8006964:	4619      	mov	r1, r3
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f8ac 	bl	8006ac4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800696c:	e099      	b.n	8006aa2 <HAL_UART_IRQHandler+0x50e>
 800696e:	bf00      	nop
 8006970:	08006cfb 	.word	0x08006cfb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800697c:	b29b      	uxth	r3, r3
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006988:	b29b      	uxth	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	f000 808b 	beq.w	8006aa6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006990:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 8086 	beq.w	8006aa6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	330c      	adds	r3, #12
 80069a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a4:	e853 3f00 	ldrex	r3, [r3]
 80069a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	330c      	adds	r3, #12
 80069ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80069be:	647a      	str	r2, [r7, #68]	; 0x44
 80069c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069c6:	e841 2300 	strex	r3, r2, [r1]
 80069ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1e3      	bne.n	800699a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3314      	adds	r3, #20
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069dc:	e853 3f00 	ldrex	r3, [r3]
 80069e0:	623b      	str	r3, [r7, #32]
   return(result);
 80069e2:	6a3b      	ldr	r3, [r7, #32]
 80069e4:	f023 0301 	bic.w	r3, r3, #1
 80069e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	3314      	adds	r3, #20
 80069f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80069f6:	633a      	str	r2, [r7, #48]	; 0x30
 80069f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069fe:	e841 2300 	strex	r3, r2, [r1]
 8006a02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1e3      	bne.n	80069d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	330c      	adds	r3, #12
 8006a1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	e853 3f00 	ldrex	r3, [r3]
 8006a26:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f023 0310 	bic.w	r3, r3, #16
 8006a2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	330c      	adds	r3, #12
 8006a38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006a3c:	61fa      	str	r2, [r7, #28]
 8006a3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a40:	69b9      	ldr	r1, [r7, #24]
 8006a42:	69fa      	ldr	r2, [r7, #28]
 8006a44:	e841 2300 	strex	r3, r2, [r1]
 8006a48:	617b      	str	r3, [r7, #20]
   return(result);
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1e3      	bne.n	8006a18 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a54:	4619      	mov	r1, r3
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f834 	bl	8006ac4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a5c:	e023      	b.n	8006aa6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d009      	beq.n	8006a7e <HAL_UART_IRQHandler+0x4ea>
 8006a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f953 	bl	8006d22 <UART_Transmit_IT>
    return;
 8006a7c:	e014      	b.n	8006aa8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00e      	beq.n	8006aa8 <HAL_UART_IRQHandler+0x514>
 8006a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d008      	beq.n	8006aa8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f993 	bl	8006dc2 <UART_EndTransmit_IT>
    return;
 8006a9c:	e004      	b.n	8006aa8 <HAL_UART_IRQHandler+0x514>
    return;
 8006a9e:	bf00      	nop
 8006aa0:	e002      	b.n	8006aa8 <HAL_UART_IRQHandler+0x514>
      return;
 8006aa2:	bf00      	nop
 8006aa4:	e000      	b.n	8006aa8 <HAL_UART_IRQHandler+0x514>
      return;
 8006aa6:	bf00      	nop
  }
}
 8006aa8:	37e8      	adds	r7, #232	; 0xe8
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop

08006ab0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	460b      	mov	r3, r1
 8006ace:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b090      	sub	sp, #64	; 0x40
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	603b      	str	r3, [r7, #0]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aec:	e050      	b.n	8006b90 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af4:	d04c      	beq.n	8006b90 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d007      	beq.n	8006b0c <UART_WaitOnFlagUntilTimeout+0x30>
 8006afc:	f7fb fc9a 	bl	8002434 <HAL_GetTick>
 8006b00:	4602      	mov	r2, r0
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d241      	bcs.n	8006b90 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	330c      	adds	r3, #12
 8006b12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b16:	e853 3f00 	ldrex	r3, [r3]
 8006b1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	330c      	adds	r3, #12
 8006b2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b2c:	637a      	str	r2, [r7, #52]	; 0x34
 8006b2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b34:	e841 2300 	strex	r3, r2, [r1]
 8006b38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1e5      	bne.n	8006b0c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	3314      	adds	r3, #20
 8006b46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	e853 3f00 	ldrex	r3, [r3]
 8006b4e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	f023 0301 	bic.w	r3, r3, #1
 8006b56:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3314      	adds	r3, #20
 8006b5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b60:	623a      	str	r2, [r7, #32]
 8006b62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b64:	69f9      	ldr	r1, [r7, #28]
 8006b66:	6a3a      	ldr	r2, [r7, #32]
 8006b68:	e841 2300 	strex	r3, r2, [r1]
 8006b6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1e5      	bne.n	8006b40 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2220      	movs	r2, #32
 8006b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e00f      	b.n	8006bb0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	4013      	ands	r3, r2
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	bf0c      	ite	eq
 8006ba0:	2301      	moveq	r3, #1
 8006ba2:	2300      	movne	r3, #0
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	79fb      	ldrb	r3, [r7, #7]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d09f      	beq.n	8006aee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3740      	adds	r7, #64	; 0x40
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	88fa      	ldrh	r2, [r7, #6]
 8006bd0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	88fa      	ldrh	r2, [r7, #6]
 8006bd6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2222      	movs	r2, #34	; 0x22
 8006be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d007      	beq.n	8006c06 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68da      	ldr	r2, [r3, #12]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c04:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	695a      	ldr	r2, [r3, #20]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f042 0201 	orr.w	r2, r2, #1
 8006c14:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68da      	ldr	r2, [r3, #12]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f042 0220 	orr.w	r2, r2, #32
 8006c24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3714      	adds	r7, #20
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b095      	sub	sp, #84	; 0x54
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	330c      	adds	r3, #12
 8006c42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c46:	e853 3f00 	ldrex	r3, [r3]
 8006c4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	330c      	adds	r3, #12
 8006c5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c5c:	643a      	str	r2, [r7, #64]	; 0x40
 8006c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c64:	e841 2300 	strex	r3, r2, [r1]
 8006c68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1e5      	bne.n	8006c3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	3314      	adds	r3, #20
 8006c76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c78:	6a3b      	ldr	r3, [r7, #32]
 8006c7a:	e853 3f00 	ldrex	r3, [r3]
 8006c7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	f023 0301 	bic.w	r3, r3, #1
 8006c86:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	3314      	adds	r3, #20
 8006c8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c98:	e841 2300 	strex	r3, r2, [r1]
 8006c9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1e5      	bne.n	8006c70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d119      	bne.n	8006ce0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	330c      	adds	r3, #12
 8006cb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	e853 3f00 	ldrex	r3, [r3]
 8006cba:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	f023 0310 	bic.w	r3, r3, #16
 8006cc2:	647b      	str	r3, [r7, #68]	; 0x44
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	330c      	adds	r3, #12
 8006cca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ccc:	61ba      	str	r2, [r7, #24]
 8006cce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd0:	6979      	ldr	r1, [r7, #20]
 8006cd2:	69ba      	ldr	r2, [r7, #24]
 8006cd4:	e841 2300 	strex	r3, r2, [r1]
 8006cd8:	613b      	str	r3, [r7, #16]
   return(result);
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1e5      	bne.n	8006cac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2220      	movs	r2, #32
 8006ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006cee:	bf00      	nop
 8006cf0:	3754      	adds	r7, #84	; 0x54
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b084      	sub	sp, #16
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f7ff fecb 	bl	8006ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d1a:	bf00      	nop
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b085      	sub	sp, #20
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b21      	cmp	r3, #33	; 0x21
 8006d34:	d13e      	bne.n	8006db4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d3e:	d114      	bne.n	8006d6a <UART_Transmit_IT+0x48>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d110      	bne.n	8006d6a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a1b      	ldr	r3, [r3, #32]
 8006d4c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	881b      	ldrh	r3, [r3, #0]
 8006d52:	461a      	mov	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d5c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	1c9a      	adds	r2, r3, #2
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	621a      	str	r2, [r3, #32]
 8006d68:	e008      	b.n	8006d7c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	1c59      	adds	r1, r3, #1
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	6211      	str	r1, [r2, #32]
 8006d74:	781a      	ldrb	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	3b01      	subs	r3, #1
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	4619      	mov	r1, r3
 8006d8a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10f      	bne.n	8006db0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68da      	ldr	r2, [r3, #12]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d9e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68da      	ldr	r2, [r3, #12]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006db0:	2300      	movs	r3, #0
 8006db2:	e000      	b.n	8006db6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006db4:	2302      	movs	r3, #2
  }
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b082      	sub	sp, #8
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68da      	ldr	r2, [r3, #12]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dd8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2220      	movs	r2, #32
 8006dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7fa fab6 	bl	8001354 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b08c      	sub	sp, #48	; 0x30
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b22      	cmp	r3, #34	; 0x22
 8006e04:	f040 80ab 	bne.w	8006f5e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e10:	d117      	bne.n	8006e42 <UART_Receive_IT+0x50>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d113      	bne.n	8006e42 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e22:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e34:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3a:	1c9a      	adds	r2, r3, #2
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	629a      	str	r2, [r3, #40]	; 0x28
 8006e40:	e026      	b.n	8006e90 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e46:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e54:	d007      	beq.n	8006e66 <UART_Receive_IT+0x74>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10a      	bne.n	8006e74 <UART_Receive_IT+0x82>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d106      	bne.n	8006e74 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	b2da      	uxtb	r2, r3
 8006e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e70:	701a      	strb	r2, [r3, #0]
 8006e72:	e008      	b.n	8006e86 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e84:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8a:	1c5a      	adds	r2, r3, #1
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	3b01      	subs	r3, #1
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d15a      	bne.n	8006f5a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68da      	ldr	r2, [r3, #12]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f022 0220 	bic.w	r2, r2, #32
 8006eb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68da      	ldr	r2, [r3, #12]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ec2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	695a      	ldr	r2, [r3, #20]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f022 0201 	bic.w	r2, r2, #1
 8006ed2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2220      	movs	r2, #32
 8006ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d135      	bne.n	8006f50 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	330c      	adds	r3, #12
 8006ef0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	e853 3f00 	ldrex	r3, [r3]
 8006ef8:	613b      	str	r3, [r7, #16]
   return(result);
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	f023 0310 	bic.w	r3, r3, #16
 8006f00:	627b      	str	r3, [r7, #36]	; 0x24
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	330c      	adds	r3, #12
 8006f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f0a:	623a      	str	r2, [r7, #32]
 8006f0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0e:	69f9      	ldr	r1, [r7, #28]
 8006f10:	6a3a      	ldr	r2, [r7, #32]
 8006f12:	e841 2300 	strex	r3, r2, [r1]
 8006f16:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1e5      	bne.n	8006eea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0310 	and.w	r3, r3, #16
 8006f28:	2b10      	cmp	r3, #16
 8006f2a:	d10a      	bne.n	8006f42 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	60fb      	str	r3, [r7, #12]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	60fb      	str	r3, [r7, #12]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f46:	4619      	mov	r1, r3
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f7ff fdbb 	bl	8006ac4 <HAL_UARTEx_RxEventCallback>
 8006f4e:	e002      	b.n	8006f56 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f7fa f9e1 	bl	8001318 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f56:	2300      	movs	r3, #0
 8006f58:	e002      	b.n	8006f60 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	e000      	b.n	8006f60 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006f5e:	2302      	movs	r3, #2
  }
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3730      	adds	r7, #48	; 0x30
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f6c:	b0c0      	sub	sp, #256	; 0x100
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f84:	68d9      	ldr	r1, [r3, #12]
 8006f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	ea40 0301 	orr.w	r3, r0, r1
 8006f90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f96:	689a      	ldr	r2, [r3, #8]
 8006f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	431a      	orrs	r2, r3
 8006fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	431a      	orrs	r2, r3
 8006fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006fc0:	f021 010c 	bic.w	r1, r1, #12
 8006fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006fce:	430b      	orrs	r3, r1
 8006fd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fe2:	6999      	ldr	r1, [r3, #24]
 8006fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	ea40 0301 	orr.w	r3, r0, r1
 8006fee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	4b8f      	ldr	r3, [pc, #572]	; (8007234 <UART_SetConfig+0x2cc>)
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d005      	beq.n	8007008 <UART_SetConfig+0xa0>
 8006ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	4b8d      	ldr	r3, [pc, #564]	; (8007238 <UART_SetConfig+0x2d0>)
 8007004:	429a      	cmp	r2, r3
 8007006:	d104      	bne.n	8007012 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007008:	f7fe f894 	bl	8005134 <HAL_RCC_GetPCLK2Freq>
 800700c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007010:	e003      	b.n	800701a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007012:	f7fe f87b 	bl	800510c <HAL_RCC_GetPCLK1Freq>
 8007016:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800701a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800701e:	69db      	ldr	r3, [r3, #28]
 8007020:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007024:	f040 810c 	bne.w	8007240 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007028:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800702c:	2200      	movs	r2, #0
 800702e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007032:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007036:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800703a:	4622      	mov	r2, r4
 800703c:	462b      	mov	r3, r5
 800703e:	1891      	adds	r1, r2, r2
 8007040:	65b9      	str	r1, [r7, #88]	; 0x58
 8007042:	415b      	adcs	r3, r3
 8007044:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007046:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800704a:	4621      	mov	r1, r4
 800704c:	eb12 0801 	adds.w	r8, r2, r1
 8007050:	4629      	mov	r1, r5
 8007052:	eb43 0901 	adc.w	r9, r3, r1
 8007056:	f04f 0200 	mov.w	r2, #0
 800705a:	f04f 0300 	mov.w	r3, #0
 800705e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007062:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007066:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800706a:	4690      	mov	r8, r2
 800706c:	4699      	mov	r9, r3
 800706e:	4623      	mov	r3, r4
 8007070:	eb18 0303 	adds.w	r3, r8, r3
 8007074:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007078:	462b      	mov	r3, r5
 800707a:	eb49 0303 	adc.w	r3, r9, r3
 800707e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800708e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007092:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007096:	460b      	mov	r3, r1
 8007098:	18db      	adds	r3, r3, r3
 800709a:	653b      	str	r3, [r7, #80]	; 0x50
 800709c:	4613      	mov	r3, r2
 800709e:	eb42 0303 	adc.w	r3, r2, r3
 80070a2:	657b      	str	r3, [r7, #84]	; 0x54
 80070a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80070a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80070ac:	f7f9 f8f8 	bl	80002a0 <__aeabi_uldivmod>
 80070b0:	4602      	mov	r2, r0
 80070b2:	460b      	mov	r3, r1
 80070b4:	4b61      	ldr	r3, [pc, #388]	; (800723c <UART_SetConfig+0x2d4>)
 80070b6:	fba3 2302 	umull	r2, r3, r3, r2
 80070ba:	095b      	lsrs	r3, r3, #5
 80070bc:	011c      	lsls	r4, r3, #4
 80070be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070c2:	2200      	movs	r2, #0
 80070c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80070c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80070cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80070d0:	4642      	mov	r2, r8
 80070d2:	464b      	mov	r3, r9
 80070d4:	1891      	adds	r1, r2, r2
 80070d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80070d8:	415b      	adcs	r3, r3
 80070da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80070e0:	4641      	mov	r1, r8
 80070e2:	eb12 0a01 	adds.w	sl, r2, r1
 80070e6:	4649      	mov	r1, r9
 80070e8:	eb43 0b01 	adc.w	fp, r3, r1
 80070ec:	f04f 0200 	mov.w	r2, #0
 80070f0:	f04f 0300 	mov.w	r3, #0
 80070f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80070f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80070fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007100:	4692      	mov	sl, r2
 8007102:	469b      	mov	fp, r3
 8007104:	4643      	mov	r3, r8
 8007106:	eb1a 0303 	adds.w	r3, sl, r3
 800710a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800710e:	464b      	mov	r3, r9
 8007110:	eb4b 0303 	adc.w	r3, fp, r3
 8007114:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007124:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007128:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800712c:	460b      	mov	r3, r1
 800712e:	18db      	adds	r3, r3, r3
 8007130:	643b      	str	r3, [r7, #64]	; 0x40
 8007132:	4613      	mov	r3, r2
 8007134:	eb42 0303 	adc.w	r3, r2, r3
 8007138:	647b      	str	r3, [r7, #68]	; 0x44
 800713a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800713e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007142:	f7f9 f8ad 	bl	80002a0 <__aeabi_uldivmod>
 8007146:	4602      	mov	r2, r0
 8007148:	460b      	mov	r3, r1
 800714a:	4611      	mov	r1, r2
 800714c:	4b3b      	ldr	r3, [pc, #236]	; (800723c <UART_SetConfig+0x2d4>)
 800714e:	fba3 2301 	umull	r2, r3, r3, r1
 8007152:	095b      	lsrs	r3, r3, #5
 8007154:	2264      	movs	r2, #100	; 0x64
 8007156:	fb02 f303 	mul.w	r3, r2, r3
 800715a:	1acb      	subs	r3, r1, r3
 800715c:	00db      	lsls	r3, r3, #3
 800715e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007162:	4b36      	ldr	r3, [pc, #216]	; (800723c <UART_SetConfig+0x2d4>)
 8007164:	fba3 2302 	umull	r2, r3, r3, r2
 8007168:	095b      	lsrs	r3, r3, #5
 800716a:	005b      	lsls	r3, r3, #1
 800716c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007170:	441c      	add	r4, r3
 8007172:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007176:	2200      	movs	r2, #0
 8007178:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800717c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007180:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007184:	4642      	mov	r2, r8
 8007186:	464b      	mov	r3, r9
 8007188:	1891      	adds	r1, r2, r2
 800718a:	63b9      	str	r1, [r7, #56]	; 0x38
 800718c:	415b      	adcs	r3, r3
 800718e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007190:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007194:	4641      	mov	r1, r8
 8007196:	1851      	adds	r1, r2, r1
 8007198:	6339      	str	r1, [r7, #48]	; 0x30
 800719a:	4649      	mov	r1, r9
 800719c:	414b      	adcs	r3, r1
 800719e:	637b      	str	r3, [r7, #52]	; 0x34
 80071a0:	f04f 0200 	mov.w	r2, #0
 80071a4:	f04f 0300 	mov.w	r3, #0
 80071a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80071ac:	4659      	mov	r1, fp
 80071ae:	00cb      	lsls	r3, r1, #3
 80071b0:	4651      	mov	r1, sl
 80071b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071b6:	4651      	mov	r1, sl
 80071b8:	00ca      	lsls	r2, r1, #3
 80071ba:	4610      	mov	r0, r2
 80071bc:	4619      	mov	r1, r3
 80071be:	4603      	mov	r3, r0
 80071c0:	4642      	mov	r2, r8
 80071c2:	189b      	adds	r3, r3, r2
 80071c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071c8:	464b      	mov	r3, r9
 80071ca:	460a      	mov	r2, r1
 80071cc:	eb42 0303 	adc.w	r3, r2, r3
 80071d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80071e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80071e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80071e8:	460b      	mov	r3, r1
 80071ea:	18db      	adds	r3, r3, r3
 80071ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80071ee:	4613      	mov	r3, r2
 80071f0:	eb42 0303 	adc.w	r3, r2, r3
 80071f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80071fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80071fe:	f7f9 f84f 	bl	80002a0 <__aeabi_uldivmod>
 8007202:	4602      	mov	r2, r0
 8007204:	460b      	mov	r3, r1
 8007206:	4b0d      	ldr	r3, [pc, #52]	; (800723c <UART_SetConfig+0x2d4>)
 8007208:	fba3 1302 	umull	r1, r3, r3, r2
 800720c:	095b      	lsrs	r3, r3, #5
 800720e:	2164      	movs	r1, #100	; 0x64
 8007210:	fb01 f303 	mul.w	r3, r1, r3
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	00db      	lsls	r3, r3, #3
 8007218:	3332      	adds	r3, #50	; 0x32
 800721a:	4a08      	ldr	r2, [pc, #32]	; (800723c <UART_SetConfig+0x2d4>)
 800721c:	fba2 2303 	umull	r2, r3, r2, r3
 8007220:	095b      	lsrs	r3, r3, #5
 8007222:	f003 0207 	and.w	r2, r3, #7
 8007226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4422      	add	r2, r4
 800722e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007230:	e105      	b.n	800743e <UART_SetConfig+0x4d6>
 8007232:	bf00      	nop
 8007234:	40011000 	.word	0x40011000
 8007238:	40011400 	.word	0x40011400
 800723c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007240:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007244:	2200      	movs	r2, #0
 8007246:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800724a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800724e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007252:	4642      	mov	r2, r8
 8007254:	464b      	mov	r3, r9
 8007256:	1891      	adds	r1, r2, r2
 8007258:	6239      	str	r1, [r7, #32]
 800725a:	415b      	adcs	r3, r3
 800725c:	627b      	str	r3, [r7, #36]	; 0x24
 800725e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007262:	4641      	mov	r1, r8
 8007264:	1854      	adds	r4, r2, r1
 8007266:	4649      	mov	r1, r9
 8007268:	eb43 0501 	adc.w	r5, r3, r1
 800726c:	f04f 0200 	mov.w	r2, #0
 8007270:	f04f 0300 	mov.w	r3, #0
 8007274:	00eb      	lsls	r3, r5, #3
 8007276:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800727a:	00e2      	lsls	r2, r4, #3
 800727c:	4614      	mov	r4, r2
 800727e:	461d      	mov	r5, r3
 8007280:	4643      	mov	r3, r8
 8007282:	18e3      	adds	r3, r4, r3
 8007284:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007288:	464b      	mov	r3, r9
 800728a:	eb45 0303 	adc.w	r3, r5, r3
 800728e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800729e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80072a2:	f04f 0200 	mov.w	r2, #0
 80072a6:	f04f 0300 	mov.w	r3, #0
 80072aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80072ae:	4629      	mov	r1, r5
 80072b0:	008b      	lsls	r3, r1, #2
 80072b2:	4621      	mov	r1, r4
 80072b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072b8:	4621      	mov	r1, r4
 80072ba:	008a      	lsls	r2, r1, #2
 80072bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80072c0:	f7f8 ffee 	bl	80002a0 <__aeabi_uldivmod>
 80072c4:	4602      	mov	r2, r0
 80072c6:	460b      	mov	r3, r1
 80072c8:	4b60      	ldr	r3, [pc, #384]	; (800744c <UART_SetConfig+0x4e4>)
 80072ca:	fba3 2302 	umull	r2, r3, r3, r2
 80072ce:	095b      	lsrs	r3, r3, #5
 80072d0:	011c      	lsls	r4, r3, #4
 80072d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072d6:	2200      	movs	r2, #0
 80072d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80072dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80072e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80072e4:	4642      	mov	r2, r8
 80072e6:	464b      	mov	r3, r9
 80072e8:	1891      	adds	r1, r2, r2
 80072ea:	61b9      	str	r1, [r7, #24]
 80072ec:	415b      	adcs	r3, r3
 80072ee:	61fb      	str	r3, [r7, #28]
 80072f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072f4:	4641      	mov	r1, r8
 80072f6:	1851      	adds	r1, r2, r1
 80072f8:	6139      	str	r1, [r7, #16]
 80072fa:	4649      	mov	r1, r9
 80072fc:	414b      	adcs	r3, r1
 80072fe:	617b      	str	r3, [r7, #20]
 8007300:	f04f 0200 	mov.w	r2, #0
 8007304:	f04f 0300 	mov.w	r3, #0
 8007308:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800730c:	4659      	mov	r1, fp
 800730e:	00cb      	lsls	r3, r1, #3
 8007310:	4651      	mov	r1, sl
 8007312:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007316:	4651      	mov	r1, sl
 8007318:	00ca      	lsls	r2, r1, #3
 800731a:	4610      	mov	r0, r2
 800731c:	4619      	mov	r1, r3
 800731e:	4603      	mov	r3, r0
 8007320:	4642      	mov	r2, r8
 8007322:	189b      	adds	r3, r3, r2
 8007324:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007328:	464b      	mov	r3, r9
 800732a:	460a      	mov	r2, r1
 800732c:	eb42 0303 	adc.w	r3, r2, r3
 8007330:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	67bb      	str	r3, [r7, #120]	; 0x78
 800733e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007340:	f04f 0200 	mov.w	r2, #0
 8007344:	f04f 0300 	mov.w	r3, #0
 8007348:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800734c:	4649      	mov	r1, r9
 800734e:	008b      	lsls	r3, r1, #2
 8007350:	4641      	mov	r1, r8
 8007352:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007356:	4641      	mov	r1, r8
 8007358:	008a      	lsls	r2, r1, #2
 800735a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800735e:	f7f8 ff9f 	bl	80002a0 <__aeabi_uldivmod>
 8007362:	4602      	mov	r2, r0
 8007364:	460b      	mov	r3, r1
 8007366:	4b39      	ldr	r3, [pc, #228]	; (800744c <UART_SetConfig+0x4e4>)
 8007368:	fba3 1302 	umull	r1, r3, r3, r2
 800736c:	095b      	lsrs	r3, r3, #5
 800736e:	2164      	movs	r1, #100	; 0x64
 8007370:	fb01 f303 	mul.w	r3, r1, r3
 8007374:	1ad3      	subs	r3, r2, r3
 8007376:	011b      	lsls	r3, r3, #4
 8007378:	3332      	adds	r3, #50	; 0x32
 800737a:	4a34      	ldr	r2, [pc, #208]	; (800744c <UART_SetConfig+0x4e4>)
 800737c:	fba2 2303 	umull	r2, r3, r2, r3
 8007380:	095b      	lsrs	r3, r3, #5
 8007382:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007386:	441c      	add	r4, r3
 8007388:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800738c:	2200      	movs	r2, #0
 800738e:	673b      	str	r3, [r7, #112]	; 0x70
 8007390:	677a      	str	r2, [r7, #116]	; 0x74
 8007392:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007396:	4642      	mov	r2, r8
 8007398:	464b      	mov	r3, r9
 800739a:	1891      	adds	r1, r2, r2
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	415b      	adcs	r3, r3
 80073a0:	60fb      	str	r3, [r7, #12]
 80073a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073a6:	4641      	mov	r1, r8
 80073a8:	1851      	adds	r1, r2, r1
 80073aa:	6039      	str	r1, [r7, #0]
 80073ac:	4649      	mov	r1, r9
 80073ae:	414b      	adcs	r3, r1
 80073b0:	607b      	str	r3, [r7, #4]
 80073b2:	f04f 0200 	mov.w	r2, #0
 80073b6:	f04f 0300 	mov.w	r3, #0
 80073ba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80073be:	4659      	mov	r1, fp
 80073c0:	00cb      	lsls	r3, r1, #3
 80073c2:	4651      	mov	r1, sl
 80073c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073c8:	4651      	mov	r1, sl
 80073ca:	00ca      	lsls	r2, r1, #3
 80073cc:	4610      	mov	r0, r2
 80073ce:	4619      	mov	r1, r3
 80073d0:	4603      	mov	r3, r0
 80073d2:	4642      	mov	r2, r8
 80073d4:	189b      	adds	r3, r3, r2
 80073d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80073d8:	464b      	mov	r3, r9
 80073da:	460a      	mov	r2, r1
 80073dc:	eb42 0303 	adc.w	r3, r2, r3
 80073e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	663b      	str	r3, [r7, #96]	; 0x60
 80073ec:	667a      	str	r2, [r7, #100]	; 0x64
 80073ee:	f04f 0200 	mov.w	r2, #0
 80073f2:	f04f 0300 	mov.w	r3, #0
 80073f6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80073fa:	4649      	mov	r1, r9
 80073fc:	008b      	lsls	r3, r1, #2
 80073fe:	4641      	mov	r1, r8
 8007400:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007404:	4641      	mov	r1, r8
 8007406:	008a      	lsls	r2, r1, #2
 8007408:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800740c:	f7f8 ff48 	bl	80002a0 <__aeabi_uldivmod>
 8007410:	4602      	mov	r2, r0
 8007412:	460b      	mov	r3, r1
 8007414:	4b0d      	ldr	r3, [pc, #52]	; (800744c <UART_SetConfig+0x4e4>)
 8007416:	fba3 1302 	umull	r1, r3, r3, r2
 800741a:	095b      	lsrs	r3, r3, #5
 800741c:	2164      	movs	r1, #100	; 0x64
 800741e:	fb01 f303 	mul.w	r3, r1, r3
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	011b      	lsls	r3, r3, #4
 8007426:	3332      	adds	r3, #50	; 0x32
 8007428:	4a08      	ldr	r2, [pc, #32]	; (800744c <UART_SetConfig+0x4e4>)
 800742a:	fba2 2303 	umull	r2, r3, r2, r3
 800742e:	095b      	lsrs	r3, r3, #5
 8007430:	f003 020f 	and.w	r2, r3, #15
 8007434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4422      	add	r2, r4
 800743c:	609a      	str	r2, [r3, #8]
}
 800743e:	bf00      	nop
 8007440:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007444:	46bd      	mov	sp, r7
 8007446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800744a:	bf00      	nop
 800744c:	51eb851f 	.word	0x51eb851f

08007450 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007450:	b084      	sub	sp, #16
 8007452:	b580      	push	{r7, lr}
 8007454:	b084      	sub	sp, #16
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
 800745a:	f107 001c 	add.w	r0, r7, #28
 800745e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007464:	2b01      	cmp	r3, #1
 8007466:	d122      	bne.n	80074ae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800747c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007492:	2b01      	cmp	r3, #1
 8007494:	d105      	bne.n	80074a2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f9c0 	bl	8007828 <USB_CoreReset>
 80074a8:	4603      	mov	r3, r0
 80074aa:	73fb      	strb	r3, [r7, #15]
 80074ac:	e01a      	b.n	80074e4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f9b4 	bl	8007828 <USB_CoreReset>
 80074c0:	4603      	mov	r3, r0
 80074c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80074c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d106      	bne.n	80074d8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	639a      	str	r2, [r3, #56]	; 0x38
 80074d6:	e005      	b.n	80074e4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80074e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d10b      	bne.n	8007502 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	f043 0206 	orr.w	r2, r3, #6
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	f043 0220 	orr.w	r2, r3, #32
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007502:	7bfb      	ldrb	r3, [r7, #15]
}
 8007504:	4618      	mov	r0, r3
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800750e:	b004      	add	sp, #16
 8007510:	4770      	bx	lr

08007512 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007512:	b480      	push	{r7}
 8007514:	b083      	sub	sp, #12
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	f043 0201 	orr.w	r2, r3, #1
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f023 0201 	bic.w	r2, r3, #1
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b084      	sub	sp, #16
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	460b      	mov	r3, r1
 8007560:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007562:	2300      	movs	r3, #0
 8007564:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007572:	78fb      	ldrb	r3, [r7, #3]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d115      	bne.n	80075a4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007584:	2001      	movs	r0, #1
 8007586:	f7fa ff61 	bl	800244c <HAL_Delay>
      ms++;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	3301      	adds	r3, #1
 800758e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 f93a 	bl	800780a <USB_GetMode>
 8007596:	4603      	mov	r3, r0
 8007598:	2b01      	cmp	r3, #1
 800759a:	d01e      	beq.n	80075da <USB_SetCurrentMode+0x84>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2b31      	cmp	r3, #49	; 0x31
 80075a0:	d9f0      	bls.n	8007584 <USB_SetCurrentMode+0x2e>
 80075a2:	e01a      	b.n	80075da <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80075a4:	78fb      	ldrb	r3, [r7, #3]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d115      	bne.n	80075d6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80075b6:	2001      	movs	r0, #1
 80075b8:	f7fa ff48 	bl	800244c <HAL_Delay>
      ms++;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	3301      	adds	r3, #1
 80075c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f921 	bl	800780a <USB_GetMode>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d005      	beq.n	80075da <USB_SetCurrentMode+0x84>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2b31      	cmp	r3, #49	; 0x31
 80075d2:	d9f0      	bls.n	80075b6 <USB_SetCurrentMode+0x60>
 80075d4:	e001      	b.n	80075da <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e005      	b.n	80075e6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2b32      	cmp	r3, #50	; 0x32
 80075de:	d101      	bne.n	80075e4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	e000      	b.n	80075e6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
	...

080075f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80075fa:	2300      	movs	r3, #0
 80075fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	3301      	adds	r3, #1
 8007602:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	4a13      	ldr	r2, [pc, #76]	; (8007654 <USB_FlushTxFifo+0x64>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d901      	bls.n	8007610 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800760c:	2303      	movs	r3, #3
 800760e:	e01b      	b.n	8007648 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	2b00      	cmp	r3, #0
 8007616:	daf2      	bge.n	80075fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007618:	2300      	movs	r3, #0
 800761a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	019b      	lsls	r3, r3, #6
 8007620:	f043 0220 	orr.w	r2, r3, #32
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	3301      	adds	r3, #1
 800762c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	4a08      	ldr	r2, [pc, #32]	; (8007654 <USB_FlushTxFifo+0x64>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d901      	bls.n	800763a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e006      	b.n	8007648 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	f003 0320 	and.w	r3, r3, #32
 8007642:	2b20      	cmp	r3, #32
 8007644:	d0f0      	beq.n	8007628 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3714      	adds	r7, #20
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr
 8007654:	00030d40 	.word	0x00030d40

08007658 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007660:	2300      	movs	r3, #0
 8007662:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	3301      	adds	r3, #1
 8007668:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	4a11      	ldr	r2, [pc, #68]	; (80076b4 <USB_FlushRxFifo+0x5c>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d901      	bls.n	8007676 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e018      	b.n	80076a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	2b00      	cmp	r3, #0
 800767c:	daf2      	bge.n	8007664 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800767e:	2300      	movs	r3, #0
 8007680:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2210      	movs	r2, #16
 8007686:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	3301      	adds	r3, #1
 800768c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	4a08      	ldr	r2, [pc, #32]	; (80076b4 <USB_FlushRxFifo+0x5c>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d901      	bls.n	800769a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e006      	b.n	80076a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	f003 0310 	and.w	r3, r3, #16
 80076a2:	2b10      	cmp	r3, #16
 80076a4:	d0f0      	beq.n	8007688 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3714      	adds	r7, #20
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr
 80076b4:	00030d40 	.word	0x00030d40

080076b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b089      	sub	sp, #36	; 0x24
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	4611      	mov	r1, r2
 80076c4:	461a      	mov	r2, r3
 80076c6:	460b      	mov	r3, r1
 80076c8:	71fb      	strb	r3, [r7, #7]
 80076ca:	4613      	mov	r3, r2
 80076cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80076d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d123      	bne.n	8007726 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80076de:	88bb      	ldrh	r3, [r7, #4]
 80076e0:	3303      	adds	r3, #3
 80076e2:	089b      	lsrs	r3, r3, #2
 80076e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80076e6:	2300      	movs	r3, #0
 80076e8:	61bb      	str	r3, [r7, #24]
 80076ea:	e018      	b.n	800771e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80076ec:	79fb      	ldrb	r3, [r7, #7]
 80076ee:	031a      	lsls	r2, r3, #12
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	4413      	add	r3, r2
 80076f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076f8:	461a      	mov	r2, r3
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	3301      	adds	r3, #1
 8007704:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	3301      	adds	r3, #1
 800770a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	3301      	adds	r3, #1
 8007710:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	3301      	adds	r3, #1
 8007716:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	3301      	adds	r3, #1
 800771c:	61bb      	str	r3, [r7, #24]
 800771e:	69ba      	ldr	r2, [r7, #24]
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	429a      	cmp	r2, r3
 8007724:	d3e2      	bcc.n	80076ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3724      	adds	r7, #36	; 0x24
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007734:	b480      	push	{r7}
 8007736:	b08b      	sub	sp, #44	; 0x2c
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	4613      	mov	r3, r2
 8007740:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800774a:	88fb      	ldrh	r3, [r7, #6]
 800774c:	089b      	lsrs	r3, r3, #2
 800774e:	b29b      	uxth	r3, r3
 8007750:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007752:	88fb      	ldrh	r3, [r7, #6]
 8007754:	f003 0303 	and.w	r3, r3, #3
 8007758:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800775a:	2300      	movs	r3, #0
 800775c:	623b      	str	r3, [r7, #32]
 800775e:	e014      	b.n	800778a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776a:	601a      	str	r2, [r3, #0]
    pDest++;
 800776c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776e:	3301      	adds	r3, #1
 8007770:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007774:	3301      	adds	r3, #1
 8007776:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777a:	3301      	adds	r3, #1
 800777c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800777e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007780:	3301      	adds	r3, #1
 8007782:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007784:	6a3b      	ldr	r3, [r7, #32]
 8007786:	3301      	adds	r3, #1
 8007788:	623b      	str	r3, [r7, #32]
 800778a:	6a3a      	ldr	r2, [r7, #32]
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	429a      	cmp	r2, r3
 8007790:	d3e6      	bcc.n	8007760 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007792:	8bfb      	ldrh	r3, [r7, #30]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d01e      	beq.n	80077d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007798:	2300      	movs	r3, #0
 800779a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077a2:	461a      	mov	r2, r3
 80077a4:	f107 0310 	add.w	r3, r7, #16
 80077a8:	6812      	ldr	r2, [r2, #0]
 80077aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80077ac:	693a      	ldr	r2, [r7, #16]
 80077ae:	6a3b      	ldr	r3, [r7, #32]
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	00db      	lsls	r3, r3, #3
 80077b4:	fa22 f303 	lsr.w	r3, r2, r3
 80077b8:	b2da      	uxtb	r2, r3
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	701a      	strb	r2, [r3, #0]
      i++;
 80077be:	6a3b      	ldr	r3, [r7, #32]
 80077c0:	3301      	adds	r3, #1
 80077c2:	623b      	str	r3, [r7, #32]
      pDest++;
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	3301      	adds	r3, #1
 80077c8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80077ca:	8bfb      	ldrh	r3, [r7, #30]
 80077cc:	3b01      	subs	r3, #1
 80077ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80077d0:	8bfb      	ldrh	r3, [r7, #30]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1ea      	bne.n	80077ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80077d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80077d8:	4618      	mov	r0, r3
 80077da:	372c      	adds	r7, #44	; 0x2c
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	4013      	ands	r3, r2
 80077fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80077fc:	68fb      	ldr	r3, [r7, #12]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3714      	adds	r7, #20
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800780a:	b480      	push	{r7}
 800780c:	b083      	sub	sp, #12
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	f003 0301 	and.w	r3, r3, #1
}
 800781a:	4618      	mov	r0, r3
 800781c:	370c      	adds	r7, #12
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr
	...

08007828 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007830:	2300      	movs	r3, #0
 8007832:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	3301      	adds	r3, #1
 8007838:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	4a13      	ldr	r2, [pc, #76]	; (800788c <USB_CoreReset+0x64>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d901      	bls.n	8007846 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	e01b      	b.n	800787e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	2b00      	cmp	r3, #0
 800784c:	daf2      	bge.n	8007834 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800784e:	2300      	movs	r3, #0
 8007850:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	f043 0201 	orr.w	r2, r3, #1
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	3301      	adds	r3, #1
 8007862:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	4a09      	ldr	r2, [pc, #36]	; (800788c <USB_CoreReset+0x64>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d901      	bls.n	8007870 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800786c:	2303      	movs	r3, #3
 800786e:	e006      	b.n	800787e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	f003 0301 	and.w	r3, r3, #1
 8007878:	2b01      	cmp	r3, #1
 800787a:	d0f0      	beq.n	800785e <USB_CoreReset+0x36>

  return HAL_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	3714      	adds	r7, #20
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	00030d40 	.word	0x00030d40

08007890 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007890:	b084      	sub	sp, #16
 8007892:	b580      	push	{r7, lr}
 8007894:	b086      	sub	sp, #24
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
 800789a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800789e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80078a2:	2300      	movs	r3, #0
 80078a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078b0:	461a      	mov	r2, r3
 80078b2:	2300      	movs	r3, #0
 80078b4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d018      	beq.n	8007918 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80078e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d10a      	bne.n	8007902 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80078fa:	f043 0304 	orr.w	r3, r3, #4
 80078fe:	6013      	str	r3, [r2, #0]
 8007900:	e014      	b.n	800792c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007910:	f023 0304 	bic.w	r3, r3, #4
 8007914:	6013      	str	r3, [r2, #0]
 8007916:	e009      	b.n	800792c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68fa      	ldr	r2, [r7, #12]
 8007922:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007926:	f023 0304 	bic.w	r3, r3, #4
 800792a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800792c:	2110      	movs	r1, #16
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7ff fe5e 	bl	80075f0 <USB_FlushTxFifo>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d001      	beq.n	800793e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f7ff fe8a 	bl	8007658 <USB_FlushRxFifo>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d001      	beq.n	800794e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800794e:	2300      	movs	r3, #0
 8007950:	613b      	str	r3, [r7, #16]
 8007952:	e015      	b.n	8007980 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	015a      	lsls	r2, r3, #5
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	4413      	add	r3, r2
 800795c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007960:	461a      	mov	r2, r3
 8007962:	f04f 33ff 	mov.w	r3, #4294967295
 8007966:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	015a      	lsls	r2, r3, #5
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	4413      	add	r3, r2
 8007970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007974:	461a      	mov	r2, r3
 8007976:	2300      	movs	r3, #0
 8007978:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	3301      	adds	r3, #1
 800797e:	613b      	str	r3, [r7, #16]
 8007980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007982:	693a      	ldr	r2, [r7, #16]
 8007984:	429a      	cmp	r2, r3
 8007986:	d3e5      	bcc.n	8007954 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f04f 32ff 	mov.w	r2, #4294967295
 8007994:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800799a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00b      	beq.n	80079ba <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079a8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a13      	ldr	r2, [pc, #76]	; (80079fc <USB_HostInit+0x16c>)
 80079ae:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a13      	ldr	r2, [pc, #76]	; (8007a00 <USB_HostInit+0x170>)
 80079b4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80079b8:	e009      	b.n	80079ce <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2280      	movs	r2, #128	; 0x80
 80079be:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a10      	ldr	r2, [pc, #64]	; (8007a04 <USB_HostInit+0x174>)
 80079c4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a0f      	ldr	r2, [pc, #60]	; (8007a08 <USB_HostInit+0x178>)
 80079ca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80079ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d105      	bne.n	80079e0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	699b      	ldr	r3, [r3, #24]
 80079d8:	f043 0210 	orr.w	r2, r3, #16
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	699a      	ldr	r2, [r3, #24]
 80079e4:	4b09      	ldr	r3, [pc, #36]	; (8007a0c <USB_HostInit+0x17c>)
 80079e6:	4313      	orrs	r3, r2
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80079ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3718      	adds	r7, #24
 80079f2:	46bd      	mov	sp, r7
 80079f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079f8:	b004      	add	sp, #16
 80079fa:	4770      	bx	lr
 80079fc:	01000200 	.word	0x01000200
 8007a00:	00e00300 	.word	0x00e00300
 8007a04:	00600080 	.word	0x00600080
 8007a08:	004000e0 	.word	0x004000e0
 8007a0c:	a3200008 	.word	0xa3200008

08007a10 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	460b      	mov	r3, r1
 8007a1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007a2e:	f023 0303 	bic.w	r3, r3, #3
 8007a32:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	78fb      	ldrb	r3, [r7, #3]
 8007a3e:	f003 0303 	and.w	r3, r3, #3
 8007a42:	68f9      	ldr	r1, [r7, #12]
 8007a44:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007a4c:	78fb      	ldrb	r3, [r7, #3]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d107      	bne.n	8007a62 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a58:	461a      	mov	r2, r3
 8007a5a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007a5e:	6053      	str	r3, [r2, #4]
 8007a60:	e009      	b.n	8007a76 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007a62:	78fb      	ldrb	r3, [r7, #3]
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d106      	bne.n	8007a76 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a6e:	461a      	mov	r2, r3
 8007a70:	f241 7370 	movw	r3, #6000	; 0x1770
 8007a74:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3714      	adds	r7, #20
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007a90:	2300      	movs	r3, #0
 8007a92:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007aa4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ab2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007ab4:	2064      	movs	r0, #100	; 0x64
 8007ab6:	f7fa fcc9 	bl	800244c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007ac2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ac6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007ac8:	200a      	movs	r0, #10
 8007aca:	f7fa fcbf 	bl	800244c <HAL_Delay>

  return HAL_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007afc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d109      	bne.n	8007b1c <USB_DriveVbus+0x44>
 8007b08:	78fb      	ldrb	r3, [r7, #3]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d106      	bne.n	8007b1c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007b16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007b1a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b26:	d109      	bne.n	8007b3c <USB_DriveVbus+0x64>
 8007b28:	78fb      	ldrb	r3, [r7, #3]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d106      	bne.n	8007b3c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007b36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b3a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3714      	adds	r7, #20
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr

08007b4a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007b4a:	b480      	push	{r7}
 8007b4c:	b085      	sub	sp, #20
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007b56:	2300      	movs	r3, #0
 8007b58:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	0c5b      	lsrs	r3, r3, #17
 8007b68:	f003 0303 	and.w	r3, r3, #3
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3714      	adds	r7, #20
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	b29b      	uxth	r3, r3
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3714      	adds	r7, #20
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
	...

08007b9c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b088      	sub	sp, #32
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	4608      	mov	r0, r1
 8007ba6:	4611      	mov	r1, r2
 8007ba8:	461a      	mov	r2, r3
 8007baa:	4603      	mov	r3, r0
 8007bac:	70fb      	strb	r3, [r7, #3]
 8007bae:	460b      	mov	r3, r1
 8007bb0:	70bb      	strb	r3, [r7, #2]
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007bbe:	78fb      	ldrb	r3, [r7, #3]
 8007bc0:	015a      	lsls	r2, r3, #5
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bca:	461a      	mov	r2, r3
 8007bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8007bd0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007bd2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007bd6:	2b03      	cmp	r3, #3
 8007bd8:	d87e      	bhi.n	8007cd8 <USB_HC_Init+0x13c>
 8007bda:	a201      	add	r2, pc, #4	; (adr r2, 8007be0 <USB_HC_Init+0x44>)
 8007bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be0:	08007bf1 	.word	0x08007bf1
 8007be4:	08007c9b 	.word	0x08007c9b
 8007be8:	08007bf1 	.word	0x08007bf1
 8007bec:	08007c5d 	.word	0x08007c5d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007bf0:	78fb      	ldrb	r3, [r7, #3]
 8007bf2:	015a      	lsls	r2, r3, #5
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	f240 439d 	movw	r3, #1181	; 0x49d
 8007c02:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007c04:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	da10      	bge.n	8007c2e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007c0c:	78fb      	ldrb	r3, [r7, #3]
 8007c0e:	015a      	lsls	r2, r3, #5
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	4413      	add	r3, r2
 8007c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	78fa      	ldrb	r2, [r7, #3]
 8007c1c:	0151      	lsls	r1, r2, #5
 8007c1e:	693a      	ldr	r2, [r7, #16]
 8007c20:	440a      	add	r2, r1
 8007c22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c2a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007c2c:	e057      	b.n	8007cde <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d051      	beq.n	8007cde <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007c3a:	78fb      	ldrb	r3, [r7, #3]
 8007c3c:	015a      	lsls	r2, r3, #5
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	4413      	add	r3, r2
 8007c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	78fa      	ldrb	r2, [r7, #3]
 8007c4a:	0151      	lsls	r1, r2, #5
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	440a      	add	r2, r1
 8007c50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c54:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007c58:	60d3      	str	r3, [r2, #12]
      break;
 8007c5a:	e040      	b.n	8007cde <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007c5c:	78fb      	ldrb	r3, [r7, #3]
 8007c5e:	015a      	lsls	r2, r3, #5
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	4413      	add	r3, r2
 8007c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c68:	461a      	mov	r2, r3
 8007c6a:	f240 639d 	movw	r3, #1693	; 0x69d
 8007c6e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007c70:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	da34      	bge.n	8007ce2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007c78:	78fb      	ldrb	r3, [r7, #3]
 8007c7a:	015a      	lsls	r2, r3, #5
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	4413      	add	r3, r2
 8007c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	78fa      	ldrb	r2, [r7, #3]
 8007c88:	0151      	lsls	r1, r2, #5
 8007c8a:	693a      	ldr	r2, [r7, #16]
 8007c8c:	440a      	add	r2, r1
 8007c8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c96:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007c98:	e023      	b.n	8007ce2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007c9a:	78fb      	ldrb	r3, [r7, #3]
 8007c9c:	015a      	lsls	r2, r3, #5
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	f240 2325 	movw	r3, #549	; 0x225
 8007cac:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007cae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	da17      	bge.n	8007ce6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007cb6:	78fb      	ldrb	r3, [r7, #3]
 8007cb8:	015a      	lsls	r2, r3, #5
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	78fa      	ldrb	r2, [r7, #3]
 8007cc6:	0151      	lsls	r1, r2, #5
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	440a      	add	r2, r1
 8007ccc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cd0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007cd4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007cd6:	e006      	b.n	8007ce6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	77fb      	strb	r3, [r7, #31]
      break;
 8007cdc:	e004      	b.n	8007ce8 <USB_HC_Init+0x14c>
      break;
 8007cde:	bf00      	nop
 8007ce0:	e002      	b.n	8007ce8 <USB_HC_Init+0x14c>
      break;
 8007ce2:	bf00      	nop
 8007ce4:	e000      	b.n	8007ce8 <USB_HC_Init+0x14c>
      break;
 8007ce6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007ce8:	78fb      	ldrb	r3, [r7, #3]
 8007cea:	015a      	lsls	r2, r3, #5
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	4413      	add	r3, r2
 8007cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	78fa      	ldrb	r2, [r7, #3]
 8007cf8:	0151      	lsls	r1, r2, #5
 8007cfa:	693a      	ldr	r2, [r7, #16]
 8007cfc:	440a      	add	r2, r1
 8007cfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d02:	f043 0302 	orr.w	r3, r3, #2
 8007d06:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d0e:	699a      	ldr	r2, [r3, #24]
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	f003 030f 	and.w	r3, r3, #15
 8007d16:	2101      	movs	r1, #1
 8007d18:	fa01 f303 	lsl.w	r3, r1, r3
 8007d1c:	6939      	ldr	r1, [r7, #16]
 8007d1e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007d22:	4313      	orrs	r3, r2
 8007d24:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007d32:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	da03      	bge.n	8007d42 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d3e:	61bb      	str	r3, [r7, #24]
 8007d40:	e001      	b.n	8007d46 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007d42:	2300      	movs	r3, #0
 8007d44:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f7ff feff 	bl	8007b4a <USB_GetHostSpeed>
 8007d4c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007d4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d106      	bne.n	8007d64 <USB_HC_Init+0x1c8>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d003      	beq.n	8007d64 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007d5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007d60:	617b      	str	r3, [r7, #20]
 8007d62:	e001      	b.n	8007d68 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007d64:	2300      	movs	r3, #0
 8007d66:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d68:	787b      	ldrb	r3, [r7, #1]
 8007d6a:	059b      	lsls	r3, r3, #22
 8007d6c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007d70:	78bb      	ldrb	r3, [r7, #2]
 8007d72:	02db      	lsls	r3, r3, #11
 8007d74:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d78:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007d7a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007d7e:	049b      	lsls	r3, r3, #18
 8007d80:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007d84:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007d86:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007d88:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007d8c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d92:	78fb      	ldrb	r3, [r7, #3]
 8007d94:	0159      	lsls	r1, r3, #5
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	440b      	add	r3, r1
 8007d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d9e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007da4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007da6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007daa:	2b03      	cmp	r3, #3
 8007dac:	d003      	beq.n	8007db6 <USB_HC_Init+0x21a>
 8007dae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d10f      	bne.n	8007dd6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007db6:	78fb      	ldrb	r3, [r7, #3]
 8007db8:	015a      	lsls	r2, r3, #5
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	78fa      	ldrb	r2, [r7, #3]
 8007dc6:	0151      	lsls	r1, r2, #5
 8007dc8:	693a      	ldr	r2, [r7, #16]
 8007dca:	440a      	add	r2, r1
 8007dcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007dd4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007dd6:	7ffb      	ldrb	r3, [r7, #31]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3720      	adds	r7, #32
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b08c      	sub	sp, #48	; 0x30
 8007de4:	af02      	add	r7, sp, #8
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	4613      	mov	r3, r2
 8007dec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	785b      	ldrb	r3, [r3, #1]
 8007df6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007df8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007dfc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d02d      	beq.n	8007e66 <USB_HC_StartXfer+0x86>
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	791b      	ldrb	r3, [r3, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d129      	bne.n	8007e66 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007e12:	79fb      	ldrb	r3, [r7, #7]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d117      	bne.n	8007e48 <USB_HC_StartXfer+0x68>
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	79db      	ldrb	r3, [r3, #7]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d003      	beq.n	8007e28 <USB_HC_StartXfer+0x48>
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	79db      	ldrb	r3, [r3, #7]
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	d10f      	bne.n	8007e48 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	015a      	lsls	r2, r3, #5
 8007e2c:	6a3b      	ldr	r3, [r7, #32]
 8007e2e:	4413      	add	r3, r2
 8007e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	69fa      	ldr	r2, [r7, #28]
 8007e38:	0151      	lsls	r1, r2, #5
 8007e3a:	6a3a      	ldr	r2, [r7, #32]
 8007e3c:	440a      	add	r2, r1
 8007e3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e46:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007e48:	79fb      	ldrb	r3, [r7, #7]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d10b      	bne.n	8007e66 <USB_HC_StartXfer+0x86>
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	795b      	ldrb	r3, [r3, #5]
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d107      	bne.n	8007e66 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	785b      	ldrb	r3, [r3, #1]
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 fa0f 	bl	8008280 <USB_DoPing>
      return HAL_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	e0f8      	b.n	8008058 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	695b      	ldr	r3, [r3, #20]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d018      	beq.n	8007ea0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	695b      	ldr	r3, [r3, #20]
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	8912      	ldrh	r2, [r2, #8]
 8007e76:	4413      	add	r3, r2
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	8912      	ldrh	r2, [r2, #8]
 8007e7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e82:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007e84:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007e86:	8b7b      	ldrh	r3, [r7, #26]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d90b      	bls.n	8007ea4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007e8c:	8b7b      	ldrh	r3, [r7, #26]
 8007e8e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007e90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	8912      	ldrh	r2, [r2, #8]
 8007e96:	fb03 f202 	mul.w	r2, r3, r2
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	611a      	str	r2, [r3, #16]
 8007e9e:	e001      	b.n	8007ea4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	78db      	ldrb	r3, [r3, #3]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d007      	beq.n	8007ebc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007eac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007eae:	68ba      	ldr	r2, [r7, #8]
 8007eb0:	8912      	ldrh	r2, [r2, #8]
 8007eb2:	fb03 f202 	mul.w	r2, r3, r2
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	611a      	str	r2, [r3, #16]
 8007eba:	e003      	b.n	8007ec4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	695a      	ldr	r2, [r3, #20]
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007ecc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007ece:	04d9      	lsls	r1, r3, #19
 8007ed0:	4b63      	ldr	r3, [pc, #396]	; (8008060 <USB_HC_StartXfer+0x280>)
 8007ed2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ed4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	7a9b      	ldrb	r3, [r3, #10]
 8007eda:	075b      	lsls	r3, r3, #29
 8007edc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ee0:	69f9      	ldr	r1, [r7, #28]
 8007ee2:	0148      	lsls	r0, r1, #5
 8007ee4:	6a39      	ldr	r1, [r7, #32]
 8007ee6:	4401      	add	r1, r0
 8007ee8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007eec:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007eee:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007ef0:	79fb      	ldrb	r3, [r7, #7]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d009      	beq.n	8007f0a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	68d9      	ldr	r1, [r3, #12]
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	015a      	lsls	r2, r3, #5
 8007efe:	6a3b      	ldr	r3, [r7, #32]
 8007f00:	4413      	add	r3, r2
 8007f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f06:	460a      	mov	r2, r1
 8007f08:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007f0a:	6a3b      	ldr	r3, [r7, #32]
 8007f0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	bf0c      	ite	eq
 8007f1a:	2301      	moveq	r3, #1
 8007f1c:	2300      	movne	r3, #0
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	015a      	lsls	r2, r3, #5
 8007f26:	6a3b      	ldr	r3, [r7, #32]
 8007f28:	4413      	add	r3, r2
 8007f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	69fa      	ldr	r2, [r7, #28]
 8007f32:	0151      	lsls	r1, r2, #5
 8007f34:	6a3a      	ldr	r2, [r7, #32]
 8007f36:	440a      	add	r2, r1
 8007f38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f3c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007f40:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	015a      	lsls	r2, r3, #5
 8007f46:	6a3b      	ldr	r3, [r7, #32]
 8007f48:	4413      	add	r3, r2
 8007f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	7e7b      	ldrb	r3, [r7, #25]
 8007f52:	075b      	lsls	r3, r3, #29
 8007f54:	69f9      	ldr	r1, [r7, #28]
 8007f56:	0148      	lsls	r0, r1, #5
 8007f58:	6a39      	ldr	r1, [r7, #32]
 8007f5a:	4401      	add	r1, r0
 8007f5c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007f60:	4313      	orrs	r3, r2
 8007f62:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	015a      	lsls	r2, r3, #5
 8007f68:	6a3b      	ldr	r3, [r7, #32]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007f7a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	78db      	ldrb	r3, [r3, #3]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d004      	beq.n	8007f8e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f8a:	613b      	str	r3, [r7, #16]
 8007f8c:	e003      	b.n	8007f96 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f94:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f9c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	015a      	lsls	r2, r3, #5
 8007fa2:	6a3b      	ldr	r3, [r7, #32]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007faa:	461a      	mov	r2, r3
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007fb0:	79fb      	ldrb	r3, [r7, #7]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d001      	beq.n	8007fba <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	e04e      	b.n	8008058 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	78db      	ldrb	r3, [r3, #3]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d149      	bne.n	8008056 <USB_HC_StartXfer+0x276>
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	695b      	ldr	r3, [r3, #20]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d045      	beq.n	8008056 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	79db      	ldrb	r3, [r3, #7]
 8007fce:	2b03      	cmp	r3, #3
 8007fd0:	d830      	bhi.n	8008034 <USB_HC_StartXfer+0x254>
 8007fd2:	a201      	add	r2, pc, #4	; (adr r2, 8007fd8 <USB_HC_StartXfer+0x1f8>)
 8007fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd8:	08007fe9 	.word	0x08007fe9
 8007fdc:	0800800d 	.word	0x0800800d
 8007fe0:	08007fe9 	.word	0x08007fe9
 8007fe4:	0800800d 	.word	0x0800800d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	695b      	ldr	r3, [r3, #20]
 8007fec:	3303      	adds	r3, #3
 8007fee:	089b      	lsrs	r3, r3, #2
 8007ff0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007ff2:	8afa      	ldrh	r2, [r7, #22]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d91c      	bls.n	8008038 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	f043 0220 	orr.w	r2, r3, #32
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	619a      	str	r2, [r3, #24]
        }
        break;
 800800a:	e015      	b.n	8008038 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	695b      	ldr	r3, [r3, #20]
 8008010:	3303      	adds	r3, #3
 8008012:	089b      	lsrs	r3, r3, #2
 8008014:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008016:	8afa      	ldrh	r2, [r7, #22]
 8008018:	6a3b      	ldr	r3, [r7, #32]
 800801a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	b29b      	uxth	r3, r3
 8008022:	429a      	cmp	r2, r3
 8008024:	d90a      	bls.n	800803c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	619a      	str	r2, [r3, #24]
        }
        break;
 8008032:	e003      	b.n	800803c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008034:	bf00      	nop
 8008036:	e002      	b.n	800803e <USB_HC_StartXfer+0x25e>
        break;
 8008038:	bf00      	nop
 800803a:	e000      	b.n	800803e <USB_HC_StartXfer+0x25e>
        break;
 800803c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	68d9      	ldr	r1, [r3, #12]
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	785a      	ldrb	r2, [r3, #1]
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	695b      	ldr	r3, [r3, #20]
 800804a:	b29b      	uxth	r3, r3
 800804c:	2000      	movs	r0, #0
 800804e:	9000      	str	r0, [sp, #0]
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f7ff fb31 	bl	80076b8 <USB_WritePacket>
  }

  return HAL_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3728      	adds	r7, #40	; 0x28
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	1ff80000 	.word	0x1ff80000

08008064 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008076:	695b      	ldr	r3, [r3, #20]
 8008078:	b29b      	uxth	r3, r3
}
 800807a:	4618      	mov	r0, r3
 800807c:	3714      	adds	r7, #20
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr

08008086 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008086:	b480      	push	{r7}
 8008088:	b089      	sub	sp, #36	; 0x24
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
 800808e:	460b      	mov	r3, r1
 8008090:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008096:	78fb      	ldrb	r3, [r7, #3]
 8008098:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800809a:	2300      	movs	r3, #0
 800809c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	015a      	lsls	r2, r3, #5
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	4413      	add	r3, r2
 80080a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	0c9b      	lsrs	r3, r3, #18
 80080ae:	f003 0303 	and.w	r3, r3, #3
 80080b2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	015a      	lsls	r2, r3, #5
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	4413      	add	r3, r2
 80080bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	0fdb      	lsrs	r3, r3, #31
 80080c4:	f003 0301 	and.w	r3, r3, #1
 80080c8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	f003 0320 	and.w	r3, r3, #32
 80080d2:	2b20      	cmp	r3, #32
 80080d4:	d104      	bne.n	80080e0 <USB_HC_Halt+0x5a>
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d101      	bne.n	80080e0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80080dc:	2300      	movs	r3, #0
 80080de:	e0c8      	b.n	8008272 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d002      	beq.n	80080ec <USB_HC_Halt+0x66>
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d163      	bne.n	80081b4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	015a      	lsls	r2, r3, #5
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	4413      	add	r3, r2
 80080f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	69ba      	ldr	r2, [r7, #24]
 80080fc:	0151      	lsls	r1, r2, #5
 80080fe:	69fa      	ldr	r2, [r7, #28]
 8008100:	440a      	add	r2, r1
 8008102:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008106:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800810a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	f003 0320 	and.w	r3, r3, #32
 8008114:	2b00      	cmp	r3, #0
 8008116:	f040 80ab 	bne.w	8008270 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008122:	2b00      	cmp	r3, #0
 8008124:	d133      	bne.n	800818e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	015a      	lsls	r2, r3, #5
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	4413      	add	r3, r2
 800812e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	69ba      	ldr	r2, [r7, #24]
 8008136:	0151      	lsls	r1, r2, #5
 8008138:	69fa      	ldr	r2, [r7, #28]
 800813a:	440a      	add	r2, r1
 800813c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008140:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008144:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	015a      	lsls	r2, r3, #5
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	4413      	add	r3, r2
 800814e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	69ba      	ldr	r2, [r7, #24]
 8008156:	0151      	lsls	r1, r2, #5
 8008158:	69fa      	ldr	r2, [r7, #28]
 800815a:	440a      	add	r2, r1
 800815c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008164:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	3301      	adds	r3, #1
 800816a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008172:	d81d      	bhi.n	80081b0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	015a      	lsls	r2, r3, #5
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	4413      	add	r3, r2
 800817c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008186:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800818a:	d0ec      	beq.n	8008166 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800818c:	e070      	b.n	8008270 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	015a      	lsls	r2, r3, #5
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	4413      	add	r3, r2
 8008196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	69ba      	ldr	r2, [r7, #24]
 800819e:	0151      	lsls	r1, r2, #5
 80081a0:	69fa      	ldr	r2, [r7, #28]
 80081a2:	440a      	add	r2, r1
 80081a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081ac:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80081ae:	e05f      	b.n	8008270 <USB_HC_Halt+0x1ea>
            break;
 80081b0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80081b2:	e05d      	b.n	8008270 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	015a      	lsls	r2, r3, #5
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	4413      	add	r3, r2
 80081bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	69ba      	ldr	r2, [r7, #24]
 80081c4:	0151      	lsls	r1, r2, #5
 80081c6:	69fa      	ldr	r2, [r7, #28]
 80081c8:	440a      	add	r2, r1
 80081ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081d2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d133      	bne.n	800824c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	015a      	lsls	r2, r3, #5
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	4413      	add	r3, r2
 80081ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	69ba      	ldr	r2, [r7, #24]
 80081f4:	0151      	lsls	r1, r2, #5
 80081f6:	69fa      	ldr	r2, [r7, #28]
 80081f8:	440a      	add	r2, r1
 80081fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008202:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	015a      	lsls	r2, r3, #5
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	4413      	add	r3, r2
 800820c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	69ba      	ldr	r2, [r7, #24]
 8008214:	0151      	lsls	r1, r2, #5
 8008216:	69fa      	ldr	r2, [r7, #28]
 8008218:	440a      	add	r2, r1
 800821a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800821e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008222:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	3301      	adds	r3, #1
 8008228:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008230:	d81d      	bhi.n	800826e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	015a      	lsls	r2, r3, #5
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	4413      	add	r3, r2
 800823a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008244:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008248:	d0ec      	beq.n	8008224 <USB_HC_Halt+0x19e>
 800824a:	e011      	b.n	8008270 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	015a      	lsls	r2, r3, #5
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	4413      	add	r3, r2
 8008254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	69ba      	ldr	r2, [r7, #24]
 800825c:	0151      	lsls	r1, r2, #5
 800825e:	69fa      	ldr	r2, [r7, #28]
 8008260:	440a      	add	r2, r1
 8008262:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008266:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800826a:	6013      	str	r3, [r2, #0]
 800826c:	e000      	b.n	8008270 <USB_HC_Halt+0x1ea>
          break;
 800826e:	bf00      	nop
    }
  }

  return HAL_OK;
 8008270:	2300      	movs	r3, #0
}
 8008272:	4618      	mov	r0, r3
 8008274:	3724      	adds	r7, #36	; 0x24
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr
	...

08008280 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008280:	b480      	push	{r7}
 8008282:	b087      	sub	sp, #28
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	460b      	mov	r3, r1
 800828a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008290:	78fb      	ldrb	r3, [r7, #3]
 8008292:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008294:	2301      	movs	r3, #1
 8008296:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	04da      	lsls	r2, r3, #19
 800829c:	4b15      	ldr	r3, [pc, #84]	; (80082f4 <USB_DoPing+0x74>)
 800829e:	4013      	ands	r3, r2
 80082a0:	693a      	ldr	r2, [r7, #16]
 80082a2:	0151      	lsls	r1, r2, #5
 80082a4:	697a      	ldr	r2, [r7, #20]
 80082a6:	440a      	add	r2, r1
 80082a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082b0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	015a      	lsls	r2, r3, #5
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	4413      	add	r3, r2
 80082ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80082c8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082d0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	015a      	lsls	r2, r3, #5
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	4413      	add	r3, r2
 80082da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082de:	461a      	mov	r2, r3
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	371c      	adds	r7, #28
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	1ff80000 	.word	0x1ff80000

080082f8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b088      	sub	sp, #32
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008300:	2300      	movs	r3, #0
 8008302:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008308:	2300      	movs	r3, #0
 800830a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f7ff f911 	bl	8007534 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008312:	2110      	movs	r1, #16
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f7ff f96b 	bl	80075f0 <USB_FlushTxFifo>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d001      	beq.n	8008324 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f7ff f997 	bl	8007658 <USB_FlushRxFifo>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d001      	beq.n	8008334 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008334:	2300      	movs	r3, #0
 8008336:	61bb      	str	r3, [r7, #24]
 8008338:	e01f      	b.n	800837a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	015a      	lsls	r2, r3, #5
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	4413      	add	r3, r2
 8008342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008350:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008358:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008360:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	015a      	lsls	r2, r3, #5
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	4413      	add	r3, r2
 800836a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800836e:	461a      	mov	r2, r3
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	3301      	adds	r3, #1
 8008378:	61bb      	str	r3, [r7, #24]
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	2b0f      	cmp	r3, #15
 800837e:	d9dc      	bls.n	800833a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008380:	2300      	movs	r3, #0
 8008382:	61bb      	str	r3, [r7, #24]
 8008384:	e034      	b.n	80083f0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008386:	69bb      	ldr	r3, [r7, #24]
 8008388:	015a      	lsls	r2, r3, #5
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	4413      	add	r3, r2
 800838e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800839c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083a4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80083ac:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	015a      	lsls	r2, r3, #5
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	4413      	add	r3, r2
 80083b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ba:	461a      	mov	r2, r3
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	3301      	adds	r3, #1
 80083c4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083cc:	d80c      	bhi.n	80083e8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	015a      	lsls	r2, r3, #5
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	4413      	add	r3, r2
 80083d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083e4:	d0ec      	beq.n	80083c0 <USB_StopHost+0xc8>
 80083e6:	e000      	b.n	80083ea <USB_StopHost+0xf2>
        break;
 80083e8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	3301      	adds	r3, #1
 80083ee:	61bb      	str	r3, [r7, #24]
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	2b0f      	cmp	r3, #15
 80083f4:	d9c7      	bls.n	8008386 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083fc:	461a      	mov	r2, r3
 80083fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008402:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f04f 32ff 	mov.w	r2, #4294967295
 800840a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f7ff f880 	bl	8007512 <USB_EnableGlobalInt>

  return ret;
 8008412:	7ffb      	ldrb	r3, [r7, #31]
}
 8008414:	4618      	mov	r0, r3
 8008416:	3720      	adds	r7, #32
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  //retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
	FATFS_LinkDriver(&SD0_Driver, SD0Path);
 8008420:	4908      	ldr	r1, [pc, #32]	; (8008444 <MX_FATFS_Init+0x28>)
 8008422:	4809      	ldr	r0, [pc, #36]	; (8008448 <MX_FATFS_Init+0x2c>)
 8008424:	f007 fc02 	bl	800fc2c <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD1_Driver, SD1Path);
 8008428:	4908      	ldr	r1, [pc, #32]	; (800844c <MX_FATFS_Init+0x30>)
 800842a:	4809      	ldr	r0, [pc, #36]	; (8008450 <MX_FATFS_Init+0x34>)
 800842c:	f007 fbfe 	bl	800fc2c <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD2_Driver, SD2Path);
 8008430:	4908      	ldr	r1, [pc, #32]	; (8008454 <MX_FATFS_Init+0x38>)
 8008432:	4809      	ldr	r0, [pc, #36]	; (8008458 <MX_FATFS_Init+0x3c>)
 8008434:	f007 fbfa 	bl	800fc2c <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD3_Driver, SD3Path);
 8008438:	4908      	ldr	r1, [pc, #32]	; (800845c <MX_FATFS_Init+0x40>)
 800843a:	4809      	ldr	r0, [pc, #36]	; (8008460 <MX_FATFS_Init+0x44>)
 800843c:	f007 fbf6 	bl	800fc2c <FATFS_LinkDriver>


  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008440:	bf00      	nop
 8008442:	bd80      	pop	{r7, pc}
 8008444:	200019a4 	.word	0x200019a4
 8008448:	2000023c 	.word	0x2000023c
 800844c:	200019a8 	.word	0x200019a8
 8008450:	20000250 	.word	0x20000250
 8008454:	200019ac 	.word	0x200019ac
 8008458:	20000264 	.word	0x20000264
 800845c:	200019b0 	.word	0x200019b0
 8008460:	20000278 	.word	0x20000278

08008464 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008464:	b480      	push	{r7}
 8008466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008468:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800846a:	4618      	mov	r0, r3
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <SD0_initialize>:
  * @brief  Initializes a Drive
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS SD0_initialize (BYTE pdrv)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	4603      	mov	r3, r0
 800847c:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(0);
 800847e:	2000      	movs	r0, #0
 8008480:	f7f9 fa0c 	bl	800189c <sd_ss_set_active>
	return USER_initialize(pdrv);
 8008484:	79fb      	ldrb	r3, [r7, #7]
 8008486:	4618      	mov	r0, r3
 8008488:	f000 f838 	bl	80084fc <USER_initialize>
 800848c:	4603      	mov	r3, r0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3708      	adds	r7, #8
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <SD1_initialize>:
DSTATUS SD1_initialize (BYTE pdrv)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b082      	sub	sp, #8
 800849a:	af00      	add	r7, sp, #0
 800849c:	4603      	mov	r3, r0
 800849e:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(1);
 80084a0:	2001      	movs	r0, #1
 80084a2:	f7f9 f9fb 	bl	800189c <sd_ss_set_active>
	return USER_initialize(pdrv);
 80084a6:	79fb      	ldrb	r3, [r7, #7]
 80084a8:	4618      	mov	r0, r3
 80084aa:	f000 f827 	bl	80084fc <USER_initialize>
 80084ae:	4603      	mov	r3, r0
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3708      	adds	r7, #8
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <SD2_initialize>:
DSTATUS SD2_initialize (BYTE pdrv)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	4603      	mov	r3, r0
 80084c0:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(2);
 80084c2:	2002      	movs	r0, #2
 80084c4:	f7f9 f9ea 	bl	800189c <sd_ss_set_active>
	return USER_initialize(pdrv);
 80084c8:	79fb      	ldrb	r3, [r7, #7]
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 f816 	bl	80084fc <USER_initialize>
 80084d0:	4603      	mov	r3, r0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3708      	adds	r7, #8
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <SD3_initialize>:
DSTATUS SD3_initialize (BYTE pdrv)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b082      	sub	sp, #8
 80084de:	af00      	add	r7, sp, #0
 80084e0:	4603      	mov	r3, r0
 80084e2:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(3);
 80084e4:	2003      	movs	r0, #3
 80084e6:	f7f9 f9d9 	bl	800189c <sd_ss_set_active>
	return USER_initialize(pdrv);
 80084ea:	79fb      	ldrb	r3, [r7, #7]
 80084ec:	4618      	mov	r0, r3
 80084ee:	f000 f805 	bl	80084fc <USER_initialize>
 80084f2:	4603      	mov	r3, r0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3708      	adds	r7, #8
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <USER_initialize>:

DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
 8008502:	4603      	mov	r3, r0
 8008504:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	//SD_PowerOn();
	SS_SD_SELECT();
 8008506:	f7f9 f9e7 	bl	80018d8 <sd_ss_active_pin_down>
	if(sd_ini()==0) {Stat &= ~STA_NOINIT;} // STA_NOINIT
 800850a:	f7f9 fa67 	bl	80019dc <sd_ini>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d107      	bne.n	8008524 <USER_initialize+0x28>
 8008514:	4b08      	ldr	r3, [pc, #32]	; (8008538 <USER_initialize+0x3c>)
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	b2db      	uxtb	r3, r3
 800851a:	f023 0301 	bic.w	r3, r3, #1
 800851e:	b2da      	uxtb	r2, r3
 8008520:	4b05      	ldr	r3, [pc, #20]	; (8008538 <USER_initialize+0x3c>)
 8008522:	701a      	strb	r2, [r3, #0]
	SS_SD_DESELECT();
 8008524:	f7f9 f9e8 	bl	80018f8 <sd_ss_active_pin_up>
    return Stat;
 8008528:	4b03      	ldr	r3, [pc, #12]	; (8008538 <USER_initialize+0x3c>)
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800852e:	4618      	mov	r0, r3
 8008530:	3708      	adds	r7, #8
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	20000239 	.word	0x20000239

0800853c <SD0_status>:
  * @brief  Gets Disk Status
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS SD0_status (BYTE pdrv)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	4603      	mov	r3, r0
 8008544:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(0);
 8008546:	2000      	movs	r0, #0
 8008548:	f7f9 f9a8 	bl	800189c <sd_ss_set_active>
	return USER_status(pdrv);
 800854c:	79fb      	ldrb	r3, [r7, #7]
 800854e:	4618      	mov	r0, r3
 8008550:	f000 f838 	bl	80085c4 <USER_status>
 8008554:	4603      	mov	r3, r0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3708      	adds	r7, #8
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <SD1_status>:
DSTATUS SD1_status (BYTE pdrv)
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b082      	sub	sp, #8
 8008562:	af00      	add	r7, sp, #0
 8008564:	4603      	mov	r3, r0
 8008566:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(1);
 8008568:	2001      	movs	r0, #1
 800856a:	f7f9 f997 	bl	800189c <sd_ss_set_active>
	return USER_status(pdrv);
 800856e:	79fb      	ldrb	r3, [r7, #7]
 8008570:	4618      	mov	r0, r3
 8008572:	f000 f827 	bl	80085c4 <USER_status>
 8008576:	4603      	mov	r3, r0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3708      	adds	r7, #8
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <SD2_status>:
DSTATUS SD2_status (BYTE pdrv)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	4603      	mov	r3, r0
 8008588:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(2);
 800858a:	2002      	movs	r0, #2
 800858c:	f7f9 f986 	bl	800189c <sd_ss_set_active>
	return USER_status(pdrv);
 8008590:	79fb      	ldrb	r3, [r7, #7]
 8008592:	4618      	mov	r0, r3
 8008594:	f000 f816 	bl	80085c4 <USER_status>
 8008598:	4603      	mov	r3, r0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <SD3_status>:
DSTATUS SD3_status (BYTE pdrv)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b082      	sub	sp, #8
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	4603      	mov	r3, r0
 80085aa:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(3);
 80085ac:	2003      	movs	r0, #3
 80085ae:	f7f9 f975 	bl	800189c <sd_ss_set_active>
	return USER_status(pdrv);
 80085b2:	79fb      	ldrb	r3, [r7, #7]
 80085b4:	4618      	mov	r0, r3
 80085b6:	f000 f805 	bl	80085c4 <USER_status>
 80085ba:	4603      	mov	r3, r0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3708      	adds	r7, #8
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <USER_status>:

DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	4603      	mov	r3, r0
 80085cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	SS_SD_SELECT();
 80085ce:	f7f9 f983 	bl	80018d8 <sd_ss_active_pin_down>
	if (pdrv) return STA_NOINIT;
 80085d2:	79fb      	ldrb	r3, [r7, #7]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d001      	beq.n	80085dc <USER_status+0x18>
 80085d8:	2301      	movs	r3, #1
 80085da:	e004      	b.n	80085e6 <USER_status+0x22>
	SS_SD_DESELECT();
 80085dc:	f7f9 f98c 	bl	80018f8 <sd_ss_active_pin_up>
    return Stat;
 80085e0:	4b03      	ldr	r3, [pc, #12]	; (80085f0 <USER_status+0x2c>)
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3708      	adds	r7, #8
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	20000239 	.word	0x20000239

080085f4 <SD0_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DSTATUS SD0_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60b9      	str	r1, [r7, #8]
 80085fc:	607a      	str	r2, [r7, #4]
 80085fe:	603b      	str	r3, [r7, #0]
 8008600:	4603      	mov	r3, r0
 8008602:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(0);
 8008604:	2000      	movs	r0, #0
 8008606:	f7f9 f949 	bl	800189c <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 800860a:	7bf8      	ldrb	r0, [r7, #15]
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	68b9      	ldr	r1, [r7, #8]
 8008612:	f000 f847 	bl	80086a4 <USER_read>
 8008616:	4603      	mov	r3, r0
}
 8008618:	4618      	mov	r0, r3
 800861a:	3710      	adds	r7, #16
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <SD1_read>:
DSTATUS SD1_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	60b9      	str	r1, [r7, #8]
 8008628:	607a      	str	r2, [r7, #4]
 800862a:	603b      	str	r3, [r7, #0]
 800862c:	4603      	mov	r3, r0
 800862e:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(1);
 8008630:	2001      	movs	r0, #1
 8008632:	f7f9 f933 	bl	800189c <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 8008636:	7bf8      	ldrb	r0, [r7, #15]
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	68b9      	ldr	r1, [r7, #8]
 800863e:	f000 f831 	bl	80086a4 <USER_read>
 8008642:	4603      	mov	r3, r0
}
 8008644:	4618      	mov	r0, r3
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <SD2_read>:
DSTATUS SD2_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	60b9      	str	r1, [r7, #8]
 8008654:	607a      	str	r2, [r7, #4]
 8008656:	603b      	str	r3, [r7, #0]
 8008658:	4603      	mov	r3, r0
 800865a:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(2);
 800865c:	2002      	movs	r0, #2
 800865e:	f7f9 f91d 	bl	800189c <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 8008662:	7bf8      	ldrb	r0, [r7, #15]
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	68b9      	ldr	r1, [r7, #8]
 800866a:	f000 f81b 	bl	80086a4 <USER_read>
 800866e:	4603      	mov	r3, r0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <SD3_read>:
DSTATUS SD3_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	60b9      	str	r1, [r7, #8]
 8008680:	607a      	str	r2, [r7, #4]
 8008682:	603b      	str	r3, [r7, #0]
 8008684:	4603      	mov	r3, r0
 8008686:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(3);
 8008688:	2003      	movs	r0, #3
 800868a:	f7f9 f907 	bl	800189c <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 800868e:	7bf8      	ldrb	r0, [r7, #15]
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	68b9      	ldr	r1, [r7, #8]
 8008696:	f000 f805 	bl	80086a4 <USER_read>
 800869a:	4603      	mov	r3, r0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60b9      	str	r1, [r7, #8]
 80086ac:	607a      	str	r2, [r7, #4]
 80086ae:	603b      	str	r3, [r7, #0]
 80086b0:	4603      	mov	r3, r0
 80086b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	SS_SD_SELECT();
 80086b4:	f7f9 f910 	bl	80018d8 <sd_ss_active_pin_down>
	if (pdrv || !count) return RES_PARERR;
 80086b8:	7bfb      	ldrb	r3, [r7, #15]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d102      	bne.n	80086c4 <USER_read+0x20>
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d101      	bne.n	80086c8 <USER_read+0x24>
 80086c4:	2304      	movs	r3, #4
 80086c6:	e025      	b.n	8008714 <USER_read+0x70>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80086c8:	4b14      	ldr	r3, [pc, #80]	; (800871c <USER_read+0x78>)
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	f003 0301 	and.w	r3, r3, #1
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d001      	beq.n	80086da <USER_read+0x36>
 80086d6:	2303      	movs	r3, #3
 80086d8:	e01c      	b.n	8008714 <USER_read+0x70>
	if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 80086da:	4b11      	ldr	r3, [pc, #68]	; (8008720 <USER_read+0x7c>)
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	f003 0304 	and.w	r3, r3, #4
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d102      	bne.n	80086ee <USER_read+0x4a>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	025b      	lsls	r3, r3, #9
 80086ec:	607b      	str	r3, [r7, #4]
	if (count == 1) /* Single block read */
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d105      	bne.n	8008700 <USER_read+0x5c>
	{
	  SD_Read_Block(buff,sector); //Ð¡Ñ‡Ð¸Ñ‚Ð°ÐµÐ¼ Ð±Ð»Ð¾Ðº Ð² Ð±ÑƒÑ„ÐµÑ€
 80086f4:	6879      	ldr	r1, [r7, #4]
 80086f6:	68b8      	ldr	r0, [r7, #8]
 80086f8:	f7f9 fa8b 	bl	8001c12 <SD_Read_Block>
	  count = 0;
 80086fc:	2300      	movs	r3, #0
 80086fe:	603b      	str	r3, [r7, #0]
	}
	else /* Multiple block read */
	{
	}
	SPI_Release();
 8008700:	f7f9 fa80 	bl	8001c04 <SPI_Release>
	SS_SD_DESELECT();
 8008704:	f7f9 f8f8 	bl	80018f8 <sd_ss_active_pin_up>
	return count ? RES_ERROR : RES_OK;
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	bf14      	ite	ne
 800870e:	2301      	movne	r3, #1
 8008710:	2300      	moveq	r3, #0
 8008712:	b2db      	uxtb	r3, r3
    return RES_OK;
  /* USER CODE END READ */
}
 8008714:	4618      	mov	r0, r3
 8008716:	3710      	adds	r7, #16
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}
 800871c:	20000239 	.word	0x20000239
 8008720:	2000190c 	.word	0x2000190c

08008724 <SD0_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DSTATUS SD0_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	60b9      	str	r1, [r7, #8]
 800872c:	607a      	str	r2, [r7, #4]
 800872e:	603b      	str	r3, [r7, #0]
 8008730:	4603      	mov	r3, r0
 8008732:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(0);
 8008734:	2000      	movs	r0, #0
 8008736:	f7f9 f8b1 	bl	800189c <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 800873a:	7bf8      	ldrb	r0, [r7, #15]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	68b9      	ldr	r1, [r7, #8]
 8008742:	f000 f847 	bl	80087d4 <USER_write>
 8008746:	4603      	mov	r3, r0
}
 8008748:	4618      	mov	r0, r3
 800874a:	3710      	adds	r7, #16
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <SD1_write>:
DSTATUS SD1_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	60b9      	str	r1, [r7, #8]
 8008758:	607a      	str	r2, [r7, #4]
 800875a:	603b      	str	r3, [r7, #0]
 800875c:	4603      	mov	r3, r0
 800875e:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(1);
 8008760:	2001      	movs	r0, #1
 8008762:	f7f9 f89b 	bl	800189c <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 8008766:	7bf8      	ldrb	r0, [r7, #15]
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	68b9      	ldr	r1, [r7, #8]
 800876e:	f000 f831 	bl	80087d4 <USER_write>
 8008772:	4603      	mov	r3, r0
}
 8008774:	4618      	mov	r0, r3
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <SD2_write>:
DSTATUS SD2_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	60b9      	str	r1, [r7, #8]
 8008784:	607a      	str	r2, [r7, #4]
 8008786:	603b      	str	r3, [r7, #0]
 8008788:	4603      	mov	r3, r0
 800878a:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(2);
 800878c:	2002      	movs	r0, #2
 800878e:	f7f9 f885 	bl	800189c <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 8008792:	7bf8      	ldrb	r0, [r7, #15]
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	68b9      	ldr	r1, [r7, #8]
 800879a:	f000 f81b 	bl	80087d4 <USER_write>
 800879e:	4603      	mov	r3, r0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3710      	adds	r7, #16
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <SD3_write>:
DSTATUS SD3_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60b9      	str	r1, [r7, #8]
 80087b0:	607a      	str	r2, [r7, #4]
 80087b2:	603b      	str	r3, [r7, #0]
 80087b4:	4603      	mov	r3, r0
 80087b6:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(3);
 80087b8:	2003      	movs	r0, #3
 80087ba:	f7f9 f86f 	bl	800189c <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 80087be:	7bf8      	ldrb	r0, [r7, #15]
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	68b9      	ldr	r1, [r7, #8]
 80087c6:	f000 f805 	bl	80087d4 <USER_write>
 80087ca:	4603      	mov	r3, r0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3710      	adds	r7, #16
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60b9      	str	r1, [r7, #8]
 80087dc:	607a      	str	r2, [r7, #4]
 80087de:	603b      	str	r3, [r7, #0]
 80087e0:	4603      	mov	r3, r0
 80087e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
	HAL_UART_Transmit(&huart1,&count,sizeof(UINT),100);
 80087e4:	4639      	mov	r1, r7
 80087e6:	2364      	movs	r3, #100	; 0x64
 80087e8:	2204      	movs	r2, #4
 80087ea:	4820      	ldr	r0, [pc, #128]	; (800886c <USER_write+0x98>)
 80087ec:	f7fd fdcb 	bl	8006386 <HAL_UART_Transmit>
  /* USER CODE HERE */
	SS_SD_SELECT();
 80087f0:	f7f9 f872 	bl	80018d8 <sd_ss_active_pin_down>
	if (pdrv || !count) return RES_PARERR;
 80087f4:	7bfb      	ldrb	r3, [r7, #15]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d102      	bne.n	8008800 <USER_write+0x2c>
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d101      	bne.n	8008804 <USER_write+0x30>
 8008800:	2304      	movs	r3, #4
 8008802:	e02e      	b.n	8008862 <USER_write+0x8e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008804:	4b1a      	ldr	r3, [pc, #104]	; (8008870 <USER_write+0x9c>)
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	b2db      	uxtb	r3, r3
 800880a:	f003 0301 	and.w	r3, r3, #1
 800880e:	2b00      	cmp	r3, #0
 8008810:	d001      	beq.n	8008816 <USER_write+0x42>
 8008812:	2303      	movs	r3, #3
 8008814:	e025      	b.n	8008862 <USER_write+0x8e>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8008816:	4b16      	ldr	r3, [pc, #88]	; (8008870 <USER_write+0x9c>)
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	b2db      	uxtb	r3, r3
 800881c:	f003 0304 	and.w	r3, r3, #4
 8008820:	2b00      	cmp	r3, #0
 8008822:	d001      	beq.n	8008828 <USER_write+0x54>
 8008824:	2302      	movs	r3, #2
 8008826:	e01c      	b.n	8008862 <USER_write+0x8e>
	if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 8008828:	4b12      	ldr	r3, [pc, #72]	; (8008874 <USER_write+0xa0>)
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	b2db      	uxtb	r3, r3
 800882e:	f003 0304 	and.w	r3, r3, #4
 8008832:	2b00      	cmp	r3, #0
 8008834:	d102      	bne.n	800883c <USER_write+0x68>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	025b      	lsls	r3, r3, #9
 800883a:	607b      	str	r3, [r7, #4]
	if (count == 1) /* Single block read */
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	2b01      	cmp	r3, #1
 8008840:	d105      	bne.n	800884e <USER_write+0x7a>
	{
	    SD_Write_Block((BYTE*)buff,sector); //Ð¡Ñ‡Ð¸Ñ‚Ð°ÐµÐ¼ Ð±Ð»Ð¾Ðº Ð² Ð±ÑƒÑ„ÐµÑ€
 8008842:	6879      	ldr	r1, [r7, #4]
 8008844:	68b8      	ldr	r0, [r7, #8]
 8008846:	f7f9 fa28 	bl	8001c9a <SD_Write_Block>
	    count = 0;
 800884a:	2300      	movs	r3, #0
 800884c:	603b      	str	r3, [r7, #0]
	}
	else /* Multiple block read */
	{
	}
	SPI_Release();
 800884e:	f7f9 f9d9 	bl	8001c04 <SPI_Release>
	SS_SD_DESELECT();
 8008852:	f7f9 f851 	bl	80018f8 <sd_ss_active_pin_up>

	return count ? RES_ERROR : RES_OK;
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	bf14      	ite	ne
 800885c:	2301      	movne	r3, #1
 800885e:	2300      	moveq	r3, #0
 8008860:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8008862:	4618      	mov	r0, r3
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	200007a0 	.word	0x200007a0
 8008870:	20000239 	.word	0x20000239
 8008874:	2000190c 	.word	0x2000190c

08008878 <SD0_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DSTATUS SD0_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	4603      	mov	r3, r0
 8008880:	603a      	str	r2, [r7, #0]
 8008882:	71fb      	strb	r3, [r7, #7]
 8008884:	460b      	mov	r3, r1
 8008886:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(0);
 8008888:	2000      	movs	r0, #0
 800888a:	f7f9 f807 	bl	800189c <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 800888e:	79b9      	ldrb	r1, [r7, #6]
 8008890:	79fb      	ldrb	r3, [r7, #7]
 8008892:	683a      	ldr	r2, [r7, #0]
 8008894:	4618      	mov	r0, r3
 8008896:	f000 f847 	bl	8008928 <USER_ioctl>
 800889a:	4603      	mov	r3, r0
}
 800889c:	4618      	mov	r0, r3
 800889e:	3708      	adds	r7, #8
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <SD1_ioctl>:
DSTATUS SD1_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	4603      	mov	r3, r0
 80088ac:	603a      	str	r2, [r7, #0]
 80088ae:	71fb      	strb	r3, [r7, #7]
 80088b0:	460b      	mov	r3, r1
 80088b2:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(1);
 80088b4:	2001      	movs	r0, #1
 80088b6:	f7f8 fff1 	bl	800189c <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 80088ba:	79b9      	ldrb	r1, [r7, #6]
 80088bc:	79fb      	ldrb	r3, [r7, #7]
 80088be:	683a      	ldr	r2, [r7, #0]
 80088c0:	4618      	mov	r0, r3
 80088c2:	f000 f831 	bl	8008928 <USER_ioctl>
 80088c6:	4603      	mov	r3, r0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <SD2_ioctl>:
DSTATUS SD2_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	4603      	mov	r3, r0
 80088d8:	603a      	str	r2, [r7, #0]
 80088da:	71fb      	strb	r3, [r7, #7]
 80088dc:	460b      	mov	r3, r1
 80088de:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(2);
 80088e0:	2002      	movs	r0, #2
 80088e2:	f7f8 ffdb 	bl	800189c <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 80088e6:	79b9      	ldrb	r1, [r7, #6]
 80088e8:	79fb      	ldrb	r3, [r7, #7]
 80088ea:	683a      	ldr	r2, [r7, #0]
 80088ec:	4618      	mov	r0, r3
 80088ee:	f000 f81b 	bl	8008928 <USER_ioctl>
 80088f2:	4603      	mov	r3, r0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <SD3_ioctl>:
DSTATUS SD3_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	4603      	mov	r3, r0
 8008904:	603a      	str	r2, [r7, #0]
 8008906:	71fb      	strb	r3, [r7, #7]
 8008908:	460b      	mov	r3, r1
 800890a:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(3);
 800890c:	2003      	movs	r0, #3
 800890e:	f7f8 ffc5 	bl	800189c <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 8008912:	79b9      	ldrb	r1, [r7, #6]
 8008914:	79fb      	ldrb	r3, [r7, #7]
 8008916:	683a      	ldr	r2, [r7, #0]
 8008918:	4618      	mov	r0, r3
 800891a:	f000 f805 	bl	8008928 <USER_ioctl>
 800891e:	4603      	mov	r3, r0
}
 8008920:	4618      	mov	r0, r3
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	4603      	mov	r3, r0
 8008930:	603a      	str	r2, [r7, #0]
 8008932:	71fb      	strb	r3, [r7, #7]
 8008934:	460b      	mov	r3, r1
 8008936:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res;
	sd_ss_set_active(pdrv);
 8008938:	79fb      	ldrb	r3, [r7, #7]
 800893a:	4618      	mov	r0, r3
 800893c:	f7f8 ffae 	bl	800189c <sd_ss_set_active>
	SS_SD_SELECT();
 8008940:	f7f8 ffca 	bl	80018d8 <sd_ss_active_pin_down>
	if (pdrv) return RES_PARERR;
 8008944:	79fb      	ldrb	r3, [r7, #7]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d001      	beq.n	800894e <USER_ioctl+0x26>
 800894a:	2304      	movs	r3, #4
 800894c:	e02a      	b.n	80089a4 <USER_ioctl+0x7c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800894e:	4b17      	ldr	r3, [pc, #92]	; (80089ac <USER_ioctl+0x84>)
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	b2db      	uxtb	r3, r3
 8008954:	f003 0301 	and.w	r3, r3, #1
 8008958:	2b00      	cmp	r3, #0
 800895a:	d001      	beq.n	8008960 <USER_ioctl+0x38>
 800895c:	2303      	movs	r3, #3
 800895e:	e021      	b.n	80089a4 <USER_ioctl+0x7c>
	res = RES_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	73fb      	strb	r3, [r7, #15]
	switch (cmd)
 8008964:	79bb      	ldrb	r3, [r7, #6]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d002      	beq.n	8008970 <USER_ioctl+0x48>
 800896a:	2b02      	cmp	r3, #2
 800896c:	d00a      	beq.n	8008984 <USER_ioctl+0x5c>
 800896e:	e010      	b.n	8008992 <USER_ioctl+0x6a>
	{
	  case CTRL_SYNC : /* Flush dirty buffer if present */
	    SS_SD_SELECT();
 8008970:	f7f8 ffb2 	bl	80018d8 <sd_ss_active_pin_down>
	    if (SPI_wait_ready() == 0xFF)
 8008974:	f7f9 f8ed 	bl	8001b52 <SPI_wait_ready>
 8008978:	4603      	mov	r3, r0
 800897a:	2bff      	cmp	r3, #255	; 0xff
 800897c:	d10c      	bne.n	8008998 <USER_ioctl+0x70>
	    res = RES_OK;
 800897e:	2300      	movs	r3, #0
 8008980:	73fb      	strb	r3, [r7, #15]
	    break;
 8008982:	e009      	b.n	8008998 <USER_ioctl+0x70>
	  case GET_SECTOR_SIZE : /* Get sectors on the disk (WORD) */
	    *(WORD*)buff = 512;
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800898a:	801a      	strh	r2, [r3, #0]
	    res = RES_OK;
 800898c:	2300      	movs	r3, #0
 800898e:	73fb      	strb	r3, [r7, #15]
	    break;
 8008990:	e003      	b.n	800899a <USER_ioctl+0x72>
	  default:
	    res = RES_PARERR;
 8008992:	2304      	movs	r3, #4
 8008994:	73fb      	strb	r3, [r7, #15]
 8008996:	e000      	b.n	800899a <USER_ioctl+0x72>
	    break;
 8008998:	bf00      	nop
	}
	SPI_Release();
 800899a:	f7f9 f933 	bl	8001c04 <SPI_Release>
	SS_SD_DESELECT();
 800899e:	f7f8 ffab 	bl	80018f8 <sd_ss_active_pin_up>
    return res;
 80089a2:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	20000239 	.word	0x20000239

080089b0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80089b0:	b590      	push	{r4, r7, lr}
 80089b2:	b089      	sub	sp, #36	; 0x24
 80089b4:	af04      	add	r7, sp, #16
 80089b6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80089b8:	2301      	movs	r3, #1
 80089ba:	2202      	movs	r2, #2
 80089bc:	2102      	movs	r1, #2
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fda6 	bl	8009510 <USBH_FindInterface>
 80089c4:	4603      	mov	r3, r0
 80089c6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
 80089ca:	2bff      	cmp	r3, #255	; 0xff
 80089cc:	d002      	beq.n	80089d4 <USBH_CDC_InterfaceInit+0x24>
 80089ce:	7bfb      	ldrb	r3, [r7, #15]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d901      	bls.n	80089d8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80089d4:	2302      	movs	r3, #2
 80089d6:	e13d      	b.n	8008c54 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
 80089da:	4619      	mov	r1, r3
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fd7b 	bl	80094d8 <USBH_SelectInterface>
 80089e2:	4603      	mov	r3, r0
 80089e4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80089e6:	7bbb      	ldrb	r3, [r7, #14]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d001      	beq.n	80089f0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80089ec:	2302      	movs	r3, #2
 80089ee:	e131      	b.n	8008c54 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80089f6:	2050      	movs	r0, #80	; 0x50
 80089f8:	f00a f912 	bl	8012c20 <malloc>
 80089fc:	4603      	mov	r3, r0
 80089fe:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a06:	69db      	ldr	r3, [r3, #28]
 8008a08:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d101      	bne.n	8008a14 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008a10:	2302      	movs	r3, #2
 8008a12:	e11f      	b.n	8008c54 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008a14:	2250      	movs	r2, #80	; 0x50
 8008a16:	2100      	movs	r1, #0
 8008a18:	68b8      	ldr	r0, [r7, #8]
 8008a1a:	f00a f91f 	bl	8012c5c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008a1e:	7bfb      	ldrb	r3, [r7, #15]
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	211a      	movs	r1, #26
 8008a24:	fb01 f303 	mul.w	r3, r1, r3
 8008a28:	4413      	add	r3, r2
 8008a2a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	b25b      	sxtb	r3, r3
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	da15      	bge.n	8008a62 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008a36:	7bfb      	ldrb	r3, [r7, #15]
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	211a      	movs	r1, #26
 8008a3c:	fb01 f303 	mul.w	r3, r1, r3
 8008a40:	4413      	add	r3, r2
 8008a42:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008a46:	781a      	ldrb	r2, [r3, #0]
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008a4c:	7bfb      	ldrb	r3, [r7, #15]
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	211a      	movs	r1, #26
 8008a52:	fb01 f303 	mul.w	r3, r1, r3
 8008a56:	4413      	add	r3, r2
 8008a58:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008a5c:	881a      	ldrh	r2, [r3, #0]
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	785b      	ldrb	r3, [r3, #1]
 8008a66:	4619      	mov	r1, r3
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f002 fa76 	bl	800af5a <USBH_AllocPipe>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	461a      	mov	r2, r3
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	7819      	ldrb	r1, [r3, #0]
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	7858      	ldrb	r0, [r3, #1]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a8a:	68ba      	ldr	r2, [r7, #8]
 8008a8c:	8952      	ldrh	r2, [r2, #10]
 8008a8e:	9202      	str	r2, [sp, #8]
 8008a90:	2203      	movs	r2, #3
 8008a92:	9201      	str	r2, [sp, #4]
 8008a94:	9300      	str	r3, [sp, #0]
 8008a96:	4623      	mov	r3, r4
 8008a98:	4602      	mov	r2, r0
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f002 fa2e 	bl	800aefc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f009 ff11 	bl	80128d0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008aae:	2300      	movs	r3, #0
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	210a      	movs	r1, #10
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 fd2b 	bl	8009510 <USBH_FindInterface>
 8008aba:	4603      	mov	r3, r0
 8008abc:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008abe:	7bfb      	ldrb	r3, [r7, #15]
 8008ac0:	2bff      	cmp	r3, #255	; 0xff
 8008ac2:	d002      	beq.n	8008aca <USBH_CDC_InterfaceInit+0x11a>
 8008ac4:	7bfb      	ldrb	r3, [r7, #15]
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d901      	bls.n	8008ace <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008aca:	2302      	movs	r3, #2
 8008acc:	e0c2      	b.n	8008c54 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008ace:	7bfb      	ldrb	r3, [r7, #15]
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	211a      	movs	r1, #26
 8008ad4:	fb01 f303 	mul.w	r3, r1, r3
 8008ad8:	4413      	add	r3, r2
 8008ada:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	b25b      	sxtb	r3, r3
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	da16      	bge.n	8008b14 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008ae6:	7bfb      	ldrb	r3, [r7, #15]
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	211a      	movs	r1, #26
 8008aec:	fb01 f303 	mul.w	r3, r1, r3
 8008af0:	4413      	add	r3, r2
 8008af2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008af6:	781a      	ldrb	r2, [r3, #0]
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008afc:	7bfb      	ldrb	r3, [r7, #15]
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	211a      	movs	r1, #26
 8008b02:	fb01 f303 	mul.w	r3, r1, r3
 8008b06:	4413      	add	r3, r2
 8008b08:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008b0c:	881a      	ldrh	r2, [r3, #0]
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	835a      	strh	r2, [r3, #26]
 8008b12:	e015      	b.n	8008b40 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008b14:	7bfb      	ldrb	r3, [r7, #15]
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	211a      	movs	r1, #26
 8008b1a:	fb01 f303 	mul.w	r3, r1, r3
 8008b1e:	4413      	add	r3, r2
 8008b20:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b24:	781a      	ldrb	r2, [r3, #0]
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008b2a:	7bfb      	ldrb	r3, [r7, #15]
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	211a      	movs	r1, #26
 8008b30:	fb01 f303 	mul.w	r3, r1, r3
 8008b34:	4413      	add	r3, r2
 8008b36:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008b3a:	881a      	ldrh	r2, [r3, #0]
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008b40:	7bfb      	ldrb	r3, [r7, #15]
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	211a      	movs	r1, #26
 8008b46:	fb01 f303 	mul.w	r3, r1, r3
 8008b4a:	4413      	add	r3, r2
 8008b4c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	b25b      	sxtb	r3, r3
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	da16      	bge.n	8008b86 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008b58:	7bfb      	ldrb	r3, [r7, #15]
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	211a      	movs	r1, #26
 8008b5e:	fb01 f303 	mul.w	r3, r1, r3
 8008b62:	4413      	add	r3, r2
 8008b64:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008b68:	781a      	ldrb	r2, [r3, #0]
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008b6e:	7bfb      	ldrb	r3, [r7, #15]
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	211a      	movs	r1, #26
 8008b74:	fb01 f303 	mul.w	r3, r1, r3
 8008b78:	4413      	add	r3, r2
 8008b7a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008b7e:	881a      	ldrh	r2, [r3, #0]
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	835a      	strh	r2, [r3, #26]
 8008b84:	e015      	b.n	8008bb2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008b86:	7bfb      	ldrb	r3, [r7, #15]
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	211a      	movs	r1, #26
 8008b8c:	fb01 f303 	mul.w	r3, r1, r3
 8008b90:	4413      	add	r3, r2
 8008b92:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008b96:	781a      	ldrb	r2, [r3, #0]
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008b9c:	7bfb      	ldrb	r3, [r7, #15]
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	211a      	movs	r1, #26
 8008ba2:	fb01 f303 	mul.w	r3, r1, r3
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008bac:	881a      	ldrh	r2, [r3, #0]
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	7b9b      	ldrb	r3, [r3, #14]
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f002 f9ce 	bl	800af5a <USBH_AllocPipe>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	7bdb      	ldrb	r3, [r3, #15]
 8008bca:	4619      	mov	r1, r3
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f002 f9c4 	bl	800af5a <USBH_AllocPipe>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	7b59      	ldrb	r1, [r3, #13]
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	7b98      	ldrb	r0, [r3, #14]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	8b12      	ldrh	r2, [r2, #24]
 8008bf2:	9202      	str	r2, [sp, #8]
 8008bf4:	2202      	movs	r2, #2
 8008bf6:	9201      	str	r2, [sp, #4]
 8008bf8:	9300      	str	r3, [sp, #0]
 8008bfa:	4623      	mov	r3, r4
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f002 f97c 	bl	800aefc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	7b19      	ldrb	r1, [r3, #12]
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	7bd8      	ldrb	r0, [r3, #15]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c18:	68ba      	ldr	r2, [r7, #8]
 8008c1a:	8b52      	ldrh	r2, [r2, #26]
 8008c1c:	9202      	str	r2, [sp, #8]
 8008c1e:	2202      	movs	r2, #2
 8008c20:	9201      	str	r2, [sp, #4]
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	4623      	mov	r3, r4
 8008c26:	4602      	mov	r2, r0
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f002 f967 	bl	800aefc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	7b5b      	ldrb	r3, [r3, #13]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f009 fe46 	bl	80128d0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	7b1b      	ldrb	r3, [r3, #12]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f009 fe3f 	bl	80128d0 <USBH_LL_SetToggle>

  return USBH_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3714      	adds	r7, #20
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd90      	pop	{r4, r7, pc}

08008c5c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c6a:	69db      	ldr	r3, [r3, #28]
 8008c6c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00e      	beq.n	8008c94 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f002 f95c 	bl	800af3a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	4619      	mov	r1, r3
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f002 f987 	bl	800af9c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2200      	movs	r2, #0
 8008c92:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	7b1b      	ldrb	r3, [r3, #12]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00e      	beq.n	8008cba <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	7b1b      	ldrb	r3, [r3, #12]
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f002 f949 	bl	800af3a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	7b1b      	ldrb	r3, [r3, #12]
 8008cac:	4619      	mov	r1, r3
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f002 f974 	bl	800af9c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	7b5b      	ldrb	r3, [r3, #13]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00e      	beq.n	8008ce0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	7b5b      	ldrb	r3, [r3, #13]
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f002 f936 	bl	800af3a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	7b5b      	ldrb	r3, [r3, #13]
 8008cd2:	4619      	mov	r1, r3
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f002 f961 	bl	800af9c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ce6:	69db      	ldr	r3, [r3, #28]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d00b      	beq.n	8008d04 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cf2:	69db      	ldr	r3, [r3, #28]
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f009 ff9b 	bl	8012c30 <free>
    phost->pActiveClass->pData = 0U;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d00:	2200      	movs	r2, #0
 8008d02:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b084      	sub	sp, #16
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d1c:	69db      	ldr	r3, [r3, #28]
 8008d1e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	3340      	adds	r3, #64	; 0x40
 8008d24:	4619      	mov	r1, r3
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f8da 	bl	8008ee0 <GetLineCoding>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008d30:	7afb      	ldrb	r3, [r7, #11]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d105      	bne.n	8008d42 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d3c:	2102      	movs	r1, #2
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008d42:	7afb      	ldrb	r3, [r7, #11]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b084      	sub	sp, #16
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008d54:	2301      	movs	r3, #1
 8008d56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d62:	69db      	ldr	r3, [r3, #28]
 8008d64:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008d6c:	2b04      	cmp	r3, #4
 8008d6e:	d877      	bhi.n	8008e60 <USBH_CDC_Process+0x114>
 8008d70:	a201      	add	r2, pc, #4	; (adr r2, 8008d78 <USBH_CDC_Process+0x2c>)
 8008d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d76:	bf00      	nop
 8008d78:	08008d8d 	.word	0x08008d8d
 8008d7c:	08008d93 	.word	0x08008d93
 8008d80:	08008dc3 	.word	0x08008dc3
 8008d84:	08008e37 	.word	0x08008e37
 8008d88:	08008e45 	.word	0x08008e45
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d90:	e06d      	b.n	8008e6e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d96:	4619      	mov	r1, r3
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 f8c0 	bl	8008f1e <SetLineCoding>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008da2:	7bbb      	ldrb	r3, [r7, #14]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d104      	bne.n	8008db2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	2202      	movs	r2, #2
 8008dac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008db0:	e058      	b.n	8008e64 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008db2:	7bbb      	ldrb	r3, [r7, #14]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d055      	beq.n	8008e64 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	2204      	movs	r2, #4
 8008dbc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008dc0:	e050      	b.n	8008e64 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	3340      	adds	r3, #64	; 0x40
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f889 	bl	8008ee0 <GetLineCoding>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008dd2:	7bbb      	ldrb	r3, [r7, #14]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d126      	bne.n	8008e26 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dea:	791b      	ldrb	r3, [r3, #4]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d13b      	bne.n	8008e68 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dfa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d133      	bne.n	8008e68 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e0a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d12b      	bne.n	8008e68 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e18:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d124      	bne.n	8008e68 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fa70 	bl	8009304 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008e24:	e020      	b.n	8008e68 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008e26:	7bbb      	ldrb	r3, [r7, #14]
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d01d      	beq.n	8008e68 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	2204      	movs	r2, #4
 8008e30:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008e34:	e018      	b.n	8008e68 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 f934 	bl	80090a4 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 f9c3 	bl	80091c8 <CDC_ProcessReception>
      break;
 8008e42:	e014      	b.n	8008e6e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008e44:	2100      	movs	r1, #0
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f001 fa49 	bl	800a2de <USBH_ClrFeature>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008e50:	7bbb      	ldrb	r3, [r7, #14]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d10a      	bne.n	8008e6c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008e5e:	e005      	b.n	8008e6c <USBH_CDC_Process+0x120>

    default:
      break;
 8008e60:	bf00      	nop
 8008e62:	e004      	b.n	8008e6e <USBH_CDC_Process+0x122>
      break;
 8008e64:	bf00      	nop
 8008e66:	e002      	b.n	8008e6e <USBH_CDC_Process+0x122>
      break;
 8008e68:	bf00      	nop
 8008e6a:	e000      	b.n	8008e6e <USBH_CDC_Process+0x122>
      break;
 8008e6c:	bf00      	nop

  }

  return status;
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3710      	adds	r7, #16
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	370c      	adds	r7, #12
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr

08008e8e <USBH_CDC_Stop>:
  *         Stop current CDC Transmission
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_CDC_Stop(USBH_HandleTypeDef *phost)
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b084      	sub	sp, #16
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e9c:	69db      	ldr	r3, [r3, #28]
 8008e9e:	60fb      	str	r3, [r7, #12]

  if (phost->gState == HOST_CLASS)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	2b0b      	cmp	r3, #11
 8008ea8:	d115      	bne.n	8008ed6 <USBH_CDC_Stop+0x48>
  {
    CDC_Handle->state = CDC_IDLE_STATE;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f002 f83e 	bl	800af3a <USBH_ClosePipe>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	7b1b      	ldrb	r3, [r3, #12]
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f002 f838 	bl	800af3a <USBH_ClosePipe>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	7b5b      	ldrb	r3, [r3, #13]
 8008ece:	4619      	mov	r1, r3
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f002 f832 	bl	800af3a <USBH_ClosePipe>
  }
  return USBH_OK;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	22a1      	movs	r2, #161	; 0xa1
 8008eee:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2221      	movs	r2, #33	; 0x21
 8008ef4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2207      	movs	r2, #7
 8008f06:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	2207      	movs	r2, #7
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f001 fcb2 	bl	800a878 <USBH_CtlReq>
 8008f14:	4603      	mov	r3, r0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3708      	adds	r7, #8
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b082      	sub	sp, #8
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2221      	movs	r2, #33	; 0x21
 8008f2c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2220      	movs	r2, #32
 8008f32:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2207      	movs	r2, #7
 8008f44:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	2207      	movs	r2, #7
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f001 fc93 	bl	800a878 <USBH_CtlReq>
 8008f52:	4603      	mov	r3, r0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3708      	adds	r7, #8
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <USBH_CDC_SetLineCoding>:
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef USBH_CDC_SetLineCoding(USBH_HandleTypeDef *phost,
                                          CDC_LineCodingTypeDef *linecoding)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f6c:	69db      	ldr	r3, [r3, #28]
 8008f6e:	60fb      	str	r3, [r7, #12]

  if (phost->gState == HOST_CLASS)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	2b0b      	cmp	r3, #11
 8008f78:	d114      	bne.n	8008fa4 <USBH_CDC_SetLineCoding+0x48>
  {
    CDC_Handle->state = CDC_SET_LINE_CODING_STATE;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->pUserLineCoding = linecoding;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	683a      	ldr	r2, [r7, #0]
 8008f86:	649a      	str	r2, [r3, #72]	; 0x48

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2204      	movs	r2, #4
 8008f8c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	f006 ffd4 	bl	800ff4c <osMessagePut>
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }

  return USBH_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3710      	adds	r7, #16
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <USBH_CDC_Transmit>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Transmit(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b086      	sub	sp, #24
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	60f8      	str	r0, [r7, #12]
 8008fb6:	60b9      	str	r1, [r7, #8]
 8008fb8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fc4:	69db      	ldr	r3, [r3, #28]
 8008fc6:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d004      	beq.n	8008fdc <USBH_CDC_Transmit+0x2e>
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008fd8:	2b03      	cmp	r3, #3
 8008fda:	d11d      	bne.n	8009018 <USBH_CDC_Transmit+0x6a>
  {
    CDC_Handle->pTxData = pbuff;
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	68ba      	ldr	r2, [r7, #8]
 8008fe0:	61da      	str	r2, [r3, #28]
    CDC_Handle->TxDataLength = length;
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	625a      	str	r2, [r3, #36]	; 0x24
    CDC_Handle->state = CDC_TRANSFER_DATA;
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	2203      	movs	r2, #3
 8008fec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    Status = USBH_OK;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2204      	movs	r2, #4
 8009000:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009010:	2200      	movs	r2, #0
 8009012:	4619      	mov	r1, r3
 8009014:	f006 ff9a 	bl	800ff4c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }
  return Status;
 8009018:	7dfb      	ldrb	r3, [r7, #23]
}
 800901a:	4618      	mov	r0, r3
 800901c:	3718      	adds	r7, #24
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
	...

08009024 <USBH_CDC_Receive>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b086      	sub	sp, #24
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009030:	2301      	movs	r3, #1
 8009032:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800903a:	69db      	ldr	r3, [r3, #28]
 800903c:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009044:	2b00      	cmp	r3, #0
 8009046:	d004      	beq.n	8009052 <USBH_CDC_Receive+0x2e>
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800904e:	2b03      	cmp	r3, #3
 8009050:	d120      	bne.n	8009094 <USBH_CDC_Receive+0x70>
  {
	icListen_rx_msg_basic_header=(icListen_wav_full_header*)pbuff;
 8009052:	4a13      	ldr	r2, [pc, #76]	; (80090a0 <USBH_CDC_Receive+0x7c>)
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	6013      	str	r3, [r2, #0]
    CDC_Handle->pRxData = pbuff;
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	68ba      	ldr	r2, [r7, #8]
 800905c:	621a      	str	r2, [r3, #32]
    CDC_Handle->RxDataLength = length;
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	629a      	str	r2, [r3, #40]	; 0x28
    CDC_Handle->state = CDC_TRANSFER_DATA;
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	2203      	movs	r2, #3
 8009068:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	2203      	movs	r2, #3
 8009070:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    Status = USBH_OK;
 8009074:	2300      	movs	r3, #0
 8009076:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2204      	movs	r2, #4
 800907c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800908c:	2200      	movs	r2, #0
 800908e:	4619      	mov	r1, r3
 8009090:	f006 ff5c 	bl	800ff4c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }
  return Status;
 8009094:	7dfb      	ldrb	r3, [r7, #23]
}
 8009096:	4618      	mov	r0, r3
 8009098:	3718      	adds	r7, #24
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	200019b4 	.word	0x200019b4

080090a4 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b086      	sub	sp, #24
 80090a8:	af02      	add	r7, sp, #8
 80090aa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090b2:	69db      	ldr	r3, [r3, #28]
 80090b4:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80090b6:	2300      	movs	r3, #0
 80090b8:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d002      	beq.n	80090ca <CDC_ProcessTransmission+0x26>
 80090c4:	2b02      	cmp	r3, #2
 80090c6:	d023      	beq.n	8009110 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80090c8:	e07a      	b.n	80091c0 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ce:	68fa      	ldr	r2, [r7, #12]
 80090d0:	8b12      	ldrh	r2, [r2, #24]
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d90b      	bls.n	80090ee <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	69d9      	ldr	r1, [r3, #28]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	8b1a      	ldrh	r2, [r3, #24]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	7b5b      	ldrb	r3, [r3, #13]
 80090e2:	2001      	movs	r0, #1
 80090e4:	9000      	str	r0, [sp, #0]
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f001 fec5 	bl	800ae76 <USBH_BulkSendData>
 80090ec:	e00b      	b.n	8009106 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80090f6:	b29a      	uxth	r2, r3
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	7b5b      	ldrb	r3, [r3, #13]
 80090fc:	2001      	movs	r0, #1
 80090fe:	9000      	str	r0, [sp, #0]
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f001 feb8 	bl	800ae76 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2202      	movs	r2, #2
 800910a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800910e:	e057      	b.n	80091c0 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	7b5b      	ldrb	r3, [r3, #13]
 8009114:	4619      	mov	r1, r3
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f009 fbb0 	bl	801287c <USBH_LL_GetURBState>
 800911c:	4603      	mov	r3, r0
 800911e:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009120:	7afb      	ldrb	r3, [r7, #11]
 8009122:	2b01      	cmp	r3, #1
 8009124:	d136      	bne.n	8009194 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912a:	68fa      	ldr	r2, [r7, #12]
 800912c:	8b12      	ldrh	r2, [r2, #24]
 800912e:	4293      	cmp	r3, r2
 8009130:	d90e      	bls.n	8009150 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009136:	68fa      	ldr	r2, [r7, #12]
 8009138:	8b12      	ldrh	r2, [r2, #24]
 800913a:	1a9a      	subs	r2, r3, r2
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	69db      	ldr	r3, [r3, #28]
 8009144:	68fa      	ldr	r2, [r7, #12]
 8009146:	8b12      	ldrh	r2, [r2, #24]
 8009148:	441a      	add	r2, r3
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	61da      	str	r2, [r3, #28]
 800914e:	e002      	b.n	8009156 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2200      	movs	r2, #0
 8009154:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915a:	2b00      	cmp	r3, #0
 800915c:	d004      	beq.n	8009168 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2201      	movs	r2, #1
 8009162:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8009166:	e006      	b.n	8009176 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2200      	movs	r2, #0
 800916c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f009 f915 	bl	80123a0 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2204      	movs	r2, #4
 800917a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800918a:	2200      	movs	r2, #0
 800918c:	4619      	mov	r1, r3
 800918e:	f006 fedd 	bl	800ff4c <osMessagePut>
      break;
 8009192:	e014      	b.n	80091be <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8009194:	7afb      	ldrb	r3, [r7, #11]
 8009196:	2b02      	cmp	r3, #2
 8009198:	d111      	bne.n	80091be <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2201      	movs	r2, #1
 800919e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2204      	movs	r2, #4
 80091a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80091b6:	2200      	movs	r2, #0
 80091b8:	4619      	mov	r1, r3
 80091ba:	f006 fec7 	bl	800ff4c <osMessagePut>
      break;
 80091be:	bf00      	nop
  }
}
 80091c0:	bf00      	nop
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b086      	sub	sp, #24
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091d6:	69db      	ldr	r3, [r3, #28]
 80091d8:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80091da:	2300      	movs	r3, #0
 80091dc:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80091e4:	2b03      	cmp	r3, #3
 80091e6:	d002      	beq.n	80091ee <CDC_ProcessReception+0x26>
 80091e8:	2b04      	cmp	r3, #4
 80091ea:	d00e      	beq.n	800920a <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80091ec:	e07e      	b.n	80092ec <CDC_ProcessReception+0x124>
      (void)USBH_BulkReceiveData(phost,
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	6a19      	ldr	r1, [r3, #32]
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	8b5a      	ldrh	r2, [r3, #26]
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	7b1b      	ldrb	r3, [r3, #12]
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f001 fe60 	bl	800aec0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	2204      	movs	r2, #4
 8009204:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009208:	e070      	b.n	80092ec <CDC_ProcessReception+0x124>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	7b1b      	ldrb	r3, [r3, #12]
 800920e:	4619      	mov	r1, r3
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f009 fb33 	bl	801287c <USBH_LL_GetURBState>
 8009216:	4603      	mov	r3, r0
 8009218:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800921a:	7cfb      	ldrb	r3, [r7, #19]
 800921c:	2b01      	cmp	r3, #1
 800921e:	d164      	bne.n	80092ea <CDC_ProcessReception+0x122>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	7b1b      	ldrb	r3, [r3, #12]
 8009224:	4619      	mov	r1, r3
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f009 fa96 	bl	8012758 <USBH_LL_GetLastXferSize>
 800922c:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (CDC_Handle->RxDataLength > CDC_Handle->DataItf.InEpSize))
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009232:	68fa      	ldr	r2, [r7, #12]
 8009234:	429a      	cmp	r2, r3
 8009236:	d043      	beq.n	80092c0 <CDC_ProcessReception+0xf8>
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800923c:	697a      	ldr	r2, [r7, #20]
 800923e:	8b52      	ldrh	r2, [r2, #26]
 8009240:	4293      	cmp	r3, r2
 8009242:	d93d      	bls.n	80092c0 <CDC_ProcessReception+0xf8>
           CDC_Handle->RxDataLength -= length ;
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	1ad2      	subs	r2, r2, r3
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	629a      	str	r2, [r3, #40]	; 0x28
           CDC_Handle->pRxData += length;
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	6a1a      	ldr	r2, [r3, #32]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	441a      	add	r2, r3
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	621a      	str	r2, [r3, #32]
           if((icListen_rx_msg_basic_header->length+6)==(USB_RX_BUFF_SIZE-CDC_Handle->RxDataLength))
 800925c:	4b25      	ldr	r3, [pc, #148]	; (80092f4 <CDC_ProcessReception+0x12c>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	885b      	ldrh	r3, [r3, #2]
 8009262:	b29b      	uxth	r3, r3
 8009264:	3306      	adds	r3, #6
 8009266:	461a      	mov	r2, r3
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926c:	f5c3 637a 	rsb	r3, r3, #4000	; 0xfa0
 8009270:	429a      	cmp	r2, r3
 8009272:	d120      	bne.n	80092b6 <CDC_ProcessReception+0xee>
               CDC_Handle->data_rx_state = CDC_IDLE;
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	2200      	movs	r2, #0
 8009278:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
               osMessagePut(USB_rxHandle, (uint8_t*)usb_rx_buff[usb_rx_buff_active], 0U);
 800927c:	4b1e      	ldr	r3, [pc, #120]	; (80092f8 <CDC_ProcessReception+0x130>)
 800927e:	6818      	ldr	r0, [r3, #0]
 8009280:	4b1e      	ldr	r3, [pc, #120]	; (80092fc <CDC_ProcessReception+0x134>)
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	461a      	mov	r2, r3
 8009286:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800928a:	fb02 f303 	mul.w	r3, r2, r3
 800928e:	4a1c      	ldr	r2, [pc, #112]	; (8009300 <CDC_ProcessReception+0x138>)
 8009290:	4413      	add	r3, r2
 8009292:	2200      	movs	r2, #0
 8009294:	4619      	mov	r1, r3
 8009296:	f006 fe59 	bl	800ff4c <osMessagePut>
               usb_rx_buff_active++;
 800929a:	4b18      	ldr	r3, [pc, #96]	; (80092fc <CDC_ProcessReception+0x134>)
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	3301      	adds	r3, #1
 80092a0:	b2da      	uxtb	r2, r3
 80092a2:	4b16      	ldr	r3, [pc, #88]	; (80092fc <CDC_ProcessReception+0x134>)
 80092a4:	701a      	strb	r2, [r3, #0]
               usb_rx_buff_active%=USB_RX_NUM_OF_BUFFERS;
 80092a6:	4b15      	ldr	r3, [pc, #84]	; (80092fc <CDC_ProcessReception+0x134>)
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	f003 0303 	and.w	r3, r3, #3
 80092ae:	b2da      	uxtb	r2, r3
 80092b0:	4b12      	ldr	r3, [pc, #72]	; (80092fc <CDC_ProcessReception+0x134>)
 80092b2:	701a      	strb	r2, [r3, #0]
           if((icListen_rx_msg_basic_header->length+6)==(USB_RX_BUFF_SIZE-CDC_Handle->RxDataLength))
 80092b4:	e00b      	b.n	80092ce <CDC_ProcessReception+0x106>
         	CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	2203      	movs	r2, #3
 80092ba:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
           if((icListen_rx_msg_basic_header->length+6)==(USB_RX_BUFF_SIZE-CDC_Handle->RxDataLength))
 80092be:	e006      	b.n	80092ce <CDC_ProcessReception+0x106>
           CDC_Handle->data_rx_state = CDC_IDLE;
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	2200      	movs	r2, #0
 80092c4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
           USBH_CDC_ReceiveCallback(phost);
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f009 f873 	bl	80123b4 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2204      	movs	r2, #4
 80092d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80092e2:	2200      	movs	r2, #0
 80092e4:	4619      	mov	r1, r3
 80092e6:	f006 fe31 	bl	800ff4c <osMessagePut>
      break;
 80092ea:	bf00      	nop
  }
}
 80092ec:	bf00      	nop
 80092ee:	3718      	adds	r7, #24
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	200019b4 	.word	0x200019b4
 80092f8:	200007f8 	.word	0x200007f8
 80092fc:	2000bc04 	.word	0x2000bc04
 8009300:	20007d84 	.word	0x20007d84

08009304 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800930c:	bf00      	nop
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8009318:	b5b0      	push	{r4, r5, r7, lr}
 800931a:	b090      	sub	sp, #64	; 0x40
 800931c:	af00      	add	r7, sp, #0
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	60b9      	str	r1, [r7, #8]
 8009322:	4613      	mov	r3, r2
 8009324:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d101      	bne.n	8009330 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800932c:	2302      	movs	r3, #2
 800932e:	e04d      	b.n	80093cc <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	79fa      	ldrb	r2, [r7, #7]
 8009334:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2200      	movs	r2, #0
 800933c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2200      	movs	r2, #0
 8009344:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f000 f847 	bl	80093dc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2200      	movs	r2, #0
 8009352:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2200      	movs	r2, #0
 800935a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2200      	movs	r2, #0
 8009362:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2200      	movs	r2, #0
 800936a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d003      	beq.n	800937c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	68ba      	ldr	r2, [r7, #8]
 8009378:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800937c:	4b15      	ldr	r3, [pc, #84]	; (80093d4 <USBH_Init+0xbc>)
 800937e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8009382:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009384:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8009388:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800938c:	2100      	movs	r1, #0
 800938e:	4618      	mov	r0, r3
 8009390:	f006 fdb3 	bl	800fefa <osMessageCreate>
 8009394:	4602      	mov	r2, r0
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800939c:	4b0e      	ldr	r3, [pc, #56]	; (80093d8 <USBH_Init+0xc0>)
 800939e:	f107 0414 	add.w	r4, r7, #20
 80093a2:	461d      	mov	r5, r3
 80093a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80093a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80093a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80093ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 80093b0:	f107 0314 	add.w	r3, r7, #20
 80093b4:	68f9      	ldr	r1, [r7, #12]
 80093b6:	4618      	mov	r0, r3
 80093b8:	f006 fd3f 	bl	800fe3a <osThreadCreate>
 80093bc:	4602      	mov	r2, r0
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	f009 f913 	bl	80125f0 <USBH_LL_Init>

  return USBH_OK;
 80093ca:	2300      	movs	r3, #0
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3740      	adds	r7, #64	; 0x40
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bdb0      	pop	{r4, r5, r7, pc}
 80093d4:	08014250 	.word	0x08014250
 80093d8:	08014260 	.word	0x08014260

080093dc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80093e4:	2300      	movs	r3, #0
 80093e6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80093e8:	2300      	movs	r3, #0
 80093ea:	60fb      	str	r3, [r7, #12]
 80093ec:	e009      	b.n	8009402 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	33e0      	adds	r3, #224	; 0xe0
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	4413      	add	r3, r2
 80093f8:	2200      	movs	r2, #0
 80093fa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	3301      	adds	r3, #1
 8009400:	60fb      	str	r3, [r7, #12]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2b0f      	cmp	r3, #15
 8009406:	d9f2      	bls.n	80093ee <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009408:	2300      	movs	r3, #0
 800940a:	60fb      	str	r3, [r7, #12]
 800940c:	e009      	b.n	8009422 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	4413      	add	r3, r2
 8009414:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009418:	2200      	movs	r2, #0
 800941a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	3301      	adds	r3, #1
 8009420:	60fb      	str	r3, [r7, #12]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009428:	d3f1      	bcc.n	800940e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2201      	movs	r2, #1
 800943a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2240      	movs	r2, #64	; 0x40
 800944e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2201      	movs	r2, #1
 8009462:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2200      	movs	r2, #0
 8009472:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009476:	2300      	movs	r3, #0
}
 8009478:	4618      	mov	r0, r3
 800947a:	3714      	adds	r7, #20
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800948e:	2300      	movs	r3, #0
 8009490:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d016      	beq.n	80094c6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d10e      	bne.n	80094c0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80094a8:	1c59      	adds	r1, r3, #1
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	33de      	adds	r3, #222	; 0xde
 80094b4:	6839      	ldr	r1, [r7, #0]
 80094b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80094ba:	2300      	movs	r3, #0
 80094bc:	73fb      	strb	r3, [r7, #15]
 80094be:	e004      	b.n	80094ca <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80094c0:	2302      	movs	r3, #2
 80094c2:	73fb      	strb	r3, [r7, #15]
 80094c4:	e001      	b.n	80094ca <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80094c6:	2302      	movs	r3, #2
 80094c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80094ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3714      	adds	r7, #20
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80094d8:	b480      	push	{r7}
 80094da:	b085      	sub	sp, #20
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	460b      	mov	r3, r1
 80094e2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80094e4:	2300      	movs	r3, #0
 80094e6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80094ee:	78fa      	ldrb	r2, [r7, #3]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d204      	bcs.n	80094fe <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	78fa      	ldrb	r2, [r7, #3]
 80094f8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80094fc:	e001      	b.n	8009502 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80094fe:	2302      	movs	r3, #2
 8009500:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009502:	7bfb      	ldrb	r3, [r7, #15]
}
 8009504:	4618      	mov	r0, r3
 8009506:	3714      	adds	r7, #20
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009510:	b480      	push	{r7}
 8009512:	b087      	sub	sp, #28
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	4608      	mov	r0, r1
 800951a:	4611      	mov	r1, r2
 800951c:	461a      	mov	r2, r3
 800951e:	4603      	mov	r3, r0
 8009520:	70fb      	strb	r3, [r7, #3]
 8009522:	460b      	mov	r3, r1
 8009524:	70bb      	strb	r3, [r7, #2]
 8009526:	4613      	mov	r3, r2
 8009528:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800952a:	2300      	movs	r3, #0
 800952c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800952e:	2300      	movs	r3, #0
 8009530:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009538:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800953a:	e025      	b.n	8009588 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800953c:	7dfb      	ldrb	r3, [r7, #23]
 800953e:	221a      	movs	r2, #26
 8009540:	fb02 f303 	mul.w	r3, r2, r3
 8009544:	3308      	adds	r3, #8
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	4413      	add	r3, r2
 800954a:	3302      	adds	r3, #2
 800954c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	795b      	ldrb	r3, [r3, #5]
 8009552:	78fa      	ldrb	r2, [r7, #3]
 8009554:	429a      	cmp	r2, r3
 8009556:	d002      	beq.n	800955e <USBH_FindInterface+0x4e>
 8009558:	78fb      	ldrb	r3, [r7, #3]
 800955a:	2bff      	cmp	r3, #255	; 0xff
 800955c:	d111      	bne.n	8009582 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009562:	78ba      	ldrb	r2, [r7, #2]
 8009564:	429a      	cmp	r2, r3
 8009566:	d002      	beq.n	800956e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009568:	78bb      	ldrb	r3, [r7, #2]
 800956a:	2bff      	cmp	r3, #255	; 0xff
 800956c:	d109      	bne.n	8009582 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009572:	787a      	ldrb	r2, [r7, #1]
 8009574:	429a      	cmp	r2, r3
 8009576:	d002      	beq.n	800957e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009578:	787b      	ldrb	r3, [r7, #1]
 800957a:	2bff      	cmp	r3, #255	; 0xff
 800957c:	d101      	bne.n	8009582 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800957e:	7dfb      	ldrb	r3, [r7, #23]
 8009580:	e006      	b.n	8009590 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009582:	7dfb      	ldrb	r3, [r7, #23]
 8009584:	3301      	adds	r3, #1
 8009586:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009588:	7dfb      	ldrb	r3, [r7, #23]
 800958a:	2b01      	cmp	r3, #1
 800958c:	d9d6      	bls.n	800953c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800958e:	23ff      	movs	r3, #255	; 0xff
}
 8009590:	4618      	mov	r0, r3
 8009592:	371c      	adds	r7, #28
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f009 f85f 	bl	8012668 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80095aa:	2101      	movs	r1, #1
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f009 f978 	bl	80128a2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3708      	adds	r7, #8
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b088      	sub	sp, #32
 80095c0:	af04      	add	r7, sp, #16
 80095c2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80095c4:	2302      	movs	r3, #2
 80095c6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80095c8:	2300      	movs	r3, #0
 80095ca:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d102      	bne.n	80095de <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2203      	movs	r2, #3
 80095dc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	2b0b      	cmp	r3, #11
 80095e6:	f200 8247 	bhi.w	8009a78 <USBH_Process+0x4bc>
 80095ea:	a201      	add	r2, pc, #4	; (adr r2, 80095f0 <USBH_Process+0x34>)
 80095ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f0:	08009621 	.word	0x08009621
 80095f4:	0800966f 	.word	0x0800966f
 80095f8:	080096f3 	.word	0x080096f3
 80095fc:	080099f7 	.word	0x080099f7
 8009600:	08009a79 	.word	0x08009a79
 8009604:	080097b3 	.word	0x080097b3
 8009608:	08009981 	.word	0x08009981
 800960c:	08009805 	.word	0x08009805
 8009610:	08009841 	.word	0x08009841
 8009614:	0800987b 	.word	0x0800987b
 8009618:	080098d9 	.word	0x080098d9
 800961c:	080099df 	.word	0x080099df
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009626:	b2db      	uxtb	r3, r3
 8009628:	2b00      	cmp	r3, #0
 800962a:	f000 8227 	beq.w	8009a7c <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2201      	movs	r2, #1
 8009632:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009634:	20c8      	movs	r0, #200	; 0xc8
 8009636:	f009 f97b 	bl	8012930 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f009 f871 	bl	8012722 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2200      	movs	r2, #0
 800964c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2201      	movs	r2, #1
 8009654:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009664:	2200      	movs	r2, #0
 8009666:	4619      	mov	r1, r3
 8009668:	f006 fc70 	bl	800ff4c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800966c:	e206      	b.n	8009a7c <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009674:	2b01      	cmp	r3, #1
 8009676:	d107      	bne.n	8009688 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2202      	movs	r2, #2
 8009684:	701a      	strb	r2, [r3, #0]
 8009686:	e025      	b.n	80096d4 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800968e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009692:	d914      	bls.n	80096be <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800969a:	3301      	adds	r3, #1
 800969c:	b2da      	uxtb	r2, r3
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80096aa:	2b03      	cmp	r3, #3
 80096ac:	d903      	bls.n	80096b6 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	220d      	movs	r2, #13
 80096b2:	701a      	strb	r2, [r3, #0]
 80096b4:	e00e      	b.n	80096d4 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	701a      	strb	r2, [r3, #0]
 80096bc:	e00a      	b.n	80096d4 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80096c4:	f103 020a 	add.w	r2, r3, #10
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80096ce:	200a      	movs	r0, #10
 80096d0:	f009 f92e 	bl	8012930 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80096e8:	2200      	movs	r2, #0
 80096ea:	4619      	mov	r1, r3
 80096ec:	f006 fc2e 	bl	800ff4c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80096f0:	e1cb      	b.n	8009a8a <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d005      	beq.n	8009708 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009702:	2104      	movs	r1, #4
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009708:	2064      	movs	r0, #100	; 0x64
 800970a:	f009 f911 	bl	8012930 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f008 ffe0 	bl	80126d4 <USBH_LL_GetSpeed>
 8009714:	4603      	mov	r3, r0
 8009716:	461a      	mov	r2, r3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2205      	movs	r2, #5
 8009722:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009724:	2100      	movs	r1, #0
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f001 fc17 	bl	800af5a <USBH_AllocPipe>
 800972c:	4603      	mov	r3, r0
 800972e:	461a      	mov	r2, r3
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009734:	2180      	movs	r1, #128	; 0x80
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f001 fc0f 	bl	800af5a <USBH_AllocPipe>
 800973c:	4603      	mov	r3, r0
 800973e:	461a      	mov	r2, r3
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	7919      	ldrb	r1, [r3, #4]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009758:	b292      	uxth	r2, r2
 800975a:	9202      	str	r2, [sp, #8]
 800975c:	2200      	movs	r2, #0
 800975e:	9201      	str	r2, [sp, #4]
 8009760:	9300      	str	r3, [sp, #0]
 8009762:	4603      	mov	r3, r0
 8009764:	2280      	movs	r2, #128	; 0x80
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f001 fbc8 	bl	800aefc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	7959      	ldrb	r1, [r3, #5]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009780:	b292      	uxth	r2, r2
 8009782:	9202      	str	r2, [sp, #8]
 8009784:	2200      	movs	r2, #0
 8009786:	9201      	str	r2, [sp, #4]
 8009788:	9300      	str	r3, [sp, #0]
 800978a:	4603      	mov	r3, r0
 800978c:	2200      	movs	r2, #0
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f001 fbb4 	bl	800aefc <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2201      	movs	r2, #1
 8009798:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80097a8:	2200      	movs	r2, #0
 80097aa:	4619      	mov	r1, r3
 80097ac:	f006 fbce 	bl	800ff4c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80097b0:	e16b      	b.n	8009a8a <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 f96e 	bl	8009a94 <USBH_HandleEnum>
 80097b8:	4603      	mov	r3, r0
 80097ba:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80097bc:	7bbb      	ldrb	r3, [r7, #14]
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	f040 815d 	bne.w	8009a80 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d103      	bne.n	80097e0 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2208      	movs	r2, #8
 80097dc:	701a      	strb	r2, [r3, #0]
 80097de:	e002      	b.n	80097e6 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2207      	movs	r2, #7
 80097e4:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2205      	movs	r2, #5
 80097ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80097fa:	2200      	movs	r2, #0
 80097fc:	4619      	mov	r1, r3
 80097fe:	f006 fba5 	bl	800ff4c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009802:	e13d      	b.n	8009a80 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800980a:	2b00      	cmp	r3, #0
 800980c:	f000 813a 	beq.w	8009a84 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009816:	2101      	movs	r1, #1
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2208      	movs	r2, #8
 8009820:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2205      	movs	r2, #5
 8009826:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009836:	2200      	movs	r2, #0
 8009838:	4619      	mov	r1, r3
 800983a:	f006 fb87 	bl	800ff4c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800983e:	e121      	b.n	8009a84 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009846:	b29b      	uxth	r3, r3
 8009848:	4619      	mov	r1, r3
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 fd00 	bl	800a250 <USBH_SetCfg>
 8009850:	4603      	mov	r3, r0
 8009852:	2b00      	cmp	r3, #0
 8009854:	d102      	bne.n	800985c <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2209      	movs	r2, #9
 800985a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2201      	movs	r2, #1
 8009860:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009870:	2200      	movs	r2, #0
 8009872:	4619      	mov	r1, r3
 8009874:	f006 fb6a 	bl	800ff4c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009878:	e107      	b.n	8009a8a <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009880:	f003 0320 	and.w	r3, r3, #32
 8009884:	2b00      	cmp	r3, #0
 8009886:	d015      	beq.n	80098b4 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009888:	2101      	movs	r1, #1
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fd03 	bl	800a296 <USBH_SetFeature>
 8009890:	4603      	mov	r3, r0
 8009892:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009894:	7bbb      	ldrb	r3, [r7, #14]
 8009896:	b2db      	uxtb	r3, r3
 8009898:	2b00      	cmp	r3, #0
 800989a:	d103      	bne.n	80098a4 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	220a      	movs	r2, #10
 80098a0:	701a      	strb	r2, [r3, #0]
 80098a2:	e00a      	b.n	80098ba <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 80098a4:	7bbb      	ldrb	r3, [r7, #14]
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	2b03      	cmp	r3, #3
 80098aa:	d106      	bne.n	80098ba <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	220a      	movs	r2, #10
 80098b0:	701a      	strb	r2, [r3, #0]
 80098b2:	e002      	b.n	80098ba <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	220a      	movs	r2, #10
 80098b8:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2201      	movs	r2, #1
 80098be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80098ce:	2200      	movs	r2, #0
 80098d0:	4619      	mov	r1, r3
 80098d2:	f006 fb3b 	bl	800ff4c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80098d6:	e0d8      	b.n	8009a8a <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d03f      	beq.n	8009962 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80098ea:	2300      	movs	r3, #0
 80098ec:	73fb      	strb	r3, [r7, #15]
 80098ee:	e016      	b.n	800991e <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80098f0:	7bfa      	ldrb	r2, [r7, #15]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	32de      	adds	r2, #222	; 0xde
 80098f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098fa:	791a      	ldrb	r2, [r3, #4]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009902:	429a      	cmp	r2, r3
 8009904:	d108      	bne.n	8009918 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009906:	7bfa      	ldrb	r2, [r7, #15]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	32de      	adds	r2, #222	; 0xde
 800990c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009916:	e005      	b.n	8009924 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009918:	7bfb      	ldrb	r3, [r7, #15]
 800991a:	3301      	adds	r3, #1
 800991c:	73fb      	strb	r3, [r7, #15]
 800991e:	7bfb      	ldrb	r3, [r7, #15]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d0e5      	beq.n	80098f0 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800992a:	2b00      	cmp	r3, #0
 800992c:	d016      	beq.n	800995c <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	4798      	blx	r3
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d109      	bne.n	8009954 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2206      	movs	r2, #6
 8009944:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800994c:	2103      	movs	r1, #3
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	4798      	blx	r3
 8009952:	e006      	b.n	8009962 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	220d      	movs	r2, #13
 8009958:	701a      	strb	r2, [r3, #0]
 800995a:	e002      	b.n	8009962 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	220d      	movs	r2, #13
 8009960:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2205      	movs	r2, #5
 8009966:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009976:	2200      	movs	r2, #0
 8009978:	4619      	mov	r1, r3
 800997a:	f006 fae7 	bl	800ff4c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800997e:	e084      	b.n	8009a8a <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009986:	2b00      	cmp	r3, #0
 8009988:	d017      	beq.n	80099ba <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	4798      	blx	r3
 8009996:	4603      	mov	r3, r0
 8009998:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800999a:	7bbb      	ldrb	r3, [r7, #14]
 800999c:	b2db      	uxtb	r3, r3
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d103      	bne.n	80099aa <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	220b      	movs	r2, #11
 80099a6:	701a      	strb	r2, [r3, #0]
 80099a8:	e00a      	b.n	80099c0 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 80099aa:	7bbb      	ldrb	r3, [r7, #14]
 80099ac:	b2db      	uxtb	r3, r3
 80099ae:	2b02      	cmp	r3, #2
 80099b0:	d106      	bne.n	80099c0 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	220d      	movs	r2, #13
 80099b6:	701a      	strb	r2, [r3, #0]
 80099b8:	e002      	b.n	80099c0 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	220d      	movs	r2, #13
 80099be:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2205      	movs	r2, #5
 80099c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80099d4:	2200      	movs	r2, #0
 80099d6:	4619      	mov	r1, r3
 80099d8:	f006 fab8 	bl	800ff4c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80099dc:	e055      	b.n	8009a8a <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d04f      	beq.n	8009a88 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099ee:	695b      	ldr	r3, [r3, #20]
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	4798      	blx	r3
      }
      break;
 80099f4:	e048      	b.n	8009a88 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2200      	movs	r2, #0
 80099fa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f7ff fcec 	bl	80093dc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d009      	beq.n	8009a22 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d005      	beq.n	8009a38 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a32:	2105      	movs	r1, #5
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d107      	bne.n	8009a54 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f7ff fda5 	bl	800959c <USBH_Start>
 8009a52:	e002      	b.n	8009a5a <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f008 fe07 	bl	8012668 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009a6e:	2200      	movs	r2, #0
 8009a70:	4619      	mov	r1, r3
 8009a72:	f006 fa6b 	bl	800ff4c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009a76:	e008      	b.n	8009a8a <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 8009a78:	bf00      	nop
 8009a7a:	e006      	b.n	8009a8a <USBH_Process+0x4ce>
      break;
 8009a7c:	bf00      	nop
 8009a7e:	e004      	b.n	8009a8a <USBH_Process+0x4ce>
      break;
 8009a80:	bf00      	nop
 8009a82:	e002      	b.n	8009a8a <USBH_Process+0x4ce>
    break;
 8009a84:	bf00      	nop
 8009a86:	e000      	b.n	8009a8a <USBH_Process+0x4ce>
      break;
 8009a88:	bf00      	nop
  }
  return USBH_OK;
 8009a8a:	2300      	movs	r3, #0
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3710      	adds	r7, #16
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b088      	sub	sp, #32
 8009a98:	af04      	add	r7, sp, #16
 8009a9a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	785b      	ldrb	r3, [r3, #1]
 8009aa8:	2b07      	cmp	r3, #7
 8009aaa:	f200 8208 	bhi.w	8009ebe <USBH_HandleEnum+0x42a>
 8009aae:	a201      	add	r2, pc, #4	; (adr r2, 8009ab4 <USBH_HandleEnum+0x20>)
 8009ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab4:	08009ad5 	.word	0x08009ad5
 8009ab8:	08009b93 	.word	0x08009b93
 8009abc:	08009bfd 	.word	0x08009bfd
 8009ac0:	08009c8b 	.word	0x08009c8b
 8009ac4:	08009cf5 	.word	0x08009cf5
 8009ac8:	08009d65 	.word	0x08009d65
 8009acc:	08009e01 	.word	0x08009e01
 8009ad0:	08009e7f 	.word	0x08009e7f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009ad4:	2108      	movs	r1, #8
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 faea 	bl	800a0b0 <USBH_Get_DevDesc>
 8009adc:	4603      	mov	r3, r0
 8009ade:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ae0:	7bbb      	ldrb	r3, [r7, #14]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d130      	bne.n	8009b48 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2201      	movs	r2, #1
 8009af4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	7919      	ldrb	r1, [r3, #4]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009b0a:	b292      	uxth	r2, r2
 8009b0c:	9202      	str	r2, [sp, #8]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	9201      	str	r2, [sp, #4]
 8009b12:	9300      	str	r3, [sp, #0]
 8009b14:	4603      	mov	r3, r0
 8009b16:	2280      	movs	r2, #128	; 0x80
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f001 f9ef 	bl	800aefc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	7959      	ldrb	r1, [r3, #5]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009b32:	b292      	uxth	r2, r2
 8009b34:	9202      	str	r2, [sp, #8]
 8009b36:	2200      	movs	r2, #0
 8009b38:	9201      	str	r2, [sp, #4]
 8009b3a:	9300      	str	r3, [sp, #0]
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2200      	movs	r2, #0
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f001 f9db 	bl	800aefc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009b46:	e1bc      	b.n	8009ec2 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b48:	7bbb      	ldrb	r3, [r7, #14]
 8009b4a:	2b03      	cmp	r3, #3
 8009b4c:	f040 81b9 	bne.w	8009ec2 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b56:	3301      	adds	r3, #1
 8009b58:	b2da      	uxtb	r2, r3
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b66:	2b03      	cmp	r3, #3
 8009b68:	d903      	bls.n	8009b72 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	220d      	movs	r2, #13
 8009b6e:	701a      	strb	r2, [r3, #0]
      break;
 8009b70:	e1a7      	b.n	8009ec2 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	795b      	ldrb	r3, [r3, #5]
 8009b76:	4619      	mov	r1, r3
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f001 fa0f 	bl	800af9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	791b      	ldrb	r3, [r3, #4]
 8009b82:	4619      	mov	r1, r3
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f001 fa09 	bl	800af9c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	701a      	strb	r2, [r3, #0]
      break;
 8009b90:	e197      	b.n	8009ec2 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009b92:	2112      	movs	r1, #18
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 fa8b 	bl	800a0b0 <USBH_Get_DevDesc>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009b9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d103      	bne.n	8009bac <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2202      	movs	r2, #2
 8009ba8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009baa:	e18c      	b.n	8009ec6 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009bac:	7bbb      	ldrb	r3, [r7, #14]
 8009bae:	2b03      	cmp	r3, #3
 8009bb0:	f040 8189 	bne.w	8009ec6 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009bba:	3301      	adds	r3, #1
 8009bbc:	b2da      	uxtb	r2, r3
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009bca:	2b03      	cmp	r3, #3
 8009bcc:	d903      	bls.n	8009bd6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	220d      	movs	r2, #13
 8009bd2:	701a      	strb	r2, [r3, #0]
      break;
 8009bd4:	e177      	b.n	8009ec6 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	795b      	ldrb	r3, [r3, #5]
 8009bda:	4619      	mov	r1, r3
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f001 f9dd 	bl	800af9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	791b      	ldrb	r3, [r3, #4]
 8009be6:	4619      	mov	r1, r3
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f001 f9d7 	bl	800af9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	701a      	strb	r2, [r3, #0]
      break;
 8009bfa:	e164      	b.n	8009ec6 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009bfc:	2101      	movs	r1, #1
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 fb02 	bl	800a208 <USBH_SetAddress>
 8009c04:	4603      	mov	r3, r0
 8009c06:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009c08:	7bbb      	ldrb	r3, [r7, #14]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d132      	bne.n	8009c74 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009c0e:	2002      	movs	r0, #2
 8009c10:	f008 fe8e 	bl	8012930 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2203      	movs	r2, #3
 8009c20:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	7919      	ldrb	r1, [r3, #4]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009c36:	b292      	uxth	r2, r2
 8009c38:	9202      	str	r2, [sp, #8]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	9201      	str	r2, [sp, #4]
 8009c3e:	9300      	str	r3, [sp, #0]
 8009c40:	4603      	mov	r3, r0
 8009c42:	2280      	movs	r2, #128	; 0x80
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f001 f959 	bl	800aefc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	7959      	ldrb	r1, [r3, #5]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009c5e:	b292      	uxth	r2, r2
 8009c60:	9202      	str	r2, [sp, #8]
 8009c62:	2200      	movs	r2, #0
 8009c64:	9201      	str	r2, [sp, #4]
 8009c66:	9300      	str	r3, [sp, #0]
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f001 f945 	bl	800aefc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009c72:	e12a      	b.n	8009eca <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c74:	7bbb      	ldrb	r3, [r7, #14]
 8009c76:	2b03      	cmp	r3, #3
 8009c78:	f040 8127 	bne.w	8009eca <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	220d      	movs	r2, #13
 8009c80:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2200      	movs	r2, #0
 8009c86:	705a      	strb	r2, [r3, #1]
      break;
 8009c88:	e11f      	b.n	8009eca <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009c8a:	2109      	movs	r1, #9
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 fa37 	bl	800a100 <USBH_Get_CfgDesc>
 8009c92:	4603      	mov	r3, r0
 8009c94:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009c96:	7bbb      	ldrb	r3, [r7, #14]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d103      	bne.n	8009ca4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2204      	movs	r2, #4
 8009ca0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009ca2:	e114      	b.n	8009ece <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ca4:	7bbb      	ldrb	r3, [r7, #14]
 8009ca6:	2b03      	cmp	r3, #3
 8009ca8:	f040 8111 	bne.w	8009ece <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	b2da      	uxtb	r2, r3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009cc2:	2b03      	cmp	r3, #3
 8009cc4:	d903      	bls.n	8009cce <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	220d      	movs	r2, #13
 8009cca:	701a      	strb	r2, [r3, #0]
      break;
 8009ccc:	e0ff      	b.n	8009ece <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	795b      	ldrb	r3, [r3, #5]
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f001 f961 	bl	800af9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	791b      	ldrb	r3, [r3, #4]
 8009cde:	4619      	mov	r1, r3
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f001 f95b 	bl	800af9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	701a      	strb	r2, [r3, #0]
      break;
 8009cf2:	e0ec      	b.n	8009ece <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 f9ff 	bl	800a100 <USBH_Get_CfgDesc>
 8009d02:	4603      	mov	r3, r0
 8009d04:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009d06:	7bbb      	ldrb	r3, [r7, #14]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d103      	bne.n	8009d14 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2205      	movs	r2, #5
 8009d10:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009d12:	e0de      	b.n	8009ed2 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d14:	7bbb      	ldrb	r3, [r7, #14]
 8009d16:	2b03      	cmp	r3, #3
 8009d18:	f040 80db 	bne.w	8009ed2 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009d22:	3301      	adds	r3, #1
 8009d24:	b2da      	uxtb	r2, r3
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009d32:	2b03      	cmp	r3, #3
 8009d34:	d903      	bls.n	8009d3e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	220d      	movs	r2, #13
 8009d3a:	701a      	strb	r2, [r3, #0]
      break;
 8009d3c:	e0c9      	b.n	8009ed2 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	795b      	ldrb	r3, [r3, #5]
 8009d42:	4619      	mov	r1, r3
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f001 f929 	bl	800af9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	791b      	ldrb	r3, [r3, #4]
 8009d4e:	4619      	mov	r1, r3
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f001 f923 	bl	800af9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	701a      	strb	r2, [r3, #0]
      break;
 8009d62:	e0b6      	b.n	8009ed2 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d036      	beq.n	8009ddc <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009d7a:	23ff      	movs	r3, #255	; 0xff
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 f9e3 	bl	800a148 <USBH_Get_StringDesc>
 8009d82:	4603      	mov	r3, r0
 8009d84:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009d86:	7bbb      	ldrb	r3, [r7, #14]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d111      	bne.n	8009db0 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2206      	movs	r2, #6
 8009d90:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2205      	movs	r2, #5
 8009d96:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009da6:	2200      	movs	r2, #0
 8009da8:	4619      	mov	r1, r3
 8009daa:	f006 f8cf 	bl	800ff4c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009dae:	e092      	b.n	8009ed6 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009db0:	7bbb      	ldrb	r3, [r7, #14]
 8009db2:	2b03      	cmp	r3, #3
 8009db4:	f040 808f 	bne.w	8009ed6 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2206      	movs	r2, #6
 8009dbc:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2205      	movs	r2, #5
 8009dc2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	f006 f8b9 	bl	800ff4c <osMessagePut>
      break;
 8009dda:	e07c      	b.n	8009ed6 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2206      	movs	r2, #6
 8009de0:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2205      	movs	r2, #5
 8009de6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009df6:	2200      	movs	r2, #0
 8009df8:	4619      	mov	r1, r3
 8009dfa:	f006 f8a7 	bl	800ff4c <osMessagePut>
      break;
 8009dfe:	e06a      	b.n	8009ed6 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d027      	beq.n	8009e5a <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009e16:	23ff      	movs	r3, #255	; 0xff
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 f995 	bl	800a148 <USBH_Get_StringDesc>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009e22:	7bbb      	ldrb	r3, [r7, #14]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d103      	bne.n	8009e30 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2207      	movs	r2, #7
 8009e2c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009e2e:	e054      	b.n	8009eda <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e30:	7bbb      	ldrb	r3, [r7, #14]
 8009e32:	2b03      	cmp	r3, #3
 8009e34:	d151      	bne.n	8009eda <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2207      	movs	r2, #7
 8009e3a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2205      	movs	r2, #5
 8009e40:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009e50:	2200      	movs	r2, #0
 8009e52:	4619      	mov	r1, r3
 8009e54:	f006 f87a 	bl	800ff4c <osMessagePut>
      break;
 8009e58:	e03f      	b.n	8009eda <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2207      	movs	r2, #7
 8009e5e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2205      	movs	r2, #5
 8009e64:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009e74:	2200      	movs	r2, #0
 8009e76:	4619      	mov	r1, r3
 8009e78:	f006 f868 	bl	800ff4c <osMessagePut>
      break;
 8009e7c:	e02d      	b.n	8009eda <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d017      	beq.n	8009eb8 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009e94:	23ff      	movs	r3, #255	; 0xff
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 f956 	bl	800a148 <USBH_Get_StringDesc>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009ea0:	7bbb      	ldrb	r3, [r7, #14]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d102      	bne.n	8009eac <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009eaa:	e018      	b.n	8009ede <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009eac:	7bbb      	ldrb	r3, [r7, #14]
 8009eae:	2b03      	cmp	r3, #3
 8009eb0:	d115      	bne.n	8009ede <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	73fb      	strb	r3, [r7, #15]
      break;
 8009eb6:	e012      	b.n	8009ede <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	73fb      	strb	r3, [r7, #15]
      break;
 8009ebc:	e00f      	b.n	8009ede <USBH_HandleEnum+0x44a>

    default:
      break;
 8009ebe:	bf00      	nop
 8009ec0:	e00e      	b.n	8009ee0 <USBH_HandleEnum+0x44c>
      break;
 8009ec2:	bf00      	nop
 8009ec4:	e00c      	b.n	8009ee0 <USBH_HandleEnum+0x44c>
      break;
 8009ec6:	bf00      	nop
 8009ec8:	e00a      	b.n	8009ee0 <USBH_HandleEnum+0x44c>
      break;
 8009eca:	bf00      	nop
 8009ecc:	e008      	b.n	8009ee0 <USBH_HandleEnum+0x44c>
      break;
 8009ece:	bf00      	nop
 8009ed0:	e006      	b.n	8009ee0 <USBH_HandleEnum+0x44c>
      break;
 8009ed2:	bf00      	nop
 8009ed4:	e004      	b.n	8009ee0 <USBH_HandleEnum+0x44c>
      break;
 8009ed6:	bf00      	nop
 8009ed8:	e002      	b.n	8009ee0 <USBH_HandleEnum+0x44c>
      break;
 8009eda:	bf00      	nop
 8009edc:	e000      	b.n	8009ee0 <USBH_HandleEnum+0x44c>
      break;
 8009ede:	bf00      	nop
  }
  return Status;
 8009ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop

08009eec <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	683a      	ldr	r2, [r7, #0]
 8009efa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009efe:	bf00      	nop
 8009f00:	370c      	adds	r7, #12
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr

08009f0a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b082      	sub	sp, #8
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009f18:	1c5a      	adds	r2, r3, #1
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 f804 	bl	8009f2e <USBH_HandleSof>
}
 8009f26:	bf00      	nop
 8009f28:	3708      	adds	r7, #8
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b082      	sub	sp, #8
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	2b0b      	cmp	r3, #11
 8009f3e:	d10a      	bne.n	8009f56 <USBH_HandleSof+0x28>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d005      	beq.n	8009f56 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f50:	699b      	ldr	r3, [r3, #24]
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	4798      	blx	r3
  }
}
 8009f56:	bf00      	nop
 8009f58:	3708      	adds	r7, #8
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b082      	sub	sp, #8
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2201      	movs	r2, #1
 8009f6a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2201      	movs	r2, #1
 8009f72:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009f82:	2200      	movs	r2, #0
 8009f84:	4619      	mov	r1, r3
 8009f86:	f005 ffe1 	bl	800ff4c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009f8a:	bf00      	nop
}
 8009f8c:	3708      	adds	r7, #8
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}

08009f92 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009f92:	b480      	push	{r7}
 8009f94:	b083      	sub	sp, #12
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009fa2:	bf00      	nop
}
 8009fa4:	370c      	adds	r7, #12
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr

08009fae <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b082      	sub	sp, #8
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2201      	movs	r2, #1
 8009fba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	f005 ffb1 	bl	800ff4c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009fea:	2300      	movs	r3, #0
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3708      	adds	r7, #8
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2201      	movs	r2, #1
 800a000:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2200      	movs	r2, #0
 800a008:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f008 fb42 	bl	801269e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	791b      	ldrb	r3, [r3, #4]
 800a01e:	4619      	mov	r1, r3
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 ffbb 	bl	800af9c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	795b      	ldrb	r3, [r3, #5]
 800a02a:	4619      	mov	r1, r3
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 ffb5 	bl	800af9c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2201      	movs	r2, #1
 800a036:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a046:	2200      	movs	r2, #0
 800a048:	4619      	mov	r1, r3
 800a04a:	f005 ff7f 	bl	800ff4c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a04e:	2300      	movs	r3, #0
}
 800a050:	4618      	mov	r0, r3
 800a052:	3708      	adds	r7, #8
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b086      	sub	sp, #24
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800a066:	f107 030c 	add.w	r3, r7, #12
 800a06a:	f04f 32ff 	mov.w	r2, #4294967295
 800a06e:	4618      	mov	r0, r3
 800a070:	f005 ffac 	bl	800ffcc <osMessageGet>
    if (event.status == osEventMessage)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2b10      	cmp	r3, #16
 800a078:	d1f2      	bne.n	800a060 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f7ff fa9e 	bl	80095bc <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800a080:	e7ee      	b.n	800a060 <USBH_Process_OS+0x8>

0800a082 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b082      	sub	sp, #8
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2201      	movs	r2, #1
 800a08e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a09e:	2200      	movs	r2, #0
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	f005 ff53 	bl	800ff4c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800a0a6:	2300      	movs	r3, #0
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3708      	adds	r7, #8
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b086      	sub	sp, #24
 800a0b4:	af02      	add	r7, sp, #8
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a0c2:	78fb      	ldrb	r3, [r7, #3]
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	9300      	str	r3, [sp, #0]
 800a0c8:	4613      	mov	r3, r2
 800a0ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a0ce:	2100      	movs	r1, #0
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f000 f864 	bl	800a19e <USBH_GetDescriptor>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800a0da:	7bfb      	ldrb	r3, [r7, #15]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d10a      	bne.n	800a0f6 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a0ec:	78fa      	ldrb	r2, [r7, #3]
 800a0ee:	b292      	uxth	r2, r2
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	f000 f918 	bl	800a326 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a0f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3710      	adds	r7, #16
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a100:	b580      	push	{r7, lr}
 800a102:	b086      	sub	sp, #24
 800a104:	af02      	add	r7, sp, #8
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	460b      	mov	r3, r1
 800a10a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	331c      	adds	r3, #28
 800a110:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a112:	887b      	ldrh	r3, [r7, #2]
 800a114:	9300      	str	r3, [sp, #0]
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a11c:	2100      	movs	r1, #0
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 f83d 	bl	800a19e <USBH_GetDescriptor>
 800a124:	4603      	mov	r3, r0
 800a126:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a128:	7bfb      	ldrb	r3, [r7, #15]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d107      	bne.n	800a13e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a12e:	887b      	ldrh	r3, [r7, #2]
 800a130:	461a      	mov	r2, r3
 800a132:	68b9      	ldr	r1, [r7, #8]
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 f987 	bl	800a448 <USBH_ParseCfgDesc>
 800a13a:	4603      	mov	r3, r0
 800a13c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a140:	4618      	mov	r0, r3
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b088      	sub	sp, #32
 800a14c:	af02      	add	r7, sp, #8
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	607a      	str	r2, [r7, #4]
 800a152:	461a      	mov	r2, r3
 800a154:	460b      	mov	r3, r1
 800a156:	72fb      	strb	r3, [r7, #11]
 800a158:	4613      	mov	r3, r2
 800a15a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800a15c:	7afb      	ldrb	r3, [r7, #11]
 800a15e:	b29b      	uxth	r3, r3
 800a160:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a164:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a16c:	893b      	ldrh	r3, [r7, #8]
 800a16e:	9300      	str	r3, [sp, #0]
 800a170:	460b      	mov	r3, r1
 800a172:	2100      	movs	r1, #0
 800a174:	68f8      	ldr	r0, [r7, #12]
 800a176:	f000 f812 	bl	800a19e <USBH_GetDescriptor>
 800a17a:	4603      	mov	r3, r0
 800a17c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a17e:	7dfb      	ldrb	r3, [r7, #23]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d107      	bne.n	800a194 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a18a:	893a      	ldrh	r2, [r7, #8]
 800a18c:	6879      	ldr	r1, [r7, #4]
 800a18e:	4618      	mov	r0, r3
 800a190:	f000 fb24 	bl	800a7dc <USBH_ParseStringDesc>
  }

  return status;
 800a194:	7dfb      	ldrb	r3, [r7, #23]
}
 800a196:	4618      	mov	r0, r3
 800a198:	3718      	adds	r7, #24
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}

0800a19e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a19e:	b580      	push	{r7, lr}
 800a1a0:	b084      	sub	sp, #16
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	60f8      	str	r0, [r7, #12]
 800a1a6:	607b      	str	r3, [r7, #4]
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	72fb      	strb	r3, [r7, #11]
 800a1ac:	4613      	mov	r3, r2
 800a1ae:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	789b      	ldrb	r3, [r3, #2]
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d11c      	bne.n	800a1f2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a1b8:	7afb      	ldrb	r3, [r7, #11]
 800a1ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a1be:	b2da      	uxtb	r2, r3
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2206      	movs	r2, #6
 800a1c8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	893a      	ldrh	r2, [r7, #8]
 800a1ce:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a1d0:	893b      	ldrh	r3, [r7, #8]
 800a1d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a1d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a1da:	d104      	bne.n	800a1e6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f240 4209 	movw	r2, #1033	; 0x409
 800a1e2:	829a      	strh	r2, [r3, #20]
 800a1e4:	e002      	b.n	800a1ec <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	8b3a      	ldrh	r2, [r7, #24]
 800a1f0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a1f2:	8b3b      	ldrh	r3, [r7, #24]
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	6879      	ldr	r1, [r7, #4]
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f000 fb3d 	bl	800a878 <USBH_CtlReq>
 800a1fe:	4603      	mov	r3, r0
}
 800a200:	4618      	mov	r0, r3
 800a202:	3710      	adds	r7, #16
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	460b      	mov	r3, r1
 800a212:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	789b      	ldrb	r3, [r3, #2]
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d10f      	bne.n	800a23c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2200      	movs	r2, #0
 800a220:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2205      	movs	r2, #5
 800a226:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a228:	78fb      	ldrb	r3, [r7, #3]
 800a22a:	b29a      	uxth	r2, r3
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2200      	movs	r2, #0
 800a23a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a23c:	2200      	movs	r2, #0
 800a23e:	2100      	movs	r1, #0
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 fb19 	bl	800a878 <USBH_CtlReq>
 800a246:	4603      	mov	r3, r0
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3708      	adds	r7, #8
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	460b      	mov	r3, r1
 800a25a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	789b      	ldrb	r3, [r3, #2]
 800a260:	2b01      	cmp	r3, #1
 800a262:	d10e      	bne.n	800a282 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2200      	movs	r2, #0
 800a268:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2209      	movs	r2, #9
 800a26e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	887a      	ldrh	r2, [r7, #2]
 800a274:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2200      	movs	r2, #0
 800a27a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2200      	movs	r2, #0
 800a280:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a282:	2200      	movs	r2, #0
 800a284:	2100      	movs	r1, #0
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 faf6 	bl	800a878 <USBH_CtlReq>
 800a28c:	4603      	mov	r3, r0
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3708      	adds	r7, #8
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}

0800a296 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a296:	b580      	push	{r7, lr}
 800a298:	b082      	sub	sp, #8
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
 800a29e:	460b      	mov	r3, r1
 800a2a0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	789b      	ldrb	r3, [r3, #2]
 800a2a6:	2b01      	cmp	r3, #1
 800a2a8:	d10f      	bne.n	800a2ca <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2203      	movs	r2, #3
 800a2b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a2b6:	78fb      	ldrb	r3, [r7, #3]
 800a2b8:	b29a      	uxth	r2, r3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	2100      	movs	r1, #0
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 fad2 	bl	800a878 <USBH_CtlReq>
 800a2d4:	4603      	mov	r3, r0
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3708      	adds	r7, #8
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b082      	sub	sp, #8
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	789b      	ldrb	r3, [r3, #2]
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	d10f      	bne.n	800a312 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2202      	movs	r2, #2
 800a2f6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2200      	movs	r2, #0
 800a302:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a304:	78fb      	ldrb	r3, [r7, #3]
 800a306:	b29a      	uxth	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800a312:	2200      	movs	r2, #0
 800a314:	2100      	movs	r1, #0
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f000 faae 	bl	800a878 <USBH_CtlReq>
 800a31c:	4603      	mov	r3, r0
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3708      	adds	r7, #8
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a326:	b480      	push	{r7}
 800a328:	b085      	sub	sp, #20
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	60f8      	str	r0, [r7, #12]
 800a32e:	60b9      	str	r1, [r7, #8]
 800a330:	4613      	mov	r3, r2
 800a332:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	781a      	ldrb	r2, [r3, #0]
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	785a      	ldrb	r2, [r3, #1]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	3302      	adds	r3, #2
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	b29a      	uxth	r2, r3
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	3303      	adds	r3, #3
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	b29b      	uxth	r3, r3
 800a354:	021b      	lsls	r3, r3, #8
 800a356:	b29b      	uxth	r3, r3
 800a358:	4313      	orrs	r3, r2
 800a35a:	b29a      	uxth	r2, r3
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	791a      	ldrb	r2, [r3, #4]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	795a      	ldrb	r2, [r3, #5]
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	799a      	ldrb	r2, [r3, #6]
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	79da      	ldrb	r2, [r3, #7]
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	79db      	ldrb	r3, [r3, #7]
 800a384:	2b20      	cmp	r3, #32
 800a386:	dc11      	bgt.n	800a3ac <USBH_ParseDevDesc+0x86>
 800a388:	2b08      	cmp	r3, #8
 800a38a:	db16      	blt.n	800a3ba <USBH_ParseDevDesc+0x94>
 800a38c:	3b08      	subs	r3, #8
 800a38e:	2201      	movs	r2, #1
 800a390:	fa02 f303 	lsl.w	r3, r2, r3
 800a394:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800a398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	bf14      	ite	ne
 800a3a0:	2301      	movne	r3, #1
 800a3a2:	2300      	moveq	r3, #0
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d102      	bne.n	800a3b0 <USBH_ParseDevDesc+0x8a>
 800a3aa:	e006      	b.n	800a3ba <USBH_ParseDevDesc+0x94>
 800a3ac:	2b40      	cmp	r3, #64	; 0x40
 800a3ae:	d104      	bne.n	800a3ba <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	79da      	ldrb	r2, [r3, #7]
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	71da      	strb	r2, [r3, #7]
      break;
 800a3b8:	e003      	b.n	800a3c2 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2240      	movs	r2, #64	; 0x40
 800a3be:	71da      	strb	r2, [r3, #7]
      break;
 800a3c0:	bf00      	nop
  }

  if (length > 8U)
 800a3c2:	88fb      	ldrh	r3, [r7, #6]
 800a3c4:	2b08      	cmp	r3, #8
 800a3c6:	d939      	bls.n	800a43c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	3308      	adds	r3, #8
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	b29a      	uxth	r2, r3
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	3309      	adds	r3, #9
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	021b      	lsls	r3, r3, #8
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	b29a      	uxth	r2, r3
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	330a      	adds	r3, #10
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	b29a      	uxth	r2, r3
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	330b      	adds	r3, #11
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	021b      	lsls	r3, r3, #8
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	b29a      	uxth	r2, r3
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	330c      	adds	r3, #12
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	b29a      	uxth	r2, r3
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	330d      	adds	r3, #13
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	b29b      	uxth	r3, r3
 800a410:	021b      	lsls	r3, r3, #8
 800a412:	b29b      	uxth	r3, r3
 800a414:	4313      	orrs	r3, r2
 800a416:	b29a      	uxth	r2, r3
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	7b9a      	ldrb	r2, [r3, #14]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	7bda      	ldrb	r2, [r3, #15]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	7c1a      	ldrb	r2, [r3, #16]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	7c5a      	ldrb	r2, [r3, #17]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	745a      	strb	r2, [r3, #17]
  }
}
 800a43c:	bf00      	nop
 800a43e:	3714      	adds	r7, #20
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b08c      	sub	sp, #48	; 0x30
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	4613      	mov	r3, r2
 800a454:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a45c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a45e:	2300      	movs	r3, #0
 800a460:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a468:	2300      	movs	r3, #0
 800a46a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800a46e:	2300      	movs	r3, #0
 800a470:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	781a      	ldrb	r2, [r3, #0]
 800a47c:	6a3b      	ldr	r3, [r7, #32]
 800a47e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	785a      	ldrb	r2, [r3, #1]
 800a484:	6a3b      	ldr	r3, [r7, #32]
 800a486:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	3302      	adds	r3, #2
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	b29a      	uxth	r2, r3
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	3303      	adds	r3, #3
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	b29b      	uxth	r3, r3
 800a498:	021b      	lsls	r3, r3, #8
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	4313      	orrs	r3, r2
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4a4:	bf28      	it	cs
 800a4a6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800a4aa:	b29a      	uxth	r2, r3
 800a4ac:	6a3b      	ldr	r3, [r7, #32]
 800a4ae:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	791a      	ldrb	r2, [r3, #4]
 800a4b4:	6a3b      	ldr	r3, [r7, #32]
 800a4b6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	795a      	ldrb	r2, [r3, #5]
 800a4bc:	6a3b      	ldr	r3, [r7, #32]
 800a4be:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	799a      	ldrb	r2, [r3, #6]
 800a4c4:	6a3b      	ldr	r3, [r7, #32]
 800a4c6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	79da      	ldrb	r2, [r3, #7]
 800a4cc:	6a3b      	ldr	r3, [r7, #32]
 800a4ce:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	7a1a      	ldrb	r2, [r3, #8]
 800a4d4:	6a3b      	ldr	r3, [r7, #32]
 800a4d6:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800a4d8:	6a3b      	ldr	r3, [r7, #32]
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	2b09      	cmp	r3, #9
 800a4de:	d002      	beq.n	800a4e6 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a4e0:	6a3b      	ldr	r3, [r7, #32]
 800a4e2:	2209      	movs	r2, #9
 800a4e4:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a4e6:	88fb      	ldrh	r3, [r7, #6]
 800a4e8:	2b09      	cmp	r3, #9
 800a4ea:	f240 809d 	bls.w	800a628 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800a4ee:	2309      	movs	r3, #9
 800a4f0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a4f6:	e081      	b.n	800a5fc <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a4f8:	f107 0316 	add.w	r3, r7, #22
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a500:	f000 f99f 	bl	800a842 <USBH_GetNextDesc>
 800a504:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a508:	785b      	ldrb	r3, [r3, #1]
 800a50a:	2b04      	cmp	r3, #4
 800a50c:	d176      	bne.n	800a5fc <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	2b09      	cmp	r3, #9
 800a514:	d002      	beq.n	800a51c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a518:	2209      	movs	r2, #9
 800a51a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a51c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a520:	221a      	movs	r2, #26
 800a522:	fb02 f303 	mul.w	r3, r2, r3
 800a526:	3308      	adds	r3, #8
 800a528:	6a3a      	ldr	r2, [r7, #32]
 800a52a:	4413      	add	r3, r2
 800a52c:	3302      	adds	r3, #2
 800a52e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a530:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a532:	69f8      	ldr	r0, [r7, #28]
 800a534:	f000 f87e 	bl	800a634 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a538:	2300      	movs	r3, #0
 800a53a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a53e:	2300      	movs	r3, #0
 800a540:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a542:	e043      	b.n	800a5cc <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a544:	f107 0316 	add.w	r3, r7, #22
 800a548:	4619      	mov	r1, r3
 800a54a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a54c:	f000 f979 	bl	800a842 <USBH_GetNextDesc>
 800a550:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a554:	785b      	ldrb	r3, [r3, #1]
 800a556:	2b05      	cmp	r3, #5
 800a558:	d138      	bne.n	800a5cc <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800a55a:	69fb      	ldr	r3, [r7, #28]
 800a55c:	795b      	ldrb	r3, [r3, #5]
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d10f      	bne.n	800a582 <USBH_ParseCfgDesc+0x13a>
 800a562:	69fb      	ldr	r3, [r7, #28]
 800a564:	799b      	ldrb	r3, [r3, #6]
 800a566:	2b02      	cmp	r3, #2
 800a568:	d10b      	bne.n	800a582 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a56a:	69fb      	ldr	r3, [r7, #28]
 800a56c:	79db      	ldrb	r3, [r3, #7]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d10f      	bne.n	800a592 <USBH_ParseCfgDesc+0x14a>
 800a572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	2b09      	cmp	r3, #9
 800a578:	d00b      	beq.n	800a592 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800a57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a57c:	2209      	movs	r2, #9
 800a57e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a580:	e007      	b.n	800a592 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800a582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	2b07      	cmp	r3, #7
 800a588:	d004      	beq.n	800a594 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a58c:	2207      	movs	r2, #7
 800a58e:	701a      	strb	r2, [r3, #0]
 800a590:	e000      	b.n	800a594 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a592:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a598:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a59c:	3201      	adds	r2, #1
 800a59e:	00d2      	lsls	r2, r2, #3
 800a5a0:	211a      	movs	r1, #26
 800a5a2:	fb01 f303 	mul.w	r3, r1, r3
 800a5a6:	4413      	add	r3, r2
 800a5a8:	3308      	adds	r3, #8
 800a5aa:	6a3a      	ldr	r2, [r7, #32]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	3304      	adds	r3, #4
 800a5b0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a5b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5b4:	69b9      	ldr	r1, [r7, #24]
 800a5b6:	68f8      	ldr	r0, [r7, #12]
 800a5b8:	f000 f86b 	bl	800a692 <USBH_ParseEPDesc>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800a5c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a5cc:	69fb      	ldr	r3, [r7, #28]
 800a5ce:	791b      	ldrb	r3, [r3, #4]
 800a5d0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d204      	bcs.n	800a5e2 <USBH_ParseCfgDesc+0x19a>
 800a5d8:	6a3b      	ldr	r3, [r7, #32]
 800a5da:	885a      	ldrh	r2, [r3, #2]
 800a5dc:	8afb      	ldrh	r3, [r7, #22]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d8b0      	bhi.n	800a544 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	791b      	ldrb	r3, [r3, #4]
 800a5e6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d201      	bcs.n	800a5f2 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800a5ee:	2303      	movs	r3, #3
 800a5f0:	e01c      	b.n	800a62c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800a5f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a5fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a600:	2b01      	cmp	r3, #1
 800a602:	d805      	bhi.n	800a610 <USBH_ParseCfgDesc+0x1c8>
 800a604:	6a3b      	ldr	r3, [r7, #32]
 800a606:	885a      	ldrh	r2, [r3, #2]
 800a608:	8afb      	ldrh	r3, [r7, #22]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	f63f af74 	bhi.w	800a4f8 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a610:	6a3b      	ldr	r3, [r7, #32]
 800a612:	791b      	ldrb	r3, [r3, #4]
 800a614:	2b02      	cmp	r3, #2
 800a616:	bf28      	it	cs
 800a618:	2302      	movcs	r3, #2
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a620:	429a      	cmp	r2, r3
 800a622:	d201      	bcs.n	800a628 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800a624:	2303      	movs	r3, #3
 800a626:	e001      	b.n	800a62c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800a628:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3730      	adds	r7, #48	; 0x30
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a634:	b480      	push	{r7}
 800a636:	b083      	sub	sp, #12
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	781a      	ldrb	r2, [r3, #0]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	785a      	ldrb	r2, [r3, #1]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	789a      	ldrb	r2, [r3, #2]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	78da      	ldrb	r2, [r3, #3]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	791a      	ldrb	r2, [r3, #4]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	795a      	ldrb	r2, [r3, #5]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	799a      	ldrb	r2, [r3, #6]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	79da      	ldrb	r2, [r3, #7]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	7a1a      	ldrb	r2, [r3, #8]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	721a      	strb	r2, [r3, #8]
}
 800a686:	bf00      	nop
 800a688:	370c      	adds	r7, #12
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr

0800a692 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800a692:	b480      	push	{r7}
 800a694:	b087      	sub	sp, #28
 800a696:	af00      	add	r7, sp, #0
 800a698:	60f8      	str	r0, [r7, #12]
 800a69a:	60b9      	str	r1, [r7, #8]
 800a69c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	781a      	ldrb	r2, [r3, #0]
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	785a      	ldrb	r2, [r3, #1]
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	789a      	ldrb	r2, [r3, #2]
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	78da      	ldrb	r2, [r3, #3]
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	3304      	adds	r3, #4
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	b29a      	uxth	r2, r3
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	3305      	adds	r3, #5
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	b29b      	uxth	r3, r3
 800a6d2:	021b      	lsls	r3, r3, #8
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	b29a      	uxth	r2, r3
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	799a      	ldrb	r2, [r3, #6]
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	889b      	ldrh	r3, [r3, #4]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d102      	bne.n	800a6f4 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	75fb      	strb	r3, [r7, #23]
 800a6f2:	e033      	b.n	800a75c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	889b      	ldrh	r3, [r3, #4]
 800a6f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a6fc:	f023 0307 	bic.w	r3, r3, #7
 800a700:	b29a      	uxth	r2, r3
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	889b      	ldrh	r3, [r3, #4]
 800a70a:	b21a      	sxth	r2, r3
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	3304      	adds	r3, #4
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	b299      	uxth	r1, r3
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	3305      	adds	r3, #5
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	b29b      	uxth	r3, r3
 800a71c:	021b      	lsls	r3, r3, #8
 800a71e:	b29b      	uxth	r3, r3
 800a720:	430b      	orrs	r3, r1
 800a722:	b29b      	uxth	r3, r3
 800a724:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d110      	bne.n	800a74e <USBH_ParseEPDesc+0xbc>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	3304      	adds	r3, #4
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	b299      	uxth	r1, r3
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	3305      	adds	r3, #5
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	021b      	lsls	r3, r3, #8
 800a73e:	b29b      	uxth	r3, r3
 800a740:	430b      	orrs	r3, r1
 800a742:	b29b      	uxth	r3, r3
 800a744:	b21b      	sxth	r3, r3
 800a746:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a74a:	b21b      	sxth	r3, r3
 800a74c:	e001      	b.n	800a752 <USBH_ParseEPDesc+0xc0>
 800a74e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a752:	4313      	orrs	r3, r2
 800a754:	b21b      	sxth	r3, r3
 800a756:	b29a      	uxth	r2, r3
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a762:	2b00      	cmp	r3, #0
 800a764:	d116      	bne.n	800a794 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	78db      	ldrb	r3, [r3, #3]
 800a76a:	f003 0303 	and.w	r3, r3, #3
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d005      	beq.n	800a77e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	78db      	ldrb	r3, [r3, #3]
 800a776:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a77a:	2b03      	cmp	r3, #3
 800a77c:	d127      	bne.n	800a7ce <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	799b      	ldrb	r3, [r3, #6]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d003      	beq.n	800a78e <USBH_ParseEPDesc+0xfc>
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	799b      	ldrb	r3, [r3, #6]
 800a78a:	2b10      	cmp	r3, #16
 800a78c:	d91f      	bls.n	800a7ce <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a78e:	2303      	movs	r3, #3
 800a790:	75fb      	strb	r3, [r7, #23]
 800a792:	e01c      	b.n	800a7ce <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	78db      	ldrb	r3, [r3, #3]
 800a798:	f003 0303 	and.w	r3, r3, #3
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d10a      	bne.n	800a7b6 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	799b      	ldrb	r3, [r3, #6]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d003      	beq.n	800a7b0 <USBH_ParseEPDesc+0x11e>
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	799b      	ldrb	r3, [r3, #6]
 800a7ac:	2b10      	cmp	r3, #16
 800a7ae:	d90e      	bls.n	800a7ce <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a7b0:	2303      	movs	r3, #3
 800a7b2:	75fb      	strb	r3, [r7, #23]
 800a7b4:	e00b      	b.n	800a7ce <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	78db      	ldrb	r3, [r3, #3]
 800a7ba:	f003 0303 	and.w	r3, r3, #3
 800a7be:	2b03      	cmp	r3, #3
 800a7c0:	d105      	bne.n	800a7ce <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	799b      	ldrb	r3, [r3, #6]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d101      	bne.n	800a7ce <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800a7ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	371c      	adds	r7, #28
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b087      	sub	sp, #28
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	60b9      	str	r1, [r7, #8]
 800a7e6:	4613      	mov	r3, r2
 800a7e8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	2b03      	cmp	r3, #3
 800a7f2:	d120      	bne.n	800a836 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	1e9a      	subs	r2, r3, #2
 800a7fa:	88fb      	ldrh	r3, [r7, #6]
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	bf28      	it	cs
 800a800:	4613      	movcs	r3, r2
 800a802:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	3302      	adds	r3, #2
 800a808:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a80a:	2300      	movs	r3, #0
 800a80c:	82fb      	strh	r3, [r7, #22]
 800a80e:	e00b      	b.n	800a828 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a810:	8afb      	ldrh	r3, [r7, #22]
 800a812:	68fa      	ldr	r2, [r7, #12]
 800a814:	4413      	add	r3, r2
 800a816:	781a      	ldrb	r2, [r3, #0]
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	3301      	adds	r3, #1
 800a820:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a822:	8afb      	ldrh	r3, [r7, #22]
 800a824:	3302      	adds	r3, #2
 800a826:	82fb      	strh	r3, [r7, #22]
 800a828:	8afa      	ldrh	r2, [r7, #22]
 800a82a:	8abb      	ldrh	r3, [r7, #20]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d3ef      	bcc.n	800a810 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	2200      	movs	r2, #0
 800a834:	701a      	strb	r2, [r3, #0]
  }
}
 800a836:	bf00      	nop
 800a838:	371c      	adds	r7, #28
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr

0800a842 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a842:	b480      	push	{r7}
 800a844:	b085      	sub	sp, #20
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
 800a84a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	881a      	ldrh	r2, [r3, #0]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	b29b      	uxth	r3, r3
 800a856:	4413      	add	r3, r2
 800a858:	b29a      	uxth	r2, r3
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	4413      	add	r3, r2
 800a868:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a86a:	68fb      	ldr	r3, [r7, #12]
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3714      	adds	r7, #20
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b086      	sub	sp, #24
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	60b9      	str	r1, [r7, #8]
 800a882:	4613      	mov	r3, r2
 800a884:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a886:	2301      	movs	r3, #1
 800a888:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	789b      	ldrb	r3, [r3, #2]
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d002      	beq.n	800a898 <USBH_CtlReq+0x20>
 800a892:	2b02      	cmp	r3, #2
 800a894:	d01d      	beq.n	800a8d2 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800a896:	e043      	b.n	800a920 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	68ba      	ldr	r2, [r7, #8]
 800a89c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	88fa      	ldrh	r2, [r7, #6]
 800a8a2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2202      	movs	r2, #2
 800a8ae:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2203      	movs	r2, #3
 800a8b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	f005 fb3e 	bl	800ff4c <osMessagePut>
      break;
 800a8d0:	e026      	b.n	800a920 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	f000 f82a 	bl	800a92c <USBH_HandleControl>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a8dc:	7dfb      	ldrb	r3, [r7, #23]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d002      	beq.n	800a8e8 <USBH_CtlReq+0x70>
 800a8e2:	7dfb      	ldrb	r3, [r7, #23]
 800a8e4:	2b03      	cmp	r3, #3
 800a8e6:	d106      	bne.n	800a8f6 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	761a      	strb	r2, [r3, #24]
 800a8f4:	e005      	b.n	800a902 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800a8f6:	7dfb      	ldrb	r3, [r7, #23]
 800a8f8:	2b02      	cmp	r3, #2
 800a8fa:	d102      	bne.n	800a902 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2201      	movs	r2, #1
 800a900:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2203      	movs	r2, #3
 800a906:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a916:	2200      	movs	r2, #0
 800a918:	4619      	mov	r1, r3
 800a91a:	f005 fb17 	bl	800ff4c <osMessagePut>
      break;
 800a91e:	bf00      	nop
  }
  return status;
 800a920:	7dfb      	ldrb	r3, [r7, #23]
}
 800a922:	4618      	mov	r0, r3
 800a924:	3718      	adds	r7, #24
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
	...

0800a92c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b086      	sub	sp, #24
 800a930:	af02      	add	r7, sp, #8
 800a932:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a934:	2301      	movs	r3, #1
 800a936:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a938:	2300      	movs	r3, #0
 800a93a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	7e1b      	ldrb	r3, [r3, #24]
 800a940:	3b01      	subs	r3, #1
 800a942:	2b0a      	cmp	r3, #10
 800a944:	f200 8229 	bhi.w	800ad9a <USBH_HandleControl+0x46e>
 800a948:	a201      	add	r2, pc, #4	; (adr r2, 800a950 <USBH_HandleControl+0x24>)
 800a94a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a94e:	bf00      	nop
 800a950:	0800a97d 	.word	0x0800a97d
 800a954:	0800a997 	.word	0x0800a997
 800a958:	0800aa39 	.word	0x0800aa39
 800a95c:	0800aa5f 	.word	0x0800aa5f
 800a960:	0800aaeb 	.word	0x0800aaeb
 800a964:	0800ab15 	.word	0x0800ab15
 800a968:	0800abd7 	.word	0x0800abd7
 800a96c:	0800abf9 	.word	0x0800abf9
 800a970:	0800ac8b 	.word	0x0800ac8b
 800a974:	0800acb1 	.word	0x0800acb1
 800a978:	0800ad43 	.word	0x0800ad43
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f103 0110 	add.w	r1, r3, #16
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	795b      	ldrb	r3, [r3, #5]
 800a986:	461a      	mov	r2, r3
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 fa17 	bl	800adbc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2202      	movs	r2, #2
 800a992:	761a      	strb	r2, [r3, #24]
      break;
 800a994:	e20c      	b.n	800adb0 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	795b      	ldrb	r3, [r3, #5]
 800a99a:	4619      	mov	r1, r3
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f007 ff6d 	bl	801287c <USBH_LL_GetURBState>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a9a6:	7bbb      	ldrb	r3, [r7, #14]
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d12c      	bne.n	800aa06 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	7c1b      	ldrb	r3, [r3, #16]
 800a9b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a9b4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	8adb      	ldrh	r3, [r3, #22]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d00a      	beq.n	800a9d4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a9be:	7b7b      	ldrb	r3, [r7, #13]
 800a9c0:	2b80      	cmp	r3, #128	; 0x80
 800a9c2:	d103      	bne.n	800a9cc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2203      	movs	r2, #3
 800a9c8:	761a      	strb	r2, [r3, #24]
 800a9ca:	e00d      	b.n	800a9e8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2205      	movs	r2, #5
 800a9d0:	761a      	strb	r2, [r3, #24]
 800a9d2:	e009      	b.n	800a9e8 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800a9d4:	7b7b      	ldrb	r3, [r7, #13]
 800a9d6:	2b80      	cmp	r3, #128	; 0x80
 800a9d8:	d103      	bne.n	800a9e2 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2209      	movs	r2, #9
 800a9de:	761a      	strb	r2, [r3, #24]
 800a9e0:	e002      	b.n	800a9e8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2207      	movs	r2, #7
 800a9e6:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2203      	movs	r2, #3
 800a9ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	4619      	mov	r1, r3
 800aa00:	f005 faa4 	bl	800ff4c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800aa04:	e1cb      	b.n	800ad9e <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800aa06:	7bbb      	ldrb	r3, [r7, #14]
 800aa08:	2b04      	cmp	r3, #4
 800aa0a:	d003      	beq.n	800aa14 <USBH_HandleControl+0xe8>
 800aa0c:	7bbb      	ldrb	r3, [r7, #14]
 800aa0e:	2b02      	cmp	r3, #2
 800aa10:	f040 81c5 	bne.w	800ad9e <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	220b      	movs	r2, #11
 800aa18:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2203      	movs	r2, #3
 800aa1e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aa2e:	2200      	movs	r2, #0
 800aa30:	4619      	mov	r1, r3
 800aa32:	f005 fa8b 	bl	800ff4c <osMessagePut>
      break;
 800aa36:	e1b2      	b.n	800ad9e <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aa3e:	b29a      	uxth	r2, r3
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6899      	ldr	r1, [r3, #8]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	899a      	ldrh	r2, [r3, #12]
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	791b      	ldrb	r3, [r3, #4]
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 f9f2 	bl	800ae3a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2204      	movs	r2, #4
 800aa5a:	761a      	strb	r2, [r3, #24]
      break;
 800aa5c:	e1a8      	b.n	800adb0 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	791b      	ldrb	r3, [r3, #4]
 800aa62:	4619      	mov	r1, r3
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f007 ff09 	bl	801287c <USBH_LL_GetURBState>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800aa6e:	7bbb      	ldrb	r3, [r7, #14]
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	d110      	bne.n	800aa96 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2209      	movs	r2, #9
 800aa78:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2203      	movs	r2, #3
 800aa7e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aa8e:	2200      	movs	r2, #0
 800aa90:	4619      	mov	r1, r3
 800aa92:	f005 fa5b 	bl	800ff4c <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800aa96:	7bbb      	ldrb	r3, [r7, #14]
 800aa98:	2b05      	cmp	r3, #5
 800aa9a:	d110      	bne.n	800aabe <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800aa9c:	2303      	movs	r3, #3
 800aa9e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2203      	movs	r2, #3
 800aaa4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aab4:	2200      	movs	r2, #0
 800aab6:	4619      	mov	r1, r3
 800aab8:	f005 fa48 	bl	800ff4c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800aabc:	e171      	b.n	800ada2 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800aabe:	7bbb      	ldrb	r3, [r7, #14]
 800aac0:	2b04      	cmp	r3, #4
 800aac2:	f040 816e 	bne.w	800ada2 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	220b      	movs	r2, #11
 800aaca:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2203      	movs	r2, #3
 800aad0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aae0:	2200      	movs	r2, #0
 800aae2:	4619      	mov	r1, r3
 800aae4:	f005 fa32 	bl	800ff4c <osMessagePut>
      break;
 800aae8:	e15b      	b.n	800ada2 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6899      	ldr	r1, [r3, #8]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	899a      	ldrh	r2, [r3, #12]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	795b      	ldrb	r3, [r3, #5]
 800aaf6:	2001      	movs	r0, #1
 800aaf8:	9000      	str	r0, [sp, #0]
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 f978 	bl	800adf0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ab06:	b29a      	uxth	r2, r3
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2206      	movs	r2, #6
 800ab10:	761a      	strb	r2, [r3, #24]
      break;
 800ab12:	e14d      	b.n	800adb0 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	795b      	ldrb	r3, [r3, #5]
 800ab18:	4619      	mov	r1, r3
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f007 feae 	bl	801287c <USBH_LL_GetURBState>
 800ab20:	4603      	mov	r3, r0
 800ab22:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ab24:	7bbb      	ldrb	r3, [r7, #14]
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d111      	bne.n	800ab4e <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2207      	movs	r2, #7
 800ab2e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2203      	movs	r2, #3
 800ab34:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ab44:	2200      	movs	r2, #0
 800ab46:	4619      	mov	r1, r3
 800ab48:	f005 fa00 	bl	800ff4c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ab4c:	e12b      	b.n	800ada6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800ab4e:	7bbb      	ldrb	r3, [r7, #14]
 800ab50:	2b05      	cmp	r3, #5
 800ab52:	d113      	bne.n	800ab7c <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	220c      	movs	r2, #12
 800ab58:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ab5a:	2303      	movs	r3, #3
 800ab5c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2203      	movs	r2, #3
 800ab62:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ab72:	2200      	movs	r2, #0
 800ab74:	4619      	mov	r1, r3
 800ab76:	f005 f9e9 	bl	800ff4c <osMessagePut>
      break;
 800ab7a:	e114      	b.n	800ada6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ab7c:	7bbb      	ldrb	r3, [r7, #14]
 800ab7e:	2b02      	cmp	r3, #2
 800ab80:	d111      	bne.n	800aba6 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2205      	movs	r2, #5
 800ab86:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2203      	movs	r2, #3
 800ab8c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	4619      	mov	r1, r3
 800aba0:	f005 f9d4 	bl	800ff4c <osMessagePut>
      break;
 800aba4:	e0ff      	b.n	800ada6 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800aba6:	7bbb      	ldrb	r3, [r7, #14]
 800aba8:	2b04      	cmp	r3, #4
 800abaa:	f040 80fc 	bne.w	800ada6 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	220b      	movs	r2, #11
 800abb2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800abb4:	2302      	movs	r3, #2
 800abb6:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2203      	movs	r2, #3
 800abbc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800abcc:	2200      	movs	r2, #0
 800abce:	4619      	mov	r1, r3
 800abd0:	f005 f9bc 	bl	800ff4c <osMessagePut>
      break;
 800abd4:	e0e7      	b.n	800ada6 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	791b      	ldrb	r3, [r3, #4]
 800abda:	2200      	movs	r2, #0
 800abdc:	2100      	movs	r1, #0
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 f92b 	bl	800ae3a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800abea:	b29a      	uxth	r2, r3
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2208      	movs	r2, #8
 800abf4:	761a      	strb	r2, [r3, #24]

      break;
 800abf6:	e0db      	b.n	800adb0 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	791b      	ldrb	r3, [r3, #4]
 800abfc:	4619      	mov	r1, r3
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f007 fe3c 	bl	801287c <USBH_LL_GetURBState>
 800ac04:	4603      	mov	r3, r0
 800ac06:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ac08:	7bbb      	ldrb	r3, [r7, #14]
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	d113      	bne.n	800ac36 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	220d      	movs	r2, #13
 800ac12:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ac14:	2300      	movs	r3, #0
 800ac16:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2203      	movs	r2, #3
 800ac1c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	4619      	mov	r1, r3
 800ac30:	f005 f98c 	bl	800ff4c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ac34:	e0b9      	b.n	800adaa <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800ac36:	7bbb      	ldrb	r3, [r7, #14]
 800ac38:	2b04      	cmp	r3, #4
 800ac3a:	d111      	bne.n	800ac60 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	220b      	movs	r2, #11
 800ac40:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2203      	movs	r2, #3
 800ac46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ac56:	2200      	movs	r2, #0
 800ac58:	4619      	mov	r1, r3
 800ac5a:	f005 f977 	bl	800ff4c <osMessagePut>
      break;
 800ac5e:	e0a4      	b.n	800adaa <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800ac60:	7bbb      	ldrb	r3, [r7, #14]
 800ac62:	2b05      	cmp	r3, #5
 800ac64:	f040 80a1 	bne.w	800adaa <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800ac68:	2303      	movs	r3, #3
 800ac6a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2203      	movs	r2, #3
 800ac70:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ac80:	2200      	movs	r2, #0
 800ac82:	4619      	mov	r1, r3
 800ac84:	f005 f962 	bl	800ff4c <osMessagePut>
      break;
 800ac88:	e08f      	b.n	800adaa <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	795b      	ldrb	r3, [r3, #5]
 800ac8e:	2201      	movs	r2, #1
 800ac90:	9200      	str	r2, [sp, #0]
 800ac92:	2200      	movs	r2, #0
 800ac94:	2100      	movs	r1, #0
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 f8aa 	bl	800adf0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aca2:	b29a      	uxth	r2, r3
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	220a      	movs	r2, #10
 800acac:	761a      	strb	r2, [r3, #24]
      break;
 800acae:	e07f      	b.n	800adb0 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	795b      	ldrb	r3, [r3, #5]
 800acb4:	4619      	mov	r1, r3
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f007 fde0 	bl	801287c <USBH_LL_GetURBState>
 800acbc:	4603      	mov	r3, r0
 800acbe:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800acc0:	7bbb      	ldrb	r3, [r7, #14]
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	d113      	bne.n	800acee <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800acc6:	2300      	movs	r3, #0
 800acc8:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	220d      	movs	r2, #13
 800acce:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2203      	movs	r2, #3
 800acd4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ace4:	2200      	movs	r2, #0
 800ace6:	4619      	mov	r1, r3
 800ace8:	f005 f930 	bl	800ff4c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800acec:	e05f      	b.n	800adae <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800acee:	7bbb      	ldrb	r3, [r7, #14]
 800acf0:	2b02      	cmp	r3, #2
 800acf2:	d111      	bne.n	800ad18 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2209      	movs	r2, #9
 800acf8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2203      	movs	r2, #3
 800acfe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ad0e:	2200      	movs	r2, #0
 800ad10:	4619      	mov	r1, r3
 800ad12:	f005 f91b 	bl	800ff4c <osMessagePut>
      break;
 800ad16:	e04a      	b.n	800adae <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800ad18:	7bbb      	ldrb	r3, [r7, #14]
 800ad1a:	2b04      	cmp	r3, #4
 800ad1c:	d147      	bne.n	800adae <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	220b      	movs	r2, #11
 800ad22:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2203      	movs	r2, #3
 800ad28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ad38:	2200      	movs	r2, #0
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	f005 f906 	bl	800ff4c <osMessagePut>
      break;
 800ad40:	e035      	b.n	800adae <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	7e5b      	ldrb	r3, [r3, #25]
 800ad46:	3301      	adds	r3, #1
 800ad48:	b2da      	uxtb	r2, r3
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	765a      	strb	r2, [r3, #25]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	7e5b      	ldrb	r3, [r3, #25]
 800ad52:	2b02      	cmp	r3, #2
 800ad54:	d806      	bhi.n	800ad64 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2201      	movs	r2, #1
 800ad5a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ad62:	e025      	b.n	800adb0 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad6a:	2106      	movs	r1, #6
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	795b      	ldrb	r3, [r3, #5]
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f000 f90d 	bl	800af9c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	791b      	ldrb	r3, [r3, #4]
 800ad86:	4619      	mov	r1, r3
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 f907 	bl	800af9c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2200      	movs	r2, #0
 800ad92:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ad94:	2302      	movs	r3, #2
 800ad96:	73fb      	strb	r3, [r7, #15]
      break;
 800ad98:	e00a      	b.n	800adb0 <USBH_HandleControl+0x484>

    default:
      break;
 800ad9a:	bf00      	nop
 800ad9c:	e008      	b.n	800adb0 <USBH_HandleControl+0x484>
      break;
 800ad9e:	bf00      	nop
 800ada0:	e006      	b.n	800adb0 <USBH_HandleControl+0x484>
      break;
 800ada2:	bf00      	nop
 800ada4:	e004      	b.n	800adb0 <USBH_HandleControl+0x484>
      break;
 800ada6:	bf00      	nop
 800ada8:	e002      	b.n	800adb0 <USBH_HandleControl+0x484>
      break;
 800adaa:	bf00      	nop
 800adac:	e000      	b.n	800adb0 <USBH_HandleControl+0x484>
      break;
 800adae:	bf00      	nop
  }

  return status;
 800adb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3710      	adds	r7, #16
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop

0800adbc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b088      	sub	sp, #32
 800adc0:	af04      	add	r7, sp, #16
 800adc2:	60f8      	str	r0, [r7, #12]
 800adc4:	60b9      	str	r1, [r7, #8]
 800adc6:	4613      	mov	r3, r2
 800adc8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800adca:	79f9      	ldrb	r1, [r7, #7]
 800adcc:	2300      	movs	r3, #0
 800adce:	9303      	str	r3, [sp, #12]
 800add0:	2308      	movs	r3, #8
 800add2:	9302      	str	r3, [sp, #8]
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	9301      	str	r3, [sp, #4]
 800add8:	2300      	movs	r3, #0
 800adda:	9300      	str	r3, [sp, #0]
 800addc:	2300      	movs	r3, #0
 800adde:	2200      	movs	r2, #0
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	f007 fd1a 	bl	801281a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800ade6:	2300      	movs	r3, #0
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3710      	adds	r7, #16
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b088      	sub	sp, #32
 800adf4:	af04      	add	r7, sp, #16
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	60b9      	str	r1, [r7, #8]
 800adfa:	4611      	mov	r1, r2
 800adfc:	461a      	mov	r2, r3
 800adfe:	460b      	mov	r3, r1
 800ae00:	80fb      	strh	r3, [r7, #6]
 800ae02:	4613      	mov	r3, r2
 800ae04:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d001      	beq.n	800ae14 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ae10:	2300      	movs	r3, #0
 800ae12:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae14:	7979      	ldrb	r1, [r7, #5]
 800ae16:	7e3b      	ldrb	r3, [r7, #24]
 800ae18:	9303      	str	r3, [sp, #12]
 800ae1a:	88fb      	ldrh	r3, [r7, #6]
 800ae1c:	9302      	str	r3, [sp, #8]
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	9301      	str	r3, [sp, #4]
 800ae22:	2301      	movs	r3, #1
 800ae24:	9300      	str	r3, [sp, #0]
 800ae26:	2300      	movs	r3, #0
 800ae28:	2200      	movs	r2, #0
 800ae2a:	68f8      	ldr	r0, [r7, #12]
 800ae2c:	f007 fcf5 	bl	801281a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ae30:	2300      	movs	r3, #0
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3710      	adds	r7, #16
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}

0800ae3a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ae3a:	b580      	push	{r7, lr}
 800ae3c:	b088      	sub	sp, #32
 800ae3e:	af04      	add	r7, sp, #16
 800ae40:	60f8      	str	r0, [r7, #12]
 800ae42:	60b9      	str	r1, [r7, #8]
 800ae44:	4611      	mov	r1, r2
 800ae46:	461a      	mov	r2, r3
 800ae48:	460b      	mov	r3, r1
 800ae4a:	80fb      	strh	r3, [r7, #6]
 800ae4c:	4613      	mov	r3, r2
 800ae4e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae50:	7979      	ldrb	r1, [r7, #5]
 800ae52:	2300      	movs	r3, #0
 800ae54:	9303      	str	r3, [sp, #12]
 800ae56:	88fb      	ldrh	r3, [r7, #6]
 800ae58:	9302      	str	r3, [sp, #8]
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	9301      	str	r3, [sp, #4]
 800ae5e:	2301      	movs	r3, #1
 800ae60:	9300      	str	r3, [sp, #0]
 800ae62:	2300      	movs	r3, #0
 800ae64:	2201      	movs	r2, #1
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	f007 fcd7 	bl	801281a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ae6c:	2300      	movs	r3, #0

}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3710      	adds	r7, #16
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}

0800ae76 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ae76:	b580      	push	{r7, lr}
 800ae78:	b088      	sub	sp, #32
 800ae7a:	af04      	add	r7, sp, #16
 800ae7c:	60f8      	str	r0, [r7, #12]
 800ae7e:	60b9      	str	r1, [r7, #8]
 800ae80:	4611      	mov	r1, r2
 800ae82:	461a      	mov	r2, r3
 800ae84:	460b      	mov	r3, r1
 800ae86:	80fb      	strh	r3, [r7, #6]
 800ae88:	4613      	mov	r3, r2
 800ae8a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d001      	beq.n	800ae9a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ae96:	2300      	movs	r3, #0
 800ae98:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae9a:	7979      	ldrb	r1, [r7, #5]
 800ae9c:	7e3b      	ldrb	r3, [r7, #24]
 800ae9e:	9303      	str	r3, [sp, #12]
 800aea0:	88fb      	ldrh	r3, [r7, #6]
 800aea2:	9302      	str	r3, [sp, #8]
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	9301      	str	r3, [sp, #4]
 800aea8:	2301      	movs	r3, #1
 800aeaa:	9300      	str	r3, [sp, #0]
 800aeac:	2302      	movs	r3, #2
 800aeae:	2200      	movs	r2, #0
 800aeb0:	68f8      	ldr	r0, [r7, #12]
 800aeb2:	f007 fcb2 	bl	801281a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800aeb6:	2300      	movs	r3, #0
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3710      	adds	r7, #16
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b088      	sub	sp, #32
 800aec4:	af04      	add	r7, sp, #16
 800aec6:	60f8      	str	r0, [r7, #12]
 800aec8:	60b9      	str	r1, [r7, #8]
 800aeca:	4611      	mov	r1, r2
 800aecc:	461a      	mov	r2, r3
 800aece:	460b      	mov	r3, r1
 800aed0:	80fb      	strh	r3, [r7, #6]
 800aed2:	4613      	mov	r3, r2
 800aed4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aed6:	7979      	ldrb	r1, [r7, #5]
 800aed8:	2300      	movs	r3, #0
 800aeda:	9303      	str	r3, [sp, #12]
 800aedc:	88fb      	ldrh	r3, [r7, #6]
 800aede:	9302      	str	r3, [sp, #8]
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	9301      	str	r3, [sp, #4]
 800aee4:	2301      	movs	r3, #1
 800aee6:	9300      	str	r3, [sp, #0]
 800aee8:	2302      	movs	r3, #2
 800aeea:	2201      	movs	r2, #1
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	f007 fc94 	bl	801281a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aef2:	2300      	movs	r3, #0
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3710      	adds	r7, #16
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b086      	sub	sp, #24
 800af00:	af04      	add	r7, sp, #16
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	4608      	mov	r0, r1
 800af06:	4611      	mov	r1, r2
 800af08:	461a      	mov	r2, r3
 800af0a:	4603      	mov	r3, r0
 800af0c:	70fb      	strb	r3, [r7, #3]
 800af0e:	460b      	mov	r3, r1
 800af10:	70bb      	strb	r3, [r7, #2]
 800af12:	4613      	mov	r3, r2
 800af14:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800af16:	7878      	ldrb	r0, [r7, #1]
 800af18:	78ba      	ldrb	r2, [r7, #2]
 800af1a:	78f9      	ldrb	r1, [r7, #3]
 800af1c:	8b3b      	ldrh	r3, [r7, #24]
 800af1e:	9302      	str	r3, [sp, #8]
 800af20:	7d3b      	ldrb	r3, [r7, #20]
 800af22:	9301      	str	r3, [sp, #4]
 800af24:	7c3b      	ldrb	r3, [r7, #16]
 800af26:	9300      	str	r3, [sp, #0]
 800af28:	4603      	mov	r3, r0
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f007 fc27 	bl	801277e <USBH_LL_OpenPipe>

  return USBH_OK;
 800af30:	2300      	movs	r3, #0
}
 800af32:	4618      	mov	r0, r3
 800af34:	3708      	adds	r7, #8
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}

0800af3a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800af3a:	b580      	push	{r7, lr}
 800af3c:	b082      	sub	sp, #8
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
 800af42:	460b      	mov	r3, r1
 800af44:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800af46:	78fb      	ldrb	r3, [r7, #3]
 800af48:	4619      	mov	r1, r3
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f007 fc46 	bl	80127dc <USBH_LL_ClosePipe>

  return USBH_OK;
 800af50:	2300      	movs	r3, #0
}
 800af52:	4618      	mov	r0, r3
 800af54:	3708      	adds	r7, #8
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}

0800af5a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b084      	sub	sp, #16
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
 800af62:	460b      	mov	r3, r1
 800af64:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 f836 	bl	800afd8 <USBH_GetFreePipe>
 800af6c:	4603      	mov	r3, r0
 800af6e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800af70:	89fb      	ldrh	r3, [r7, #14]
 800af72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af76:	4293      	cmp	r3, r2
 800af78:	d00a      	beq.n	800af90 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800af7a:	78fa      	ldrb	r2, [r7, #3]
 800af7c:	89fb      	ldrh	r3, [r7, #14]
 800af7e:	f003 030f 	and.w	r3, r3, #15
 800af82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800af86:	6879      	ldr	r1, [r7, #4]
 800af88:	33e0      	adds	r3, #224	; 0xe0
 800af8a:	009b      	lsls	r3, r3, #2
 800af8c:	440b      	add	r3, r1
 800af8e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800af90:	89fb      	ldrh	r3, [r7, #14]
 800af92:	b2db      	uxtb	r3, r3
}
 800af94:	4618      	mov	r0, r3
 800af96:	3710      	adds	r7, #16
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	460b      	mov	r3, r1
 800afa6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800afa8:	78fb      	ldrb	r3, [r7, #3]
 800afaa:	2b0f      	cmp	r3, #15
 800afac:	d80d      	bhi.n	800afca <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800afae:	78fb      	ldrb	r3, [r7, #3]
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	33e0      	adds	r3, #224	; 0xe0
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	4413      	add	r3, r2
 800afb8:	685a      	ldr	r2, [r3, #4]
 800afba:	78fb      	ldrb	r3, [r7, #3]
 800afbc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800afc0:	6879      	ldr	r1, [r7, #4]
 800afc2:	33e0      	adds	r3, #224	; 0xe0
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	440b      	add	r3, r1
 800afc8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800afca:	2300      	movs	r3, #0
}
 800afcc:	4618      	mov	r0, r3
 800afce:	370c      	adds	r7, #12
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800afd8:	b480      	push	{r7}
 800afda:	b085      	sub	sp, #20
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800afe0:	2300      	movs	r3, #0
 800afe2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800afe4:	2300      	movs	r3, #0
 800afe6:	73fb      	strb	r3, [r7, #15]
 800afe8:	e00f      	b.n	800b00a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800afea:	7bfb      	ldrb	r3, [r7, #15]
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	33e0      	adds	r3, #224	; 0xe0
 800aff0:	009b      	lsls	r3, r3, #2
 800aff2:	4413      	add	r3, r2
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800affa:	2b00      	cmp	r3, #0
 800affc:	d102      	bne.n	800b004 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800affe:	7bfb      	ldrb	r3, [r7, #15]
 800b000:	b29b      	uxth	r3, r3
 800b002:	e007      	b.n	800b014 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b004:	7bfb      	ldrb	r3, [r7, #15]
 800b006:	3301      	adds	r3, #1
 800b008:	73fb      	strb	r3, [r7, #15]
 800b00a:	7bfb      	ldrb	r3, [r7, #15]
 800b00c:	2b0f      	cmp	r3, #15
 800b00e:	d9ec      	bls.n	800afea <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b010:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b014:	4618      	mov	r0, r3
 800b016:	3714      	adds	r7, #20
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr

0800b020 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	4603      	mov	r3, r0
 800b028:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b02a:	79fb      	ldrb	r3, [r7, #7]
 800b02c:	4a08      	ldr	r2, [pc, #32]	; (800b050 <disk_status+0x30>)
 800b02e:	009b      	lsls	r3, r3, #2
 800b030:	4413      	add	r3, r2
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	79fa      	ldrb	r2, [r7, #7]
 800b038:	4905      	ldr	r1, [pc, #20]	; (800b050 <disk_status+0x30>)
 800b03a:	440a      	add	r2, r1
 800b03c:	7d12      	ldrb	r2, [r2, #20]
 800b03e:	4610      	mov	r0, r2
 800b040:	4798      	blx	r3
 800b042:	4603      	mov	r3, r0
 800b044:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b046:	7bfb      	ldrb	r3, [r7, #15]
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3710      	adds	r7, #16
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}
 800b050:	20001e4c 	.word	0x20001e4c

0800b054 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
 800b05a:	4603      	mov	r3, r0
 800b05c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b05e:	2300      	movs	r3, #0
 800b060:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b062:	79fb      	ldrb	r3, [r7, #7]
 800b064:	4a0d      	ldr	r2, [pc, #52]	; (800b09c <disk_initialize+0x48>)
 800b066:	5cd3      	ldrb	r3, [r2, r3]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d111      	bne.n	800b090 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b06c:	79fb      	ldrb	r3, [r7, #7]
 800b06e:	4a0b      	ldr	r2, [pc, #44]	; (800b09c <disk_initialize+0x48>)
 800b070:	2101      	movs	r1, #1
 800b072:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b074:	79fb      	ldrb	r3, [r7, #7]
 800b076:	4a09      	ldr	r2, [pc, #36]	; (800b09c <disk_initialize+0x48>)
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	4413      	add	r3, r2
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	79fa      	ldrb	r2, [r7, #7]
 800b082:	4906      	ldr	r1, [pc, #24]	; (800b09c <disk_initialize+0x48>)
 800b084:	440a      	add	r2, r1
 800b086:	7d12      	ldrb	r2, [r2, #20]
 800b088:	4610      	mov	r0, r2
 800b08a:	4798      	blx	r3
 800b08c:	4603      	mov	r3, r0
 800b08e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b090:	7bfb      	ldrb	r3, [r7, #15]
}
 800b092:	4618      	mov	r0, r3
 800b094:	3710      	adds	r7, #16
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	20001e4c 	.word	0x20001e4c

0800b0a0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b0a0:	b590      	push	{r4, r7, lr}
 800b0a2:	b087      	sub	sp, #28
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	60b9      	str	r1, [r7, #8]
 800b0a8:	607a      	str	r2, [r7, #4]
 800b0aa:	603b      	str	r3, [r7, #0]
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b0b0:	7bfb      	ldrb	r3, [r7, #15]
 800b0b2:	4a0a      	ldr	r2, [pc, #40]	; (800b0dc <disk_read+0x3c>)
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	4413      	add	r3, r2
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	689c      	ldr	r4, [r3, #8]
 800b0bc:	7bfb      	ldrb	r3, [r7, #15]
 800b0be:	4a07      	ldr	r2, [pc, #28]	; (800b0dc <disk_read+0x3c>)
 800b0c0:	4413      	add	r3, r2
 800b0c2:	7d18      	ldrb	r0, [r3, #20]
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	687a      	ldr	r2, [r7, #4]
 800b0c8:	68b9      	ldr	r1, [r7, #8]
 800b0ca:	47a0      	blx	r4
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	75fb      	strb	r3, [r7, #23]
  return res;
 800b0d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	371c      	adds	r7, #28
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd90      	pop	{r4, r7, pc}
 800b0da:	bf00      	nop
 800b0dc:	20001e4c 	.word	0x20001e4c

0800b0e0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b0e0:	b590      	push	{r4, r7, lr}
 800b0e2:	b087      	sub	sp, #28
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	60b9      	str	r1, [r7, #8]
 800b0e8:	607a      	str	r2, [r7, #4]
 800b0ea:	603b      	str	r3, [r7, #0]
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b0f0:	7bfb      	ldrb	r3, [r7, #15]
 800b0f2:	4a0a      	ldr	r2, [pc, #40]	; (800b11c <disk_write+0x3c>)
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	4413      	add	r3, r2
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	68dc      	ldr	r4, [r3, #12]
 800b0fc:	7bfb      	ldrb	r3, [r7, #15]
 800b0fe:	4a07      	ldr	r2, [pc, #28]	; (800b11c <disk_write+0x3c>)
 800b100:	4413      	add	r3, r2
 800b102:	7d18      	ldrb	r0, [r3, #20]
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	68b9      	ldr	r1, [r7, #8]
 800b10a:	47a0      	blx	r4
 800b10c:	4603      	mov	r3, r0
 800b10e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b110:	7dfb      	ldrb	r3, [r7, #23]
}
 800b112:	4618      	mov	r0, r3
 800b114:	371c      	adds	r7, #28
 800b116:	46bd      	mov	sp, r7
 800b118:	bd90      	pop	{r4, r7, pc}
 800b11a:	bf00      	nop
 800b11c:	20001e4c 	.word	0x20001e4c

0800b120 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b084      	sub	sp, #16
 800b124:	af00      	add	r7, sp, #0
 800b126:	4603      	mov	r3, r0
 800b128:	603a      	str	r2, [r7, #0]
 800b12a:	71fb      	strb	r3, [r7, #7]
 800b12c:	460b      	mov	r3, r1
 800b12e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b130:	79fb      	ldrb	r3, [r7, #7]
 800b132:	4a09      	ldr	r2, [pc, #36]	; (800b158 <disk_ioctl+0x38>)
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	4413      	add	r3, r2
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	691b      	ldr	r3, [r3, #16]
 800b13c:	79fa      	ldrb	r2, [r7, #7]
 800b13e:	4906      	ldr	r1, [pc, #24]	; (800b158 <disk_ioctl+0x38>)
 800b140:	440a      	add	r2, r1
 800b142:	7d10      	ldrb	r0, [r2, #20]
 800b144:	79b9      	ldrb	r1, [r7, #6]
 800b146:	683a      	ldr	r2, [r7, #0]
 800b148:	4798      	blx	r3
 800b14a:	4603      	mov	r3, r0
 800b14c:	73fb      	strb	r3, [r7, #15]
  return res;
 800b14e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b150:	4618      	mov	r0, r3
 800b152:	3710      	adds	r7, #16
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}
 800b158:	20001e4c 	.word	0x20001e4c

0800b15c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b15c:	b480      	push	{r7}
 800b15e:	b085      	sub	sp, #20
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	3301      	adds	r3, #1
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b16c:	89fb      	ldrh	r3, [r7, #14]
 800b16e:	021b      	lsls	r3, r3, #8
 800b170:	b21a      	sxth	r2, r3
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	781b      	ldrb	r3, [r3, #0]
 800b176:	b21b      	sxth	r3, r3
 800b178:	4313      	orrs	r3, r2
 800b17a:	b21b      	sxth	r3, r3
 800b17c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b17e:	89fb      	ldrh	r3, [r7, #14]
}
 800b180:	4618      	mov	r0, r3
 800b182:	3714      	adds	r7, #20
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr

0800b18c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b18c:	b480      	push	{r7}
 800b18e:	b085      	sub	sp, #20
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	3303      	adds	r3, #3
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	021b      	lsls	r3, r3, #8
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	3202      	adds	r2, #2
 800b1a4:	7812      	ldrb	r2, [r2, #0]
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	021b      	lsls	r3, r3, #8
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	3201      	adds	r2, #1
 800b1b2:	7812      	ldrb	r2, [r2, #0]
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	021b      	lsls	r3, r3, #8
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	7812      	ldrb	r2, [r2, #0]
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	60fb      	str	r3, [r7, #12]
	return rv;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3714      	adds	r7, #20
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr

0800b1d2 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800b1d2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b1d6:	b09d      	sub	sp, #116	; 0x74
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 800b1dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1de:	3307      	adds	r3, #7
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	b2db      	uxtb	r3, r3
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	469a      	mov	sl, r3
 800b1e8:	4693      	mov	fp, r2
 800b1ea:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 800b1ee:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800b1f2:	f04f 0000 	mov.w	r0, #0
 800b1f6:	f04f 0100 	mov.w	r1, #0
 800b1fa:	0219      	lsls	r1, r3, #8
 800b1fc:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800b200:	0210      	lsls	r0, r2, #8
 800b202:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b204:	3306      	adds	r3, #6
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	b2db      	uxtb	r3, r3
 800b20a:	2200      	movs	r2, #0
 800b20c:	461c      	mov	r4, r3
 800b20e:	4615      	mov	r5, r2
 800b210:	ea40 0804 	orr.w	r8, r0, r4
 800b214:	ea41 0905 	orr.w	r9, r1, r5
 800b218:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 800b21c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800b220:	f04f 0000 	mov.w	r0, #0
 800b224:	f04f 0100 	mov.w	r1, #0
 800b228:	0219      	lsls	r1, r3, #8
 800b22a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800b22e:	0210      	lsls	r0, r2, #8
 800b230:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b232:	3305      	adds	r3, #5
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	b2db      	uxtb	r3, r3
 800b238:	2200      	movs	r2, #0
 800b23a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b23c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800b23e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800b242:	4623      	mov	r3, r4
 800b244:	4303      	orrs	r3, r0
 800b246:	62bb      	str	r3, [r7, #40]	; 0x28
 800b248:	462b      	mov	r3, r5
 800b24a:	430b      	orrs	r3, r1
 800b24c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b24e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800b252:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 800b256:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800b25a:	f04f 0000 	mov.w	r0, #0
 800b25e:	f04f 0100 	mov.w	r1, #0
 800b262:	0219      	lsls	r1, r3, #8
 800b264:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800b268:	0210      	lsls	r0, r2, #8
 800b26a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b26c:	3304      	adds	r3, #4
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	b2db      	uxtb	r3, r3
 800b272:	2200      	movs	r2, #0
 800b274:	653b      	str	r3, [r7, #80]	; 0x50
 800b276:	657a      	str	r2, [r7, #84]	; 0x54
 800b278:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800b27c:	4623      	mov	r3, r4
 800b27e:	4303      	orrs	r3, r0
 800b280:	623b      	str	r3, [r7, #32]
 800b282:	462b      	mov	r3, r5
 800b284:	430b      	orrs	r3, r1
 800b286:	627b      	str	r3, [r7, #36]	; 0x24
 800b288:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800b28c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 800b290:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800b294:	f04f 0000 	mov.w	r0, #0
 800b298:	f04f 0100 	mov.w	r1, #0
 800b29c:	0219      	lsls	r1, r3, #8
 800b29e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800b2a2:	0210      	lsls	r0, r2, #8
 800b2a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2a6:	3303      	adds	r3, #3
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2b0:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b2b2:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800b2b6:	4623      	mov	r3, r4
 800b2b8:	4303      	orrs	r3, r0
 800b2ba:	61bb      	str	r3, [r7, #24]
 800b2bc:	462b      	mov	r3, r5
 800b2be:	430b      	orrs	r3, r1
 800b2c0:	61fb      	str	r3, [r7, #28]
 800b2c2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800b2c6:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 800b2ca:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800b2ce:	f04f 0000 	mov.w	r0, #0
 800b2d2:	f04f 0100 	mov.w	r1, #0
 800b2d6:	0219      	lsls	r1, r3, #8
 800b2d8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800b2dc:	0210      	lsls	r0, r2, #8
 800b2de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2e0:	3302      	adds	r3, #2
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	b2db      	uxtb	r3, r3
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	643b      	str	r3, [r7, #64]	; 0x40
 800b2ea:	647a      	str	r2, [r7, #68]	; 0x44
 800b2ec:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800b2f0:	4623      	mov	r3, r4
 800b2f2:	4303      	orrs	r3, r0
 800b2f4:	613b      	str	r3, [r7, #16]
 800b2f6:	462b      	mov	r3, r5
 800b2f8:	430b      	orrs	r3, r1
 800b2fa:	617b      	str	r3, [r7, #20]
 800b2fc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800b300:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 800b304:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b308:	f04f 0200 	mov.w	r2, #0
 800b30c:	f04f 0300 	mov.w	r3, #0
 800b310:	020b      	lsls	r3, r1, #8
 800b312:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b316:	0202      	lsls	r2, r0, #8
 800b318:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b31a:	3101      	adds	r1, #1
 800b31c:	7809      	ldrb	r1, [r1, #0]
 800b31e:	b2c9      	uxtb	r1, r1
 800b320:	2000      	movs	r0, #0
 800b322:	63b9      	str	r1, [r7, #56]	; 0x38
 800b324:	63f8      	str	r0, [r7, #60]	; 0x3c
 800b326:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800b32a:	4621      	mov	r1, r4
 800b32c:	4311      	orrs	r1, r2
 800b32e:	60b9      	str	r1, [r7, #8]
 800b330:	4629      	mov	r1, r5
 800b332:	4319      	orrs	r1, r3
 800b334:	60f9      	str	r1, [r7, #12]
 800b336:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800b33a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 800b33e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b342:	f04f 0200 	mov.w	r2, #0
 800b346:	f04f 0300 	mov.w	r3, #0
 800b34a:	020b      	lsls	r3, r1, #8
 800b34c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b350:	0202      	lsls	r2, r0, #8
 800b352:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b354:	7809      	ldrb	r1, [r1, #0]
 800b356:	b2c9      	uxtb	r1, r1
 800b358:	2000      	movs	r0, #0
 800b35a:	6339      	str	r1, [r7, #48]	; 0x30
 800b35c:	6378      	str	r0, [r7, #52]	; 0x34
 800b35e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800b362:	4621      	mov	r1, r4
 800b364:	4311      	orrs	r1, r2
 800b366:	6039      	str	r1, [r7, #0]
 800b368:	4629      	mov	r1, r5
 800b36a:	4319      	orrs	r1, r3
 800b36c:	6079      	str	r1, [r7, #4]
 800b36e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800b372:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 800b376:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 800b37a:	4610      	mov	r0, r2
 800b37c:	4619      	mov	r1, r3
 800b37e:	3774      	adds	r7, #116	; 0x74
 800b380:	46bd      	mov	sp, r7
 800b382:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b386:	4770      	bx	lr

0800b388 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b388:	b480      	push	{r7}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	460b      	mov	r3, r1
 800b392:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	1c5a      	adds	r2, r3, #1
 800b398:	607a      	str	r2, [r7, #4]
 800b39a:	887a      	ldrh	r2, [r7, #2]
 800b39c:	b2d2      	uxtb	r2, r2
 800b39e:	701a      	strb	r2, [r3, #0]
 800b3a0:	887b      	ldrh	r3, [r7, #2]
 800b3a2:	0a1b      	lsrs	r3, r3, #8
 800b3a4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	1c5a      	adds	r2, r3, #1
 800b3aa:	607a      	str	r2, [r7, #4]
 800b3ac:	887a      	ldrh	r2, [r7, #2]
 800b3ae:	b2d2      	uxtb	r2, r2
 800b3b0:	701a      	strb	r2, [r3, #0]
}
 800b3b2:	bf00      	nop
 800b3b4:	370c      	adds	r7, #12
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr

0800b3be <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b3be:	b480      	push	{r7}
 800b3c0:	b083      	sub	sp, #12
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	6078      	str	r0, [r7, #4]
 800b3c6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	1c5a      	adds	r2, r3, #1
 800b3cc:	607a      	str	r2, [r7, #4]
 800b3ce:	683a      	ldr	r2, [r7, #0]
 800b3d0:	b2d2      	uxtb	r2, r2
 800b3d2:	701a      	strb	r2, [r3, #0]
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	0a1b      	lsrs	r3, r3, #8
 800b3d8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	1c5a      	adds	r2, r3, #1
 800b3de:	607a      	str	r2, [r7, #4]
 800b3e0:	683a      	ldr	r2, [r7, #0]
 800b3e2:	b2d2      	uxtb	r2, r2
 800b3e4:	701a      	strb	r2, [r3, #0]
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	0a1b      	lsrs	r3, r3, #8
 800b3ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	1c5a      	adds	r2, r3, #1
 800b3f0:	607a      	str	r2, [r7, #4]
 800b3f2:	683a      	ldr	r2, [r7, #0]
 800b3f4:	b2d2      	uxtb	r2, r2
 800b3f6:	701a      	strb	r2, [r3, #0]
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	0a1b      	lsrs	r3, r3, #8
 800b3fc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	1c5a      	adds	r2, r3, #1
 800b402:	607a      	str	r2, [r7, #4]
 800b404:	683a      	ldr	r2, [r7, #0]
 800b406:	b2d2      	uxtb	r2, r2
 800b408:	701a      	strb	r2, [r3, #0]
}
 800b40a:	bf00      	nop
 800b40c:	370c      	adds	r7, #12
 800b40e:	46bd      	mov	sp, r7
 800b410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b414:	4770      	bx	lr

0800b416 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800b416:	b480      	push	{r7}
 800b418:	b085      	sub	sp, #20
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	60f8      	str	r0, [r7, #12]
 800b41e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	1c5a      	adds	r2, r3, #1
 800b426:	60fa      	str	r2, [r7, #12]
 800b428:	783a      	ldrb	r2, [r7, #0]
 800b42a:	701a      	strb	r2, [r3, #0]
 800b42c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b430:	f04f 0200 	mov.w	r2, #0
 800b434:	f04f 0300 	mov.w	r3, #0
 800b438:	0a02      	lsrs	r2, r0, #8
 800b43a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b43e:	0a0b      	lsrs	r3, r1, #8
 800b440:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	1c5a      	adds	r2, r3, #1
 800b448:	60fa      	str	r2, [r7, #12]
 800b44a:	783a      	ldrb	r2, [r7, #0]
 800b44c:	701a      	strb	r2, [r3, #0]
 800b44e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b452:	f04f 0200 	mov.w	r2, #0
 800b456:	f04f 0300 	mov.w	r3, #0
 800b45a:	0a02      	lsrs	r2, r0, #8
 800b45c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b460:	0a0b      	lsrs	r3, r1, #8
 800b462:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	1c5a      	adds	r2, r3, #1
 800b46a:	60fa      	str	r2, [r7, #12]
 800b46c:	783a      	ldrb	r2, [r7, #0]
 800b46e:	701a      	strb	r2, [r3, #0]
 800b470:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b474:	f04f 0200 	mov.w	r2, #0
 800b478:	f04f 0300 	mov.w	r3, #0
 800b47c:	0a02      	lsrs	r2, r0, #8
 800b47e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b482:	0a0b      	lsrs	r3, r1, #8
 800b484:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	1c5a      	adds	r2, r3, #1
 800b48c:	60fa      	str	r2, [r7, #12]
 800b48e:	783a      	ldrb	r2, [r7, #0]
 800b490:	701a      	strb	r2, [r3, #0]
 800b492:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b496:	f04f 0200 	mov.w	r2, #0
 800b49a:	f04f 0300 	mov.w	r3, #0
 800b49e:	0a02      	lsrs	r2, r0, #8
 800b4a0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b4a4:	0a0b      	lsrs	r3, r1, #8
 800b4a6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	1c5a      	adds	r2, r3, #1
 800b4ae:	60fa      	str	r2, [r7, #12]
 800b4b0:	783a      	ldrb	r2, [r7, #0]
 800b4b2:	701a      	strb	r2, [r3, #0]
 800b4b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b4b8:	f04f 0200 	mov.w	r2, #0
 800b4bc:	f04f 0300 	mov.w	r3, #0
 800b4c0:	0a02      	lsrs	r2, r0, #8
 800b4c2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b4c6:	0a0b      	lsrs	r3, r1, #8
 800b4c8:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	1c5a      	adds	r2, r3, #1
 800b4d0:	60fa      	str	r2, [r7, #12]
 800b4d2:	783a      	ldrb	r2, [r7, #0]
 800b4d4:	701a      	strb	r2, [r3, #0]
 800b4d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b4da:	f04f 0200 	mov.w	r2, #0
 800b4de:	f04f 0300 	mov.w	r3, #0
 800b4e2:	0a02      	lsrs	r2, r0, #8
 800b4e4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b4e8:	0a0b      	lsrs	r3, r1, #8
 800b4ea:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	1c5a      	adds	r2, r3, #1
 800b4f2:	60fa      	str	r2, [r7, #12]
 800b4f4:	783a      	ldrb	r2, [r7, #0]
 800b4f6:	701a      	strb	r2, [r3, #0]
 800b4f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b4fc:	f04f 0200 	mov.w	r2, #0
 800b500:	f04f 0300 	mov.w	r3, #0
 800b504:	0a02      	lsrs	r2, r0, #8
 800b506:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b50a:	0a0b      	lsrs	r3, r1, #8
 800b50c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	1c5a      	adds	r2, r3, #1
 800b514:	60fa      	str	r2, [r7, #12]
 800b516:	783a      	ldrb	r2, [r7, #0]
 800b518:	701a      	strb	r2, [r3, #0]
}
 800b51a:	bf00      	nop
 800b51c:	3714      	adds	r7, #20
 800b51e:	46bd      	mov	sp, r7
 800b520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b524:	4770      	bx	lr

0800b526 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b526:	b480      	push	{r7}
 800b528:	b087      	sub	sp, #28
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	60f8      	str	r0, [r7, #12]
 800b52e:	60b9      	str	r1, [r7, #8]
 800b530:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d00d      	beq.n	800b55c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b540:	693a      	ldr	r2, [r7, #16]
 800b542:	1c53      	adds	r3, r2, #1
 800b544:	613b      	str	r3, [r7, #16]
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	1c59      	adds	r1, r3, #1
 800b54a:	6179      	str	r1, [r7, #20]
 800b54c:	7812      	ldrb	r2, [r2, #0]
 800b54e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	3b01      	subs	r3, #1
 800b554:	607b      	str	r3, [r7, #4]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d1f1      	bne.n	800b540 <mem_cpy+0x1a>
	}
}
 800b55c:	bf00      	nop
 800b55e:	371c      	adds	r7, #28
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr

0800b568 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b568:	b480      	push	{r7}
 800b56a:	b087      	sub	sp, #28
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	60f8      	str	r0, [r7, #12]
 800b570:	60b9      	str	r1, [r7, #8]
 800b572:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	1c5a      	adds	r2, r3, #1
 800b57c:	617a      	str	r2, [r7, #20]
 800b57e:	68ba      	ldr	r2, [r7, #8]
 800b580:	b2d2      	uxtb	r2, r2
 800b582:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	3b01      	subs	r3, #1
 800b588:	607b      	str	r3, [r7, #4]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d1f3      	bne.n	800b578 <mem_set+0x10>
}
 800b590:	bf00      	nop
 800b592:	bf00      	nop
 800b594:	371c      	adds	r7, #28
 800b596:	46bd      	mov	sp, r7
 800b598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59c:	4770      	bx	lr

0800b59e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b59e:	b480      	push	{r7}
 800b5a0:	b089      	sub	sp, #36	; 0x24
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	60f8      	str	r0, [r7, #12]
 800b5a6:	60b9      	str	r1, [r7, #8]
 800b5a8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	61fb      	str	r3, [r7, #28]
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b5b6:	69fb      	ldr	r3, [r7, #28]
 800b5b8:	1c5a      	adds	r2, r3, #1
 800b5ba:	61fa      	str	r2, [r7, #28]
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	4619      	mov	r1, r3
 800b5c0:	69bb      	ldr	r3, [r7, #24]
 800b5c2:	1c5a      	adds	r2, r3, #1
 800b5c4:	61ba      	str	r2, [r7, #24]
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	1acb      	subs	r3, r1, r3
 800b5ca:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	3b01      	subs	r3, #1
 800b5d0:	607b      	str	r3, [r7, #4]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d002      	beq.n	800b5de <mem_cmp+0x40>
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d0eb      	beq.n	800b5b6 <mem_cmp+0x18>

	return r;
 800b5de:	697b      	ldr	r3, [r7, #20]
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3724      	adds	r7, #36	; 0x24
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr

0800b5ec <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b5f6:	e002      	b.n	800b5fe <chk_chr+0x12>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	607b      	str	r3, [r7, #4]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d005      	beq.n	800b612 <chk_chr+0x26>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	461a      	mov	r2, r3
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	4293      	cmp	r3, r2
 800b610:	d1f2      	bne.n	800b5f8 <chk_chr+0xc>
	return *str;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	781b      	ldrb	r3, [r3, #0]
}
 800b616:	4618      	mov	r0, r3
 800b618:	370c      	adds	r7, #12
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr
	...

0800b624 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b624:	b480      	push	{r7}
 800b626:	b085      	sub	sp, #20
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b62e:	2300      	movs	r3, #0
 800b630:	60bb      	str	r3, [r7, #8]
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	60fb      	str	r3, [r7, #12]
 800b636:	e029      	b.n	800b68c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b638:	4a27      	ldr	r2, [pc, #156]	; (800b6d8 <chk_lock+0xb4>)
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	011b      	lsls	r3, r3, #4
 800b63e:	4413      	add	r3, r2
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d01d      	beq.n	800b682 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b646:	4a24      	ldr	r2, [pc, #144]	; (800b6d8 <chk_lock+0xb4>)
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	011b      	lsls	r3, r3, #4
 800b64c:	4413      	add	r3, r2
 800b64e:	681a      	ldr	r2, [r3, #0]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	429a      	cmp	r2, r3
 800b656:	d116      	bne.n	800b686 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b658:	4a1f      	ldr	r2, [pc, #124]	; (800b6d8 <chk_lock+0xb4>)
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	011b      	lsls	r3, r3, #4
 800b65e:	4413      	add	r3, r2
 800b660:	3304      	adds	r3, #4
 800b662:	681a      	ldr	r2, [r3, #0]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b668:	429a      	cmp	r2, r3
 800b66a:	d10c      	bne.n	800b686 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b66c:	4a1a      	ldr	r2, [pc, #104]	; (800b6d8 <chk_lock+0xb4>)
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	011b      	lsls	r3, r3, #4
 800b672:	4413      	add	r3, r2
 800b674:	3308      	adds	r3, #8
 800b676:	681a      	ldr	r2, [r3, #0]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d102      	bne.n	800b686 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b680:	e007      	b.n	800b692 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b682:	2301      	movs	r3, #1
 800b684:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	3301      	adds	r3, #1
 800b68a:	60fb      	str	r3, [r7, #12]
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d9d2      	bls.n	800b638 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2b02      	cmp	r3, #2
 800b696:	d109      	bne.n	800b6ac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d102      	bne.n	800b6a4 <chk_lock+0x80>
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	2b02      	cmp	r3, #2
 800b6a2:	d101      	bne.n	800b6a8 <chk_lock+0x84>
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	e010      	b.n	800b6ca <chk_lock+0xa6>
 800b6a8:	2312      	movs	r3, #18
 800b6aa:	e00e      	b.n	800b6ca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d108      	bne.n	800b6c4 <chk_lock+0xa0>
 800b6b2:	4a09      	ldr	r2, [pc, #36]	; (800b6d8 <chk_lock+0xb4>)
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	011b      	lsls	r3, r3, #4
 800b6b8:	4413      	add	r3, r2
 800b6ba:	330c      	adds	r3, #12
 800b6bc:	881b      	ldrh	r3, [r3, #0]
 800b6be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6c2:	d101      	bne.n	800b6c8 <chk_lock+0xa4>
 800b6c4:	2310      	movs	r3, #16
 800b6c6:	e000      	b.n	800b6ca <chk_lock+0xa6>
 800b6c8:	2300      	movs	r3, #0
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3714      	adds	r7, #20
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d4:	4770      	bx	lr
 800b6d6:	bf00      	nop
 800b6d8:	200019cc 	.word	0x200019cc

0800b6dc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b083      	sub	sp, #12
 800b6e0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	607b      	str	r3, [r7, #4]
 800b6e6:	e002      	b.n	800b6ee <enq_lock+0x12>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	3301      	adds	r3, #1
 800b6ec:	607b      	str	r3, [r7, #4]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d806      	bhi.n	800b702 <enq_lock+0x26>
 800b6f4:	4a09      	ldr	r2, [pc, #36]	; (800b71c <enq_lock+0x40>)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	011b      	lsls	r3, r3, #4
 800b6fa:	4413      	add	r3, r2
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d1f2      	bne.n	800b6e8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2b02      	cmp	r3, #2
 800b706:	bf14      	ite	ne
 800b708:	2301      	movne	r3, #1
 800b70a:	2300      	moveq	r3, #0
 800b70c:	b2db      	uxtb	r3, r3
}
 800b70e:	4618      	mov	r0, r3
 800b710:	370c      	adds	r7, #12
 800b712:	46bd      	mov	sp, r7
 800b714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b718:	4770      	bx	lr
 800b71a:	bf00      	nop
 800b71c:	200019cc 	.word	0x200019cc

0800b720 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b720:	b480      	push	{r7}
 800b722:	b085      	sub	sp, #20
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b72a:	2300      	movs	r3, #0
 800b72c:	60fb      	str	r3, [r7, #12]
 800b72e:	e01f      	b.n	800b770 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b730:	4a41      	ldr	r2, [pc, #260]	; (800b838 <inc_lock+0x118>)
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	011b      	lsls	r3, r3, #4
 800b736:	4413      	add	r3, r2
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	429a      	cmp	r2, r3
 800b740:	d113      	bne.n	800b76a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b742:	4a3d      	ldr	r2, [pc, #244]	; (800b838 <inc_lock+0x118>)
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	011b      	lsls	r3, r3, #4
 800b748:	4413      	add	r3, r2
 800b74a:	3304      	adds	r3, #4
 800b74c:	681a      	ldr	r2, [r3, #0]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b752:	429a      	cmp	r2, r3
 800b754:	d109      	bne.n	800b76a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b756:	4a38      	ldr	r2, [pc, #224]	; (800b838 <inc_lock+0x118>)
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	011b      	lsls	r3, r3, #4
 800b75c:	4413      	add	r3, r2
 800b75e:	3308      	adds	r3, #8
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800b766:	429a      	cmp	r2, r3
 800b768:	d006      	beq.n	800b778 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	3301      	adds	r3, #1
 800b76e:	60fb      	str	r3, [r7, #12]
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	2b01      	cmp	r3, #1
 800b774:	d9dc      	bls.n	800b730 <inc_lock+0x10>
 800b776:	e000      	b.n	800b77a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b778:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2b02      	cmp	r3, #2
 800b77e:	d132      	bne.n	800b7e6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b780:	2300      	movs	r3, #0
 800b782:	60fb      	str	r3, [r7, #12]
 800b784:	e002      	b.n	800b78c <inc_lock+0x6c>
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	3301      	adds	r3, #1
 800b78a:	60fb      	str	r3, [r7, #12]
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2b01      	cmp	r3, #1
 800b790:	d806      	bhi.n	800b7a0 <inc_lock+0x80>
 800b792:	4a29      	ldr	r2, [pc, #164]	; (800b838 <inc_lock+0x118>)
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	011b      	lsls	r3, r3, #4
 800b798:	4413      	add	r3, r2
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d1f2      	bne.n	800b786 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2b02      	cmp	r3, #2
 800b7a4:	d101      	bne.n	800b7aa <inc_lock+0x8a>
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	e040      	b.n	800b82c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681a      	ldr	r2, [r3, #0]
 800b7ae:	4922      	ldr	r1, [pc, #136]	; (800b838 <inc_lock+0x118>)
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	011b      	lsls	r3, r3, #4
 800b7b4:	440b      	add	r3, r1
 800b7b6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	689a      	ldr	r2, [r3, #8]
 800b7bc:	491e      	ldr	r1, [pc, #120]	; (800b838 <inc_lock+0x118>)
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	011b      	lsls	r3, r3, #4
 800b7c2:	440b      	add	r3, r1
 800b7c4:	3304      	adds	r3, #4
 800b7c6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b7cc:	491a      	ldr	r1, [pc, #104]	; (800b838 <inc_lock+0x118>)
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	011b      	lsls	r3, r3, #4
 800b7d2:	440b      	add	r3, r1
 800b7d4:	3308      	adds	r3, #8
 800b7d6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b7d8:	4a17      	ldr	r2, [pc, #92]	; (800b838 <inc_lock+0x118>)
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	011b      	lsls	r3, r3, #4
 800b7de:	4413      	add	r3, r2
 800b7e0:	330c      	adds	r3, #12
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d009      	beq.n	800b800 <inc_lock+0xe0>
 800b7ec:	4a12      	ldr	r2, [pc, #72]	; (800b838 <inc_lock+0x118>)
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	011b      	lsls	r3, r3, #4
 800b7f2:	4413      	add	r3, r2
 800b7f4:	330c      	adds	r3, #12
 800b7f6:	881b      	ldrh	r3, [r3, #0]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d001      	beq.n	800b800 <inc_lock+0xe0>
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	e015      	b.n	800b82c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d108      	bne.n	800b818 <inc_lock+0xf8>
 800b806:	4a0c      	ldr	r2, [pc, #48]	; (800b838 <inc_lock+0x118>)
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	011b      	lsls	r3, r3, #4
 800b80c:	4413      	add	r3, r2
 800b80e:	330c      	adds	r3, #12
 800b810:	881b      	ldrh	r3, [r3, #0]
 800b812:	3301      	adds	r3, #1
 800b814:	b29a      	uxth	r2, r3
 800b816:	e001      	b.n	800b81c <inc_lock+0xfc>
 800b818:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b81c:	4906      	ldr	r1, [pc, #24]	; (800b838 <inc_lock+0x118>)
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	011b      	lsls	r3, r3, #4
 800b822:	440b      	add	r3, r1
 800b824:	330c      	adds	r3, #12
 800b826:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	3301      	adds	r3, #1
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3714      	adds	r7, #20
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr
 800b838:	200019cc 	.word	0x200019cc

0800b83c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b085      	sub	sp, #20
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	3b01      	subs	r3, #1
 800b848:	607b      	str	r3, [r7, #4]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d825      	bhi.n	800b89c <dec_lock+0x60>
		n = Files[i].ctr;
 800b850:	4a17      	ldr	r2, [pc, #92]	; (800b8b0 <dec_lock+0x74>)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	011b      	lsls	r3, r3, #4
 800b856:	4413      	add	r3, r2
 800b858:	330c      	adds	r3, #12
 800b85a:	881b      	ldrh	r3, [r3, #0]
 800b85c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b85e:	89fb      	ldrh	r3, [r7, #14]
 800b860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b864:	d101      	bne.n	800b86a <dec_lock+0x2e>
 800b866:	2300      	movs	r3, #0
 800b868:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b86a:	89fb      	ldrh	r3, [r7, #14]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d002      	beq.n	800b876 <dec_lock+0x3a>
 800b870:	89fb      	ldrh	r3, [r7, #14]
 800b872:	3b01      	subs	r3, #1
 800b874:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b876:	4a0e      	ldr	r2, [pc, #56]	; (800b8b0 <dec_lock+0x74>)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	011b      	lsls	r3, r3, #4
 800b87c:	4413      	add	r3, r2
 800b87e:	330c      	adds	r3, #12
 800b880:	89fa      	ldrh	r2, [r7, #14]
 800b882:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b884:	89fb      	ldrh	r3, [r7, #14]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d105      	bne.n	800b896 <dec_lock+0x5a>
 800b88a:	4a09      	ldr	r2, [pc, #36]	; (800b8b0 <dec_lock+0x74>)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	011b      	lsls	r3, r3, #4
 800b890:	4413      	add	r3, r2
 800b892:	2200      	movs	r2, #0
 800b894:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b896:	2300      	movs	r3, #0
 800b898:	737b      	strb	r3, [r7, #13]
 800b89a:	e001      	b.n	800b8a0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b89c:	2302      	movs	r3, #2
 800b89e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b8a0:	7b7b      	ldrb	r3, [r7, #13]
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3714      	adds	r7, #20
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ac:	4770      	bx	lr
 800b8ae:	bf00      	nop
 800b8b0:	200019cc 	.word	0x200019cc

0800b8b4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b085      	sub	sp, #20
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b8bc:	2300      	movs	r3, #0
 800b8be:	60fb      	str	r3, [r7, #12]
 800b8c0:	e010      	b.n	800b8e4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b8c2:	4a0d      	ldr	r2, [pc, #52]	; (800b8f8 <clear_lock+0x44>)
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	011b      	lsls	r3, r3, #4
 800b8c8:	4413      	add	r3, r2
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	687a      	ldr	r2, [r7, #4]
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d105      	bne.n	800b8de <clear_lock+0x2a>
 800b8d2:	4a09      	ldr	r2, [pc, #36]	; (800b8f8 <clear_lock+0x44>)
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	011b      	lsls	r3, r3, #4
 800b8d8:	4413      	add	r3, r2
 800b8da:	2200      	movs	r2, #0
 800b8dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	60fb      	str	r3, [r7, #12]
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	2b01      	cmp	r3, #1
 800b8e8:	d9eb      	bls.n	800b8c2 <clear_lock+0xe>
	}
}
 800b8ea:	bf00      	nop
 800b8ec:	bf00      	nop
 800b8ee:	3714      	adds	r7, #20
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr
 800b8f8:	200019cc 	.word	0x200019cc

0800b8fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b086      	sub	sp, #24
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b904:	2300      	movs	r3, #0
 800b906:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	78db      	ldrb	r3, [r3, #3]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d034      	beq.n	800b97a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b914:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	7858      	ldrb	r0, [r3, #1]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b920:	2301      	movs	r3, #1
 800b922:	697a      	ldr	r2, [r7, #20]
 800b924:	f7ff fbdc 	bl	800b0e0 <disk_write>
 800b928:	4603      	mov	r3, r0
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d002      	beq.n	800b934 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b92e:	2301      	movs	r3, #1
 800b930:	73fb      	strb	r3, [r7, #15]
 800b932:	e022      	b.n	800b97a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2200      	movs	r2, #0
 800b938:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b93e:	697a      	ldr	r2, [r7, #20]
 800b940:	1ad2      	subs	r2, r2, r3
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6a1b      	ldr	r3, [r3, #32]
 800b946:	429a      	cmp	r2, r3
 800b948:	d217      	bcs.n	800b97a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	789b      	ldrb	r3, [r3, #2]
 800b94e:	613b      	str	r3, [r7, #16]
 800b950:	e010      	b.n	800b974 <sync_window+0x78>
					wsect += fs->fsize;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6a1b      	ldr	r3, [r3, #32]
 800b956:	697a      	ldr	r2, [r7, #20]
 800b958:	4413      	add	r3, r2
 800b95a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	7858      	ldrb	r0, [r3, #1]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b966:	2301      	movs	r3, #1
 800b968:	697a      	ldr	r2, [r7, #20]
 800b96a:	f7ff fbb9 	bl	800b0e0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	3b01      	subs	r3, #1
 800b972:	613b      	str	r3, [r7, #16]
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	2b01      	cmp	r3, #1
 800b978:	d8eb      	bhi.n	800b952 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b97a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3718      	adds	r7, #24
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}

0800b984 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b98e:	2300      	movs	r3, #0
 800b990:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b996:	683a      	ldr	r2, [r7, #0]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d01b      	beq.n	800b9d4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f7ff ffad 	bl	800b8fc <sync_window>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b9a6:	7bfb      	ldrb	r3, [r7, #15]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d113      	bne.n	800b9d4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	7858      	ldrb	r0, [r3, #1]
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	683a      	ldr	r2, [r7, #0]
 800b9ba:	f7ff fb71 	bl	800b0a0 <disk_read>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d004      	beq.n	800b9ce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b9c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b9c8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	683a      	ldr	r2, [r7, #0]
 800b9d2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800b9d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3710      	adds	r7, #16
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}
	...

0800b9e0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f7ff ff87 	bl	800b8fc <sync_window>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b9f2:	7bfb      	ldrb	r3, [r7, #15]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d158      	bne.n	800baaa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	781b      	ldrb	r3, [r3, #0]
 800b9fc:	2b03      	cmp	r3, #3
 800b9fe:	d148      	bne.n	800ba92 <sync_fs+0xb2>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	791b      	ldrb	r3, [r3, #4]
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d144      	bne.n	800ba92 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	3338      	adds	r3, #56	; 0x38
 800ba0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba10:	2100      	movs	r1, #0
 800ba12:	4618      	mov	r0, r3
 800ba14:	f7ff fda8 	bl	800b568 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	3338      	adds	r3, #56	; 0x38
 800ba1c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ba20:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ba24:	4618      	mov	r0, r3
 800ba26:	f7ff fcaf 	bl	800b388 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	3338      	adds	r3, #56	; 0x38
 800ba2e:	4921      	ldr	r1, [pc, #132]	; (800bab4 <sync_fs+0xd4>)
 800ba30:	4618      	mov	r0, r3
 800ba32:	f7ff fcc4 	bl	800b3be <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	3338      	adds	r3, #56	; 0x38
 800ba3a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ba3e:	491e      	ldr	r1, [pc, #120]	; (800bab8 <sync_fs+0xd8>)
 800ba40:	4618      	mov	r0, r3
 800ba42:	f7ff fcbc 	bl	800b3be <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	3338      	adds	r3, #56	; 0x38
 800ba4a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	699b      	ldr	r3, [r3, #24]
 800ba52:	4619      	mov	r1, r3
 800ba54:	4610      	mov	r0, r2
 800ba56:	f7ff fcb2 	bl	800b3be <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	3338      	adds	r3, #56	; 0x38
 800ba5e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	695b      	ldr	r3, [r3, #20]
 800ba66:	4619      	mov	r1, r3
 800ba68:	4610      	mov	r0, r2
 800ba6a:	f7ff fca8 	bl	800b3be <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba72:	1c5a      	adds	r2, r3, #1
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	7858      	ldrb	r0, [r3, #1]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba86:	2301      	movs	r3, #1
 800ba88:	f7ff fb2a 	bl	800b0e0 <disk_write>
			fs->fsi_flag = 0;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	785b      	ldrb	r3, [r3, #1]
 800ba96:	2200      	movs	r2, #0
 800ba98:	2100      	movs	r1, #0
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7ff fb40 	bl	800b120 <disk_ioctl>
 800baa0:	4603      	mov	r3, r0
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d001      	beq.n	800baaa <sync_fs+0xca>
 800baa6:	2301      	movs	r3, #1
 800baa8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800baaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800baac:	4618      	mov	r0, r3
 800baae:	3710      	adds	r7, #16
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}
 800bab4:	41615252 	.word	0x41615252
 800bab8:	61417272 	.word	0x61417272

0800babc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800babc:	b480      	push	{r7}
 800babe:	b083      	sub	sp, #12
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	3b02      	subs	r3, #2
 800baca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	69db      	ldr	r3, [r3, #28]
 800bad0:	3b02      	subs	r3, #2
 800bad2:	683a      	ldr	r2, [r7, #0]
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d301      	bcc.n	800badc <clust2sect+0x20>
 800bad8:	2300      	movs	r3, #0
 800bada:	e008      	b.n	800baee <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	895b      	ldrh	r3, [r3, #10]
 800bae0:	461a      	mov	r2, r3
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	fb03 f202 	mul.w	r2, r3, r2
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baec:	4413      	add	r3, r2
}
 800baee:	4618      	mov	r0, r3
 800baf0:	370c      	adds	r7, #12
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr
	...

0800bafc <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b088      	sub	sp, #32
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bb06:	6879      	ldr	r1, [r7, #4]
 800bb08:	6809      	ldr	r1, [r1, #0]
 800bb0a:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bb0c:	6839      	ldr	r1, [r7, #0]
 800bb0e:	2901      	cmp	r1, #1
 800bb10:	d904      	bls.n	800bb1c <get_fat+0x20>
 800bb12:	69b9      	ldr	r1, [r7, #24]
 800bb14:	69c9      	ldr	r1, [r1, #28]
 800bb16:	6838      	ldr	r0, [r7, #0]
 800bb18:	4288      	cmp	r0, r1
 800bb1a:	d302      	bcc.n	800bb22 <get_fat+0x26>
		val = 1;	/* Internal error */
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	61fb      	str	r3, [r7, #28]
 800bb20:	e101      	b.n	800bd26 <get_fat+0x22a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bb22:	f04f 31ff 	mov.w	r1, #4294967295
 800bb26:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 800bb28:	69b9      	ldr	r1, [r7, #24]
 800bb2a:	7809      	ldrb	r1, [r1, #0]
 800bb2c:	3901      	subs	r1, #1
 800bb2e:	2903      	cmp	r1, #3
 800bb30:	f200 80ed 	bhi.w	800bd0e <get_fat+0x212>
 800bb34:	a001      	add	r0, pc, #4	; (adr r0, 800bb3c <get_fat+0x40>)
 800bb36:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bb3a:	bf00      	nop
 800bb3c:	0800bb4d 	.word	0x0800bb4d
 800bb40:	0800bbd5 	.word	0x0800bbd5
 800bb44:	0800bc0b 	.word	0x0800bc0b
 800bb48:	0800bc43 	.word	0x0800bc43
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	60fb      	str	r3, [r7, #12]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	085b      	lsrs	r3, r3, #1
 800bb54:	68fa      	ldr	r2, [r7, #12]
 800bb56:	4413      	add	r3, r2
 800bb58:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bb5a:	69bb      	ldr	r3, [r7, #24]
 800bb5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	0a5b      	lsrs	r3, r3, #9
 800bb62:	4413      	add	r3, r2
 800bb64:	4619      	mov	r1, r3
 800bb66:	69b8      	ldr	r0, [r7, #24]
 800bb68:	f7ff ff0c 	bl	800b984 <move_window>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	f040 80d0 	bne.w	800bd14 <get_fat+0x218>
			wc = fs->win[bc++ % SS(fs)];
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	1c5a      	adds	r2, r3, #1
 800bb78:	60fa      	str	r2, [r7, #12]
 800bb7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb7e:	69ba      	ldr	r2, [r7, #24]
 800bb80:	4413      	add	r3, r2
 800bb82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bb86:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bb88:	69bb      	ldr	r3, [r7, #24]
 800bb8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	0a5b      	lsrs	r3, r3, #9
 800bb90:	4413      	add	r3, r2
 800bb92:	4619      	mov	r1, r3
 800bb94:	69b8      	ldr	r0, [r7, #24]
 800bb96:	f7ff fef5 	bl	800b984 <move_window>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	f040 80bb 	bne.w	800bd18 <get_fat+0x21c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bba8:	69ba      	ldr	r2, [r7, #24]
 800bbaa:	4413      	add	r3, r2
 800bbac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bbb0:	021b      	lsls	r3, r3, #8
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	f003 0301 	and.w	r3, r3, #1
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d002      	beq.n	800bbca <get_fat+0xce>
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	091b      	lsrs	r3, r3, #4
 800bbc8:	e002      	b.n	800bbd0 <get_fat+0xd4>
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bbd0:	61fb      	str	r3, [r7, #28]
			break;
 800bbd2:	e0a8      	b.n	800bd26 <get_fat+0x22a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bbd4:	69bb      	ldr	r3, [r7, #24]
 800bbd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	0a1b      	lsrs	r3, r3, #8
 800bbdc:	4413      	add	r3, r2
 800bbde:	4619      	mov	r1, r3
 800bbe0:	69b8      	ldr	r0, [r7, #24]
 800bbe2:	f7ff fecf 	bl	800b984 <move_window>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	f040 8097 	bne.w	800bd1c <get_fat+0x220>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bbee:	69bb      	ldr	r3, [r7, #24]
 800bbf0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	005b      	lsls	r3, r3, #1
 800bbf8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bbfc:	4413      	add	r3, r2
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f7ff faac 	bl	800b15c <ld_word>
 800bc04:	4603      	mov	r3, r0
 800bc06:	61fb      	str	r3, [r7, #28]
			break;
 800bc08:	e08d      	b.n	800bd26 <get_fat+0x22a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bc0a:	69bb      	ldr	r3, [r7, #24]
 800bc0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	09db      	lsrs	r3, r3, #7
 800bc12:	4413      	add	r3, r2
 800bc14:	4619      	mov	r1, r3
 800bc16:	69b8      	ldr	r0, [r7, #24]
 800bc18:	f7ff feb4 	bl	800b984 <move_window>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d17e      	bne.n	800bd20 <get_fat+0x224>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bc22:	69bb      	ldr	r3, [r7, #24]
 800bc24:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	009b      	lsls	r3, r3, #2
 800bc2c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bc30:	4413      	add	r3, r2
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7ff faaa 	bl	800b18c <ld_dword>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bc3e:	61fb      	str	r3, [r7, #28]
			break;
 800bc40:	e071      	b.n	800bd26 <get_fat+0x22a>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800bc42:	6879      	ldr	r1, [r7, #4]
 800bc44:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800bc48:	4301      	orrs	r1, r0
 800bc4a:	d060      	beq.n	800bd0e <get_fat+0x212>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800bc4c:	6879      	ldr	r1, [r7, #4]
 800bc4e:	6889      	ldr	r1, [r1, #8]
 800bc50:	6838      	ldr	r0, [r7, #0]
 800bc52:	1a41      	subs	r1, r0, r1
 800bc54:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800bc56:	6879      	ldr	r1, [r7, #4]
 800bc58:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800bc5c:	1e42      	subs	r2, r0, #1
 800bc5e:	f141 33ff 	adc.w	r3, r1, #4294967295
 800bc62:	f04f 0000 	mov.w	r0, #0
 800bc66:	f04f 0100 	mov.w	r1, #0
 800bc6a:	0a50      	lsrs	r0, r2, #9
 800bc6c:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800bc70:	0a59      	lsrs	r1, r3, #9
 800bc72:	4602      	mov	r2, r0
 800bc74:	69bb      	ldr	r3, [r7, #24]
 800bc76:	895b      	ldrh	r3, [r3, #10]
 800bc78:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc7c:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	79db      	ldrb	r3, [r3, #7]
 800bc82:	2b02      	cmp	r3, #2
 800bc84:	d10e      	bne.n	800bca4 <get_fat+0x1a8>
					if (cofs <= clen) {
 800bc86:	697a      	ldr	r2, [r7, #20]
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d80a      	bhi.n	800bca4 <get_fat+0x1a8>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800bc8e:	697a      	ldr	r2, [r7, #20]
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d002      	beq.n	800bc9c <get_fat+0x1a0>
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	3301      	adds	r3, #1
 800bc9a:	e001      	b.n	800bca0 <get_fat+0x1a4>
 800bc9c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800bca0:	61fb      	str	r3, [r7, #28]
						break;
 800bca2:	e040      	b.n	800bd26 <get_fat+0x22a>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	79db      	ldrb	r3, [r3, #7]
 800bca8:	2b03      	cmp	r3, #3
 800bcaa:	d108      	bne.n	800bcbe <get_fat+0x1c2>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	699b      	ldr	r3, [r3, #24]
 800bcb0:	697a      	ldr	r2, [r7, #20]
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	d203      	bcs.n	800bcbe <get_fat+0x1c2>
					val = clst + 1; 	/* Generate the value */
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	3301      	adds	r3, #1
 800bcba:	61fb      	str	r3, [r7, #28]
					break;
 800bcbc:	e033      	b.n	800bd26 <get_fat+0x22a>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	79db      	ldrb	r3, [r3, #7]
 800bcc2:	2b02      	cmp	r3, #2
 800bcc4:	d023      	beq.n	800bd0e <get_fat+0x212>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	69db      	ldr	r3, [r3, #28]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d003      	beq.n	800bcd6 <get_fat+0x1da>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800bcce:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800bcd2:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800bcd4:	e027      	b.n	800bd26 <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bcd6:	69bb      	ldr	r3, [r7, #24]
 800bcd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	09db      	lsrs	r3, r3, #7
 800bcde:	4413      	add	r3, r2
 800bce0:	4619      	mov	r1, r3
 800bce2:	69b8      	ldr	r0, [r7, #24]
 800bce4:	f7ff fe4e 	bl	800b984 <move_window>
 800bce8:	4603      	mov	r3, r0
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d11a      	bne.n	800bd24 <get_fat+0x228>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800bcee:	69bb      	ldr	r3, [r7, #24]
 800bcf0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bcfc:	4413      	add	r3, r2
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7ff fa44 	bl	800b18c <ld_dword>
 800bd04:	4603      	mov	r3, r0
 800bd06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bd0a:	61fb      	str	r3, [r7, #28]
					break;
 800bd0c:	e00b      	b.n	800bd26 <get_fat+0x22a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bd0e:	2301      	movs	r3, #1
 800bd10:	61fb      	str	r3, [r7, #28]
 800bd12:	e008      	b.n	800bd26 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd14:	bf00      	nop
 800bd16:	e006      	b.n	800bd26 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd18:	bf00      	nop
 800bd1a:	e004      	b.n	800bd26 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bd1c:	bf00      	nop
 800bd1e:	e002      	b.n	800bd26 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bd20:	bf00      	nop
 800bd22:	e000      	b.n	800bd26 <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bd24:	bf00      	nop
		}
	}

	return val;
 800bd26:	69fb      	ldr	r3, [r7, #28]
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3720      	adds	r7, #32
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bd30:	b590      	push	{r4, r7, lr}
 800bd32:	b089      	sub	sp, #36	; 0x24
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	60f8      	str	r0, [r7, #12]
 800bd38:	60b9      	str	r1, [r7, #8]
 800bd3a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bd3c:	2302      	movs	r3, #2
 800bd3e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	f240 80d6 	bls.w	800bef4 <put_fat+0x1c4>
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	69db      	ldr	r3, [r3, #28]
 800bd4c:	68ba      	ldr	r2, [r7, #8]
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	f080 80d0 	bcs.w	800bef4 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	2b04      	cmp	r3, #4
 800bd5a:	f300 80d4 	bgt.w	800bf06 <put_fat+0x1d6>
 800bd5e:	2b03      	cmp	r3, #3
 800bd60:	f280 8093 	bge.w	800be8a <put_fat+0x15a>
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	d002      	beq.n	800bd6e <put_fat+0x3e>
 800bd68:	2b02      	cmp	r3, #2
 800bd6a:	d06e      	beq.n	800be4a <put_fat+0x11a>
 800bd6c:	e0cb      	b.n	800bf06 <put_fat+0x1d6>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	61bb      	str	r3, [r7, #24]
 800bd72:	69bb      	ldr	r3, [r7, #24]
 800bd74:	085b      	lsrs	r3, r3, #1
 800bd76:	69ba      	ldr	r2, [r7, #24]
 800bd78:	4413      	add	r3, r2
 800bd7a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bd80:	69bb      	ldr	r3, [r7, #24]
 800bd82:	0a5b      	lsrs	r3, r3, #9
 800bd84:	4413      	add	r3, r2
 800bd86:	4619      	mov	r1, r3
 800bd88:	68f8      	ldr	r0, [r7, #12]
 800bd8a:	f7ff fdfb 	bl	800b984 <move_window>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd92:	7ffb      	ldrb	r3, [r7, #31]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	f040 80af 	bne.w	800bef8 <put_fat+0x1c8>
			p = fs->win + bc++ % SS(fs);
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800bda0:	69bb      	ldr	r3, [r7, #24]
 800bda2:	1c59      	adds	r1, r3, #1
 800bda4:	61b9      	str	r1, [r7, #24]
 800bda6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdaa:	4413      	add	r3, r2
 800bdac:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	f003 0301 	and.w	r3, r3, #1
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d00d      	beq.n	800bdd4 <put_fat+0xa4>
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	b25b      	sxtb	r3, r3
 800bdbe:	f003 030f 	and.w	r3, r3, #15
 800bdc2:	b25a      	sxtb	r2, r3
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	b2db      	uxtb	r3, r3
 800bdc8:	011b      	lsls	r3, r3, #4
 800bdca:	b25b      	sxtb	r3, r3
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	b25b      	sxtb	r3, r3
 800bdd0:	b2db      	uxtb	r3, r3
 800bdd2:	e001      	b.n	800bdd8 <put_fat+0xa8>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	b2db      	uxtb	r3, r3
 800bdd8:	697a      	ldr	r2, [r7, #20]
 800bdda:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2201      	movs	r2, #1
 800bde0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bde6:	69bb      	ldr	r3, [r7, #24]
 800bde8:	0a5b      	lsrs	r3, r3, #9
 800bdea:	4413      	add	r3, r2
 800bdec:	4619      	mov	r1, r3
 800bdee:	68f8      	ldr	r0, [r7, #12]
 800bdf0:	f7ff fdc8 	bl	800b984 <move_window>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bdf8:	7ffb      	ldrb	r3, [r7, #31]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d17e      	bne.n	800befc <put_fat+0x1cc>
			p = fs->win + bc % SS(fs);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800be04:	69bb      	ldr	r3, [r7, #24]
 800be06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be0a:	4413      	add	r3, r2
 800be0c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	f003 0301 	and.w	r3, r3, #1
 800be14:	2b00      	cmp	r3, #0
 800be16:	d003      	beq.n	800be20 <put_fat+0xf0>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	091b      	lsrs	r3, r3, #4
 800be1c:	b2db      	uxtb	r3, r3
 800be1e:	e00e      	b.n	800be3e <put_fat+0x10e>
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	b25b      	sxtb	r3, r3
 800be26:	f023 030f 	bic.w	r3, r3, #15
 800be2a:	b25a      	sxtb	r2, r3
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	0a1b      	lsrs	r3, r3, #8
 800be30:	b25b      	sxtb	r3, r3
 800be32:	f003 030f 	and.w	r3, r3, #15
 800be36:	b25b      	sxtb	r3, r3
 800be38:	4313      	orrs	r3, r2
 800be3a:	b25b      	sxtb	r3, r3
 800be3c:	b2db      	uxtb	r3, r3
 800be3e:	697a      	ldr	r2, [r7, #20]
 800be40:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	2201      	movs	r2, #1
 800be46:	70da      	strb	r2, [r3, #3]
			break;
 800be48:	e05d      	b.n	800bf06 <put_fat+0x1d6>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	0a1b      	lsrs	r3, r3, #8
 800be52:	4413      	add	r3, r2
 800be54:	4619      	mov	r1, r3
 800be56:	68f8      	ldr	r0, [r7, #12]
 800be58:	f7ff fd94 	bl	800b984 <move_window>
 800be5c:	4603      	mov	r3, r0
 800be5e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be60:	7ffb      	ldrb	r3, [r7, #31]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d14c      	bne.n	800bf00 <put_fat+0x1d0>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	005b      	lsls	r3, r3, #1
 800be70:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800be74:	4413      	add	r3, r2
 800be76:	687a      	ldr	r2, [r7, #4]
 800be78:	b292      	uxth	r2, r2
 800be7a:	4611      	mov	r1, r2
 800be7c:	4618      	mov	r0, r3
 800be7e:	f7ff fa83 	bl	800b388 <st_word>
			fs->wflag = 1;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2201      	movs	r2, #1
 800be86:	70da      	strb	r2, [r3, #3]
			break;
 800be88:	e03d      	b.n	800bf06 <put_fat+0x1d6>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	09db      	lsrs	r3, r3, #7
 800be92:	4413      	add	r3, r2
 800be94:	4619      	mov	r1, r3
 800be96:	68f8      	ldr	r0, [r7, #12]
 800be98:	f7ff fd74 	bl	800b984 <move_window>
 800be9c:	4603      	mov	r3, r0
 800be9e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bea0:	7ffb      	ldrb	r3, [r7, #31]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d12e      	bne.n	800bf04 <put_fat+0x1d4>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	2b04      	cmp	r3, #4
 800beac:	d012      	beq.n	800bed4 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	009b      	lsls	r3, r3, #2
 800bebe:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bec2:	4413      	add	r3, r2
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7ff f961 	bl	800b18c <ld_dword>
 800beca:	4603      	mov	r3, r0
 800becc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bed0:	4323      	orrs	r3, r4
 800bed2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	009b      	lsls	r3, r3, #2
 800bede:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bee2:	4413      	add	r3, r2
 800bee4:	6879      	ldr	r1, [r7, #4]
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7ff fa69 	bl	800b3be <st_dword>
			fs->wflag = 1;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2201      	movs	r2, #1
 800bef0:	70da      	strb	r2, [r3, #3]
			break;
 800bef2:	e008      	b.n	800bf06 <put_fat+0x1d6>
		}
	}
 800bef4:	bf00      	nop
 800bef6:	e006      	b.n	800bf06 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800bef8:	bf00      	nop
 800befa:	e004      	b.n	800bf06 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800befc:	bf00      	nop
 800befe:	e002      	b.n	800bf06 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800bf00:	bf00      	nop
 800bf02:	e000      	b.n	800bf06 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800bf04:	bf00      	nop
	return res;
 800bf06:	7ffb      	ldrb	r3, [r7, #31]
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	3724      	adds	r7, #36	; 0x24
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd90      	pop	{r4, r7, pc}

0800bf10 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b08a      	sub	sp, #40	; 0x28
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	60f8      	str	r0, [r7, #12]
 800bf18:	60b9      	str	r1, [r7, #8]
 800bf1a:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	3b02      	subs	r3, #2
 800bf20:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	69db      	ldr	r3, [r3, #28]
 800bf26:	3b02      	subs	r3, #2
 800bf28:	68ba      	ldr	r2, [r7, #8]
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d301      	bcc.n	800bf32 <find_bitmap+0x22>
 800bf2e:	2300      	movs	r3, #0
 800bf30:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	61fb      	str	r3, [r7, #28]
 800bf36:	69fb      	ldr	r3, [r7, #28]
 800bf38:	61bb      	str	r3, [r7, #24]
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf42:	69fb      	ldr	r3, [r7, #28]
 800bf44:	0b1b      	lsrs	r3, r3, #12
 800bf46:	4413      	add	r3, r2
 800bf48:	4619      	mov	r1, r3
 800bf4a:	68f8      	ldr	r0, [r7, #12]
 800bf4c:	f7ff fd1a 	bl	800b984 <move_window>
 800bf50:	4603      	mov	r3, r0
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d002      	beq.n	800bf5c <find_bitmap+0x4c>
 800bf56:	f04f 33ff 	mov.w	r3, #4294967295
 800bf5a:	e051      	b.n	800c000 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800bf5c:	69fb      	ldr	r3, [r7, #28]
 800bf5e:	08db      	lsrs	r3, r3, #3
 800bf60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf64:	623b      	str	r3, [r7, #32]
 800bf66:	69fb      	ldr	r3, [r7, #28]
 800bf68:	f003 0307 	and.w	r3, r3, #7
 800bf6c:	2201      	movs	r2, #1
 800bf6e:	fa02 f303 	lsl.w	r3, r2, r3
 800bf72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800bf76:	68fa      	ldr	r2, [r7, #12]
 800bf78:	6a3b      	ldr	r3, [r7, #32]
 800bf7a:	4413      	add	r3, r2
 800bf7c:	3338      	adds	r3, #56	; 0x38
 800bf7e:	781a      	ldrb	r2, [r3, #0]
 800bf80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf84:	4013      	ands	r3, r2
 800bf86:	74fb      	strb	r3, [r7, #19]
 800bf88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf8c:	005b      	lsls	r3, r3, #1
 800bf8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800bf92:	69fb      	ldr	r3, [r7, #28]
 800bf94:	3301      	adds	r3, #1
 800bf96:	61fb      	str	r3, [r7, #28]
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	69db      	ldr	r3, [r3, #28]
 800bf9c:	3b02      	subs	r3, #2
 800bf9e:	69fa      	ldr	r2, [r7, #28]
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	d307      	bcc.n	800bfb4 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	61fb      	str	r3, [r7, #28]
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bfae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bfb2:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800bfb4:	7cfb      	ldrb	r3, [r7, #19]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d109      	bne.n	800bfce <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	617b      	str	r3, [r7, #20]
 800bfc0:	697a      	ldr	r2, [r7, #20]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	d106      	bne.n	800bfd6 <find_bitmap+0xc6>
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	3302      	adds	r3, #2
 800bfcc:	e018      	b.n	800c000 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800bfce:	69fb      	ldr	r3, [r7, #28]
 800bfd0:	61bb      	str	r3, [r7, #24]
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800bfd6:	69fa      	ldr	r2, [r7, #28]
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d101      	bne.n	800bfe2 <find_bitmap+0xd2>
 800bfde:	2300      	movs	r3, #0
 800bfe0:	e00e      	b.n	800c000 <find_bitmap+0xf0>
			} while (bm);
 800bfe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d1c5      	bne.n	800bf76 <find_bitmap+0x66>
			bm = 1;
 800bfea:	2301      	movs	r3, #1
 800bfec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800bff0:	6a3b      	ldr	r3, [r7, #32]
 800bff2:	3301      	adds	r3, #1
 800bff4:	623b      	str	r3, [r7, #32]
 800bff6:	6a3b      	ldr	r3, [r7, #32]
 800bff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bffc:	d3bb      	bcc.n	800bf76 <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800bffe:	e79e      	b.n	800bf3e <find_bitmap+0x2e>
	}
}
 800c000:	4618      	mov	r0, r3
 800c002:	3728      	adds	r7, #40	; 0x28
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}

0800c008 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b088      	sub	sp, #32
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	60f8      	str	r0, [r7, #12]
 800c010:	60b9      	str	r1, [r7, #8]
 800c012:	607a      	str	r2, [r7, #4]
 800c014:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	3b02      	subs	r3, #2
 800c01a:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	0b1b      	lsrs	r3, r3, #12
 800c024:	4413      	add	r3, r2
 800c026:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	08db      	lsrs	r3, r3, #3
 800c02c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c030:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	f003 0307 	and.w	r3, r3, #7
 800c038:	2201      	movs	r2, #1
 800c03a:	fa02 f303 	lsl.w	r3, r2, r3
 800c03e:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	1c5a      	adds	r2, r3, #1
 800c044:	617a      	str	r2, [r7, #20]
 800c046:	4619      	mov	r1, r3
 800c048:	68f8      	ldr	r0, [r7, #12]
 800c04a:	f7ff fc9b 	bl	800b984 <move_window>
 800c04e:	4603      	mov	r3, r0
 800c050:	2b00      	cmp	r3, #0
 800c052:	d001      	beq.n	800c058 <change_bitmap+0x50>
 800c054:	2301      	movs	r3, #1
 800c056:	e03d      	b.n	800c0d4 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800c058:	68fa      	ldr	r2, [r7, #12]
 800c05a:	69bb      	ldr	r3, [r7, #24]
 800c05c:	4413      	add	r3, r2
 800c05e:	3338      	adds	r3, #56	; 0x38
 800c060:	781a      	ldrb	r2, [r3, #0]
 800c062:	7ffb      	ldrb	r3, [r7, #31]
 800c064:	4013      	ands	r3, r2
 800c066:	b2db      	uxtb	r3, r3
 800c068:	2b00      	cmp	r3, #0
 800c06a:	bf14      	ite	ne
 800c06c:	2301      	movne	r3, #1
 800c06e:	2300      	moveq	r3, #0
 800c070:	b2db      	uxtb	r3, r3
 800c072:	461a      	mov	r2, r3
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	4293      	cmp	r3, r2
 800c078:	d101      	bne.n	800c07e <change_bitmap+0x76>
 800c07a:	2302      	movs	r3, #2
 800c07c:	e02a      	b.n	800c0d4 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 800c07e:	68fa      	ldr	r2, [r7, #12]
 800c080:	69bb      	ldr	r3, [r7, #24]
 800c082:	4413      	add	r3, r2
 800c084:	3338      	adds	r3, #56	; 0x38
 800c086:	781a      	ldrb	r2, [r3, #0]
 800c088:	7ffb      	ldrb	r3, [r7, #31]
 800c08a:	4053      	eors	r3, r2
 800c08c:	b2d9      	uxtb	r1, r3
 800c08e:	68fa      	ldr	r2, [r7, #12]
 800c090:	69bb      	ldr	r3, [r7, #24]
 800c092:	4413      	add	r3, r2
 800c094:	3338      	adds	r3, #56	; 0x38
 800c096:	460a      	mov	r2, r1
 800c098:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	2201      	movs	r2, #1
 800c09e:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	3b01      	subs	r3, #1
 800c0a4:	607b      	str	r3, [r7, #4]
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d101      	bne.n	800c0b0 <change_bitmap+0xa8>
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	e011      	b.n	800c0d4 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 800c0b0:	7ffb      	ldrb	r3, [r7, #31]
 800c0b2:	005b      	lsls	r3, r3, #1
 800c0b4:	77fb      	strb	r3, [r7, #31]
 800c0b6:	7ffb      	ldrb	r3, [r7, #31]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d1cd      	bne.n	800c058 <change_bitmap+0x50>
			bm = 1;
 800c0bc:	2301      	movs	r3, #1
 800c0be:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800c0c0:	69bb      	ldr	r3, [r7, #24]
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	61bb      	str	r3, [r7, #24]
 800c0c6:	69bb      	ldr	r3, [r7, #24]
 800c0c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0cc:	d3c4      	bcc.n	800c058 <change_bitmap+0x50>
		i = 0;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800c0d2:	e7b5      	b.n	800c040 <change_bitmap+0x38>
	}
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3720      	adds	r7, #32
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b086      	sub	sp, #24
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	79db      	ldrb	r3, [r3, #7]
 800c0e8:	2b03      	cmp	r3, #3
 800c0ea:	d121      	bne.n	800c130 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	689b      	ldr	r3, [r3, #8]
 800c0f0:	617b      	str	r3, [r7, #20]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	699b      	ldr	r3, [r3, #24]
 800c0f6:	613b      	str	r3, [r7, #16]
 800c0f8:	e014      	b.n	800c124 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6818      	ldr	r0, [r3, #0]
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	3301      	adds	r3, #1
 800c102:	461a      	mov	r2, r3
 800c104:	6979      	ldr	r1, [r7, #20]
 800c106:	f7ff fe13 	bl	800bd30 <put_fat>
 800c10a:	4603      	mov	r3, r0
 800c10c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800c10e:	7bfb      	ldrb	r3, [r7, #15]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d001      	beq.n	800c118 <fill_first_frag+0x3c>
 800c114:	7bfb      	ldrb	r3, [r7, #15]
 800c116:	e00c      	b.n	800c132 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	3301      	adds	r3, #1
 800c11c:	617b      	str	r3, [r7, #20]
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	3b01      	subs	r3, #1
 800c122:	613b      	str	r3, [r7, #16]
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d1e7      	bne.n	800c0fa <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2200      	movs	r2, #0
 800c12e:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800c130:	2300      	movs	r3, #0
}
 800c132:	4618      	mov	r0, r3
 800c134:	3718      	adds	r7, #24
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}

0800c13a <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800c13a:	b580      	push	{r7, lr}
 800c13c:	b086      	sub	sp, #24
 800c13e:	af00      	add	r7, sp, #0
 800c140:	60f8      	str	r0, [r7, #12]
 800c142:	60b9      	str	r1, [r7, #8]
 800c144:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800c146:	e020      	b.n	800c18a <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	6818      	ldr	r0, [r3, #0]
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	69db      	ldr	r3, [r3, #28]
 800c150:	68ba      	ldr	r2, [r7, #8]
 800c152:	1ad3      	subs	r3, r2, r3
 800c154:	1c59      	adds	r1, r3, #1
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	69db      	ldr	r3, [r3, #28]
 800c15a:	2b01      	cmp	r3, #1
 800c15c:	d905      	bls.n	800c16a <fill_last_frag+0x30>
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	69db      	ldr	r3, [r3, #28]
 800c162:	68ba      	ldr	r2, [r7, #8]
 800c164:	1ad3      	subs	r3, r2, r3
 800c166:	3302      	adds	r3, #2
 800c168:	e000      	b.n	800c16c <fill_last_frag+0x32>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	461a      	mov	r2, r3
 800c16e:	f7ff fddf 	bl	800bd30 <put_fat>
 800c172:	4603      	mov	r3, r0
 800c174:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800c176:	7dfb      	ldrb	r3, [r7, #23]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d001      	beq.n	800c180 <fill_last_frag+0x46>
 800c17c:	7dfb      	ldrb	r3, [r7, #23]
 800c17e:	e009      	b.n	800c194 <fill_last_frag+0x5a>
		obj->n_frag--;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	69db      	ldr	r3, [r3, #28]
 800c184:	1e5a      	subs	r2, r3, #1
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	69db      	ldr	r3, [r3, #28]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d1da      	bne.n	800c148 <fill_last_frag+0xe>
	}
	return FR_OK;
 800c192:	2300      	movs	r3, #0
}
 800c194:	4618      	mov	r0, r3
 800c196:	3718      	adds	r7, #24
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}

0800c19c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b08a      	sub	sp, #40	; 0x28
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	60f8      	str	r0, [r7, #12]
 800c1a4:	60b9      	str	r1, [r7, #8]
 800c1a6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	627b      	str	r3, [r7, #36]	; 0x24
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	2b01      	cmp	r3, #1
 800c1be:	d904      	bls.n	800c1ca <remove_chain+0x2e>
 800c1c0:	69bb      	ldr	r3, [r7, #24]
 800c1c2:	69db      	ldr	r3, [r3, #28]
 800c1c4:	68ba      	ldr	r2, [r7, #8]
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d301      	bcc.n	800c1ce <remove_chain+0x32>
 800c1ca:	2302      	movs	r3, #2
 800c1cc:	e096      	b.n	800c2fc <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d014      	beq.n	800c1fe <remove_chain+0x62>
 800c1d4:	69bb      	ldr	r3, [r7, #24]
 800c1d6:	781b      	ldrb	r3, [r3, #0]
 800c1d8:	2b04      	cmp	r3, #4
 800c1da:	d103      	bne.n	800c1e4 <remove_chain+0x48>
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	79db      	ldrb	r3, [r3, #7]
 800c1e0:	2b02      	cmp	r3, #2
 800c1e2:	d00c      	beq.n	800c1fe <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c1e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c1e8:	6879      	ldr	r1, [r7, #4]
 800c1ea:	69b8      	ldr	r0, [r7, #24]
 800c1ec:	f7ff fda0 	bl	800bd30 <put_fat>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c1f4:	7ffb      	ldrb	r3, [r7, #31]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d001      	beq.n	800c1fe <remove_chain+0x62>
 800c1fa:	7ffb      	ldrb	r3, [r7, #31]
 800c1fc:	e07e      	b.n	800c2fc <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c1fe:	68b9      	ldr	r1, [r7, #8]
 800c200:	68f8      	ldr	r0, [r7, #12]
 800c202:	f7ff fc7b 	bl	800bafc <get_fat>
 800c206:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d055      	beq.n	800c2ba <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	2b01      	cmp	r3, #1
 800c212:	d101      	bne.n	800c218 <remove_chain+0x7c>
 800c214:	2302      	movs	r3, #2
 800c216:	e071      	b.n	800c2fc <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c21e:	d101      	bne.n	800c224 <remove_chain+0x88>
 800c220:	2301      	movs	r3, #1
 800c222:	e06b      	b.n	800c2fc <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800c224:	69bb      	ldr	r3, [r7, #24]
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	2b04      	cmp	r3, #4
 800c22a:	d00b      	beq.n	800c244 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c22c:	2200      	movs	r2, #0
 800c22e:	68b9      	ldr	r1, [r7, #8]
 800c230:	69b8      	ldr	r0, [r7, #24]
 800c232:	f7ff fd7d 	bl	800bd30 <put_fat>
 800c236:	4603      	mov	r3, r0
 800c238:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c23a:	7ffb      	ldrb	r3, [r7, #31]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d001      	beq.n	800c244 <remove_chain+0xa8>
 800c240:	7ffb      	ldrb	r3, [r7, #31]
 800c242:	e05b      	b.n	800c2fc <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c244:	69bb      	ldr	r3, [r7, #24]
 800c246:	699a      	ldr	r2, [r3, #24]
 800c248:	69bb      	ldr	r3, [r7, #24]
 800c24a:	69db      	ldr	r3, [r3, #28]
 800c24c:	3b02      	subs	r3, #2
 800c24e:	429a      	cmp	r2, r3
 800c250:	d20b      	bcs.n	800c26a <remove_chain+0xce>
			fs->free_clst++;
 800c252:	69bb      	ldr	r3, [r7, #24]
 800c254:	699b      	ldr	r3, [r3, #24]
 800c256:	1c5a      	adds	r2, r3, #1
 800c258:	69bb      	ldr	r3, [r7, #24]
 800c25a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800c25c:	69bb      	ldr	r3, [r7, #24]
 800c25e:	791b      	ldrb	r3, [r3, #4]
 800c260:	f043 0301 	orr.w	r3, r3, #1
 800c264:	b2da      	uxtb	r2, r3
 800c266:	69bb      	ldr	r3, [r7, #24]
 800c268:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800c26a:	6a3b      	ldr	r3, [r7, #32]
 800c26c:	3301      	adds	r3, #1
 800c26e:	697a      	ldr	r2, [r7, #20]
 800c270:	429a      	cmp	r2, r3
 800c272:	d102      	bne.n	800c27a <remove_chain+0xde>
			ecl = nxt;
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	623b      	str	r3, [r7, #32]
 800c278:	e017      	b.n	800c2aa <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800c27a:	69bb      	ldr	r3, [r7, #24]
 800c27c:	781b      	ldrb	r3, [r3, #0]
 800c27e:	2b04      	cmp	r3, #4
 800c280:	d10f      	bne.n	800c2a2 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800c282:	6a3a      	ldr	r2, [r7, #32]
 800c284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c286:	1ad3      	subs	r3, r2, r3
 800c288:	1c5a      	adds	r2, r3, #1
 800c28a:	2300      	movs	r3, #0
 800c28c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c28e:	69b8      	ldr	r0, [r7, #24]
 800c290:	f7ff feba 	bl	800c008 <change_bitmap>
 800c294:	4603      	mov	r3, r0
 800c296:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800c298:	7ffb      	ldrb	r3, [r7, #31]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d001      	beq.n	800c2a2 <remove_chain+0x106>
 800c29e:	7ffb      	ldrb	r3, [r7, #31]
 800c2a0:	e02c      	b.n	800c2fc <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	623b      	str	r3, [r7, #32]
 800c2a6:	6a3b      	ldr	r3, [r7, #32]
 800c2a8:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c2ae:	69bb      	ldr	r3, [r7, #24]
 800c2b0:	69db      	ldr	r3, [r3, #28]
 800c2b2:	68ba      	ldr	r2, [r7, #8]
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d3a2      	bcc.n	800c1fe <remove_chain+0x62>
 800c2b8:	e000      	b.n	800c2bc <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800c2ba:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800c2bc:	69bb      	ldr	r3, [r7, #24]
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	2b04      	cmp	r3, #4
 800c2c2:	d11a      	bne.n	800c2fa <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d103      	bne.n	800c2d2 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	71da      	strb	r2, [r3, #7]
 800c2d0:	e013      	b.n	800c2fa <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	79db      	ldrb	r3, [r3, #7]
 800c2d6:	2b03      	cmp	r3, #3
 800c2d8:	d10f      	bne.n	800c2fa <remove_chain+0x15e>
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	689b      	ldr	r3, [r3, #8]
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d30a      	bcc.n	800c2fa <remove_chain+0x15e>
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	689a      	ldr	r2, [r3, #8]
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	699b      	ldr	r3, [r3, #24]
 800c2ec:	4413      	add	r3, r2
 800c2ee:	687a      	ldr	r2, [r7, #4]
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d802      	bhi.n	800c2fa <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2202      	movs	r2, #2
 800c2f8:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800c2fa:	2300      	movs	r3, #0
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3728      	adds	r7, #40	; 0x28
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}

0800c304 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b088      	sub	sp, #32
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d10d      	bne.n	800c336 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	695b      	ldr	r3, [r3, #20]
 800c31e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c320:	69bb      	ldr	r3, [r7, #24]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d004      	beq.n	800c330 <create_chain+0x2c>
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	69db      	ldr	r3, [r3, #28]
 800c32a:	69ba      	ldr	r2, [r7, #24]
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d31b      	bcc.n	800c368 <create_chain+0x64>
 800c330:	2301      	movs	r3, #1
 800c332:	61bb      	str	r3, [r7, #24]
 800c334:	e018      	b.n	800c368 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c336:	6839      	ldr	r1, [r7, #0]
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f7ff fbdf 	bl	800bafc <get_fat>
 800c33e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	2b01      	cmp	r3, #1
 800c344:	d801      	bhi.n	800c34a <create_chain+0x46>
 800c346:	2301      	movs	r3, #1
 800c348:	e0d9      	b.n	800c4fe <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c350:	d101      	bne.n	800c356 <create_chain+0x52>
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	e0d3      	b.n	800c4fe <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	69db      	ldr	r3, [r3, #28]
 800c35a:	68fa      	ldr	r2, [r7, #12]
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d201      	bcs.n	800c364 <create_chain+0x60>
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	e0cc      	b.n	800c4fe <create_chain+0x1fa>
		scl = clst;
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	781b      	ldrb	r3, [r3, #0]
 800c36c:	2b04      	cmp	r3, #4
 800c36e:	d164      	bne.n	800c43a <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800c370:	2201      	movs	r2, #1
 800c372:	69b9      	ldr	r1, [r7, #24]
 800c374:	6938      	ldr	r0, [r7, #16]
 800c376:	f7ff fdcb 	bl	800bf10 <find_bitmap>
 800c37a:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800c37c:	69fb      	ldr	r3, [r7, #28]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d003      	beq.n	800c38a <create_chain+0x86>
 800c382:	69fb      	ldr	r3, [r7, #28]
 800c384:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c388:	d101      	bne.n	800c38e <create_chain+0x8a>
 800c38a:	69fb      	ldr	r3, [r7, #28]
 800c38c:	e0b7      	b.n	800c4fe <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800c38e:	2301      	movs	r3, #1
 800c390:	2201      	movs	r2, #1
 800c392:	69f9      	ldr	r1, [r7, #28]
 800c394:	6938      	ldr	r0, [r7, #16]
 800c396:	f7ff fe37 	bl	800c008 <change_bitmap>
 800c39a:	4603      	mov	r3, r0
 800c39c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800c39e:	7dfb      	ldrb	r3, [r7, #23]
 800c3a0:	2b02      	cmp	r3, #2
 800c3a2:	d101      	bne.n	800c3a8 <create_chain+0xa4>
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	e0aa      	b.n	800c4fe <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800c3a8:	7dfb      	ldrb	r3, [r7, #23]
 800c3aa:	2b01      	cmp	r3, #1
 800c3ac:	d102      	bne.n	800c3b4 <create_chain+0xb0>
 800c3ae:	f04f 33ff 	mov.w	r3, #4294967295
 800c3b2:	e0a4      	b.n	800c4fe <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d103      	bne.n	800c3c2 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2202      	movs	r2, #2
 800c3be:	71da      	strb	r2, [r3, #7]
 800c3c0:	e011      	b.n	800c3e6 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	79db      	ldrb	r3, [r3, #7]
 800c3c6:	2b02      	cmp	r3, #2
 800c3c8:	d10d      	bne.n	800c3e6 <create_chain+0xe2>
 800c3ca:	69bb      	ldr	r3, [r7, #24]
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	69fa      	ldr	r2, [r7, #28]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d008      	beq.n	800c3e6 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	689b      	ldr	r3, [r3, #8]
 800c3d8:	69ba      	ldr	r2, [r7, #24]
 800c3da:	1ad2      	subs	r2, r2, r3
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2203      	movs	r2, #3
 800c3e4:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	79db      	ldrb	r3, [r3, #7]
 800c3ea:	2b02      	cmp	r3, #2
 800c3ec:	d064      	beq.n	800c4b8 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	69fa      	ldr	r2, [r7, #28]
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d10b      	bne.n	800c410 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	69db      	ldr	r3, [r3, #28]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d003      	beq.n	800c408 <create_chain+0x104>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	69db      	ldr	r3, [r3, #28]
 800c404:	3301      	adds	r3, #1
 800c406:	e000      	b.n	800c40a <create_chain+0x106>
 800c408:	2302      	movs	r3, #2
 800c40a:	687a      	ldr	r2, [r7, #4]
 800c40c:	61d3      	str	r3, [r2, #28]
 800c40e:	e053      	b.n	800c4b8 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	69db      	ldr	r3, [r3, #28]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d102      	bne.n	800c41e <create_chain+0x11a>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2201      	movs	r2, #1
 800c41c:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800c41e:	69fa      	ldr	r2, [r7, #28]
 800c420:	6839      	ldr	r1, [r7, #0]
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f7ff fe89 	bl	800c13a <fill_last_frag>
 800c428:	4603      	mov	r3, r0
 800c42a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800c42c:	7dfb      	ldrb	r3, [r7, #23]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d142      	bne.n	800c4b8 <create_chain+0x1b4>
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2201      	movs	r2, #1
 800c436:	61da      	str	r2, [r3, #28]
 800c438:	e03e      	b.n	800c4b8 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c43a:	69bb      	ldr	r3, [r7, #24]
 800c43c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c43e:	69fb      	ldr	r3, [r7, #28]
 800c440:	3301      	adds	r3, #1
 800c442:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	69db      	ldr	r3, [r3, #28]
 800c448:	69fa      	ldr	r2, [r7, #28]
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d307      	bcc.n	800c45e <create_chain+0x15a>
				ncl = 2;
 800c44e:	2302      	movs	r3, #2
 800c450:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c452:	69fa      	ldr	r2, [r7, #28]
 800c454:	69bb      	ldr	r3, [r7, #24]
 800c456:	429a      	cmp	r2, r3
 800c458:	d901      	bls.n	800c45e <create_chain+0x15a>
 800c45a:	2300      	movs	r3, #0
 800c45c:	e04f      	b.n	800c4fe <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c45e:	69f9      	ldr	r1, [r7, #28]
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f7ff fb4b 	bl	800bafc <get_fat>
 800c466:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d00e      	beq.n	800c48c <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	2b01      	cmp	r3, #1
 800c472:	d003      	beq.n	800c47c <create_chain+0x178>
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c47a:	d101      	bne.n	800c480 <create_chain+0x17c>
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	e03e      	b.n	800c4fe <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800c480:	69fa      	ldr	r2, [r7, #28]
 800c482:	69bb      	ldr	r3, [r7, #24]
 800c484:	429a      	cmp	r2, r3
 800c486:	d1da      	bne.n	800c43e <create_chain+0x13a>
 800c488:	2300      	movs	r3, #0
 800c48a:	e038      	b.n	800c4fe <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800c48c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c48e:	f04f 32ff 	mov.w	r2, #4294967295
 800c492:	69f9      	ldr	r1, [r7, #28]
 800c494:	6938      	ldr	r0, [r7, #16]
 800c496:	f7ff fc4b 	bl	800bd30 <put_fat>
 800c49a:	4603      	mov	r3, r0
 800c49c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c49e:	7dfb      	ldrb	r3, [r7, #23]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d109      	bne.n	800c4b8 <create_chain+0x1b4>
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d006      	beq.n	800c4b8 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c4aa:	69fa      	ldr	r2, [r7, #28]
 800c4ac:	6839      	ldr	r1, [r7, #0]
 800c4ae:	6938      	ldr	r0, [r7, #16]
 800c4b0:	f7ff fc3e 	bl	800bd30 <put_fat>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c4b8:	7dfb      	ldrb	r3, [r7, #23]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d116      	bne.n	800c4ec <create_chain+0x1e8>
		fs->last_clst = ncl;
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	69fa      	ldr	r2, [r7, #28]
 800c4c2:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	699a      	ldr	r2, [r3, #24]
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	69db      	ldr	r3, [r3, #28]
 800c4cc:	3b02      	subs	r3, #2
 800c4ce:	429a      	cmp	r2, r3
 800c4d0:	d804      	bhi.n	800c4dc <create_chain+0x1d8>
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	699b      	ldr	r3, [r3, #24]
 800c4d6:	1e5a      	subs	r2, r3, #1
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	791b      	ldrb	r3, [r3, #4]
 800c4e0:	f043 0301 	orr.w	r3, r3, #1
 800c4e4:	b2da      	uxtb	r2, r3
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	711a      	strb	r2, [r3, #4]
 800c4ea:	e007      	b.n	800c4fc <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c4ec:	7dfb      	ldrb	r3, [r7, #23]
 800c4ee:	2b01      	cmp	r3, #1
 800c4f0:	d102      	bne.n	800c4f8 <create_chain+0x1f4>
 800c4f2:	f04f 33ff 	mov.w	r3, #4294967295
 800c4f6:	e000      	b.n	800c4fa <create_chain+0x1f6>
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c4fc:	69fb      	ldr	r3, [r7, #28]
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3720      	adds	r7, #32
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}

0800c506 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c506:	b5b0      	push	{r4, r5, r7, lr}
 800c508:	b088      	sub	sp, #32
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	60f8      	str	r0, [r7, #12]
 800c50e:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c51c:	3304      	adds	r3, #4
 800c51e:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c520:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c524:	f04f 0000 	mov.w	r0, #0
 800c528:	f04f 0100 	mov.w	r1, #0
 800c52c:	0a50      	lsrs	r0, r2, #9
 800c52e:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800c532:	0a59      	lsrs	r1, r3, #9
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	895b      	ldrh	r3, [r3, #10]
 800c538:	b29b      	uxth	r3, r3
 800c53a:	2200      	movs	r2, #0
 800c53c:	461c      	mov	r4, r3
 800c53e:	4615      	mov	r5, r2
 800c540:	4622      	mov	r2, r4
 800c542:	462b      	mov	r3, r5
 800c544:	f7f3 feac 	bl	80002a0 <__aeabi_uldivmod>
 800c548:	4602      	mov	r2, r0
 800c54a:	460b      	mov	r3, r1
 800c54c:	4613      	mov	r3, r2
 800c54e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c550:	69bb      	ldr	r3, [r7, #24]
 800c552:	1d1a      	adds	r2, r3, #4
 800c554:	61ba      	str	r2, [r7, #24]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c55a:	693b      	ldr	r3, [r7, #16]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d101      	bne.n	800c564 <clmt_clust+0x5e>
 800c560:	2300      	movs	r3, #0
 800c562:	e010      	b.n	800c586 <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 800c564:	69fa      	ldr	r2, [r7, #28]
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	429a      	cmp	r2, r3
 800c56a:	d307      	bcc.n	800c57c <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 800c56c:	69fa      	ldr	r2, [r7, #28]
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	1ad3      	subs	r3, r2, r3
 800c572:	61fb      	str	r3, [r7, #28]
 800c574:	69bb      	ldr	r3, [r7, #24]
 800c576:	3304      	adds	r3, #4
 800c578:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c57a:	e7e9      	b.n	800c550 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 800c57c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c57e:	69bb      	ldr	r3, [r7, #24]
 800c580:	681a      	ldr	r2, [r3, #0]
 800c582:	69fb      	ldr	r3, [r7, #28]
 800c584:	4413      	add	r3, r2
}
 800c586:	4618      	mov	r0, r3
 800c588:	3720      	adds	r7, #32
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bdb0      	pop	{r4, r5, r7, pc}

0800c58e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c58e:	b580      	push	{r7, lr}
 800c590:	b086      	sub	sp, #24
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
 800c596:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	2b04      	cmp	r3, #4
 800c5a4:	d102      	bne.n	800c5ac <dir_sdi+0x1e>
 800c5a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5aa:	e001      	b.n	800c5b0 <dir_sdi+0x22>
 800c5ac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d904      	bls.n	800c5c0 <dir_sdi+0x32>
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	f003 031f 	and.w	r3, r3, #31
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d001      	beq.n	800c5c4 <dir_sdi+0x36>
		return FR_INT_ERR;
 800c5c0:	2302      	movs	r3, #2
 800c5c2:	e066      	b.n	800c692 <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	683a      	ldr	r2, [r7, #0]
 800c5c8:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	689b      	ldr	r3, [r3, #8]
 800c5ce:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d109      	bne.n	800c5ea <dir_sdi+0x5c>
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	2b02      	cmp	r3, #2
 800c5dc:	d905      	bls.n	800c5ea <dir_sdi+0x5c>
		clst = fs->dirbase;
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5e2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c5ea:	697b      	ldr	r3, [r7, #20]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d10c      	bne.n	800c60a <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	095b      	lsrs	r3, r3, #5
 800c5f4:	693a      	ldr	r2, [r7, #16]
 800c5f6:	8912      	ldrh	r2, [r2, #8]
 800c5f8:	4293      	cmp	r3, r2
 800c5fa:	d301      	bcc.n	800c600 <dir_sdi+0x72>
 800c5fc:	2302      	movs	r3, #2
 800c5fe:	e048      	b.n	800c692 <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	639a      	str	r2, [r3, #56]	; 0x38
 800c608:	e029      	b.n	800c65e <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	895b      	ldrh	r3, [r3, #10]
 800c60e:	025b      	lsls	r3, r3, #9
 800c610:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c612:	e019      	b.n	800c648 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6979      	ldr	r1, [r7, #20]
 800c618:	4618      	mov	r0, r3
 800c61a:	f7ff fa6f 	bl	800bafc <get_fat>
 800c61e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c626:	d101      	bne.n	800c62c <dir_sdi+0x9e>
 800c628:	2301      	movs	r3, #1
 800c62a:	e032      	b.n	800c692 <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	2b01      	cmp	r3, #1
 800c630:	d904      	bls.n	800c63c <dir_sdi+0xae>
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	69db      	ldr	r3, [r3, #28]
 800c636:	697a      	ldr	r2, [r7, #20]
 800c638:	429a      	cmp	r2, r3
 800c63a:	d301      	bcc.n	800c640 <dir_sdi+0xb2>
 800c63c:	2302      	movs	r3, #2
 800c63e:	e028      	b.n	800c692 <dir_sdi+0x104>
			ofs -= csz;
 800c640:	683a      	ldr	r2, [r7, #0]
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	1ad3      	subs	r3, r2, r3
 800c646:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c648:	683a      	ldr	r2, [r7, #0]
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	429a      	cmp	r2, r3
 800c64e:	d2e1      	bcs.n	800c614 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 800c650:	6979      	ldr	r1, [r7, #20]
 800c652:	6938      	ldr	r0, [r7, #16]
 800c654:	f7ff fa32 	bl	800babc <clust2sect>
 800c658:	4602      	mov	r2, r0
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	697a      	ldr	r2, [r7, #20]
 800c662:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d101      	bne.n	800c670 <dir_sdi+0xe2>
 800c66c:	2302      	movs	r3, #2
 800c66e:	e010      	b.n	800c692 <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	0a5b      	lsrs	r3, r3, #9
 800c678:	441a      	add	r2, r3
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c68a:	441a      	add	r2, r3
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800c690:	2300      	movs	r3, #0
}
 800c692:	4618      	mov	r0, r3
 800c694:	3718      	adds	r7, #24
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}

0800c69a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c69a:	b580      	push	{r7, lr}
 800c69c:	b086      	sub	sp, #24
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
 800c6a2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6ae:	3320      	adds	r3, #32
 800c6b0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d00b      	beq.n	800c6d2 <dir_next+0x38>
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	781b      	ldrb	r3, [r3, #0]
 800c6be:	2b04      	cmp	r3, #4
 800c6c0:	d102      	bne.n	800c6c8 <dir_next+0x2e>
 800c6c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6c6:	e001      	b.n	800c6cc <dir_next+0x32>
 800c6c8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	d801      	bhi.n	800c6d6 <dir_next+0x3c>
 800c6d2:	2304      	movs	r3, #4
 800c6d4:	e0b2      	b.n	800c83c <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	f040 80a0 	bne.w	800c822 <dir_next+0x188>
		dp->sect++;				/* Next sector */
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6e6:	1c5a      	adds	r2, r3, #1
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d10b      	bne.n	800c70c <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	095b      	lsrs	r3, r3, #5
 800c6f8:	68fa      	ldr	r2, [r7, #12]
 800c6fa:	8912      	ldrh	r2, [r2, #8]
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	f0c0 8090 	bcc.w	800c822 <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2200      	movs	r2, #0
 800c706:	639a      	str	r2, [r3, #56]	; 0x38
 800c708:	2304      	movs	r3, #4
 800c70a:	e097      	b.n	800c83c <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	0a5b      	lsrs	r3, r3, #9
 800c710:	68fa      	ldr	r2, [r7, #12]
 800c712:	8952      	ldrh	r2, [r2, #10]
 800c714:	3a01      	subs	r2, #1
 800c716:	4013      	ands	r3, r2
 800c718:	2b00      	cmp	r3, #0
 800c71a:	f040 8082 	bne.w	800c822 <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c724:	4619      	mov	r1, r3
 800c726:	4610      	mov	r0, r2
 800c728:	f7ff f9e8 	bl	800bafc <get_fat>
 800c72c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	2b01      	cmp	r3, #1
 800c732:	d801      	bhi.n	800c738 <dir_next+0x9e>
 800c734:	2302      	movs	r3, #2
 800c736:	e081      	b.n	800c83c <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c73e:	d101      	bne.n	800c744 <dir_next+0xaa>
 800c740:	2301      	movs	r3, #1
 800c742:	e07b      	b.n	800c83c <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	69db      	ldr	r3, [r3, #28]
 800c748:	697a      	ldr	r2, [r7, #20]
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d35f      	bcc.n	800c80e <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d104      	bne.n	800c75e <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2200      	movs	r2, #0
 800c758:	639a      	str	r2, [r3, #56]	; 0x38
 800c75a:	2304      	movs	r3, #4
 800c75c:	e06e      	b.n	800c83c <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c75e:	687a      	ldr	r2, [r7, #4]
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c764:	4619      	mov	r1, r3
 800c766:	4610      	mov	r0, r2
 800c768:	f7ff fdcc 	bl	800c304 <create_chain>
 800c76c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d101      	bne.n	800c778 <dir_next+0xde>
 800c774:	2307      	movs	r3, #7
 800c776:	e061      	b.n	800c83c <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	2b01      	cmp	r3, #1
 800c77c:	d101      	bne.n	800c782 <dir_next+0xe8>
 800c77e:	2302      	movs	r3, #2
 800c780:	e05c      	b.n	800c83c <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c788:	d101      	bne.n	800c78e <dir_next+0xf4>
 800c78a:	2301      	movs	r3, #1
 800c78c:	e056      	b.n	800c83c <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	79db      	ldrb	r3, [r3, #7]
 800c792:	f043 0304 	orr.w	r3, r3, #4
 800c796:	b2da      	uxtb	r2, r3
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c79c:	68f8      	ldr	r0, [r7, #12]
 800c79e:	f7ff f8ad 	bl	800b8fc <sync_window>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d001      	beq.n	800c7ac <dir_next+0x112>
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	e047      	b.n	800c83c <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	3338      	adds	r3, #56	; 0x38
 800c7b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c7b4:	2100      	movs	r1, #0
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f7fe fed6 	bl	800b568 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c7bc:	2300      	movs	r3, #0
 800c7be:	613b      	str	r3, [r7, #16]
 800c7c0:	6979      	ldr	r1, [r7, #20]
 800c7c2:	68f8      	ldr	r0, [r7, #12]
 800c7c4:	f7ff f97a 	bl	800babc <clust2sect>
 800c7c8:	4602      	mov	r2, r0
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	635a      	str	r2, [r3, #52]	; 0x34
 800c7ce:	e012      	b.n	800c7f6 <dir_next+0x15c>
						fs->wflag = 1;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c7d6:	68f8      	ldr	r0, [r7, #12]
 800c7d8:	f7ff f890 	bl	800b8fc <sync_window>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d001      	beq.n	800c7e6 <dir_next+0x14c>
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	e02a      	b.n	800c83c <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	3301      	adds	r3, #1
 800c7ea:	613b      	str	r3, [r7, #16]
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7f0:	1c5a      	adds	r2, r3, #1
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	635a      	str	r2, [r3, #52]	; 0x34
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	895b      	ldrh	r3, [r3, #10]
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d3e6      	bcc.n	800c7d0 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	1ad2      	subs	r2, r2, r3
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	697a      	ldr	r2, [r7, #20]
 800c812:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800c814:	6979      	ldr	r1, [r7, #20]
 800c816:	68f8      	ldr	r0, [r7, #12]
 800c818:	f7ff f950 	bl	800babc <clust2sect>
 800c81c:	4602      	mov	r2, r0
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	68ba      	ldr	r2, [r7, #8]
 800c826:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c834:	441a      	add	r2, r3
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800c83a:	2300      	movs	r3, #0
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3718      	adds	r7, #24
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}

0800c844 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b086      	sub	sp, #24
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
 800c84c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c854:	2100      	movs	r1, #0
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f7ff fe99 	bl	800c58e <dir_sdi>
 800c85c:	4603      	mov	r3, r0
 800c85e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c860:	7dfb      	ldrb	r3, [r7, #23]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d140      	bne.n	800c8e8 <dir_alloc+0xa4>
		n = 0;
 800c866:	2300      	movs	r3, #0
 800c868:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c86e:	4619      	mov	r1, r3
 800c870:	68f8      	ldr	r0, [r7, #12]
 800c872:	f7ff f887 	bl	800b984 <move_window>
 800c876:	4603      	mov	r3, r0
 800c878:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c87a:	7dfb      	ldrb	r3, [r7, #23]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d132      	bne.n	800c8e6 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	781b      	ldrb	r3, [r3, #0]
 800c884:	2b04      	cmp	r3, #4
 800c886:	d108      	bne.n	800c89a <dir_alloc+0x56>
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c88c:	781b      	ldrb	r3, [r3, #0]
 800c88e:	b25b      	sxtb	r3, r3
 800c890:	43db      	mvns	r3, r3
 800c892:	b2db      	uxtb	r3, r3
 800c894:	09db      	lsrs	r3, r3, #7
 800c896:	b2db      	uxtb	r3, r3
 800c898:	e00f      	b.n	800c8ba <dir_alloc+0x76>
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c89e:	781b      	ldrb	r3, [r3, #0]
 800c8a0:	2be5      	cmp	r3, #229	; 0xe5
 800c8a2:	d004      	beq.n	800c8ae <dir_alloc+0x6a>
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8a8:	781b      	ldrb	r3, [r3, #0]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d101      	bne.n	800c8b2 <dir_alloc+0x6e>
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	e000      	b.n	800c8b4 <dir_alloc+0x70>
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	f003 0301 	and.w	r3, r3, #1
 800c8b8:	b2db      	uxtb	r3, r3
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d007      	beq.n	800c8ce <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	3301      	adds	r3, #1
 800c8c2:	613b      	str	r3, [r7, #16]
 800c8c4:	693a      	ldr	r2, [r7, #16]
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d102      	bne.n	800c8d2 <dir_alloc+0x8e>
 800c8cc:	e00c      	b.n	800c8e8 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c8d2:	2101      	movs	r1, #1
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f7ff fee0 	bl	800c69a <dir_next>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c8de:	7dfb      	ldrb	r3, [r7, #23]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d0c2      	beq.n	800c86a <dir_alloc+0x26>
 800c8e4:	e000      	b.n	800c8e8 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800c8e6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c8e8:	7dfb      	ldrb	r3, [r7, #23]
 800c8ea:	2b04      	cmp	r3, #4
 800c8ec:	d101      	bne.n	800c8f2 <dir_alloc+0xae>
 800c8ee:	2307      	movs	r3, #7
 800c8f0:	75fb      	strb	r3, [r7, #23]
	return res;
 800c8f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	3718      	adds	r7, #24
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}

0800c8fc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b084      	sub	sp, #16
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	331a      	adds	r3, #26
 800c90a:	4618      	mov	r0, r3
 800c90c:	f7fe fc26 	bl	800b15c <ld_word>
 800c910:	4603      	mov	r3, r0
 800c912:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	2b03      	cmp	r3, #3
 800c91a:	d109      	bne.n	800c930 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	3314      	adds	r3, #20
 800c920:	4618      	mov	r0, r3
 800c922:	f7fe fc1b 	bl	800b15c <ld_word>
 800c926:	4603      	mov	r3, r0
 800c928:	041b      	lsls	r3, r3, #16
 800c92a:	68fa      	ldr	r2, [r7, #12]
 800c92c:	4313      	orrs	r3, r2
 800c92e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c930:	68fb      	ldr	r3, [r7, #12]
}
 800c932:	4618      	mov	r0, r3
 800c934:	3710      	adds	r7, #16
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}

0800c93a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c93a:	b580      	push	{r7, lr}
 800c93c:	b084      	sub	sp, #16
 800c93e:	af00      	add	r7, sp, #0
 800c940:	60f8      	str	r0, [r7, #12]
 800c942:	60b9      	str	r1, [r7, #8]
 800c944:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	331a      	adds	r3, #26
 800c94a:	687a      	ldr	r2, [r7, #4]
 800c94c:	b292      	uxth	r2, r2
 800c94e:	4611      	mov	r1, r2
 800c950:	4618      	mov	r0, r3
 800c952:	f7fe fd19 	bl	800b388 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	2b03      	cmp	r3, #3
 800c95c:	d109      	bne.n	800c972 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	f103 0214 	add.w	r2, r3, #20
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	0c1b      	lsrs	r3, r3, #16
 800c968:	b29b      	uxth	r3, r3
 800c96a:	4619      	mov	r1, r3
 800c96c:	4610      	mov	r0, r2
 800c96e:	f7fe fd0b 	bl	800b388 <st_word>
	}
}
 800c972:	bf00      	nop
 800c974:	3710      	adds	r7, #16
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
	...

0800c97c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c97c:	b590      	push	{r4, r7, lr}
 800c97e:	b087      	sub	sp, #28
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	331a      	adds	r3, #26
 800c98a:	4618      	mov	r0, r3
 800c98c:	f7fe fbe6 	bl	800b15c <ld_word>
 800c990:	4603      	mov	r3, r0
 800c992:	2b00      	cmp	r3, #0
 800c994:	d001      	beq.n	800c99a <cmp_lfn+0x1e>
 800c996:	2300      	movs	r3, #0
 800c998:	e059      	b.n	800ca4e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	781b      	ldrb	r3, [r3, #0]
 800c99e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9a2:	1e5a      	subs	r2, r3, #1
 800c9a4:	4613      	mov	r3, r2
 800c9a6:	005b      	lsls	r3, r3, #1
 800c9a8:	4413      	add	r3, r2
 800c9aa:	009b      	lsls	r3, r3, #2
 800c9ac:	4413      	add	r3, r2
 800c9ae:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	81fb      	strh	r3, [r7, #14]
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	613b      	str	r3, [r7, #16]
 800c9b8:	e033      	b.n	800ca22 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c9ba:	4a27      	ldr	r2, [pc, #156]	; (800ca58 <cmp_lfn+0xdc>)
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	4413      	add	r3, r2
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	461a      	mov	r2, r3
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	4413      	add	r3, r2
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f7fe fbc7 	bl	800b15c <ld_word>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c9d2:	89fb      	ldrh	r3, [r7, #14]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d01a      	beq.n	800ca0e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	2bfe      	cmp	r3, #254	; 0xfe
 800c9dc:	d812      	bhi.n	800ca04 <cmp_lfn+0x88>
 800c9de:	89bb      	ldrh	r3, [r7, #12]
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f003 f96f 	bl	800fcc4 <ff_wtoupper>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	461c      	mov	r4, r3
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	1c5a      	adds	r2, r3, #1
 800c9ee:	617a      	str	r2, [r7, #20]
 800c9f0:	005b      	lsls	r3, r3, #1
 800c9f2:	687a      	ldr	r2, [r7, #4]
 800c9f4:	4413      	add	r3, r2
 800c9f6:	881b      	ldrh	r3, [r3, #0]
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f003 f963 	bl	800fcc4 <ff_wtoupper>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	429c      	cmp	r4, r3
 800ca02:	d001      	beq.n	800ca08 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ca04:	2300      	movs	r3, #0
 800ca06:	e022      	b.n	800ca4e <cmp_lfn+0xd2>
			}
			wc = uc;
 800ca08:	89bb      	ldrh	r3, [r7, #12]
 800ca0a:	81fb      	strh	r3, [r7, #14]
 800ca0c:	e006      	b.n	800ca1c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ca0e:	89bb      	ldrh	r3, [r7, #12]
 800ca10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d001      	beq.n	800ca1c <cmp_lfn+0xa0>
 800ca18:	2300      	movs	r3, #0
 800ca1a:	e018      	b.n	800ca4e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	3301      	adds	r3, #1
 800ca20:	613b      	str	r3, [r7, #16]
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	2b0c      	cmp	r3, #12
 800ca26:	d9c8      	bls.n	800c9ba <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d00b      	beq.n	800ca4c <cmp_lfn+0xd0>
 800ca34:	89fb      	ldrh	r3, [r7, #14]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d008      	beq.n	800ca4c <cmp_lfn+0xd0>
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	005b      	lsls	r3, r3, #1
 800ca3e:	687a      	ldr	r2, [r7, #4]
 800ca40:	4413      	add	r3, r2
 800ca42:	881b      	ldrh	r3, [r3, #0]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d001      	beq.n	800ca4c <cmp_lfn+0xd0>
 800ca48:	2300      	movs	r3, #0
 800ca4a:	e000      	b.n	800ca4e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ca4c:	2301      	movs	r3, #1
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	371c      	adds	r7, #28
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd90      	pop	{r4, r7, pc}
 800ca56:	bf00      	nop
 800ca58:	08014370 	.word	0x08014370

0800ca5c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b086      	sub	sp, #24
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
 800ca64:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	331a      	adds	r3, #26
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7fe fb76 	bl	800b15c <ld_word>
 800ca70:	4603      	mov	r3, r0
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d001      	beq.n	800ca7a <pick_lfn+0x1e>
 800ca76:	2300      	movs	r3, #0
 800ca78:	e04d      	b.n	800cb16 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca82:	1e5a      	subs	r2, r3, #1
 800ca84:	4613      	mov	r3, r2
 800ca86:	005b      	lsls	r3, r3, #1
 800ca88:	4413      	add	r3, r2
 800ca8a:	009b      	lsls	r3, r3, #2
 800ca8c:	4413      	add	r3, r2
 800ca8e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ca90:	2301      	movs	r3, #1
 800ca92:	81fb      	strh	r3, [r7, #14]
 800ca94:	2300      	movs	r3, #0
 800ca96:	613b      	str	r3, [r7, #16]
 800ca98:	e028      	b.n	800caec <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ca9a:	4a21      	ldr	r2, [pc, #132]	; (800cb20 <pick_lfn+0xc4>)
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	4413      	add	r3, r2
 800caa0:	781b      	ldrb	r3, [r3, #0]
 800caa2:	461a      	mov	r2, r3
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	4413      	add	r3, r2
 800caa8:	4618      	mov	r0, r3
 800caaa:	f7fe fb57 	bl	800b15c <ld_word>
 800caae:	4603      	mov	r3, r0
 800cab0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800cab2:	89fb      	ldrh	r3, [r7, #14]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d00f      	beq.n	800cad8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	2bfe      	cmp	r3, #254	; 0xfe
 800cabc:	d901      	bls.n	800cac2 <pick_lfn+0x66>
 800cabe:	2300      	movs	r3, #0
 800cac0:	e029      	b.n	800cb16 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800cac2:	89bb      	ldrh	r3, [r7, #12]
 800cac4:	81fb      	strh	r3, [r7, #14]
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	1c5a      	adds	r2, r3, #1
 800caca:	617a      	str	r2, [r7, #20]
 800cacc:	005b      	lsls	r3, r3, #1
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	4413      	add	r3, r2
 800cad2:	89fa      	ldrh	r2, [r7, #14]
 800cad4:	801a      	strh	r2, [r3, #0]
 800cad6:	e006      	b.n	800cae6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800cad8:	89bb      	ldrh	r3, [r7, #12]
 800cada:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cade:	4293      	cmp	r3, r2
 800cae0:	d001      	beq.n	800cae6 <pick_lfn+0x8a>
 800cae2:	2300      	movs	r3, #0
 800cae4:	e017      	b.n	800cb16 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	3301      	adds	r3, #1
 800caea:	613b      	str	r3, [r7, #16]
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	2b0c      	cmp	r3, #12
 800caf0:	d9d3      	bls.n	800ca9a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d00a      	beq.n	800cb14 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	2bfe      	cmp	r3, #254	; 0xfe
 800cb02:	d901      	bls.n	800cb08 <pick_lfn+0xac>
 800cb04:	2300      	movs	r3, #0
 800cb06:	e006      	b.n	800cb16 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	005b      	lsls	r3, r3, #1
 800cb0c:	687a      	ldr	r2, [r7, #4]
 800cb0e:	4413      	add	r3, r2
 800cb10:	2200      	movs	r2, #0
 800cb12:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800cb14:	2301      	movs	r3, #1
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3718      	adds	r7, #24
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}
 800cb1e:	bf00      	nop
 800cb20:	08014370 	.word	0x08014370

0800cb24 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b088      	sub	sp, #32
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	60f8      	str	r0, [r7, #12]
 800cb2c:	60b9      	str	r1, [r7, #8]
 800cb2e:	4611      	mov	r1, r2
 800cb30:	461a      	mov	r2, r3
 800cb32:	460b      	mov	r3, r1
 800cb34:	71fb      	strb	r3, [r7, #7]
 800cb36:	4613      	mov	r3, r2
 800cb38:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	330d      	adds	r3, #13
 800cb3e:	79ba      	ldrb	r2, [r7, #6]
 800cb40:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	330b      	adds	r3, #11
 800cb46:	220f      	movs	r2, #15
 800cb48:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	330c      	adds	r3, #12
 800cb4e:	2200      	movs	r2, #0
 800cb50:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	331a      	adds	r3, #26
 800cb56:	2100      	movs	r1, #0
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f7fe fc15 	bl	800b388 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800cb5e:	79fb      	ldrb	r3, [r7, #7]
 800cb60:	1e5a      	subs	r2, r3, #1
 800cb62:	4613      	mov	r3, r2
 800cb64:	005b      	lsls	r3, r3, #1
 800cb66:	4413      	add	r3, r2
 800cb68:	009b      	lsls	r3, r3, #2
 800cb6a:	4413      	add	r3, r2
 800cb6c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	82fb      	strh	r3, [r7, #22]
 800cb72:	2300      	movs	r3, #0
 800cb74:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800cb76:	8afb      	ldrh	r3, [r7, #22]
 800cb78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d007      	beq.n	800cb90 <put_lfn+0x6c>
 800cb80:	69fb      	ldr	r3, [r7, #28]
 800cb82:	1c5a      	adds	r2, r3, #1
 800cb84:	61fa      	str	r2, [r7, #28]
 800cb86:	005b      	lsls	r3, r3, #1
 800cb88:	68fa      	ldr	r2, [r7, #12]
 800cb8a:	4413      	add	r3, r2
 800cb8c:	881b      	ldrh	r3, [r3, #0]
 800cb8e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800cb90:	4a17      	ldr	r2, [pc, #92]	; (800cbf0 <put_lfn+0xcc>)
 800cb92:	69bb      	ldr	r3, [r7, #24]
 800cb94:	4413      	add	r3, r2
 800cb96:	781b      	ldrb	r3, [r3, #0]
 800cb98:	461a      	mov	r2, r3
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	4413      	add	r3, r2
 800cb9e:	8afa      	ldrh	r2, [r7, #22]
 800cba0:	4611      	mov	r1, r2
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7fe fbf0 	bl	800b388 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800cba8:	8afb      	ldrh	r3, [r7, #22]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d102      	bne.n	800cbb4 <put_lfn+0x90>
 800cbae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cbb2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800cbb4:	69bb      	ldr	r3, [r7, #24]
 800cbb6:	3301      	adds	r3, #1
 800cbb8:	61bb      	str	r3, [r7, #24]
 800cbba:	69bb      	ldr	r3, [r7, #24]
 800cbbc:	2b0c      	cmp	r3, #12
 800cbbe:	d9da      	bls.n	800cb76 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800cbc0:	8afb      	ldrh	r3, [r7, #22]
 800cbc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d006      	beq.n	800cbd8 <put_lfn+0xb4>
 800cbca:	69fb      	ldr	r3, [r7, #28]
 800cbcc:	005b      	lsls	r3, r3, #1
 800cbce:	68fa      	ldr	r2, [r7, #12]
 800cbd0:	4413      	add	r3, r2
 800cbd2:	881b      	ldrh	r3, [r3, #0]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d103      	bne.n	800cbe0 <put_lfn+0xbc>
 800cbd8:	79fb      	ldrb	r3, [r7, #7]
 800cbda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbde:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	79fa      	ldrb	r2, [r7, #7]
 800cbe4:	701a      	strb	r2, [r3, #0]
}
 800cbe6:	bf00      	nop
 800cbe8:	3720      	adds	r7, #32
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	08014370 	.word	0x08014370

0800cbf4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b08c      	sub	sp, #48	; 0x30
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	60f8      	str	r0, [r7, #12]
 800cbfc:	60b9      	str	r1, [r7, #8]
 800cbfe:	607a      	str	r2, [r7, #4]
 800cc00:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800cc02:	220b      	movs	r2, #11
 800cc04:	68b9      	ldr	r1, [r7, #8]
 800cc06:	68f8      	ldr	r0, [r7, #12]
 800cc08:	f7fe fc8d 	bl	800b526 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	2b05      	cmp	r3, #5
 800cc10:	d92b      	bls.n	800cc6a <gen_numname+0x76>
		sr = seq;
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800cc16:	e022      	b.n	800cc5e <gen_numname+0x6a>
			wc = *lfn++;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	1c9a      	adds	r2, r3, #2
 800cc1c:	607a      	str	r2, [r7, #4]
 800cc1e:	881b      	ldrh	r3, [r3, #0]
 800cc20:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800cc22:	2300      	movs	r3, #0
 800cc24:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc26:	e017      	b.n	800cc58 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800cc28:	69fb      	ldr	r3, [r7, #28]
 800cc2a:	005a      	lsls	r2, r3, #1
 800cc2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc2e:	f003 0301 	and.w	r3, r3, #1
 800cc32:	4413      	add	r3, r2
 800cc34:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800cc36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc38:	085b      	lsrs	r3, r3, #1
 800cc3a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800cc3c:	69fb      	ldr	r3, [r7, #28]
 800cc3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d005      	beq.n	800cc52 <gen_numname+0x5e>
 800cc46:	69fb      	ldr	r3, [r7, #28]
 800cc48:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800cc4c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800cc50:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800cc52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc54:	3301      	adds	r3, #1
 800cc56:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc5a:	2b0f      	cmp	r3, #15
 800cc5c:	d9e4      	bls.n	800cc28 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	881b      	ldrh	r3, [r3, #0]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d1d8      	bne.n	800cc18 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800cc66:	69fb      	ldr	r3, [r7, #28]
 800cc68:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800cc6a:	2307      	movs	r3, #7
 800cc6c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	b2db      	uxtb	r3, r3
 800cc72:	f003 030f 	and.w	r3, r3, #15
 800cc76:	b2db      	uxtb	r3, r3
 800cc78:	3330      	adds	r3, #48	; 0x30
 800cc7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800cc7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cc82:	2b39      	cmp	r3, #57	; 0x39
 800cc84:	d904      	bls.n	800cc90 <gen_numname+0x9c>
 800cc86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cc8a:	3307      	adds	r3, #7
 800cc8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800cc90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc92:	1e5a      	subs	r2, r3, #1
 800cc94:	62ba      	str	r2, [r7, #40]	; 0x28
 800cc96:	3330      	adds	r3, #48	; 0x30
 800cc98:	443b      	add	r3, r7
 800cc9a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cc9e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	091b      	lsrs	r3, r3, #4
 800cca6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d1df      	bne.n	800cc6e <gen_numname+0x7a>
	ns[i] = '~';
 800ccae:	f107 0214 	add.w	r2, r7, #20
 800ccb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccb4:	4413      	add	r3, r2
 800ccb6:	227e      	movs	r2, #126	; 0x7e
 800ccb8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ccba:	2300      	movs	r3, #0
 800ccbc:	627b      	str	r3, [r7, #36]	; 0x24
 800ccbe:	e002      	b.n	800ccc6 <gen_numname+0xd2>
 800ccc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	627b      	str	r3, [r7, #36]	; 0x24
 800ccc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d205      	bcs.n	800ccda <gen_numname+0xe6>
 800ccce:	68fa      	ldr	r2, [r7, #12]
 800ccd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd2:	4413      	add	r3, r2
 800ccd4:	781b      	ldrb	r3, [r3, #0]
 800ccd6:	2b20      	cmp	r3, #32
 800ccd8:	d1f2      	bne.n	800ccc0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ccda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccdc:	2b07      	cmp	r3, #7
 800ccde:	d807      	bhi.n	800ccf0 <gen_numname+0xfc>
 800cce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce2:	1c5a      	adds	r2, r3, #1
 800cce4:	62ba      	str	r2, [r7, #40]	; 0x28
 800cce6:	3330      	adds	r3, #48	; 0x30
 800cce8:	443b      	add	r3, r7
 800ccea:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ccee:	e000      	b.n	800ccf2 <gen_numname+0xfe>
 800ccf0:	2120      	movs	r1, #32
 800ccf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf4:	1c5a      	adds	r2, r3, #1
 800ccf6:	627a      	str	r2, [r7, #36]	; 0x24
 800ccf8:	68fa      	ldr	r2, [r7, #12]
 800ccfa:	4413      	add	r3, r2
 800ccfc:	460a      	mov	r2, r1
 800ccfe:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800cd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd02:	2b07      	cmp	r3, #7
 800cd04:	d9e9      	bls.n	800ccda <gen_numname+0xe6>
}
 800cd06:	bf00      	nop
 800cd08:	bf00      	nop
 800cd0a:	3730      	adds	r7, #48	; 0x30
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b085      	sub	sp, #20
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800cd1c:	230b      	movs	r3, #11
 800cd1e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800cd20:	7bfb      	ldrb	r3, [r7, #15]
 800cd22:	b2da      	uxtb	r2, r3
 800cd24:	0852      	lsrs	r2, r2, #1
 800cd26:	01db      	lsls	r3, r3, #7
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	b2da      	uxtb	r2, r3
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	1c59      	adds	r1, r3, #1
 800cd30:	6079      	str	r1, [r7, #4]
 800cd32:	781b      	ldrb	r3, [r3, #0]
 800cd34:	4413      	add	r3, r2
 800cd36:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	3b01      	subs	r3, #1
 800cd3c:	60bb      	str	r3, [r7, #8]
 800cd3e:	68bb      	ldr	r3, [r7, #8]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d1ed      	bne.n	800cd20 <sum_sfn+0x10>
	return sum;
 800cd44:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3714      	adds	r7, #20
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd50:	4770      	bx	lr

0800cd52 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800cd52:	b480      	push	{r7}
 800cd54:	b087      	sub	sp, #28
 800cd56:	af00      	add	r7, sp, #0
 800cd58:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	3301      	adds	r3, #1
 800cd5e:	781b      	ldrb	r3, [r3, #0]
 800cd60:	3301      	adds	r3, #1
 800cd62:	015b      	lsls	r3, r3, #5
 800cd64:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800cd66:	2300      	movs	r3, #0
 800cd68:	827b      	strh	r3, [r7, #18]
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	617b      	str	r3, [r7, #20]
 800cd6e:	e018      	b.n	800cda2 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	2b02      	cmp	r3, #2
 800cd74:	d103      	bne.n	800cd7e <xdir_sum+0x2c>
			i++;
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	3301      	adds	r3, #1
 800cd7a:	617b      	str	r3, [r7, #20]
 800cd7c:	e00e      	b.n	800cd9c <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800cd7e:	8a7b      	ldrh	r3, [r7, #18]
 800cd80:	03db      	lsls	r3, r3, #15
 800cd82:	b29a      	uxth	r2, r3
 800cd84:	8a7b      	ldrh	r3, [r7, #18]
 800cd86:	085b      	lsrs	r3, r3, #1
 800cd88:	b29b      	uxth	r3, r3
 800cd8a:	4413      	add	r3, r2
 800cd8c:	b29a      	uxth	r2, r3
 800cd8e:	6879      	ldr	r1, [r7, #4]
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	440b      	add	r3, r1
 800cd94:	781b      	ldrb	r3, [r3, #0]
 800cd96:	b29b      	uxth	r3, r3
 800cd98:	4413      	add	r3, r2
 800cd9a:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	3301      	adds	r3, #1
 800cda0:	617b      	str	r3, [r7, #20]
 800cda2:	697a      	ldr	r2, [r7, #20]
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	429a      	cmp	r2, r3
 800cda8:	d3e2      	bcc.n	800cd70 <xdir_sum+0x1e>
		}
	}
	return sum;
 800cdaa:	8a7b      	ldrh	r3, [r7, #18]
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	371c      	adds	r7, #28
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb6:	4770      	bx	lr

0800cdb8 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b084      	sub	sp, #16
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800cdc4:	e01f      	b.n	800ce06 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800cdc6:	89bb      	ldrh	r3, [r7, #12]
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f002 ff7b 	bl	800fcc4 <ff_wtoupper>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800cdd2:	89fb      	ldrh	r3, [r7, #14]
 800cdd4:	03db      	lsls	r3, r3, #15
 800cdd6:	b29a      	uxth	r2, r3
 800cdd8:	89fb      	ldrh	r3, [r7, #14]
 800cdda:	085b      	lsrs	r3, r3, #1
 800cddc:	b29b      	uxth	r3, r3
 800cdde:	4413      	add	r3, r2
 800cde0:	b29a      	uxth	r2, r3
 800cde2:	89bb      	ldrh	r3, [r7, #12]
 800cde4:	b2db      	uxtb	r3, r3
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	4413      	add	r3, r2
 800cdea:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800cdec:	89fb      	ldrh	r3, [r7, #14]
 800cdee:	03db      	lsls	r3, r3, #15
 800cdf0:	b29a      	uxth	r2, r3
 800cdf2:	89fb      	ldrh	r3, [r7, #14]
 800cdf4:	085b      	lsrs	r3, r3, #1
 800cdf6:	b29b      	uxth	r3, r3
 800cdf8:	4413      	add	r3, r2
 800cdfa:	b29a      	uxth	r2, r3
 800cdfc:	89bb      	ldrh	r3, [r7, #12]
 800cdfe:	0a1b      	lsrs	r3, r3, #8
 800ce00:	b29b      	uxth	r3, r3
 800ce02:	4413      	add	r3, r2
 800ce04:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	1c9a      	adds	r2, r3, #2
 800ce0a:	607a      	str	r2, [r7, #4]
 800ce0c:	881b      	ldrh	r3, [r3, #0]
 800ce0e:	81bb      	strh	r3, [r7, #12]
 800ce10:	89bb      	ldrh	r3, [r7, #12]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d1d7      	bne.n	800cdc6 <xname_sum+0xe>
	}
	return sum;
 800ce16:	89fb      	ldrh	r3, [r7, #14]
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3710      	adds	r7, #16
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}

0800ce20 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800ce20:	b590      	push	{r4, r7, lr}
 800ce22:	b087      	sub	sp, #28
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	691b      	ldr	r3, [r3, #16]
 800ce2e:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681a      	ldr	r2, [r3, #0]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce38:	4619      	mov	r1, r3
 800ce3a:	4610      	mov	r0, r2
 800ce3c:	f7fe fda2 	bl	800b984 <move_window>
 800ce40:	4603      	mov	r3, r0
 800ce42:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800ce44:	7bfb      	ldrb	r3, [r7, #15]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d001      	beq.n	800ce4e <load_xdir+0x2e>
 800ce4a:	7bfb      	ldrb	r3, [r7, #15]
 800ce4c:	e09f      	b.n	800cf8e <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	2b85      	cmp	r3, #133	; 0x85
 800ce56:	d001      	beq.n	800ce5c <load_xdir+0x3c>
 800ce58:	2302      	movs	r3, #2
 800ce5a:	e098      	b.n	800cf8e <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce60:	2220      	movs	r2, #32
 800ce62:	4619      	mov	r1, r3
 800ce64:	6938      	ldr	r0, [r7, #16]
 800ce66:	f7fe fb5e 	bl	800b526 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	3301      	adds	r3, #1
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	3301      	adds	r3, #1
 800ce72:	015b      	lsls	r3, r3, #5
 800ce74:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	2b5f      	cmp	r3, #95	; 0x5f
 800ce7a:	d903      	bls.n	800ce84 <load_xdir+0x64>
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800ce82:	d901      	bls.n	800ce88 <load_xdir+0x68>
 800ce84:	2302      	movs	r3, #2
 800ce86:	e082      	b.n	800cf8e <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800ce88:	2100      	movs	r1, #0
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f7ff fc05 	bl	800c69a <dir_next>
 800ce90:	4603      	mov	r3, r0
 800ce92:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800ce94:	7bfb      	ldrb	r3, [r7, #15]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d001      	beq.n	800ce9e <load_xdir+0x7e>
 800ce9a:	7bfb      	ldrb	r3, [r7, #15]
 800ce9c:	e077      	b.n	800cf8e <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681a      	ldr	r2, [r3, #0]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cea6:	4619      	mov	r1, r3
 800cea8:	4610      	mov	r0, r2
 800ceaa:	f7fe fd6b 	bl	800b984 <move_window>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800ceb2:	7bfb      	ldrb	r3, [r7, #15]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d001      	beq.n	800cebc <load_xdir+0x9c>
 800ceb8:	7bfb      	ldrb	r3, [r7, #15]
 800ceba:	e068      	b.n	800cf8e <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cec0:	781b      	ldrb	r3, [r3, #0]
 800cec2:	2bc0      	cmp	r3, #192	; 0xc0
 800cec4:	d001      	beq.n	800ceca <load_xdir+0xaa>
 800cec6:	2302      	movs	r3, #2
 800cec8:	e061      	b.n	800cf8e <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	f103 0020 	add.w	r0, r3, #32
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ced4:	2220      	movs	r2, #32
 800ced6:	4619      	mov	r1, r3
 800ced8:	f7fe fb25 	bl	800b526 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	3323      	adds	r3, #35	; 0x23
 800cee0:	781b      	ldrb	r3, [r3, #0]
 800cee2:	332c      	adds	r3, #44	; 0x2c
 800cee4:	4a2c      	ldr	r2, [pc, #176]	; (800cf98 <load_xdir+0x178>)
 800cee6:	fba2 2303 	umull	r2, r3, r2, r3
 800ceea:	08db      	lsrs	r3, r3, #3
 800ceec:	015b      	lsls	r3, r3, #5
 800ceee:	68ba      	ldr	r2, [r7, #8]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d201      	bcs.n	800cef8 <load_xdir+0xd8>
 800cef4:	2302      	movs	r3, #2
 800cef6:	e04a      	b.n	800cf8e <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800cef8:	2340      	movs	r3, #64	; 0x40
 800cefa:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800cefc:	2100      	movs	r1, #0
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f7ff fbcb 	bl	800c69a <dir_next>
 800cf04:	4603      	mov	r3, r0
 800cf06:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800cf08:	7bfb      	ldrb	r3, [r7, #15]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d001      	beq.n	800cf12 <load_xdir+0xf2>
 800cf0e:	7bfb      	ldrb	r3, [r7, #15]
 800cf10:	e03d      	b.n	800cf8e <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681a      	ldr	r2, [r3, #0]
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf1a:	4619      	mov	r1, r3
 800cf1c:	4610      	mov	r0, r2
 800cf1e:	f7fe fd31 	bl	800b984 <move_window>
 800cf22:	4603      	mov	r3, r0
 800cf24:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800cf26:	7bfb      	ldrb	r3, [r7, #15]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d001      	beq.n	800cf30 <load_xdir+0x110>
 800cf2c:	7bfb      	ldrb	r3, [r7, #15]
 800cf2e:	e02e      	b.n	800cf8e <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf34:	781b      	ldrb	r3, [r3, #0]
 800cf36:	2bc1      	cmp	r3, #193	; 0xc1
 800cf38:	d001      	beq.n	800cf3e <load_xdir+0x11e>
 800cf3a:	2302      	movs	r3, #2
 800cf3c:	e027      	b.n	800cf8e <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800cf3e:	697b      	ldr	r3, [r7, #20]
 800cf40:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800cf44:	d208      	bcs.n	800cf58 <load_xdir+0x138>
 800cf46:	693a      	ldr	r2, [r7, #16]
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	18d0      	adds	r0, r2, r3
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf50:	2220      	movs	r2, #32
 800cf52:	4619      	mov	r1, r3
 800cf54:	f7fe fae7 	bl	800b526 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800cf58:	697b      	ldr	r3, [r7, #20]
 800cf5a:	3320      	adds	r3, #32
 800cf5c:	617b      	str	r3, [r7, #20]
 800cf5e:	697a      	ldr	r2, [r7, #20]
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d3ca      	bcc.n	800cefc <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800cf6c:	d80e      	bhi.n	800cf8c <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800cf6e:	6938      	ldr	r0, [r7, #16]
 800cf70:	f7ff feef 	bl	800cd52 <xdir_sum>
 800cf74:	4603      	mov	r3, r0
 800cf76:	461c      	mov	r4, r3
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	3302      	adds	r3, #2
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f7fe f8ed 	bl	800b15c <ld_word>
 800cf82:	4603      	mov	r3, r0
 800cf84:	429c      	cmp	r4, r3
 800cf86:	d001      	beq.n	800cf8c <load_xdir+0x16c>
 800cf88:	2302      	movs	r3, #2
 800cf8a:	e000      	b.n	800cf8e <load_xdir+0x16e>
	}
	return FR_OK;
 800cf8c:	2300      	movs	r3, #0
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	371c      	adds	r7, #28
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd90      	pop	{r4, r7, pc}
 800cf96:	bf00      	nop
 800cf98:	88888889 	.word	0x88888889

0800cf9c <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800cf9c:	b5b0      	push	{r4, r5, r7, lr}
 800cf9e:	b084      	sub	sp, #16
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800cfa6:	6839      	ldr	r1, [r7, #0]
 800cfa8:	6808      	ldr	r0, [r1, #0]
 800cfaa:	6879      	ldr	r1, [r7, #4]
 800cfac:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800cfae:	6839      	ldr	r1, [r7, #0]
 800cfb0:	6a08      	ldr	r0, [r1, #32]
 800cfb2:	6879      	ldr	r1, [r7, #4]
 800cfb4:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800cfb6:	6839      	ldr	r1, [r7, #0]
 800cfb8:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800cfba:	b2c8      	uxtb	r0, r1
 800cfbc:	6879      	ldr	r1, [r7, #4]
 800cfbe:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800cfc0:	6839      	ldr	r1, [r7, #0]
 800cfc2:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800cfc4:	2000      	movs	r0, #0
 800cfc6:	460c      	mov	r4, r1
 800cfc8:	4605      	mov	r5, r0
 800cfca:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800cfce:	2300      	movs	r3, #0
 800cfd0:	6879      	ldr	r1, [r7, #4]
 800cfd2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f7ff fad2 	bl	800c58e <dir_sdi>
 800cfea:	4603      	mov	r3, r0
 800cfec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cfee:	7bfb      	ldrb	r3, [r7, #15]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d104      	bne.n	800cffe <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f7ff ff13 	bl	800ce20 <load_xdir>
 800cffa:	4603      	mov	r3, r0
 800cffc:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800cffe:	7bfb      	ldrb	r3, [r7, #15]
}
 800d000:	4618      	mov	r0, r3
 800d002:	3710      	adds	r7, #16
 800d004:	46bd      	mov	sp, r7
 800d006:	bdb0      	pop	{r4, r5, r7, pc}

0800d008 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800d008:	b590      	push	{r4, r7, lr}
 800d00a:	b087      	sub	sp, #28
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	691b      	ldr	r3, [r3, #16]
 800d016:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	1c9c      	adds	r4, r3, #2
 800d01c:	68f8      	ldr	r0, [r7, #12]
 800d01e:	f7ff fe98 	bl	800cd52 <xdir_sum>
 800d022:	4603      	mov	r3, r0
 800d024:	4619      	mov	r1, r3
 800d026:	4620      	mov	r0, r4
 800d028:	f7fe f9ae 	bl	800b388 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	3301      	adds	r3, #1
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	3301      	adds	r3, #1
 800d034:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d03a:	4619      	mov	r1, r3
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f7ff faa6 	bl	800c58e <dir_sdi>
 800d042:	4603      	mov	r3, r0
 800d044:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800d046:	e026      	b.n	800d096 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681a      	ldr	r2, [r3, #0]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d050:	4619      	mov	r1, r3
 800d052:	4610      	mov	r0, r2
 800d054:	f7fe fc96 	bl	800b984 <move_window>
 800d058:	4603      	mov	r3, r0
 800d05a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d05c:	7dfb      	ldrb	r3, [r7, #23]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d11d      	bne.n	800d09e <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d066:	2220      	movs	r2, #32
 800d068:	68f9      	ldr	r1, [r7, #12]
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7fe fa5b 	bl	800b526 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	2201      	movs	r2, #1
 800d076:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800d078:	693b      	ldr	r3, [r7, #16]
 800d07a:	3b01      	subs	r3, #1
 800d07c:	613b      	str	r3, [r7, #16]
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d00e      	beq.n	800d0a2 <store_xdir+0x9a>
		dirb += SZDIRE;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	3320      	adds	r3, #32
 800d088:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800d08a:	2100      	movs	r1, #0
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f7ff fb04 	bl	800c69a <dir_next>
 800d092:	4603      	mov	r3, r0
 800d094:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800d096:	7dfb      	ldrb	r3, [r7, #23]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d0d5      	beq.n	800d048 <store_xdir+0x40>
 800d09c:	e002      	b.n	800d0a4 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800d09e:	bf00      	nop
 800d0a0:	e000      	b.n	800d0a4 <store_xdir+0x9c>
		if (--nent == 0) break;
 800d0a2:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800d0a4:	7dfb      	ldrb	r3, [r7, #23]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d002      	beq.n	800d0b0 <store_xdir+0xa8>
 800d0aa:	7dfb      	ldrb	r3, [r7, #23]
 800d0ac:	2b01      	cmp	r3, #1
 800d0ae:	d101      	bne.n	800d0b4 <store_xdir+0xac>
 800d0b0:	7dfb      	ldrb	r3, [r7, #23]
 800d0b2:	e000      	b.n	800d0b6 <store_xdir+0xae>
 800d0b4:	2302      	movs	r3, #2
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	371c      	adds	r7, #28
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd90      	pop	{r4, r7, pc}

0800d0be <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800d0be:	b590      	push	{r4, r7, lr}
 800d0c0:	b085      	sub	sp, #20
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
 800d0c6:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800d0c8:	2240      	movs	r2, #64	; 0x40
 800d0ca:	2100      	movs	r1, #0
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f7fe fa4b 	bl	800b568 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2285      	movs	r2, #133	; 0x85
 800d0d6:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	3320      	adds	r3, #32
 800d0dc:	22c0      	movs	r2, #192	; 0xc0
 800d0de:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	72bb      	strb	r3, [r7, #10]
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	72fb      	strb	r3, [r7, #11]
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	813b      	strh	r3, [r7, #8]
 800d0ec:	2340      	movs	r3, #64	; 0x40
 800d0ee:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	1c5a      	adds	r2, r3, #1
 800d0f4:	60fa      	str	r2, [r7, #12]
 800d0f6:	687a      	ldr	r2, [r7, #4]
 800d0f8:	4413      	add	r3, r2
 800d0fa:	22c1      	movs	r2, #193	; 0xc1
 800d0fc:	701a      	strb	r2, [r3, #0]
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	1c5a      	adds	r2, r3, #1
 800d102:	60fa      	str	r2, [r7, #12]
 800d104:	687a      	ldr	r2, [r7, #4]
 800d106:	4413      	add	r3, r2
 800d108:	2200      	movs	r2, #0
 800d10a:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800d10c:	893b      	ldrh	r3, [r7, #8]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d00b      	beq.n	800d12a <create_xdir+0x6c>
 800d112:	7abb      	ldrb	r3, [r7, #10]
 800d114:	005b      	lsls	r3, r3, #1
 800d116:	683a      	ldr	r2, [r7, #0]
 800d118:	4413      	add	r3, r2
 800d11a:	881b      	ldrh	r3, [r3, #0]
 800d11c:	813b      	strh	r3, [r7, #8]
 800d11e:	893b      	ldrh	r3, [r7, #8]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d002      	beq.n	800d12a <create_xdir+0x6c>
 800d124:	7abb      	ldrb	r3, [r7, #10]
 800d126:	3301      	adds	r3, #1
 800d128:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800d12a:	687a      	ldr	r2, [r7, #4]
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	4413      	add	r3, r2
 800d130:	893a      	ldrh	r2, [r7, #8]
 800d132:	4611      	mov	r1, r2
 800d134:	4618      	mov	r0, r3
 800d136:	f7fe f927 	bl	800b388 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	3302      	adds	r3, #2
 800d13e:	60fb      	str	r3, [r7, #12]
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	f003 031f 	and.w	r3, r3, #31
 800d146:	2b00      	cmp	r3, #0
 800d148:	d1e0      	bne.n	800d10c <create_xdir+0x4e>
		nb++;
 800d14a:	7afb      	ldrb	r3, [r7, #11]
 800d14c:	3301      	adds	r3, #1
 800d14e:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800d150:	7abb      	ldrb	r3, [r7, #10]
 800d152:	005b      	lsls	r3, r3, #1
 800d154:	683a      	ldr	r2, [r7, #0]
 800d156:	4413      	add	r3, r2
 800d158:	881b      	ldrh	r3, [r3, #0]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d1c8      	bne.n	800d0f0 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	3323      	adds	r3, #35	; 0x23
 800d162:	7aba      	ldrb	r2, [r7, #10]
 800d164:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	3301      	adds	r3, #1
 800d16a:	7afa      	ldrb	r2, [r7, #11]
 800d16c:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800d174:	6838      	ldr	r0, [r7, #0]
 800d176:	f7ff fe1f 	bl	800cdb8 <xname_sum>
 800d17a:	4603      	mov	r3, r0
 800d17c:	4619      	mov	r1, r3
 800d17e:	4620      	mov	r0, r4
 800d180:	f7fe f902 	bl	800b388 <st_word>
}
 800d184:	bf00      	nop
 800d186:	3714      	adds	r7, #20
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd90      	pop	{r4, r7, pc}

0800d18c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b086      	sub	sp, #24
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
 800d194:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800d196:	2304      	movs	r3, #4
 800d198:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800d1a0:	23ff      	movs	r3, #255	; 0xff
 800d1a2:	757b      	strb	r3, [r7, #21]
 800d1a4:	23ff      	movs	r3, #255	; 0xff
 800d1a6:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800d1a8:	e09f      	b.n	800d2ea <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	6938      	ldr	r0, [r7, #16]
 800d1b2:	f7fe fbe7 	bl	800b984 <move_window>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d1ba:	7dfb      	ldrb	r3, [r7, #23]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	f040 809a 	bne.w	800d2f6 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1c6:	781b      	ldrb	r3, [r3, #0]
 800d1c8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800d1ca:	7dbb      	ldrb	r3, [r7, #22]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d102      	bne.n	800d1d6 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800d1d0:	2304      	movs	r3, #4
 800d1d2:	75fb      	strb	r3, [r7, #23]
 800d1d4:	e096      	b.n	800d304 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	2b04      	cmp	r3, #4
 800d1dc:	d118      	bne.n	800d210 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800d1de:	7dbb      	ldrb	r3, [r7, #22]
 800d1e0:	2b85      	cmp	r3, #133	; 0x85
 800d1e2:	d179      	bne.n	800d2d8 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f7ff fe17 	bl	800ce20 <load_xdir>
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800d1f6:	7dfb      	ldrb	r3, [r7, #23]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d17e      	bne.n	800d2fa <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	691b      	ldr	r3, [r3, #16]
 800d200:	3304      	adds	r3, #4
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d208:	b2da      	uxtb	r2, r3
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	719a      	strb	r2, [r3, #6]
					}
					break;
 800d20e:	e074      	b.n	800d2fa <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d214:	330b      	adds	r3, #11
 800d216:	781b      	ldrb	r3, [r3, #0]
 800d218:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d21c:	73fb      	strb	r3, [r7, #15]
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	7bfa      	ldrb	r2, [r7, #15]
 800d222:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d224:	7dbb      	ldrb	r3, [r7, #22]
 800d226:	2be5      	cmp	r3, #229	; 0xe5
 800d228:	d00e      	beq.n	800d248 <dir_read+0xbc>
 800d22a:	7dbb      	ldrb	r3, [r7, #22]
 800d22c:	2b2e      	cmp	r3, #46	; 0x2e
 800d22e:	d00b      	beq.n	800d248 <dir_read+0xbc>
 800d230:	7bfb      	ldrb	r3, [r7, #15]
 800d232:	f023 0320 	bic.w	r3, r3, #32
 800d236:	2b08      	cmp	r3, #8
 800d238:	bf0c      	ite	eq
 800d23a:	2301      	moveq	r3, #1
 800d23c:	2300      	movne	r3, #0
 800d23e:	b2db      	uxtb	r3, r3
 800d240:	461a      	mov	r2, r3
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	4293      	cmp	r3, r2
 800d246:	d002      	beq.n	800d24e <dir_read+0xc2>
				ord = 0xFF;
 800d248:	23ff      	movs	r3, #255	; 0xff
 800d24a:	757b      	strb	r3, [r7, #21]
 800d24c:	e044      	b.n	800d2d8 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800d24e:	7bfb      	ldrb	r3, [r7, #15]
 800d250:	2b0f      	cmp	r3, #15
 800d252:	d12f      	bne.n	800d2b4 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800d254:	7dbb      	ldrb	r3, [r7, #22]
 800d256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d00d      	beq.n	800d27a <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d262:	7b5b      	ldrb	r3, [r3, #13]
 800d264:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800d266:	7dbb      	ldrb	r3, [r7, #22]
 800d268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d26c:	75bb      	strb	r3, [r7, #22]
 800d26e:	7dbb      	ldrb	r3, [r7, #22]
 800d270:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d27a:	7dba      	ldrb	r2, [r7, #22]
 800d27c:	7d7b      	ldrb	r3, [r7, #21]
 800d27e:	429a      	cmp	r2, r3
 800d280:	d115      	bne.n	800d2ae <dir_read+0x122>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d286:	330d      	adds	r3, #13
 800d288:	781b      	ldrb	r3, [r3, #0]
 800d28a:	7d3a      	ldrb	r2, [r7, #20]
 800d28c:	429a      	cmp	r2, r3
 800d28e:	d10e      	bne.n	800d2ae <dir_read+0x122>
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	68da      	ldr	r2, [r3, #12]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d298:	4619      	mov	r1, r3
 800d29a:	4610      	mov	r0, r2
 800d29c:	f7ff fbde 	bl	800ca5c <pick_lfn>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d003      	beq.n	800d2ae <dir_read+0x122>
 800d2a6:	7d7b      	ldrb	r3, [r7, #21]
 800d2a8:	3b01      	subs	r3, #1
 800d2aa:	b2db      	uxtb	r3, r3
 800d2ac:	e000      	b.n	800d2b0 <dir_read+0x124>
 800d2ae:	23ff      	movs	r3, #255	; 0xff
 800d2b0:	757b      	strb	r3, [r7, #21]
 800d2b2:	e011      	b.n	800d2d8 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d2b4:	7d7b      	ldrb	r3, [r7, #21]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d109      	bne.n	800d2ce <dir_read+0x142>
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7ff fd26 	bl	800cd10 <sum_sfn>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	461a      	mov	r2, r3
 800d2c8:	7d3b      	ldrb	r3, [r7, #20]
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d017      	beq.n	800d2fe <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f04f 32ff 	mov.w	r2, #4294967295
 800d2d4:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800d2d6:	e012      	b.n	800d2fe <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800d2d8:	2100      	movs	r1, #0
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f7ff f9dd 	bl	800c69a <dir_next>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d2e4:	7dfb      	ldrb	r3, [r7, #23]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d10b      	bne.n	800d302 <dir_read+0x176>
	while (dp->sect) {
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	f47f af5b 	bne.w	800d1aa <dir_read+0x1e>
 800d2f4:	e006      	b.n	800d304 <dir_read+0x178>
		if (res != FR_OK) break;
 800d2f6:	bf00      	nop
 800d2f8:	e004      	b.n	800d304 <dir_read+0x178>
					break;
 800d2fa:	bf00      	nop
 800d2fc:	e002      	b.n	800d304 <dir_read+0x178>
					break;
 800d2fe:	bf00      	nop
 800d300:	e000      	b.n	800d304 <dir_read+0x178>
		if (res != FR_OK) break;
 800d302:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d304:	7dfb      	ldrb	r3, [r7, #23]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d002      	beq.n	800d310 <dir_read+0x184>
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2200      	movs	r2, #0
 800d30e:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800d310:	7dfb      	ldrb	r3, [r7, #23]
}
 800d312:	4618      	mov	r0, r3
 800d314:	3718      	adds	r7, #24
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}

0800d31a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d31a:	b590      	push	{r4, r7, lr}
 800d31c:	b089      	sub	sp, #36	; 0x24
 800d31e:	af00      	add	r7, sp, #0
 800d320:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d328:	2100      	movs	r1, #0
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f7ff f92f 	bl	800c58e <dir_sdi>
 800d330:	4603      	mov	r3, r0
 800d332:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800d334:	7ffb      	ldrb	r3, [r7, #31]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d001      	beq.n	800d33e <dir_find+0x24>
 800d33a:	7ffb      	ldrb	r3, [r7, #31]
 800d33c:	e112      	b.n	800d564 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	781b      	ldrb	r3, [r3, #0]
 800d342:	2b04      	cmp	r3, #4
 800d344:	d164      	bne.n	800d410 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	68db      	ldr	r3, [r3, #12]
 800d34a:	4618      	mov	r0, r3
 800d34c:	f7ff fd34 	bl	800cdb8 <xname_sum>
 800d350:	4603      	mov	r3, r0
 800d352:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800d354:	e04f      	b.n	800d3f6 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	691b      	ldr	r3, [r3, #16]
 800d35a:	3324      	adds	r3, #36	; 0x24
 800d35c:	4618      	mov	r0, r3
 800d35e:	f7fd fefd 	bl	800b15c <ld_word>
 800d362:	4603      	mov	r3, r0
 800d364:	461a      	mov	r2, r3
 800d366:	893b      	ldrh	r3, [r7, #8]
 800d368:	4293      	cmp	r3, r2
 800d36a:	d000      	beq.n	800d36e <dir_find+0x54>
 800d36c:	e043      	b.n	800d3f6 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	691b      	ldr	r3, [r3, #16]
 800d372:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800d376:	76fb      	strb	r3, [r7, #27]
 800d378:	2340      	movs	r3, #64	; 0x40
 800d37a:	617b      	str	r3, [r7, #20]
 800d37c:	2300      	movs	r3, #0
 800d37e:	613b      	str	r3, [r7, #16]
 800d380:	e029      	b.n	800d3d6 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800d382:	697b      	ldr	r3, [r7, #20]
 800d384:	f003 031f 	and.w	r3, r3, #31
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d102      	bne.n	800d392 <dir_find+0x78>
 800d38c:	697b      	ldr	r3, [r7, #20]
 800d38e:	3302      	adds	r3, #2
 800d390:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	691a      	ldr	r2, [r3, #16]
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	4413      	add	r3, r2
 800d39a:	4618      	mov	r0, r3
 800d39c:	f7fd fede 	bl	800b15c <ld_word>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f002 fc8e 	bl	800fcc4 <ff_wtoupper>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	461c      	mov	r4, r3
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	68da      	ldr	r2, [r3, #12]
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	005b      	lsls	r3, r3, #1
 800d3b4:	4413      	add	r3, r2
 800d3b6:	881b      	ldrh	r3, [r3, #0]
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f002 fc83 	bl	800fcc4 <ff_wtoupper>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	429c      	cmp	r4, r3
 800d3c2:	d10c      	bne.n	800d3de <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800d3c4:	7efb      	ldrb	r3, [r7, #27]
 800d3c6:	3b01      	subs	r3, #1
 800d3c8:	76fb      	strb	r3, [r7, #27]
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	3302      	adds	r3, #2
 800d3ce:	617b      	str	r3, [r7, #20]
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	613b      	str	r3, [r7, #16]
 800d3d6:	7efb      	ldrb	r3, [r7, #27]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d1d2      	bne.n	800d382 <dir_find+0x68>
 800d3dc:	e000      	b.n	800d3e0 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800d3de:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800d3e0:	7efb      	ldrb	r3, [r7, #27]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d107      	bne.n	800d3f6 <dir_find+0xdc>
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	68da      	ldr	r2, [r3, #12]
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	005b      	lsls	r3, r3, #1
 800d3ee:	4413      	add	r3, r2
 800d3f0:	881b      	ldrh	r3, [r3, #0]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d009      	beq.n	800d40a <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800d3f6:	2100      	movs	r1, #0
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f7ff fec7 	bl	800d18c <dir_read>
 800d3fe:	4603      	mov	r3, r0
 800d400:	77fb      	strb	r3, [r7, #31]
 800d402:	7ffb      	ldrb	r3, [r7, #31]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d0a6      	beq.n	800d356 <dir_find+0x3c>
 800d408:	e000      	b.n	800d40c <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800d40a:	bf00      	nop
		}
		return res;
 800d40c:	7ffb      	ldrb	r3, [r7, #31]
 800d40e:	e0a9      	b.n	800d564 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d410:	23ff      	movs	r3, #255	; 0xff
 800d412:	773b      	strb	r3, [r7, #28]
 800d414:	7f3b      	ldrb	r3, [r7, #28]
 800d416:	777b      	strb	r3, [r7, #29]
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f04f 32ff 	mov.w	r2, #4294967295
 800d41e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d424:	4619      	mov	r1, r3
 800d426:	68f8      	ldr	r0, [r7, #12]
 800d428:	f7fe faac 	bl	800b984 <move_window>
 800d42c:	4603      	mov	r3, r0
 800d42e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800d430:	7ffb      	ldrb	r3, [r7, #31]
 800d432:	2b00      	cmp	r3, #0
 800d434:	f040 8090 	bne.w	800d558 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d43c:	781b      	ldrb	r3, [r3, #0]
 800d43e:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d440:	7fbb      	ldrb	r3, [r7, #30]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d102      	bne.n	800d44c <dir_find+0x132>
 800d446:	2304      	movs	r3, #4
 800d448:	77fb      	strb	r3, [r7, #31]
 800d44a:	e08a      	b.n	800d562 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d450:	330b      	adds	r3, #11
 800d452:	781b      	ldrb	r3, [r3, #0]
 800d454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d458:	72fb      	strb	r3, [r7, #11]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	7afa      	ldrb	r2, [r7, #11]
 800d45e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d460:	7fbb      	ldrb	r3, [r7, #30]
 800d462:	2be5      	cmp	r3, #229	; 0xe5
 800d464:	d007      	beq.n	800d476 <dir_find+0x15c>
 800d466:	7afb      	ldrb	r3, [r7, #11]
 800d468:	f003 0308 	and.w	r3, r3, #8
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d009      	beq.n	800d484 <dir_find+0x16a>
 800d470:	7afb      	ldrb	r3, [r7, #11]
 800d472:	2b0f      	cmp	r3, #15
 800d474:	d006      	beq.n	800d484 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d476:	23ff      	movs	r3, #255	; 0xff
 800d478:	777b      	strb	r3, [r7, #29]
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f04f 32ff 	mov.w	r2, #4294967295
 800d480:	64da      	str	r2, [r3, #76]	; 0x4c
 800d482:	e05e      	b.n	800d542 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d484:	7afb      	ldrb	r3, [r7, #11]
 800d486:	2b0f      	cmp	r3, #15
 800d488:	d136      	bne.n	800d4f8 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800d490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d494:	2b00      	cmp	r3, #0
 800d496:	d154      	bne.n	800d542 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d498:	7fbb      	ldrb	r3, [r7, #30]
 800d49a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d00d      	beq.n	800d4be <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4a6:	7b5b      	ldrb	r3, [r3, #13]
 800d4a8:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d4aa:	7fbb      	ldrb	r3, [r7, #30]
 800d4ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4b0:	77bb      	strb	r3, [r7, #30]
 800d4b2:	7fbb      	ldrb	r3, [r7, #30]
 800d4b4:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d4be:	7fba      	ldrb	r2, [r7, #30]
 800d4c0:	7f7b      	ldrb	r3, [r7, #29]
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	d115      	bne.n	800d4f2 <dir_find+0x1d8>
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4ca:	330d      	adds	r3, #13
 800d4cc:	781b      	ldrb	r3, [r3, #0]
 800d4ce:	7f3a      	ldrb	r2, [r7, #28]
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d10e      	bne.n	800d4f2 <dir_find+0x1d8>
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	68da      	ldr	r2, [r3, #12]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4dc:	4619      	mov	r1, r3
 800d4de:	4610      	mov	r0, r2
 800d4e0:	f7ff fa4c 	bl	800c97c <cmp_lfn>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d003      	beq.n	800d4f2 <dir_find+0x1d8>
 800d4ea:	7f7b      	ldrb	r3, [r7, #29]
 800d4ec:	3b01      	subs	r3, #1
 800d4ee:	b2db      	uxtb	r3, r3
 800d4f0:	e000      	b.n	800d4f4 <dir_find+0x1da>
 800d4f2:	23ff      	movs	r3, #255	; 0xff
 800d4f4:	777b      	strb	r3, [r7, #29]
 800d4f6:	e024      	b.n	800d542 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d4f8:	7f7b      	ldrb	r3, [r7, #29]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d109      	bne.n	800d512 <dir_find+0x1f8>
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d502:	4618      	mov	r0, r3
 800d504:	f7ff fc04 	bl	800cd10 <sum_sfn>
 800d508:	4603      	mov	r3, r0
 800d50a:	461a      	mov	r2, r3
 800d50c:	7f3b      	ldrb	r3, [r7, #28]
 800d50e:	4293      	cmp	r3, r2
 800d510:	d024      	beq.n	800d55c <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800d518:	f003 0301 	and.w	r3, r3, #1
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d10a      	bne.n	800d536 <dir_find+0x21c>
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	3340      	adds	r3, #64	; 0x40
 800d528:	220b      	movs	r2, #11
 800d52a:	4619      	mov	r1, r3
 800d52c:	f7fe f837 	bl	800b59e <mem_cmp>
 800d530:	4603      	mov	r3, r0
 800d532:	2b00      	cmp	r3, #0
 800d534:	d014      	beq.n	800d560 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d536:	23ff      	movs	r3, #255	; 0xff
 800d538:	777b      	strb	r3, [r7, #29]
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f04f 32ff 	mov.w	r2, #4294967295
 800d540:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d542:	2100      	movs	r1, #0
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f7ff f8a8 	bl	800c69a <dir_next>
 800d54a:	4603      	mov	r3, r0
 800d54c:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800d54e:	7ffb      	ldrb	r3, [r7, #31]
 800d550:	2b00      	cmp	r3, #0
 800d552:	f43f af65 	beq.w	800d420 <dir_find+0x106>
 800d556:	e004      	b.n	800d562 <dir_find+0x248>
		if (res != FR_OK) break;
 800d558:	bf00      	nop
 800d55a:	e002      	b.n	800d562 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d55c:	bf00      	nop
 800d55e:	e000      	b.n	800d562 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d560:	bf00      	nop

	return res;
 800d562:	7ffb      	ldrb	r3, [r7, #31]
}
 800d564:	4618      	mov	r0, r3
 800d566:	3724      	adds	r7, #36	; 0x24
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd90      	pop	{r4, r7, pc}

0800d56c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d56c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d570:	b0a0      	sub	sp, #128	; 0x80
 800d572:	af00      	add	r7, sp, #0
 800d574:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800d582:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d586:	2b00      	cmp	r3, #0
 800d588:	d001      	beq.n	800d58e <dir_register+0x22>
 800d58a:	2306      	movs	r3, #6
 800d58c:	e18e      	b.n	800d8ac <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d58e:	2300      	movs	r3, #0
 800d590:	677b      	str	r3, [r7, #116]	; 0x74
 800d592:	e002      	b.n	800d59a <dir_register+0x2e>
 800d594:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d596:	3301      	adds	r3, #1
 800d598:	677b      	str	r3, [r7, #116]	; 0x74
 800d59a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d59c:	68da      	ldr	r2, [r3, #12]
 800d59e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d5a0:	005b      	lsls	r3, r3, #1
 800d5a2:	4413      	add	r3, r2
 800d5a4:	881b      	ldrh	r3, [r3, #0]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d1f4      	bne.n	800d594 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800d5aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5ac:	781b      	ldrb	r3, [r3, #0]
 800d5ae:	2b04      	cmp	r3, #4
 800d5b0:	f040 809f 	bne.w	800d6f2 <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800d5b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d5b6:	330e      	adds	r3, #14
 800d5b8:	4aa2      	ldr	r2, [pc, #648]	; (800d844 <dir_register+0x2d8>)
 800d5ba:	fba2 2303 	umull	r2, r3, r2, r3
 800d5be:	08db      	lsrs	r3, r3, #3
 800d5c0:	3302      	adds	r3, #2
 800d5c2:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800d5c4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f7ff f93c 	bl	800c844 <dir_alloc>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800d5d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d002      	beq.n	800d5e0 <dir_register+0x74>
 800d5da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d5de:	e165      	b.n	800d8ac <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d5e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d5e6:	3b01      	subs	r3, #1
 800d5e8:	015b      	lsls	r3, r3, #5
 800d5ea:	1ad2      	subs	r2, r2, r3
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	689b      	ldr	r3, [r3, #8]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d072      	beq.n	800d6de <dir_register+0x172>
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	79db      	ldrb	r3, [r3, #7]
 800d5fc:	f003 0304 	and.w	r3, r3, #4
 800d600:	2b00      	cmp	r3, #0
 800d602:	d06c      	beq.n	800d6de <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d60a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d60c:	8949      	ldrh	r1, [r1, #10]
 800d60e:	0249      	lsls	r1, r1, #9
 800d610:	2000      	movs	r0, #0
 800d612:	460c      	mov	r4, r1
 800d614:	4605      	mov	r5, r0
 800d616:	eb12 0804 	adds.w	r8, r2, r4
 800d61a:	eb43 0905 	adc.w	r9, r3, r5
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	4618      	mov	r0, r3
 800d628:	f7fe fd58 	bl	800c0dc <fill_first_frag>
 800d62c:	4603      	mov	r3, r0
 800d62e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800d632:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d636:	2b00      	cmp	r3, #0
 800d638:	d002      	beq.n	800d640 <dir_register+0xd4>
 800d63a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d63e:	e135      	b.n	800d8ac <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d646:	f04f 32ff 	mov.w	r2, #4294967295
 800d64a:	4619      	mov	r1, r3
 800d64c:	f7fe fd75 	bl	800c13a <fill_last_frag>
 800d650:	4603      	mov	r3, r0
 800d652:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800d656:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d002      	beq.n	800d664 <dir_register+0xf8>
 800d65e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d662:	e123      	b.n	800d8ac <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800d664:	687a      	ldr	r2, [r7, #4]
 800d666:	f107 0308 	add.w	r3, r7, #8
 800d66a:	4611      	mov	r1, r2
 800d66c:	4618      	mov	r0, r3
 800d66e:	f7ff fc95 	bl	800cf9c <load_obj_dir>
 800d672:	4603      	mov	r3, r0
 800d674:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800d678:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d002      	beq.n	800d686 <dir_register+0x11a>
 800d680:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d684:	e112      	b.n	800d8ac <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800d686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d688:	691b      	ldr	r3, [r3, #16]
 800d68a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d694:	4608      	mov	r0, r1
 800d696:	f7fd febe 	bl	800b416 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800d69a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d69c:	691b      	ldr	r3, [r3, #16]
 800d69e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d6a8:	4608      	mov	r0, r1
 800d6aa:	f7fd feb4 	bl	800b416 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	79da      	ldrb	r2, [r3, #7]
 800d6b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6b4:	691b      	ldr	r3, [r3, #16]
 800d6b6:	3321      	adds	r3, #33	; 0x21
 800d6b8:	f042 0201 	orr.w	r2, r2, #1
 800d6bc:	b2d2      	uxtb	r2, r2
 800d6be:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800d6c0:	f107 0308 	add.w	r3, r7, #8
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f7ff fc9f 	bl	800d008 <store_xdir>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800d6d0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d002      	beq.n	800d6de <dir_register+0x172>
 800d6d8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d6dc:	e0e6      	b.n	800d8ac <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800d6de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6e0:	691a      	ldr	r2, [r3, #16]
 800d6e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6e4:	68db      	ldr	r3, [r3, #12]
 800d6e6:	4619      	mov	r1, r3
 800d6e8:	4610      	mov	r0, r2
 800d6ea:	f7ff fce8 	bl	800d0be <create_xdir>
		return FR_OK;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	e0dc      	b.n	800d8ac <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800d6f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d6fc:	220c      	movs	r2, #12
 800d6fe:	4618      	mov	r0, r3
 800d700:	f7fd ff11 	bl	800b526 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d704:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d708:	f003 0301 	and.w	r3, r3, #1
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d033      	beq.n	800d778 <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2240      	movs	r2, #64	; 0x40
 800d714:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800d718:	2301      	movs	r3, #1
 800d71a:	67bb      	str	r3, [r7, #120]	; 0x78
 800d71c:	e016      	b.n	800d74c <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800d724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d726:	68da      	ldr	r2, [r3, #12]
 800d728:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800d72c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d72e:	f7ff fa61 	bl	800cbf4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f7ff fdf1 	bl	800d31a <dir_find>
 800d738:	4603      	mov	r3, r0
 800d73a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800d73e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d742:	2b00      	cmp	r3, #0
 800d744:	d106      	bne.n	800d754 <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 800d746:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d748:	3301      	adds	r3, #1
 800d74a:	67bb      	str	r3, [r7, #120]	; 0x78
 800d74c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d74e:	2b63      	cmp	r3, #99	; 0x63
 800d750:	d9e5      	bls.n	800d71e <dir_register+0x1b2>
 800d752:	e000      	b.n	800d756 <dir_register+0x1ea>
			if (res != FR_OK) break;
 800d754:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d756:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d758:	2b64      	cmp	r3, #100	; 0x64
 800d75a:	d101      	bne.n	800d760 <dir_register+0x1f4>
 800d75c:	2307      	movs	r3, #7
 800d75e:	e0a5      	b.n	800d8ac <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d760:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d764:	2b04      	cmp	r3, #4
 800d766:	d002      	beq.n	800d76e <dir_register+0x202>
 800d768:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d76c:	e09e      	b.n	800d8ac <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d76e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d778:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d77c:	f003 0302 	and.w	r3, r3, #2
 800d780:	2b00      	cmp	r3, #0
 800d782:	d007      	beq.n	800d794 <dir_register+0x228>
 800d784:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d786:	330c      	adds	r3, #12
 800d788:	4a2f      	ldr	r2, [pc, #188]	; (800d848 <dir_register+0x2dc>)
 800d78a:	fba2 2303 	umull	r2, r3, r2, r3
 800d78e:	089b      	lsrs	r3, r3, #2
 800d790:	3301      	adds	r3, #1
 800d792:	e000      	b.n	800d796 <dir_register+0x22a>
 800d794:	2301      	movs	r3, #1
 800d796:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d798:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f7ff f852 	bl	800c844 <dir_alloc>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d7a6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d14f      	bne.n	800d84e <dir_register+0x2e2>
 800d7ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d7b0:	3b01      	subs	r3, #1
 800d7b2:	673b      	str	r3, [r7, #112]	; 0x70
 800d7b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d049      	beq.n	800d84e <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d7be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d7c0:	015b      	lsls	r3, r3, #5
 800d7c2:	1ad3      	subs	r3, r2, r3
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f7fe fee1 	bl	800c58e <dir_sdi>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800d7d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d139      	bne.n	800d84e <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	3340      	adds	r3, #64	; 0x40
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7ff fa96 	bl	800cd10 <sum_sfn>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ee:	4619      	mov	r1, r3
 800d7f0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d7f2:	f7fe f8c7 	bl	800b984 <move_window>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800d7fc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d800:	2b00      	cmp	r3, #0
 800d802:	d123      	bne.n	800d84c <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d804:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d806:	68d8      	ldr	r0, [r3, #12]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d80c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d80e:	b2da      	uxtb	r2, r3
 800d810:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800d814:	f7ff f986 	bl	800cb24 <put_lfn>
				fs->wflag = 1;
 800d818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d81a:	2201      	movs	r2, #1
 800d81c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d81e:	2100      	movs	r1, #0
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	f7fe ff3a 	bl	800c69a <dir_next>
 800d826:	4603      	mov	r3, r0
 800d828:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800d82c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d830:	2b00      	cmp	r3, #0
 800d832:	d10c      	bne.n	800d84e <dir_register+0x2e2>
 800d834:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d836:	3b01      	subs	r3, #1
 800d838:	673b      	str	r3, [r7, #112]	; 0x70
 800d83a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d1d4      	bne.n	800d7ea <dir_register+0x27e>
 800d840:	e005      	b.n	800d84e <dir_register+0x2e2>
 800d842:	bf00      	nop
 800d844:	88888889 	.word	0x88888889
 800d848:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800d84c:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d84e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d852:	2b00      	cmp	r3, #0
 800d854:	d128      	bne.n	800d8a8 <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d85a:	4619      	mov	r1, r3
 800d85c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d85e:	f7fe f891 	bl	800b984 <move_window>
 800d862:	4603      	mov	r3, r0
 800d864:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800d868:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d11b      	bne.n	800d8a8 <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d874:	2220      	movs	r2, #32
 800d876:	2100      	movs	r1, #0
 800d878:	4618      	mov	r0, r3
 800d87a:	f7fd fe75 	bl	800b568 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	3340      	adds	r3, #64	; 0x40
 800d886:	220b      	movs	r2, #11
 800d888:	4619      	mov	r1, r3
 800d88a:	f7fd fe4c 	bl	800b526 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d898:	330c      	adds	r3, #12
 800d89a:	f002 0218 	and.w	r2, r2, #24
 800d89e:	b2d2      	uxtb	r2, r2
 800d8a0:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d8a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8a4:	2201      	movs	r2, #1
 800d8a6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d8a8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3780      	adds	r7, #128	; 0x80
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d8b6:	bf00      	nop

0800d8b8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b08a      	sub	sp, #40	; 0x28
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	613b      	str	r3, [r7, #16]
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	68db      	ldr	r3, [r3, #12]
 800d8ce:	60fb      	str	r3, [r7, #12]
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	617b      	str	r3, [r7, #20]
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d8d8:	69bb      	ldr	r3, [r7, #24]
 800d8da:	1c5a      	adds	r2, r3, #1
 800d8dc:	61ba      	str	r2, [r7, #24]
 800d8de:	693a      	ldr	r2, [r7, #16]
 800d8e0:	4413      	add	r3, r2
 800d8e2:	781b      	ldrb	r3, [r3, #0]
 800d8e4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d8e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8e8:	2b1f      	cmp	r3, #31
 800d8ea:	d940      	bls.n	800d96e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d8ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8ee:	2b2f      	cmp	r3, #47	; 0x2f
 800d8f0:	d006      	beq.n	800d900 <create_name+0x48>
 800d8f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8f4:	2b5c      	cmp	r3, #92	; 0x5c
 800d8f6:	d110      	bne.n	800d91a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d8f8:	e002      	b.n	800d900 <create_name+0x48>
 800d8fa:	69bb      	ldr	r3, [r7, #24]
 800d8fc:	3301      	adds	r3, #1
 800d8fe:	61bb      	str	r3, [r7, #24]
 800d900:	693a      	ldr	r2, [r7, #16]
 800d902:	69bb      	ldr	r3, [r7, #24]
 800d904:	4413      	add	r3, r2
 800d906:	781b      	ldrb	r3, [r3, #0]
 800d908:	2b2f      	cmp	r3, #47	; 0x2f
 800d90a:	d0f6      	beq.n	800d8fa <create_name+0x42>
 800d90c:	693a      	ldr	r2, [r7, #16]
 800d90e:	69bb      	ldr	r3, [r7, #24]
 800d910:	4413      	add	r3, r2
 800d912:	781b      	ldrb	r3, [r3, #0]
 800d914:	2b5c      	cmp	r3, #92	; 0x5c
 800d916:	d0f0      	beq.n	800d8fa <create_name+0x42>
			break;
 800d918:	e02a      	b.n	800d970 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	2bfe      	cmp	r3, #254	; 0xfe
 800d91e:	d901      	bls.n	800d924 <create_name+0x6c>
 800d920:	2306      	movs	r3, #6
 800d922:	e17d      	b.n	800dc20 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d924:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d926:	b2db      	uxtb	r3, r3
 800d928:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d92a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d92c:	2101      	movs	r1, #1
 800d92e:	4618      	mov	r0, r3
 800d930:	f002 f98c 	bl	800fc4c <ff_convert>
 800d934:	4603      	mov	r3, r0
 800d936:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d938:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d101      	bne.n	800d942 <create_name+0x8a>
 800d93e:	2306      	movs	r3, #6
 800d940:	e16e      	b.n	800dc20 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d942:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d944:	2b7f      	cmp	r3, #127	; 0x7f
 800d946:	d809      	bhi.n	800d95c <create_name+0xa4>
 800d948:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d94a:	4619      	mov	r1, r3
 800d94c:	488d      	ldr	r0, [pc, #564]	; (800db84 <create_name+0x2cc>)
 800d94e:	f7fd fe4d 	bl	800b5ec <chk_chr>
 800d952:	4603      	mov	r3, r0
 800d954:	2b00      	cmp	r3, #0
 800d956:	d001      	beq.n	800d95c <create_name+0xa4>
 800d958:	2306      	movs	r3, #6
 800d95a:	e161      	b.n	800dc20 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	1c5a      	adds	r2, r3, #1
 800d960:	617a      	str	r2, [r7, #20]
 800d962:	005b      	lsls	r3, r3, #1
 800d964:	68fa      	ldr	r2, [r7, #12]
 800d966:	4413      	add	r3, r2
 800d968:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d96a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d96c:	e7b4      	b.n	800d8d8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d96e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d970:	693a      	ldr	r2, [r7, #16]
 800d972:	69bb      	ldr	r3, [r7, #24]
 800d974:	441a      	add	r2, r3
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d97a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d97c:	2b1f      	cmp	r3, #31
 800d97e:	d801      	bhi.n	800d984 <create_name+0xcc>
 800d980:	2304      	movs	r3, #4
 800d982:	e000      	b.n	800d986 <create_name+0xce>
 800d984:	2300      	movs	r3, #0
 800d986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d98a:	e011      	b.n	800d9b0 <create_name+0xf8>
		w = lfn[di - 1];
 800d98c:	697b      	ldr	r3, [r7, #20]
 800d98e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d992:	3b01      	subs	r3, #1
 800d994:	005b      	lsls	r3, r3, #1
 800d996:	68fa      	ldr	r2, [r7, #12]
 800d998:	4413      	add	r3, r2
 800d99a:	881b      	ldrh	r3, [r3, #0]
 800d99c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d99e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9a0:	2b20      	cmp	r3, #32
 800d9a2:	d002      	beq.n	800d9aa <create_name+0xf2>
 800d9a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9a6:	2b2e      	cmp	r3, #46	; 0x2e
 800d9a8:	d106      	bne.n	800d9b8 <create_name+0x100>
		di--;
 800d9aa:	697b      	ldr	r3, [r7, #20]
 800d9ac:	3b01      	subs	r3, #1
 800d9ae:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d1ea      	bne.n	800d98c <create_name+0xd4>
 800d9b6:	e000      	b.n	800d9ba <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d9b8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d9ba:	697b      	ldr	r3, [r7, #20]
 800d9bc:	005b      	lsls	r3, r3, #1
 800d9be:	68fa      	ldr	r2, [r7, #12]
 800d9c0:	4413      	add	r3, r2
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d9c6:	697b      	ldr	r3, [r7, #20]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d101      	bne.n	800d9d0 <create_name+0x118>
 800d9cc:	2306      	movs	r3, #6
 800d9ce:	e127      	b.n	800dc20 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	3340      	adds	r3, #64	; 0x40
 800d9d4:	220b      	movs	r2, #11
 800d9d6:	2120      	movs	r1, #32
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f7fd fdc5 	bl	800b568 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d9de:	2300      	movs	r3, #0
 800d9e0:	61bb      	str	r3, [r7, #24]
 800d9e2:	e002      	b.n	800d9ea <create_name+0x132>
 800d9e4:	69bb      	ldr	r3, [r7, #24]
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	61bb      	str	r3, [r7, #24]
 800d9ea:	69bb      	ldr	r3, [r7, #24]
 800d9ec:	005b      	lsls	r3, r3, #1
 800d9ee:	68fa      	ldr	r2, [r7, #12]
 800d9f0:	4413      	add	r3, r2
 800d9f2:	881b      	ldrh	r3, [r3, #0]
 800d9f4:	2b20      	cmp	r3, #32
 800d9f6:	d0f5      	beq.n	800d9e4 <create_name+0x12c>
 800d9f8:	69bb      	ldr	r3, [r7, #24]
 800d9fa:	005b      	lsls	r3, r3, #1
 800d9fc:	68fa      	ldr	r2, [r7, #12]
 800d9fe:	4413      	add	r3, r2
 800da00:	881b      	ldrh	r3, [r3, #0]
 800da02:	2b2e      	cmp	r3, #46	; 0x2e
 800da04:	d0ee      	beq.n	800d9e4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800da06:	69bb      	ldr	r3, [r7, #24]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d009      	beq.n	800da20 <create_name+0x168>
 800da0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da10:	f043 0303 	orr.w	r3, r3, #3
 800da14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800da18:	e002      	b.n	800da20 <create_name+0x168>
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	3b01      	subs	r3, #1
 800da1e:	617b      	str	r3, [r7, #20]
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d009      	beq.n	800da3a <create_name+0x182>
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800da2c:	3b01      	subs	r3, #1
 800da2e:	005b      	lsls	r3, r3, #1
 800da30:	68fa      	ldr	r2, [r7, #12]
 800da32:	4413      	add	r3, r2
 800da34:	881b      	ldrh	r3, [r3, #0]
 800da36:	2b2e      	cmp	r3, #46	; 0x2e
 800da38:	d1ef      	bne.n	800da1a <create_name+0x162>

	i = b = 0; ni = 8;
 800da3a:	2300      	movs	r3, #0
 800da3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800da40:	2300      	movs	r3, #0
 800da42:	623b      	str	r3, [r7, #32]
 800da44:	2308      	movs	r3, #8
 800da46:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800da48:	69bb      	ldr	r3, [r7, #24]
 800da4a:	1c5a      	adds	r2, r3, #1
 800da4c:	61ba      	str	r2, [r7, #24]
 800da4e:	005b      	lsls	r3, r3, #1
 800da50:	68fa      	ldr	r2, [r7, #12]
 800da52:	4413      	add	r3, r2
 800da54:	881b      	ldrh	r3, [r3, #0]
 800da56:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800da58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	f000 8090 	beq.w	800db80 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800da60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da62:	2b20      	cmp	r3, #32
 800da64:	d006      	beq.n	800da74 <create_name+0x1bc>
 800da66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da68:	2b2e      	cmp	r3, #46	; 0x2e
 800da6a:	d10a      	bne.n	800da82 <create_name+0x1ca>
 800da6c:	69ba      	ldr	r2, [r7, #24]
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	429a      	cmp	r2, r3
 800da72:	d006      	beq.n	800da82 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800da74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da78:	f043 0303 	orr.w	r3, r3, #3
 800da7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800da80:	e07d      	b.n	800db7e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800da82:	6a3a      	ldr	r2, [r7, #32]
 800da84:	69fb      	ldr	r3, [r7, #28]
 800da86:	429a      	cmp	r2, r3
 800da88:	d203      	bcs.n	800da92 <create_name+0x1da>
 800da8a:	69ba      	ldr	r2, [r7, #24]
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	429a      	cmp	r2, r3
 800da90:	d123      	bne.n	800dada <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800da92:	69fb      	ldr	r3, [r7, #28]
 800da94:	2b0b      	cmp	r3, #11
 800da96:	d106      	bne.n	800daa6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800da98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da9c:	f043 0303 	orr.w	r3, r3, #3
 800daa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800daa4:	e075      	b.n	800db92 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800daa6:	69ba      	ldr	r2, [r7, #24]
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	429a      	cmp	r2, r3
 800daac:	d005      	beq.n	800daba <create_name+0x202>
 800daae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dab2:	f043 0303 	orr.w	r3, r3, #3
 800dab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800daba:	69ba      	ldr	r2, [r7, #24]
 800dabc:	697b      	ldr	r3, [r7, #20]
 800dabe:	429a      	cmp	r2, r3
 800dac0:	d866      	bhi.n	800db90 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	61bb      	str	r3, [r7, #24]
 800dac6:	2308      	movs	r3, #8
 800dac8:	623b      	str	r3, [r7, #32]
 800daca:	230b      	movs	r3, #11
 800dacc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800dace:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dad2:	009b      	lsls	r3, r3, #2
 800dad4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dad8:	e051      	b.n	800db7e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800dada:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dadc:	2b7f      	cmp	r3, #127	; 0x7f
 800dade:	d914      	bls.n	800db0a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800dae0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dae2:	2100      	movs	r1, #0
 800dae4:	4618      	mov	r0, r3
 800dae6:	f002 f8b1 	bl	800fc4c <ff_convert>
 800daea:	4603      	mov	r3, r0
 800daec:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800daee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d004      	beq.n	800dafe <create_name+0x246>
 800daf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800daf6:	3b80      	subs	r3, #128	; 0x80
 800daf8:	4a23      	ldr	r2, [pc, #140]	; (800db88 <create_name+0x2d0>)
 800dafa:	5cd3      	ldrb	r3, [r2, r3]
 800dafc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800dafe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db02:	f043 0302 	orr.w	r3, r3, #2
 800db06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800db0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d007      	beq.n	800db20 <create_name+0x268>
 800db10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db12:	4619      	mov	r1, r3
 800db14:	481d      	ldr	r0, [pc, #116]	; (800db8c <create_name+0x2d4>)
 800db16:	f7fd fd69 	bl	800b5ec <chk_chr>
 800db1a:	4603      	mov	r3, r0
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d008      	beq.n	800db32 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800db20:	235f      	movs	r3, #95	; 0x5f
 800db22:	84bb      	strh	r3, [r7, #36]	; 0x24
 800db24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db28:	f043 0303 	orr.w	r3, r3, #3
 800db2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800db30:	e01b      	b.n	800db6a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800db32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db34:	2b40      	cmp	r3, #64	; 0x40
 800db36:	d909      	bls.n	800db4c <create_name+0x294>
 800db38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db3a:	2b5a      	cmp	r3, #90	; 0x5a
 800db3c:	d806      	bhi.n	800db4c <create_name+0x294>
					b |= 2;
 800db3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db42:	f043 0302 	orr.w	r3, r3, #2
 800db46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800db4a:	e00e      	b.n	800db6a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800db4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db4e:	2b60      	cmp	r3, #96	; 0x60
 800db50:	d90b      	bls.n	800db6a <create_name+0x2b2>
 800db52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db54:	2b7a      	cmp	r3, #122	; 0x7a
 800db56:	d808      	bhi.n	800db6a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800db58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db5c:	f043 0301 	orr.w	r3, r3, #1
 800db60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800db64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db66:	3b20      	subs	r3, #32
 800db68:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800db6a:	6a3b      	ldr	r3, [r7, #32]
 800db6c:	1c5a      	adds	r2, r3, #1
 800db6e:	623a      	str	r2, [r7, #32]
 800db70:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800db72:	b2d1      	uxtb	r1, r2
 800db74:	687a      	ldr	r2, [r7, #4]
 800db76:	4413      	add	r3, r2
 800db78:	460a      	mov	r2, r1
 800db7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800db7e:	e763      	b.n	800da48 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800db80:	bf00      	nop
 800db82:	e006      	b.n	800db92 <create_name+0x2da>
 800db84:	0801427c 	.word	0x0801427c
 800db88:	080142f0 	.word	0x080142f0
 800db8c:	08014288 	.word	0x08014288
			if (si > di) break;			/* No extension */
 800db90:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800db98:	2be5      	cmp	r3, #229	; 0xe5
 800db9a:	d103      	bne.n	800dba4 <create_name+0x2ec>
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2205      	movs	r2, #5
 800dba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800dba4:	69fb      	ldr	r3, [r7, #28]
 800dba6:	2b08      	cmp	r3, #8
 800dba8:	d104      	bne.n	800dbb4 <create_name+0x2fc>
 800dbaa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dbae:	009b      	lsls	r3, r3, #2
 800dbb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800dbb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dbb8:	f003 030c 	and.w	r3, r3, #12
 800dbbc:	2b0c      	cmp	r3, #12
 800dbbe:	d005      	beq.n	800dbcc <create_name+0x314>
 800dbc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dbc4:	f003 0303 	and.w	r3, r3, #3
 800dbc8:	2b03      	cmp	r3, #3
 800dbca:	d105      	bne.n	800dbd8 <create_name+0x320>
 800dbcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbd0:	f043 0302 	orr.w	r3, r3, #2
 800dbd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800dbd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbdc:	f003 0302 	and.w	r3, r3, #2
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d117      	bne.n	800dc14 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800dbe4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dbe8:	f003 0303 	and.w	r3, r3, #3
 800dbec:	2b01      	cmp	r3, #1
 800dbee:	d105      	bne.n	800dbfc <create_name+0x344>
 800dbf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbf4:	f043 0310 	orr.w	r3, r3, #16
 800dbf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800dbfc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dc00:	f003 030c 	and.w	r3, r3, #12
 800dc04:	2b04      	cmp	r3, #4
 800dc06:	d105      	bne.n	800dc14 <create_name+0x35c>
 800dc08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc0c:	f043 0308 	orr.w	r3, r3, #8
 800dc10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800dc1a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800dc1e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	3728      	adds	r7, #40	; 0x28
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}

0800dc28 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b086      	sub	sp, #24
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800dc3c:	e002      	b.n	800dc44 <follow_path+0x1c>
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	3301      	adds	r3, #1
 800dc42:	603b      	str	r3, [r7, #0]
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	2b2f      	cmp	r3, #47	; 0x2f
 800dc4a:	d0f8      	beq.n	800dc3e <follow_path+0x16>
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	781b      	ldrb	r3, [r3, #0]
 800dc50:	2b5c      	cmp	r3, #92	; 0x5c
 800dc52:	d0f4      	beq.n	800dc3e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800dc54:	693b      	ldr	r3, [r7, #16]
 800dc56:	2200      	movs	r2, #0
 800dc58:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800dc5a:	693b      	ldr	r3, [r7, #16]
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	781b      	ldrb	r3, [r3, #0]
 800dc64:	2b1f      	cmp	r3, #31
 800dc66:	d80a      	bhi.n	800dc7e <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2280      	movs	r2, #128	; 0x80
 800dc6c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800dc70:	2100      	movs	r1, #0
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f7fe fc8b 	bl	800c58e <dir_sdi>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	75fb      	strb	r3, [r7, #23]
 800dc7c:	e078      	b.n	800dd70 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dc7e:	463b      	mov	r3, r7
 800dc80:	4619      	mov	r1, r3
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f7ff fe18 	bl	800d8b8 <create_name>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dc8c:	7dfb      	ldrb	r3, [r7, #23]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d169      	bne.n	800dd66 <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f7ff fb41 	bl	800d31a <dir_find>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800dca2:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800dca4:	7dfb      	ldrb	r3, [r7, #23]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d00a      	beq.n	800dcc0 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800dcaa:	7dfb      	ldrb	r3, [r7, #23]
 800dcac:	2b04      	cmp	r3, #4
 800dcae:	d15c      	bne.n	800dd6a <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800dcb0:	7afb      	ldrb	r3, [r7, #11]
 800dcb2:	f003 0304 	and.w	r3, r3, #4
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d157      	bne.n	800dd6a <follow_path+0x142>
 800dcba:	2305      	movs	r3, #5
 800dcbc:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800dcbe:	e054      	b.n	800dd6a <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dcc0:	7afb      	ldrb	r3, [r7, #11]
 800dcc2:	f003 0304 	and.w	r3, r3, #4
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d151      	bne.n	800dd6e <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800dcca:	693b      	ldr	r3, [r7, #16]
 800dccc:	799b      	ldrb	r3, [r3, #6]
 800dcce:	f003 0310 	and.w	r3, r3, #16
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d102      	bne.n	800dcdc <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800dcd6:	2305      	movs	r3, #5
 800dcd8:	75fb      	strb	r3, [r7, #23]
 800dcda:	e049      	b.n	800dd70 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	781b      	ldrb	r3, [r3, #0]
 800dce0:	2b04      	cmp	r3, #4
 800dce2:	d130      	bne.n	800dd46 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800dce4:	693b      	ldr	r3, [r7, #16]
 800dce6:	689a      	ldr	r2, [r3, #8]
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800dcec:	693b      	ldr	r3, [r7, #16]
 800dcee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800dcf2:	4613      	mov	r3, r2
 800dcf4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dcf8:	693a      	ldr	r2, [r7, #16]
 800dcfa:	79d2      	ldrb	r2, [r2, #7]
 800dcfc:	431a      	orrs	r2, r3
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dd06:	693b      	ldr	r3, [r7, #16]
 800dd08:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	691b      	ldr	r3, [r3, #16]
 800dd0e:	3334      	adds	r3, #52	; 0x34
 800dd10:	4618      	mov	r0, r3
 800dd12:	f7fd fa3b 	bl	800b18c <ld_dword>
 800dd16:	4602      	mov	r2, r0
 800dd18:	693b      	ldr	r3, [r7, #16]
 800dd1a:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	691b      	ldr	r3, [r3, #16]
 800dd20:	3321      	adds	r3, #33	; 0x21
 800dd22:	781b      	ldrb	r3, [r3, #0]
 800dd24:	f003 0302 	and.w	r3, r3, #2
 800dd28:	b2da      	uxtb	r2, r3
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	691b      	ldr	r3, [r3, #16]
 800dd32:	3338      	adds	r3, #56	; 0x38
 800dd34:	4618      	mov	r0, r3
 800dd36:	f7fd fa4c 	bl	800b1d2 <ld_qword>
 800dd3a:	4602      	mov	r2, r0
 800dd3c:	460b      	mov	r3, r1
 800dd3e:	6939      	ldr	r1, [r7, #16]
 800dd40:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800dd44:	e79b      	b.n	800dc7e <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd54:	4413      	add	r3, r2
 800dd56:	4619      	mov	r1, r3
 800dd58:	68f8      	ldr	r0, [r7, #12]
 800dd5a:	f7fe fdcf 	bl	800c8fc <ld_clust>
 800dd5e:	4602      	mov	r2, r0
 800dd60:	693b      	ldr	r3, [r7, #16]
 800dd62:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dd64:	e78b      	b.n	800dc7e <follow_path+0x56>
			if (res != FR_OK) break;
 800dd66:	bf00      	nop
 800dd68:	e002      	b.n	800dd70 <follow_path+0x148>
				break;
 800dd6a:	bf00      	nop
 800dd6c:	e000      	b.n	800dd70 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dd6e:	bf00      	nop
			}
		}
	}

	return res;
 800dd70:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3718      	adds	r7, #24
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}

0800dd7a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800dd7a:	b480      	push	{r7}
 800dd7c:	b087      	sub	sp, #28
 800dd7e:	af00      	add	r7, sp, #0
 800dd80:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800dd82:	f04f 33ff 	mov.w	r3, #4294967295
 800dd86:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d031      	beq.n	800ddf4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	617b      	str	r3, [r7, #20]
 800dd96:	e002      	b.n	800dd9e <get_ldnumber+0x24>
 800dd98:	697b      	ldr	r3, [r7, #20]
 800dd9a:	3301      	adds	r3, #1
 800dd9c:	617b      	str	r3, [r7, #20]
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	2b1f      	cmp	r3, #31
 800dda4:	d903      	bls.n	800ddae <get_ldnumber+0x34>
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	781b      	ldrb	r3, [r3, #0]
 800ddaa:	2b3a      	cmp	r3, #58	; 0x3a
 800ddac:	d1f4      	bne.n	800dd98 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	781b      	ldrb	r3, [r3, #0]
 800ddb2:	2b3a      	cmp	r3, #58	; 0x3a
 800ddb4:	d11c      	bne.n	800ddf0 <get_ldnumber+0x76>
			tp = *path;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	1c5a      	adds	r2, r3, #1
 800ddc0:	60fa      	str	r2, [r7, #12]
 800ddc2:	781b      	ldrb	r3, [r3, #0]
 800ddc4:	3b30      	subs	r3, #48	; 0x30
 800ddc6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	2b09      	cmp	r3, #9
 800ddcc:	d80e      	bhi.n	800ddec <get_ldnumber+0x72>
 800ddce:	68fa      	ldr	r2, [r7, #12]
 800ddd0:	697b      	ldr	r3, [r7, #20]
 800ddd2:	429a      	cmp	r2, r3
 800ddd4:	d10a      	bne.n	800ddec <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	2b03      	cmp	r3, #3
 800ddda:	d807      	bhi.n	800ddec <get_ldnumber+0x72>
					vol = (int)i;
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800dde0:	697b      	ldr	r3, [r7, #20]
 800dde2:	3301      	adds	r3, #1
 800dde4:	617b      	str	r3, [r7, #20]
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	697a      	ldr	r2, [r7, #20]
 800ddea:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	e002      	b.n	800ddf6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ddf4:	693b      	ldr	r3, [r7, #16]
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	371c      	adds	r7, #28
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de00:	4770      	bx	lr
	...

0800de04 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b082      	sub	sp, #8
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
 800de0c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2200      	movs	r2, #0
 800de12:	70da      	strb	r2, [r3, #3]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	f04f 32ff 	mov.w	r2, #4294967295
 800de1a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800de1c:	6839      	ldr	r1, [r7, #0]
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f7fd fdb0 	bl	800b984 <move_window>
 800de24:	4603      	mov	r3, r0
 800de26:	2b00      	cmp	r3, #0
 800de28:	d001      	beq.n	800de2e <check_fs+0x2a>
 800de2a:	2304      	movs	r3, #4
 800de2c:	e044      	b.n	800deb8 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	3338      	adds	r3, #56	; 0x38
 800de32:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800de36:	4618      	mov	r0, r3
 800de38:	f7fd f990 	bl	800b15c <ld_word>
 800de3c:	4603      	mov	r3, r0
 800de3e:	461a      	mov	r2, r3
 800de40:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800de44:	429a      	cmp	r2, r3
 800de46:	d001      	beq.n	800de4c <check_fs+0x48>
 800de48:	2303      	movs	r3, #3
 800de4a:	e035      	b.n	800deb8 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800de52:	2be9      	cmp	r3, #233	; 0xe9
 800de54:	d009      	beq.n	800de6a <check_fs+0x66>
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800de5c:	2beb      	cmp	r3, #235	; 0xeb
 800de5e:	d11e      	bne.n	800de9e <check_fs+0x9a>
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800de66:	2b90      	cmp	r3, #144	; 0x90
 800de68:	d119      	bne.n	800de9e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	3338      	adds	r3, #56	; 0x38
 800de6e:	3336      	adds	r3, #54	; 0x36
 800de70:	4618      	mov	r0, r3
 800de72:	f7fd f98b 	bl	800b18c <ld_dword>
 800de76:	4603      	mov	r3, r0
 800de78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800de7c:	4a10      	ldr	r2, [pc, #64]	; (800dec0 <check_fs+0xbc>)
 800de7e:	4293      	cmp	r3, r2
 800de80:	d101      	bne.n	800de86 <check_fs+0x82>
 800de82:	2300      	movs	r3, #0
 800de84:	e018      	b.n	800deb8 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	3338      	adds	r3, #56	; 0x38
 800de8a:	3352      	adds	r3, #82	; 0x52
 800de8c:	4618      	mov	r0, r3
 800de8e:	f7fd f97d 	bl	800b18c <ld_dword>
 800de92:	4603      	mov	r3, r0
 800de94:	4a0b      	ldr	r2, [pc, #44]	; (800dec4 <check_fs+0xc0>)
 800de96:	4293      	cmp	r3, r2
 800de98:	d101      	bne.n	800de9e <check_fs+0x9a>
 800de9a:	2300      	movs	r3, #0
 800de9c:	e00c      	b.n	800deb8 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	3338      	adds	r3, #56	; 0x38
 800dea2:	220b      	movs	r2, #11
 800dea4:	4908      	ldr	r1, [pc, #32]	; (800dec8 <check_fs+0xc4>)
 800dea6:	4618      	mov	r0, r3
 800dea8:	f7fd fb79 	bl	800b59e <mem_cmp>
 800deac:	4603      	mov	r3, r0
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d101      	bne.n	800deb6 <check_fs+0xb2>
 800deb2:	2301      	movs	r3, #1
 800deb4:	e000      	b.n	800deb8 <check_fs+0xb4>
#endif
	return 2;
 800deb6:	2302      	movs	r3, #2
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3708      	adds	r7, #8
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}
 800dec0:	00544146 	.word	0x00544146
 800dec4:	33544146 	.word	0x33544146
 800dec8:	08014290 	.word	0x08014290

0800decc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800decc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ded0:	b09c      	sub	sp, #112	; 0x70
 800ded2:	af00      	add	r7, sp, #0
 800ded4:	61f8      	str	r0, [r7, #28]
 800ded6:	61b9      	str	r1, [r7, #24]
 800ded8:	4613      	mov	r3, r2
 800deda:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800dedc:	69bb      	ldr	r3, [r7, #24]
 800dede:	2200      	movs	r2, #0
 800dee0:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800dee2:	69f8      	ldr	r0, [r7, #28]
 800dee4:	f7ff ff49 	bl	800dd7a <get_ldnumber>
 800dee8:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800deea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800deec:	2b00      	cmp	r3, #0
 800deee:	da01      	bge.n	800def4 <find_volume+0x28>
 800def0:	230b      	movs	r3, #11
 800def2:	e337      	b.n	800e564 <find_volume+0x698>


	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800def4:	4a99      	ldr	r2, [pc, #612]	; (800e15c <find_volume+0x290>)
 800def6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800def8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800defc:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800defe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df00:	2b00      	cmp	r3, #0
 800df02:	d101      	bne.n	800df08 <find_volume+0x3c>
 800df04:	230c      	movs	r3, #12
 800df06:	e32d      	b.n	800e564 <find_volume+0x698>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800df08:	69bb      	ldr	r3, [r7, #24]
 800df0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800df0c:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800df0e:	7dfb      	ldrb	r3, [r7, #23]
 800df10:	f023 0301 	bic.w	r3, r3, #1
 800df14:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800df16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df18:	781b      	ldrb	r3, [r3, #0]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d01a      	beq.n	800df54 <find_volume+0x88>

		stat = disk_status(fs->drv);
 800df1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df20:	785b      	ldrb	r3, [r3, #1]
 800df22:	4618      	mov	r0, r3
 800df24:	f7fd f87c 	bl	800b020 <disk_status>
 800df28:	4603      	mov	r3, r0
 800df2a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800df2e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800df32:	f003 0301 	and.w	r3, r3, #1
 800df36:	2b00      	cmp	r3, #0
 800df38:	d10c      	bne.n	800df54 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800df3a:	7dfb      	ldrb	r3, [r7, #23]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d007      	beq.n	800df50 <find_volume+0x84>
 800df40:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800df44:	f003 0304 	and.w	r3, r3, #4
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d001      	beq.n	800df50 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800df4c:	230a      	movs	r3, #10
 800df4e:	e309      	b.n	800e564 <find_volume+0x698>
			}
			return FR_OK;				/* The file system object is valid */
 800df50:	2300      	movs	r3, #0
 800df52:	e307      	b.n	800e564 <find_volume+0x698>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800df54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df56:	2200      	movs	r2, #0
 800df58:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800df5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df5c:	b2da      	uxtb	r2, r3
 800df5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df60:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800df62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df64:	785b      	ldrb	r3, [r3, #1]
 800df66:	4618      	mov	r0, r3
 800df68:	f7fd f874 	bl	800b054 <disk_initialize>
 800df6c:	4603      	mov	r3, r0
 800df6e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800df72:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800df76:	f003 0301 	and.w	r3, r3, #1
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d001      	beq.n	800df82 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800df7e:	2303      	movs	r3, #3
 800df80:	e2f0      	b.n	800e564 <find_volume+0x698>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800df82:	7dfb      	ldrb	r3, [r7, #23]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d007      	beq.n	800df98 <find_volume+0xcc>
 800df88:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800df8c:	f003 0304 	and.w	r3, r3, #4
 800df90:	2b00      	cmp	r3, #0
 800df92:	d001      	beq.n	800df98 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800df94:	230a      	movs	r3, #10
 800df96:	e2e5      	b.n	800e564 <find_volume+0x698>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800df98:	2300      	movs	r3, #0
 800df9a:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800df9c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800df9e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800dfa0:	f7ff ff30 	bl	800de04 <check_fs>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800dfaa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800dfae:	2b02      	cmp	r3, #2
 800dfb0:	d14d      	bne.n	800e04e <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	65bb      	str	r3, [r7, #88]	; 0x58
 800dfb6:	e020      	b.n	800dffa <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800dfb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfba:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800dfbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dfc0:	011b      	lsls	r3, r3, #4
 800dfc2:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800dfc6:	4413      	add	r3, r2
 800dfc8:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800dfca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dfcc:	3304      	adds	r3, #4
 800dfce:	781b      	ldrb	r3, [r3, #0]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d006      	beq.n	800dfe2 <find_volume+0x116>
 800dfd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dfd6:	3308      	adds	r3, #8
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f7fd f8d7 	bl	800b18c <ld_dword>
 800dfde:	4602      	mov	r2, r0
 800dfe0:	e000      	b.n	800dfe4 <find_volume+0x118>
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dfe6:	009b      	lsls	r3, r3, #2
 800dfe8:	3360      	adds	r3, #96	; 0x60
 800dfea:	f107 0110 	add.w	r1, r7, #16
 800dfee:	440b      	add	r3, r1
 800dff0:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dff4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dff6:	3301      	adds	r3, #1
 800dff8:	65bb      	str	r3, [r7, #88]	; 0x58
 800dffa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dffc:	2b03      	cmp	r3, #3
 800dffe:	d9db      	bls.n	800dfb8 <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e000:	2300      	movs	r3, #0
 800e002:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 800e004:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e006:	2b00      	cmp	r3, #0
 800e008:	d002      	beq.n	800e010 <find_volume+0x144>
 800e00a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e00c:	3b01      	subs	r3, #1
 800e00e:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e010:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e012:	009b      	lsls	r3, r3, #2
 800e014:	3360      	adds	r3, #96	; 0x60
 800e016:	f107 0210 	add.w	r2, r7, #16
 800e01a:	4413      	add	r3, r2
 800e01c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800e020:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e022:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e024:	2b00      	cmp	r3, #0
 800e026:	d005      	beq.n	800e034 <find_volume+0x168>
 800e028:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e02a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e02c:	f7ff feea 	bl	800de04 <check_fs>
 800e030:	4603      	mov	r3, r0
 800e032:	e000      	b.n	800e036 <find_volume+0x16a>
 800e034:	2303      	movs	r3, #3
 800e036:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e03a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e03e:	2b01      	cmp	r3, #1
 800e040:	d905      	bls.n	800e04e <find_volume+0x182>
 800e042:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e044:	3301      	adds	r3, #1
 800e046:	65bb      	str	r3, [r7, #88]	; 0x58
 800e048:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e04a:	2b03      	cmp	r3, #3
 800e04c:	d9e0      	bls.n	800e010 <find_volume+0x144>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e04e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e052:	2b04      	cmp	r3, #4
 800e054:	d101      	bne.n	800e05a <find_volume+0x18e>
 800e056:	2301      	movs	r3, #1
 800e058:	e284      	b.n	800e564 <find_volume+0x698>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e05a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e05e:	2b01      	cmp	r3, #1
 800e060:	d901      	bls.n	800e066 <find_volume+0x19a>
 800e062:	230d      	movs	r3, #13
 800e064:	e27e      	b.n	800e564 <find_volume+0x698>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800e066:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e06a:	2b01      	cmp	r3, #1
 800e06c:	f040 80fa 	bne.w	800e264 <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800e070:	230b      	movs	r3, #11
 800e072:	65bb      	str	r3, [r7, #88]	; 0x58
 800e074:	e002      	b.n	800e07c <find_volume+0x1b0>
 800e076:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e078:	3301      	adds	r3, #1
 800e07a:	65bb      	str	r3, [r7, #88]	; 0x58
 800e07c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e07e:	2b3f      	cmp	r3, #63	; 0x3f
 800e080:	d806      	bhi.n	800e090 <find_volume+0x1c4>
 800e082:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e084:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e086:	4413      	add	r3, r2
 800e088:	3338      	adds	r3, #56	; 0x38
 800e08a:	781b      	ldrb	r3, [r3, #0]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d0f2      	beq.n	800e076 <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800e090:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e092:	2b3f      	cmp	r3, #63	; 0x3f
 800e094:	d801      	bhi.n	800e09a <find_volume+0x1ce>
 800e096:	230d      	movs	r3, #13
 800e098:	e264      	b.n	800e564 <find_volume+0x698>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800e09a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e09c:	3338      	adds	r3, #56	; 0x38
 800e09e:	3368      	adds	r3, #104	; 0x68
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f7fd f85b 	bl	800b15c <ld_word>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0ac:	d001      	beq.n	800e0b2 <find_volume+0x1e6>
 800e0ae:	230d      	movs	r3, #13
 800e0b0:	e258      	b.n	800e564 <find_volume+0x698>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800e0b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0b4:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800e0b8:	2b09      	cmp	r3, #9
 800e0ba:	d001      	beq.n	800e0c0 <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 800e0bc:	230d      	movs	r3, #13
 800e0be:	e251      	b.n	800e564 <find_volume+0x698>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800e0c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0c2:	3338      	adds	r3, #56	; 0x38
 800e0c4:	3348      	adds	r3, #72	; 0x48
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7fd f883 	bl	800b1d2 <ld_qword>
 800e0cc:	4602      	mov	r2, r0
 800e0ce:	460b      	mov	r3, r1
 800e0d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e0d2:	2000      	movs	r0, #0
 800e0d4:	60b9      	str	r1, [r7, #8]
 800e0d6:	60f8      	str	r0, [r7, #12]
 800e0d8:	68b9      	ldr	r1, [r7, #8]
 800e0da:	1851      	adds	r1, r2, r1
 800e0dc:	6039      	str	r1, [r7, #0]
 800e0de:	68f9      	ldr	r1, [r7, #12]
 800e0e0:	eb43 0101 	adc.w	r1, r3, r1
 800e0e4:	6079      	str	r1, [r7, #4]
 800e0e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0ea:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800e0ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800e0f2:	2b01      	cmp	r3, #1
 800e0f4:	d301      	bcc.n	800e0fa <find_volume+0x22e>
 800e0f6:	230d      	movs	r3, #13
 800e0f8:	e234      	b.n	800e564 <find_volume+0x698>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800e0fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0fc:	3338      	adds	r3, #56	; 0x38
 800e0fe:	3354      	adds	r3, #84	; 0x54
 800e100:	4618      	mov	r0, r3
 800e102:	f7fd f843 	bl	800b18c <ld_dword>
 800e106:	4602      	mov	r2, r0
 800e108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e10a:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800e10c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e10e:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 800e112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e114:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800e116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e118:	789b      	ldrb	r3, [r3, #2]
 800e11a:	2b01      	cmp	r3, #1
 800e11c:	d001      	beq.n	800e122 <find_volume+0x256>
 800e11e:	230d      	movs	r3, #13
 800e120:	e220      	b.n	800e564 <find_volume+0x698>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800e122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e124:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800e128:	461a      	mov	r2, r3
 800e12a:	2301      	movs	r3, #1
 800e12c:	4093      	lsls	r3, r2
 800e12e:	b29a      	uxth	r2, r3
 800e130:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e132:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800e134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e136:	895b      	ldrh	r3, [r3, #10]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d101      	bne.n	800e140 <find_volume+0x274>
 800e13c:	230d      	movs	r3, #13
 800e13e:	e211      	b.n	800e564 <find_volume+0x698>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800e140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e142:	3338      	adds	r3, #56	; 0x38
 800e144:	335c      	adds	r3, #92	; 0x5c
 800e146:	4618      	mov	r0, r3
 800e148:	f7fd f820 	bl	800b18c <ld_dword>
 800e14c:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800e14e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e150:	4a03      	ldr	r2, [pc, #12]	; (800e160 <find_volume+0x294>)
 800e152:	4293      	cmp	r3, r2
 800e154:	d906      	bls.n	800e164 <find_volume+0x298>
 800e156:	230d      	movs	r3, #13
 800e158:	e204      	b.n	800e564 <find_volume+0x698>
 800e15a:	bf00      	nop
 800e15c:	200019b8 	.word	0x200019b8
 800e160:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800e164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e166:	1c9a      	adds	r2, r3, #2
 800e168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e16a:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800e16c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e16e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e170:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800e172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e174:	3338      	adds	r3, #56	; 0x38
 800e176:	3358      	adds	r3, #88	; 0x58
 800e178:	4618      	mov	r0, r3
 800e17a:	f7fd f807 	bl	800b18c <ld_dword>
 800e17e:	4602      	mov	r2, r0
 800e180:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e182:	441a      	add	r2, r3
 800e184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e186:	631a      	str	r2, [r3, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800e188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e18a:	3338      	adds	r3, #56	; 0x38
 800e18c:	3350      	adds	r3, #80	; 0x50
 800e18e:	4618      	mov	r0, r3
 800e190:	f7fc fffc 	bl	800b18c <ld_dword>
 800e194:	4602      	mov	r2, r0
 800e196:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e198:	441a      	add	r2, r3
 800e19a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e19c:	629a      	str	r2, [r3, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800e19e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	469a      	mov	sl, r3
 800e1a6:	4693      	mov	fp, r2
 800e1a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1aa:	895b      	ldrh	r3, [r3, #10]
 800e1ac:	461a      	mov	r2, r3
 800e1ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1b0:	fb02 f303 	mul.w	r3, r2, r3
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	4698      	mov	r8, r3
 800e1b8:	4691      	mov	r9, r2
 800e1ba:	eb1a 0408 	adds.w	r4, sl, r8
 800e1be:	eb4b 0509 	adc.w	r5, fp, r9
 800e1c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800e1c6:	42a2      	cmp	r2, r4
 800e1c8:	41ab      	sbcs	r3, r5
 800e1ca:	d201      	bcs.n	800e1d0 <find_volume+0x304>
 800e1cc:	230d      	movs	r3, #13
 800e1ce:	e1c9      	b.n	800e564 <find_volume+0x698>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800e1d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1d2:	3338      	adds	r3, #56	; 0x38
 800e1d4:	3360      	adds	r3, #96	; 0x60
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f7fc ffd8 	bl	800b18c <ld_dword>
 800e1dc:	4602      	mov	r2, r0
 800e1de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1e0:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800e1e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1e6:	4619      	mov	r1, r3
 800e1e8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e1ea:	f7fd fc67 	bl	800babc <clust2sect>
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	4619      	mov	r1, r3
 800e1f2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e1f4:	f7fd fbc6 	bl	800b984 <move_window>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d001      	beq.n	800e202 <find_volume+0x336>
 800e1fe:	2301      	movs	r3, #1
 800e200:	e1b0      	b.n	800e564 <find_volume+0x698>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800e202:	2300      	movs	r3, #0
 800e204:	65bb      	str	r3, [r7, #88]	; 0x58
 800e206:	e015      	b.n	800e234 <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800e208:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e20a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e20c:	4413      	add	r3, r2
 800e20e:	3338      	adds	r3, #56	; 0x38
 800e210:	781b      	ldrb	r3, [r3, #0]
 800e212:	2b81      	cmp	r3, #129	; 0x81
 800e214:	d10b      	bne.n	800e22e <find_volume+0x362>
 800e216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e218:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800e21c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e21e:	3314      	adds	r3, #20
 800e220:	4413      	add	r3, r2
 800e222:	4618      	mov	r0, r3
 800e224:	f7fc ffb2 	bl	800b18c <ld_dword>
 800e228:	4603      	mov	r3, r0
 800e22a:	2b02      	cmp	r3, #2
 800e22c:	d007      	beq.n	800e23e <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800e22e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e230:	3320      	adds	r3, #32
 800e232:	65bb      	str	r3, [r7, #88]	; 0x58
 800e234:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e23a:	d3e5      	bcc.n	800e208 <find_volume+0x33c>
 800e23c:	e000      	b.n	800e240 <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800e23e:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800e240:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e242:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e246:	d101      	bne.n	800e24c <find_volume+0x380>
 800e248:	230d      	movs	r3, #13
 800e24a:	e18b      	b.n	800e564 <find_volume+0x698>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e24c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e24e:	f04f 32ff 	mov.w	r2, #4294967295
 800e252:	619a      	str	r2, [r3, #24]
 800e254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e256:	699a      	ldr	r2, [r3, #24]
 800e258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e25a:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800e25c:	2304      	movs	r3, #4
 800e25e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800e262:	e167      	b.n	800e534 <find_volume+0x668>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e266:	3338      	adds	r3, #56	; 0x38
 800e268:	330b      	adds	r3, #11
 800e26a:	4618      	mov	r0, r3
 800e26c:	f7fc ff76 	bl	800b15c <ld_word>
 800e270:	4603      	mov	r3, r0
 800e272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e276:	d001      	beq.n	800e27c <find_volume+0x3b0>
 800e278:	230d      	movs	r3, #13
 800e27a:	e173      	b.n	800e564 <find_volume+0x698>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e27c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e27e:	3338      	adds	r3, #56	; 0x38
 800e280:	3316      	adds	r3, #22
 800e282:	4618      	mov	r0, r3
 800e284:	f7fc ff6a 	bl	800b15c <ld_word>
 800e288:	4603      	mov	r3, r0
 800e28a:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e28c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d106      	bne.n	800e2a0 <find_volume+0x3d4>
 800e292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e294:	3338      	adds	r3, #56	; 0x38
 800e296:	3324      	adds	r3, #36	; 0x24
 800e298:	4618      	mov	r0, r3
 800e29a:	f7fc ff77 	bl	800b18c <ld_dword>
 800e29e:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 800e2a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e2a4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e2a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2a8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800e2ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2ae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e2b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2b2:	789b      	ldrb	r3, [r3, #2]
 800e2b4:	2b01      	cmp	r3, #1
 800e2b6:	d005      	beq.n	800e2c4 <find_volume+0x3f8>
 800e2b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2ba:	789b      	ldrb	r3, [r3, #2]
 800e2bc:	2b02      	cmp	r3, #2
 800e2be:	d001      	beq.n	800e2c4 <find_volume+0x3f8>
 800e2c0:	230d      	movs	r3, #13
 800e2c2:	e14f      	b.n	800e564 <find_volume+0x698>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e2c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2c6:	789b      	ldrb	r3, [r3, #2]
 800e2c8:	461a      	mov	r2, r3
 800e2ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e2cc:	fb02 f303 	mul.w	r3, r2, r3
 800e2d0:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e2d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e2d8:	b29a      	uxth	r2, r3
 800e2da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2dc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e2de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2e0:	895b      	ldrh	r3, [r3, #10]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d008      	beq.n	800e2f8 <find_volume+0x42c>
 800e2e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2e8:	895b      	ldrh	r3, [r3, #10]
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2ee:	895b      	ldrh	r3, [r3, #10]
 800e2f0:	3b01      	subs	r3, #1
 800e2f2:	4013      	ands	r3, r2
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d001      	beq.n	800e2fc <find_volume+0x430>
 800e2f8:	230d      	movs	r3, #13
 800e2fa:	e133      	b.n	800e564 <find_volume+0x698>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e2fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2fe:	3338      	adds	r3, #56	; 0x38
 800e300:	3311      	adds	r3, #17
 800e302:	4618      	mov	r0, r3
 800e304:	f7fc ff2a 	bl	800b15c <ld_word>
 800e308:	4603      	mov	r3, r0
 800e30a:	461a      	mov	r2, r3
 800e30c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e30e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e312:	891b      	ldrh	r3, [r3, #8]
 800e314:	f003 030f 	and.w	r3, r3, #15
 800e318:	b29b      	uxth	r3, r3
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d001      	beq.n	800e322 <find_volume+0x456>
 800e31e:	230d      	movs	r3, #13
 800e320:	e120      	b.n	800e564 <find_volume+0x698>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e324:	3338      	adds	r3, #56	; 0x38
 800e326:	3313      	adds	r3, #19
 800e328:	4618      	mov	r0, r3
 800e32a:	f7fc ff17 	bl	800b15c <ld_word>
 800e32e:	4603      	mov	r3, r0
 800e330:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e332:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e334:	2b00      	cmp	r3, #0
 800e336:	d106      	bne.n	800e346 <find_volume+0x47a>
 800e338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e33a:	3338      	adds	r3, #56	; 0x38
 800e33c:	3320      	adds	r3, #32
 800e33e:	4618      	mov	r0, r3
 800e340:	f7fc ff24 	bl	800b18c <ld_dword>
 800e344:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e348:	3338      	adds	r3, #56	; 0x38
 800e34a:	330e      	adds	r3, #14
 800e34c:	4618      	mov	r0, r3
 800e34e:	f7fc ff05 	bl	800b15c <ld_word>
 800e352:	4603      	mov	r3, r0
 800e354:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e358:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d101      	bne.n	800e364 <find_volume+0x498>
 800e360:	230d      	movs	r3, #13
 800e362:	e0ff      	b.n	800e564 <find_volume+0x698>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e364:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e368:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e36a:	4413      	add	r3, r2
 800e36c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e36e:	8912      	ldrh	r2, [r2, #8]
 800e370:	0912      	lsrs	r2, r2, #4
 800e372:	b292      	uxth	r2, r2
 800e374:	4413      	add	r3, r2
 800e376:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e378:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e37a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e37c:	429a      	cmp	r2, r3
 800e37e:	d201      	bcs.n	800e384 <find_volume+0x4b8>
 800e380:	230d      	movs	r3, #13
 800e382:	e0ef      	b.n	800e564 <find_volume+0x698>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e384:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e388:	1ad3      	subs	r3, r2, r3
 800e38a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e38c:	8952      	ldrh	r2, [r2, #10]
 800e38e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e392:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e396:	2b00      	cmp	r3, #0
 800e398:	d101      	bne.n	800e39e <find_volume+0x4d2>
 800e39a:	230d      	movs	r3, #13
 800e39c:	e0e2      	b.n	800e564 <find_volume+0x698>
		fmt = FS_FAT32;
 800e39e:	2303      	movs	r3, #3
 800e3a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e3a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3a6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e3aa:	4293      	cmp	r3, r2
 800e3ac:	d802      	bhi.n	800e3b4 <find_volume+0x4e8>
 800e3ae:	2302      	movs	r3, #2
 800e3b0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e3b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3b6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e3ba:	4293      	cmp	r3, r2
 800e3bc:	d802      	bhi.n	800e3c4 <find_volume+0x4f8>
 800e3be:	2301      	movs	r3, #1
 800e3c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e3c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3c6:	1c9a      	adds	r2, r3, #2
 800e3c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3ca:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800e3cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e3d0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e3d2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e3d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e3d8:	441a      	add	r2, r3
 800e3da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3dc:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800e3de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e3e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3e2:	441a      	add	r2, r3
 800e3e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3e6:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800e3e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e3ec:	2b03      	cmp	r3, #3
 800e3ee:	d11e      	bne.n	800e42e <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e3f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3f2:	3338      	adds	r3, #56	; 0x38
 800e3f4:	332a      	adds	r3, #42	; 0x2a
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f7fc feb0 	bl	800b15c <ld_word>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d001      	beq.n	800e406 <find_volume+0x53a>
 800e402:	230d      	movs	r3, #13
 800e404:	e0ae      	b.n	800e564 <find_volume+0x698>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e408:	891b      	ldrh	r3, [r3, #8]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d001      	beq.n	800e412 <find_volume+0x546>
 800e40e:	230d      	movs	r3, #13
 800e410:	e0a8      	b.n	800e564 <find_volume+0x698>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e414:	3338      	adds	r3, #56	; 0x38
 800e416:	332c      	adds	r3, #44	; 0x2c
 800e418:	4618      	mov	r0, r3
 800e41a:	f7fc feb7 	bl	800b18c <ld_dword>
 800e41e:	4602      	mov	r2, r0
 800e420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e422:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e426:	69db      	ldr	r3, [r3, #28]
 800e428:	009b      	lsls	r3, r3, #2
 800e42a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e42c:	e01f      	b.n	800e46e <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e42e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e430:	891b      	ldrh	r3, [r3, #8]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d101      	bne.n	800e43a <find_volume+0x56e>
 800e436:	230d      	movs	r3, #13
 800e438:	e094      	b.n	800e564 <find_volume+0x698>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e43a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e43c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e43e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e440:	441a      	add	r2, r3
 800e442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e444:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e446:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e44a:	2b02      	cmp	r3, #2
 800e44c:	d103      	bne.n	800e456 <find_volume+0x58a>
 800e44e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e450:	69db      	ldr	r3, [r3, #28]
 800e452:	005b      	lsls	r3, r3, #1
 800e454:	e00a      	b.n	800e46c <find_volume+0x5a0>
 800e456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e458:	69da      	ldr	r2, [r3, #28]
 800e45a:	4613      	mov	r3, r2
 800e45c:	005b      	lsls	r3, r3, #1
 800e45e:	4413      	add	r3, r2
 800e460:	085a      	lsrs	r2, r3, #1
 800e462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e464:	69db      	ldr	r3, [r3, #28]
 800e466:	f003 0301 	and.w	r3, r3, #1
 800e46a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e46c:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e46e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e470:	6a1a      	ldr	r2, [r3, #32]
 800e472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e474:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e478:	0a5b      	lsrs	r3, r3, #9
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d201      	bcs.n	800e482 <find_volume+0x5b6>
 800e47e:	230d      	movs	r3, #13
 800e480:	e070      	b.n	800e564 <find_volume+0x698>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e484:	f04f 32ff 	mov.w	r2, #4294967295
 800e488:	619a      	str	r2, [r3, #24]
 800e48a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e48c:	699a      	ldr	r2, [r3, #24]
 800e48e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e490:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800e492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e494:	2280      	movs	r2, #128	; 0x80
 800e496:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e498:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e49c:	2b03      	cmp	r3, #3
 800e49e:	d149      	bne.n	800e534 <find_volume+0x668>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e4a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4a2:	3338      	adds	r3, #56	; 0x38
 800e4a4:	3330      	adds	r3, #48	; 0x30
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f7fc fe58 	bl	800b15c <ld_word>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	2b01      	cmp	r3, #1
 800e4b0:	d140      	bne.n	800e534 <find_volume+0x668>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e4b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e4b4:	3301      	adds	r3, #1
 800e4b6:	4619      	mov	r1, r3
 800e4b8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e4ba:	f7fd fa63 	bl	800b984 <move_window>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d137      	bne.n	800e534 <find_volume+0x668>
		{
			fs->fsi_flag = 0;
 800e4c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e4ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4cc:	3338      	adds	r3, #56	; 0x38
 800e4ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f7fc fe42 	bl	800b15c <ld_word>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	461a      	mov	r2, r3
 800e4dc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	d127      	bne.n	800e534 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e4e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4e6:	3338      	adds	r3, #56	; 0x38
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f7fc fe4f 	bl	800b18c <ld_dword>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	4a1f      	ldr	r2, [pc, #124]	; (800e570 <find_volume+0x6a4>)
 800e4f2:	4293      	cmp	r3, r2
 800e4f4:	d11e      	bne.n	800e534 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e4f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4f8:	3338      	adds	r3, #56	; 0x38
 800e4fa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e4fe:	4618      	mov	r0, r3
 800e500:	f7fc fe44 	bl	800b18c <ld_dword>
 800e504:	4603      	mov	r3, r0
 800e506:	4a1b      	ldr	r2, [pc, #108]	; (800e574 <find_volume+0x6a8>)
 800e508:	4293      	cmp	r3, r2
 800e50a:	d113      	bne.n	800e534 <find_volume+0x668>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e50c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e50e:	3338      	adds	r3, #56	; 0x38
 800e510:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e514:	4618      	mov	r0, r3
 800e516:	f7fc fe39 	bl	800b18c <ld_dword>
 800e51a:	4602      	mov	r2, r0
 800e51c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e51e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e522:	3338      	adds	r3, #56	; 0x38
 800e524:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e528:	4618      	mov	r0, r3
 800e52a:	f7fc fe2f 	bl	800b18c <ld_dword>
 800e52e:	4602      	mov	r2, r0
 800e530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e532:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e536:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800e53a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e53c:	4b0e      	ldr	r3, [pc, #56]	; (800e578 <find_volume+0x6ac>)
 800e53e:	881b      	ldrh	r3, [r3, #0]
 800e540:	3301      	adds	r3, #1
 800e542:	b29a      	uxth	r2, r3
 800e544:	4b0c      	ldr	r3, [pc, #48]	; (800e578 <find_volume+0x6ac>)
 800e546:	801a      	strh	r2, [r3, #0]
 800e548:	4b0b      	ldr	r3, [pc, #44]	; (800e578 <find_volume+0x6ac>)
 800e54a:	881a      	ldrh	r2, [r3, #0]
 800e54c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e54e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e552:	4a0a      	ldr	r2, [pc, #40]	; (800e57c <find_volume+0x6b0>)
 800e554:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800e556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e558:	4a09      	ldr	r2, [pc, #36]	; (800e580 <find_volume+0x6b4>)
 800e55a:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e55c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e55e:	f7fd f9a9 	bl	800b8b4 <clear_lock>
#endif
	return FR_OK;
 800e562:	2300      	movs	r3, #0
}
 800e564:	4618      	mov	r0, r3
 800e566:	3770      	adds	r7, #112	; 0x70
 800e568:	46bd      	mov	sp, r7
 800e56a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e56e:	bf00      	nop
 800e570:	41615252 	.word	0x41615252
 800e574:	61417272 	.word	0x61417272
 800e578:	200019c8 	.word	0x200019c8
 800e57c:	20001c4c 	.word	0x20001c4c
 800e580:	200019ec 	.word	0x200019ec

0800e584 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b084      	sub	sp, #16
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
 800e58c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e58e:	2309      	movs	r3, #9
 800e590:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d01c      	beq.n	800e5d2 <validate+0x4e>
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d018      	beq.n	800e5d2 <validate+0x4e>
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	781b      	ldrb	r3, [r3, #0]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d013      	beq.n	800e5d2 <validate+0x4e>
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	889a      	ldrh	r2, [r3, #4]
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	88db      	ldrh	r3, [r3, #6]
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d10c      	bne.n	800e5d2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	785b      	ldrb	r3, [r3, #1]
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f7fc fd2e 	bl	800b020 <disk_status>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	f003 0301 	and.w	r3, r3, #1
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d101      	bne.n	800e5d2 <validate+0x4e>
			res = FR_OK;
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e5d2:	7bfb      	ldrb	r3, [r7, #15]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d102      	bne.n	800e5de <validate+0x5a>
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	e000      	b.n	800e5e0 <validate+0x5c>
 800e5de:	2300      	movs	r3, #0
 800e5e0:	683a      	ldr	r2, [r7, #0]
 800e5e2:	6013      	str	r3, [r2, #0]
	return res;
 800e5e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	3710      	adds	r7, #16
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}
	...

0800e5f0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b088      	sub	sp, #32
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	60f8      	str	r0, [r7, #12]
 800e5f8:	60b9      	str	r1, [r7, #8]
 800e5fa:	4613      	mov	r3, r2
 800e5fc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e602:	f107 0310 	add.w	r3, r7, #16
 800e606:	4618      	mov	r0, r3
 800e608:	f7ff fbb7 	bl	800dd7a <get_ldnumber>
 800e60c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e60e:	69fb      	ldr	r3, [r7, #28]
 800e610:	2b00      	cmp	r3, #0
 800e612:	da01      	bge.n	800e618 <f_mount+0x28>
 800e614:	230b      	movs	r3, #11
 800e616:	e02b      	b.n	800e670 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e618:	4a17      	ldr	r2, [pc, #92]	; (800e678 <f_mount+0x88>)
 800e61a:	69fb      	ldr	r3, [r7, #28]
 800e61c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e620:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e622:	69bb      	ldr	r3, [r7, #24]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d005      	beq.n	800e634 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e628:	69b8      	ldr	r0, [r7, #24]
 800e62a:	f7fd f943 	bl	800b8b4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e62e:	69bb      	ldr	r3, [r7, #24]
 800e630:	2200      	movs	r2, #0
 800e632:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d002      	beq.n	800e640 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	2200      	movs	r2, #0
 800e63e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e640:	68fa      	ldr	r2, [r7, #12]
 800e642:	490d      	ldr	r1, [pc, #52]	; (800e678 <f_mount+0x88>)
 800e644:	69fb      	ldr	r3, [r7, #28]
 800e646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d002      	beq.n	800e656 <f_mount+0x66>
 800e650:	79fb      	ldrb	r3, [r7, #7]
 800e652:	2b01      	cmp	r3, #1
 800e654:	d001      	beq.n	800e65a <f_mount+0x6a>
 800e656:	2300      	movs	r3, #0
 800e658:	e00a      	b.n	800e670 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e65a:	f107 010c 	add.w	r1, r7, #12
 800e65e:	f107 0308 	add.w	r3, r7, #8
 800e662:	2200      	movs	r2, #0
 800e664:	4618      	mov	r0, r3
 800e666:	f7ff fc31 	bl	800decc <find_volume>
 800e66a:	4603      	mov	r3, r0
 800e66c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e66e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e670:	4618      	mov	r0, r3
 800e672:	3720      	adds	r7, #32
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}
 800e678:	200019b8 	.word	0x200019b8

0800e67c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e67c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e680:	b0a6      	sub	sp, #152	; 0x98
 800e682:	af00      	add	r7, sp, #0
 800e684:	61f8      	str	r0, [r7, #28]
 800e686:	61b9      	str	r1, [r7, #24]
 800e688:	4613      	mov	r3, r2
 800e68a:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e68c:	69fb      	ldr	r3, [r7, #28]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d101      	bne.n	800e696 <f_open+0x1a>
 800e692:	2309      	movs	r3, #9
 800e694:	e2ae      	b.n	800ebf4 <f_open+0x578>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e696:	7dfb      	ldrb	r3, [r7, #23]
 800e698:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e69c:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 800e69e:	7dfa      	ldrb	r2, [r7, #23]
 800e6a0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800e6a4:	f107 0318 	add.w	r3, r7, #24
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f7ff fc0f 	bl	800decc <find_volume>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	if (res == FR_OK) {
 800e6b4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	f040 8292 	bne.w	800ebe2 <f_open+0x566>
		dj.obj.fs = fs;
 800e6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c0:	62bb      	str	r3, [r7, #40]	; 0x28
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e6c2:	69ba      	ldr	r2, [r7, #24]
 800e6c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e6c8:	4611      	mov	r1, r2
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f7ff faac 	bl	800dc28 <follow_path>
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e6d6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d11a      	bne.n	800e714 <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e6de:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800e6e2:	b25b      	sxtb	r3, r3
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	da03      	bge.n	800e6f0 <f_open+0x74>
				res = FR_INVALID_NAME;
 800e6e8:	2306      	movs	r3, #6
 800e6ea:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800e6ee:	e011      	b.n	800e714 <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e6f0:	7dfb      	ldrb	r3, [r7, #23]
 800e6f2:	f023 0301 	bic.w	r3, r3, #1
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	bf14      	ite	ne
 800e6fa:	2301      	movne	r3, #1
 800e6fc:	2300      	moveq	r3, #0
 800e6fe:	b2db      	uxtb	r3, r3
 800e700:	461a      	mov	r2, r3
 800e702:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e706:	4611      	mov	r1, r2
 800e708:	4618      	mov	r0, r3
 800e70a:	f7fc ff8b 	bl	800b624 <chk_lock>
 800e70e:	4603      	mov	r3, r0
 800e710:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e714:	7dfb      	ldrb	r3, [r7, #23]
 800e716:	f003 031c 	and.w	r3, r3, #28
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	f000 8115 	beq.w	800e94a <f_open+0x2ce>
			if (res != FR_OK) {					/* No file, create new */
 800e720:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e724:	2b00      	cmp	r3, #0
 800e726:	d017      	beq.n	800e758 <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e728:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e72c:	2b04      	cmp	r3, #4
 800e72e:	d10e      	bne.n	800e74e <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e730:	f7fc ffd4 	bl	800b6dc <enq_lock>
 800e734:	4603      	mov	r3, r0
 800e736:	2b00      	cmp	r3, #0
 800e738:	d006      	beq.n	800e748 <f_open+0xcc>
 800e73a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e73e:	4618      	mov	r0, r3
 800e740:	f7fe ff14 	bl	800d56c <dir_register>
 800e744:	4603      	mov	r3, r0
 800e746:	e000      	b.n	800e74a <f_open+0xce>
 800e748:	2312      	movs	r3, #18
 800e74a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e74e:	7dfb      	ldrb	r3, [r7, #23]
 800e750:	f043 0308 	orr.w	r3, r3, #8
 800e754:	75fb      	strb	r3, [r7, #23]
 800e756:	e011      	b.n	800e77c <f_open+0x100>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e758:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e75c:	f003 0311 	and.w	r3, r3, #17
 800e760:	2b00      	cmp	r3, #0
 800e762:	d003      	beq.n	800e76c <f_open+0xf0>
					res = FR_DENIED;
 800e764:	2307      	movs	r3, #7
 800e766:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800e76a:	e007      	b.n	800e77c <f_open+0x100>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e76c:	7dfb      	ldrb	r3, [r7, #23]
 800e76e:	f003 0304 	and.w	r3, r3, #4
 800e772:	2b00      	cmp	r3, #0
 800e774:	d002      	beq.n	800e77c <f_open+0x100>
 800e776:	2308      	movs	r3, #8
 800e778:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e77c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e780:	2b00      	cmp	r3, #0
 800e782:	f040 80fe 	bne.w	800e982 <f_open+0x306>
 800e786:	7dfb      	ldrb	r3, [r7, #23]
 800e788:	f003 0308 	and.w	r3, r3, #8
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	f000 80f8 	beq.w	800e982 <f_open+0x306>
				dw = GET_FATTIME();
 800e792:	f7f9 fe67 	bl	8008464 <get_fattime>
 800e796:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800e79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e79c:	781b      	ldrb	r3, [r3, #0]
 800e79e:	2b04      	cmp	r3, #4
 800e7a0:	f040 8084 	bne.w	800e8ac <f_open+0x230>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800e7a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7a6:	69fb      	ldr	r3, [r7, #28]
 800e7a8:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800e7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ac:	691b      	ldr	r3, [r3, #16]
 800e7ae:	3334      	adds	r3, #52	; 0x34
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7fc fceb 	bl	800b18c <ld_dword>
 800e7b6:	4602      	mov	r2, r0
 800e7b8:	69fb      	ldr	r3, [r7, #28]
 800e7ba:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800e7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7be:	691b      	ldr	r3, [r3, #16]
 800e7c0:	3338      	adds	r3, #56	; 0x38
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f7fc fd05 	bl	800b1d2 <ld_qword>
 800e7c8:	4602      	mov	r2, r0
 800e7ca:	460b      	mov	r3, r1
 800e7cc:	69f9      	ldr	r1, [r7, #28]
 800e7ce:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800e7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d4:	691b      	ldr	r3, [r3, #16]
 800e7d6:	3321      	adds	r3, #33	; 0x21
 800e7d8:	781b      	ldrb	r3, [r3, #0]
 800e7da:	f003 0302 	and.w	r3, r3, #2
 800e7de:	b2da      	uxtb	r2, r3
 800e7e0:	69fb      	ldr	r3, [r7, #28]
 800e7e2:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800e7e4:	69fb      	ldr	r3, [r7, #28]
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800e7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ec:	691b      	ldr	r3, [r3, #16]
 800e7ee:	3308      	adds	r3, #8
 800e7f0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f7fc fde2 	bl	800b3be <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800e7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7fc:	691b      	ldr	r3, [r3, #16]
 800e7fe:	3314      	adds	r3, #20
 800e800:	2200      	movs	r2, #0
 800e802:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800e804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e806:	691b      	ldr	r3, [r3, #16]
 800e808:	330c      	adds	r3, #12
 800e80a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800e80e:	4618      	mov	r0, r3
 800e810:	f7fc fdd5 	bl	800b3be <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800e814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e816:	691b      	ldr	r3, [r3, #16]
 800e818:	3315      	adds	r3, #21
 800e81a:	2200      	movs	r2, #0
 800e81c:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800e81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e820:	691b      	ldr	r3, [r3, #16]
 800e822:	3304      	adds	r3, #4
 800e824:	2220      	movs	r2, #32
 800e826:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800e828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e82a:	691b      	ldr	r3, [r3, #16]
 800e82c:	3334      	adds	r3, #52	; 0x34
 800e82e:	2100      	movs	r1, #0
 800e830:	4618      	mov	r0, r3
 800e832:	f7fc fdc4 	bl	800b3be <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800e836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e838:	691b      	ldr	r3, [r3, #16]
 800e83a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e83e:	f04f 0200 	mov.w	r2, #0
 800e842:	f04f 0300 	mov.w	r3, #0
 800e846:	4608      	mov	r0, r1
 800e848:	f7fc fde5 	bl	800b416 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800e84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e84e:	691b      	ldr	r3, [r3, #16]
 800e850:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800e854:	f04f 0200 	mov.w	r2, #0
 800e858:	f04f 0300 	mov.w	r3, #0
 800e85c:	4608      	mov	r0, r1
 800e85e:	f7fc fdda 	bl	800b416 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800e862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e864:	691b      	ldr	r3, [r3, #16]
 800e866:	3321      	adds	r3, #33	; 0x21
 800e868:	2201      	movs	r2, #1
 800e86a:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800e86c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e870:	4618      	mov	r0, r3
 800e872:	f7fe fbc9 	bl	800d008 <store_xdir>
 800e876:	4603      	mov	r3, r0
 800e878:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800e87c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e880:	2b00      	cmp	r3, #0
 800e882:	d17e      	bne.n	800e982 <f_open+0x306>
 800e884:	69fb      	ldr	r3, [r7, #28]
 800e886:	689b      	ldr	r3, [r3, #8]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d07a      	beq.n	800e982 <f_open+0x306>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800e88c:	69f8      	ldr	r0, [r7, #28]
 800e88e:	69fb      	ldr	r3, [r7, #28]
 800e890:	689b      	ldr	r3, [r3, #8]
 800e892:	2200      	movs	r2, #0
 800e894:	4619      	mov	r1, r3
 800e896:	f7fd fc81 	bl	800c19c <remove_chain>
 800e89a:	4603      	mov	r3, r0
 800e89c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800e8a0:	69fb      	ldr	r3, [r7, #28]
 800e8a2:	689a      	ldr	r2, [r3, #8]
 800e8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a6:	3a01      	subs	r2, #1
 800e8a8:	615a      	str	r2, [r3, #20]
 800e8aa:	e06a      	b.n	800e982 <f_open+0x306>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e8ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e8ae:	330e      	adds	r3, #14
 800e8b0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	f7fc fd82 	bl	800b3be <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e8ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e8bc:	3316      	adds	r3, #22
 800e8be:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f7fc fd7b 	bl	800b3be <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e8c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e8ca:	330b      	adds	r3, #11
 800e8cc:	2220      	movs	r2, #32
 800e8ce:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e8d4:	4611      	mov	r1, r2
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f7fe f810 	bl	800c8fc <ld_clust>
 800e8dc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f7fe f827 	bl	800c93a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e8ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e8ee:	331c      	adds	r3, #28
 800e8f0:	2100      	movs	r1, #0
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7fc fd63 	bl	800b3be <st_dword>
					fs->wflag = 1;
 800e8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8fa:	2201      	movs	r2, #1
 800e8fc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e8fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e902:	2b00      	cmp	r3, #0
 800e904:	d03d      	beq.n	800e982 <f_open+0x306>
						dw = fs->winsect;
 800e906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e90a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
						res = remove_chain(&dj.obj, cl, 0);
 800e90e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e912:	2200      	movs	r2, #0
 800e914:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800e918:	4618      	mov	r0, r3
 800e91a:	f7fd fc3f 	bl	800c19c <remove_chain>
 800e91e:	4603      	mov	r3, r0
 800e920:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						if (res == FR_OK) {
 800e924:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d12a      	bne.n	800e982 <f_open+0x306>
							res = move_window(fs, dw);
 800e92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e92e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800e932:	4618      	mov	r0, r3
 800e934:	f7fd f826 	bl	800b984 <move_window>
 800e938:	4603      	mov	r3, r0
 800e93a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e940:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e944:	3a01      	subs	r2, #1
 800e946:	615a      	str	r2, [r3, #20]
 800e948:	e01b      	b.n	800e982 <f_open+0x306>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e94a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d117      	bne.n	800e982 <f_open+0x306>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e952:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e956:	f003 0310 	and.w	r3, r3, #16
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d003      	beq.n	800e966 <f_open+0x2ea>
					res = FR_NO_FILE;
 800e95e:	2304      	movs	r3, #4
 800e960:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800e964:	e00d      	b.n	800e982 <f_open+0x306>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e966:	7dfb      	ldrb	r3, [r7, #23]
 800e968:	f003 0302 	and.w	r3, r3, #2
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d008      	beq.n	800e982 <f_open+0x306>
 800e970:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e974:	f003 0301 	and.w	r3, r3, #1
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d002      	beq.n	800e982 <f_open+0x306>
						res = FR_DENIED;
 800e97c:	2307      	movs	r3, #7
 800e97e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					}
				}
			}
		}
		if (res == FR_OK) {
 800e982:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e986:	2b00      	cmp	r3, #0
 800e988:	d128      	bne.n	800e9dc <f_open+0x360>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e98a:	7dfb      	ldrb	r3, [r7, #23]
 800e98c:	f003 0308 	and.w	r3, r3, #8
 800e990:	2b00      	cmp	r3, #0
 800e992:	d003      	beq.n	800e99c <f_open+0x320>
				mode |= FA_MODIFIED;
 800e994:	7dfb      	ldrb	r3, [r7, #23]
 800e996:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e99a:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e99e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e9a0:	69fb      	ldr	r3, [r7, #28]
 800e9a2:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800e9a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e9a6:	69fb      	ldr	r3, [r7, #28]
 800e9a8:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e9aa:	7dfb      	ldrb	r3, [r7, #23]
 800e9ac:	f023 0301 	bic.w	r3, r3, #1
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	bf14      	ite	ne
 800e9b4:	2301      	movne	r3, #1
 800e9b6:	2300      	moveq	r3, #0
 800e9b8:	b2db      	uxtb	r3, r3
 800e9ba:	461a      	mov	r2, r3
 800e9bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e9c0:	4611      	mov	r1, r2
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f7fc feac 	bl	800b720 <inc_lock>
 800e9c8:	4602      	mov	r2, r0
 800e9ca:	69fb      	ldr	r3, [r7, #28]
 800e9cc:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e9ce:	69fb      	ldr	r3, [r7, #28]
 800e9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d102      	bne.n	800e9dc <f_open+0x360>
 800e9d6:	2302      	movs	r3, #2
 800e9d8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e9dc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	f040 80fe 	bne.w	800ebe2 <f_open+0x566>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800e9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e8:	781b      	ldrb	r3, [r3, #0]
 800e9ea:	2b04      	cmp	r3, #4
 800e9ec:	d12d      	bne.n	800ea4a <f_open+0x3ce>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800e9ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9f0:	69fb      	ldr	r3, [r7, #28]
 800e9f2:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800e9f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e9f8:	4613      	mov	r3, r2
 800e9fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e9fe:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ea02:	431a      	orrs	r2, r3
 800ea04:	69fb      	ldr	r3, [r7, #28]
 800ea06:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800ea08:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ea0a:	69fb      	ldr	r3, [r7, #28]
 800ea0c:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800ea0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea10:	691b      	ldr	r3, [r3, #16]
 800ea12:	3334      	adds	r3, #52	; 0x34
 800ea14:	4618      	mov	r0, r3
 800ea16:	f7fc fbb9 	bl	800b18c <ld_dword>
 800ea1a:	4602      	mov	r2, r0
 800ea1c:	69fb      	ldr	r3, [r7, #28]
 800ea1e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800ea20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea22:	691b      	ldr	r3, [r3, #16]
 800ea24:	3338      	adds	r3, #56	; 0x38
 800ea26:	4618      	mov	r0, r3
 800ea28:	f7fc fbd3 	bl	800b1d2 <ld_qword>
 800ea2c:	4602      	mov	r2, r0
 800ea2e:	460b      	mov	r3, r1
 800ea30:	69f9      	ldr	r1, [r7, #28]
 800ea32:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800ea36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea38:	691b      	ldr	r3, [r3, #16]
 800ea3a:	3321      	adds	r3, #33	; 0x21
 800ea3c:	781b      	ldrb	r3, [r3, #0]
 800ea3e:	f003 0302 	and.w	r3, r3, #2
 800ea42:	b2da      	uxtb	r2, r3
 800ea44:	69fb      	ldr	r3, [r7, #28]
 800ea46:	71da      	strb	r2, [r3, #7]
 800ea48:	e016      	b.n	800ea78 <f_open+0x3fc>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ea4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea4c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ea4e:	4611      	mov	r1, r2
 800ea50:	4618      	mov	r0, r3
 800ea52:	f7fd ff53 	bl	800c8fc <ld_clust>
 800ea56:	4602      	mov	r2, r0
 800ea58:	69fb      	ldr	r3, [r7, #28]
 800ea5a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ea5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea5e:	331c      	adds	r3, #28
 800ea60:	4618      	mov	r0, r3
 800ea62:	f7fc fb93 	bl	800b18c <ld_dword>
 800ea66:	4603      	mov	r3, r0
 800ea68:	2200      	movs	r2, #0
 800ea6a:	60bb      	str	r3, [r7, #8]
 800ea6c:	60fa      	str	r2, [r7, #12]
 800ea6e:	69fb      	ldr	r3, [r7, #28]
 800ea70:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ea74:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ea78:	69fb      	ldr	r3, [r7, #28]
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ea7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea80:	69fb      	ldr	r3, [r7, #28]
 800ea82:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ea84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea86:	88da      	ldrh	r2, [r3, #6]
 800ea88:	69fb      	ldr	r3, [r7, #28]
 800ea8a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ea8c:	69fb      	ldr	r3, [r7, #28]
 800ea8e:	7dfa      	ldrb	r2, [r7, #23]
 800ea90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800ea94:	69fb      	ldr	r3, [r7, #28]
 800ea96:	2200      	movs	r2, #0
 800ea98:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800ea9c:	69fb      	ldr	r3, [r7, #28]
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800eaa2:	69f9      	ldr	r1, [r7, #28]
 800eaa4:	f04f 0200 	mov.w	r2, #0
 800eaa8:	f04f 0300 	mov.w	r3, #0
 800eaac:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800eab0:	69fb      	ldr	r3, [r7, #28]
 800eab2:	3354      	adds	r3, #84	; 0x54
 800eab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eab8:	2100      	movs	r1, #0
 800eaba:	4618      	mov	r0, r3
 800eabc:	f7fc fd54 	bl	800b568 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800eac0:	7dfb      	ldrb	r3, [r7, #23]
 800eac2:	f003 0320 	and.w	r3, r3, #32
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	f000 808b 	beq.w	800ebe2 <f_open+0x566>
 800eacc:	69fb      	ldr	r3, [r7, #28]
 800eace:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ead2:	4313      	orrs	r3, r2
 800ead4:	f000 8085 	beq.w	800ebe2 <f_open+0x566>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ead8:	69fb      	ldr	r3, [r7, #28]
 800eada:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800eade:	69f9      	ldr	r1, [r7, #28]
 800eae0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800eae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae6:	895b      	ldrh	r3, [r3, #10]
 800eae8:	025b      	lsls	r3, r3, #9
 800eaea:	67fb      	str	r3, [r7, #124]	; 0x7c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800eaec:	69fb      	ldr	r3, [r7, #28]
 800eaee:	689b      	ldr	r3, [r3, #8]
 800eaf0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800eaf4:	69fb      	ldr	r3, [r7, #28]
 800eaf6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800eafa:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 800eafe:	e026      	b.n	800eb4e <f_open+0x4d2>
					clst = get_fat(&fp->obj, clst);
 800eb00:	69fb      	ldr	r3, [r7, #28]
 800eb02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800eb06:	4618      	mov	r0, r3
 800eb08:	f7fc fff8 	bl	800bafc <get_fat>
 800eb0c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
					if (clst <= 1) res = FR_INT_ERR;
 800eb10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800eb14:	2b01      	cmp	r3, #1
 800eb16:	d802      	bhi.n	800eb1e <f_open+0x4a2>
 800eb18:	2302      	movs	r3, #2
 800eb1a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800eb1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800eb22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb26:	d102      	bne.n	800eb2e <f_open+0x4b2>
 800eb28:	2301      	movs	r3, #1
 800eb2a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800eb2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eb30:	2200      	movs	r2, #0
 800eb32:	469a      	mov	sl, r3
 800eb34:	4693      	mov	fp, r2
 800eb36:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800eb3a:	ebb2 010a 	subs.w	r1, r2, sl
 800eb3e:	6039      	str	r1, [r7, #0]
 800eb40:	eb63 030b 	sbc.w	r3, r3, fp
 800eb44:	607b      	str	r3, [r7, #4]
 800eb46:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb4a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 800eb4e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d109      	bne.n	800eb6a <f_open+0x4ee>
 800eb56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eb58:	2200      	movs	r2, #0
 800eb5a:	4698      	mov	r8, r3
 800eb5c:	4691      	mov	r9, r2
 800eb5e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800eb62:	4590      	cmp	r8, r2
 800eb64:	eb79 0303 	sbcs.w	r3, r9, r3
 800eb68:	d3ca      	bcc.n	800eb00 <f_open+0x484>
				}
				fp->clust = clst;
 800eb6a:	69fb      	ldr	r3, [r7, #28]
 800eb6c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800eb70:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800eb72:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d133      	bne.n	800ebe2 <f_open+0x566>
 800eb7a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800eb7e:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800eb82:	2500      	movs	r5, #0
 800eb84:	ea54 0305 	orrs.w	r3, r4, r5
 800eb88:	d02b      	beq.n	800ebe2 <f_open+0x566>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800eb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb8c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800eb90:	4618      	mov	r0, r3
 800eb92:	f7fc ff93 	bl	800babc <clust2sect>
 800eb96:	67b8      	str	r0, [r7, #120]	; 0x78
 800eb98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d103      	bne.n	800eba6 <f_open+0x52a>
						res = FR_INT_ERR;
 800eb9e:	2302      	movs	r3, #2
 800eba0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800eba4:	e01d      	b.n	800ebe2 <f_open+0x566>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800eba6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800ebaa:	f04f 0200 	mov.w	r2, #0
 800ebae:	f04f 0300 	mov.w	r3, #0
 800ebb2:	0a42      	lsrs	r2, r0, #9
 800ebb4:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800ebb8:	0a4b      	lsrs	r3, r1, #9
 800ebba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ebbc:	441a      	add	r2, r3
 800ebbe:	69fb      	ldr	r3, [r7, #28]
 800ebc0:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ebc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebc4:	7858      	ldrb	r0, [r3, #1]
 800ebc6:	69fb      	ldr	r3, [r7, #28]
 800ebc8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800ebcc:	69fb      	ldr	r3, [r7, #28]
 800ebce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	f7fc fa65 	bl	800b0a0 <disk_read>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d002      	beq.n	800ebe2 <f_open+0x566>
 800ebdc:	2301      	movs	r3, #1
 800ebde:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ebe2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d002      	beq.n	800ebf0 <f_open+0x574>
 800ebea:	69fb      	ldr	r3, [r7, #28]
 800ebec:	2200      	movs	r2, #0
 800ebee:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ebf0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	3798      	adds	r7, #152	; 0x98
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ebfe <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ebfe:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ec02:	b08c      	sub	sp, #48	; 0x30
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	60f8      	str	r0, [r7, #12]
 800ec08:	60b9      	str	r1, [r7, #8]
 800ec0a:	607a      	str	r2, [r7, #4]
 800ec0c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ec0e:	68bb      	ldr	r3, [r7, #8]
 800ec10:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	2200      	movs	r2, #0
 800ec16:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	f107 0210 	add.w	r2, r7, #16
 800ec1e:	4611      	mov	r1, r2
 800ec20:	4618      	mov	r0, r3
 800ec22:	f7ff fcaf 	bl	800e584 <validate>
 800ec26:	4603      	mov	r3, r0
 800ec28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ec2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d108      	bne.n	800ec46 <f_write+0x48>
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ec3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ec3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d002      	beq.n	800ec4c <f_write+0x4e>
 800ec46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec4a:	e187      	b.n	800ef5c <f_write+0x35e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ec52:	f003 0302 	and.w	r3, r3, #2
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d101      	bne.n	800ec5e <f_write+0x60>
 800ec5a:	2307      	movs	r3, #7
 800ec5c:	e17e      	b.n	800ef5c <f_write+0x35e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ec5e:	693b      	ldr	r3, [r7, #16]
 800ec60:	781b      	ldrb	r3, [r3, #0]
 800ec62:	2b04      	cmp	r3, #4
 800ec64:	f000 816a 	beq.w	800ef3c <f_write+0x33e>
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	18d1      	adds	r1, r2, r3
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ec78:	4613      	mov	r3, r2
 800ec7a:	4299      	cmp	r1, r3
 800ec7c:	f080 815e 	bcs.w	800ef3c <f_write+0x33e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ec86:	4613      	mov	r3, r2
 800ec88:	43db      	mvns	r3, r3
 800ec8a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ec8c:	e156      	b.n	800ef3c <f_write+0x33e>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ec94:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800ec98:	2500      	movs	r5, #0
 800ec9a:	ea54 0305 	orrs.w	r3, r4, r5
 800ec9e:	f040 80fb 	bne.w	800ee98 <f_write+0x29a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800eca8:	f04f 0200 	mov.w	r2, #0
 800ecac:	f04f 0300 	mov.w	r3, #0
 800ecb0:	0a42      	lsrs	r2, r0, #9
 800ecb2:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800ecb6:	0a4b      	lsrs	r3, r1, #9
 800ecb8:	693b      	ldr	r3, [r7, #16]
 800ecba:	895b      	ldrh	r3, [r3, #10]
 800ecbc:	3b01      	subs	r3, #1
 800ecbe:	4013      	ands	r3, r2
 800ecc0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ecc2:	69bb      	ldr	r3, [r7, #24]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d146      	bne.n	800ed56 <f_write+0x158>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ecce:	4313      	orrs	r3, r2
 800ecd0:	d10c      	bne.n	800ecec <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	689b      	ldr	r3, [r3, #8]
 800ecd6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ecd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d11a      	bne.n	800ed14 <f_write+0x116>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	2100      	movs	r1, #0
 800ece2:	4618      	mov	r0, r3
 800ece4:	f7fd fb0e 	bl	800c304 <create_chain>
 800ece8:	62b8      	str	r0, [r7, #40]	; 0x28
 800ecea:	e013      	b.n	800ed14 <f_write+0x116>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d007      	beq.n	800ed04 <f_write+0x106>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ecfa:	68f8      	ldr	r0, [r7, #12]
 800ecfc:	f7fd fc03 	bl	800c506 <clmt_clust>
 800ed00:	62b8      	str	r0, [r7, #40]	; 0x28
 800ed02:	e007      	b.n	800ed14 <f_write+0x116>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ed04:	68fa      	ldr	r2, [r7, #12]
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed0a:	4619      	mov	r1, r3
 800ed0c:	4610      	mov	r0, r2
 800ed0e:	f7fd faf9 	bl	800c304 <create_chain>
 800ed12:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ed14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	f000 8115 	beq.w	800ef46 <f_write+0x348>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ed1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed1e:	2b01      	cmp	r3, #1
 800ed20:	d105      	bne.n	800ed2e <f_write+0x130>
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	2202      	movs	r2, #2
 800ed26:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ed2a:	2302      	movs	r3, #2
 800ed2c:	e116      	b.n	800ef5c <f_write+0x35e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ed2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed34:	d105      	bne.n	800ed42 <f_write+0x144>
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	2201      	movs	r2, #1
 800ed3a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ed3e:	2301      	movs	r3, #1
 800ed40:	e10c      	b.n	800ef5c <f_write+0x35e>
				fp->clust = clst;			/* Update current cluster */
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed46:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	689b      	ldr	r3, [r3, #8]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d102      	bne.n	800ed56 <f_write+0x158>
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed54:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ed5c:	b25b      	sxtb	r3, r3
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	da1b      	bge.n	800ed9a <f_write+0x19c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	7858      	ldrb	r0, [r3, #1]
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed70:	2301      	movs	r3, #1
 800ed72:	f7fc f9b5 	bl	800b0e0 <disk_write>
 800ed76:	4603      	mov	r3, r0
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d005      	beq.n	800ed88 <f_write+0x18a>
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	2201      	movs	r2, #1
 800ed80:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ed84:	2301      	movs	r3, #1
 800ed86:	e0e9      	b.n	800ef5c <f_write+0x35e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ed8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed92:	b2da      	uxtb	r2, r3
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ed9a:	693a      	ldr	r2, [r7, #16]
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eda0:	4619      	mov	r1, r3
 800eda2:	4610      	mov	r0, r2
 800eda4:	f7fc fe8a 	bl	800babc <clust2sect>
 800eda8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800edaa:	697b      	ldr	r3, [r7, #20]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d105      	bne.n	800edbc <f_write+0x1be>
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	2202      	movs	r2, #2
 800edb4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800edb8:	2302      	movs	r3, #2
 800edba:	e0cf      	b.n	800ef5c <f_write+0x35e>
			sect += csect;
 800edbc:	697a      	ldr	r2, [r7, #20]
 800edbe:	69bb      	ldr	r3, [r7, #24]
 800edc0:	4413      	add	r3, r2
 800edc2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	0a5b      	lsrs	r3, r3, #9
 800edc8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800edca:	6a3b      	ldr	r3, [r7, #32]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d03f      	beq.n	800ee50 <f_write+0x252>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800edd0:	69ba      	ldr	r2, [r7, #24]
 800edd2:	6a3b      	ldr	r3, [r7, #32]
 800edd4:	4413      	add	r3, r2
 800edd6:	693a      	ldr	r2, [r7, #16]
 800edd8:	8952      	ldrh	r2, [r2, #10]
 800edda:	4293      	cmp	r3, r2
 800eddc:	d905      	bls.n	800edea <f_write+0x1ec>
					cc = fs->csize - csect;
 800edde:	693b      	ldr	r3, [r7, #16]
 800ede0:	895b      	ldrh	r3, [r3, #10]
 800ede2:	461a      	mov	r2, r3
 800ede4:	69bb      	ldr	r3, [r7, #24]
 800ede6:	1ad3      	subs	r3, r2, r3
 800ede8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800edea:	693b      	ldr	r3, [r7, #16]
 800edec:	7858      	ldrb	r0, [r3, #1]
 800edee:	6a3b      	ldr	r3, [r7, #32]
 800edf0:	697a      	ldr	r2, [r7, #20]
 800edf2:	69f9      	ldr	r1, [r7, #28]
 800edf4:	f7fc f974 	bl	800b0e0 <disk_write>
 800edf8:	4603      	mov	r3, r0
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d005      	beq.n	800ee0a <f_write+0x20c>
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	2201      	movs	r2, #1
 800ee02:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ee06:	2301      	movs	r3, #1
 800ee08:	e0a8      	b.n	800ef5c <f_write+0x35e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee0e:	697b      	ldr	r3, [r7, #20]
 800ee10:	1ad3      	subs	r3, r2, r3
 800ee12:	6a3a      	ldr	r2, [r7, #32]
 800ee14:	429a      	cmp	r2, r3
 800ee16:	d917      	bls.n	800ee48 <f_write+0x24a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee22:	697b      	ldr	r3, [r7, #20]
 800ee24:	1ad3      	subs	r3, r2, r3
 800ee26:	025b      	lsls	r3, r3, #9
 800ee28:	69fa      	ldr	r2, [r7, #28]
 800ee2a:	4413      	add	r3, r2
 800ee2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ee30:	4619      	mov	r1, r3
 800ee32:	f7fc fb78 	bl	800b526 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ee3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee40:	b2da      	uxtb	r2, r3
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ee48:	6a3b      	ldr	r3, [r7, #32]
 800ee4a:	025b      	lsls	r3, r3, #9
 800ee4c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ee4e:	e04a      	b.n	800eee6 <f_write+0x2e8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee54:	697a      	ldr	r2, [r7, #20]
 800ee56:	429a      	cmp	r2, r3
 800ee58:	d01b      	beq.n	800ee92 <f_write+0x294>
				fp->fptr < fp->obj.objsize &&
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ee66:	4290      	cmp	r0, r2
 800ee68:	eb71 0303 	sbcs.w	r3, r1, r3
 800ee6c:	d211      	bcs.n	800ee92 <f_write+0x294>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ee6e:	693b      	ldr	r3, [r7, #16]
 800ee70:	7858      	ldrb	r0, [r3, #1]
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800ee78:	2301      	movs	r3, #1
 800ee7a:	697a      	ldr	r2, [r7, #20]
 800ee7c:	f7fc f910 	bl	800b0a0 <disk_read>
 800ee80:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d005      	beq.n	800ee92 <f_write+0x294>
					ABORT(fs, FR_DISK_ERR);
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	2201      	movs	r2, #1
 800ee8a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ee8e:	2301      	movs	r3, #1
 800ee90:	e064      	b.n	800ef5c <f_write+0x35e>
			}
#endif
			fp->sect = sect;
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	697a      	ldr	r2, [r7, #20]
 800ee96:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ee9e:	4613      	mov	r3, r2
 800eea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eea4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800eea8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800eeaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	429a      	cmp	r2, r3
 800eeb0:	d901      	bls.n	800eeb6 <f_write+0x2b8>
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800eec2:	4613      	mov	r3, r2
 800eec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eec8:	440b      	add	r3, r1
 800eeca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eecc:	69f9      	ldr	r1, [r7, #28]
 800eece:	4618      	mov	r0, r3
 800eed0:	f7fc fb29 	bl	800b526 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eeda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800eede:	b2da      	uxtb	r2, r3
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800eee6:	69fa      	ldr	r2, [r7, #28]
 800eee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeea:	4413      	add	r3, r2
 800eeec:	61fb      	str	r3, [r7, #28]
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800eef4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eef6:	2000      	movs	r0, #0
 800eef8:	4688      	mov	r8, r1
 800eefa:	4681      	mov	r9, r0
 800eefc:	eb12 0a08 	adds.w	sl, r2, r8
 800ef00:	eb43 0b09 	adc.w	fp, r3, r9
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ef10:	68f9      	ldr	r1, [r7, #12]
 800ef12:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
 800ef16:	4282      	cmp	r2, r0
 800ef18:	eb73 0c01 	sbcs.w	ip, r3, r1
 800ef1c:	d201      	bcs.n	800ef22 <f_write+0x324>
 800ef1e:	4602      	mov	r2, r0
 800ef20:	460b      	mov	r3, r1
 800ef22:	68f9      	ldr	r1, [r7, #12]
 800ef24:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	681a      	ldr	r2, [r3, #0]
 800ef2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef2e:	441a      	add	r2, r3
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	601a      	str	r2, [r3, #0]
 800ef34:	687a      	ldr	r2, [r7, #4]
 800ef36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef38:	1ad3      	subs	r3, r2, r3
 800ef3a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	f47f aea5 	bne.w	800ec8e <f_write+0x90>
 800ef44:	e000      	b.n	800ef48 <f_write+0x34a>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ef46:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ef4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef52:	b2da      	uxtb	r2, r3
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 800ef5a:	2300      	movs	r3, #0
}
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	3730      	adds	r7, #48	; 0x30
 800ef60:	46bd      	mov	sp, r7
 800ef62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ef66 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ef66:	b580      	push	{r7, lr}
 800ef68:	b09a      	sub	sp, #104	; 0x68
 800ef6a:	af00      	add	r7, sp, #0
 800ef6c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ef74:	4611      	mov	r1, r2
 800ef76:	4618      	mov	r0, r3
 800ef78:	f7ff fb04 	bl	800e584 <validate>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800ef82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	f040 8105 	bne.w	800f196 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ef92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	f000 80fd 	beq.w	800f196 <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800efa2:	b25b      	sxtb	r3, r3
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	da17      	bge.n	800efd8 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800efa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800efaa:	7858      	ldrb	r0, [r3, #1]
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800efb6:	2301      	movs	r3, #1
 800efb8:	f7fc f892 	bl	800b0e0 <disk_write>
 800efbc:	4603      	mov	r3, r0
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d001      	beq.n	800efc6 <f_sync+0x60>
 800efc2:	2301      	movs	r3, #1
 800efc4:	e0e9      	b.n	800f19a <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800efcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800efd0:	b2da      	uxtb	r2, r3
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800efd8:	f7f9 fa44 	bl	8008464 <get_fattime>
 800efdc:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800efde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800efe0:	781b      	ldrb	r3, [r3, #0]
 800efe2:	2b04      	cmp	r3, #4
 800efe4:	f040 808c 	bne.w	800f100 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	4618      	mov	r0, r3
 800efec:	f7fd f876 	bl	800c0dc <fill_first_frag>
 800eff0:	4603      	mov	r3, r0
 800eff2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800eff6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800effa:	2b00      	cmp	r3, #0
 800effc:	d10a      	bne.n	800f014 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800effe:	6878      	ldr	r0, [r7, #4]
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f004:	f04f 32ff 	mov.w	r2, #4294967295
 800f008:	4619      	mov	r1, r3
 800f00a:	f7fd f896 	bl	800c13a <fill_last_frag>
 800f00e:	4603      	mov	r3, r0
 800f010:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 800f014:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f018:	2b00      	cmp	r3, #0
 800f01a:	f040 80bc 	bne.w	800f196 <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800f01e:	687a      	ldr	r2, [r7, #4]
 800f020:	f107 0308 	add.w	r3, r7, #8
 800f024:	4611      	mov	r1, r2
 800f026:	4618      	mov	r0, r3
 800f028:	f7fd ffb8 	bl	800cf9c <load_obj_dir>
 800f02c:	4603      	mov	r3, r0
 800f02e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 800f032:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f036:	2b00      	cmp	r3, #0
 800f038:	f040 80ad 	bne.w	800f196 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800f03c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f03e:	691b      	ldr	r3, [r3, #16]
 800f040:	3304      	adds	r3, #4
 800f042:	781a      	ldrb	r2, [r3, #0]
 800f044:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f046:	691b      	ldr	r3, [r3, #16]
 800f048:	3304      	adds	r3, #4
 800f04a:	f042 0220 	orr.w	r2, r2, #32
 800f04e:	b2d2      	uxtb	r2, r2
 800f050:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	79da      	ldrb	r2, [r3, #7]
 800f056:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f058:	691b      	ldr	r3, [r3, #16]
 800f05a:	3321      	adds	r3, #33	; 0x21
 800f05c:	f042 0201 	orr.w	r2, r2, #1
 800f060:	b2d2      	uxtb	r2, r2
 800f062:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800f064:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f066:	691b      	ldr	r3, [r3, #16]
 800f068:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	689b      	ldr	r3, [r3, #8]
 800f070:	4619      	mov	r1, r3
 800f072:	4610      	mov	r0, r2
 800f074:	f7fc f9a3 	bl	800b3be <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800f078:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f07a:	691b      	ldr	r3, [r3, #16]
 800f07c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f086:	4608      	mov	r0, r1
 800f088:	f7fc f9c5 	bl	800b416 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800f08c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f08e:	691b      	ldr	r3, [r3, #16]
 800f090:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f09a:	4608      	mov	r0, r1
 800f09c:	f7fc f9bb 	bl	800b416 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800f0a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0a2:	691b      	ldr	r3, [r3, #16]
 800f0a4:	330c      	adds	r3, #12
 800f0a6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f7fc f988 	bl	800b3be <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800f0ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0b0:	691b      	ldr	r3, [r3, #16]
 800f0b2:	3315      	adds	r3, #21
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800f0b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0ba:	691b      	ldr	r3, [r3, #16]
 800f0bc:	3310      	adds	r3, #16
 800f0be:	2100      	movs	r1, #0
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	f7fc f97c 	bl	800b3be <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800f0c6:	f107 0308 	add.w	r3, r7, #8
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f7fd ff9c 	bl	800d008 <store_xdir>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800f0d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d15b      	bne.n	800f196 <f_sync+0x230>
							res = sync_fs(fs);
 800f0de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	f7fc fc7d 	bl	800b9e0 <sync_fs>
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f0f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f0f6:	b2da      	uxtb	r2, r3
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800f0fe:	e04a      	b.n	800f196 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f100:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f106:	4619      	mov	r1, r3
 800f108:	4610      	mov	r0, r2
 800f10a:	f7fc fc3b 	bl	800b984 <move_window>
 800f10e:	4603      	mov	r3, r0
 800f110:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800f114:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d13c      	bne.n	800f196 <f_sync+0x230>
					dir = fp->dir_ptr;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f120:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f124:	330b      	adds	r3, #11
 800f126:	781a      	ldrb	r2, [r3, #0]
 800f128:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f12a:	330b      	adds	r3, #11
 800f12c:	f042 0220 	orr.w	r2, r2, #32
 800f130:	b2d2      	uxtb	r2, r2
 800f132:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	6818      	ldr	r0, [r3, #0]
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	689b      	ldr	r3, [r3, #8]
 800f13c:	461a      	mov	r2, r3
 800f13e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f140:	f7fd fbfb 	bl	800c93a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f144:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f146:	f103 001c 	add.w	r0, r3, #28
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f150:	4613      	mov	r3, r2
 800f152:	4619      	mov	r1, r3
 800f154:	f7fc f933 	bl	800b3be <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f15a:	3316      	adds	r3, #22
 800f15c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f15e:	4618      	mov	r0, r3
 800f160:	f7fc f92d 	bl	800b3be <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f164:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f166:	3312      	adds	r3, #18
 800f168:	2100      	movs	r1, #0
 800f16a:	4618      	mov	r0, r3
 800f16c:	f7fc f90c 	bl	800b388 <st_word>
					fs->wflag = 1;
 800f170:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f172:	2201      	movs	r2, #1
 800f174:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f176:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f178:	4618      	mov	r0, r3
 800f17a:	f7fc fc31 	bl	800b9e0 <sync_fs>
 800f17e:	4603      	mov	r3, r0
 800f180:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f18a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f18e:	b2da      	uxtb	r2, r3
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f196:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	3768      	adds	r7, #104	; 0x68
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd80      	pop	{r7, pc}

0800f1a2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f1a2:	b580      	push	{r7, lr}
 800f1a4:	b084      	sub	sp, #16
 800f1a6:	af00      	add	r7, sp, #0
 800f1a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f1aa:	6878      	ldr	r0, [r7, #4]
 800f1ac:	f7ff fedb 	bl	800ef66 <f_sync>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f1b4:	7bfb      	ldrb	r3, [r7, #15]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d118      	bne.n	800f1ec <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f107 0208 	add.w	r2, r7, #8
 800f1c0:	4611      	mov	r1, r2
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f7ff f9de 	bl	800e584 <validate>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f1cc:	7bfb      	ldrb	r3, [r7, #15]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d10c      	bne.n	800f1ec <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f7fc fb30 	bl	800b83c <dec_lock>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f1e0:	7bfb      	ldrb	r3, [r7, #15]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d102      	bne.n	800f1ec <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f1ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3710      	adds	r7, #16
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}

0800f1f6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800f1f6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f1fa:	b0b6      	sub	sp, #216	; 0xd8
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800f202:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800f206:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f20a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800f20e:	4619      	mov	r1, r3
 800f210:	4610      	mov	r0, r2
 800f212:	f7ff f9b7 	bl	800e584 <validate>
 800f216:	4603      	mov	r3, r0
 800f218:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	if (res == FR_OK) res = (FRESULT)fp->err;
 800f21c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800f220:	2b00      	cmp	r3, #0
 800f222:	d105      	bne.n	800f230 <f_lseek+0x3a>
 800f224:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f228:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f22c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 800f230:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800f234:	2b00      	cmp	r3, #0
 800f236:	d111      	bne.n	800f25c <f_lseek+0x66>
 800f238:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f23c:	781b      	ldrb	r3, [r3, #0]
 800f23e:	2b04      	cmp	r3, #4
 800f240:	d10c      	bne.n	800f25c <f_lseek+0x66>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800f242:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800f246:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f24a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f24c:	f04f 32ff 	mov.w	r2, #4294967295
 800f250:	4619      	mov	r1, r3
 800f252:	f7fc ff72 	bl	800c13a <fill_last_frag>
 800f256:	4603      	mov	r3, r0
 800f258:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800f25c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800f260:	2b00      	cmp	r3, #0
 800f262:	d002      	beq.n	800f26a <f_lseek+0x74>
 800f264:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800f268:	e38c      	b.n	800f984 <f_lseek+0x78e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800f26a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f26e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f270:	2b00      	cmp	r3, #0
 800f272:	f000 8141 	beq.w	800f4f8 <f_lseek+0x302>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800f276:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800f27a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f27e:	bf08      	it	eq
 800f280:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800f284:	f040 8087 	bne.w	800f396 <f_lseek+0x1a0>
			tbl = fp->cltbl;
 800f288:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f28c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f28e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f292:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f296:	1d1a      	adds	r2, r3, #4
 800f298:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f2a2:	2302      	movs	r3, #2
 800f2a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			cl = fp->obj.sclust;		/* Origin of the chain */
 800f2a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f2ac:	689b      	ldr	r3, [r3, #8]
 800f2ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
			if (cl) {
 800f2b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d058      	beq.n	800f36c <f_lseek+0x176>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f2ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f2be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f2c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f2cc:	3302      	adds	r3, #2
 800f2ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
					do {
						pcl = cl; ncl++;
 800f2d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f2d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f2da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800f2de:	3301      	adds	r3, #1
 800f2e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
						cl = get_fat(&fp->obj, cl);
 800f2e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f2e8:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	f7fc fc05 	bl	800bafc <get_fat>
 800f2f2:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f2f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f2fa:	2b01      	cmp	r3, #1
 800f2fc:	d806      	bhi.n	800f30c <f_lseek+0x116>
 800f2fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f302:	2202      	movs	r2, #2
 800f304:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800f308:	2302      	movs	r3, #2
 800f30a:	e33b      	b.n	800f984 <f_lseek+0x78e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f30c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f310:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f314:	d106      	bne.n	800f324 <f_lseek+0x12e>
 800f316:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f31a:	2201      	movs	r2, #1
 800f31c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800f320:	2301      	movs	r3, #1
 800f322:	e32f      	b.n	800f984 <f_lseek+0x78e>
					} while (cl == pcl + 1);
 800f324:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f328:	3301      	adds	r3, #1
 800f32a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800f32e:	429a      	cmp	r2, r3
 800f330:	d0cf      	beq.n	800f2d2 <f_lseek+0xdc>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f332:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800f336:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f33a:	429a      	cmp	r2, r3
 800f33c:	d80f      	bhi.n	800f35e <f_lseek+0x168>
						*tbl++ = ncl; *tbl++ = tcl;
 800f33e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f342:	1d1a      	adds	r2, r3, #4
 800f344:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800f348:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f34c:	601a      	str	r2, [r3, #0]
 800f34e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f352:	1d1a      	adds	r2, r3, #4
 800f354:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800f358:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800f35c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f35e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f362:	69db      	ldr	r3, [r3, #28]
 800f364:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800f368:	429a      	cmp	r2, r3
 800f36a:	d3a6      	bcc.n	800f2ba <f_lseek+0xc4>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800f36c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f372:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800f376:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800f378:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800f37c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f380:	429a      	cmp	r2, r3
 800f382:	d804      	bhi.n	800f38e <f_lseek+0x198>
				*tbl = 0;		/* Terminate table */
 800f384:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f388:	2200      	movs	r2, #0
 800f38a:	601a      	str	r2, [r3, #0]
 800f38c:	e2f8      	b.n	800f980 <f_lseek+0x78a>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f38e:	2311      	movs	r3, #17
 800f390:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800f394:	e2f4      	b.n	800f980 <f_lseek+0x78a>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800f396:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f39a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800f39e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800f3a2:	4290      	cmp	r0, r2
 800f3a4:	eb71 0303 	sbcs.w	r3, r1, r3
 800f3a8:	d205      	bcs.n	800f3b6 <f_lseek+0x1c0>
 800f3aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f3ae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f3b2:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			fp->fptr = ofs;				/* Set file pointer */
 800f3b6:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800f3ba:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800f3be:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			if (ofs) {
 800f3c2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800f3c6:	4313      	orrs	r3, r2
 800f3c8:	f000 82da 	beq.w	800f980 <f_lseek+0x78a>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f3cc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800f3d0:	f112 3aff 	adds.w	sl, r2, #4294967295
 800f3d4:	f143 3bff 	adc.w	fp, r3, #4294967295
 800f3d8:	4652      	mov	r2, sl
 800f3da:	465b      	mov	r3, fp
 800f3dc:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800f3e0:	f7fd f891 	bl	800c506 <clmt_clust>
 800f3e4:	4602      	mov	r2, r0
 800f3e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f3ea:	641a      	str	r2, [r3, #64]	; 0x40
				dsc = clust2sect(fs, fp->clust);
 800f3ec:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f3f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f3f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3f6:	4619      	mov	r1, r3
 800f3f8:	4610      	mov	r0, r2
 800f3fa:	f7fc fb5f 	bl	800babc <clust2sect>
 800f3fe:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f402:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f406:	2b00      	cmp	r3, #0
 800f408:	d106      	bne.n	800f418 <f_lseek+0x222>
 800f40a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f40e:	2202      	movs	r2, #2
 800f410:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800f414:	2302      	movs	r3, #2
 800f416:	e2b5      	b.n	800f984 <f_lseek+0x78e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f418:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800f41c:	1e54      	subs	r4, r2, #1
 800f41e:	f143 35ff 	adc.w	r5, r3, #4294967295
 800f422:	f04f 0200 	mov.w	r2, #0
 800f426:	f04f 0300 	mov.w	r3, #0
 800f42a:	0a62      	lsrs	r2, r4, #9
 800f42c:	ea42 52c5 	orr.w	r2, r2, r5, lsl #23
 800f430:	0a6b      	lsrs	r3, r5, #9
 800f432:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f436:	895b      	ldrh	r3, [r3, #10]
 800f438:	3b01      	subs	r3, #1
 800f43a:	4013      	ands	r3, r2
 800f43c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f440:	4413      	add	r3, r2
 800f442:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f446:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f44a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f44e:	f3c2 0808 	ubfx	r8, r2, #0, #9
 800f452:	f04f 0900 	mov.w	r9, #0
 800f456:	ea58 0309 	orrs.w	r3, r8, r9
 800f45a:	f000 8291 	beq.w	800f980 <f_lseek+0x78a>
 800f45e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f464:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f468:	429a      	cmp	r2, r3
 800f46a:	f000 8289 	beq.w	800f980 <f_lseek+0x78a>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f46e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f472:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f476:	b25b      	sxtb	r3, r3
 800f478:	2b00      	cmp	r3, #0
 800f47a:	da21      	bge.n	800f4c0 <f_lseek+0x2ca>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f47c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f480:	7858      	ldrb	r0, [r3, #1]
 800f482:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f486:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800f48a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f48e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f490:	2301      	movs	r3, #1
 800f492:	f7fb fe25 	bl	800b0e0 <disk_write>
 800f496:	4603      	mov	r3, r0
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d006      	beq.n	800f4aa <f_lseek+0x2b4>
 800f49c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f4a0:	2201      	movs	r2, #1
 800f4a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800f4a6:	2301      	movs	r3, #1
 800f4a8:	e26c      	b.n	800f984 <f_lseek+0x78e>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f4aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f4ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f4b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f4b6:	b2da      	uxtb	r2, r3
 800f4b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f4bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f4c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f4c4:	7858      	ldrb	r0, [r3, #1]
 800f4c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f4ca:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800f4ce:	2301      	movs	r3, #1
 800f4d0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f4d4:	f7fb fde4 	bl	800b0a0 <disk_read>
 800f4d8:	4603      	mov	r3, r0
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d006      	beq.n	800f4ec <f_lseek+0x2f6>
 800f4de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f4e2:	2201      	movs	r2, #1
 800f4e4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800f4e8:	2301      	movs	r3, #1
 800f4ea:	e24b      	b.n	800f984 <f_lseek+0x78e>
#endif
					fp->sect = dsc;
 800f4ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f4f0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f4f4:	645a      	str	r2, [r3, #68]	; 0x44
 800f4f6:	e243      	b.n	800f980 <f_lseek+0x78a>
#endif

	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 800f4f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f4fc:	781b      	ldrb	r3, [r3, #0]
 800f4fe:	2b04      	cmp	r3, #4
 800f500:	d009      	beq.n	800f516 <f_lseek+0x320>
 800f502:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800f506:	2b01      	cmp	r3, #1
 800f508:	d305      	bcc.n	800f516 <f_lseek+0x320>
 800f50a:	f04f 32ff 	mov.w	r2, #4294967295
 800f50e:	f04f 0300 	mov.w	r3, #0
 800f512:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f516:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f51a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800f51e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800f522:	4290      	cmp	r0, r2
 800f524:	eb71 0303 	sbcs.w	r3, r1, r3
 800f528:	d20d      	bcs.n	800f546 <f_lseek+0x350>
 800f52a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f52e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f532:	f003 0302 	and.w	r3, r3, #2
 800f536:	2b00      	cmp	r3, #0
 800f538:	d105      	bne.n	800f546 <f_lseek+0x350>
			ofs = fp->obj.objsize;
 800f53a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f53e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f542:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		}
		ifptr = fp->fptr;
 800f546:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f54a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f54e:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
		fp->fptr = nsect = 0;
 800f552:	2300      	movs	r3, #0
 800f554:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f558:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800f55c:	f04f 0200 	mov.w	r2, #0
 800f560:	f04f 0300 	mov.w	r3, #0
 800f564:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		if (ofs) {
 800f568:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800f56c:	4313      	orrs	r3, r2
 800f56e:	f000 818f 	beq.w	800f890 <f_lseek+0x69a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f572:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f576:	895b      	ldrh	r3, [r3, #10]
 800f578:	025b      	lsls	r3, r3, #9
 800f57a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			if (ifptr > 0 &&
 800f57e:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800f582:	4313      	orrs	r3, r2
 800f584:	d06b      	beq.n	800f65e <f_lseek+0x468>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f586:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800f58a:	1e51      	subs	r1, r2, #1
 800f58c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800f590:	f143 33ff 	adc.w	r3, r3, #4294967295
 800f594:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f598:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f59c:	2200      	movs	r2, #0
 800f59e:	67bb      	str	r3, [r7, #120]	; 0x78
 800f5a0:	67fa      	str	r2, [r7, #124]	; 0x7c
 800f5a2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800f5a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800f5aa:	f7f0 fe79 	bl	80002a0 <__aeabi_uldivmod>
 800f5ae:	4602      	mov	r2, r0
 800f5b0:	460b      	mov	r3, r1
 800f5b2:	4614      	mov	r4, r2
 800f5b4:	461d      	mov	r5, r3
 800f5b6:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800f5ba:	1e51      	subs	r1, r2, #1
 800f5bc:	6739      	str	r1, [r7, #112]	; 0x70
 800f5be:	f143 33ff 	adc.w	r3, r3, #4294967295
 800f5c2:	677b      	str	r3, [r7, #116]	; 0x74
 800f5c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	66bb      	str	r3, [r7, #104]	; 0x68
 800f5cc:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f5ce:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800f5d2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800f5d6:	f7f0 fe63 	bl	80002a0 <__aeabi_uldivmod>
 800f5da:	4602      	mov	r2, r0
 800f5dc:	460b      	mov	r3, r1
			if (ifptr > 0 &&
 800f5de:	4294      	cmp	r4, r2
 800f5e0:	eb75 0303 	sbcs.w	r3, r5, r3
 800f5e4:	d33b      	bcc.n	800f65e <f_lseek+0x468>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f5e6:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 800f5ea:	1e51      	subs	r1, r2, #1
 800f5ec:	6639      	str	r1, [r7, #96]	; 0x60
 800f5ee:	f143 33ff 	adc.w	r3, r3, #4294967295
 800f5f2:	667b      	str	r3, [r7, #100]	; 0x64
 800f5f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f5f8:	3b01      	subs	r3, #1
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	65bb      	str	r3, [r7, #88]	; 0x58
 800f5fe:	65fa      	str	r2, [r7, #92]	; 0x5c
 800f600:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800f604:	460b      	mov	r3, r1
 800f606:	43db      	mvns	r3, r3
 800f608:	653b      	str	r3, [r7, #80]	; 0x50
 800f60a:	4613      	mov	r3, r2
 800f60c:	43db      	mvns	r3, r3
 800f60e:	657b      	str	r3, [r7, #84]	; 0x54
 800f610:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800f614:	4623      	mov	r3, r4
 800f616:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800f61a:	4602      	mov	r2, r0
 800f61c:	4013      	ands	r3, r2
 800f61e:	64bb      	str	r3, [r7, #72]	; 0x48
 800f620:	462b      	mov	r3, r5
 800f622:	460a      	mov	r2, r1
 800f624:	4013      	ands	r3, r2
 800f626:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f628:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f62c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800f630:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				ofs -= fp->fptr;
 800f634:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f638:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800f63c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800f640:	1a14      	subs	r4, r2, r0
 800f642:	60bc      	str	r4, [r7, #8]
 800f644:	eb63 0301 	sbc.w	r3, r3, r1
 800f648:	60fb      	str	r3, [r7, #12]
 800f64a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800f64e:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
				clst = fp->clust;
 800f652:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f658:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f65c:	e031      	b.n	800f6c2 <f_lseek+0x4cc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f65e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f662:	689b      	ldr	r3, [r3, #8]
 800f664:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f668:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d123      	bne.n	800f6b8 <f_lseek+0x4c2>
					clst = create_chain(&fp->obj, 0);
 800f670:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f674:	2100      	movs	r1, #0
 800f676:	4618      	mov	r0, r3
 800f678:	f7fc fe44 	bl	800c304 <create_chain>
 800f67c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f680:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800f684:	2b01      	cmp	r3, #1
 800f686:	d106      	bne.n	800f696 <f_lseek+0x4a0>
 800f688:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f68c:	2202      	movs	r2, #2
 800f68e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800f692:	2302      	movs	r3, #2
 800f694:	e176      	b.n	800f984 <f_lseek+0x78e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f696:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800f69a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f69e:	d106      	bne.n	800f6ae <f_lseek+0x4b8>
 800f6a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f6a4:	2201      	movs	r2, #1
 800f6a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800f6aa:	2301      	movs	r3, #1
 800f6ac:	e16a      	b.n	800f984 <f_lseek+0x78e>
					fp->obj.sclust = clst;
 800f6ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f6b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800f6b6:	6093      	str	r3, [r2, #8]
				}
#endif
				fp->clust = clst;
 800f6b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f6bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800f6c0:	6413      	str	r3, [r2, #64]	; 0x40
			}
			if (clst != 0) {
 800f6c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	f000 80e2 	beq.w	800f890 <f_lseek+0x69a>
				while (ofs > bcs) {						/* Cluster following loop */
 800f6cc:	e090      	b.n	800f7f0 <f_lseek+0x5fa>
					ofs -= bcs; fp->fptr += bcs;
 800f6ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	643b      	str	r3, [r7, #64]	; 0x40
 800f6d6:	647a      	str	r2, [r7, #68]	; 0x44
 800f6d8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800f6dc:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800f6e0:	4621      	mov	r1, r4
 800f6e2:	1a51      	subs	r1, r2, r1
 800f6e4:	6039      	str	r1, [r7, #0]
 800f6e6:	4629      	mov	r1, r5
 800f6e8:	eb63 0301 	sbc.w	r3, r3, r1
 800f6ec:	607b      	str	r3, [r7, #4]
 800f6ee:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f6f2:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
 800f6f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f6fa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f6fe:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800f702:	2000      	movs	r0, #0
 800f704:	63b9      	str	r1, [r7, #56]	; 0x38
 800f706:	63f8      	str	r0, [r7, #60]	; 0x3c
 800f708:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800f70c:	4621      	mov	r1, r4
 800f70e:	1851      	adds	r1, r2, r1
 800f710:	6339      	str	r1, [r7, #48]	; 0x30
 800f712:	4629      	mov	r1, r5
 800f714:	414b      	adcs	r3, r1
 800f716:	637b      	str	r3, [r7, #52]	; 0x34
 800f718:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f71c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800f720:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f724:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f728:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f72c:	f003 0302 	and.w	r3, r3, #2
 800f730:	2b00      	cmp	r3, #0
 800f732:	d031      	beq.n	800f798 <f_lseek+0x5a2>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 800f734:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f738:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800f73c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f740:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f744:	4282      	cmp	r2, r0
 800f746:	418b      	sbcs	r3, r1
 800f748:	d212      	bcs.n	800f770 <f_lseek+0x57a>
							fp->obj.objsize = fp->fptr;
 800f74a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f74e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800f752:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f756:	e9c3 0104 	strd	r0, r1, [r3, #16]
							fp->flag |= FA_MODIFIED;
 800f75a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f75e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f766:	b2db      	uxtb	r3, r3
 800f768:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f76c:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f770:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f774:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800f778:	4618      	mov	r0, r3
 800f77a:	f7fc fdc3 	bl	800c304 <create_chain>
 800f77e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f782:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800f786:	2b00      	cmp	r3, #0
 800f788:	d10f      	bne.n	800f7aa <f_lseek+0x5b4>
							ofs = 0; break;
 800f78a:	f04f 0200 	mov.w	r2, #0
 800f78e:	f04f 0300 	mov.w	r3, #0
 800f792:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 800f796:	e03b      	b.n	800f810 <f_lseek+0x61a>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f798:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f79c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	f7fc f9ab 	bl	800bafc <get_fat>
 800f7a6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f7aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800f7ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7b2:	d106      	bne.n	800f7c2 <f_lseek+0x5cc>
 800f7b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f7b8:	2201      	movs	r2, #1
 800f7ba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800f7be:	2301      	movs	r3, #1
 800f7c0:	e0e0      	b.n	800f984 <f_lseek+0x78e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f7c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800f7c6:	2b01      	cmp	r3, #1
 800f7c8:	d906      	bls.n	800f7d8 <f_lseek+0x5e2>
 800f7ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f7ce:	69da      	ldr	r2, [r3, #28]
 800f7d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800f7d4:	4293      	cmp	r3, r2
 800f7d6:	d306      	bcc.n	800f7e6 <f_lseek+0x5f0>
 800f7d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f7dc:	2202      	movs	r2, #2
 800f7de:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800f7e2:	2302      	movs	r3, #2
 800f7e4:	e0ce      	b.n	800f984 <f_lseek+0x78e>
					fp->clust = clst;
 800f7e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f7ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800f7ee:	6413      	str	r3, [r2, #64]	; 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 800f7f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800f7f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f7fa:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800f7fe:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800f802:	4621      	mov	r1, r4
 800f804:	4291      	cmp	r1, r2
 800f806:	4629      	mov	r1, r5
 800f808:	eb71 0303 	sbcs.w	r3, r1, r3
 800f80c:	f4ff af5f 	bcc.w	800f6ce <f_lseek+0x4d8>
				}
				fp->fptr += ofs;
 800f810:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f814:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800f818:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800f81c:	1884      	adds	r4, r0, r2
 800f81e:	623c      	str	r4, [r7, #32]
 800f820:	eb41 0303 	adc.w	r3, r1, r3
 800f824:	627b      	str	r3, [r7, #36]	; 0x24
 800f826:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f82a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800f82e:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				if (ofs % SS(fs)) {
 800f832:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800f836:	f3c2 0308 	ubfx	r3, r2, #0, #9
 800f83a:	61bb      	str	r3, [r7, #24]
 800f83c:	2300      	movs	r3, #0
 800f83e:	61fb      	str	r3, [r7, #28]
 800f840:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800f844:	460b      	mov	r3, r1
 800f846:	4313      	orrs	r3, r2
 800f848:	d022      	beq.n	800f890 <f_lseek+0x69a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f84a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f84e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800f852:	4618      	mov	r0, r3
 800f854:	f7fc f932 	bl	800babc <clust2sect>
 800f858:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f85c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f860:	2b00      	cmp	r3, #0
 800f862:	d106      	bne.n	800f872 <f_lseek+0x67c>
 800f864:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f868:	2202      	movs	r2, #2
 800f86a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800f86e:	2302      	movs	r3, #2
 800f870:	e088      	b.n	800f984 <f_lseek+0x78e>
					nsect += (DWORD)(ofs / SS(fs));
 800f872:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800f876:	f04f 0200 	mov.w	r2, #0
 800f87a:	f04f 0300 	mov.w	r3, #0
 800f87e:	0a42      	lsrs	r2, r0, #9
 800f880:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800f884:	0a4b      	lsrs	r3, r1, #9
 800f886:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800f88a:	4413      	add	r3, r2
 800f88c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f890:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f894:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f898:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800f89c:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800f8a0:	4290      	cmp	r0, r2
 800f8a2:	eb71 0303 	sbcs.w	r3, r1, r3
 800f8a6:	d212      	bcs.n	800f8ce <f_lseek+0x6d8>
			fp->obj.objsize = fp->fptr;
 800f8a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f8ac:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f8b0:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800f8b4:	e9c1 2304 	strd	r2, r3, [r1, #16]
			fp->flag |= FA_MODIFIED;
 800f8b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f8bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f8c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8c4:	b2da      	uxtb	r2, r3
 800f8c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f8ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f8ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f8d2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f8d6:	f3c2 0308 	ubfx	r3, r2, #0, #9
 800f8da:	613b      	str	r3, [r7, #16]
 800f8dc:	2300      	movs	r3, #0
 800f8de:	617b      	str	r3, [r7, #20]
 800f8e0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800f8e4:	460b      	mov	r3, r1
 800f8e6:	4313      	orrs	r3, r2
 800f8e8:	d04a      	beq.n	800f980 <f_lseek+0x78a>
 800f8ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f8ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8f0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800f8f4:	429a      	cmp	r2, r3
 800f8f6:	d043      	beq.n	800f980 <f_lseek+0x78a>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f8f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f8fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f900:	b25b      	sxtb	r3, r3
 800f902:	2b00      	cmp	r3, #0
 800f904:	da21      	bge.n	800f94a <f_lseek+0x754>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f906:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f90a:	7858      	ldrb	r0, [r3, #1]
 800f90c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f910:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800f914:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f918:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f91a:	2301      	movs	r3, #1
 800f91c:	f7fb fbe0 	bl	800b0e0 <disk_write>
 800f920:	4603      	mov	r3, r0
 800f922:	2b00      	cmp	r3, #0
 800f924:	d006      	beq.n	800f934 <f_lseek+0x73e>
 800f926:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f92a:	2201      	movs	r2, #1
 800f92c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800f930:	2301      	movs	r3, #1
 800f932:	e027      	b.n	800f984 <f_lseek+0x78e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f934:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f938:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f93c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f940:	b2da      	uxtb	r2, r3
 800f942:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f946:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f94a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f94e:	7858      	ldrb	r0, [r3, #1]
 800f950:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f954:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800f958:	2301      	movs	r3, #1
 800f95a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800f95e:	f7fb fb9f 	bl	800b0a0 <disk_read>
 800f962:	4603      	mov	r3, r0
 800f964:	2b00      	cmp	r3, #0
 800f966:	d006      	beq.n	800f976 <f_lseek+0x780>
 800f968:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f96c:	2201      	movs	r2, #1
 800f96e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800f972:	2301      	movs	r3, #1
 800f974:	e006      	b.n	800f984 <f_lseek+0x78e>
#endif
			fp->sect = nsect;
 800f976:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f97a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800f97e:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}

	LEAVE_FF(fs, res);
 800f980:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800f984:	4618      	mov	r0, r3
 800f986:	37d8      	adds	r7, #216	; 0xd8
 800f988:	46bd      	mov	sp, r7
 800f98a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f98e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800f98e:	b580      	push	{r7, lr}
 800f990:	b09a      	sub	sp, #104	; 0x68
 800f992:	af00      	add	r7, sp, #0
 800f994:	60f8      	str	r0, [r7, #12]
 800f996:	60b9      	str	r1, [r7, #8]
 800f998:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800f99a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800f99e:	f107 030c 	add.w	r3, r7, #12
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	f7fe fa91 	bl	800decc <find_volume>
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800f9b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	f040 80e6 	bne.w	800fb86 <f_getfree+0x1f8>
		*fatfs = fs;				/* Return ptr to the fs object */
 800f9ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800f9c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9c2:	699a      	ldr	r2, [r3, #24]
 800f9c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9c6:	69db      	ldr	r3, [r3, #28]
 800f9c8:	3b02      	subs	r3, #2
 800f9ca:	429a      	cmp	r2, r3
 800f9cc:	d804      	bhi.n	800f9d8 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800f9ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9d0:	699a      	ldr	r2, [r3, #24]
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	601a      	str	r2, [r3, #0]
 800f9d6:	e0d6      	b.n	800fb86 <f_getfree+0x1f8>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800f9d8:	2300      	movs	r3, #0
 800f9da:	663b      	str	r3, [r7, #96]	; 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800f9dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9de:	781b      	ldrb	r3, [r3, #0]
 800f9e0:	2b01      	cmp	r3, #1
 800f9e2:	d128      	bne.n	800fa36 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800f9e4:	2302      	movs	r3, #2
 800f9e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f9e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9ea:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 800f9ec:	f107 0310 	add.w	r3, r7, #16
 800f9f0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	f7fc f882 	bl	800bafc <get_fat>
 800f9f8:	6478      	str	r0, [r7, #68]	; 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800f9fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa00:	d103      	bne.n	800fa0a <f_getfree+0x7c>
 800fa02:	2301      	movs	r3, #1
 800fa04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fa08:	e0b0      	b.n	800fb6c <f_getfree+0x1de>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800fa0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa0c:	2b01      	cmp	r3, #1
 800fa0e:	d103      	bne.n	800fa18 <f_getfree+0x8a>
 800fa10:	2302      	movs	r3, #2
 800fa12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fa16:	e0a9      	b.n	800fb6c <f_getfree+0x1de>
					if (stat == 0) nfree++;
 800fa18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d102      	bne.n	800fa24 <f_getfree+0x96>
 800fa1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa20:	3301      	adds	r3, #1
 800fa22:	663b      	str	r3, [r7, #96]	; 0x60
				} while (++clst < fs->n_fatent);
 800fa24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa26:	3301      	adds	r3, #1
 800fa28:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fa2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa2c:	69db      	ldr	r3, [r3, #28]
 800fa2e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fa30:	429a      	cmp	r2, r3
 800fa32:	d3db      	bcc.n	800f9ec <f_getfree+0x5e>
 800fa34:	e09a      	b.n	800fb6c <f_getfree+0x1de>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 800fa36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa38:	781b      	ldrb	r3, [r3, #0]
 800fa3a:	2b04      	cmp	r3, #4
 800fa3c:	d146      	bne.n	800facc <f_getfree+0x13e>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 800fa3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa40:	69db      	ldr	r3, [r3, #28]
 800fa42:	3b02      	subs	r3, #2
 800fa44:	65fb      	str	r3, [r7, #92]	; 0x5c
					sect = fs->database;
 800fa46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa4a:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0;
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	657b      	str	r3, [r7, #84]	; 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800fa50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d10d      	bne.n	800fa72 <f_getfree+0xe4>
 800fa56:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800fa58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa5a:	1c5a      	adds	r2, r3, #1
 800fa5c:	65ba      	str	r2, [r7, #88]	; 0x58
 800fa5e:	4619      	mov	r1, r3
 800fa60:	f7fb ff90 	bl	800b984 <move_window>
 800fa64:	4603      	mov	r3, r0
 800fa66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fa6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d179      	bne.n	800fb66 <f_getfree+0x1d8>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800fa72:	2308      	movs	r3, #8
 800fa74:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fa78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa7a:	4413      	add	r3, r2
 800fa7c:	3338      	adds	r3, #56	; 0x38
 800fa7e:	781b      	ldrb	r3, [r3, #0]
 800fa80:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800fa84:	e013      	b.n	800faae <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 800fa86:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fa8a:	f003 0301 	and.w	r3, r3, #1
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d102      	bne.n	800fa98 <f_getfree+0x10a>
 800fa92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa94:	3301      	adds	r3, #1
 800fa96:	663b      	str	r3, [r7, #96]	; 0x60
							bm >>= 1;
 800fa98:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fa9c:	085b      	lsrs	r3, r3, #1
 800fa9e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800faa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800faa4:	3b01      	subs	r3, #1
 800faa6:	64bb      	str	r3, [r7, #72]	; 0x48
 800faa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800faaa:	3b01      	subs	r3, #1
 800faac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800faae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d002      	beq.n	800faba <f_getfree+0x12c>
 800fab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d1e5      	bne.n	800fa86 <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 800faba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fabc:	3301      	adds	r3, #1
 800fabe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fac2:	657b      	str	r3, [r7, #84]	; 0x54
					} while (clst);
 800fac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d1c2      	bne.n	800fa50 <f_getfree+0xc2>
 800faca:	e04f      	b.n	800fb6c <f_getfree+0x1de>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800facc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800face:	69db      	ldr	r3, [r3, #28]
 800fad0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fad6:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0; p = 0;
 800fad8:	2300      	movs	r3, #0
 800fada:	657b      	str	r3, [r7, #84]	; 0x54
 800fadc:	2300      	movs	r3, #0
 800fade:	653b      	str	r3, [r7, #80]	; 0x50
					do {
						if (i == 0) {
 800fae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d113      	bne.n	800fb0e <f_getfree+0x180>
							res = move_window(fs, sect++);
 800fae6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800fae8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800faea:	1c5a      	adds	r2, r3, #1
 800faec:	65ba      	str	r2, [r7, #88]	; 0x58
 800faee:	4619      	mov	r1, r3
 800faf0:	f7fb ff48 	bl	800b984 <move_window>
 800faf4:	4603      	mov	r3, r0
 800faf6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							if (res != FR_OK) break;
 800fafa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d133      	bne.n	800fb6a <f_getfree+0x1dc>
							p = fs->win;
 800fb02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb04:	3338      	adds	r3, #56	; 0x38
 800fb06:	653b      	str	r3, [r7, #80]	; 0x50
							i = SS(fs);
 800fb08:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fb0c:	657b      	str	r3, [r7, #84]	; 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 800fb0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb10:	781b      	ldrb	r3, [r3, #0]
 800fb12:	2b02      	cmp	r3, #2
 800fb14:	d10f      	bne.n	800fb36 <f_getfree+0x1a8>
							if (ld_word(p) == 0) nfree++;
 800fb16:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800fb18:	f7fb fb20 	bl	800b15c <ld_word>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d102      	bne.n	800fb28 <f_getfree+0x19a>
 800fb22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb24:	3301      	adds	r3, #1
 800fb26:	663b      	str	r3, [r7, #96]	; 0x60
							p += 2; i -= 2;
 800fb28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb2a:	3302      	adds	r3, #2
 800fb2c:	653b      	str	r3, [r7, #80]	; 0x50
 800fb2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb30:	3b02      	subs	r3, #2
 800fb32:	657b      	str	r3, [r7, #84]	; 0x54
 800fb34:	e010      	b.n	800fb58 <f_getfree+0x1ca>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800fb36:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800fb38:	f7fb fb28 	bl	800b18c <ld_dword>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d102      	bne.n	800fb4c <f_getfree+0x1be>
 800fb46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb48:	3301      	adds	r3, #1
 800fb4a:	663b      	str	r3, [r7, #96]	; 0x60
							p += 4; i -= 4;
 800fb4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb4e:	3304      	adds	r3, #4
 800fb50:	653b      	str	r3, [r7, #80]	; 0x50
 800fb52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb54:	3b04      	subs	r3, #4
 800fb56:	657b      	str	r3, [r7, #84]	; 0x54
						}
					} while (--clst);
 800fb58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb5a:	3b01      	subs	r3, #1
 800fb5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fb5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d1bd      	bne.n	800fae0 <f_getfree+0x152>
 800fb64:	e002      	b.n	800fb6c <f_getfree+0x1de>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800fb66:	bf00      	nop
 800fb68:	e000      	b.n	800fb6c <f_getfree+0x1de>
							if (res != FR_OK) break;
 800fb6a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fb70:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800fb72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fb76:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800fb78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb7a:	791a      	ldrb	r2, [r3, #4]
 800fb7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb7e:	f042 0201 	orr.w	r2, r2, #1
 800fb82:	b2d2      	uxtb	r2, r2
 800fb84:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800fb86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	3768      	adds	r7, #104	; 0x68
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	bd80      	pop	{r7, pc}
	...

0800fb94 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fb94:	b480      	push	{r7}
 800fb96:	b087      	sub	sp, #28
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	60f8      	str	r0, [r7, #12]
 800fb9c:	60b9      	str	r1, [r7, #8]
 800fb9e:	4613      	mov	r3, r2
 800fba0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fba2:	2301      	movs	r3, #1
 800fba4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fba6:	2300      	movs	r3, #0
 800fba8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fbaa:	4b1f      	ldr	r3, [pc, #124]	; (800fc28 <FATFS_LinkDriverEx+0x94>)
 800fbac:	7e1b      	ldrb	r3, [r3, #24]
 800fbae:	b2db      	uxtb	r3, r3
 800fbb0:	2b03      	cmp	r3, #3
 800fbb2:	d831      	bhi.n	800fc18 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fbb4:	4b1c      	ldr	r3, [pc, #112]	; (800fc28 <FATFS_LinkDriverEx+0x94>)
 800fbb6:	7e1b      	ldrb	r3, [r3, #24]
 800fbb8:	b2db      	uxtb	r3, r3
 800fbba:	461a      	mov	r2, r3
 800fbbc:	4b1a      	ldr	r3, [pc, #104]	; (800fc28 <FATFS_LinkDriverEx+0x94>)
 800fbbe:	2100      	movs	r1, #0
 800fbc0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fbc2:	4b19      	ldr	r3, [pc, #100]	; (800fc28 <FATFS_LinkDriverEx+0x94>)
 800fbc4:	7e1b      	ldrb	r3, [r3, #24]
 800fbc6:	b2db      	uxtb	r3, r3
 800fbc8:	4a17      	ldr	r2, [pc, #92]	; (800fc28 <FATFS_LinkDriverEx+0x94>)
 800fbca:	009b      	lsls	r3, r3, #2
 800fbcc:	4413      	add	r3, r2
 800fbce:	68fa      	ldr	r2, [r7, #12]
 800fbd0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fbd2:	4b15      	ldr	r3, [pc, #84]	; (800fc28 <FATFS_LinkDriverEx+0x94>)
 800fbd4:	7e1b      	ldrb	r3, [r3, #24]
 800fbd6:	b2db      	uxtb	r3, r3
 800fbd8:	461a      	mov	r2, r3
 800fbda:	4b13      	ldr	r3, [pc, #76]	; (800fc28 <FATFS_LinkDriverEx+0x94>)
 800fbdc:	4413      	add	r3, r2
 800fbde:	79fa      	ldrb	r2, [r7, #7]
 800fbe0:	751a      	strb	r2, [r3, #20]
    DiskNum = disk.nbr++;
 800fbe2:	4b11      	ldr	r3, [pc, #68]	; (800fc28 <FATFS_LinkDriverEx+0x94>)
 800fbe4:	7e1b      	ldrb	r3, [r3, #24]
 800fbe6:	b2db      	uxtb	r3, r3
 800fbe8:	1c5a      	adds	r2, r3, #1
 800fbea:	b2d1      	uxtb	r1, r2
 800fbec:	4a0e      	ldr	r2, [pc, #56]	; (800fc28 <FATFS_LinkDriverEx+0x94>)
 800fbee:	7611      	strb	r1, [r2, #24]
 800fbf0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fbf2:	7dbb      	ldrb	r3, [r7, #22]
 800fbf4:	3330      	adds	r3, #48	; 0x30
 800fbf6:	b2da      	uxtb	r2, r3
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fbfc:	68bb      	ldr	r3, [r7, #8]
 800fbfe:	3301      	adds	r3, #1
 800fc00:	223a      	movs	r2, #58	; 0x3a
 800fc02:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fc04:	68bb      	ldr	r3, [r7, #8]
 800fc06:	3302      	adds	r3, #2
 800fc08:	222f      	movs	r2, #47	; 0x2f
 800fc0a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fc0c:	68bb      	ldr	r3, [r7, #8]
 800fc0e:	3303      	adds	r3, #3
 800fc10:	2200      	movs	r2, #0
 800fc12:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fc14:	2300      	movs	r3, #0
 800fc16:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fc18:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	371c      	adds	r7, #28
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc24:	4770      	bx	lr
 800fc26:	bf00      	nop
 800fc28:	20001e4c 	.word	0x20001e4c

0800fc2c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b082      	sub	sp, #8
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
 800fc34:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fc36:	2200      	movs	r2, #0
 800fc38:	6839      	ldr	r1, [r7, #0]
 800fc3a:	6878      	ldr	r0, [r7, #4]
 800fc3c:	f7ff ffaa 	bl	800fb94 <FATFS_LinkDriverEx>
 800fc40:	4603      	mov	r3, r0
}
 800fc42:	4618      	mov	r0, r3
 800fc44:	3708      	adds	r7, #8
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}
	...

0800fc4c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800fc4c:	b480      	push	{r7}
 800fc4e:	b085      	sub	sp, #20
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	4603      	mov	r3, r0
 800fc54:	6039      	str	r1, [r7, #0]
 800fc56:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800fc58:	88fb      	ldrh	r3, [r7, #6]
 800fc5a:	2b7f      	cmp	r3, #127	; 0x7f
 800fc5c:	d802      	bhi.n	800fc64 <ff_convert+0x18>
		c = chr;
 800fc5e:	88fb      	ldrh	r3, [r7, #6]
 800fc60:	81fb      	strh	r3, [r7, #14]
 800fc62:	e025      	b.n	800fcb0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800fc64:	683b      	ldr	r3, [r7, #0]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d00b      	beq.n	800fc82 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800fc6a:	88fb      	ldrh	r3, [r7, #6]
 800fc6c:	2bff      	cmp	r3, #255	; 0xff
 800fc6e:	d805      	bhi.n	800fc7c <ff_convert+0x30>
 800fc70:	88fb      	ldrh	r3, [r7, #6]
 800fc72:	3b80      	subs	r3, #128	; 0x80
 800fc74:	4a12      	ldr	r2, [pc, #72]	; (800fcc0 <ff_convert+0x74>)
 800fc76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc7a:	e000      	b.n	800fc7e <ff_convert+0x32>
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	81fb      	strh	r3, [r7, #14]
 800fc80:	e016      	b.n	800fcb0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800fc82:	2300      	movs	r3, #0
 800fc84:	81fb      	strh	r3, [r7, #14]
 800fc86:	e009      	b.n	800fc9c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800fc88:	89fb      	ldrh	r3, [r7, #14]
 800fc8a:	4a0d      	ldr	r2, [pc, #52]	; (800fcc0 <ff_convert+0x74>)
 800fc8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc90:	88fa      	ldrh	r2, [r7, #6]
 800fc92:	429a      	cmp	r2, r3
 800fc94:	d006      	beq.n	800fca4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800fc96:	89fb      	ldrh	r3, [r7, #14]
 800fc98:	3301      	adds	r3, #1
 800fc9a:	81fb      	strh	r3, [r7, #14]
 800fc9c:	89fb      	ldrh	r3, [r7, #14]
 800fc9e:	2b7f      	cmp	r3, #127	; 0x7f
 800fca0:	d9f2      	bls.n	800fc88 <ff_convert+0x3c>
 800fca2:	e000      	b.n	800fca6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800fca4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800fca6:	89fb      	ldrh	r3, [r7, #14]
 800fca8:	3380      	adds	r3, #128	; 0x80
 800fcaa:	b29b      	uxth	r3, r3
 800fcac:	b2db      	uxtb	r3, r3
 800fcae:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800fcb0:	89fb      	ldrh	r3, [r7, #14]
}
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	3714      	adds	r7, #20
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcbc:	4770      	bx	lr
 800fcbe:	bf00      	nop
 800fcc0:	08014380 	.word	0x08014380

0800fcc4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b087      	sub	sp, #28
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	4603      	mov	r3, r0
 800fccc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800fcce:	88fb      	ldrh	r3, [r7, #6]
 800fcd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fcd4:	d201      	bcs.n	800fcda <ff_wtoupper+0x16>
 800fcd6:	4b3e      	ldr	r3, [pc, #248]	; (800fdd0 <ff_wtoupper+0x10c>)
 800fcd8:	e000      	b.n	800fcdc <ff_wtoupper+0x18>
 800fcda:	4b3e      	ldr	r3, [pc, #248]	; (800fdd4 <ff_wtoupper+0x110>)
 800fcdc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	1c9a      	adds	r2, r3, #2
 800fce2:	617a      	str	r2, [r7, #20]
 800fce4:	881b      	ldrh	r3, [r3, #0]
 800fce6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800fce8:	8a7b      	ldrh	r3, [r7, #18]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d068      	beq.n	800fdc0 <ff_wtoupper+0xfc>
 800fcee:	88fa      	ldrh	r2, [r7, #6]
 800fcf0:	8a7b      	ldrh	r3, [r7, #18]
 800fcf2:	429a      	cmp	r2, r3
 800fcf4:	d364      	bcc.n	800fdc0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800fcf6:	697b      	ldr	r3, [r7, #20]
 800fcf8:	1c9a      	adds	r2, r3, #2
 800fcfa:	617a      	str	r2, [r7, #20]
 800fcfc:	881b      	ldrh	r3, [r3, #0]
 800fcfe:	823b      	strh	r3, [r7, #16]
 800fd00:	8a3b      	ldrh	r3, [r7, #16]
 800fd02:	0a1b      	lsrs	r3, r3, #8
 800fd04:	81fb      	strh	r3, [r7, #14]
 800fd06:	8a3b      	ldrh	r3, [r7, #16]
 800fd08:	b2db      	uxtb	r3, r3
 800fd0a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800fd0c:	88fa      	ldrh	r2, [r7, #6]
 800fd0e:	8a79      	ldrh	r1, [r7, #18]
 800fd10:	8a3b      	ldrh	r3, [r7, #16]
 800fd12:	440b      	add	r3, r1
 800fd14:	429a      	cmp	r2, r3
 800fd16:	da49      	bge.n	800fdac <ff_wtoupper+0xe8>
			switch (cmd) {
 800fd18:	89fb      	ldrh	r3, [r7, #14]
 800fd1a:	2b08      	cmp	r3, #8
 800fd1c:	d84f      	bhi.n	800fdbe <ff_wtoupper+0xfa>
 800fd1e:	a201      	add	r2, pc, #4	; (adr r2, 800fd24 <ff_wtoupper+0x60>)
 800fd20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd24:	0800fd49 	.word	0x0800fd49
 800fd28:	0800fd5b 	.word	0x0800fd5b
 800fd2c:	0800fd71 	.word	0x0800fd71
 800fd30:	0800fd79 	.word	0x0800fd79
 800fd34:	0800fd81 	.word	0x0800fd81
 800fd38:	0800fd89 	.word	0x0800fd89
 800fd3c:	0800fd91 	.word	0x0800fd91
 800fd40:	0800fd99 	.word	0x0800fd99
 800fd44:	0800fda1 	.word	0x0800fda1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800fd48:	88fa      	ldrh	r2, [r7, #6]
 800fd4a:	8a7b      	ldrh	r3, [r7, #18]
 800fd4c:	1ad3      	subs	r3, r2, r3
 800fd4e:	005b      	lsls	r3, r3, #1
 800fd50:	697a      	ldr	r2, [r7, #20]
 800fd52:	4413      	add	r3, r2
 800fd54:	881b      	ldrh	r3, [r3, #0]
 800fd56:	80fb      	strh	r3, [r7, #6]
 800fd58:	e027      	b.n	800fdaa <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800fd5a:	88fa      	ldrh	r2, [r7, #6]
 800fd5c:	8a7b      	ldrh	r3, [r7, #18]
 800fd5e:	1ad3      	subs	r3, r2, r3
 800fd60:	b29b      	uxth	r3, r3
 800fd62:	f003 0301 	and.w	r3, r3, #1
 800fd66:	b29b      	uxth	r3, r3
 800fd68:	88fa      	ldrh	r2, [r7, #6]
 800fd6a:	1ad3      	subs	r3, r2, r3
 800fd6c:	80fb      	strh	r3, [r7, #6]
 800fd6e:	e01c      	b.n	800fdaa <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800fd70:	88fb      	ldrh	r3, [r7, #6]
 800fd72:	3b10      	subs	r3, #16
 800fd74:	80fb      	strh	r3, [r7, #6]
 800fd76:	e018      	b.n	800fdaa <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800fd78:	88fb      	ldrh	r3, [r7, #6]
 800fd7a:	3b20      	subs	r3, #32
 800fd7c:	80fb      	strh	r3, [r7, #6]
 800fd7e:	e014      	b.n	800fdaa <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800fd80:	88fb      	ldrh	r3, [r7, #6]
 800fd82:	3b30      	subs	r3, #48	; 0x30
 800fd84:	80fb      	strh	r3, [r7, #6]
 800fd86:	e010      	b.n	800fdaa <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800fd88:	88fb      	ldrh	r3, [r7, #6]
 800fd8a:	3b1a      	subs	r3, #26
 800fd8c:	80fb      	strh	r3, [r7, #6]
 800fd8e:	e00c      	b.n	800fdaa <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800fd90:	88fb      	ldrh	r3, [r7, #6]
 800fd92:	3308      	adds	r3, #8
 800fd94:	80fb      	strh	r3, [r7, #6]
 800fd96:	e008      	b.n	800fdaa <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800fd98:	88fb      	ldrh	r3, [r7, #6]
 800fd9a:	3b50      	subs	r3, #80	; 0x50
 800fd9c:	80fb      	strh	r3, [r7, #6]
 800fd9e:	e004      	b.n	800fdaa <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800fda0:	88fb      	ldrh	r3, [r7, #6]
 800fda2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800fda6:	80fb      	strh	r3, [r7, #6]
 800fda8:	bf00      	nop
			}
			break;
 800fdaa:	e008      	b.n	800fdbe <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800fdac:	89fb      	ldrh	r3, [r7, #14]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d195      	bne.n	800fcde <ff_wtoupper+0x1a>
 800fdb2:	8a3b      	ldrh	r3, [r7, #16]
 800fdb4:	005b      	lsls	r3, r3, #1
 800fdb6:	697a      	ldr	r2, [r7, #20]
 800fdb8:	4413      	add	r3, r2
 800fdba:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800fdbc:	e78f      	b.n	800fcde <ff_wtoupper+0x1a>
			break;
 800fdbe:	bf00      	nop
	}

	return chr;
 800fdc0:	88fb      	ldrh	r3, [r7, #6]
}
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	371c      	adds	r7, #28
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdcc:	4770      	bx	lr
 800fdce:	bf00      	nop
 800fdd0:	08014480 	.word	0x08014480
 800fdd4:	08014674 	.word	0x08014674

0800fdd8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800fdd8:	b480      	push	{r7}
 800fdda:	b085      	sub	sp, #20
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	4603      	mov	r3, r0
 800fde0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800fde2:	2300      	movs	r3, #0
 800fde4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800fde6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fdea:	2b84      	cmp	r3, #132	; 0x84
 800fdec:	d005      	beq.n	800fdfa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800fdee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	4413      	add	r3, r2
 800fdf6:	3303      	adds	r3, #3
 800fdf8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800fdfa:	68fb      	ldr	r3, [r7, #12]
}
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	3714      	adds	r7, #20
 800fe00:	46bd      	mov	sp, r7
 800fe02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe06:	4770      	bx	lr

0800fe08 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800fe08:	b480      	push	{r7}
 800fe0a:	b083      	sub	sp, #12
 800fe0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fe0e:	f3ef 8305 	mrs	r3, IPSR
 800fe12:	607b      	str	r3, [r7, #4]
  return(result);
 800fe14:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	bf14      	ite	ne
 800fe1a:	2301      	movne	r3, #1
 800fe1c:	2300      	moveq	r3, #0
 800fe1e:	b2db      	uxtb	r3, r3
}
 800fe20:	4618      	mov	r0, r3
 800fe22:	370c      	adds	r7, #12
 800fe24:	46bd      	mov	sp, r7
 800fe26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2a:	4770      	bx	lr

0800fe2c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800fe30:	f001 f916 	bl	8011060 <vTaskStartScheduler>
  
  return osOK;
 800fe34:	2300      	movs	r3, #0
}
 800fe36:	4618      	mov	r0, r3
 800fe38:	bd80      	pop	{r7, pc}

0800fe3a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800fe3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe3c:	b089      	sub	sp, #36	; 0x24
 800fe3e:	af04      	add	r7, sp, #16
 800fe40:	6078      	str	r0, [r7, #4]
 800fe42:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	695b      	ldr	r3, [r3, #20]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d020      	beq.n	800fe8e <osThreadCreate+0x54>
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	699b      	ldr	r3, [r3, #24]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d01c      	beq.n	800fe8e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	685c      	ldr	r4, [r3, #4]
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	681d      	ldr	r5, [r3, #0]
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	691e      	ldr	r6, [r3, #16]
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fe66:	4618      	mov	r0, r3
 800fe68:	f7ff ffb6 	bl	800fdd8 <makeFreeRtosPriority>
 800fe6c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	695b      	ldr	r3, [r3, #20]
 800fe72:	687a      	ldr	r2, [r7, #4]
 800fe74:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fe76:	9202      	str	r2, [sp, #8]
 800fe78:	9301      	str	r3, [sp, #4]
 800fe7a:	9100      	str	r1, [sp, #0]
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	4632      	mov	r2, r6
 800fe80:	4629      	mov	r1, r5
 800fe82:	4620      	mov	r0, r4
 800fe84:	f000 ff0e 	bl	8010ca4 <xTaskCreateStatic>
 800fe88:	4603      	mov	r3, r0
 800fe8a:	60fb      	str	r3, [r7, #12]
 800fe8c:	e01c      	b.n	800fec8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	685c      	ldr	r4, [r3, #4]
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fe9a:	b29e      	uxth	r6, r3
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fea2:	4618      	mov	r0, r3
 800fea4:	f7ff ff98 	bl	800fdd8 <makeFreeRtosPriority>
 800fea8:	4602      	mov	r2, r0
 800feaa:	f107 030c 	add.w	r3, r7, #12
 800feae:	9301      	str	r3, [sp, #4]
 800feb0:	9200      	str	r2, [sp, #0]
 800feb2:	683b      	ldr	r3, [r7, #0]
 800feb4:	4632      	mov	r2, r6
 800feb6:	4629      	mov	r1, r5
 800feb8:	4620      	mov	r0, r4
 800feba:	f000 ff50 	bl	8010d5e <xTaskCreate>
 800febe:	4603      	mov	r3, r0
 800fec0:	2b01      	cmp	r3, #1
 800fec2:	d001      	beq.n	800fec8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800fec4:	2300      	movs	r3, #0
 800fec6:	e000      	b.n	800feca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800fec8:	68fb      	ldr	r3, [r7, #12]
}
 800feca:	4618      	mov	r0, r3
 800fecc:	3714      	adds	r7, #20
 800fece:	46bd      	mov	sp, r7
 800fed0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fed2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800fed2:	b580      	push	{r7, lr}
 800fed4:	b084      	sub	sp, #16
 800fed6:	af00      	add	r7, sp, #0
 800fed8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d001      	beq.n	800fee8 <osDelay+0x16>
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	e000      	b.n	800feea <osDelay+0x18>
 800fee8:	2301      	movs	r3, #1
 800feea:	4618      	mov	r0, r3
 800feec:	f001 f884 	bl	8010ff8 <vTaskDelay>
  
  return osOK;
 800fef0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800fef2:	4618      	mov	r0, r3
 800fef4:	3710      	adds	r7, #16
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}

0800fefa <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800fefa:	b590      	push	{r4, r7, lr}
 800fefc:	b085      	sub	sp, #20
 800fefe:	af02      	add	r7, sp, #8
 800ff00:	6078      	str	r0, [r7, #4]
 800ff02:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	689b      	ldr	r3, [r3, #8]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d011      	beq.n	800ff30 <osMessageCreate+0x36>
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	68db      	ldr	r3, [r3, #12]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d00d      	beq.n	800ff30 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	6818      	ldr	r0, [r3, #0]
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	6859      	ldr	r1, [r3, #4]
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	689a      	ldr	r2, [r3, #8]
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	68db      	ldr	r3, [r3, #12]
 800ff24:	2400      	movs	r4, #0
 800ff26:	9400      	str	r4, [sp, #0]
 800ff28:	f000 f9e0 	bl	80102ec <xQueueGenericCreateStatic>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	e008      	b.n	800ff42 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	6818      	ldr	r0, [r3, #0]
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	685b      	ldr	r3, [r3, #4]
 800ff38:	2200      	movs	r2, #0
 800ff3a:	4619      	mov	r1, r3
 800ff3c:	f000 fa4e 	bl	80103dc <xQueueGenericCreate>
 800ff40:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800ff42:	4618      	mov	r0, r3
 800ff44:	370c      	adds	r7, #12
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd90      	pop	{r4, r7, pc}
	...

0800ff4c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b086      	sub	sp, #24
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	60f8      	str	r0, [r7, #12]
 800ff54:	60b9      	str	r1, [r7, #8]
 800ff56:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800ff58:	2300      	movs	r3, #0
 800ff5a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800ff60:	697b      	ldr	r3, [r7, #20]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d101      	bne.n	800ff6a <osMessagePut+0x1e>
    ticks = 1;
 800ff66:	2301      	movs	r3, #1
 800ff68:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800ff6a:	f7ff ff4d 	bl	800fe08 <inHandlerMode>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d018      	beq.n	800ffa6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800ff74:	f107 0210 	add.w	r2, r7, #16
 800ff78:	f107 0108 	add.w	r1, r7, #8
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	68f8      	ldr	r0, [r7, #12]
 800ff80:	f000 fb84 	bl	801068c <xQueueGenericSendFromISR>
 800ff84:	4603      	mov	r3, r0
 800ff86:	2b01      	cmp	r3, #1
 800ff88:	d001      	beq.n	800ff8e <osMessagePut+0x42>
      return osErrorOS;
 800ff8a:	23ff      	movs	r3, #255	; 0xff
 800ff8c:	e018      	b.n	800ffc0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ff8e:	693b      	ldr	r3, [r7, #16]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d014      	beq.n	800ffbe <osMessagePut+0x72>
 800ff94:	4b0c      	ldr	r3, [pc, #48]	; (800ffc8 <osMessagePut+0x7c>)
 800ff96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff9a:	601a      	str	r2, [r3, #0]
 800ff9c:	f3bf 8f4f 	dsb	sy
 800ffa0:	f3bf 8f6f 	isb	sy
 800ffa4:	e00b      	b.n	800ffbe <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800ffa6:	f107 0108 	add.w	r1, r7, #8
 800ffaa:	2300      	movs	r3, #0
 800ffac:	697a      	ldr	r2, [r7, #20]
 800ffae:	68f8      	ldr	r0, [r7, #12]
 800ffb0:	f000 fa6e 	bl	8010490 <xQueueGenericSend>
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	2b01      	cmp	r3, #1
 800ffb8:	d001      	beq.n	800ffbe <osMessagePut+0x72>
      return osErrorOS;
 800ffba:	23ff      	movs	r3, #255	; 0xff
 800ffbc:	e000      	b.n	800ffc0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ffbe:	2300      	movs	r3, #0
}
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	3718      	adds	r7, #24
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}
 800ffc8:	e000ed04 	.word	0xe000ed04

0800ffcc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800ffcc:	b590      	push	{r4, r7, lr}
 800ffce:	b08b      	sub	sp, #44	; 0x2c
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	60f8      	str	r0, [r7, #12]
 800ffd4:	60b9      	str	r1, [r7, #8]
 800ffd6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800ffd8:	68bb      	ldr	r3, [r7, #8]
 800ffda:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800ffdc:	2300      	movs	r3, #0
 800ffde:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d10a      	bne.n	800fffc <osMessageGet+0x30>
    event.status = osErrorParameter;
 800ffe6:	2380      	movs	r3, #128	; 0x80
 800ffe8:	617b      	str	r3, [r7, #20]
    return event;
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	461c      	mov	r4, r3
 800ffee:	f107 0314 	add.w	r3, r7, #20
 800fff2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fff6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fffa:	e054      	b.n	80100a6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800fffc:	2300      	movs	r3, #0
 800fffe:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8010000:	2300      	movs	r3, #0
 8010002:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	f1b3 3fff 	cmp.w	r3, #4294967295
 801000a:	d103      	bne.n	8010014 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 801000c:	f04f 33ff 	mov.w	r3, #4294967295
 8010010:	627b      	str	r3, [r7, #36]	; 0x24
 8010012:	e009      	b.n	8010028 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d006      	beq.n	8010028 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 801001e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010020:	2b00      	cmp	r3, #0
 8010022:	d101      	bne.n	8010028 <osMessageGet+0x5c>
      ticks = 1;
 8010024:	2301      	movs	r3, #1
 8010026:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8010028:	f7ff feee 	bl	800fe08 <inHandlerMode>
 801002c:	4603      	mov	r3, r0
 801002e:	2b00      	cmp	r3, #0
 8010030:	d01c      	beq.n	801006c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8010032:	f107 0220 	add.w	r2, r7, #32
 8010036:	f107 0314 	add.w	r3, r7, #20
 801003a:	3304      	adds	r3, #4
 801003c:	4619      	mov	r1, r3
 801003e:	68b8      	ldr	r0, [r7, #8]
 8010040:	f000 fca0 	bl	8010984 <xQueueReceiveFromISR>
 8010044:	4603      	mov	r3, r0
 8010046:	2b01      	cmp	r3, #1
 8010048:	d102      	bne.n	8010050 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 801004a:	2310      	movs	r3, #16
 801004c:	617b      	str	r3, [r7, #20]
 801004e:	e001      	b.n	8010054 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8010050:	2300      	movs	r3, #0
 8010052:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010054:	6a3b      	ldr	r3, [r7, #32]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d01d      	beq.n	8010096 <osMessageGet+0xca>
 801005a:	4b15      	ldr	r3, [pc, #84]	; (80100b0 <osMessageGet+0xe4>)
 801005c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010060:	601a      	str	r2, [r3, #0]
 8010062:	f3bf 8f4f 	dsb	sy
 8010066:	f3bf 8f6f 	isb	sy
 801006a:	e014      	b.n	8010096 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 801006c:	f107 0314 	add.w	r3, r7, #20
 8010070:	3304      	adds	r3, #4
 8010072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010074:	4619      	mov	r1, r3
 8010076:	68b8      	ldr	r0, [r7, #8]
 8010078:	f000 fba4 	bl	80107c4 <xQueueReceive>
 801007c:	4603      	mov	r3, r0
 801007e:	2b01      	cmp	r3, #1
 8010080:	d102      	bne.n	8010088 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8010082:	2310      	movs	r3, #16
 8010084:	617b      	str	r3, [r7, #20]
 8010086:	e006      	b.n	8010096 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8010088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801008a:	2b00      	cmp	r3, #0
 801008c:	d101      	bne.n	8010092 <osMessageGet+0xc6>
 801008e:	2300      	movs	r3, #0
 8010090:	e000      	b.n	8010094 <osMessageGet+0xc8>
 8010092:	2340      	movs	r3, #64	; 0x40
 8010094:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	461c      	mov	r4, r3
 801009a:	f107 0314 	add.w	r3, r7, #20
 801009e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80100a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80100a6:	68f8      	ldr	r0, [r7, #12]
 80100a8:	372c      	adds	r7, #44	; 0x2c
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd90      	pop	{r4, r7, pc}
 80100ae:	bf00      	nop
 80100b0:	e000ed04 	.word	0xe000ed04

080100b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80100b4:	b480      	push	{r7}
 80100b6:	b083      	sub	sp, #12
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f103 0208 	add.w	r2, r3, #8
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	f04f 32ff 	mov.w	r2, #4294967295
 80100cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	f103 0208 	add.w	r2, r3, #8
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	f103 0208 	add.w	r2, r3, #8
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	2200      	movs	r2, #0
 80100e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80100e8:	bf00      	nop
 80100ea:	370c      	adds	r7, #12
 80100ec:	46bd      	mov	sp, r7
 80100ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f2:	4770      	bx	lr

080100f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80100f4:	b480      	push	{r7}
 80100f6:	b083      	sub	sp, #12
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2200      	movs	r2, #0
 8010100:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010102:	bf00      	nop
 8010104:	370c      	adds	r7, #12
 8010106:	46bd      	mov	sp, r7
 8010108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010c:	4770      	bx	lr

0801010e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801010e:	b480      	push	{r7}
 8010110:	b085      	sub	sp, #20
 8010112:	af00      	add	r7, sp, #0
 8010114:	6078      	str	r0, [r7, #4]
 8010116:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	685b      	ldr	r3, [r3, #4]
 801011c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801011e:	683b      	ldr	r3, [r7, #0]
 8010120:	68fa      	ldr	r2, [r7, #12]
 8010122:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	689a      	ldr	r2, [r3, #8]
 8010128:	683b      	ldr	r3, [r7, #0]
 801012a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	689b      	ldr	r3, [r3, #8]
 8010130:	683a      	ldr	r2, [r7, #0]
 8010132:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	683a      	ldr	r2, [r7, #0]
 8010138:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	687a      	ldr	r2, [r7, #4]
 801013e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	1c5a      	adds	r2, r3, #1
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	601a      	str	r2, [r3, #0]
}
 801014a:	bf00      	nop
 801014c:	3714      	adds	r7, #20
 801014e:	46bd      	mov	sp, r7
 8010150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010154:	4770      	bx	lr

08010156 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010156:	b480      	push	{r7}
 8010158:	b085      	sub	sp, #20
 801015a:	af00      	add	r7, sp, #0
 801015c:	6078      	str	r0, [r7, #4]
 801015e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010166:	68bb      	ldr	r3, [r7, #8]
 8010168:	f1b3 3fff 	cmp.w	r3, #4294967295
 801016c:	d103      	bne.n	8010176 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	691b      	ldr	r3, [r3, #16]
 8010172:	60fb      	str	r3, [r7, #12]
 8010174:	e00c      	b.n	8010190 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	3308      	adds	r3, #8
 801017a:	60fb      	str	r3, [r7, #12]
 801017c:	e002      	b.n	8010184 <vListInsert+0x2e>
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	685b      	ldr	r3, [r3, #4]
 8010182:	60fb      	str	r3, [r7, #12]
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	685b      	ldr	r3, [r3, #4]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	68ba      	ldr	r2, [r7, #8]
 801018c:	429a      	cmp	r2, r3
 801018e:	d2f6      	bcs.n	801017e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	685a      	ldr	r2, [r3, #4]
 8010194:	683b      	ldr	r3, [r7, #0]
 8010196:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	685b      	ldr	r3, [r3, #4]
 801019c:	683a      	ldr	r2, [r7, #0]
 801019e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	68fa      	ldr	r2, [r7, #12]
 80101a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	683a      	ldr	r2, [r7, #0]
 80101aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80101ac:	683b      	ldr	r3, [r7, #0]
 80101ae:	687a      	ldr	r2, [r7, #4]
 80101b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	1c5a      	adds	r2, r3, #1
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	601a      	str	r2, [r3, #0]
}
 80101bc:	bf00      	nop
 80101be:	3714      	adds	r7, #20
 80101c0:	46bd      	mov	sp, r7
 80101c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c6:	4770      	bx	lr

080101c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80101c8:	b480      	push	{r7}
 80101ca:	b085      	sub	sp, #20
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	691b      	ldr	r3, [r3, #16]
 80101d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	685b      	ldr	r3, [r3, #4]
 80101da:	687a      	ldr	r2, [r7, #4]
 80101dc:	6892      	ldr	r2, [r2, #8]
 80101de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	689b      	ldr	r3, [r3, #8]
 80101e4:	687a      	ldr	r2, [r7, #4]
 80101e6:	6852      	ldr	r2, [r2, #4]
 80101e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	685b      	ldr	r3, [r3, #4]
 80101ee:	687a      	ldr	r2, [r7, #4]
 80101f0:	429a      	cmp	r2, r3
 80101f2:	d103      	bne.n	80101fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	689a      	ldr	r2, [r3, #8]
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2200      	movs	r2, #0
 8010200:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	1e5a      	subs	r2, r3, #1
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	681b      	ldr	r3, [r3, #0]
}
 8010210:	4618      	mov	r0, r3
 8010212:	3714      	adds	r7, #20
 8010214:	46bd      	mov	sp, r7
 8010216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021a:	4770      	bx	lr

0801021c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b084      	sub	sp, #16
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
 8010224:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d10a      	bne.n	8010246 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010234:	f383 8811 	msr	BASEPRI, r3
 8010238:	f3bf 8f6f 	isb	sy
 801023c:	f3bf 8f4f 	dsb	sy
 8010240:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010242:	bf00      	nop
 8010244:	e7fe      	b.n	8010244 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010246:	f001 fd55 	bl	8011cf4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	681a      	ldr	r2, [r3, #0]
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010252:	68f9      	ldr	r1, [r7, #12]
 8010254:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010256:	fb01 f303 	mul.w	r3, r1, r3
 801025a:	441a      	add	r2, r3
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	2200      	movs	r2, #0
 8010264:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	681a      	ldr	r2, [r3, #0]
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	681a      	ldr	r2, [r3, #0]
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010276:	3b01      	subs	r3, #1
 8010278:	68f9      	ldr	r1, [r7, #12]
 801027a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801027c:	fb01 f303 	mul.w	r3, r1, r3
 8010280:	441a      	add	r2, r3
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	22ff      	movs	r2, #255	; 0xff
 801028a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	22ff      	movs	r2, #255	; 0xff
 8010292:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010296:	683b      	ldr	r3, [r7, #0]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d114      	bne.n	80102c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	691b      	ldr	r3, [r3, #16]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d01a      	beq.n	80102da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	3310      	adds	r3, #16
 80102a8:	4618      	mov	r0, r3
 80102aa:	f001 f92b 	bl	8011504 <xTaskRemoveFromEventList>
 80102ae:	4603      	mov	r3, r0
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d012      	beq.n	80102da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80102b4:	4b0c      	ldr	r3, [pc, #48]	; (80102e8 <xQueueGenericReset+0xcc>)
 80102b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102ba:	601a      	str	r2, [r3, #0]
 80102bc:	f3bf 8f4f 	dsb	sy
 80102c0:	f3bf 8f6f 	isb	sy
 80102c4:	e009      	b.n	80102da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	3310      	adds	r3, #16
 80102ca:	4618      	mov	r0, r3
 80102cc:	f7ff fef2 	bl	80100b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	3324      	adds	r3, #36	; 0x24
 80102d4:	4618      	mov	r0, r3
 80102d6:	f7ff feed 	bl	80100b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80102da:	f001 fd3b 	bl	8011d54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80102de:	2301      	movs	r3, #1
}
 80102e0:	4618      	mov	r0, r3
 80102e2:	3710      	adds	r7, #16
 80102e4:	46bd      	mov	sp, r7
 80102e6:	bd80      	pop	{r7, pc}
 80102e8:	e000ed04 	.word	0xe000ed04

080102ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b08e      	sub	sp, #56	; 0x38
 80102f0:	af02      	add	r7, sp, #8
 80102f2:	60f8      	str	r0, [r7, #12]
 80102f4:	60b9      	str	r1, [r7, #8]
 80102f6:	607a      	str	r2, [r7, #4]
 80102f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d10a      	bne.n	8010316 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8010300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010304:	f383 8811 	msr	BASEPRI, r3
 8010308:	f3bf 8f6f 	isb	sy
 801030c:	f3bf 8f4f 	dsb	sy
 8010310:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010312:	bf00      	nop
 8010314:	e7fe      	b.n	8010314 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010316:	683b      	ldr	r3, [r7, #0]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d10a      	bne.n	8010332 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801031c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010320:	f383 8811 	msr	BASEPRI, r3
 8010324:	f3bf 8f6f 	isb	sy
 8010328:	f3bf 8f4f 	dsb	sy
 801032c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801032e:	bf00      	nop
 8010330:	e7fe      	b.n	8010330 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d002      	beq.n	801033e <xQueueGenericCreateStatic+0x52>
 8010338:	68bb      	ldr	r3, [r7, #8]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d001      	beq.n	8010342 <xQueueGenericCreateStatic+0x56>
 801033e:	2301      	movs	r3, #1
 8010340:	e000      	b.n	8010344 <xQueueGenericCreateStatic+0x58>
 8010342:	2300      	movs	r3, #0
 8010344:	2b00      	cmp	r3, #0
 8010346:	d10a      	bne.n	801035e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8010348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801034c:	f383 8811 	msr	BASEPRI, r3
 8010350:	f3bf 8f6f 	isb	sy
 8010354:	f3bf 8f4f 	dsb	sy
 8010358:	623b      	str	r3, [r7, #32]
}
 801035a:	bf00      	nop
 801035c:	e7fe      	b.n	801035c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d102      	bne.n	801036a <xQueueGenericCreateStatic+0x7e>
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d101      	bne.n	801036e <xQueueGenericCreateStatic+0x82>
 801036a:	2301      	movs	r3, #1
 801036c:	e000      	b.n	8010370 <xQueueGenericCreateStatic+0x84>
 801036e:	2300      	movs	r3, #0
 8010370:	2b00      	cmp	r3, #0
 8010372:	d10a      	bne.n	801038a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8010374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010378:	f383 8811 	msr	BASEPRI, r3
 801037c:	f3bf 8f6f 	isb	sy
 8010380:	f3bf 8f4f 	dsb	sy
 8010384:	61fb      	str	r3, [r7, #28]
}
 8010386:	bf00      	nop
 8010388:	e7fe      	b.n	8010388 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801038a:	2348      	movs	r3, #72	; 0x48
 801038c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801038e:	697b      	ldr	r3, [r7, #20]
 8010390:	2b48      	cmp	r3, #72	; 0x48
 8010392:	d00a      	beq.n	80103aa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8010394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010398:	f383 8811 	msr	BASEPRI, r3
 801039c:	f3bf 8f6f 	isb	sy
 80103a0:	f3bf 8f4f 	dsb	sy
 80103a4:	61bb      	str	r3, [r7, #24]
}
 80103a6:	bf00      	nop
 80103a8:	e7fe      	b.n	80103a8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80103aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80103ac:	683b      	ldr	r3, [r7, #0]
 80103ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80103b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d00d      	beq.n	80103d2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80103b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b8:	2201      	movs	r2, #1
 80103ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80103be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80103c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103c4:	9300      	str	r3, [sp, #0]
 80103c6:	4613      	mov	r3, r2
 80103c8:	687a      	ldr	r2, [r7, #4]
 80103ca:	68b9      	ldr	r1, [r7, #8]
 80103cc:	68f8      	ldr	r0, [r7, #12]
 80103ce:	f000 f83f 	bl	8010450 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80103d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80103d4:	4618      	mov	r0, r3
 80103d6:	3730      	adds	r7, #48	; 0x30
 80103d8:	46bd      	mov	sp, r7
 80103da:	bd80      	pop	{r7, pc}

080103dc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b08a      	sub	sp, #40	; 0x28
 80103e0:	af02      	add	r7, sp, #8
 80103e2:	60f8      	str	r0, [r7, #12]
 80103e4:	60b9      	str	r1, [r7, #8]
 80103e6:	4613      	mov	r3, r2
 80103e8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d10a      	bne.n	8010406 <xQueueGenericCreate+0x2a>
	__asm volatile
 80103f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103f4:	f383 8811 	msr	BASEPRI, r3
 80103f8:	f3bf 8f6f 	isb	sy
 80103fc:	f3bf 8f4f 	dsb	sy
 8010400:	613b      	str	r3, [r7, #16]
}
 8010402:	bf00      	nop
 8010404:	e7fe      	b.n	8010404 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	68ba      	ldr	r2, [r7, #8]
 801040a:	fb02 f303 	mul.w	r3, r2, r3
 801040e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010410:	69fb      	ldr	r3, [r7, #28]
 8010412:	3348      	adds	r3, #72	; 0x48
 8010414:	4618      	mov	r0, r3
 8010416:	f001 fd8f 	bl	8011f38 <pvPortMalloc>
 801041a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801041c:	69bb      	ldr	r3, [r7, #24]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d011      	beq.n	8010446 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010422:	69bb      	ldr	r3, [r7, #24]
 8010424:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010426:	697b      	ldr	r3, [r7, #20]
 8010428:	3348      	adds	r3, #72	; 0x48
 801042a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801042c:	69bb      	ldr	r3, [r7, #24]
 801042e:	2200      	movs	r2, #0
 8010430:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010434:	79fa      	ldrb	r2, [r7, #7]
 8010436:	69bb      	ldr	r3, [r7, #24]
 8010438:	9300      	str	r3, [sp, #0]
 801043a:	4613      	mov	r3, r2
 801043c:	697a      	ldr	r2, [r7, #20]
 801043e:	68b9      	ldr	r1, [r7, #8]
 8010440:	68f8      	ldr	r0, [r7, #12]
 8010442:	f000 f805 	bl	8010450 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010446:	69bb      	ldr	r3, [r7, #24]
	}
 8010448:	4618      	mov	r0, r3
 801044a:	3720      	adds	r7, #32
 801044c:	46bd      	mov	sp, r7
 801044e:	bd80      	pop	{r7, pc}

08010450 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b084      	sub	sp, #16
 8010454:	af00      	add	r7, sp, #0
 8010456:	60f8      	str	r0, [r7, #12]
 8010458:	60b9      	str	r1, [r7, #8]
 801045a:	607a      	str	r2, [r7, #4]
 801045c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801045e:	68bb      	ldr	r3, [r7, #8]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d103      	bne.n	801046c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010464:	69bb      	ldr	r3, [r7, #24]
 8010466:	69ba      	ldr	r2, [r7, #24]
 8010468:	601a      	str	r2, [r3, #0]
 801046a:	e002      	b.n	8010472 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801046c:	69bb      	ldr	r3, [r7, #24]
 801046e:	687a      	ldr	r2, [r7, #4]
 8010470:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010472:	69bb      	ldr	r3, [r7, #24]
 8010474:	68fa      	ldr	r2, [r7, #12]
 8010476:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010478:	69bb      	ldr	r3, [r7, #24]
 801047a:	68ba      	ldr	r2, [r7, #8]
 801047c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801047e:	2101      	movs	r1, #1
 8010480:	69b8      	ldr	r0, [r7, #24]
 8010482:	f7ff fecb 	bl	801021c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010486:	bf00      	nop
 8010488:	3710      	adds	r7, #16
 801048a:	46bd      	mov	sp, r7
 801048c:	bd80      	pop	{r7, pc}
	...

08010490 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b08e      	sub	sp, #56	; 0x38
 8010494:	af00      	add	r7, sp, #0
 8010496:	60f8      	str	r0, [r7, #12]
 8010498:	60b9      	str	r1, [r7, #8]
 801049a:	607a      	str	r2, [r7, #4]
 801049c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801049e:	2300      	movs	r3, #0
 80104a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80104a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d10a      	bne.n	80104c2 <xQueueGenericSend+0x32>
	__asm volatile
 80104ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104b0:	f383 8811 	msr	BASEPRI, r3
 80104b4:	f3bf 8f6f 	isb	sy
 80104b8:	f3bf 8f4f 	dsb	sy
 80104bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80104be:	bf00      	nop
 80104c0:	e7fe      	b.n	80104c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80104c2:	68bb      	ldr	r3, [r7, #8]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d103      	bne.n	80104d0 <xQueueGenericSend+0x40>
 80104c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d101      	bne.n	80104d4 <xQueueGenericSend+0x44>
 80104d0:	2301      	movs	r3, #1
 80104d2:	e000      	b.n	80104d6 <xQueueGenericSend+0x46>
 80104d4:	2300      	movs	r3, #0
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d10a      	bne.n	80104f0 <xQueueGenericSend+0x60>
	__asm volatile
 80104da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104de:	f383 8811 	msr	BASEPRI, r3
 80104e2:	f3bf 8f6f 	isb	sy
 80104e6:	f3bf 8f4f 	dsb	sy
 80104ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80104ec:	bf00      	nop
 80104ee:	e7fe      	b.n	80104ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80104f0:	683b      	ldr	r3, [r7, #0]
 80104f2:	2b02      	cmp	r3, #2
 80104f4:	d103      	bne.n	80104fe <xQueueGenericSend+0x6e>
 80104f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104fa:	2b01      	cmp	r3, #1
 80104fc:	d101      	bne.n	8010502 <xQueueGenericSend+0x72>
 80104fe:	2301      	movs	r3, #1
 8010500:	e000      	b.n	8010504 <xQueueGenericSend+0x74>
 8010502:	2300      	movs	r3, #0
 8010504:	2b00      	cmp	r3, #0
 8010506:	d10a      	bne.n	801051e <xQueueGenericSend+0x8e>
	__asm volatile
 8010508:	f04f 0350 	mov.w	r3, #80	; 0x50
 801050c:	f383 8811 	msr	BASEPRI, r3
 8010510:	f3bf 8f6f 	isb	sy
 8010514:	f3bf 8f4f 	dsb	sy
 8010518:	623b      	str	r3, [r7, #32]
}
 801051a:	bf00      	nop
 801051c:	e7fe      	b.n	801051c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801051e:	f001 f9b1 	bl	8011884 <xTaskGetSchedulerState>
 8010522:	4603      	mov	r3, r0
 8010524:	2b00      	cmp	r3, #0
 8010526:	d102      	bne.n	801052e <xQueueGenericSend+0x9e>
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d101      	bne.n	8010532 <xQueueGenericSend+0xa2>
 801052e:	2301      	movs	r3, #1
 8010530:	e000      	b.n	8010534 <xQueueGenericSend+0xa4>
 8010532:	2300      	movs	r3, #0
 8010534:	2b00      	cmp	r3, #0
 8010536:	d10a      	bne.n	801054e <xQueueGenericSend+0xbe>
	__asm volatile
 8010538:	f04f 0350 	mov.w	r3, #80	; 0x50
 801053c:	f383 8811 	msr	BASEPRI, r3
 8010540:	f3bf 8f6f 	isb	sy
 8010544:	f3bf 8f4f 	dsb	sy
 8010548:	61fb      	str	r3, [r7, #28]
}
 801054a:	bf00      	nop
 801054c:	e7fe      	b.n	801054c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801054e:	f001 fbd1 	bl	8011cf4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801055a:	429a      	cmp	r2, r3
 801055c:	d302      	bcc.n	8010564 <xQueueGenericSend+0xd4>
 801055e:	683b      	ldr	r3, [r7, #0]
 8010560:	2b02      	cmp	r3, #2
 8010562:	d129      	bne.n	80105b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010564:	683a      	ldr	r2, [r7, #0]
 8010566:	68b9      	ldr	r1, [r7, #8]
 8010568:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801056a:	f000 fa8b 	bl	8010a84 <prvCopyDataToQueue>
 801056e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010574:	2b00      	cmp	r3, #0
 8010576:	d010      	beq.n	801059a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801057a:	3324      	adds	r3, #36	; 0x24
 801057c:	4618      	mov	r0, r3
 801057e:	f000 ffc1 	bl	8011504 <xTaskRemoveFromEventList>
 8010582:	4603      	mov	r3, r0
 8010584:	2b00      	cmp	r3, #0
 8010586:	d013      	beq.n	80105b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010588:	4b3f      	ldr	r3, [pc, #252]	; (8010688 <xQueueGenericSend+0x1f8>)
 801058a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801058e:	601a      	str	r2, [r3, #0]
 8010590:	f3bf 8f4f 	dsb	sy
 8010594:	f3bf 8f6f 	isb	sy
 8010598:	e00a      	b.n	80105b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801059a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801059c:	2b00      	cmp	r3, #0
 801059e:	d007      	beq.n	80105b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80105a0:	4b39      	ldr	r3, [pc, #228]	; (8010688 <xQueueGenericSend+0x1f8>)
 80105a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105a6:	601a      	str	r2, [r3, #0]
 80105a8:	f3bf 8f4f 	dsb	sy
 80105ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80105b0:	f001 fbd0 	bl	8011d54 <vPortExitCritical>
				return pdPASS;
 80105b4:	2301      	movs	r3, #1
 80105b6:	e063      	b.n	8010680 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d103      	bne.n	80105c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80105be:	f001 fbc9 	bl	8011d54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80105c2:	2300      	movs	r3, #0
 80105c4:	e05c      	b.n	8010680 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80105c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d106      	bne.n	80105da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80105cc:	f107 0314 	add.w	r3, r7, #20
 80105d0:	4618      	mov	r0, r3
 80105d2:	f000 fff9 	bl	80115c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80105d6:	2301      	movs	r3, #1
 80105d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80105da:	f001 fbbb 	bl	8011d54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80105de:	f000 fda9 	bl	8011134 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80105e2:	f001 fb87 	bl	8011cf4 <vPortEnterCritical>
 80105e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80105ec:	b25b      	sxtb	r3, r3
 80105ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105f2:	d103      	bne.n	80105fc <xQueueGenericSend+0x16c>
 80105f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105f6:	2200      	movs	r2, #0
 80105f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80105fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010602:	b25b      	sxtb	r3, r3
 8010604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010608:	d103      	bne.n	8010612 <xQueueGenericSend+0x182>
 801060a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801060c:	2200      	movs	r2, #0
 801060e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010612:	f001 fb9f 	bl	8011d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010616:	1d3a      	adds	r2, r7, #4
 8010618:	f107 0314 	add.w	r3, r7, #20
 801061c:	4611      	mov	r1, r2
 801061e:	4618      	mov	r0, r3
 8010620:	f000 ffe8 	bl	80115f4 <xTaskCheckForTimeOut>
 8010624:	4603      	mov	r3, r0
 8010626:	2b00      	cmp	r3, #0
 8010628:	d124      	bne.n	8010674 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801062a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801062c:	f000 fb22 	bl	8010c74 <prvIsQueueFull>
 8010630:	4603      	mov	r3, r0
 8010632:	2b00      	cmp	r3, #0
 8010634:	d018      	beq.n	8010668 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010638:	3310      	adds	r3, #16
 801063a:	687a      	ldr	r2, [r7, #4]
 801063c:	4611      	mov	r1, r2
 801063e:	4618      	mov	r0, r3
 8010640:	f000 ff3c 	bl	80114bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010644:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010646:	f000 faad 	bl	8010ba4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801064a:	f000 fd81 	bl	8011150 <xTaskResumeAll>
 801064e:	4603      	mov	r3, r0
 8010650:	2b00      	cmp	r3, #0
 8010652:	f47f af7c 	bne.w	801054e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8010656:	4b0c      	ldr	r3, [pc, #48]	; (8010688 <xQueueGenericSend+0x1f8>)
 8010658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801065c:	601a      	str	r2, [r3, #0]
 801065e:	f3bf 8f4f 	dsb	sy
 8010662:	f3bf 8f6f 	isb	sy
 8010666:	e772      	b.n	801054e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010668:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801066a:	f000 fa9b 	bl	8010ba4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801066e:	f000 fd6f 	bl	8011150 <xTaskResumeAll>
 8010672:	e76c      	b.n	801054e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010674:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010676:	f000 fa95 	bl	8010ba4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801067a:	f000 fd69 	bl	8011150 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801067e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010680:	4618      	mov	r0, r3
 8010682:	3738      	adds	r7, #56	; 0x38
 8010684:	46bd      	mov	sp, r7
 8010686:	bd80      	pop	{r7, pc}
 8010688:	e000ed04 	.word	0xe000ed04

0801068c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b090      	sub	sp, #64	; 0x40
 8010690:	af00      	add	r7, sp, #0
 8010692:	60f8      	str	r0, [r7, #12]
 8010694:	60b9      	str	r1, [r7, #8]
 8010696:	607a      	str	r2, [r7, #4]
 8010698:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801069e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d10a      	bne.n	80106ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80106a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106a8:	f383 8811 	msr	BASEPRI, r3
 80106ac:	f3bf 8f6f 	isb	sy
 80106b0:	f3bf 8f4f 	dsb	sy
 80106b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80106b6:	bf00      	nop
 80106b8:	e7fe      	b.n	80106b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80106ba:	68bb      	ldr	r3, [r7, #8]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d103      	bne.n	80106c8 <xQueueGenericSendFromISR+0x3c>
 80106c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d101      	bne.n	80106cc <xQueueGenericSendFromISR+0x40>
 80106c8:	2301      	movs	r3, #1
 80106ca:	e000      	b.n	80106ce <xQueueGenericSendFromISR+0x42>
 80106cc:	2300      	movs	r3, #0
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d10a      	bne.n	80106e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80106d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106d6:	f383 8811 	msr	BASEPRI, r3
 80106da:	f3bf 8f6f 	isb	sy
 80106de:	f3bf 8f4f 	dsb	sy
 80106e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80106e4:	bf00      	nop
 80106e6:	e7fe      	b.n	80106e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80106e8:	683b      	ldr	r3, [r7, #0]
 80106ea:	2b02      	cmp	r3, #2
 80106ec:	d103      	bne.n	80106f6 <xQueueGenericSendFromISR+0x6a>
 80106ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106f2:	2b01      	cmp	r3, #1
 80106f4:	d101      	bne.n	80106fa <xQueueGenericSendFromISR+0x6e>
 80106f6:	2301      	movs	r3, #1
 80106f8:	e000      	b.n	80106fc <xQueueGenericSendFromISR+0x70>
 80106fa:	2300      	movs	r3, #0
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d10a      	bne.n	8010716 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8010700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010704:	f383 8811 	msr	BASEPRI, r3
 8010708:	f3bf 8f6f 	isb	sy
 801070c:	f3bf 8f4f 	dsb	sy
 8010710:	623b      	str	r3, [r7, #32]
}
 8010712:	bf00      	nop
 8010714:	e7fe      	b.n	8010714 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010716:	f001 fbcf 	bl	8011eb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801071a:	f3ef 8211 	mrs	r2, BASEPRI
 801071e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010722:	f383 8811 	msr	BASEPRI, r3
 8010726:	f3bf 8f6f 	isb	sy
 801072a:	f3bf 8f4f 	dsb	sy
 801072e:	61fa      	str	r2, [r7, #28]
 8010730:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010732:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010734:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801073a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801073c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801073e:	429a      	cmp	r2, r3
 8010740:	d302      	bcc.n	8010748 <xQueueGenericSendFromISR+0xbc>
 8010742:	683b      	ldr	r3, [r7, #0]
 8010744:	2b02      	cmp	r3, #2
 8010746:	d12f      	bne.n	80107a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801074a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801074e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010756:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010758:	683a      	ldr	r2, [r7, #0]
 801075a:	68b9      	ldr	r1, [r7, #8]
 801075c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801075e:	f000 f991 	bl	8010a84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010762:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8010766:	f1b3 3fff 	cmp.w	r3, #4294967295
 801076a:	d112      	bne.n	8010792 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801076c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801076e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010770:	2b00      	cmp	r3, #0
 8010772:	d016      	beq.n	80107a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010776:	3324      	adds	r3, #36	; 0x24
 8010778:	4618      	mov	r0, r3
 801077a:	f000 fec3 	bl	8011504 <xTaskRemoveFromEventList>
 801077e:	4603      	mov	r3, r0
 8010780:	2b00      	cmp	r3, #0
 8010782:	d00e      	beq.n	80107a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d00b      	beq.n	80107a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	2201      	movs	r2, #1
 801078e:	601a      	str	r2, [r3, #0]
 8010790:	e007      	b.n	80107a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010792:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010796:	3301      	adds	r3, #1
 8010798:	b2db      	uxtb	r3, r3
 801079a:	b25a      	sxtb	r2, r3
 801079c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801079e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80107a2:	2301      	movs	r3, #1
 80107a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80107a6:	e001      	b.n	80107ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80107a8:	2300      	movs	r3, #0
 80107aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80107ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107ae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80107b0:	697b      	ldr	r3, [r7, #20]
 80107b2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80107b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80107b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80107ba:	4618      	mov	r0, r3
 80107bc:	3740      	adds	r7, #64	; 0x40
 80107be:	46bd      	mov	sp, r7
 80107c0:	bd80      	pop	{r7, pc}
	...

080107c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b08c      	sub	sp, #48	; 0x30
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	60f8      	str	r0, [r7, #12]
 80107cc:	60b9      	str	r1, [r7, #8]
 80107ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80107d0:	2300      	movs	r3, #0
 80107d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80107d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d10a      	bne.n	80107f4 <xQueueReceive+0x30>
	__asm volatile
 80107de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107e2:	f383 8811 	msr	BASEPRI, r3
 80107e6:	f3bf 8f6f 	isb	sy
 80107ea:	f3bf 8f4f 	dsb	sy
 80107ee:	623b      	str	r3, [r7, #32]
}
 80107f0:	bf00      	nop
 80107f2:	e7fe      	b.n	80107f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80107f4:	68bb      	ldr	r3, [r7, #8]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d103      	bne.n	8010802 <xQueueReceive+0x3e>
 80107fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d101      	bne.n	8010806 <xQueueReceive+0x42>
 8010802:	2301      	movs	r3, #1
 8010804:	e000      	b.n	8010808 <xQueueReceive+0x44>
 8010806:	2300      	movs	r3, #0
 8010808:	2b00      	cmp	r3, #0
 801080a:	d10a      	bne.n	8010822 <xQueueReceive+0x5e>
	__asm volatile
 801080c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010810:	f383 8811 	msr	BASEPRI, r3
 8010814:	f3bf 8f6f 	isb	sy
 8010818:	f3bf 8f4f 	dsb	sy
 801081c:	61fb      	str	r3, [r7, #28]
}
 801081e:	bf00      	nop
 8010820:	e7fe      	b.n	8010820 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010822:	f001 f82f 	bl	8011884 <xTaskGetSchedulerState>
 8010826:	4603      	mov	r3, r0
 8010828:	2b00      	cmp	r3, #0
 801082a:	d102      	bne.n	8010832 <xQueueReceive+0x6e>
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d101      	bne.n	8010836 <xQueueReceive+0x72>
 8010832:	2301      	movs	r3, #1
 8010834:	e000      	b.n	8010838 <xQueueReceive+0x74>
 8010836:	2300      	movs	r3, #0
 8010838:	2b00      	cmp	r3, #0
 801083a:	d10a      	bne.n	8010852 <xQueueReceive+0x8e>
	__asm volatile
 801083c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010840:	f383 8811 	msr	BASEPRI, r3
 8010844:	f3bf 8f6f 	isb	sy
 8010848:	f3bf 8f4f 	dsb	sy
 801084c:	61bb      	str	r3, [r7, #24]
}
 801084e:	bf00      	nop
 8010850:	e7fe      	b.n	8010850 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010852:	f001 fa4f 	bl	8011cf4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801085a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801085c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801085e:	2b00      	cmp	r3, #0
 8010860:	d01f      	beq.n	80108a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010862:	68b9      	ldr	r1, [r7, #8]
 8010864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010866:	f000 f977 	bl	8010b58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801086a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801086c:	1e5a      	subs	r2, r3, #1
 801086e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010870:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010874:	691b      	ldr	r3, [r3, #16]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d00f      	beq.n	801089a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801087a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801087c:	3310      	adds	r3, #16
 801087e:	4618      	mov	r0, r3
 8010880:	f000 fe40 	bl	8011504 <xTaskRemoveFromEventList>
 8010884:	4603      	mov	r3, r0
 8010886:	2b00      	cmp	r3, #0
 8010888:	d007      	beq.n	801089a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801088a:	4b3d      	ldr	r3, [pc, #244]	; (8010980 <xQueueReceive+0x1bc>)
 801088c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010890:	601a      	str	r2, [r3, #0]
 8010892:	f3bf 8f4f 	dsb	sy
 8010896:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801089a:	f001 fa5b 	bl	8011d54 <vPortExitCritical>
				return pdPASS;
 801089e:	2301      	movs	r3, #1
 80108a0:	e069      	b.n	8010976 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d103      	bne.n	80108b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80108a8:	f001 fa54 	bl	8011d54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80108ac:	2300      	movs	r3, #0
 80108ae:	e062      	b.n	8010976 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80108b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d106      	bne.n	80108c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80108b6:	f107 0310 	add.w	r3, r7, #16
 80108ba:	4618      	mov	r0, r3
 80108bc:	f000 fe84 	bl	80115c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80108c0:	2301      	movs	r3, #1
 80108c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80108c4:	f001 fa46 	bl	8011d54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80108c8:	f000 fc34 	bl	8011134 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80108cc:	f001 fa12 	bl	8011cf4 <vPortEnterCritical>
 80108d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80108d6:	b25b      	sxtb	r3, r3
 80108d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108dc:	d103      	bne.n	80108e6 <xQueueReceive+0x122>
 80108de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108e0:	2200      	movs	r2, #0
 80108e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80108e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80108ec:	b25b      	sxtb	r3, r3
 80108ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108f2:	d103      	bne.n	80108fc <xQueueReceive+0x138>
 80108f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108f6:	2200      	movs	r2, #0
 80108f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80108fc:	f001 fa2a 	bl	8011d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010900:	1d3a      	adds	r2, r7, #4
 8010902:	f107 0310 	add.w	r3, r7, #16
 8010906:	4611      	mov	r1, r2
 8010908:	4618      	mov	r0, r3
 801090a:	f000 fe73 	bl	80115f4 <xTaskCheckForTimeOut>
 801090e:	4603      	mov	r3, r0
 8010910:	2b00      	cmp	r3, #0
 8010912:	d123      	bne.n	801095c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010916:	f000 f997 	bl	8010c48 <prvIsQueueEmpty>
 801091a:	4603      	mov	r3, r0
 801091c:	2b00      	cmp	r3, #0
 801091e:	d017      	beq.n	8010950 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010922:	3324      	adds	r3, #36	; 0x24
 8010924:	687a      	ldr	r2, [r7, #4]
 8010926:	4611      	mov	r1, r2
 8010928:	4618      	mov	r0, r3
 801092a:	f000 fdc7 	bl	80114bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801092e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010930:	f000 f938 	bl	8010ba4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010934:	f000 fc0c 	bl	8011150 <xTaskResumeAll>
 8010938:	4603      	mov	r3, r0
 801093a:	2b00      	cmp	r3, #0
 801093c:	d189      	bne.n	8010852 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801093e:	4b10      	ldr	r3, [pc, #64]	; (8010980 <xQueueReceive+0x1bc>)
 8010940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010944:	601a      	str	r2, [r3, #0]
 8010946:	f3bf 8f4f 	dsb	sy
 801094a:	f3bf 8f6f 	isb	sy
 801094e:	e780      	b.n	8010852 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010952:	f000 f927 	bl	8010ba4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010956:	f000 fbfb 	bl	8011150 <xTaskResumeAll>
 801095a:	e77a      	b.n	8010852 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801095c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801095e:	f000 f921 	bl	8010ba4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010962:	f000 fbf5 	bl	8011150 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010968:	f000 f96e 	bl	8010c48 <prvIsQueueEmpty>
 801096c:	4603      	mov	r3, r0
 801096e:	2b00      	cmp	r3, #0
 8010970:	f43f af6f 	beq.w	8010852 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010974:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010976:	4618      	mov	r0, r3
 8010978:	3730      	adds	r7, #48	; 0x30
 801097a:	46bd      	mov	sp, r7
 801097c:	bd80      	pop	{r7, pc}
 801097e:	bf00      	nop
 8010980:	e000ed04 	.word	0xe000ed04

08010984 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b08e      	sub	sp, #56	; 0x38
 8010988:	af00      	add	r7, sp, #0
 801098a:	60f8      	str	r0, [r7, #12]
 801098c:	60b9      	str	r1, [r7, #8]
 801098e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010996:	2b00      	cmp	r3, #0
 8010998:	d10a      	bne.n	80109b0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801099a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801099e:	f383 8811 	msr	BASEPRI, r3
 80109a2:	f3bf 8f6f 	isb	sy
 80109a6:	f3bf 8f4f 	dsb	sy
 80109aa:	623b      	str	r3, [r7, #32]
}
 80109ac:	bf00      	nop
 80109ae:	e7fe      	b.n	80109ae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80109b0:	68bb      	ldr	r3, [r7, #8]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d103      	bne.n	80109be <xQueueReceiveFromISR+0x3a>
 80109b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d101      	bne.n	80109c2 <xQueueReceiveFromISR+0x3e>
 80109be:	2301      	movs	r3, #1
 80109c0:	e000      	b.n	80109c4 <xQueueReceiveFromISR+0x40>
 80109c2:	2300      	movs	r3, #0
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d10a      	bne.n	80109de <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80109c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109cc:	f383 8811 	msr	BASEPRI, r3
 80109d0:	f3bf 8f6f 	isb	sy
 80109d4:	f3bf 8f4f 	dsb	sy
 80109d8:	61fb      	str	r3, [r7, #28]
}
 80109da:	bf00      	nop
 80109dc:	e7fe      	b.n	80109dc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80109de:	f001 fa6b 	bl	8011eb8 <vPortValidateInterruptPriority>
	__asm volatile
 80109e2:	f3ef 8211 	mrs	r2, BASEPRI
 80109e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109ea:	f383 8811 	msr	BASEPRI, r3
 80109ee:	f3bf 8f6f 	isb	sy
 80109f2:	f3bf 8f4f 	dsb	sy
 80109f6:	61ba      	str	r2, [r7, #24]
 80109f8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80109fa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80109fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80109fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a02:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d02f      	beq.n	8010a6a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010a10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010a14:	68b9      	ldr	r1, [r7, #8]
 8010a16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a18:	f000 f89e 	bl	8010b58 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a1e:	1e5a      	subs	r2, r3, #1
 8010a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a22:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010a24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a2c:	d112      	bne.n	8010a54 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a30:	691b      	ldr	r3, [r3, #16]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d016      	beq.n	8010a64 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a38:	3310      	adds	r3, #16
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	f000 fd62 	bl	8011504 <xTaskRemoveFromEventList>
 8010a40:	4603      	mov	r3, r0
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d00e      	beq.n	8010a64 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d00b      	beq.n	8010a64 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	2201      	movs	r2, #1
 8010a50:	601a      	str	r2, [r3, #0]
 8010a52:	e007      	b.n	8010a64 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010a54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010a58:	3301      	adds	r3, #1
 8010a5a:	b2db      	uxtb	r3, r3
 8010a5c:	b25a      	sxtb	r2, r3
 8010a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010a64:	2301      	movs	r3, #1
 8010a66:	637b      	str	r3, [r7, #52]	; 0x34
 8010a68:	e001      	b.n	8010a6e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	637b      	str	r3, [r7, #52]	; 0x34
 8010a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a70:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010a72:	693b      	ldr	r3, [r7, #16]
 8010a74:	f383 8811 	msr	BASEPRI, r3
}
 8010a78:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	3738      	adds	r7, #56	; 0x38
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd80      	pop	{r7, pc}

08010a84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b086      	sub	sp, #24
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	60f8      	str	r0, [r7, #12]
 8010a8c:	60b9      	str	r1, [r7, #8]
 8010a8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010a90:	2300      	movs	r3, #0
 8010a92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d10d      	bne.n	8010abe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d14d      	bne.n	8010b46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	689b      	ldr	r3, [r3, #8]
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f000 ff06 	bl	80118c0 <xTaskPriorityDisinherit>
 8010ab4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	2200      	movs	r2, #0
 8010aba:	609a      	str	r2, [r3, #8]
 8010abc:	e043      	b.n	8010b46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d119      	bne.n	8010af8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	6858      	ldr	r0, [r3, #4]
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010acc:	461a      	mov	r2, r3
 8010ace:	68b9      	ldr	r1, [r7, #8]
 8010ad0:	f002 f8b6 	bl	8012c40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	685a      	ldr	r2, [r3, #4]
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010adc:	441a      	add	r2, r3
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	685a      	ldr	r2, [r3, #4]
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	689b      	ldr	r3, [r3, #8]
 8010aea:	429a      	cmp	r2, r3
 8010aec:	d32b      	bcc.n	8010b46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	681a      	ldr	r2, [r3, #0]
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	605a      	str	r2, [r3, #4]
 8010af6:	e026      	b.n	8010b46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	68d8      	ldr	r0, [r3, #12]
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b00:	461a      	mov	r2, r3
 8010b02:	68b9      	ldr	r1, [r7, #8]
 8010b04:	f002 f89c 	bl	8012c40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	68da      	ldr	r2, [r3, #12]
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b10:	425b      	negs	r3, r3
 8010b12:	441a      	add	r2, r3
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	68da      	ldr	r2, [r3, #12]
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	429a      	cmp	r2, r3
 8010b22:	d207      	bcs.n	8010b34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	689a      	ldr	r2, [r3, #8]
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b2c:	425b      	negs	r3, r3
 8010b2e:	441a      	add	r2, r3
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	2b02      	cmp	r3, #2
 8010b38:	d105      	bne.n	8010b46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010b3a:	693b      	ldr	r3, [r7, #16]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d002      	beq.n	8010b46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010b40:	693b      	ldr	r3, [r7, #16]
 8010b42:	3b01      	subs	r3, #1
 8010b44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010b46:	693b      	ldr	r3, [r7, #16]
 8010b48:	1c5a      	adds	r2, r3, #1
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010b4e:	697b      	ldr	r3, [r7, #20]
}
 8010b50:	4618      	mov	r0, r3
 8010b52:	3718      	adds	r7, #24
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}

08010b58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b082      	sub	sp, #8
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
 8010b60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d018      	beq.n	8010b9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	68da      	ldr	r2, [r3, #12]
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b72:	441a      	add	r2, r3
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	68da      	ldr	r2, [r3, #12]
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	689b      	ldr	r3, [r3, #8]
 8010b80:	429a      	cmp	r2, r3
 8010b82:	d303      	bcc.n	8010b8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	681a      	ldr	r2, [r3, #0]
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	68d9      	ldr	r1, [r3, #12]
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b94:	461a      	mov	r2, r3
 8010b96:	6838      	ldr	r0, [r7, #0]
 8010b98:	f002 f852 	bl	8012c40 <memcpy>
	}
}
 8010b9c:	bf00      	nop
 8010b9e:	3708      	adds	r7, #8
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	bd80      	pop	{r7, pc}

08010ba4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b084      	sub	sp, #16
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010bac:	f001 f8a2 	bl	8011cf4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010bb6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010bb8:	e011      	b.n	8010bde <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d012      	beq.n	8010be8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	3324      	adds	r3, #36	; 0x24
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	f000 fc9c 	bl	8011504 <xTaskRemoveFromEventList>
 8010bcc:	4603      	mov	r3, r0
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d001      	beq.n	8010bd6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010bd2:	f000 fd71 	bl	80116b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010bd6:	7bfb      	ldrb	r3, [r7, #15]
 8010bd8:	3b01      	subs	r3, #1
 8010bda:	b2db      	uxtb	r3, r3
 8010bdc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	dce9      	bgt.n	8010bba <prvUnlockQueue+0x16>
 8010be6:	e000      	b.n	8010bea <prvUnlockQueue+0x46>
					break;
 8010be8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	22ff      	movs	r2, #255	; 0xff
 8010bee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010bf2:	f001 f8af 	bl	8011d54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010bf6:	f001 f87d 	bl	8011cf4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010c00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010c02:	e011      	b.n	8010c28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	691b      	ldr	r3, [r3, #16]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d012      	beq.n	8010c32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	3310      	adds	r3, #16
 8010c10:	4618      	mov	r0, r3
 8010c12:	f000 fc77 	bl	8011504 <xTaskRemoveFromEventList>
 8010c16:	4603      	mov	r3, r0
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d001      	beq.n	8010c20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010c1c:	f000 fd4c 	bl	80116b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010c20:	7bbb      	ldrb	r3, [r7, #14]
 8010c22:	3b01      	subs	r3, #1
 8010c24:	b2db      	uxtb	r3, r3
 8010c26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010c28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	dce9      	bgt.n	8010c04 <prvUnlockQueue+0x60>
 8010c30:	e000      	b.n	8010c34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010c32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	22ff      	movs	r2, #255	; 0xff
 8010c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010c3c:	f001 f88a 	bl	8011d54 <vPortExitCritical>
}
 8010c40:	bf00      	nop
 8010c42:	3710      	adds	r7, #16
 8010c44:	46bd      	mov	sp, r7
 8010c46:	bd80      	pop	{r7, pc}

08010c48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b084      	sub	sp, #16
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010c50:	f001 f850 	bl	8011cf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d102      	bne.n	8010c62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010c5c:	2301      	movs	r3, #1
 8010c5e:	60fb      	str	r3, [r7, #12]
 8010c60:	e001      	b.n	8010c66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010c62:	2300      	movs	r3, #0
 8010c64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010c66:	f001 f875 	bl	8011d54 <vPortExitCritical>

	return xReturn;
 8010c6a:	68fb      	ldr	r3, [r7, #12]
}
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	3710      	adds	r7, #16
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd80      	pop	{r7, pc}

08010c74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b084      	sub	sp, #16
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010c7c:	f001 f83a 	bl	8011cf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c88:	429a      	cmp	r2, r3
 8010c8a:	d102      	bne.n	8010c92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010c8c:	2301      	movs	r3, #1
 8010c8e:	60fb      	str	r3, [r7, #12]
 8010c90:	e001      	b.n	8010c96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010c92:	2300      	movs	r3, #0
 8010c94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010c96:	f001 f85d 	bl	8011d54 <vPortExitCritical>

	return xReturn;
 8010c9a:	68fb      	ldr	r3, [r7, #12]
}
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	3710      	adds	r7, #16
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	bd80      	pop	{r7, pc}

08010ca4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b08e      	sub	sp, #56	; 0x38
 8010ca8:	af04      	add	r7, sp, #16
 8010caa:	60f8      	str	r0, [r7, #12]
 8010cac:	60b9      	str	r1, [r7, #8]
 8010cae:	607a      	str	r2, [r7, #4]
 8010cb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d10a      	bne.n	8010cce <xTaskCreateStatic+0x2a>
	__asm volatile
 8010cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cbc:	f383 8811 	msr	BASEPRI, r3
 8010cc0:	f3bf 8f6f 	isb	sy
 8010cc4:	f3bf 8f4f 	dsb	sy
 8010cc8:	623b      	str	r3, [r7, #32]
}
 8010cca:	bf00      	nop
 8010ccc:	e7fe      	b.n	8010ccc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d10a      	bne.n	8010cea <xTaskCreateStatic+0x46>
	__asm volatile
 8010cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cd8:	f383 8811 	msr	BASEPRI, r3
 8010cdc:	f3bf 8f6f 	isb	sy
 8010ce0:	f3bf 8f4f 	dsb	sy
 8010ce4:	61fb      	str	r3, [r7, #28]
}
 8010ce6:	bf00      	nop
 8010ce8:	e7fe      	b.n	8010ce8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010cea:	23b4      	movs	r3, #180	; 0xb4
 8010cec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010cee:	693b      	ldr	r3, [r7, #16]
 8010cf0:	2bb4      	cmp	r3, #180	; 0xb4
 8010cf2:	d00a      	beq.n	8010d0a <xTaskCreateStatic+0x66>
	__asm volatile
 8010cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cf8:	f383 8811 	msr	BASEPRI, r3
 8010cfc:	f3bf 8f6f 	isb	sy
 8010d00:	f3bf 8f4f 	dsb	sy
 8010d04:	61bb      	str	r3, [r7, #24]
}
 8010d06:	bf00      	nop
 8010d08:	e7fe      	b.n	8010d08 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010d0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d01e      	beq.n	8010d50 <xTaskCreateStatic+0xac>
 8010d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d01b      	beq.n	8010d50 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d24:	2202      	movs	r2, #2
 8010d26:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	9303      	str	r3, [sp, #12]
 8010d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d30:	9302      	str	r3, [sp, #8]
 8010d32:	f107 0314 	add.w	r3, r7, #20
 8010d36:	9301      	str	r3, [sp, #4]
 8010d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d3a:	9300      	str	r3, [sp, #0]
 8010d3c:	683b      	ldr	r3, [r7, #0]
 8010d3e:	687a      	ldr	r2, [r7, #4]
 8010d40:	68b9      	ldr	r1, [r7, #8]
 8010d42:	68f8      	ldr	r0, [r7, #12]
 8010d44:	f000 f850 	bl	8010de8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010d48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d4a:	f000 f8eb 	bl	8010f24 <prvAddNewTaskToReadyList>
 8010d4e:	e001      	b.n	8010d54 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010d50:	2300      	movs	r3, #0
 8010d52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010d54:	697b      	ldr	r3, [r7, #20]
	}
 8010d56:	4618      	mov	r0, r3
 8010d58:	3728      	adds	r7, #40	; 0x28
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	bd80      	pop	{r7, pc}

08010d5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010d5e:	b580      	push	{r7, lr}
 8010d60:	b08c      	sub	sp, #48	; 0x30
 8010d62:	af04      	add	r7, sp, #16
 8010d64:	60f8      	str	r0, [r7, #12]
 8010d66:	60b9      	str	r1, [r7, #8]
 8010d68:	603b      	str	r3, [r7, #0]
 8010d6a:	4613      	mov	r3, r2
 8010d6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010d6e:	88fb      	ldrh	r3, [r7, #6]
 8010d70:	009b      	lsls	r3, r3, #2
 8010d72:	4618      	mov	r0, r3
 8010d74:	f001 f8e0 	bl	8011f38 <pvPortMalloc>
 8010d78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010d7a:	697b      	ldr	r3, [r7, #20]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d00e      	beq.n	8010d9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010d80:	20b4      	movs	r0, #180	; 0xb4
 8010d82:	f001 f8d9 	bl	8011f38 <pvPortMalloc>
 8010d86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010d88:	69fb      	ldr	r3, [r7, #28]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d003      	beq.n	8010d96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010d8e:	69fb      	ldr	r3, [r7, #28]
 8010d90:	697a      	ldr	r2, [r7, #20]
 8010d92:	631a      	str	r2, [r3, #48]	; 0x30
 8010d94:	e005      	b.n	8010da2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010d96:	6978      	ldr	r0, [r7, #20]
 8010d98:	f001 f99a 	bl	80120d0 <vPortFree>
 8010d9c:	e001      	b.n	8010da2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010d9e:	2300      	movs	r3, #0
 8010da0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010da2:	69fb      	ldr	r3, [r7, #28]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d017      	beq.n	8010dd8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010da8:	69fb      	ldr	r3, [r7, #28]
 8010daa:	2200      	movs	r2, #0
 8010dac:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010db0:	88fa      	ldrh	r2, [r7, #6]
 8010db2:	2300      	movs	r3, #0
 8010db4:	9303      	str	r3, [sp, #12]
 8010db6:	69fb      	ldr	r3, [r7, #28]
 8010db8:	9302      	str	r3, [sp, #8]
 8010dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dbc:	9301      	str	r3, [sp, #4]
 8010dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dc0:	9300      	str	r3, [sp, #0]
 8010dc2:	683b      	ldr	r3, [r7, #0]
 8010dc4:	68b9      	ldr	r1, [r7, #8]
 8010dc6:	68f8      	ldr	r0, [r7, #12]
 8010dc8:	f000 f80e 	bl	8010de8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010dcc:	69f8      	ldr	r0, [r7, #28]
 8010dce:	f000 f8a9 	bl	8010f24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010dd2:	2301      	movs	r3, #1
 8010dd4:	61bb      	str	r3, [r7, #24]
 8010dd6:	e002      	b.n	8010dde <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8010ddc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010dde:	69bb      	ldr	r3, [r7, #24]
	}
 8010de0:	4618      	mov	r0, r3
 8010de2:	3720      	adds	r7, #32
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}

08010de8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b088      	sub	sp, #32
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	60f8      	str	r0, [r7, #12]
 8010df0:	60b9      	str	r1, [r7, #8]
 8010df2:	607a      	str	r2, [r7, #4]
 8010df4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010e00:	3b01      	subs	r3, #1
 8010e02:	009b      	lsls	r3, r3, #2
 8010e04:	4413      	add	r3, r2
 8010e06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010e08:	69bb      	ldr	r3, [r7, #24]
 8010e0a:	f023 0307 	bic.w	r3, r3, #7
 8010e0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010e10:	69bb      	ldr	r3, [r7, #24]
 8010e12:	f003 0307 	and.w	r3, r3, #7
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d00a      	beq.n	8010e30 <prvInitialiseNewTask+0x48>
	__asm volatile
 8010e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e1e:	f383 8811 	msr	BASEPRI, r3
 8010e22:	f3bf 8f6f 	isb	sy
 8010e26:	f3bf 8f4f 	dsb	sy
 8010e2a:	617b      	str	r3, [r7, #20]
}
 8010e2c:	bf00      	nop
 8010e2e:	e7fe      	b.n	8010e2e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010e30:	68bb      	ldr	r3, [r7, #8]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d01f      	beq.n	8010e76 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010e36:	2300      	movs	r3, #0
 8010e38:	61fb      	str	r3, [r7, #28]
 8010e3a:	e012      	b.n	8010e62 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010e3c:	68ba      	ldr	r2, [r7, #8]
 8010e3e:	69fb      	ldr	r3, [r7, #28]
 8010e40:	4413      	add	r3, r2
 8010e42:	7819      	ldrb	r1, [r3, #0]
 8010e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e46:	69fb      	ldr	r3, [r7, #28]
 8010e48:	4413      	add	r3, r2
 8010e4a:	3334      	adds	r3, #52	; 0x34
 8010e4c:	460a      	mov	r2, r1
 8010e4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010e50:	68ba      	ldr	r2, [r7, #8]
 8010e52:	69fb      	ldr	r3, [r7, #28]
 8010e54:	4413      	add	r3, r2
 8010e56:	781b      	ldrb	r3, [r3, #0]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d006      	beq.n	8010e6a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010e5c:	69fb      	ldr	r3, [r7, #28]
 8010e5e:	3301      	adds	r3, #1
 8010e60:	61fb      	str	r3, [r7, #28]
 8010e62:	69fb      	ldr	r3, [r7, #28]
 8010e64:	2b0f      	cmp	r3, #15
 8010e66:	d9e9      	bls.n	8010e3c <prvInitialiseNewTask+0x54>
 8010e68:	e000      	b.n	8010e6c <prvInitialiseNewTask+0x84>
			{
				break;
 8010e6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e6e:	2200      	movs	r2, #0
 8010e70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010e74:	e003      	b.n	8010e7e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e78:	2200      	movs	r2, #0
 8010e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e80:	2b06      	cmp	r3, #6
 8010e82:	d901      	bls.n	8010e88 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010e84:	2306      	movs	r3, #6
 8010e86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e92:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e96:	2200      	movs	r2, #0
 8010e98:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e9c:	3304      	adds	r3, #4
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f7ff f928 	bl	80100f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ea6:	3318      	adds	r3, #24
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f7ff f923 	bl	80100f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010eb2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eb6:	f1c3 0207 	rsb	r2, r3, #7
 8010eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ebc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ec2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ece:	2200      	movs	r2, #0
 8010ed0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ed6:	334c      	adds	r3, #76	; 0x4c
 8010ed8:	2260      	movs	r2, #96	; 0x60
 8010eda:	2100      	movs	r1, #0
 8010edc:	4618      	mov	r0, r3
 8010ede:	f001 febd 	bl	8012c5c <memset>
 8010ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ee4:	4a0c      	ldr	r2, [pc, #48]	; (8010f18 <prvInitialiseNewTask+0x130>)
 8010ee6:	651a      	str	r2, [r3, #80]	; 0x50
 8010ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eea:	4a0c      	ldr	r2, [pc, #48]	; (8010f1c <prvInitialiseNewTask+0x134>)
 8010eec:	655a      	str	r2, [r3, #84]	; 0x54
 8010eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ef0:	4a0b      	ldr	r2, [pc, #44]	; (8010f20 <prvInitialiseNewTask+0x138>)
 8010ef2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010ef4:	683a      	ldr	r2, [r7, #0]
 8010ef6:	68f9      	ldr	r1, [r7, #12]
 8010ef8:	69b8      	ldr	r0, [r7, #24]
 8010efa:	f000 fdcd 	bl	8011a98 <pxPortInitialiseStack>
 8010efe:	4602      	mov	r2, r0
 8010f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f02:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d002      	beq.n	8010f10 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f0e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010f10:	bf00      	nop
 8010f12:	3720      	adds	r7, #32
 8010f14:	46bd      	mov	sp, r7
 8010f16:	bd80      	pop	{r7, pc}
 8010f18:	08014750 	.word	0x08014750
 8010f1c:	08014770 	.word	0x08014770
 8010f20:	08014730 	.word	0x08014730

08010f24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b082      	sub	sp, #8
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010f2c:	f000 fee2 	bl	8011cf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010f30:	4b2a      	ldr	r3, [pc, #168]	; (8010fdc <prvAddNewTaskToReadyList+0xb8>)
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	3301      	adds	r3, #1
 8010f36:	4a29      	ldr	r2, [pc, #164]	; (8010fdc <prvAddNewTaskToReadyList+0xb8>)
 8010f38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010f3a:	4b29      	ldr	r3, [pc, #164]	; (8010fe0 <prvAddNewTaskToReadyList+0xbc>)
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d109      	bne.n	8010f56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010f42:	4a27      	ldr	r2, [pc, #156]	; (8010fe0 <prvAddNewTaskToReadyList+0xbc>)
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010f48:	4b24      	ldr	r3, [pc, #144]	; (8010fdc <prvAddNewTaskToReadyList+0xb8>)
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	2b01      	cmp	r3, #1
 8010f4e:	d110      	bne.n	8010f72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010f50:	f000 fbd6 	bl	8011700 <prvInitialiseTaskLists>
 8010f54:	e00d      	b.n	8010f72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010f56:	4b23      	ldr	r3, [pc, #140]	; (8010fe4 <prvAddNewTaskToReadyList+0xc0>)
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d109      	bne.n	8010f72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010f5e:	4b20      	ldr	r3, [pc, #128]	; (8010fe0 <prvAddNewTaskToReadyList+0xbc>)
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f68:	429a      	cmp	r2, r3
 8010f6a:	d802      	bhi.n	8010f72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010f6c:	4a1c      	ldr	r2, [pc, #112]	; (8010fe0 <prvAddNewTaskToReadyList+0xbc>)
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010f72:	4b1d      	ldr	r3, [pc, #116]	; (8010fe8 <prvAddNewTaskToReadyList+0xc4>)
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	3301      	adds	r3, #1
 8010f78:	4a1b      	ldr	r2, [pc, #108]	; (8010fe8 <prvAddNewTaskToReadyList+0xc4>)
 8010f7a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f80:	2201      	movs	r2, #1
 8010f82:	409a      	lsls	r2, r3
 8010f84:	4b19      	ldr	r3, [pc, #100]	; (8010fec <prvAddNewTaskToReadyList+0xc8>)
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	4313      	orrs	r3, r2
 8010f8a:	4a18      	ldr	r2, [pc, #96]	; (8010fec <prvAddNewTaskToReadyList+0xc8>)
 8010f8c:	6013      	str	r3, [r2, #0]
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f92:	4613      	mov	r3, r2
 8010f94:	009b      	lsls	r3, r3, #2
 8010f96:	4413      	add	r3, r2
 8010f98:	009b      	lsls	r3, r3, #2
 8010f9a:	4a15      	ldr	r2, [pc, #84]	; (8010ff0 <prvAddNewTaskToReadyList+0xcc>)
 8010f9c:	441a      	add	r2, r3
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	3304      	adds	r3, #4
 8010fa2:	4619      	mov	r1, r3
 8010fa4:	4610      	mov	r0, r2
 8010fa6:	f7ff f8b2 	bl	801010e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010faa:	f000 fed3 	bl	8011d54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010fae:	4b0d      	ldr	r3, [pc, #52]	; (8010fe4 <prvAddNewTaskToReadyList+0xc0>)
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d00e      	beq.n	8010fd4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010fb6:	4b0a      	ldr	r3, [pc, #40]	; (8010fe0 <prvAddNewTaskToReadyList+0xbc>)
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fc0:	429a      	cmp	r2, r3
 8010fc2:	d207      	bcs.n	8010fd4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010fc4:	4b0b      	ldr	r3, [pc, #44]	; (8010ff4 <prvAddNewTaskToReadyList+0xd0>)
 8010fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fca:	601a      	str	r2, [r3, #0]
 8010fcc:	f3bf 8f4f 	dsb	sy
 8010fd0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010fd4:	bf00      	nop
 8010fd6:	3708      	adds	r7, #8
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	bd80      	pop	{r7, pc}
 8010fdc:	20001f68 	.word	0x20001f68
 8010fe0:	20001e68 	.word	0x20001e68
 8010fe4:	20001f74 	.word	0x20001f74
 8010fe8:	20001f84 	.word	0x20001f84
 8010fec:	20001f70 	.word	0x20001f70
 8010ff0:	20001e6c 	.word	0x20001e6c
 8010ff4:	e000ed04 	.word	0xe000ed04

08010ff8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b084      	sub	sp, #16
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011000:	2300      	movs	r3, #0
 8011002:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d017      	beq.n	801103a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801100a:	4b13      	ldr	r3, [pc, #76]	; (8011058 <vTaskDelay+0x60>)
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d00a      	beq.n	8011028 <vTaskDelay+0x30>
	__asm volatile
 8011012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011016:	f383 8811 	msr	BASEPRI, r3
 801101a:	f3bf 8f6f 	isb	sy
 801101e:	f3bf 8f4f 	dsb	sy
 8011022:	60bb      	str	r3, [r7, #8]
}
 8011024:	bf00      	nop
 8011026:	e7fe      	b.n	8011026 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011028:	f000 f884 	bl	8011134 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801102c:	2100      	movs	r1, #0
 801102e:	6878      	ldr	r0, [r7, #4]
 8011030:	f000 fccc 	bl	80119cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011034:	f000 f88c 	bl	8011150 <xTaskResumeAll>
 8011038:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d107      	bne.n	8011050 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8011040:	4b06      	ldr	r3, [pc, #24]	; (801105c <vTaskDelay+0x64>)
 8011042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011046:	601a      	str	r2, [r3, #0]
 8011048:	f3bf 8f4f 	dsb	sy
 801104c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011050:	bf00      	nop
 8011052:	3710      	adds	r7, #16
 8011054:	46bd      	mov	sp, r7
 8011056:	bd80      	pop	{r7, pc}
 8011058:	20001f90 	.word	0x20001f90
 801105c:	e000ed04 	.word	0xe000ed04

08011060 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b08a      	sub	sp, #40	; 0x28
 8011064:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011066:	2300      	movs	r3, #0
 8011068:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801106a:	2300      	movs	r3, #0
 801106c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801106e:	463a      	mov	r2, r7
 8011070:	1d39      	adds	r1, r7, #4
 8011072:	f107 0308 	add.w	r3, r7, #8
 8011076:	4618      	mov	r0, r3
 8011078:	f7ef fe3c 	bl	8000cf4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801107c:	6839      	ldr	r1, [r7, #0]
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	68ba      	ldr	r2, [r7, #8]
 8011082:	9202      	str	r2, [sp, #8]
 8011084:	9301      	str	r3, [sp, #4]
 8011086:	2300      	movs	r3, #0
 8011088:	9300      	str	r3, [sp, #0]
 801108a:	2300      	movs	r3, #0
 801108c:	460a      	mov	r2, r1
 801108e:	4921      	ldr	r1, [pc, #132]	; (8011114 <vTaskStartScheduler+0xb4>)
 8011090:	4821      	ldr	r0, [pc, #132]	; (8011118 <vTaskStartScheduler+0xb8>)
 8011092:	f7ff fe07 	bl	8010ca4 <xTaskCreateStatic>
 8011096:	4603      	mov	r3, r0
 8011098:	4a20      	ldr	r2, [pc, #128]	; (801111c <vTaskStartScheduler+0xbc>)
 801109a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801109c:	4b1f      	ldr	r3, [pc, #124]	; (801111c <vTaskStartScheduler+0xbc>)
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d002      	beq.n	80110aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80110a4:	2301      	movs	r3, #1
 80110a6:	617b      	str	r3, [r7, #20]
 80110a8:	e001      	b.n	80110ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80110aa:	2300      	movs	r3, #0
 80110ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80110ae:	697b      	ldr	r3, [r7, #20]
 80110b0:	2b01      	cmp	r3, #1
 80110b2:	d11b      	bne.n	80110ec <vTaskStartScheduler+0x8c>
	__asm volatile
 80110b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110b8:	f383 8811 	msr	BASEPRI, r3
 80110bc:	f3bf 8f6f 	isb	sy
 80110c0:	f3bf 8f4f 	dsb	sy
 80110c4:	613b      	str	r3, [r7, #16]
}
 80110c6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80110c8:	4b15      	ldr	r3, [pc, #84]	; (8011120 <vTaskStartScheduler+0xc0>)
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	334c      	adds	r3, #76	; 0x4c
 80110ce:	4a15      	ldr	r2, [pc, #84]	; (8011124 <vTaskStartScheduler+0xc4>)
 80110d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80110d2:	4b15      	ldr	r3, [pc, #84]	; (8011128 <vTaskStartScheduler+0xc8>)
 80110d4:	f04f 32ff 	mov.w	r2, #4294967295
 80110d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80110da:	4b14      	ldr	r3, [pc, #80]	; (801112c <vTaskStartScheduler+0xcc>)
 80110dc:	2201      	movs	r2, #1
 80110de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80110e0:	4b13      	ldr	r3, [pc, #76]	; (8011130 <vTaskStartScheduler+0xd0>)
 80110e2:	2200      	movs	r2, #0
 80110e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80110e6:	f000 fd63 	bl	8011bb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80110ea:	e00e      	b.n	801110a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80110ec:	697b      	ldr	r3, [r7, #20]
 80110ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110f2:	d10a      	bne.n	801110a <vTaskStartScheduler+0xaa>
	__asm volatile
 80110f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110f8:	f383 8811 	msr	BASEPRI, r3
 80110fc:	f3bf 8f6f 	isb	sy
 8011100:	f3bf 8f4f 	dsb	sy
 8011104:	60fb      	str	r3, [r7, #12]
}
 8011106:	bf00      	nop
 8011108:	e7fe      	b.n	8011108 <vTaskStartScheduler+0xa8>
}
 801110a:	bf00      	nop
 801110c:	3718      	adds	r7, #24
 801110e:	46bd      	mov	sp, r7
 8011110:	bd80      	pop	{r7, pc}
 8011112:	bf00      	nop
 8011114:	080142d0 	.word	0x080142d0
 8011118:	080116d1 	.word	0x080116d1
 801111c:	20001f8c 	.word	0x20001f8c
 8011120:	20001e68 	.word	0x20001e68
 8011124:	200002b0 	.word	0x200002b0
 8011128:	20001f88 	.word	0x20001f88
 801112c:	20001f74 	.word	0x20001f74
 8011130:	20001f6c 	.word	0x20001f6c

08011134 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011134:	b480      	push	{r7}
 8011136:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011138:	4b04      	ldr	r3, [pc, #16]	; (801114c <vTaskSuspendAll+0x18>)
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	3301      	adds	r3, #1
 801113e:	4a03      	ldr	r2, [pc, #12]	; (801114c <vTaskSuspendAll+0x18>)
 8011140:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011142:	bf00      	nop
 8011144:	46bd      	mov	sp, r7
 8011146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801114a:	4770      	bx	lr
 801114c:	20001f90 	.word	0x20001f90

08011150 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011150:	b580      	push	{r7, lr}
 8011152:	b084      	sub	sp, #16
 8011154:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011156:	2300      	movs	r3, #0
 8011158:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801115a:	2300      	movs	r3, #0
 801115c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801115e:	4b41      	ldr	r3, [pc, #260]	; (8011264 <xTaskResumeAll+0x114>)
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d10a      	bne.n	801117c <xTaskResumeAll+0x2c>
	__asm volatile
 8011166:	f04f 0350 	mov.w	r3, #80	; 0x50
 801116a:	f383 8811 	msr	BASEPRI, r3
 801116e:	f3bf 8f6f 	isb	sy
 8011172:	f3bf 8f4f 	dsb	sy
 8011176:	603b      	str	r3, [r7, #0]
}
 8011178:	bf00      	nop
 801117a:	e7fe      	b.n	801117a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801117c:	f000 fdba 	bl	8011cf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011180:	4b38      	ldr	r3, [pc, #224]	; (8011264 <xTaskResumeAll+0x114>)
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	3b01      	subs	r3, #1
 8011186:	4a37      	ldr	r2, [pc, #220]	; (8011264 <xTaskResumeAll+0x114>)
 8011188:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801118a:	4b36      	ldr	r3, [pc, #216]	; (8011264 <xTaskResumeAll+0x114>)
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d161      	bne.n	8011256 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011192:	4b35      	ldr	r3, [pc, #212]	; (8011268 <xTaskResumeAll+0x118>)
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d05d      	beq.n	8011256 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801119a:	e02e      	b.n	80111fa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801119c:	4b33      	ldr	r3, [pc, #204]	; (801126c <xTaskResumeAll+0x11c>)
 801119e:	68db      	ldr	r3, [r3, #12]
 80111a0:	68db      	ldr	r3, [r3, #12]
 80111a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	3318      	adds	r3, #24
 80111a8:	4618      	mov	r0, r3
 80111aa:	f7ff f80d 	bl	80101c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	3304      	adds	r3, #4
 80111b2:	4618      	mov	r0, r3
 80111b4:	f7ff f808 	bl	80101c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111bc:	2201      	movs	r2, #1
 80111be:	409a      	lsls	r2, r3
 80111c0:	4b2b      	ldr	r3, [pc, #172]	; (8011270 <xTaskResumeAll+0x120>)
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	4313      	orrs	r3, r2
 80111c6:	4a2a      	ldr	r2, [pc, #168]	; (8011270 <xTaskResumeAll+0x120>)
 80111c8:	6013      	str	r3, [r2, #0]
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111ce:	4613      	mov	r3, r2
 80111d0:	009b      	lsls	r3, r3, #2
 80111d2:	4413      	add	r3, r2
 80111d4:	009b      	lsls	r3, r3, #2
 80111d6:	4a27      	ldr	r2, [pc, #156]	; (8011274 <xTaskResumeAll+0x124>)
 80111d8:	441a      	add	r2, r3
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	3304      	adds	r3, #4
 80111de:	4619      	mov	r1, r3
 80111e0:	4610      	mov	r0, r2
 80111e2:	f7fe ff94 	bl	801010e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111ea:	4b23      	ldr	r3, [pc, #140]	; (8011278 <xTaskResumeAll+0x128>)
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111f0:	429a      	cmp	r2, r3
 80111f2:	d302      	bcc.n	80111fa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80111f4:	4b21      	ldr	r3, [pc, #132]	; (801127c <xTaskResumeAll+0x12c>)
 80111f6:	2201      	movs	r2, #1
 80111f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80111fa:	4b1c      	ldr	r3, [pc, #112]	; (801126c <xTaskResumeAll+0x11c>)
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d1cc      	bne.n	801119c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d001      	beq.n	801120c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011208:	f000 fb1c 	bl	8011844 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801120c:	4b1c      	ldr	r3, [pc, #112]	; (8011280 <xTaskResumeAll+0x130>)
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d010      	beq.n	801123a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011218:	f000 f836 	bl	8011288 <xTaskIncrementTick>
 801121c:	4603      	mov	r3, r0
 801121e:	2b00      	cmp	r3, #0
 8011220:	d002      	beq.n	8011228 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8011222:	4b16      	ldr	r3, [pc, #88]	; (801127c <xTaskResumeAll+0x12c>)
 8011224:	2201      	movs	r2, #1
 8011226:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	3b01      	subs	r3, #1
 801122c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d1f1      	bne.n	8011218 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8011234:	4b12      	ldr	r3, [pc, #72]	; (8011280 <xTaskResumeAll+0x130>)
 8011236:	2200      	movs	r2, #0
 8011238:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801123a:	4b10      	ldr	r3, [pc, #64]	; (801127c <xTaskResumeAll+0x12c>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d009      	beq.n	8011256 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011242:	2301      	movs	r3, #1
 8011244:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011246:	4b0f      	ldr	r3, [pc, #60]	; (8011284 <xTaskResumeAll+0x134>)
 8011248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801124c:	601a      	str	r2, [r3, #0]
 801124e:	f3bf 8f4f 	dsb	sy
 8011252:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011256:	f000 fd7d 	bl	8011d54 <vPortExitCritical>

	return xAlreadyYielded;
 801125a:	68bb      	ldr	r3, [r7, #8]
}
 801125c:	4618      	mov	r0, r3
 801125e:	3710      	adds	r7, #16
 8011260:	46bd      	mov	sp, r7
 8011262:	bd80      	pop	{r7, pc}
 8011264:	20001f90 	.word	0x20001f90
 8011268:	20001f68 	.word	0x20001f68
 801126c:	20001f28 	.word	0x20001f28
 8011270:	20001f70 	.word	0x20001f70
 8011274:	20001e6c 	.word	0x20001e6c
 8011278:	20001e68 	.word	0x20001e68
 801127c:	20001f7c 	.word	0x20001f7c
 8011280:	20001f78 	.word	0x20001f78
 8011284:	e000ed04 	.word	0xe000ed04

08011288 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011288:	b580      	push	{r7, lr}
 801128a:	b086      	sub	sp, #24
 801128c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801128e:	2300      	movs	r3, #0
 8011290:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011292:	4b4e      	ldr	r3, [pc, #312]	; (80113cc <xTaskIncrementTick+0x144>)
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	2b00      	cmp	r3, #0
 8011298:	f040 808e 	bne.w	80113b8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801129c:	4b4c      	ldr	r3, [pc, #304]	; (80113d0 <xTaskIncrementTick+0x148>)
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	3301      	adds	r3, #1
 80112a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80112a4:	4a4a      	ldr	r2, [pc, #296]	; (80113d0 <xTaskIncrementTick+0x148>)
 80112a6:	693b      	ldr	r3, [r7, #16]
 80112a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80112aa:	693b      	ldr	r3, [r7, #16]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d120      	bne.n	80112f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80112b0:	4b48      	ldr	r3, [pc, #288]	; (80113d4 <xTaskIncrementTick+0x14c>)
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d00a      	beq.n	80112d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80112ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112be:	f383 8811 	msr	BASEPRI, r3
 80112c2:	f3bf 8f6f 	isb	sy
 80112c6:	f3bf 8f4f 	dsb	sy
 80112ca:	603b      	str	r3, [r7, #0]
}
 80112cc:	bf00      	nop
 80112ce:	e7fe      	b.n	80112ce <xTaskIncrementTick+0x46>
 80112d0:	4b40      	ldr	r3, [pc, #256]	; (80113d4 <xTaskIncrementTick+0x14c>)
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	60fb      	str	r3, [r7, #12]
 80112d6:	4b40      	ldr	r3, [pc, #256]	; (80113d8 <xTaskIncrementTick+0x150>)
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	4a3e      	ldr	r2, [pc, #248]	; (80113d4 <xTaskIncrementTick+0x14c>)
 80112dc:	6013      	str	r3, [r2, #0]
 80112de:	4a3e      	ldr	r2, [pc, #248]	; (80113d8 <xTaskIncrementTick+0x150>)
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	6013      	str	r3, [r2, #0]
 80112e4:	4b3d      	ldr	r3, [pc, #244]	; (80113dc <xTaskIncrementTick+0x154>)
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	3301      	adds	r3, #1
 80112ea:	4a3c      	ldr	r2, [pc, #240]	; (80113dc <xTaskIncrementTick+0x154>)
 80112ec:	6013      	str	r3, [r2, #0]
 80112ee:	f000 faa9 	bl	8011844 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80112f2:	4b3b      	ldr	r3, [pc, #236]	; (80113e0 <xTaskIncrementTick+0x158>)
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	693a      	ldr	r2, [r7, #16]
 80112f8:	429a      	cmp	r2, r3
 80112fa:	d348      	bcc.n	801138e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80112fc:	4b35      	ldr	r3, [pc, #212]	; (80113d4 <xTaskIncrementTick+0x14c>)
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d104      	bne.n	8011310 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011306:	4b36      	ldr	r3, [pc, #216]	; (80113e0 <xTaskIncrementTick+0x158>)
 8011308:	f04f 32ff 	mov.w	r2, #4294967295
 801130c:	601a      	str	r2, [r3, #0]
					break;
 801130e:	e03e      	b.n	801138e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011310:	4b30      	ldr	r3, [pc, #192]	; (80113d4 <xTaskIncrementTick+0x14c>)
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	68db      	ldr	r3, [r3, #12]
 8011316:	68db      	ldr	r3, [r3, #12]
 8011318:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801131a:	68bb      	ldr	r3, [r7, #8]
 801131c:	685b      	ldr	r3, [r3, #4]
 801131e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011320:	693a      	ldr	r2, [r7, #16]
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	429a      	cmp	r2, r3
 8011326:	d203      	bcs.n	8011330 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011328:	4a2d      	ldr	r2, [pc, #180]	; (80113e0 <xTaskIncrementTick+0x158>)
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801132e:	e02e      	b.n	801138e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011330:	68bb      	ldr	r3, [r7, #8]
 8011332:	3304      	adds	r3, #4
 8011334:	4618      	mov	r0, r3
 8011336:	f7fe ff47 	bl	80101c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801133a:	68bb      	ldr	r3, [r7, #8]
 801133c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801133e:	2b00      	cmp	r3, #0
 8011340:	d004      	beq.n	801134c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011342:	68bb      	ldr	r3, [r7, #8]
 8011344:	3318      	adds	r3, #24
 8011346:	4618      	mov	r0, r3
 8011348:	f7fe ff3e 	bl	80101c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801134c:	68bb      	ldr	r3, [r7, #8]
 801134e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011350:	2201      	movs	r2, #1
 8011352:	409a      	lsls	r2, r3
 8011354:	4b23      	ldr	r3, [pc, #140]	; (80113e4 <xTaskIncrementTick+0x15c>)
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	4313      	orrs	r3, r2
 801135a:	4a22      	ldr	r2, [pc, #136]	; (80113e4 <xTaskIncrementTick+0x15c>)
 801135c:	6013      	str	r3, [r2, #0]
 801135e:	68bb      	ldr	r3, [r7, #8]
 8011360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011362:	4613      	mov	r3, r2
 8011364:	009b      	lsls	r3, r3, #2
 8011366:	4413      	add	r3, r2
 8011368:	009b      	lsls	r3, r3, #2
 801136a:	4a1f      	ldr	r2, [pc, #124]	; (80113e8 <xTaskIncrementTick+0x160>)
 801136c:	441a      	add	r2, r3
 801136e:	68bb      	ldr	r3, [r7, #8]
 8011370:	3304      	adds	r3, #4
 8011372:	4619      	mov	r1, r3
 8011374:	4610      	mov	r0, r2
 8011376:	f7fe feca 	bl	801010e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801137a:	68bb      	ldr	r3, [r7, #8]
 801137c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801137e:	4b1b      	ldr	r3, [pc, #108]	; (80113ec <xTaskIncrementTick+0x164>)
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011384:	429a      	cmp	r2, r3
 8011386:	d3b9      	bcc.n	80112fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011388:	2301      	movs	r3, #1
 801138a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801138c:	e7b6      	b.n	80112fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801138e:	4b17      	ldr	r3, [pc, #92]	; (80113ec <xTaskIncrementTick+0x164>)
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011394:	4914      	ldr	r1, [pc, #80]	; (80113e8 <xTaskIncrementTick+0x160>)
 8011396:	4613      	mov	r3, r2
 8011398:	009b      	lsls	r3, r3, #2
 801139a:	4413      	add	r3, r2
 801139c:	009b      	lsls	r3, r3, #2
 801139e:	440b      	add	r3, r1
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	2b01      	cmp	r3, #1
 80113a4:	d901      	bls.n	80113aa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80113a6:	2301      	movs	r3, #1
 80113a8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80113aa:	4b11      	ldr	r3, [pc, #68]	; (80113f0 <xTaskIncrementTick+0x168>)
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d007      	beq.n	80113c2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80113b2:	2301      	movs	r3, #1
 80113b4:	617b      	str	r3, [r7, #20]
 80113b6:	e004      	b.n	80113c2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80113b8:	4b0e      	ldr	r3, [pc, #56]	; (80113f4 <xTaskIncrementTick+0x16c>)
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	3301      	adds	r3, #1
 80113be:	4a0d      	ldr	r2, [pc, #52]	; (80113f4 <xTaskIncrementTick+0x16c>)
 80113c0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80113c2:	697b      	ldr	r3, [r7, #20]
}
 80113c4:	4618      	mov	r0, r3
 80113c6:	3718      	adds	r7, #24
 80113c8:	46bd      	mov	sp, r7
 80113ca:	bd80      	pop	{r7, pc}
 80113cc:	20001f90 	.word	0x20001f90
 80113d0:	20001f6c 	.word	0x20001f6c
 80113d4:	20001f20 	.word	0x20001f20
 80113d8:	20001f24 	.word	0x20001f24
 80113dc:	20001f80 	.word	0x20001f80
 80113e0:	20001f88 	.word	0x20001f88
 80113e4:	20001f70 	.word	0x20001f70
 80113e8:	20001e6c 	.word	0x20001e6c
 80113ec:	20001e68 	.word	0x20001e68
 80113f0:	20001f7c 	.word	0x20001f7c
 80113f4:	20001f78 	.word	0x20001f78

080113f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80113f8:	b480      	push	{r7}
 80113fa:	b087      	sub	sp, #28
 80113fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80113fe:	4b29      	ldr	r3, [pc, #164]	; (80114a4 <vTaskSwitchContext+0xac>)
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d003      	beq.n	801140e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011406:	4b28      	ldr	r3, [pc, #160]	; (80114a8 <vTaskSwitchContext+0xb0>)
 8011408:	2201      	movs	r2, #1
 801140a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801140c:	e044      	b.n	8011498 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 801140e:	4b26      	ldr	r3, [pc, #152]	; (80114a8 <vTaskSwitchContext+0xb0>)
 8011410:	2200      	movs	r2, #0
 8011412:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011414:	4b25      	ldr	r3, [pc, #148]	; (80114ac <vTaskSwitchContext+0xb4>)
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	fab3 f383 	clz	r3, r3
 8011420:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011422:	7afb      	ldrb	r3, [r7, #11]
 8011424:	f1c3 031f 	rsb	r3, r3, #31
 8011428:	617b      	str	r3, [r7, #20]
 801142a:	4921      	ldr	r1, [pc, #132]	; (80114b0 <vTaskSwitchContext+0xb8>)
 801142c:	697a      	ldr	r2, [r7, #20]
 801142e:	4613      	mov	r3, r2
 8011430:	009b      	lsls	r3, r3, #2
 8011432:	4413      	add	r3, r2
 8011434:	009b      	lsls	r3, r3, #2
 8011436:	440b      	add	r3, r1
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d10a      	bne.n	8011454 <vTaskSwitchContext+0x5c>
	__asm volatile
 801143e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011442:	f383 8811 	msr	BASEPRI, r3
 8011446:	f3bf 8f6f 	isb	sy
 801144a:	f3bf 8f4f 	dsb	sy
 801144e:	607b      	str	r3, [r7, #4]
}
 8011450:	bf00      	nop
 8011452:	e7fe      	b.n	8011452 <vTaskSwitchContext+0x5a>
 8011454:	697a      	ldr	r2, [r7, #20]
 8011456:	4613      	mov	r3, r2
 8011458:	009b      	lsls	r3, r3, #2
 801145a:	4413      	add	r3, r2
 801145c:	009b      	lsls	r3, r3, #2
 801145e:	4a14      	ldr	r2, [pc, #80]	; (80114b0 <vTaskSwitchContext+0xb8>)
 8011460:	4413      	add	r3, r2
 8011462:	613b      	str	r3, [r7, #16]
 8011464:	693b      	ldr	r3, [r7, #16]
 8011466:	685b      	ldr	r3, [r3, #4]
 8011468:	685a      	ldr	r2, [r3, #4]
 801146a:	693b      	ldr	r3, [r7, #16]
 801146c:	605a      	str	r2, [r3, #4]
 801146e:	693b      	ldr	r3, [r7, #16]
 8011470:	685a      	ldr	r2, [r3, #4]
 8011472:	693b      	ldr	r3, [r7, #16]
 8011474:	3308      	adds	r3, #8
 8011476:	429a      	cmp	r2, r3
 8011478:	d104      	bne.n	8011484 <vTaskSwitchContext+0x8c>
 801147a:	693b      	ldr	r3, [r7, #16]
 801147c:	685b      	ldr	r3, [r3, #4]
 801147e:	685a      	ldr	r2, [r3, #4]
 8011480:	693b      	ldr	r3, [r7, #16]
 8011482:	605a      	str	r2, [r3, #4]
 8011484:	693b      	ldr	r3, [r7, #16]
 8011486:	685b      	ldr	r3, [r3, #4]
 8011488:	68db      	ldr	r3, [r3, #12]
 801148a:	4a0a      	ldr	r2, [pc, #40]	; (80114b4 <vTaskSwitchContext+0xbc>)
 801148c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801148e:	4b09      	ldr	r3, [pc, #36]	; (80114b4 <vTaskSwitchContext+0xbc>)
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	334c      	adds	r3, #76	; 0x4c
 8011494:	4a08      	ldr	r2, [pc, #32]	; (80114b8 <vTaskSwitchContext+0xc0>)
 8011496:	6013      	str	r3, [r2, #0]
}
 8011498:	bf00      	nop
 801149a:	371c      	adds	r7, #28
 801149c:	46bd      	mov	sp, r7
 801149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a2:	4770      	bx	lr
 80114a4:	20001f90 	.word	0x20001f90
 80114a8:	20001f7c 	.word	0x20001f7c
 80114ac:	20001f70 	.word	0x20001f70
 80114b0:	20001e6c 	.word	0x20001e6c
 80114b4:	20001e68 	.word	0x20001e68
 80114b8:	200002b0 	.word	0x200002b0

080114bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b084      	sub	sp, #16
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	6078      	str	r0, [r7, #4]
 80114c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d10a      	bne.n	80114e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80114cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114d0:	f383 8811 	msr	BASEPRI, r3
 80114d4:	f3bf 8f6f 	isb	sy
 80114d8:	f3bf 8f4f 	dsb	sy
 80114dc:	60fb      	str	r3, [r7, #12]
}
 80114de:	bf00      	nop
 80114e0:	e7fe      	b.n	80114e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80114e2:	4b07      	ldr	r3, [pc, #28]	; (8011500 <vTaskPlaceOnEventList+0x44>)
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	3318      	adds	r3, #24
 80114e8:	4619      	mov	r1, r3
 80114ea:	6878      	ldr	r0, [r7, #4]
 80114ec:	f7fe fe33 	bl	8010156 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80114f0:	2101      	movs	r1, #1
 80114f2:	6838      	ldr	r0, [r7, #0]
 80114f4:	f000 fa6a 	bl	80119cc <prvAddCurrentTaskToDelayedList>
}
 80114f8:	bf00      	nop
 80114fa:	3710      	adds	r7, #16
 80114fc:	46bd      	mov	sp, r7
 80114fe:	bd80      	pop	{r7, pc}
 8011500:	20001e68 	.word	0x20001e68

08011504 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b086      	sub	sp, #24
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	68db      	ldr	r3, [r3, #12]
 8011510:	68db      	ldr	r3, [r3, #12]
 8011512:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011514:	693b      	ldr	r3, [r7, #16]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d10a      	bne.n	8011530 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801151a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801151e:	f383 8811 	msr	BASEPRI, r3
 8011522:	f3bf 8f6f 	isb	sy
 8011526:	f3bf 8f4f 	dsb	sy
 801152a:	60fb      	str	r3, [r7, #12]
}
 801152c:	bf00      	nop
 801152e:	e7fe      	b.n	801152e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011530:	693b      	ldr	r3, [r7, #16]
 8011532:	3318      	adds	r3, #24
 8011534:	4618      	mov	r0, r3
 8011536:	f7fe fe47 	bl	80101c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801153a:	4b1d      	ldr	r3, [pc, #116]	; (80115b0 <xTaskRemoveFromEventList+0xac>)
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d11c      	bne.n	801157c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011542:	693b      	ldr	r3, [r7, #16]
 8011544:	3304      	adds	r3, #4
 8011546:	4618      	mov	r0, r3
 8011548:	f7fe fe3e 	bl	80101c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801154c:	693b      	ldr	r3, [r7, #16]
 801154e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011550:	2201      	movs	r2, #1
 8011552:	409a      	lsls	r2, r3
 8011554:	4b17      	ldr	r3, [pc, #92]	; (80115b4 <xTaskRemoveFromEventList+0xb0>)
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	4313      	orrs	r3, r2
 801155a:	4a16      	ldr	r2, [pc, #88]	; (80115b4 <xTaskRemoveFromEventList+0xb0>)
 801155c:	6013      	str	r3, [r2, #0]
 801155e:	693b      	ldr	r3, [r7, #16]
 8011560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011562:	4613      	mov	r3, r2
 8011564:	009b      	lsls	r3, r3, #2
 8011566:	4413      	add	r3, r2
 8011568:	009b      	lsls	r3, r3, #2
 801156a:	4a13      	ldr	r2, [pc, #76]	; (80115b8 <xTaskRemoveFromEventList+0xb4>)
 801156c:	441a      	add	r2, r3
 801156e:	693b      	ldr	r3, [r7, #16]
 8011570:	3304      	adds	r3, #4
 8011572:	4619      	mov	r1, r3
 8011574:	4610      	mov	r0, r2
 8011576:	f7fe fdca 	bl	801010e <vListInsertEnd>
 801157a:	e005      	b.n	8011588 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801157c:	693b      	ldr	r3, [r7, #16]
 801157e:	3318      	adds	r3, #24
 8011580:	4619      	mov	r1, r3
 8011582:	480e      	ldr	r0, [pc, #56]	; (80115bc <xTaskRemoveFromEventList+0xb8>)
 8011584:	f7fe fdc3 	bl	801010e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011588:	693b      	ldr	r3, [r7, #16]
 801158a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801158c:	4b0c      	ldr	r3, [pc, #48]	; (80115c0 <xTaskRemoveFromEventList+0xbc>)
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011592:	429a      	cmp	r2, r3
 8011594:	d905      	bls.n	80115a2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011596:	2301      	movs	r3, #1
 8011598:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801159a:	4b0a      	ldr	r3, [pc, #40]	; (80115c4 <xTaskRemoveFromEventList+0xc0>)
 801159c:	2201      	movs	r2, #1
 801159e:	601a      	str	r2, [r3, #0]
 80115a0:	e001      	b.n	80115a6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80115a2:	2300      	movs	r3, #0
 80115a4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80115a6:	697b      	ldr	r3, [r7, #20]
}
 80115a8:	4618      	mov	r0, r3
 80115aa:	3718      	adds	r7, #24
 80115ac:	46bd      	mov	sp, r7
 80115ae:	bd80      	pop	{r7, pc}
 80115b0:	20001f90 	.word	0x20001f90
 80115b4:	20001f70 	.word	0x20001f70
 80115b8:	20001e6c 	.word	0x20001e6c
 80115bc:	20001f28 	.word	0x20001f28
 80115c0:	20001e68 	.word	0x20001e68
 80115c4:	20001f7c 	.word	0x20001f7c

080115c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80115c8:	b480      	push	{r7}
 80115ca:	b083      	sub	sp, #12
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80115d0:	4b06      	ldr	r3, [pc, #24]	; (80115ec <vTaskInternalSetTimeOutState+0x24>)
 80115d2:	681a      	ldr	r2, [r3, #0]
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80115d8:	4b05      	ldr	r3, [pc, #20]	; (80115f0 <vTaskInternalSetTimeOutState+0x28>)
 80115da:	681a      	ldr	r2, [r3, #0]
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	605a      	str	r2, [r3, #4]
}
 80115e0:	bf00      	nop
 80115e2:	370c      	adds	r7, #12
 80115e4:	46bd      	mov	sp, r7
 80115e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ea:	4770      	bx	lr
 80115ec:	20001f80 	.word	0x20001f80
 80115f0:	20001f6c 	.word	0x20001f6c

080115f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b088      	sub	sp, #32
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
 80115fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d10a      	bne.n	801161a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011608:	f383 8811 	msr	BASEPRI, r3
 801160c:	f3bf 8f6f 	isb	sy
 8011610:	f3bf 8f4f 	dsb	sy
 8011614:	613b      	str	r3, [r7, #16]
}
 8011616:	bf00      	nop
 8011618:	e7fe      	b.n	8011618 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801161a:	683b      	ldr	r3, [r7, #0]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d10a      	bne.n	8011636 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011624:	f383 8811 	msr	BASEPRI, r3
 8011628:	f3bf 8f6f 	isb	sy
 801162c:	f3bf 8f4f 	dsb	sy
 8011630:	60fb      	str	r3, [r7, #12]
}
 8011632:	bf00      	nop
 8011634:	e7fe      	b.n	8011634 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011636:	f000 fb5d 	bl	8011cf4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801163a:	4b1d      	ldr	r3, [pc, #116]	; (80116b0 <xTaskCheckForTimeOut+0xbc>)
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	685b      	ldr	r3, [r3, #4]
 8011644:	69ba      	ldr	r2, [r7, #24]
 8011646:	1ad3      	subs	r3, r2, r3
 8011648:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801164a:	683b      	ldr	r3, [r7, #0]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011652:	d102      	bne.n	801165a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011654:	2300      	movs	r3, #0
 8011656:	61fb      	str	r3, [r7, #28]
 8011658:	e023      	b.n	80116a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681a      	ldr	r2, [r3, #0]
 801165e:	4b15      	ldr	r3, [pc, #84]	; (80116b4 <xTaskCheckForTimeOut+0xc0>)
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	429a      	cmp	r2, r3
 8011664:	d007      	beq.n	8011676 <xTaskCheckForTimeOut+0x82>
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	685b      	ldr	r3, [r3, #4]
 801166a:	69ba      	ldr	r2, [r7, #24]
 801166c:	429a      	cmp	r2, r3
 801166e:	d302      	bcc.n	8011676 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011670:	2301      	movs	r3, #1
 8011672:	61fb      	str	r3, [r7, #28]
 8011674:	e015      	b.n	80116a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	697a      	ldr	r2, [r7, #20]
 801167c:	429a      	cmp	r2, r3
 801167e:	d20b      	bcs.n	8011698 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011680:	683b      	ldr	r3, [r7, #0]
 8011682:	681a      	ldr	r2, [r3, #0]
 8011684:	697b      	ldr	r3, [r7, #20]
 8011686:	1ad2      	subs	r2, r2, r3
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801168c:	6878      	ldr	r0, [r7, #4]
 801168e:	f7ff ff9b 	bl	80115c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011692:	2300      	movs	r3, #0
 8011694:	61fb      	str	r3, [r7, #28]
 8011696:	e004      	b.n	80116a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011698:	683b      	ldr	r3, [r7, #0]
 801169a:	2200      	movs	r2, #0
 801169c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801169e:	2301      	movs	r3, #1
 80116a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80116a2:	f000 fb57 	bl	8011d54 <vPortExitCritical>

	return xReturn;
 80116a6:	69fb      	ldr	r3, [r7, #28]
}
 80116a8:	4618      	mov	r0, r3
 80116aa:	3720      	adds	r7, #32
 80116ac:	46bd      	mov	sp, r7
 80116ae:	bd80      	pop	{r7, pc}
 80116b0:	20001f6c 	.word	0x20001f6c
 80116b4:	20001f80 	.word	0x20001f80

080116b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80116b8:	b480      	push	{r7}
 80116ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80116bc:	4b03      	ldr	r3, [pc, #12]	; (80116cc <vTaskMissedYield+0x14>)
 80116be:	2201      	movs	r2, #1
 80116c0:	601a      	str	r2, [r3, #0]
}
 80116c2:	bf00      	nop
 80116c4:	46bd      	mov	sp, r7
 80116c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ca:	4770      	bx	lr
 80116cc:	20001f7c 	.word	0x20001f7c

080116d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b082      	sub	sp, #8
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80116d8:	f000 f852 	bl	8011780 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80116dc:	4b06      	ldr	r3, [pc, #24]	; (80116f8 <prvIdleTask+0x28>)
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	2b01      	cmp	r3, #1
 80116e2:	d9f9      	bls.n	80116d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80116e4:	4b05      	ldr	r3, [pc, #20]	; (80116fc <prvIdleTask+0x2c>)
 80116e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116ea:	601a      	str	r2, [r3, #0]
 80116ec:	f3bf 8f4f 	dsb	sy
 80116f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80116f4:	e7f0      	b.n	80116d8 <prvIdleTask+0x8>
 80116f6:	bf00      	nop
 80116f8:	20001e6c 	.word	0x20001e6c
 80116fc:	e000ed04 	.word	0xe000ed04

08011700 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011700:	b580      	push	{r7, lr}
 8011702:	b082      	sub	sp, #8
 8011704:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011706:	2300      	movs	r3, #0
 8011708:	607b      	str	r3, [r7, #4]
 801170a:	e00c      	b.n	8011726 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801170c:	687a      	ldr	r2, [r7, #4]
 801170e:	4613      	mov	r3, r2
 8011710:	009b      	lsls	r3, r3, #2
 8011712:	4413      	add	r3, r2
 8011714:	009b      	lsls	r3, r3, #2
 8011716:	4a12      	ldr	r2, [pc, #72]	; (8011760 <prvInitialiseTaskLists+0x60>)
 8011718:	4413      	add	r3, r2
 801171a:	4618      	mov	r0, r3
 801171c:	f7fe fcca 	bl	80100b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	3301      	adds	r3, #1
 8011724:	607b      	str	r3, [r7, #4]
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	2b06      	cmp	r3, #6
 801172a:	d9ef      	bls.n	801170c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801172c:	480d      	ldr	r0, [pc, #52]	; (8011764 <prvInitialiseTaskLists+0x64>)
 801172e:	f7fe fcc1 	bl	80100b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011732:	480d      	ldr	r0, [pc, #52]	; (8011768 <prvInitialiseTaskLists+0x68>)
 8011734:	f7fe fcbe 	bl	80100b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011738:	480c      	ldr	r0, [pc, #48]	; (801176c <prvInitialiseTaskLists+0x6c>)
 801173a:	f7fe fcbb 	bl	80100b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801173e:	480c      	ldr	r0, [pc, #48]	; (8011770 <prvInitialiseTaskLists+0x70>)
 8011740:	f7fe fcb8 	bl	80100b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011744:	480b      	ldr	r0, [pc, #44]	; (8011774 <prvInitialiseTaskLists+0x74>)
 8011746:	f7fe fcb5 	bl	80100b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801174a:	4b0b      	ldr	r3, [pc, #44]	; (8011778 <prvInitialiseTaskLists+0x78>)
 801174c:	4a05      	ldr	r2, [pc, #20]	; (8011764 <prvInitialiseTaskLists+0x64>)
 801174e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011750:	4b0a      	ldr	r3, [pc, #40]	; (801177c <prvInitialiseTaskLists+0x7c>)
 8011752:	4a05      	ldr	r2, [pc, #20]	; (8011768 <prvInitialiseTaskLists+0x68>)
 8011754:	601a      	str	r2, [r3, #0]
}
 8011756:	bf00      	nop
 8011758:	3708      	adds	r7, #8
 801175a:	46bd      	mov	sp, r7
 801175c:	bd80      	pop	{r7, pc}
 801175e:	bf00      	nop
 8011760:	20001e6c 	.word	0x20001e6c
 8011764:	20001ef8 	.word	0x20001ef8
 8011768:	20001f0c 	.word	0x20001f0c
 801176c:	20001f28 	.word	0x20001f28
 8011770:	20001f3c 	.word	0x20001f3c
 8011774:	20001f54 	.word	0x20001f54
 8011778:	20001f20 	.word	0x20001f20
 801177c:	20001f24 	.word	0x20001f24

08011780 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011780:	b580      	push	{r7, lr}
 8011782:	b082      	sub	sp, #8
 8011784:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011786:	e019      	b.n	80117bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011788:	f000 fab4 	bl	8011cf4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801178c:	4b10      	ldr	r3, [pc, #64]	; (80117d0 <prvCheckTasksWaitingTermination+0x50>)
 801178e:	68db      	ldr	r3, [r3, #12]
 8011790:	68db      	ldr	r3, [r3, #12]
 8011792:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	3304      	adds	r3, #4
 8011798:	4618      	mov	r0, r3
 801179a:	f7fe fd15 	bl	80101c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801179e:	4b0d      	ldr	r3, [pc, #52]	; (80117d4 <prvCheckTasksWaitingTermination+0x54>)
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	3b01      	subs	r3, #1
 80117a4:	4a0b      	ldr	r2, [pc, #44]	; (80117d4 <prvCheckTasksWaitingTermination+0x54>)
 80117a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80117a8:	4b0b      	ldr	r3, [pc, #44]	; (80117d8 <prvCheckTasksWaitingTermination+0x58>)
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	3b01      	subs	r3, #1
 80117ae:	4a0a      	ldr	r2, [pc, #40]	; (80117d8 <prvCheckTasksWaitingTermination+0x58>)
 80117b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80117b2:	f000 facf 	bl	8011d54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80117b6:	6878      	ldr	r0, [r7, #4]
 80117b8:	f000 f810 	bl	80117dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80117bc:	4b06      	ldr	r3, [pc, #24]	; (80117d8 <prvCheckTasksWaitingTermination+0x58>)
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d1e1      	bne.n	8011788 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80117c4:	bf00      	nop
 80117c6:	bf00      	nop
 80117c8:	3708      	adds	r7, #8
 80117ca:	46bd      	mov	sp, r7
 80117cc:	bd80      	pop	{r7, pc}
 80117ce:	bf00      	nop
 80117d0:	20001f3c 	.word	0x20001f3c
 80117d4:	20001f68 	.word	0x20001f68
 80117d8:	20001f50 	.word	0x20001f50

080117dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b084      	sub	sp, #16
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	334c      	adds	r3, #76	; 0x4c
 80117e8:	4618      	mov	r0, r3
 80117ea:	f001 fb2d 	bl	8012e48 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d108      	bne.n	801180a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117fc:	4618      	mov	r0, r3
 80117fe:	f000 fc67 	bl	80120d0 <vPortFree>
				vPortFree( pxTCB );
 8011802:	6878      	ldr	r0, [r7, #4]
 8011804:	f000 fc64 	bl	80120d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011808:	e018      	b.n	801183c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8011810:	2b01      	cmp	r3, #1
 8011812:	d103      	bne.n	801181c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011814:	6878      	ldr	r0, [r7, #4]
 8011816:	f000 fc5b 	bl	80120d0 <vPortFree>
	}
 801181a:	e00f      	b.n	801183c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8011822:	2b02      	cmp	r3, #2
 8011824:	d00a      	beq.n	801183c <prvDeleteTCB+0x60>
	__asm volatile
 8011826:	f04f 0350 	mov.w	r3, #80	; 0x50
 801182a:	f383 8811 	msr	BASEPRI, r3
 801182e:	f3bf 8f6f 	isb	sy
 8011832:	f3bf 8f4f 	dsb	sy
 8011836:	60fb      	str	r3, [r7, #12]
}
 8011838:	bf00      	nop
 801183a:	e7fe      	b.n	801183a <prvDeleteTCB+0x5e>
	}
 801183c:	bf00      	nop
 801183e:	3710      	adds	r7, #16
 8011840:	46bd      	mov	sp, r7
 8011842:	bd80      	pop	{r7, pc}

08011844 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011844:	b480      	push	{r7}
 8011846:	b083      	sub	sp, #12
 8011848:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801184a:	4b0c      	ldr	r3, [pc, #48]	; (801187c <prvResetNextTaskUnblockTime+0x38>)
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d104      	bne.n	801185e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011854:	4b0a      	ldr	r3, [pc, #40]	; (8011880 <prvResetNextTaskUnblockTime+0x3c>)
 8011856:	f04f 32ff 	mov.w	r2, #4294967295
 801185a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801185c:	e008      	b.n	8011870 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801185e:	4b07      	ldr	r3, [pc, #28]	; (801187c <prvResetNextTaskUnblockTime+0x38>)
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	68db      	ldr	r3, [r3, #12]
 8011864:	68db      	ldr	r3, [r3, #12]
 8011866:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	685b      	ldr	r3, [r3, #4]
 801186c:	4a04      	ldr	r2, [pc, #16]	; (8011880 <prvResetNextTaskUnblockTime+0x3c>)
 801186e:	6013      	str	r3, [r2, #0]
}
 8011870:	bf00      	nop
 8011872:	370c      	adds	r7, #12
 8011874:	46bd      	mov	sp, r7
 8011876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187a:	4770      	bx	lr
 801187c:	20001f20 	.word	0x20001f20
 8011880:	20001f88 	.word	0x20001f88

08011884 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011884:	b480      	push	{r7}
 8011886:	b083      	sub	sp, #12
 8011888:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801188a:	4b0b      	ldr	r3, [pc, #44]	; (80118b8 <xTaskGetSchedulerState+0x34>)
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d102      	bne.n	8011898 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011892:	2301      	movs	r3, #1
 8011894:	607b      	str	r3, [r7, #4]
 8011896:	e008      	b.n	80118aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011898:	4b08      	ldr	r3, [pc, #32]	; (80118bc <xTaskGetSchedulerState+0x38>)
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d102      	bne.n	80118a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80118a0:	2302      	movs	r3, #2
 80118a2:	607b      	str	r3, [r7, #4]
 80118a4:	e001      	b.n	80118aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80118a6:	2300      	movs	r3, #0
 80118a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80118aa:	687b      	ldr	r3, [r7, #4]
	}
 80118ac:	4618      	mov	r0, r3
 80118ae:	370c      	adds	r7, #12
 80118b0:	46bd      	mov	sp, r7
 80118b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b6:	4770      	bx	lr
 80118b8:	20001f74 	.word	0x20001f74
 80118bc:	20001f90 	.word	0x20001f90

080118c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b086      	sub	sp, #24
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80118cc:	2300      	movs	r3, #0
 80118ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d06e      	beq.n	80119b4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80118d6:	4b3a      	ldr	r3, [pc, #232]	; (80119c0 <xTaskPriorityDisinherit+0x100>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	693a      	ldr	r2, [r7, #16]
 80118dc:	429a      	cmp	r2, r3
 80118de:	d00a      	beq.n	80118f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80118e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118e4:	f383 8811 	msr	BASEPRI, r3
 80118e8:	f3bf 8f6f 	isb	sy
 80118ec:	f3bf 8f4f 	dsb	sy
 80118f0:	60fb      	str	r3, [r7, #12]
}
 80118f2:	bf00      	nop
 80118f4:	e7fe      	b.n	80118f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80118f6:	693b      	ldr	r3, [r7, #16]
 80118f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d10a      	bne.n	8011914 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80118fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011902:	f383 8811 	msr	BASEPRI, r3
 8011906:	f3bf 8f6f 	isb	sy
 801190a:	f3bf 8f4f 	dsb	sy
 801190e:	60bb      	str	r3, [r7, #8]
}
 8011910:	bf00      	nop
 8011912:	e7fe      	b.n	8011912 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011914:	693b      	ldr	r3, [r7, #16]
 8011916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011918:	1e5a      	subs	r2, r3, #1
 801191a:	693b      	ldr	r3, [r7, #16]
 801191c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801191e:	693b      	ldr	r3, [r7, #16]
 8011920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011922:	693b      	ldr	r3, [r7, #16]
 8011924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011926:	429a      	cmp	r2, r3
 8011928:	d044      	beq.n	80119b4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801192a:	693b      	ldr	r3, [r7, #16]
 801192c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801192e:	2b00      	cmp	r3, #0
 8011930:	d140      	bne.n	80119b4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011932:	693b      	ldr	r3, [r7, #16]
 8011934:	3304      	adds	r3, #4
 8011936:	4618      	mov	r0, r3
 8011938:	f7fe fc46 	bl	80101c8 <uxListRemove>
 801193c:	4603      	mov	r3, r0
 801193e:	2b00      	cmp	r3, #0
 8011940:	d115      	bne.n	801196e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011942:	693b      	ldr	r3, [r7, #16]
 8011944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011946:	491f      	ldr	r1, [pc, #124]	; (80119c4 <xTaskPriorityDisinherit+0x104>)
 8011948:	4613      	mov	r3, r2
 801194a:	009b      	lsls	r3, r3, #2
 801194c:	4413      	add	r3, r2
 801194e:	009b      	lsls	r3, r3, #2
 8011950:	440b      	add	r3, r1
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d10a      	bne.n	801196e <xTaskPriorityDisinherit+0xae>
 8011958:	693b      	ldr	r3, [r7, #16]
 801195a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801195c:	2201      	movs	r2, #1
 801195e:	fa02 f303 	lsl.w	r3, r2, r3
 8011962:	43da      	mvns	r2, r3
 8011964:	4b18      	ldr	r3, [pc, #96]	; (80119c8 <xTaskPriorityDisinherit+0x108>)
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	4013      	ands	r3, r2
 801196a:	4a17      	ldr	r2, [pc, #92]	; (80119c8 <xTaskPriorityDisinherit+0x108>)
 801196c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801196e:	693b      	ldr	r3, [r7, #16]
 8011970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011972:	693b      	ldr	r3, [r7, #16]
 8011974:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011976:	693b      	ldr	r3, [r7, #16]
 8011978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801197a:	f1c3 0207 	rsb	r2, r3, #7
 801197e:	693b      	ldr	r3, [r7, #16]
 8011980:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011982:	693b      	ldr	r3, [r7, #16]
 8011984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011986:	2201      	movs	r2, #1
 8011988:	409a      	lsls	r2, r3
 801198a:	4b0f      	ldr	r3, [pc, #60]	; (80119c8 <xTaskPriorityDisinherit+0x108>)
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	4313      	orrs	r3, r2
 8011990:	4a0d      	ldr	r2, [pc, #52]	; (80119c8 <xTaskPriorityDisinherit+0x108>)
 8011992:	6013      	str	r3, [r2, #0]
 8011994:	693b      	ldr	r3, [r7, #16]
 8011996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011998:	4613      	mov	r3, r2
 801199a:	009b      	lsls	r3, r3, #2
 801199c:	4413      	add	r3, r2
 801199e:	009b      	lsls	r3, r3, #2
 80119a0:	4a08      	ldr	r2, [pc, #32]	; (80119c4 <xTaskPriorityDisinherit+0x104>)
 80119a2:	441a      	add	r2, r3
 80119a4:	693b      	ldr	r3, [r7, #16]
 80119a6:	3304      	adds	r3, #4
 80119a8:	4619      	mov	r1, r3
 80119aa:	4610      	mov	r0, r2
 80119ac:	f7fe fbaf 	bl	801010e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80119b0:	2301      	movs	r3, #1
 80119b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80119b4:	697b      	ldr	r3, [r7, #20]
	}
 80119b6:	4618      	mov	r0, r3
 80119b8:	3718      	adds	r7, #24
 80119ba:	46bd      	mov	sp, r7
 80119bc:	bd80      	pop	{r7, pc}
 80119be:	bf00      	nop
 80119c0:	20001e68 	.word	0x20001e68
 80119c4:	20001e6c 	.word	0x20001e6c
 80119c8:	20001f70 	.word	0x20001f70

080119cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b084      	sub	sp, #16
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	6078      	str	r0, [r7, #4]
 80119d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80119d6:	4b29      	ldr	r3, [pc, #164]	; (8011a7c <prvAddCurrentTaskToDelayedList+0xb0>)
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80119dc:	4b28      	ldr	r3, [pc, #160]	; (8011a80 <prvAddCurrentTaskToDelayedList+0xb4>)
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	3304      	adds	r3, #4
 80119e2:	4618      	mov	r0, r3
 80119e4:	f7fe fbf0 	bl	80101c8 <uxListRemove>
 80119e8:	4603      	mov	r3, r0
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d10b      	bne.n	8011a06 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80119ee:	4b24      	ldr	r3, [pc, #144]	; (8011a80 <prvAddCurrentTaskToDelayedList+0xb4>)
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119f4:	2201      	movs	r2, #1
 80119f6:	fa02 f303 	lsl.w	r3, r2, r3
 80119fa:	43da      	mvns	r2, r3
 80119fc:	4b21      	ldr	r3, [pc, #132]	; (8011a84 <prvAddCurrentTaskToDelayedList+0xb8>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	4013      	ands	r3, r2
 8011a02:	4a20      	ldr	r2, [pc, #128]	; (8011a84 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011a04:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a0c:	d10a      	bne.n	8011a24 <prvAddCurrentTaskToDelayedList+0x58>
 8011a0e:	683b      	ldr	r3, [r7, #0]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d007      	beq.n	8011a24 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011a14:	4b1a      	ldr	r3, [pc, #104]	; (8011a80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	3304      	adds	r3, #4
 8011a1a:	4619      	mov	r1, r3
 8011a1c:	481a      	ldr	r0, [pc, #104]	; (8011a88 <prvAddCurrentTaskToDelayedList+0xbc>)
 8011a1e:	f7fe fb76 	bl	801010e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011a22:	e026      	b.n	8011a72 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011a24:	68fa      	ldr	r2, [r7, #12]
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	4413      	add	r3, r2
 8011a2a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011a2c:	4b14      	ldr	r3, [pc, #80]	; (8011a80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	68ba      	ldr	r2, [r7, #8]
 8011a32:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011a34:	68ba      	ldr	r2, [r7, #8]
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	429a      	cmp	r2, r3
 8011a3a:	d209      	bcs.n	8011a50 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011a3c:	4b13      	ldr	r3, [pc, #76]	; (8011a8c <prvAddCurrentTaskToDelayedList+0xc0>)
 8011a3e:	681a      	ldr	r2, [r3, #0]
 8011a40:	4b0f      	ldr	r3, [pc, #60]	; (8011a80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	3304      	adds	r3, #4
 8011a46:	4619      	mov	r1, r3
 8011a48:	4610      	mov	r0, r2
 8011a4a:	f7fe fb84 	bl	8010156 <vListInsert>
}
 8011a4e:	e010      	b.n	8011a72 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011a50:	4b0f      	ldr	r3, [pc, #60]	; (8011a90 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011a52:	681a      	ldr	r2, [r3, #0]
 8011a54:	4b0a      	ldr	r3, [pc, #40]	; (8011a80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	3304      	adds	r3, #4
 8011a5a:	4619      	mov	r1, r3
 8011a5c:	4610      	mov	r0, r2
 8011a5e:	f7fe fb7a 	bl	8010156 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011a62:	4b0c      	ldr	r3, [pc, #48]	; (8011a94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	68ba      	ldr	r2, [r7, #8]
 8011a68:	429a      	cmp	r2, r3
 8011a6a:	d202      	bcs.n	8011a72 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011a6c:	4a09      	ldr	r2, [pc, #36]	; (8011a94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011a6e:	68bb      	ldr	r3, [r7, #8]
 8011a70:	6013      	str	r3, [r2, #0]
}
 8011a72:	bf00      	nop
 8011a74:	3710      	adds	r7, #16
 8011a76:	46bd      	mov	sp, r7
 8011a78:	bd80      	pop	{r7, pc}
 8011a7a:	bf00      	nop
 8011a7c:	20001f6c 	.word	0x20001f6c
 8011a80:	20001e68 	.word	0x20001e68
 8011a84:	20001f70 	.word	0x20001f70
 8011a88:	20001f54 	.word	0x20001f54
 8011a8c:	20001f24 	.word	0x20001f24
 8011a90:	20001f20 	.word	0x20001f20
 8011a94:	20001f88 	.word	0x20001f88

08011a98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011a98:	b480      	push	{r7}
 8011a9a:	b085      	sub	sp, #20
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	60f8      	str	r0, [r7, #12]
 8011aa0:	60b9      	str	r1, [r7, #8]
 8011aa2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	3b04      	subs	r3, #4
 8011aa8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011ab0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	3b04      	subs	r3, #4
 8011ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011ab8:	68bb      	ldr	r3, [r7, #8]
 8011aba:	f023 0201 	bic.w	r2, r3, #1
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	3b04      	subs	r3, #4
 8011ac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011ac8:	4a0c      	ldr	r2, [pc, #48]	; (8011afc <pxPortInitialiseStack+0x64>)
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	3b14      	subs	r3, #20
 8011ad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011ad4:	687a      	ldr	r2, [r7, #4]
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	3b04      	subs	r3, #4
 8011ade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	f06f 0202 	mvn.w	r2, #2
 8011ae6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	3b20      	subs	r3, #32
 8011aec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011aee:	68fb      	ldr	r3, [r7, #12]
}
 8011af0:	4618      	mov	r0, r3
 8011af2:	3714      	adds	r7, #20
 8011af4:	46bd      	mov	sp, r7
 8011af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afa:	4770      	bx	lr
 8011afc:	08011b01 	.word	0x08011b01

08011b00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011b00:	b480      	push	{r7}
 8011b02:	b085      	sub	sp, #20
 8011b04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011b06:	2300      	movs	r3, #0
 8011b08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011b0a:	4b12      	ldr	r3, [pc, #72]	; (8011b54 <prvTaskExitError+0x54>)
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b12:	d00a      	beq.n	8011b2a <prvTaskExitError+0x2a>
	__asm volatile
 8011b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b18:	f383 8811 	msr	BASEPRI, r3
 8011b1c:	f3bf 8f6f 	isb	sy
 8011b20:	f3bf 8f4f 	dsb	sy
 8011b24:	60fb      	str	r3, [r7, #12]
}
 8011b26:	bf00      	nop
 8011b28:	e7fe      	b.n	8011b28 <prvTaskExitError+0x28>
	__asm volatile
 8011b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b2e:	f383 8811 	msr	BASEPRI, r3
 8011b32:	f3bf 8f6f 	isb	sy
 8011b36:	f3bf 8f4f 	dsb	sy
 8011b3a:	60bb      	str	r3, [r7, #8]
}
 8011b3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011b3e:	bf00      	nop
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d0fc      	beq.n	8011b40 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011b46:	bf00      	nop
 8011b48:	bf00      	nop
 8011b4a:	3714      	adds	r7, #20
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b52:	4770      	bx	lr
 8011b54:	200002ac 	.word	0x200002ac
	...

08011b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011b60:	4b07      	ldr	r3, [pc, #28]	; (8011b80 <pxCurrentTCBConst2>)
 8011b62:	6819      	ldr	r1, [r3, #0]
 8011b64:	6808      	ldr	r0, [r1, #0]
 8011b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b6a:	f380 8809 	msr	PSP, r0
 8011b6e:	f3bf 8f6f 	isb	sy
 8011b72:	f04f 0000 	mov.w	r0, #0
 8011b76:	f380 8811 	msr	BASEPRI, r0
 8011b7a:	4770      	bx	lr
 8011b7c:	f3af 8000 	nop.w

08011b80 <pxCurrentTCBConst2>:
 8011b80:	20001e68 	.word	0x20001e68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011b84:	bf00      	nop
 8011b86:	bf00      	nop

08011b88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011b88:	4808      	ldr	r0, [pc, #32]	; (8011bac <prvPortStartFirstTask+0x24>)
 8011b8a:	6800      	ldr	r0, [r0, #0]
 8011b8c:	6800      	ldr	r0, [r0, #0]
 8011b8e:	f380 8808 	msr	MSP, r0
 8011b92:	f04f 0000 	mov.w	r0, #0
 8011b96:	f380 8814 	msr	CONTROL, r0
 8011b9a:	b662      	cpsie	i
 8011b9c:	b661      	cpsie	f
 8011b9e:	f3bf 8f4f 	dsb	sy
 8011ba2:	f3bf 8f6f 	isb	sy
 8011ba6:	df00      	svc	0
 8011ba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011baa:	bf00      	nop
 8011bac:	e000ed08 	.word	0xe000ed08

08011bb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	b086      	sub	sp, #24
 8011bb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011bb6:	4b46      	ldr	r3, [pc, #280]	; (8011cd0 <xPortStartScheduler+0x120>)
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	4a46      	ldr	r2, [pc, #280]	; (8011cd4 <xPortStartScheduler+0x124>)
 8011bbc:	4293      	cmp	r3, r2
 8011bbe:	d10a      	bne.n	8011bd6 <xPortStartScheduler+0x26>
	__asm volatile
 8011bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bc4:	f383 8811 	msr	BASEPRI, r3
 8011bc8:	f3bf 8f6f 	isb	sy
 8011bcc:	f3bf 8f4f 	dsb	sy
 8011bd0:	613b      	str	r3, [r7, #16]
}
 8011bd2:	bf00      	nop
 8011bd4:	e7fe      	b.n	8011bd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011bd6:	4b3e      	ldr	r3, [pc, #248]	; (8011cd0 <xPortStartScheduler+0x120>)
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	4a3f      	ldr	r2, [pc, #252]	; (8011cd8 <xPortStartScheduler+0x128>)
 8011bdc:	4293      	cmp	r3, r2
 8011bde:	d10a      	bne.n	8011bf6 <xPortStartScheduler+0x46>
	__asm volatile
 8011be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011be4:	f383 8811 	msr	BASEPRI, r3
 8011be8:	f3bf 8f6f 	isb	sy
 8011bec:	f3bf 8f4f 	dsb	sy
 8011bf0:	60fb      	str	r3, [r7, #12]
}
 8011bf2:	bf00      	nop
 8011bf4:	e7fe      	b.n	8011bf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011bf6:	4b39      	ldr	r3, [pc, #228]	; (8011cdc <xPortStartScheduler+0x12c>)
 8011bf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011bfa:	697b      	ldr	r3, [r7, #20]
 8011bfc:	781b      	ldrb	r3, [r3, #0]
 8011bfe:	b2db      	uxtb	r3, r3
 8011c00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011c02:	697b      	ldr	r3, [r7, #20]
 8011c04:	22ff      	movs	r2, #255	; 0xff
 8011c06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011c08:	697b      	ldr	r3, [r7, #20]
 8011c0a:	781b      	ldrb	r3, [r3, #0]
 8011c0c:	b2db      	uxtb	r3, r3
 8011c0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011c10:	78fb      	ldrb	r3, [r7, #3]
 8011c12:	b2db      	uxtb	r3, r3
 8011c14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011c18:	b2da      	uxtb	r2, r3
 8011c1a:	4b31      	ldr	r3, [pc, #196]	; (8011ce0 <xPortStartScheduler+0x130>)
 8011c1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011c1e:	4b31      	ldr	r3, [pc, #196]	; (8011ce4 <xPortStartScheduler+0x134>)
 8011c20:	2207      	movs	r2, #7
 8011c22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011c24:	e009      	b.n	8011c3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011c26:	4b2f      	ldr	r3, [pc, #188]	; (8011ce4 <xPortStartScheduler+0x134>)
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	3b01      	subs	r3, #1
 8011c2c:	4a2d      	ldr	r2, [pc, #180]	; (8011ce4 <xPortStartScheduler+0x134>)
 8011c2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011c30:	78fb      	ldrb	r3, [r7, #3]
 8011c32:	b2db      	uxtb	r3, r3
 8011c34:	005b      	lsls	r3, r3, #1
 8011c36:	b2db      	uxtb	r3, r3
 8011c38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011c3a:	78fb      	ldrb	r3, [r7, #3]
 8011c3c:	b2db      	uxtb	r3, r3
 8011c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011c42:	2b80      	cmp	r3, #128	; 0x80
 8011c44:	d0ef      	beq.n	8011c26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011c46:	4b27      	ldr	r3, [pc, #156]	; (8011ce4 <xPortStartScheduler+0x134>)
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	f1c3 0307 	rsb	r3, r3, #7
 8011c4e:	2b04      	cmp	r3, #4
 8011c50:	d00a      	beq.n	8011c68 <xPortStartScheduler+0xb8>
	__asm volatile
 8011c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c56:	f383 8811 	msr	BASEPRI, r3
 8011c5a:	f3bf 8f6f 	isb	sy
 8011c5e:	f3bf 8f4f 	dsb	sy
 8011c62:	60bb      	str	r3, [r7, #8]
}
 8011c64:	bf00      	nop
 8011c66:	e7fe      	b.n	8011c66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011c68:	4b1e      	ldr	r3, [pc, #120]	; (8011ce4 <xPortStartScheduler+0x134>)
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	021b      	lsls	r3, r3, #8
 8011c6e:	4a1d      	ldr	r2, [pc, #116]	; (8011ce4 <xPortStartScheduler+0x134>)
 8011c70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011c72:	4b1c      	ldr	r3, [pc, #112]	; (8011ce4 <xPortStartScheduler+0x134>)
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011c7a:	4a1a      	ldr	r2, [pc, #104]	; (8011ce4 <xPortStartScheduler+0x134>)
 8011c7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	b2da      	uxtb	r2, r3
 8011c82:	697b      	ldr	r3, [r7, #20]
 8011c84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011c86:	4b18      	ldr	r3, [pc, #96]	; (8011ce8 <xPortStartScheduler+0x138>)
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	4a17      	ldr	r2, [pc, #92]	; (8011ce8 <xPortStartScheduler+0x138>)
 8011c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011c90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011c92:	4b15      	ldr	r3, [pc, #84]	; (8011ce8 <xPortStartScheduler+0x138>)
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	4a14      	ldr	r2, [pc, #80]	; (8011ce8 <xPortStartScheduler+0x138>)
 8011c98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011c9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011c9e:	f000 f8dd 	bl	8011e5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011ca2:	4b12      	ldr	r3, [pc, #72]	; (8011cec <xPortStartScheduler+0x13c>)
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011ca8:	f000 f8fc 	bl	8011ea4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011cac:	4b10      	ldr	r3, [pc, #64]	; (8011cf0 <xPortStartScheduler+0x140>)
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	4a0f      	ldr	r2, [pc, #60]	; (8011cf0 <xPortStartScheduler+0x140>)
 8011cb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011cb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011cb8:	f7ff ff66 	bl	8011b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011cbc:	f7ff fb9c 	bl	80113f8 <vTaskSwitchContext>
	prvTaskExitError();
 8011cc0:	f7ff ff1e 	bl	8011b00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011cc4:	2300      	movs	r3, #0
}
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	3718      	adds	r7, #24
 8011cca:	46bd      	mov	sp, r7
 8011ccc:	bd80      	pop	{r7, pc}
 8011cce:	bf00      	nop
 8011cd0:	e000ed00 	.word	0xe000ed00
 8011cd4:	410fc271 	.word	0x410fc271
 8011cd8:	410fc270 	.word	0x410fc270
 8011cdc:	e000e400 	.word	0xe000e400
 8011ce0:	20001f94 	.word	0x20001f94
 8011ce4:	20001f98 	.word	0x20001f98
 8011ce8:	e000ed20 	.word	0xe000ed20
 8011cec:	200002ac 	.word	0x200002ac
 8011cf0:	e000ef34 	.word	0xe000ef34

08011cf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011cf4:	b480      	push	{r7}
 8011cf6:	b083      	sub	sp, #12
 8011cf8:	af00      	add	r7, sp, #0
	__asm volatile
 8011cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cfe:	f383 8811 	msr	BASEPRI, r3
 8011d02:	f3bf 8f6f 	isb	sy
 8011d06:	f3bf 8f4f 	dsb	sy
 8011d0a:	607b      	str	r3, [r7, #4]
}
 8011d0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011d0e:	4b0f      	ldr	r3, [pc, #60]	; (8011d4c <vPortEnterCritical+0x58>)
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	3301      	adds	r3, #1
 8011d14:	4a0d      	ldr	r2, [pc, #52]	; (8011d4c <vPortEnterCritical+0x58>)
 8011d16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011d18:	4b0c      	ldr	r3, [pc, #48]	; (8011d4c <vPortEnterCritical+0x58>)
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	2b01      	cmp	r3, #1
 8011d1e:	d10f      	bne.n	8011d40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011d20:	4b0b      	ldr	r3, [pc, #44]	; (8011d50 <vPortEnterCritical+0x5c>)
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	b2db      	uxtb	r3, r3
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d00a      	beq.n	8011d40 <vPortEnterCritical+0x4c>
	__asm volatile
 8011d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d2e:	f383 8811 	msr	BASEPRI, r3
 8011d32:	f3bf 8f6f 	isb	sy
 8011d36:	f3bf 8f4f 	dsb	sy
 8011d3a:	603b      	str	r3, [r7, #0]
}
 8011d3c:	bf00      	nop
 8011d3e:	e7fe      	b.n	8011d3e <vPortEnterCritical+0x4a>
	}
}
 8011d40:	bf00      	nop
 8011d42:	370c      	adds	r7, #12
 8011d44:	46bd      	mov	sp, r7
 8011d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d4a:	4770      	bx	lr
 8011d4c:	200002ac 	.word	0x200002ac
 8011d50:	e000ed04 	.word	0xe000ed04

08011d54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011d54:	b480      	push	{r7}
 8011d56:	b083      	sub	sp, #12
 8011d58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011d5a:	4b12      	ldr	r3, [pc, #72]	; (8011da4 <vPortExitCritical+0x50>)
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d10a      	bne.n	8011d78 <vPortExitCritical+0x24>
	__asm volatile
 8011d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d66:	f383 8811 	msr	BASEPRI, r3
 8011d6a:	f3bf 8f6f 	isb	sy
 8011d6e:	f3bf 8f4f 	dsb	sy
 8011d72:	607b      	str	r3, [r7, #4]
}
 8011d74:	bf00      	nop
 8011d76:	e7fe      	b.n	8011d76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011d78:	4b0a      	ldr	r3, [pc, #40]	; (8011da4 <vPortExitCritical+0x50>)
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	3b01      	subs	r3, #1
 8011d7e:	4a09      	ldr	r2, [pc, #36]	; (8011da4 <vPortExitCritical+0x50>)
 8011d80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011d82:	4b08      	ldr	r3, [pc, #32]	; (8011da4 <vPortExitCritical+0x50>)
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d105      	bne.n	8011d96 <vPortExitCritical+0x42>
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011d8e:	683b      	ldr	r3, [r7, #0]
 8011d90:	f383 8811 	msr	BASEPRI, r3
}
 8011d94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011d96:	bf00      	nop
 8011d98:	370c      	adds	r7, #12
 8011d9a:	46bd      	mov	sp, r7
 8011d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da0:	4770      	bx	lr
 8011da2:	bf00      	nop
 8011da4:	200002ac 	.word	0x200002ac
	...

08011db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011db0:	f3ef 8009 	mrs	r0, PSP
 8011db4:	f3bf 8f6f 	isb	sy
 8011db8:	4b15      	ldr	r3, [pc, #84]	; (8011e10 <pxCurrentTCBConst>)
 8011dba:	681a      	ldr	r2, [r3, #0]
 8011dbc:	f01e 0f10 	tst.w	lr, #16
 8011dc0:	bf08      	it	eq
 8011dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dca:	6010      	str	r0, [r2, #0]
 8011dcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011dd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011dd4:	f380 8811 	msr	BASEPRI, r0
 8011dd8:	f3bf 8f4f 	dsb	sy
 8011ddc:	f3bf 8f6f 	isb	sy
 8011de0:	f7ff fb0a 	bl	80113f8 <vTaskSwitchContext>
 8011de4:	f04f 0000 	mov.w	r0, #0
 8011de8:	f380 8811 	msr	BASEPRI, r0
 8011dec:	bc09      	pop	{r0, r3}
 8011dee:	6819      	ldr	r1, [r3, #0]
 8011df0:	6808      	ldr	r0, [r1, #0]
 8011df2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011df6:	f01e 0f10 	tst.w	lr, #16
 8011dfa:	bf08      	it	eq
 8011dfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011e00:	f380 8809 	msr	PSP, r0
 8011e04:	f3bf 8f6f 	isb	sy
 8011e08:	4770      	bx	lr
 8011e0a:	bf00      	nop
 8011e0c:	f3af 8000 	nop.w

08011e10 <pxCurrentTCBConst>:
 8011e10:	20001e68 	.word	0x20001e68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011e14:	bf00      	nop
 8011e16:	bf00      	nop

08011e18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b082      	sub	sp, #8
 8011e1c:	af00      	add	r7, sp, #0
	__asm volatile
 8011e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e22:	f383 8811 	msr	BASEPRI, r3
 8011e26:	f3bf 8f6f 	isb	sy
 8011e2a:	f3bf 8f4f 	dsb	sy
 8011e2e:	607b      	str	r3, [r7, #4]
}
 8011e30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011e32:	f7ff fa29 	bl	8011288 <xTaskIncrementTick>
 8011e36:	4603      	mov	r3, r0
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d003      	beq.n	8011e44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011e3c:	4b06      	ldr	r3, [pc, #24]	; (8011e58 <SysTick_Handler+0x40>)
 8011e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e42:	601a      	str	r2, [r3, #0]
 8011e44:	2300      	movs	r3, #0
 8011e46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011e48:	683b      	ldr	r3, [r7, #0]
 8011e4a:	f383 8811 	msr	BASEPRI, r3
}
 8011e4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011e50:	bf00      	nop
 8011e52:	3708      	adds	r7, #8
 8011e54:	46bd      	mov	sp, r7
 8011e56:	bd80      	pop	{r7, pc}
 8011e58:	e000ed04 	.word	0xe000ed04

08011e5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011e5c:	b480      	push	{r7}
 8011e5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011e60:	4b0b      	ldr	r3, [pc, #44]	; (8011e90 <vPortSetupTimerInterrupt+0x34>)
 8011e62:	2200      	movs	r2, #0
 8011e64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011e66:	4b0b      	ldr	r3, [pc, #44]	; (8011e94 <vPortSetupTimerInterrupt+0x38>)
 8011e68:	2200      	movs	r2, #0
 8011e6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011e6c:	4b0a      	ldr	r3, [pc, #40]	; (8011e98 <vPortSetupTimerInterrupt+0x3c>)
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	4a0a      	ldr	r2, [pc, #40]	; (8011e9c <vPortSetupTimerInterrupt+0x40>)
 8011e72:	fba2 2303 	umull	r2, r3, r2, r3
 8011e76:	099b      	lsrs	r3, r3, #6
 8011e78:	4a09      	ldr	r2, [pc, #36]	; (8011ea0 <vPortSetupTimerInterrupt+0x44>)
 8011e7a:	3b01      	subs	r3, #1
 8011e7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011e7e:	4b04      	ldr	r3, [pc, #16]	; (8011e90 <vPortSetupTimerInterrupt+0x34>)
 8011e80:	2207      	movs	r2, #7
 8011e82:	601a      	str	r2, [r3, #0]
}
 8011e84:	bf00      	nop
 8011e86:	46bd      	mov	sp, r7
 8011e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e8c:	4770      	bx	lr
 8011e8e:	bf00      	nop
 8011e90:	e000e010 	.word	0xe000e010
 8011e94:	e000e018 	.word	0xe000e018
 8011e98:	20000230 	.word	0x20000230
 8011e9c:	10624dd3 	.word	0x10624dd3
 8011ea0:	e000e014 	.word	0xe000e014

08011ea4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011ea4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011eb4 <vPortEnableVFP+0x10>
 8011ea8:	6801      	ldr	r1, [r0, #0]
 8011eaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011eae:	6001      	str	r1, [r0, #0]
 8011eb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011eb2:	bf00      	nop
 8011eb4:	e000ed88 	.word	0xe000ed88

08011eb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011eb8:	b480      	push	{r7}
 8011eba:	b085      	sub	sp, #20
 8011ebc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011ebe:	f3ef 8305 	mrs	r3, IPSR
 8011ec2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	2b0f      	cmp	r3, #15
 8011ec8:	d914      	bls.n	8011ef4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011eca:	4a17      	ldr	r2, [pc, #92]	; (8011f28 <vPortValidateInterruptPriority+0x70>)
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	4413      	add	r3, r2
 8011ed0:	781b      	ldrb	r3, [r3, #0]
 8011ed2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011ed4:	4b15      	ldr	r3, [pc, #84]	; (8011f2c <vPortValidateInterruptPriority+0x74>)
 8011ed6:	781b      	ldrb	r3, [r3, #0]
 8011ed8:	7afa      	ldrb	r2, [r7, #11]
 8011eda:	429a      	cmp	r2, r3
 8011edc:	d20a      	bcs.n	8011ef4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8011ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ee2:	f383 8811 	msr	BASEPRI, r3
 8011ee6:	f3bf 8f6f 	isb	sy
 8011eea:	f3bf 8f4f 	dsb	sy
 8011eee:	607b      	str	r3, [r7, #4]
}
 8011ef0:	bf00      	nop
 8011ef2:	e7fe      	b.n	8011ef2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011ef4:	4b0e      	ldr	r3, [pc, #56]	; (8011f30 <vPortValidateInterruptPriority+0x78>)
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011efc:	4b0d      	ldr	r3, [pc, #52]	; (8011f34 <vPortValidateInterruptPriority+0x7c>)
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	429a      	cmp	r2, r3
 8011f02:	d90a      	bls.n	8011f1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f08:	f383 8811 	msr	BASEPRI, r3
 8011f0c:	f3bf 8f6f 	isb	sy
 8011f10:	f3bf 8f4f 	dsb	sy
 8011f14:	603b      	str	r3, [r7, #0]
}
 8011f16:	bf00      	nop
 8011f18:	e7fe      	b.n	8011f18 <vPortValidateInterruptPriority+0x60>
	}
 8011f1a:	bf00      	nop
 8011f1c:	3714      	adds	r7, #20
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f24:	4770      	bx	lr
 8011f26:	bf00      	nop
 8011f28:	e000e3f0 	.word	0xe000e3f0
 8011f2c:	20001f94 	.word	0x20001f94
 8011f30:	e000ed0c 	.word	0xe000ed0c
 8011f34:	20001f98 	.word	0x20001f98

08011f38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b08a      	sub	sp, #40	; 0x28
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011f40:	2300      	movs	r3, #0
 8011f42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011f44:	f7ff f8f6 	bl	8011134 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011f48:	4b5b      	ldr	r3, [pc, #364]	; (80120b8 <pvPortMalloc+0x180>)
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d101      	bne.n	8011f54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011f50:	f000 f920 	bl	8012194 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011f54:	4b59      	ldr	r3, [pc, #356]	; (80120bc <pvPortMalloc+0x184>)
 8011f56:	681a      	ldr	r2, [r3, #0]
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	4013      	ands	r3, r2
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	f040 8093 	bne.w	8012088 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d01d      	beq.n	8011fa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011f68:	2208      	movs	r2, #8
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	4413      	add	r3, r2
 8011f6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	f003 0307 	and.w	r3, r3, #7
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d014      	beq.n	8011fa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	f023 0307 	bic.w	r3, r3, #7
 8011f80:	3308      	adds	r3, #8
 8011f82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	f003 0307 	and.w	r3, r3, #7
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d00a      	beq.n	8011fa4 <pvPortMalloc+0x6c>
	__asm volatile
 8011f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f92:	f383 8811 	msr	BASEPRI, r3
 8011f96:	f3bf 8f6f 	isb	sy
 8011f9a:	f3bf 8f4f 	dsb	sy
 8011f9e:	617b      	str	r3, [r7, #20]
}
 8011fa0:	bf00      	nop
 8011fa2:	e7fe      	b.n	8011fa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d06e      	beq.n	8012088 <pvPortMalloc+0x150>
 8011faa:	4b45      	ldr	r3, [pc, #276]	; (80120c0 <pvPortMalloc+0x188>)
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	687a      	ldr	r2, [r7, #4]
 8011fb0:	429a      	cmp	r2, r3
 8011fb2:	d869      	bhi.n	8012088 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011fb4:	4b43      	ldr	r3, [pc, #268]	; (80120c4 <pvPortMalloc+0x18c>)
 8011fb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011fb8:	4b42      	ldr	r3, [pc, #264]	; (80120c4 <pvPortMalloc+0x18c>)
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011fbe:	e004      	b.n	8011fca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fcc:	685b      	ldr	r3, [r3, #4]
 8011fce:	687a      	ldr	r2, [r7, #4]
 8011fd0:	429a      	cmp	r2, r3
 8011fd2:	d903      	bls.n	8011fdc <pvPortMalloc+0xa4>
 8011fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d1f1      	bne.n	8011fc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011fdc:	4b36      	ldr	r3, [pc, #216]	; (80120b8 <pvPortMalloc+0x180>)
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011fe2:	429a      	cmp	r2, r3
 8011fe4:	d050      	beq.n	8012088 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011fe6:	6a3b      	ldr	r3, [r7, #32]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	2208      	movs	r2, #8
 8011fec:	4413      	add	r3, r2
 8011fee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ff2:	681a      	ldr	r2, [r3, #0]
 8011ff4:	6a3b      	ldr	r3, [r7, #32]
 8011ff6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ffa:	685a      	ldr	r2, [r3, #4]
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	1ad2      	subs	r2, r2, r3
 8012000:	2308      	movs	r3, #8
 8012002:	005b      	lsls	r3, r3, #1
 8012004:	429a      	cmp	r2, r3
 8012006:	d91f      	bls.n	8012048 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	4413      	add	r3, r2
 801200e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012010:	69bb      	ldr	r3, [r7, #24]
 8012012:	f003 0307 	and.w	r3, r3, #7
 8012016:	2b00      	cmp	r3, #0
 8012018:	d00a      	beq.n	8012030 <pvPortMalloc+0xf8>
	__asm volatile
 801201a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801201e:	f383 8811 	msr	BASEPRI, r3
 8012022:	f3bf 8f6f 	isb	sy
 8012026:	f3bf 8f4f 	dsb	sy
 801202a:	613b      	str	r3, [r7, #16]
}
 801202c:	bf00      	nop
 801202e:	e7fe      	b.n	801202e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012032:	685a      	ldr	r2, [r3, #4]
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	1ad2      	subs	r2, r2, r3
 8012038:	69bb      	ldr	r3, [r7, #24]
 801203a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801203e:	687a      	ldr	r2, [r7, #4]
 8012040:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012042:	69b8      	ldr	r0, [r7, #24]
 8012044:	f000 f908 	bl	8012258 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012048:	4b1d      	ldr	r3, [pc, #116]	; (80120c0 <pvPortMalloc+0x188>)
 801204a:	681a      	ldr	r2, [r3, #0]
 801204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801204e:	685b      	ldr	r3, [r3, #4]
 8012050:	1ad3      	subs	r3, r2, r3
 8012052:	4a1b      	ldr	r2, [pc, #108]	; (80120c0 <pvPortMalloc+0x188>)
 8012054:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012056:	4b1a      	ldr	r3, [pc, #104]	; (80120c0 <pvPortMalloc+0x188>)
 8012058:	681a      	ldr	r2, [r3, #0]
 801205a:	4b1b      	ldr	r3, [pc, #108]	; (80120c8 <pvPortMalloc+0x190>)
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	429a      	cmp	r2, r3
 8012060:	d203      	bcs.n	801206a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012062:	4b17      	ldr	r3, [pc, #92]	; (80120c0 <pvPortMalloc+0x188>)
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	4a18      	ldr	r2, [pc, #96]	; (80120c8 <pvPortMalloc+0x190>)
 8012068:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801206c:	685a      	ldr	r2, [r3, #4]
 801206e:	4b13      	ldr	r3, [pc, #76]	; (80120bc <pvPortMalloc+0x184>)
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	431a      	orrs	r2, r3
 8012074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012076:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801207a:	2200      	movs	r2, #0
 801207c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801207e:	4b13      	ldr	r3, [pc, #76]	; (80120cc <pvPortMalloc+0x194>)
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	3301      	adds	r3, #1
 8012084:	4a11      	ldr	r2, [pc, #68]	; (80120cc <pvPortMalloc+0x194>)
 8012086:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012088:	f7ff f862 	bl	8011150 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801208c:	69fb      	ldr	r3, [r7, #28]
 801208e:	f003 0307 	and.w	r3, r3, #7
 8012092:	2b00      	cmp	r3, #0
 8012094:	d00a      	beq.n	80120ac <pvPortMalloc+0x174>
	__asm volatile
 8012096:	f04f 0350 	mov.w	r3, #80	; 0x50
 801209a:	f383 8811 	msr	BASEPRI, r3
 801209e:	f3bf 8f6f 	isb	sy
 80120a2:	f3bf 8f4f 	dsb	sy
 80120a6:	60fb      	str	r3, [r7, #12]
}
 80120a8:	bf00      	nop
 80120aa:	e7fe      	b.n	80120aa <pvPortMalloc+0x172>
	return pvReturn;
 80120ac:	69fb      	ldr	r3, [r7, #28]
}
 80120ae:	4618      	mov	r0, r3
 80120b0:	3728      	adds	r7, #40	; 0x28
 80120b2:	46bd      	mov	sp, r7
 80120b4:	bd80      	pop	{r7, pc}
 80120b6:	bf00      	nop
 80120b8:	20007d64 	.word	0x20007d64
 80120bc:	20007d78 	.word	0x20007d78
 80120c0:	20007d68 	.word	0x20007d68
 80120c4:	20007d5c 	.word	0x20007d5c
 80120c8:	20007d6c 	.word	0x20007d6c
 80120cc:	20007d70 	.word	0x20007d70

080120d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80120d0:	b580      	push	{r7, lr}
 80120d2:	b086      	sub	sp, #24
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d04d      	beq.n	801217e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80120e2:	2308      	movs	r3, #8
 80120e4:	425b      	negs	r3, r3
 80120e6:	697a      	ldr	r2, [r7, #20]
 80120e8:	4413      	add	r3, r2
 80120ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80120ec:	697b      	ldr	r3, [r7, #20]
 80120ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80120f0:	693b      	ldr	r3, [r7, #16]
 80120f2:	685a      	ldr	r2, [r3, #4]
 80120f4:	4b24      	ldr	r3, [pc, #144]	; (8012188 <vPortFree+0xb8>)
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	4013      	ands	r3, r2
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d10a      	bne.n	8012114 <vPortFree+0x44>
	__asm volatile
 80120fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012102:	f383 8811 	msr	BASEPRI, r3
 8012106:	f3bf 8f6f 	isb	sy
 801210a:	f3bf 8f4f 	dsb	sy
 801210e:	60fb      	str	r3, [r7, #12]
}
 8012110:	bf00      	nop
 8012112:	e7fe      	b.n	8012112 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012114:	693b      	ldr	r3, [r7, #16]
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d00a      	beq.n	8012132 <vPortFree+0x62>
	__asm volatile
 801211c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012120:	f383 8811 	msr	BASEPRI, r3
 8012124:	f3bf 8f6f 	isb	sy
 8012128:	f3bf 8f4f 	dsb	sy
 801212c:	60bb      	str	r3, [r7, #8]
}
 801212e:	bf00      	nop
 8012130:	e7fe      	b.n	8012130 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012132:	693b      	ldr	r3, [r7, #16]
 8012134:	685a      	ldr	r2, [r3, #4]
 8012136:	4b14      	ldr	r3, [pc, #80]	; (8012188 <vPortFree+0xb8>)
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	4013      	ands	r3, r2
 801213c:	2b00      	cmp	r3, #0
 801213e:	d01e      	beq.n	801217e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012140:	693b      	ldr	r3, [r7, #16]
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d11a      	bne.n	801217e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012148:	693b      	ldr	r3, [r7, #16]
 801214a:	685a      	ldr	r2, [r3, #4]
 801214c:	4b0e      	ldr	r3, [pc, #56]	; (8012188 <vPortFree+0xb8>)
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	43db      	mvns	r3, r3
 8012152:	401a      	ands	r2, r3
 8012154:	693b      	ldr	r3, [r7, #16]
 8012156:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012158:	f7fe ffec 	bl	8011134 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801215c:	693b      	ldr	r3, [r7, #16]
 801215e:	685a      	ldr	r2, [r3, #4]
 8012160:	4b0a      	ldr	r3, [pc, #40]	; (801218c <vPortFree+0xbc>)
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	4413      	add	r3, r2
 8012166:	4a09      	ldr	r2, [pc, #36]	; (801218c <vPortFree+0xbc>)
 8012168:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801216a:	6938      	ldr	r0, [r7, #16]
 801216c:	f000 f874 	bl	8012258 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012170:	4b07      	ldr	r3, [pc, #28]	; (8012190 <vPortFree+0xc0>)
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	3301      	adds	r3, #1
 8012176:	4a06      	ldr	r2, [pc, #24]	; (8012190 <vPortFree+0xc0>)
 8012178:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801217a:	f7fe ffe9 	bl	8011150 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801217e:	bf00      	nop
 8012180:	3718      	adds	r7, #24
 8012182:	46bd      	mov	sp, r7
 8012184:	bd80      	pop	{r7, pc}
 8012186:	bf00      	nop
 8012188:	20007d78 	.word	0x20007d78
 801218c:	20007d68 	.word	0x20007d68
 8012190:	20007d74 	.word	0x20007d74

08012194 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012194:	b480      	push	{r7}
 8012196:	b085      	sub	sp, #20
 8012198:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801219a:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 801219e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80121a0:	4b27      	ldr	r3, [pc, #156]	; (8012240 <prvHeapInit+0xac>)
 80121a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	f003 0307 	and.w	r3, r3, #7
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d00c      	beq.n	80121c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	3307      	adds	r3, #7
 80121b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	f023 0307 	bic.w	r3, r3, #7
 80121ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80121bc:	68ba      	ldr	r2, [r7, #8]
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	1ad3      	subs	r3, r2, r3
 80121c2:	4a1f      	ldr	r2, [pc, #124]	; (8012240 <prvHeapInit+0xac>)
 80121c4:	4413      	add	r3, r2
 80121c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80121cc:	4a1d      	ldr	r2, [pc, #116]	; (8012244 <prvHeapInit+0xb0>)
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80121d2:	4b1c      	ldr	r3, [pc, #112]	; (8012244 <prvHeapInit+0xb0>)
 80121d4:	2200      	movs	r2, #0
 80121d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	68ba      	ldr	r2, [r7, #8]
 80121dc:	4413      	add	r3, r2
 80121de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80121e0:	2208      	movs	r2, #8
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	1a9b      	subs	r3, r3, r2
 80121e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	f023 0307 	bic.w	r3, r3, #7
 80121ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	4a15      	ldr	r2, [pc, #84]	; (8012248 <prvHeapInit+0xb4>)
 80121f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80121f6:	4b14      	ldr	r3, [pc, #80]	; (8012248 <prvHeapInit+0xb4>)
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	2200      	movs	r2, #0
 80121fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80121fe:	4b12      	ldr	r3, [pc, #72]	; (8012248 <prvHeapInit+0xb4>)
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	2200      	movs	r2, #0
 8012204:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801220a:	683b      	ldr	r3, [r7, #0]
 801220c:	68fa      	ldr	r2, [r7, #12]
 801220e:	1ad2      	subs	r2, r2, r3
 8012210:	683b      	ldr	r3, [r7, #0]
 8012212:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012214:	4b0c      	ldr	r3, [pc, #48]	; (8012248 <prvHeapInit+0xb4>)
 8012216:	681a      	ldr	r2, [r3, #0]
 8012218:	683b      	ldr	r3, [r7, #0]
 801221a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801221c:	683b      	ldr	r3, [r7, #0]
 801221e:	685b      	ldr	r3, [r3, #4]
 8012220:	4a0a      	ldr	r2, [pc, #40]	; (801224c <prvHeapInit+0xb8>)
 8012222:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012224:	683b      	ldr	r3, [r7, #0]
 8012226:	685b      	ldr	r3, [r3, #4]
 8012228:	4a09      	ldr	r2, [pc, #36]	; (8012250 <prvHeapInit+0xbc>)
 801222a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801222c:	4b09      	ldr	r3, [pc, #36]	; (8012254 <prvHeapInit+0xc0>)
 801222e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012232:	601a      	str	r2, [r3, #0]
}
 8012234:	bf00      	nop
 8012236:	3714      	adds	r7, #20
 8012238:	46bd      	mov	sp, r7
 801223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223e:	4770      	bx	lr
 8012240:	20001f9c 	.word	0x20001f9c
 8012244:	20007d5c 	.word	0x20007d5c
 8012248:	20007d64 	.word	0x20007d64
 801224c:	20007d6c 	.word	0x20007d6c
 8012250:	20007d68 	.word	0x20007d68
 8012254:	20007d78 	.word	0x20007d78

08012258 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012258:	b480      	push	{r7}
 801225a:	b085      	sub	sp, #20
 801225c:	af00      	add	r7, sp, #0
 801225e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012260:	4b28      	ldr	r3, [pc, #160]	; (8012304 <prvInsertBlockIntoFreeList+0xac>)
 8012262:	60fb      	str	r3, [r7, #12]
 8012264:	e002      	b.n	801226c <prvInsertBlockIntoFreeList+0x14>
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	60fb      	str	r3, [r7, #12]
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	687a      	ldr	r2, [r7, #4]
 8012272:	429a      	cmp	r2, r3
 8012274:	d8f7      	bhi.n	8012266 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	685b      	ldr	r3, [r3, #4]
 801227e:	68ba      	ldr	r2, [r7, #8]
 8012280:	4413      	add	r3, r2
 8012282:	687a      	ldr	r2, [r7, #4]
 8012284:	429a      	cmp	r2, r3
 8012286:	d108      	bne.n	801229a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	685a      	ldr	r2, [r3, #4]
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	685b      	ldr	r3, [r3, #4]
 8012290:	441a      	add	r2, r3
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	685b      	ldr	r3, [r3, #4]
 80122a2:	68ba      	ldr	r2, [r7, #8]
 80122a4:	441a      	add	r2, r3
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	429a      	cmp	r2, r3
 80122ac:	d118      	bne.n	80122e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	681a      	ldr	r2, [r3, #0]
 80122b2:	4b15      	ldr	r3, [pc, #84]	; (8012308 <prvInsertBlockIntoFreeList+0xb0>)
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	429a      	cmp	r2, r3
 80122b8:	d00d      	beq.n	80122d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	685a      	ldr	r2, [r3, #4]
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	685b      	ldr	r3, [r3, #4]
 80122c4:	441a      	add	r2, r3
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	681a      	ldr	r2, [r3, #0]
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	601a      	str	r2, [r3, #0]
 80122d4:	e008      	b.n	80122e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80122d6:	4b0c      	ldr	r3, [pc, #48]	; (8012308 <prvInsertBlockIntoFreeList+0xb0>)
 80122d8:	681a      	ldr	r2, [r3, #0]
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	601a      	str	r2, [r3, #0]
 80122de:	e003      	b.n	80122e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	681a      	ldr	r2, [r3, #0]
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80122e8:	68fa      	ldr	r2, [r7, #12]
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	429a      	cmp	r2, r3
 80122ee:	d002      	beq.n	80122f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	687a      	ldr	r2, [r7, #4]
 80122f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80122f6:	bf00      	nop
 80122f8:	3714      	adds	r7, #20
 80122fa:	46bd      	mov	sp, r7
 80122fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012300:	4770      	bx	lr
 8012302:	bf00      	nop
 8012304:	20007d5c 	.word	0x20007d5c
 8012308:	20007d64 	.word	0x20007d64

0801230c <USB_transmit_msg>:

/*
 * -- Insert your variables declaration here --
 */
/* USER CODE BEGIN 0 */
void USB_transmit_msg(uint8_t* data,uint32_t size){
 801230c:	b580      	push	{r7, lr}
 801230e:	b082      	sub	sp, #8
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
 8012314:	6039      	str	r1, [r7, #0]
  USBH_CDC_Stop(&hUsbHostFS);
 8012316:	4806      	ldr	r0, [pc, #24]	; (8012330 <USB_transmit_msg+0x24>)
 8012318:	f7f6 fdb9 	bl	8008e8e <USBH_CDC_Stop>
  USBH_CDC_Transmit(&hUsbHostFS,data, size);
 801231c:	683a      	ldr	r2, [r7, #0]
 801231e:	6879      	ldr	r1, [r7, #4]
 8012320:	4803      	ldr	r0, [pc, #12]	; (8012330 <USB_transmit_msg+0x24>)
 8012322:	f7f6 fe44 	bl	8008fae <USBH_CDC_Transmit>
}
 8012326:	bf00      	nop
 8012328:	3708      	adds	r7, #8
 801232a:	46bd      	mov	sp, r7
 801232c:	bd80      	pop	{r7, pc}
 801232e:	bf00      	nop
 8012330:	2000bc08 	.word	0x2000bc08

08012334 <USB_receive_msg>:

void USB_receive_msg(){
 8012334:	b580      	push	{r7, lr}
 8012336:	af00      	add	r7, sp, #0
  USBH_CDC_Stop(&hUsbHostFS);
 8012338:	4809      	ldr	r0, [pc, #36]	; (8012360 <USB_receive_msg+0x2c>)
 801233a:	f7f6 fda8 	bl	8008e8e <USBH_CDC_Stop>
  USBH_CDC_Receive(&hUsbHostFS,usb_rx_buff[usb_rx_buff_active],USB_RX_BUFF_SIZE);
 801233e:	4b09      	ldr	r3, [pc, #36]	; (8012364 <USB_receive_msg+0x30>)
 8012340:	781b      	ldrb	r3, [r3, #0]
 8012342:	461a      	mov	r2, r3
 8012344:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8012348:	fb02 f303 	mul.w	r3, r2, r3
 801234c:	4a06      	ldr	r2, [pc, #24]	; (8012368 <USB_receive_msg+0x34>)
 801234e:	4413      	add	r3, r2
 8012350:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8012354:	4619      	mov	r1, r3
 8012356:	4802      	ldr	r0, [pc, #8]	; (8012360 <USB_receive_msg+0x2c>)
 8012358:	f7f6 fe64 	bl	8009024 <USBH_CDC_Receive>
}
 801235c:	bf00      	nop
 801235e:	bd80      	pop	{r7, pc}
 8012360:	2000bc08 	.word	0x2000bc08
 8012364:	2000bc04 	.word	0x2000bc04
 8012368:	20007d84 	.word	0x20007d84

0801236c <USB_set_line_coding>:


void USB_set_line_coding(){
 801236c:	b580      	push	{r7, lr}
 801236e:	af00      	add	r7, sp, #0
	FrameFormat.b.dwDTERate = 1250000;
 8012370:	4b08      	ldr	r3, [pc, #32]	; (8012394 <USB_set_line_coding+0x28>)
 8012372:	4a09      	ldr	r2, [pc, #36]	; (8012398 <USB_set_line_coding+0x2c>)
 8012374:	601a      	str	r2, [r3, #0]
	FrameFormat.b.bCharFormat = 0;
 8012376:	4b07      	ldr	r3, [pc, #28]	; (8012394 <USB_set_line_coding+0x28>)
 8012378:	2200      	movs	r2, #0
 801237a:	711a      	strb	r2, [r3, #4]
	FrameFormat.b.bDataBits = 8;
 801237c:	4b05      	ldr	r3, [pc, #20]	; (8012394 <USB_set_line_coding+0x28>)
 801237e:	2208      	movs	r2, #8
 8012380:	719a      	strb	r2, [r3, #6]
	FrameFormat.b.bParityType = 0;
 8012382:	4b04      	ldr	r3, [pc, #16]	; (8012394 <USB_set_line_coding+0x28>)
 8012384:	2200      	movs	r2, #0
 8012386:	715a      	strb	r2, [r3, #5]

	USBH_CDC_SetLineCoding(&hUsbHostFS, &FrameFormat);
 8012388:	4902      	ldr	r1, [pc, #8]	; (8012394 <USB_set_line_coding+0x28>)
 801238a:	4804      	ldr	r0, [pc, #16]	; (801239c <USB_set_line_coding+0x30>)
 801238c:	f7f6 fde6 	bl	8008f5c <USBH_CDC_SetLineCoding>
}
 8012390:	bf00      	nop
 8012392:	bd80      	pop	{r7, pc}
 8012394:	20007d7c 	.word	0x20007d7c
 8012398:	001312d0 	.word	0x001312d0
 801239c:	2000bc08 	.word	0x2000bc08

080123a0 <USBH_CDC_TransmitCallback>:
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */

void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b082      	sub	sp, #8
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
  USB_receive_msg();
 80123a8:	f7ff ffc4 	bl	8012334 <USB_receive_msg>
}
 80123ac:	bf00      	nop
 80123ae:	3708      	adds	r7, #8
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}

080123b4 <USBH_CDC_ReceiveCallback>:


void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80123b4:	b480      	push	{r7}
 80123b6:	b083      	sub	sp, #12
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
}
 80123bc:	bf00      	nop
 80123be:	370c      	adds	r7, #12
 80123c0:	46bd      	mov	sp, r7
 80123c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c6:	4770      	bx	lr

080123c8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80123c8:	b580      	push	{r7, lr}
 80123ca:	af00      	add	r7, sp, #0


  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80123cc:	2201      	movs	r2, #1
 80123ce:	490e      	ldr	r1, [pc, #56]	; (8012408 <MX_USB_HOST_Init+0x40>)
 80123d0:	480e      	ldr	r0, [pc, #56]	; (801240c <MX_USB_HOST_Init+0x44>)
 80123d2:	f7f6 ffa1 	bl	8009318 <USBH_Init>
 80123d6:	4603      	mov	r3, r0
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d001      	beq.n	80123e0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80123dc:	f7ef f984 	bl	80016e8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80123e0:	490b      	ldr	r1, [pc, #44]	; (8012410 <MX_USB_HOST_Init+0x48>)
 80123e2:	480a      	ldr	r0, [pc, #40]	; (801240c <MX_USB_HOST_Init+0x44>)
 80123e4:	f7f7 f84e 	bl	8009484 <USBH_RegisterClass>
 80123e8:	4603      	mov	r3, r0
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d001      	beq.n	80123f2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80123ee:	f7ef f97b 	bl	80016e8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80123f2:	4806      	ldr	r0, [pc, #24]	; (801240c <MX_USB_HOST_Init+0x44>)
 80123f4:	f7f7 f8d2 	bl	800959c <USBH_Start>
 80123f8:	4603      	mov	r3, r0
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d001      	beq.n	8012402 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80123fe:	f7ef f973 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8012402:	bf00      	nop
 8012404:	bd80      	pop	{r7, pc}
 8012406:	bf00      	nop
 8012408:	08012415 	.word	0x08012415
 801240c:	2000bc08 	.word	0x2000bc08
 8012410:	2000028c 	.word	0x2000028c

08012414 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8012414:	b580      	push	{r7, lr}
 8012416:	b082      	sub	sp, #8
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
 801241c:	460b      	mov	r3, r1
 801241e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8012420:	78fb      	ldrb	r3, [r7, #3]
 8012422:	3b01      	subs	r3, #1
 8012424:	2b04      	cmp	r3, #4
 8012426:	d82e      	bhi.n	8012486 <USBH_UserProcess+0x72>
 8012428:	a201      	add	r2, pc, #4	; (adr r2, 8012430 <USBH_UserProcess+0x1c>)
 801242a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801242e:	bf00      	nop
 8012430:	08012487 	.word	0x08012487
 8012434:	0801245b 	.word	0x0801245b
 8012438:	08012487 	.word	0x08012487
 801243c:	08012471 	.word	0x08012471
 8012440:	08012445 	.word	0x08012445
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8012444:	4b12      	ldr	r3, [pc, #72]	; (8012490 <USBH_UserProcess+0x7c>)
 8012446:	2203      	movs	r2, #3
 8012448:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_DISCONNECT, 0);
 801244a:	4b12      	ldr	r3, [pc, #72]	; (8012494 <USBH_UserProcess+0x80>)
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	2200      	movs	r2, #0
 8012450:	2103      	movs	r1, #3
 8012452:	4618      	mov	r0, r3
 8012454:	f7fd fd7a 	bl	800ff4c <osMessagePut>
  break;
 8012458:	e016      	b.n	8012488 <USBH_UserProcess+0x74>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801245a:	4b0d      	ldr	r3, [pc, #52]	; (8012490 <USBH_UserProcess+0x7c>)
 801245c:	2202      	movs	r2, #2
 801245e:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_READY, 0);
 8012460:	4b0c      	ldr	r3, [pc, #48]	; (8012494 <USBH_UserProcess+0x80>)
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	2200      	movs	r2, #0
 8012466:	2102      	movs	r1, #2
 8012468:	4618      	mov	r0, r3
 801246a:	f7fd fd6f 	bl	800ff4c <osMessagePut>
  break;
 801246e:	e00b      	b.n	8012488 <USBH_UserProcess+0x74>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8012470:	4b07      	ldr	r3, [pc, #28]	; (8012490 <USBH_UserProcess+0x7c>)
 8012472:	2201      	movs	r2, #1
 8012474:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_START, 0);
 8012476:	4b07      	ldr	r3, [pc, #28]	; (8012494 <USBH_UserProcess+0x80>)
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	2200      	movs	r2, #0
 801247c:	2101      	movs	r1, #1
 801247e:	4618      	mov	r0, r3
 8012480:	f7fd fd64 	bl	800ff4c <osMessagePut>
  break;
 8012484:	e000      	b.n	8012488 <USBH_UserProcess+0x74>

  default:
  break;
 8012486:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8012488:	bf00      	nop
 801248a:	3708      	adds	r7, #8
 801248c:	46bd      	mov	sp, r7
 801248e:	bd80      	pop	{r7, pc}
 8012490:	2000bfec 	.word	0x2000bfec
 8012494:	200007f4 	.word	0x200007f4

08012498 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b08a      	sub	sp, #40	; 0x28
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80124a0:	f107 0314 	add.w	r3, r7, #20
 80124a4:	2200      	movs	r2, #0
 80124a6:	601a      	str	r2, [r3, #0]
 80124a8:	605a      	str	r2, [r3, #4]
 80124aa:	609a      	str	r2, [r3, #8]
 80124ac:	60da      	str	r2, [r3, #12]
 80124ae:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80124b8:	d13a      	bne.n	8012530 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80124ba:	2300      	movs	r3, #0
 80124bc:	613b      	str	r3, [r7, #16]
 80124be:	4b1e      	ldr	r3, [pc, #120]	; (8012538 <HAL_HCD_MspInit+0xa0>)
 80124c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124c2:	4a1d      	ldr	r2, [pc, #116]	; (8012538 <HAL_HCD_MspInit+0xa0>)
 80124c4:	f043 0301 	orr.w	r3, r3, #1
 80124c8:	6313      	str	r3, [r2, #48]	; 0x30
 80124ca:	4b1b      	ldr	r3, [pc, #108]	; (8012538 <HAL_HCD_MspInit+0xa0>)
 80124cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124ce:	f003 0301 	and.w	r3, r3, #1
 80124d2:	613b      	str	r3, [r7, #16]
 80124d4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80124d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80124da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80124dc:	2302      	movs	r3, #2
 80124de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80124e0:	2300      	movs	r3, #0
 80124e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80124e4:	2303      	movs	r3, #3
 80124e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80124e8:	230a      	movs	r3, #10
 80124ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80124ec:	f107 0314 	add.w	r3, r7, #20
 80124f0:	4619      	mov	r1, r3
 80124f2:	4812      	ldr	r0, [pc, #72]	; (801253c <HAL_HCD_MspInit+0xa4>)
 80124f4:	f7f0 fc1a 	bl	8002d2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80124f8:	4b0f      	ldr	r3, [pc, #60]	; (8012538 <HAL_HCD_MspInit+0xa0>)
 80124fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124fc:	4a0e      	ldr	r2, [pc, #56]	; (8012538 <HAL_HCD_MspInit+0xa0>)
 80124fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012502:	6353      	str	r3, [r2, #52]	; 0x34
 8012504:	2300      	movs	r3, #0
 8012506:	60fb      	str	r3, [r7, #12]
 8012508:	4b0b      	ldr	r3, [pc, #44]	; (8012538 <HAL_HCD_MspInit+0xa0>)
 801250a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801250c:	4a0a      	ldr	r2, [pc, #40]	; (8012538 <HAL_HCD_MspInit+0xa0>)
 801250e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012512:	6453      	str	r3, [r2, #68]	; 0x44
 8012514:	4b08      	ldr	r3, [pc, #32]	; (8012538 <HAL_HCD_MspInit+0xa0>)
 8012516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801251c:	60fb      	str	r3, [r7, #12]
 801251e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8012520:	2200      	movs	r2, #0
 8012522:	2105      	movs	r1, #5
 8012524:	2043      	movs	r0, #67	; 0x43
 8012526:	f7f0 f86d 	bl	8002604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801252a:	2043      	movs	r0, #67	; 0x43
 801252c:	f7f0 f886 	bl	800263c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012530:	bf00      	nop
 8012532:	3728      	adds	r7, #40	; 0x28
 8012534:	46bd      	mov	sp, r7
 8012536:	bd80      	pop	{r7, pc}
 8012538:	40023800 	.word	0x40023800
 801253c:	40020000 	.word	0x40020000

08012540 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8012540:	b580      	push	{r7, lr}
 8012542:	b082      	sub	sp, #8
 8012544:	af00      	add	r7, sp, #0
 8012546:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801254e:	4618      	mov	r0, r3
 8012550:	f7f7 fcdb 	bl	8009f0a <USBH_LL_IncTimer>
}
 8012554:	bf00      	nop
 8012556:	3708      	adds	r7, #8
 8012558:	46bd      	mov	sp, r7
 801255a:	bd80      	pop	{r7, pc}

0801255c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b082      	sub	sp, #8
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801256a:	4618      	mov	r0, r3
 801256c:	f7f7 fd1f 	bl	8009fae <USBH_LL_Connect>
}
 8012570:	bf00      	nop
 8012572:	3708      	adds	r7, #8
 8012574:	46bd      	mov	sp, r7
 8012576:	bd80      	pop	{r7, pc}

08012578 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b082      	sub	sp, #8
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8012586:	4618      	mov	r0, r3
 8012588:	f7f7 fd34 	bl	8009ff4 <USBH_LL_Disconnect>
}
 801258c:	bf00      	nop
 801258e:	3708      	adds	r7, #8
 8012590:	46bd      	mov	sp, r7
 8012592:	bd80      	pop	{r7, pc}

08012594 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b082      	sub	sp, #8
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
 801259c:	460b      	mov	r3, r1
 801259e:	70fb      	strb	r3, [r7, #3]
 80125a0:	4613      	mov	r3, r2
 80125a2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80125aa:	4618      	mov	r0, r3
 80125ac:	f7f7 fd69 	bl	800a082 <USBH_LL_NotifyURBChange>
#endif
}
 80125b0:	bf00      	nop
 80125b2:	3708      	adds	r7, #8
 80125b4:	46bd      	mov	sp, r7
 80125b6:	bd80      	pop	{r7, pc}

080125b8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b082      	sub	sp, #8
 80125bc:	af00      	add	r7, sp, #0
 80125be:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80125c6:	4618      	mov	r0, r3
 80125c8:	f7f7 fcc9 	bl	8009f5e <USBH_LL_PortEnabled>
}
 80125cc:	bf00      	nop
 80125ce:	3708      	adds	r7, #8
 80125d0:	46bd      	mov	sp, r7
 80125d2:	bd80      	pop	{r7, pc}

080125d4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b082      	sub	sp, #8
 80125d8:	af00      	add	r7, sp, #0
 80125da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80125e2:	4618      	mov	r0, r3
 80125e4:	f7f7 fcd5 	bl	8009f92 <USBH_LL_PortDisabled>
}
 80125e8:	bf00      	nop
 80125ea:	3708      	adds	r7, #8
 80125ec:	46bd      	mov	sp, r7
 80125ee:	bd80      	pop	{r7, pc}

080125f0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80125f0:	b580      	push	{r7, lr}
 80125f2:	b082      	sub	sp, #8
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80125fe:	2b01      	cmp	r3, #1
 8012600:	d12a      	bne.n	8012658 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8012602:	4a18      	ldr	r2, [pc, #96]	; (8012664 <USBH_LL_Init+0x74>)
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	4a15      	ldr	r2, [pc, #84]	; (8012664 <USBH_LL_Init+0x74>)
 801260e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012612:	4b14      	ldr	r3, [pc, #80]	; (8012664 <USBH_LL_Init+0x74>)
 8012614:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8012618:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801261a:	4b12      	ldr	r3, [pc, #72]	; (8012664 <USBH_LL_Init+0x74>)
 801261c:	2208      	movs	r2, #8
 801261e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8012620:	4b10      	ldr	r3, [pc, #64]	; (8012664 <USBH_LL_Init+0x74>)
 8012622:	2201      	movs	r2, #1
 8012624:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012626:	4b0f      	ldr	r3, [pc, #60]	; (8012664 <USBH_LL_Init+0x74>)
 8012628:	2200      	movs	r2, #0
 801262a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801262c:	4b0d      	ldr	r3, [pc, #52]	; (8012664 <USBH_LL_Init+0x74>)
 801262e:	2202      	movs	r2, #2
 8012630:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012632:	4b0c      	ldr	r3, [pc, #48]	; (8012664 <USBH_LL_Init+0x74>)
 8012634:	2200      	movs	r2, #0
 8012636:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8012638:	480a      	ldr	r0, [pc, #40]	; (8012664 <USBH_LL_Init+0x74>)
 801263a:	f7f0 fd2c 	bl	8003096 <HAL_HCD_Init>
 801263e:	4603      	mov	r3, r0
 8012640:	2b00      	cmp	r3, #0
 8012642:	d001      	beq.n	8012648 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8012644:	f7ef f850 	bl	80016e8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8012648:	4806      	ldr	r0, [pc, #24]	; (8012664 <USBH_LL_Init+0x74>)
 801264a:	f7f1 f910 	bl	800386e <HAL_HCD_GetCurrentFrame>
 801264e:	4603      	mov	r3, r0
 8012650:	4619      	mov	r1, r3
 8012652:	6878      	ldr	r0, [r7, #4]
 8012654:	f7f7 fc4a 	bl	8009eec <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8012658:	2300      	movs	r3, #0
}
 801265a:	4618      	mov	r0, r3
 801265c:	3708      	adds	r7, #8
 801265e:	46bd      	mov	sp, r7
 8012660:	bd80      	pop	{r7, pc}
 8012662:	bf00      	nop
 8012664:	2000bff0 	.word	0x2000bff0

08012668 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8012668:	b580      	push	{r7, lr}
 801266a:	b084      	sub	sp, #16
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012670:	2300      	movs	r3, #0
 8012672:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012674:	2300      	movs	r3, #0
 8012676:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801267e:	4618      	mov	r0, r3
 8012680:	f7f1 f87f 	bl	8003782 <HAL_HCD_Start>
 8012684:	4603      	mov	r3, r0
 8012686:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012688:	7bfb      	ldrb	r3, [r7, #15]
 801268a:	4618      	mov	r0, r3
 801268c:	f000 f95c 	bl	8012948 <USBH_Get_USB_Status>
 8012690:	4603      	mov	r3, r0
 8012692:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012694:	7bbb      	ldrb	r3, [r7, #14]
}
 8012696:	4618      	mov	r0, r3
 8012698:	3710      	adds	r7, #16
 801269a:	46bd      	mov	sp, r7
 801269c:	bd80      	pop	{r7, pc}

0801269e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801269e:	b580      	push	{r7, lr}
 80126a0:	b084      	sub	sp, #16
 80126a2:	af00      	add	r7, sp, #0
 80126a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80126a6:	2300      	movs	r3, #0
 80126a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80126aa:	2300      	movs	r3, #0
 80126ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80126b4:	4618      	mov	r0, r3
 80126b6:	f7f1 f887 	bl	80037c8 <HAL_HCD_Stop>
 80126ba:	4603      	mov	r3, r0
 80126bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80126be:	7bfb      	ldrb	r3, [r7, #15]
 80126c0:	4618      	mov	r0, r3
 80126c2:	f000 f941 	bl	8012948 <USBH_Get_USB_Status>
 80126c6:	4603      	mov	r3, r0
 80126c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80126ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80126cc:	4618      	mov	r0, r3
 80126ce:	3710      	adds	r7, #16
 80126d0:	46bd      	mov	sp, r7
 80126d2:	bd80      	pop	{r7, pc}

080126d4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80126d4:	b580      	push	{r7, lr}
 80126d6:	b084      	sub	sp, #16
 80126d8:	af00      	add	r7, sp, #0
 80126da:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80126dc:	2301      	movs	r3, #1
 80126de:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80126e6:	4618      	mov	r0, r3
 80126e8:	f7f1 f8cf 	bl	800388a <HAL_HCD_GetCurrentSpeed>
 80126ec:	4603      	mov	r3, r0
 80126ee:	2b02      	cmp	r3, #2
 80126f0:	d00c      	beq.n	801270c <USBH_LL_GetSpeed+0x38>
 80126f2:	2b02      	cmp	r3, #2
 80126f4:	d80d      	bhi.n	8012712 <USBH_LL_GetSpeed+0x3e>
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d002      	beq.n	8012700 <USBH_LL_GetSpeed+0x2c>
 80126fa:	2b01      	cmp	r3, #1
 80126fc:	d003      	beq.n	8012706 <USBH_LL_GetSpeed+0x32>
 80126fe:	e008      	b.n	8012712 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8012700:	2300      	movs	r3, #0
 8012702:	73fb      	strb	r3, [r7, #15]
    break;
 8012704:	e008      	b.n	8012718 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8012706:	2301      	movs	r3, #1
 8012708:	73fb      	strb	r3, [r7, #15]
    break;
 801270a:	e005      	b.n	8012718 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 801270c:	2302      	movs	r3, #2
 801270e:	73fb      	strb	r3, [r7, #15]
    break;
 8012710:	e002      	b.n	8012718 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8012712:	2301      	movs	r3, #1
 8012714:	73fb      	strb	r3, [r7, #15]
    break;
 8012716:	bf00      	nop
  }
  return  speed;
 8012718:	7bfb      	ldrb	r3, [r7, #15]
}
 801271a:	4618      	mov	r0, r3
 801271c:	3710      	adds	r7, #16
 801271e:	46bd      	mov	sp, r7
 8012720:	bd80      	pop	{r7, pc}

08012722 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8012722:	b580      	push	{r7, lr}
 8012724:	b084      	sub	sp, #16
 8012726:	af00      	add	r7, sp, #0
 8012728:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801272a:	2300      	movs	r3, #0
 801272c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801272e:	2300      	movs	r3, #0
 8012730:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012738:	4618      	mov	r0, r3
 801273a:	f7f1 f862 	bl	8003802 <HAL_HCD_ResetPort>
 801273e:	4603      	mov	r3, r0
 8012740:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012742:	7bfb      	ldrb	r3, [r7, #15]
 8012744:	4618      	mov	r0, r3
 8012746:	f000 f8ff 	bl	8012948 <USBH_Get_USB_Status>
 801274a:	4603      	mov	r3, r0
 801274c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801274e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012750:	4618      	mov	r0, r3
 8012752:	3710      	adds	r7, #16
 8012754:	46bd      	mov	sp, r7
 8012756:	bd80      	pop	{r7, pc}

08012758 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012758:	b580      	push	{r7, lr}
 801275a:	b082      	sub	sp, #8
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
 8012760:	460b      	mov	r3, r1
 8012762:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801276a:	78fa      	ldrb	r2, [r7, #3]
 801276c:	4611      	mov	r1, r2
 801276e:	4618      	mov	r0, r3
 8012770:	f7f1 f869 	bl	8003846 <HAL_HCD_HC_GetXferCount>
 8012774:	4603      	mov	r3, r0
}
 8012776:	4618      	mov	r0, r3
 8012778:	3708      	adds	r7, #8
 801277a:	46bd      	mov	sp, r7
 801277c:	bd80      	pop	{r7, pc}

0801277e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801277e:	b590      	push	{r4, r7, lr}
 8012780:	b089      	sub	sp, #36	; 0x24
 8012782:	af04      	add	r7, sp, #16
 8012784:	6078      	str	r0, [r7, #4]
 8012786:	4608      	mov	r0, r1
 8012788:	4611      	mov	r1, r2
 801278a:	461a      	mov	r2, r3
 801278c:	4603      	mov	r3, r0
 801278e:	70fb      	strb	r3, [r7, #3]
 8012790:	460b      	mov	r3, r1
 8012792:	70bb      	strb	r3, [r7, #2]
 8012794:	4613      	mov	r3, r2
 8012796:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012798:	2300      	movs	r3, #0
 801279a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801279c:	2300      	movs	r3, #0
 801279e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80127a6:	787c      	ldrb	r4, [r7, #1]
 80127a8:	78ba      	ldrb	r2, [r7, #2]
 80127aa:	78f9      	ldrb	r1, [r7, #3]
 80127ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80127ae:	9302      	str	r3, [sp, #8]
 80127b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80127b4:	9301      	str	r3, [sp, #4]
 80127b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80127ba:	9300      	str	r3, [sp, #0]
 80127bc:	4623      	mov	r3, r4
 80127be:	f7f0 fccc 	bl	800315a <HAL_HCD_HC_Init>
 80127c2:	4603      	mov	r3, r0
 80127c4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80127c6:	7bfb      	ldrb	r3, [r7, #15]
 80127c8:	4618      	mov	r0, r3
 80127ca:	f000 f8bd 	bl	8012948 <USBH_Get_USB_Status>
 80127ce:	4603      	mov	r3, r0
 80127d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80127d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80127d4:	4618      	mov	r0, r3
 80127d6:	3714      	adds	r7, #20
 80127d8:	46bd      	mov	sp, r7
 80127da:	bd90      	pop	{r4, r7, pc}

080127dc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80127dc:	b580      	push	{r7, lr}
 80127de:	b084      	sub	sp, #16
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	6078      	str	r0, [r7, #4]
 80127e4:	460b      	mov	r3, r1
 80127e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80127e8:	2300      	movs	r3, #0
 80127ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80127ec:	2300      	movs	r3, #0
 80127ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80127f6:	78fa      	ldrb	r2, [r7, #3]
 80127f8:	4611      	mov	r1, r2
 80127fa:	4618      	mov	r0, r3
 80127fc:	f7f0 fd3c 	bl	8003278 <HAL_HCD_HC_Halt>
 8012800:	4603      	mov	r3, r0
 8012802:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012804:	7bfb      	ldrb	r3, [r7, #15]
 8012806:	4618      	mov	r0, r3
 8012808:	f000 f89e 	bl	8012948 <USBH_Get_USB_Status>
 801280c:	4603      	mov	r3, r0
 801280e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012810:	7bbb      	ldrb	r3, [r7, #14]
}
 8012812:	4618      	mov	r0, r3
 8012814:	3710      	adds	r7, #16
 8012816:	46bd      	mov	sp, r7
 8012818:	bd80      	pop	{r7, pc}

0801281a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801281a:	b590      	push	{r4, r7, lr}
 801281c:	b089      	sub	sp, #36	; 0x24
 801281e:	af04      	add	r7, sp, #16
 8012820:	6078      	str	r0, [r7, #4]
 8012822:	4608      	mov	r0, r1
 8012824:	4611      	mov	r1, r2
 8012826:	461a      	mov	r2, r3
 8012828:	4603      	mov	r3, r0
 801282a:	70fb      	strb	r3, [r7, #3]
 801282c:	460b      	mov	r3, r1
 801282e:	70bb      	strb	r3, [r7, #2]
 8012830:	4613      	mov	r3, r2
 8012832:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012834:	2300      	movs	r3, #0
 8012836:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012838:	2300      	movs	r3, #0
 801283a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8012842:	787c      	ldrb	r4, [r7, #1]
 8012844:	78ba      	ldrb	r2, [r7, #2]
 8012846:	78f9      	ldrb	r1, [r7, #3]
 8012848:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801284c:	9303      	str	r3, [sp, #12]
 801284e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012850:	9302      	str	r3, [sp, #8]
 8012852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012854:	9301      	str	r3, [sp, #4]
 8012856:	f897 3020 	ldrb.w	r3, [r7, #32]
 801285a:	9300      	str	r3, [sp, #0]
 801285c:	4623      	mov	r3, r4
 801285e:	f7f0 fd2f 	bl	80032c0 <HAL_HCD_HC_SubmitRequest>
 8012862:	4603      	mov	r3, r0
 8012864:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8012866:	7bfb      	ldrb	r3, [r7, #15]
 8012868:	4618      	mov	r0, r3
 801286a:	f000 f86d 	bl	8012948 <USBH_Get_USB_Status>
 801286e:	4603      	mov	r3, r0
 8012870:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012872:	7bbb      	ldrb	r3, [r7, #14]
}
 8012874:	4618      	mov	r0, r3
 8012876:	3714      	adds	r7, #20
 8012878:	46bd      	mov	sp, r7
 801287a:	bd90      	pop	{r4, r7, pc}

0801287c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b082      	sub	sp, #8
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
 8012884:	460b      	mov	r3, r1
 8012886:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801288e:	78fa      	ldrb	r2, [r7, #3]
 8012890:	4611      	mov	r1, r2
 8012892:	4618      	mov	r0, r3
 8012894:	f7f0 ffc3 	bl	800381e <HAL_HCD_HC_GetURBState>
 8012898:	4603      	mov	r3, r0
}
 801289a:	4618      	mov	r0, r3
 801289c:	3708      	adds	r7, #8
 801289e:	46bd      	mov	sp, r7
 80128a0:	bd80      	pop	{r7, pc}

080128a2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80128a2:	b580      	push	{r7, lr}
 80128a4:	b082      	sub	sp, #8
 80128a6:	af00      	add	r7, sp, #0
 80128a8:	6078      	str	r0, [r7, #4]
 80128aa:	460b      	mov	r3, r1
 80128ac:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80128b4:	2b01      	cmp	r3, #1
 80128b6:	d103      	bne.n	80128c0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80128b8:	78fb      	ldrb	r3, [r7, #3]
 80128ba:	4618      	mov	r0, r3
 80128bc:	f000 f870 	bl	80129a0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80128c0:	20c8      	movs	r0, #200	; 0xc8
 80128c2:	f7ef fdc3 	bl	800244c <HAL_Delay>
  return USBH_OK;
 80128c6:	2300      	movs	r3, #0
}
 80128c8:	4618      	mov	r0, r3
 80128ca:	3708      	adds	r7, #8
 80128cc:	46bd      	mov	sp, r7
 80128ce:	bd80      	pop	{r7, pc}

080128d0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80128d0:	b480      	push	{r7}
 80128d2:	b085      	sub	sp, #20
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	6078      	str	r0, [r7, #4]
 80128d8:	460b      	mov	r3, r1
 80128da:	70fb      	strb	r3, [r7, #3]
 80128dc:	4613      	mov	r3, r2
 80128de:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80128e6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80128e8:	78fb      	ldrb	r3, [r7, #3]
 80128ea:	68fa      	ldr	r2, [r7, #12]
 80128ec:	212c      	movs	r1, #44	; 0x2c
 80128ee:	fb01 f303 	mul.w	r3, r1, r3
 80128f2:	4413      	add	r3, r2
 80128f4:	333b      	adds	r3, #59	; 0x3b
 80128f6:	781b      	ldrb	r3, [r3, #0]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d009      	beq.n	8012910 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80128fc:	78fb      	ldrb	r3, [r7, #3]
 80128fe:	68fa      	ldr	r2, [r7, #12]
 8012900:	212c      	movs	r1, #44	; 0x2c
 8012902:	fb01 f303 	mul.w	r3, r1, r3
 8012906:	4413      	add	r3, r2
 8012908:	3354      	adds	r3, #84	; 0x54
 801290a:	78ba      	ldrb	r2, [r7, #2]
 801290c:	701a      	strb	r2, [r3, #0]
 801290e:	e008      	b.n	8012922 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8012910:	78fb      	ldrb	r3, [r7, #3]
 8012912:	68fa      	ldr	r2, [r7, #12]
 8012914:	212c      	movs	r1, #44	; 0x2c
 8012916:	fb01 f303 	mul.w	r3, r1, r3
 801291a:	4413      	add	r3, r2
 801291c:	3355      	adds	r3, #85	; 0x55
 801291e:	78ba      	ldrb	r2, [r7, #2]
 8012920:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8012922:	2300      	movs	r3, #0
}
 8012924:	4618      	mov	r0, r3
 8012926:	3714      	adds	r7, #20
 8012928:	46bd      	mov	sp, r7
 801292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292e:	4770      	bx	lr

08012930 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8012930:	b580      	push	{r7, lr}
 8012932:	b082      	sub	sp, #8
 8012934:	af00      	add	r7, sp, #0
 8012936:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8012938:	6878      	ldr	r0, [r7, #4]
 801293a:	f7ef fd87 	bl	800244c <HAL_Delay>
}
 801293e:	bf00      	nop
 8012940:	3708      	adds	r7, #8
 8012942:	46bd      	mov	sp, r7
 8012944:	bd80      	pop	{r7, pc}
	...

08012948 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012948:	b480      	push	{r7}
 801294a:	b085      	sub	sp, #20
 801294c:	af00      	add	r7, sp, #0
 801294e:	4603      	mov	r3, r0
 8012950:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012952:	2300      	movs	r3, #0
 8012954:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012956:	79fb      	ldrb	r3, [r7, #7]
 8012958:	2b03      	cmp	r3, #3
 801295a:	d817      	bhi.n	801298c <USBH_Get_USB_Status+0x44>
 801295c:	a201      	add	r2, pc, #4	; (adr r2, 8012964 <USBH_Get_USB_Status+0x1c>)
 801295e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012962:	bf00      	nop
 8012964:	08012975 	.word	0x08012975
 8012968:	0801297b 	.word	0x0801297b
 801296c:	08012981 	.word	0x08012981
 8012970:	08012987 	.word	0x08012987
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8012974:	2300      	movs	r3, #0
 8012976:	73fb      	strb	r3, [r7, #15]
    break;
 8012978:	e00b      	b.n	8012992 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801297a:	2302      	movs	r3, #2
 801297c:	73fb      	strb	r3, [r7, #15]
    break;
 801297e:	e008      	b.n	8012992 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8012980:	2301      	movs	r3, #1
 8012982:	73fb      	strb	r3, [r7, #15]
    break;
 8012984:	e005      	b.n	8012992 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8012986:	2302      	movs	r3, #2
 8012988:	73fb      	strb	r3, [r7, #15]
    break;
 801298a:	e002      	b.n	8012992 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801298c:	2302      	movs	r3, #2
 801298e:	73fb      	strb	r3, [r7, #15]
    break;
 8012990:	bf00      	nop
  }
  return usb_status;
 8012992:	7bfb      	ldrb	r3, [r7, #15]
}
 8012994:	4618      	mov	r0, r3
 8012996:	3714      	adds	r7, #20
 8012998:	46bd      	mov	sp, r7
 801299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299e:	4770      	bx	lr

080129a0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80129a0:	b580      	push	{r7, lr}
 80129a2:	b084      	sub	sp, #16
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	4603      	mov	r3, r0
 80129a8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80129aa:	79fb      	ldrb	r3, [r7, #7]
 80129ac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80129ae:	79fb      	ldrb	r3, [r7, #7]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d102      	bne.n	80129ba <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80129b4:	2301      	movs	r3, #1
 80129b6:	73fb      	strb	r3, [r7, #15]
 80129b8:	e001      	b.n	80129be <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80129ba:	2300      	movs	r3, #0
 80129bc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,(GPIO_PinState)data);
 80129be:	7bfb      	ldrb	r3, [r7, #15]
 80129c0:	461a      	mov	r2, r3
 80129c2:	2101      	movs	r1, #1
 80129c4:	4803      	ldr	r0, [pc, #12]	; (80129d4 <MX_DriverVbusFS+0x34>)
 80129c6:	f7f0 fb4d 	bl	8003064 <HAL_GPIO_WritePin>
}
 80129ca:	bf00      	nop
 80129cc:	3710      	adds	r7, #16
 80129ce:	46bd      	mov	sp, r7
 80129d0:	bd80      	pop	{r7, pc}
 80129d2:	bf00      	nop
 80129d4:	40020400 	.word	0x40020400

080129d8 <__errno>:
 80129d8:	4b01      	ldr	r3, [pc, #4]	; (80129e0 <__errno+0x8>)
 80129da:	6818      	ldr	r0, [r3, #0]
 80129dc:	4770      	bx	lr
 80129de:	bf00      	nop
 80129e0:	200002b0 	.word	0x200002b0

080129e4 <std>:
 80129e4:	2300      	movs	r3, #0
 80129e6:	b510      	push	{r4, lr}
 80129e8:	4604      	mov	r4, r0
 80129ea:	e9c0 3300 	strd	r3, r3, [r0]
 80129ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80129f2:	6083      	str	r3, [r0, #8]
 80129f4:	8181      	strh	r1, [r0, #12]
 80129f6:	6643      	str	r3, [r0, #100]	; 0x64
 80129f8:	81c2      	strh	r2, [r0, #14]
 80129fa:	6183      	str	r3, [r0, #24]
 80129fc:	4619      	mov	r1, r3
 80129fe:	2208      	movs	r2, #8
 8012a00:	305c      	adds	r0, #92	; 0x5c
 8012a02:	f000 f92b 	bl	8012c5c <memset>
 8012a06:	4b05      	ldr	r3, [pc, #20]	; (8012a1c <std+0x38>)
 8012a08:	6263      	str	r3, [r4, #36]	; 0x24
 8012a0a:	4b05      	ldr	r3, [pc, #20]	; (8012a20 <std+0x3c>)
 8012a0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8012a0e:	4b05      	ldr	r3, [pc, #20]	; (8012a24 <std+0x40>)
 8012a10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012a12:	4b05      	ldr	r3, [pc, #20]	; (8012a28 <std+0x44>)
 8012a14:	6224      	str	r4, [r4, #32]
 8012a16:	6323      	str	r3, [r4, #48]	; 0x30
 8012a18:	bd10      	pop	{r4, pc}
 8012a1a:	bf00      	nop
 8012a1c:	08012f61 	.word	0x08012f61
 8012a20:	08012f83 	.word	0x08012f83
 8012a24:	08012fbb 	.word	0x08012fbb
 8012a28:	08012fdf 	.word	0x08012fdf

08012a2c <_cleanup_r>:
 8012a2c:	4901      	ldr	r1, [pc, #4]	; (8012a34 <_cleanup_r+0x8>)
 8012a2e:	f000 b8af 	b.w	8012b90 <_fwalk_reent>
 8012a32:	bf00      	nop
 8012a34:	0801322d 	.word	0x0801322d

08012a38 <__sfmoreglue>:
 8012a38:	b570      	push	{r4, r5, r6, lr}
 8012a3a:	2268      	movs	r2, #104	; 0x68
 8012a3c:	1e4d      	subs	r5, r1, #1
 8012a3e:	4355      	muls	r5, r2
 8012a40:	460e      	mov	r6, r1
 8012a42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012a46:	f000 f97d 	bl	8012d44 <_malloc_r>
 8012a4a:	4604      	mov	r4, r0
 8012a4c:	b140      	cbz	r0, 8012a60 <__sfmoreglue+0x28>
 8012a4e:	2100      	movs	r1, #0
 8012a50:	e9c0 1600 	strd	r1, r6, [r0]
 8012a54:	300c      	adds	r0, #12
 8012a56:	60a0      	str	r0, [r4, #8]
 8012a58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012a5c:	f000 f8fe 	bl	8012c5c <memset>
 8012a60:	4620      	mov	r0, r4
 8012a62:	bd70      	pop	{r4, r5, r6, pc}

08012a64 <__sfp_lock_acquire>:
 8012a64:	4801      	ldr	r0, [pc, #4]	; (8012a6c <__sfp_lock_acquire+0x8>)
 8012a66:	f000 b8d8 	b.w	8012c1a <__retarget_lock_acquire_recursive>
 8012a6a:	bf00      	nop
 8012a6c:	2000c2f5 	.word	0x2000c2f5

08012a70 <__sfp_lock_release>:
 8012a70:	4801      	ldr	r0, [pc, #4]	; (8012a78 <__sfp_lock_release+0x8>)
 8012a72:	f000 b8d3 	b.w	8012c1c <__retarget_lock_release_recursive>
 8012a76:	bf00      	nop
 8012a78:	2000c2f5 	.word	0x2000c2f5

08012a7c <__sinit_lock_acquire>:
 8012a7c:	4801      	ldr	r0, [pc, #4]	; (8012a84 <__sinit_lock_acquire+0x8>)
 8012a7e:	f000 b8cc 	b.w	8012c1a <__retarget_lock_acquire_recursive>
 8012a82:	bf00      	nop
 8012a84:	2000c2f6 	.word	0x2000c2f6

08012a88 <__sinit_lock_release>:
 8012a88:	4801      	ldr	r0, [pc, #4]	; (8012a90 <__sinit_lock_release+0x8>)
 8012a8a:	f000 b8c7 	b.w	8012c1c <__retarget_lock_release_recursive>
 8012a8e:	bf00      	nop
 8012a90:	2000c2f6 	.word	0x2000c2f6

08012a94 <__sinit>:
 8012a94:	b510      	push	{r4, lr}
 8012a96:	4604      	mov	r4, r0
 8012a98:	f7ff fff0 	bl	8012a7c <__sinit_lock_acquire>
 8012a9c:	69a3      	ldr	r3, [r4, #24]
 8012a9e:	b11b      	cbz	r3, 8012aa8 <__sinit+0x14>
 8012aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012aa4:	f7ff bff0 	b.w	8012a88 <__sinit_lock_release>
 8012aa8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012aac:	6523      	str	r3, [r4, #80]	; 0x50
 8012aae:	4b13      	ldr	r3, [pc, #76]	; (8012afc <__sinit+0x68>)
 8012ab0:	4a13      	ldr	r2, [pc, #76]	; (8012b00 <__sinit+0x6c>)
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	62a2      	str	r2, [r4, #40]	; 0x28
 8012ab6:	42a3      	cmp	r3, r4
 8012ab8:	bf04      	itt	eq
 8012aba:	2301      	moveq	r3, #1
 8012abc:	61a3      	streq	r3, [r4, #24]
 8012abe:	4620      	mov	r0, r4
 8012ac0:	f000 f820 	bl	8012b04 <__sfp>
 8012ac4:	6060      	str	r0, [r4, #4]
 8012ac6:	4620      	mov	r0, r4
 8012ac8:	f000 f81c 	bl	8012b04 <__sfp>
 8012acc:	60a0      	str	r0, [r4, #8]
 8012ace:	4620      	mov	r0, r4
 8012ad0:	f000 f818 	bl	8012b04 <__sfp>
 8012ad4:	2200      	movs	r2, #0
 8012ad6:	60e0      	str	r0, [r4, #12]
 8012ad8:	2104      	movs	r1, #4
 8012ada:	6860      	ldr	r0, [r4, #4]
 8012adc:	f7ff ff82 	bl	80129e4 <std>
 8012ae0:	68a0      	ldr	r0, [r4, #8]
 8012ae2:	2201      	movs	r2, #1
 8012ae4:	2109      	movs	r1, #9
 8012ae6:	f7ff ff7d 	bl	80129e4 <std>
 8012aea:	68e0      	ldr	r0, [r4, #12]
 8012aec:	2202      	movs	r2, #2
 8012aee:	2112      	movs	r1, #18
 8012af0:	f7ff ff78 	bl	80129e4 <std>
 8012af4:	2301      	movs	r3, #1
 8012af6:	61a3      	str	r3, [r4, #24]
 8012af8:	e7d2      	b.n	8012aa0 <__sinit+0xc>
 8012afa:	bf00      	nop
 8012afc:	08014790 	.word	0x08014790
 8012b00:	08012a2d 	.word	0x08012a2d

08012b04 <__sfp>:
 8012b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b06:	4607      	mov	r7, r0
 8012b08:	f7ff ffac 	bl	8012a64 <__sfp_lock_acquire>
 8012b0c:	4b1e      	ldr	r3, [pc, #120]	; (8012b88 <__sfp+0x84>)
 8012b0e:	681e      	ldr	r6, [r3, #0]
 8012b10:	69b3      	ldr	r3, [r6, #24]
 8012b12:	b913      	cbnz	r3, 8012b1a <__sfp+0x16>
 8012b14:	4630      	mov	r0, r6
 8012b16:	f7ff ffbd 	bl	8012a94 <__sinit>
 8012b1a:	3648      	adds	r6, #72	; 0x48
 8012b1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012b20:	3b01      	subs	r3, #1
 8012b22:	d503      	bpl.n	8012b2c <__sfp+0x28>
 8012b24:	6833      	ldr	r3, [r6, #0]
 8012b26:	b30b      	cbz	r3, 8012b6c <__sfp+0x68>
 8012b28:	6836      	ldr	r6, [r6, #0]
 8012b2a:	e7f7      	b.n	8012b1c <__sfp+0x18>
 8012b2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012b30:	b9d5      	cbnz	r5, 8012b68 <__sfp+0x64>
 8012b32:	4b16      	ldr	r3, [pc, #88]	; (8012b8c <__sfp+0x88>)
 8012b34:	60e3      	str	r3, [r4, #12]
 8012b36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012b3a:	6665      	str	r5, [r4, #100]	; 0x64
 8012b3c:	f000 f86c 	bl	8012c18 <__retarget_lock_init_recursive>
 8012b40:	f7ff ff96 	bl	8012a70 <__sfp_lock_release>
 8012b44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012b48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012b4c:	6025      	str	r5, [r4, #0]
 8012b4e:	61a5      	str	r5, [r4, #24]
 8012b50:	2208      	movs	r2, #8
 8012b52:	4629      	mov	r1, r5
 8012b54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012b58:	f000 f880 	bl	8012c5c <memset>
 8012b5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012b60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012b64:	4620      	mov	r0, r4
 8012b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b68:	3468      	adds	r4, #104	; 0x68
 8012b6a:	e7d9      	b.n	8012b20 <__sfp+0x1c>
 8012b6c:	2104      	movs	r1, #4
 8012b6e:	4638      	mov	r0, r7
 8012b70:	f7ff ff62 	bl	8012a38 <__sfmoreglue>
 8012b74:	4604      	mov	r4, r0
 8012b76:	6030      	str	r0, [r6, #0]
 8012b78:	2800      	cmp	r0, #0
 8012b7a:	d1d5      	bne.n	8012b28 <__sfp+0x24>
 8012b7c:	f7ff ff78 	bl	8012a70 <__sfp_lock_release>
 8012b80:	230c      	movs	r3, #12
 8012b82:	603b      	str	r3, [r7, #0]
 8012b84:	e7ee      	b.n	8012b64 <__sfp+0x60>
 8012b86:	bf00      	nop
 8012b88:	08014790 	.word	0x08014790
 8012b8c:	ffff0001 	.word	0xffff0001

08012b90 <_fwalk_reent>:
 8012b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b94:	4606      	mov	r6, r0
 8012b96:	4688      	mov	r8, r1
 8012b98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012b9c:	2700      	movs	r7, #0
 8012b9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012ba2:	f1b9 0901 	subs.w	r9, r9, #1
 8012ba6:	d505      	bpl.n	8012bb4 <_fwalk_reent+0x24>
 8012ba8:	6824      	ldr	r4, [r4, #0]
 8012baa:	2c00      	cmp	r4, #0
 8012bac:	d1f7      	bne.n	8012b9e <_fwalk_reent+0xe>
 8012bae:	4638      	mov	r0, r7
 8012bb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bb4:	89ab      	ldrh	r3, [r5, #12]
 8012bb6:	2b01      	cmp	r3, #1
 8012bb8:	d907      	bls.n	8012bca <_fwalk_reent+0x3a>
 8012bba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012bbe:	3301      	adds	r3, #1
 8012bc0:	d003      	beq.n	8012bca <_fwalk_reent+0x3a>
 8012bc2:	4629      	mov	r1, r5
 8012bc4:	4630      	mov	r0, r6
 8012bc6:	47c0      	blx	r8
 8012bc8:	4307      	orrs	r7, r0
 8012bca:	3568      	adds	r5, #104	; 0x68
 8012bcc:	e7e9      	b.n	8012ba2 <_fwalk_reent+0x12>
	...

08012bd0 <__libc_init_array>:
 8012bd0:	b570      	push	{r4, r5, r6, lr}
 8012bd2:	4d0d      	ldr	r5, [pc, #52]	; (8012c08 <__libc_init_array+0x38>)
 8012bd4:	4c0d      	ldr	r4, [pc, #52]	; (8012c0c <__libc_init_array+0x3c>)
 8012bd6:	1b64      	subs	r4, r4, r5
 8012bd8:	10a4      	asrs	r4, r4, #2
 8012bda:	2600      	movs	r6, #0
 8012bdc:	42a6      	cmp	r6, r4
 8012bde:	d109      	bne.n	8012bf4 <__libc_init_array+0x24>
 8012be0:	4d0b      	ldr	r5, [pc, #44]	; (8012c10 <__libc_init_array+0x40>)
 8012be2:	4c0c      	ldr	r4, [pc, #48]	; (8012c14 <__libc_init_array+0x44>)
 8012be4:	f001 f9ce 	bl	8013f84 <_init>
 8012be8:	1b64      	subs	r4, r4, r5
 8012bea:	10a4      	asrs	r4, r4, #2
 8012bec:	2600      	movs	r6, #0
 8012bee:	42a6      	cmp	r6, r4
 8012bf0:	d105      	bne.n	8012bfe <__libc_init_array+0x2e>
 8012bf2:	bd70      	pop	{r4, r5, r6, pc}
 8012bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8012bf8:	4798      	blx	r3
 8012bfa:	3601      	adds	r6, #1
 8012bfc:	e7ee      	b.n	8012bdc <__libc_init_array+0xc>
 8012bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8012c02:	4798      	blx	r3
 8012c04:	3601      	adds	r6, #1
 8012c06:	e7f2      	b.n	8012bee <__libc_init_array+0x1e>
 8012c08:	08014880 	.word	0x08014880
 8012c0c:	08014880 	.word	0x08014880
 8012c10:	08014880 	.word	0x08014880
 8012c14:	08014884 	.word	0x08014884

08012c18 <__retarget_lock_init_recursive>:
 8012c18:	4770      	bx	lr

08012c1a <__retarget_lock_acquire_recursive>:
 8012c1a:	4770      	bx	lr

08012c1c <__retarget_lock_release_recursive>:
 8012c1c:	4770      	bx	lr
	...

08012c20 <malloc>:
 8012c20:	4b02      	ldr	r3, [pc, #8]	; (8012c2c <malloc+0xc>)
 8012c22:	4601      	mov	r1, r0
 8012c24:	6818      	ldr	r0, [r3, #0]
 8012c26:	f000 b88d 	b.w	8012d44 <_malloc_r>
 8012c2a:	bf00      	nop
 8012c2c:	200002b0 	.word	0x200002b0

08012c30 <free>:
 8012c30:	4b02      	ldr	r3, [pc, #8]	; (8012c3c <free+0xc>)
 8012c32:	4601      	mov	r1, r0
 8012c34:	6818      	ldr	r0, [r3, #0]
 8012c36:	f000 b819 	b.w	8012c6c <_free_r>
 8012c3a:	bf00      	nop
 8012c3c:	200002b0 	.word	0x200002b0

08012c40 <memcpy>:
 8012c40:	440a      	add	r2, r1
 8012c42:	4291      	cmp	r1, r2
 8012c44:	f100 33ff 	add.w	r3, r0, #4294967295
 8012c48:	d100      	bne.n	8012c4c <memcpy+0xc>
 8012c4a:	4770      	bx	lr
 8012c4c:	b510      	push	{r4, lr}
 8012c4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012c52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012c56:	4291      	cmp	r1, r2
 8012c58:	d1f9      	bne.n	8012c4e <memcpy+0xe>
 8012c5a:	bd10      	pop	{r4, pc}

08012c5c <memset>:
 8012c5c:	4402      	add	r2, r0
 8012c5e:	4603      	mov	r3, r0
 8012c60:	4293      	cmp	r3, r2
 8012c62:	d100      	bne.n	8012c66 <memset+0xa>
 8012c64:	4770      	bx	lr
 8012c66:	f803 1b01 	strb.w	r1, [r3], #1
 8012c6a:	e7f9      	b.n	8012c60 <memset+0x4>

08012c6c <_free_r>:
 8012c6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012c6e:	2900      	cmp	r1, #0
 8012c70:	d044      	beq.n	8012cfc <_free_r+0x90>
 8012c72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c76:	9001      	str	r0, [sp, #4]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	f1a1 0404 	sub.w	r4, r1, #4
 8012c7e:	bfb8      	it	lt
 8012c80:	18e4      	addlt	r4, r4, r3
 8012c82:	f000 fb33 	bl	80132ec <__malloc_lock>
 8012c86:	4a1e      	ldr	r2, [pc, #120]	; (8012d00 <_free_r+0x94>)
 8012c88:	9801      	ldr	r0, [sp, #4]
 8012c8a:	6813      	ldr	r3, [r2, #0]
 8012c8c:	b933      	cbnz	r3, 8012c9c <_free_r+0x30>
 8012c8e:	6063      	str	r3, [r4, #4]
 8012c90:	6014      	str	r4, [r2, #0]
 8012c92:	b003      	add	sp, #12
 8012c94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012c98:	f000 bb2e 	b.w	80132f8 <__malloc_unlock>
 8012c9c:	42a3      	cmp	r3, r4
 8012c9e:	d908      	bls.n	8012cb2 <_free_r+0x46>
 8012ca0:	6825      	ldr	r5, [r4, #0]
 8012ca2:	1961      	adds	r1, r4, r5
 8012ca4:	428b      	cmp	r3, r1
 8012ca6:	bf01      	itttt	eq
 8012ca8:	6819      	ldreq	r1, [r3, #0]
 8012caa:	685b      	ldreq	r3, [r3, #4]
 8012cac:	1949      	addeq	r1, r1, r5
 8012cae:	6021      	streq	r1, [r4, #0]
 8012cb0:	e7ed      	b.n	8012c8e <_free_r+0x22>
 8012cb2:	461a      	mov	r2, r3
 8012cb4:	685b      	ldr	r3, [r3, #4]
 8012cb6:	b10b      	cbz	r3, 8012cbc <_free_r+0x50>
 8012cb8:	42a3      	cmp	r3, r4
 8012cba:	d9fa      	bls.n	8012cb2 <_free_r+0x46>
 8012cbc:	6811      	ldr	r1, [r2, #0]
 8012cbe:	1855      	adds	r5, r2, r1
 8012cc0:	42a5      	cmp	r5, r4
 8012cc2:	d10b      	bne.n	8012cdc <_free_r+0x70>
 8012cc4:	6824      	ldr	r4, [r4, #0]
 8012cc6:	4421      	add	r1, r4
 8012cc8:	1854      	adds	r4, r2, r1
 8012cca:	42a3      	cmp	r3, r4
 8012ccc:	6011      	str	r1, [r2, #0]
 8012cce:	d1e0      	bne.n	8012c92 <_free_r+0x26>
 8012cd0:	681c      	ldr	r4, [r3, #0]
 8012cd2:	685b      	ldr	r3, [r3, #4]
 8012cd4:	6053      	str	r3, [r2, #4]
 8012cd6:	4421      	add	r1, r4
 8012cd8:	6011      	str	r1, [r2, #0]
 8012cda:	e7da      	b.n	8012c92 <_free_r+0x26>
 8012cdc:	d902      	bls.n	8012ce4 <_free_r+0x78>
 8012cde:	230c      	movs	r3, #12
 8012ce0:	6003      	str	r3, [r0, #0]
 8012ce2:	e7d6      	b.n	8012c92 <_free_r+0x26>
 8012ce4:	6825      	ldr	r5, [r4, #0]
 8012ce6:	1961      	adds	r1, r4, r5
 8012ce8:	428b      	cmp	r3, r1
 8012cea:	bf04      	itt	eq
 8012cec:	6819      	ldreq	r1, [r3, #0]
 8012cee:	685b      	ldreq	r3, [r3, #4]
 8012cf0:	6063      	str	r3, [r4, #4]
 8012cf2:	bf04      	itt	eq
 8012cf4:	1949      	addeq	r1, r1, r5
 8012cf6:	6021      	streq	r1, [r4, #0]
 8012cf8:	6054      	str	r4, [r2, #4]
 8012cfa:	e7ca      	b.n	8012c92 <_free_r+0x26>
 8012cfc:	b003      	add	sp, #12
 8012cfe:	bd30      	pop	{r4, r5, pc}
 8012d00:	2000c2f8 	.word	0x2000c2f8

08012d04 <sbrk_aligned>:
 8012d04:	b570      	push	{r4, r5, r6, lr}
 8012d06:	4e0e      	ldr	r6, [pc, #56]	; (8012d40 <sbrk_aligned+0x3c>)
 8012d08:	460c      	mov	r4, r1
 8012d0a:	6831      	ldr	r1, [r6, #0]
 8012d0c:	4605      	mov	r5, r0
 8012d0e:	b911      	cbnz	r1, 8012d16 <sbrk_aligned+0x12>
 8012d10:	f000 f8f6 	bl	8012f00 <_sbrk_r>
 8012d14:	6030      	str	r0, [r6, #0]
 8012d16:	4621      	mov	r1, r4
 8012d18:	4628      	mov	r0, r5
 8012d1a:	f000 f8f1 	bl	8012f00 <_sbrk_r>
 8012d1e:	1c43      	adds	r3, r0, #1
 8012d20:	d00a      	beq.n	8012d38 <sbrk_aligned+0x34>
 8012d22:	1cc4      	adds	r4, r0, #3
 8012d24:	f024 0403 	bic.w	r4, r4, #3
 8012d28:	42a0      	cmp	r0, r4
 8012d2a:	d007      	beq.n	8012d3c <sbrk_aligned+0x38>
 8012d2c:	1a21      	subs	r1, r4, r0
 8012d2e:	4628      	mov	r0, r5
 8012d30:	f000 f8e6 	bl	8012f00 <_sbrk_r>
 8012d34:	3001      	adds	r0, #1
 8012d36:	d101      	bne.n	8012d3c <sbrk_aligned+0x38>
 8012d38:	f04f 34ff 	mov.w	r4, #4294967295
 8012d3c:	4620      	mov	r0, r4
 8012d3e:	bd70      	pop	{r4, r5, r6, pc}
 8012d40:	2000c2fc 	.word	0x2000c2fc

08012d44 <_malloc_r>:
 8012d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d48:	1ccd      	adds	r5, r1, #3
 8012d4a:	f025 0503 	bic.w	r5, r5, #3
 8012d4e:	3508      	adds	r5, #8
 8012d50:	2d0c      	cmp	r5, #12
 8012d52:	bf38      	it	cc
 8012d54:	250c      	movcc	r5, #12
 8012d56:	2d00      	cmp	r5, #0
 8012d58:	4607      	mov	r7, r0
 8012d5a:	db01      	blt.n	8012d60 <_malloc_r+0x1c>
 8012d5c:	42a9      	cmp	r1, r5
 8012d5e:	d905      	bls.n	8012d6c <_malloc_r+0x28>
 8012d60:	230c      	movs	r3, #12
 8012d62:	603b      	str	r3, [r7, #0]
 8012d64:	2600      	movs	r6, #0
 8012d66:	4630      	mov	r0, r6
 8012d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d6c:	4e2e      	ldr	r6, [pc, #184]	; (8012e28 <_malloc_r+0xe4>)
 8012d6e:	f000 fabd 	bl	80132ec <__malloc_lock>
 8012d72:	6833      	ldr	r3, [r6, #0]
 8012d74:	461c      	mov	r4, r3
 8012d76:	bb34      	cbnz	r4, 8012dc6 <_malloc_r+0x82>
 8012d78:	4629      	mov	r1, r5
 8012d7a:	4638      	mov	r0, r7
 8012d7c:	f7ff ffc2 	bl	8012d04 <sbrk_aligned>
 8012d80:	1c43      	adds	r3, r0, #1
 8012d82:	4604      	mov	r4, r0
 8012d84:	d14d      	bne.n	8012e22 <_malloc_r+0xde>
 8012d86:	6834      	ldr	r4, [r6, #0]
 8012d88:	4626      	mov	r6, r4
 8012d8a:	2e00      	cmp	r6, #0
 8012d8c:	d140      	bne.n	8012e10 <_malloc_r+0xcc>
 8012d8e:	6823      	ldr	r3, [r4, #0]
 8012d90:	4631      	mov	r1, r6
 8012d92:	4638      	mov	r0, r7
 8012d94:	eb04 0803 	add.w	r8, r4, r3
 8012d98:	f000 f8b2 	bl	8012f00 <_sbrk_r>
 8012d9c:	4580      	cmp	r8, r0
 8012d9e:	d13a      	bne.n	8012e16 <_malloc_r+0xd2>
 8012da0:	6821      	ldr	r1, [r4, #0]
 8012da2:	3503      	adds	r5, #3
 8012da4:	1a6d      	subs	r5, r5, r1
 8012da6:	f025 0503 	bic.w	r5, r5, #3
 8012daa:	3508      	adds	r5, #8
 8012dac:	2d0c      	cmp	r5, #12
 8012dae:	bf38      	it	cc
 8012db0:	250c      	movcc	r5, #12
 8012db2:	4629      	mov	r1, r5
 8012db4:	4638      	mov	r0, r7
 8012db6:	f7ff ffa5 	bl	8012d04 <sbrk_aligned>
 8012dba:	3001      	adds	r0, #1
 8012dbc:	d02b      	beq.n	8012e16 <_malloc_r+0xd2>
 8012dbe:	6823      	ldr	r3, [r4, #0]
 8012dc0:	442b      	add	r3, r5
 8012dc2:	6023      	str	r3, [r4, #0]
 8012dc4:	e00e      	b.n	8012de4 <_malloc_r+0xa0>
 8012dc6:	6822      	ldr	r2, [r4, #0]
 8012dc8:	1b52      	subs	r2, r2, r5
 8012dca:	d41e      	bmi.n	8012e0a <_malloc_r+0xc6>
 8012dcc:	2a0b      	cmp	r2, #11
 8012dce:	d916      	bls.n	8012dfe <_malloc_r+0xba>
 8012dd0:	1961      	adds	r1, r4, r5
 8012dd2:	42a3      	cmp	r3, r4
 8012dd4:	6025      	str	r5, [r4, #0]
 8012dd6:	bf18      	it	ne
 8012dd8:	6059      	strne	r1, [r3, #4]
 8012dda:	6863      	ldr	r3, [r4, #4]
 8012ddc:	bf08      	it	eq
 8012dde:	6031      	streq	r1, [r6, #0]
 8012de0:	5162      	str	r2, [r4, r5]
 8012de2:	604b      	str	r3, [r1, #4]
 8012de4:	4638      	mov	r0, r7
 8012de6:	f104 060b 	add.w	r6, r4, #11
 8012dea:	f000 fa85 	bl	80132f8 <__malloc_unlock>
 8012dee:	f026 0607 	bic.w	r6, r6, #7
 8012df2:	1d23      	adds	r3, r4, #4
 8012df4:	1af2      	subs	r2, r6, r3
 8012df6:	d0b6      	beq.n	8012d66 <_malloc_r+0x22>
 8012df8:	1b9b      	subs	r3, r3, r6
 8012dfa:	50a3      	str	r3, [r4, r2]
 8012dfc:	e7b3      	b.n	8012d66 <_malloc_r+0x22>
 8012dfe:	6862      	ldr	r2, [r4, #4]
 8012e00:	42a3      	cmp	r3, r4
 8012e02:	bf0c      	ite	eq
 8012e04:	6032      	streq	r2, [r6, #0]
 8012e06:	605a      	strne	r2, [r3, #4]
 8012e08:	e7ec      	b.n	8012de4 <_malloc_r+0xa0>
 8012e0a:	4623      	mov	r3, r4
 8012e0c:	6864      	ldr	r4, [r4, #4]
 8012e0e:	e7b2      	b.n	8012d76 <_malloc_r+0x32>
 8012e10:	4634      	mov	r4, r6
 8012e12:	6876      	ldr	r6, [r6, #4]
 8012e14:	e7b9      	b.n	8012d8a <_malloc_r+0x46>
 8012e16:	230c      	movs	r3, #12
 8012e18:	603b      	str	r3, [r7, #0]
 8012e1a:	4638      	mov	r0, r7
 8012e1c:	f000 fa6c 	bl	80132f8 <__malloc_unlock>
 8012e20:	e7a1      	b.n	8012d66 <_malloc_r+0x22>
 8012e22:	6025      	str	r5, [r4, #0]
 8012e24:	e7de      	b.n	8012de4 <_malloc_r+0xa0>
 8012e26:	bf00      	nop
 8012e28:	2000c2f8 	.word	0x2000c2f8

08012e2c <cleanup_glue>:
 8012e2c:	b538      	push	{r3, r4, r5, lr}
 8012e2e:	460c      	mov	r4, r1
 8012e30:	6809      	ldr	r1, [r1, #0]
 8012e32:	4605      	mov	r5, r0
 8012e34:	b109      	cbz	r1, 8012e3a <cleanup_glue+0xe>
 8012e36:	f7ff fff9 	bl	8012e2c <cleanup_glue>
 8012e3a:	4621      	mov	r1, r4
 8012e3c:	4628      	mov	r0, r5
 8012e3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012e42:	f7ff bf13 	b.w	8012c6c <_free_r>
	...

08012e48 <_reclaim_reent>:
 8012e48:	4b2c      	ldr	r3, [pc, #176]	; (8012efc <_reclaim_reent+0xb4>)
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	4283      	cmp	r3, r0
 8012e4e:	b570      	push	{r4, r5, r6, lr}
 8012e50:	4604      	mov	r4, r0
 8012e52:	d051      	beq.n	8012ef8 <_reclaim_reent+0xb0>
 8012e54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012e56:	b143      	cbz	r3, 8012e6a <_reclaim_reent+0x22>
 8012e58:	68db      	ldr	r3, [r3, #12]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d14a      	bne.n	8012ef4 <_reclaim_reent+0xac>
 8012e5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e60:	6819      	ldr	r1, [r3, #0]
 8012e62:	b111      	cbz	r1, 8012e6a <_reclaim_reent+0x22>
 8012e64:	4620      	mov	r0, r4
 8012e66:	f7ff ff01 	bl	8012c6c <_free_r>
 8012e6a:	6961      	ldr	r1, [r4, #20]
 8012e6c:	b111      	cbz	r1, 8012e74 <_reclaim_reent+0x2c>
 8012e6e:	4620      	mov	r0, r4
 8012e70:	f7ff fefc 	bl	8012c6c <_free_r>
 8012e74:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012e76:	b111      	cbz	r1, 8012e7e <_reclaim_reent+0x36>
 8012e78:	4620      	mov	r0, r4
 8012e7a:	f7ff fef7 	bl	8012c6c <_free_r>
 8012e7e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012e80:	b111      	cbz	r1, 8012e88 <_reclaim_reent+0x40>
 8012e82:	4620      	mov	r0, r4
 8012e84:	f7ff fef2 	bl	8012c6c <_free_r>
 8012e88:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012e8a:	b111      	cbz	r1, 8012e92 <_reclaim_reent+0x4a>
 8012e8c:	4620      	mov	r0, r4
 8012e8e:	f7ff feed 	bl	8012c6c <_free_r>
 8012e92:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012e94:	b111      	cbz	r1, 8012e9c <_reclaim_reent+0x54>
 8012e96:	4620      	mov	r0, r4
 8012e98:	f7ff fee8 	bl	8012c6c <_free_r>
 8012e9c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8012e9e:	b111      	cbz	r1, 8012ea6 <_reclaim_reent+0x5e>
 8012ea0:	4620      	mov	r0, r4
 8012ea2:	f7ff fee3 	bl	8012c6c <_free_r>
 8012ea6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012ea8:	b111      	cbz	r1, 8012eb0 <_reclaim_reent+0x68>
 8012eaa:	4620      	mov	r0, r4
 8012eac:	f7ff fede 	bl	8012c6c <_free_r>
 8012eb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012eb2:	b111      	cbz	r1, 8012eba <_reclaim_reent+0x72>
 8012eb4:	4620      	mov	r0, r4
 8012eb6:	f7ff fed9 	bl	8012c6c <_free_r>
 8012eba:	69a3      	ldr	r3, [r4, #24]
 8012ebc:	b1e3      	cbz	r3, 8012ef8 <_reclaim_reent+0xb0>
 8012ebe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012ec0:	4620      	mov	r0, r4
 8012ec2:	4798      	blx	r3
 8012ec4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012ec6:	b1b9      	cbz	r1, 8012ef8 <_reclaim_reent+0xb0>
 8012ec8:	4620      	mov	r0, r4
 8012eca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012ece:	f7ff bfad 	b.w	8012e2c <cleanup_glue>
 8012ed2:	5949      	ldr	r1, [r1, r5]
 8012ed4:	b941      	cbnz	r1, 8012ee8 <_reclaim_reent+0xa0>
 8012ed6:	3504      	adds	r5, #4
 8012ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012eda:	2d80      	cmp	r5, #128	; 0x80
 8012edc:	68d9      	ldr	r1, [r3, #12]
 8012ede:	d1f8      	bne.n	8012ed2 <_reclaim_reent+0x8a>
 8012ee0:	4620      	mov	r0, r4
 8012ee2:	f7ff fec3 	bl	8012c6c <_free_r>
 8012ee6:	e7ba      	b.n	8012e5e <_reclaim_reent+0x16>
 8012ee8:	680e      	ldr	r6, [r1, #0]
 8012eea:	4620      	mov	r0, r4
 8012eec:	f7ff febe 	bl	8012c6c <_free_r>
 8012ef0:	4631      	mov	r1, r6
 8012ef2:	e7ef      	b.n	8012ed4 <_reclaim_reent+0x8c>
 8012ef4:	2500      	movs	r5, #0
 8012ef6:	e7ef      	b.n	8012ed8 <_reclaim_reent+0x90>
 8012ef8:	bd70      	pop	{r4, r5, r6, pc}
 8012efa:	bf00      	nop
 8012efc:	200002b0 	.word	0x200002b0

08012f00 <_sbrk_r>:
 8012f00:	b538      	push	{r3, r4, r5, lr}
 8012f02:	4d06      	ldr	r5, [pc, #24]	; (8012f1c <_sbrk_r+0x1c>)
 8012f04:	2300      	movs	r3, #0
 8012f06:	4604      	mov	r4, r0
 8012f08:	4608      	mov	r0, r1
 8012f0a:	602b      	str	r3, [r5, #0]
 8012f0c:	f7ef f93c 	bl	8002188 <_sbrk>
 8012f10:	1c43      	adds	r3, r0, #1
 8012f12:	d102      	bne.n	8012f1a <_sbrk_r+0x1a>
 8012f14:	682b      	ldr	r3, [r5, #0]
 8012f16:	b103      	cbz	r3, 8012f1a <_sbrk_r+0x1a>
 8012f18:	6023      	str	r3, [r4, #0]
 8012f1a:	bd38      	pop	{r3, r4, r5, pc}
 8012f1c:	2000c300 	.word	0x2000c300

08012f20 <siprintf>:
 8012f20:	b40e      	push	{r1, r2, r3}
 8012f22:	b500      	push	{lr}
 8012f24:	b09c      	sub	sp, #112	; 0x70
 8012f26:	ab1d      	add	r3, sp, #116	; 0x74
 8012f28:	9002      	str	r0, [sp, #8]
 8012f2a:	9006      	str	r0, [sp, #24]
 8012f2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012f30:	4809      	ldr	r0, [pc, #36]	; (8012f58 <siprintf+0x38>)
 8012f32:	9107      	str	r1, [sp, #28]
 8012f34:	9104      	str	r1, [sp, #16]
 8012f36:	4909      	ldr	r1, [pc, #36]	; (8012f5c <siprintf+0x3c>)
 8012f38:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f3c:	9105      	str	r1, [sp, #20]
 8012f3e:	6800      	ldr	r0, [r0, #0]
 8012f40:	9301      	str	r3, [sp, #4]
 8012f42:	a902      	add	r1, sp, #8
 8012f44:	f000 fa3a 	bl	80133bc <_svfiprintf_r>
 8012f48:	9b02      	ldr	r3, [sp, #8]
 8012f4a:	2200      	movs	r2, #0
 8012f4c:	701a      	strb	r2, [r3, #0]
 8012f4e:	b01c      	add	sp, #112	; 0x70
 8012f50:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f54:	b003      	add	sp, #12
 8012f56:	4770      	bx	lr
 8012f58:	200002b0 	.word	0x200002b0
 8012f5c:	ffff0208 	.word	0xffff0208

08012f60 <__sread>:
 8012f60:	b510      	push	{r4, lr}
 8012f62:	460c      	mov	r4, r1
 8012f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f68:	f000 fe16 	bl	8013b98 <_read_r>
 8012f6c:	2800      	cmp	r0, #0
 8012f6e:	bfab      	itete	ge
 8012f70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012f72:	89a3      	ldrhlt	r3, [r4, #12]
 8012f74:	181b      	addge	r3, r3, r0
 8012f76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012f7a:	bfac      	ite	ge
 8012f7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8012f7e:	81a3      	strhlt	r3, [r4, #12]
 8012f80:	bd10      	pop	{r4, pc}

08012f82 <__swrite>:
 8012f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f86:	461f      	mov	r7, r3
 8012f88:	898b      	ldrh	r3, [r1, #12]
 8012f8a:	05db      	lsls	r3, r3, #23
 8012f8c:	4605      	mov	r5, r0
 8012f8e:	460c      	mov	r4, r1
 8012f90:	4616      	mov	r6, r2
 8012f92:	d505      	bpl.n	8012fa0 <__swrite+0x1e>
 8012f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f98:	2302      	movs	r3, #2
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	f000 f994 	bl	80132c8 <_lseek_r>
 8012fa0:	89a3      	ldrh	r3, [r4, #12]
 8012fa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012fa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012faa:	81a3      	strh	r3, [r4, #12]
 8012fac:	4632      	mov	r2, r6
 8012fae:	463b      	mov	r3, r7
 8012fb0:	4628      	mov	r0, r5
 8012fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012fb6:	f000 b873 	b.w	80130a0 <_write_r>

08012fba <__sseek>:
 8012fba:	b510      	push	{r4, lr}
 8012fbc:	460c      	mov	r4, r1
 8012fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fc2:	f000 f981 	bl	80132c8 <_lseek_r>
 8012fc6:	1c43      	adds	r3, r0, #1
 8012fc8:	89a3      	ldrh	r3, [r4, #12]
 8012fca:	bf15      	itete	ne
 8012fcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8012fce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012fd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012fd6:	81a3      	strheq	r3, [r4, #12]
 8012fd8:	bf18      	it	ne
 8012fda:	81a3      	strhne	r3, [r4, #12]
 8012fdc:	bd10      	pop	{r4, pc}

08012fde <__sclose>:
 8012fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fe2:	f000 b88d 	b.w	8013100 <_close_r>
	...

08012fe8 <strtok>:
 8012fe8:	4b16      	ldr	r3, [pc, #88]	; (8013044 <strtok+0x5c>)
 8012fea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012fec:	681e      	ldr	r6, [r3, #0]
 8012fee:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8012ff0:	4605      	mov	r5, r0
 8012ff2:	b9fc      	cbnz	r4, 8013034 <strtok+0x4c>
 8012ff4:	2050      	movs	r0, #80	; 0x50
 8012ff6:	9101      	str	r1, [sp, #4]
 8012ff8:	f7ff fe12 	bl	8012c20 <malloc>
 8012ffc:	9901      	ldr	r1, [sp, #4]
 8012ffe:	65b0      	str	r0, [r6, #88]	; 0x58
 8013000:	4602      	mov	r2, r0
 8013002:	b920      	cbnz	r0, 801300e <strtok+0x26>
 8013004:	4b10      	ldr	r3, [pc, #64]	; (8013048 <strtok+0x60>)
 8013006:	4811      	ldr	r0, [pc, #68]	; (801304c <strtok+0x64>)
 8013008:	2157      	movs	r1, #87	; 0x57
 801300a:	f000 f85b 	bl	80130c4 <__assert_func>
 801300e:	e9c0 4400 	strd	r4, r4, [r0]
 8013012:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8013016:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801301a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801301e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8013022:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8013026:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801302a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801302e:	6184      	str	r4, [r0, #24]
 8013030:	7704      	strb	r4, [r0, #28]
 8013032:	6244      	str	r4, [r0, #36]	; 0x24
 8013034:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8013036:	2301      	movs	r3, #1
 8013038:	4628      	mov	r0, r5
 801303a:	b002      	add	sp, #8
 801303c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013040:	f000 b806 	b.w	8013050 <__strtok_r>
 8013044:	200002b0 	.word	0x200002b0
 8013048:	08014794 	.word	0x08014794
 801304c:	080147ab 	.word	0x080147ab

08013050 <__strtok_r>:
 8013050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013052:	b908      	cbnz	r0, 8013058 <__strtok_r+0x8>
 8013054:	6810      	ldr	r0, [r2, #0]
 8013056:	b188      	cbz	r0, 801307c <__strtok_r+0x2c>
 8013058:	4604      	mov	r4, r0
 801305a:	4620      	mov	r0, r4
 801305c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8013060:	460f      	mov	r7, r1
 8013062:	f817 6b01 	ldrb.w	r6, [r7], #1
 8013066:	b91e      	cbnz	r6, 8013070 <__strtok_r+0x20>
 8013068:	b965      	cbnz	r5, 8013084 <__strtok_r+0x34>
 801306a:	6015      	str	r5, [r2, #0]
 801306c:	4628      	mov	r0, r5
 801306e:	e005      	b.n	801307c <__strtok_r+0x2c>
 8013070:	42b5      	cmp	r5, r6
 8013072:	d1f6      	bne.n	8013062 <__strtok_r+0x12>
 8013074:	2b00      	cmp	r3, #0
 8013076:	d1f0      	bne.n	801305a <__strtok_r+0xa>
 8013078:	6014      	str	r4, [r2, #0]
 801307a:	7003      	strb	r3, [r0, #0]
 801307c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801307e:	461c      	mov	r4, r3
 8013080:	e00c      	b.n	801309c <__strtok_r+0x4c>
 8013082:	b915      	cbnz	r5, 801308a <__strtok_r+0x3a>
 8013084:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013088:	460e      	mov	r6, r1
 801308a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801308e:	42ab      	cmp	r3, r5
 8013090:	d1f7      	bne.n	8013082 <__strtok_r+0x32>
 8013092:	2b00      	cmp	r3, #0
 8013094:	d0f3      	beq.n	801307e <__strtok_r+0x2e>
 8013096:	2300      	movs	r3, #0
 8013098:	f804 3c01 	strb.w	r3, [r4, #-1]
 801309c:	6014      	str	r4, [r2, #0]
 801309e:	e7ed      	b.n	801307c <__strtok_r+0x2c>

080130a0 <_write_r>:
 80130a0:	b538      	push	{r3, r4, r5, lr}
 80130a2:	4d07      	ldr	r5, [pc, #28]	; (80130c0 <_write_r+0x20>)
 80130a4:	4604      	mov	r4, r0
 80130a6:	4608      	mov	r0, r1
 80130a8:	4611      	mov	r1, r2
 80130aa:	2200      	movs	r2, #0
 80130ac:	602a      	str	r2, [r5, #0]
 80130ae:	461a      	mov	r2, r3
 80130b0:	f7ef f819 	bl	80020e6 <_write>
 80130b4:	1c43      	adds	r3, r0, #1
 80130b6:	d102      	bne.n	80130be <_write_r+0x1e>
 80130b8:	682b      	ldr	r3, [r5, #0]
 80130ba:	b103      	cbz	r3, 80130be <_write_r+0x1e>
 80130bc:	6023      	str	r3, [r4, #0]
 80130be:	bd38      	pop	{r3, r4, r5, pc}
 80130c0:	2000c300 	.word	0x2000c300

080130c4 <__assert_func>:
 80130c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80130c6:	4614      	mov	r4, r2
 80130c8:	461a      	mov	r2, r3
 80130ca:	4b09      	ldr	r3, [pc, #36]	; (80130f0 <__assert_func+0x2c>)
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	4605      	mov	r5, r0
 80130d0:	68d8      	ldr	r0, [r3, #12]
 80130d2:	b14c      	cbz	r4, 80130e8 <__assert_func+0x24>
 80130d4:	4b07      	ldr	r3, [pc, #28]	; (80130f4 <__assert_func+0x30>)
 80130d6:	9100      	str	r1, [sp, #0]
 80130d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80130dc:	4906      	ldr	r1, [pc, #24]	; (80130f8 <__assert_func+0x34>)
 80130de:	462b      	mov	r3, r5
 80130e0:	f000 f8e0 	bl	80132a4 <fiprintf>
 80130e4:	f000 fe2a 	bl	8013d3c <abort>
 80130e8:	4b04      	ldr	r3, [pc, #16]	; (80130fc <__assert_func+0x38>)
 80130ea:	461c      	mov	r4, r3
 80130ec:	e7f3      	b.n	80130d6 <__assert_func+0x12>
 80130ee:	bf00      	nop
 80130f0:	200002b0 	.word	0x200002b0
 80130f4:	08014808 	.word	0x08014808
 80130f8:	08014815 	.word	0x08014815
 80130fc:	08014843 	.word	0x08014843

08013100 <_close_r>:
 8013100:	b538      	push	{r3, r4, r5, lr}
 8013102:	4d06      	ldr	r5, [pc, #24]	; (801311c <_close_r+0x1c>)
 8013104:	2300      	movs	r3, #0
 8013106:	4604      	mov	r4, r0
 8013108:	4608      	mov	r0, r1
 801310a:	602b      	str	r3, [r5, #0]
 801310c:	f7ef f807 	bl	800211e <_close>
 8013110:	1c43      	adds	r3, r0, #1
 8013112:	d102      	bne.n	801311a <_close_r+0x1a>
 8013114:	682b      	ldr	r3, [r5, #0]
 8013116:	b103      	cbz	r3, 801311a <_close_r+0x1a>
 8013118:	6023      	str	r3, [r4, #0]
 801311a:	bd38      	pop	{r3, r4, r5, pc}
 801311c:	2000c300 	.word	0x2000c300

08013120 <__sflush_r>:
 8013120:	898a      	ldrh	r2, [r1, #12]
 8013122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013126:	4605      	mov	r5, r0
 8013128:	0710      	lsls	r0, r2, #28
 801312a:	460c      	mov	r4, r1
 801312c:	d458      	bmi.n	80131e0 <__sflush_r+0xc0>
 801312e:	684b      	ldr	r3, [r1, #4]
 8013130:	2b00      	cmp	r3, #0
 8013132:	dc05      	bgt.n	8013140 <__sflush_r+0x20>
 8013134:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013136:	2b00      	cmp	r3, #0
 8013138:	dc02      	bgt.n	8013140 <__sflush_r+0x20>
 801313a:	2000      	movs	r0, #0
 801313c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013140:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013142:	2e00      	cmp	r6, #0
 8013144:	d0f9      	beq.n	801313a <__sflush_r+0x1a>
 8013146:	2300      	movs	r3, #0
 8013148:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801314c:	682f      	ldr	r7, [r5, #0]
 801314e:	602b      	str	r3, [r5, #0]
 8013150:	d032      	beq.n	80131b8 <__sflush_r+0x98>
 8013152:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013154:	89a3      	ldrh	r3, [r4, #12]
 8013156:	075a      	lsls	r2, r3, #29
 8013158:	d505      	bpl.n	8013166 <__sflush_r+0x46>
 801315a:	6863      	ldr	r3, [r4, #4]
 801315c:	1ac0      	subs	r0, r0, r3
 801315e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013160:	b10b      	cbz	r3, 8013166 <__sflush_r+0x46>
 8013162:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013164:	1ac0      	subs	r0, r0, r3
 8013166:	2300      	movs	r3, #0
 8013168:	4602      	mov	r2, r0
 801316a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801316c:	6a21      	ldr	r1, [r4, #32]
 801316e:	4628      	mov	r0, r5
 8013170:	47b0      	blx	r6
 8013172:	1c43      	adds	r3, r0, #1
 8013174:	89a3      	ldrh	r3, [r4, #12]
 8013176:	d106      	bne.n	8013186 <__sflush_r+0x66>
 8013178:	6829      	ldr	r1, [r5, #0]
 801317a:	291d      	cmp	r1, #29
 801317c:	d82c      	bhi.n	80131d8 <__sflush_r+0xb8>
 801317e:	4a2a      	ldr	r2, [pc, #168]	; (8013228 <__sflush_r+0x108>)
 8013180:	40ca      	lsrs	r2, r1
 8013182:	07d6      	lsls	r6, r2, #31
 8013184:	d528      	bpl.n	80131d8 <__sflush_r+0xb8>
 8013186:	2200      	movs	r2, #0
 8013188:	6062      	str	r2, [r4, #4]
 801318a:	04d9      	lsls	r1, r3, #19
 801318c:	6922      	ldr	r2, [r4, #16]
 801318e:	6022      	str	r2, [r4, #0]
 8013190:	d504      	bpl.n	801319c <__sflush_r+0x7c>
 8013192:	1c42      	adds	r2, r0, #1
 8013194:	d101      	bne.n	801319a <__sflush_r+0x7a>
 8013196:	682b      	ldr	r3, [r5, #0]
 8013198:	b903      	cbnz	r3, 801319c <__sflush_r+0x7c>
 801319a:	6560      	str	r0, [r4, #84]	; 0x54
 801319c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801319e:	602f      	str	r7, [r5, #0]
 80131a0:	2900      	cmp	r1, #0
 80131a2:	d0ca      	beq.n	801313a <__sflush_r+0x1a>
 80131a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80131a8:	4299      	cmp	r1, r3
 80131aa:	d002      	beq.n	80131b2 <__sflush_r+0x92>
 80131ac:	4628      	mov	r0, r5
 80131ae:	f7ff fd5d 	bl	8012c6c <_free_r>
 80131b2:	2000      	movs	r0, #0
 80131b4:	6360      	str	r0, [r4, #52]	; 0x34
 80131b6:	e7c1      	b.n	801313c <__sflush_r+0x1c>
 80131b8:	6a21      	ldr	r1, [r4, #32]
 80131ba:	2301      	movs	r3, #1
 80131bc:	4628      	mov	r0, r5
 80131be:	47b0      	blx	r6
 80131c0:	1c41      	adds	r1, r0, #1
 80131c2:	d1c7      	bne.n	8013154 <__sflush_r+0x34>
 80131c4:	682b      	ldr	r3, [r5, #0]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d0c4      	beq.n	8013154 <__sflush_r+0x34>
 80131ca:	2b1d      	cmp	r3, #29
 80131cc:	d001      	beq.n	80131d2 <__sflush_r+0xb2>
 80131ce:	2b16      	cmp	r3, #22
 80131d0:	d101      	bne.n	80131d6 <__sflush_r+0xb6>
 80131d2:	602f      	str	r7, [r5, #0]
 80131d4:	e7b1      	b.n	801313a <__sflush_r+0x1a>
 80131d6:	89a3      	ldrh	r3, [r4, #12]
 80131d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80131dc:	81a3      	strh	r3, [r4, #12]
 80131de:	e7ad      	b.n	801313c <__sflush_r+0x1c>
 80131e0:	690f      	ldr	r7, [r1, #16]
 80131e2:	2f00      	cmp	r7, #0
 80131e4:	d0a9      	beq.n	801313a <__sflush_r+0x1a>
 80131e6:	0793      	lsls	r3, r2, #30
 80131e8:	680e      	ldr	r6, [r1, #0]
 80131ea:	bf08      	it	eq
 80131ec:	694b      	ldreq	r3, [r1, #20]
 80131ee:	600f      	str	r7, [r1, #0]
 80131f0:	bf18      	it	ne
 80131f2:	2300      	movne	r3, #0
 80131f4:	eba6 0807 	sub.w	r8, r6, r7
 80131f8:	608b      	str	r3, [r1, #8]
 80131fa:	f1b8 0f00 	cmp.w	r8, #0
 80131fe:	dd9c      	ble.n	801313a <__sflush_r+0x1a>
 8013200:	6a21      	ldr	r1, [r4, #32]
 8013202:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013204:	4643      	mov	r3, r8
 8013206:	463a      	mov	r2, r7
 8013208:	4628      	mov	r0, r5
 801320a:	47b0      	blx	r6
 801320c:	2800      	cmp	r0, #0
 801320e:	dc06      	bgt.n	801321e <__sflush_r+0xfe>
 8013210:	89a3      	ldrh	r3, [r4, #12]
 8013212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013216:	81a3      	strh	r3, [r4, #12]
 8013218:	f04f 30ff 	mov.w	r0, #4294967295
 801321c:	e78e      	b.n	801313c <__sflush_r+0x1c>
 801321e:	4407      	add	r7, r0
 8013220:	eba8 0800 	sub.w	r8, r8, r0
 8013224:	e7e9      	b.n	80131fa <__sflush_r+0xda>
 8013226:	bf00      	nop
 8013228:	20400001 	.word	0x20400001

0801322c <_fflush_r>:
 801322c:	b538      	push	{r3, r4, r5, lr}
 801322e:	690b      	ldr	r3, [r1, #16]
 8013230:	4605      	mov	r5, r0
 8013232:	460c      	mov	r4, r1
 8013234:	b913      	cbnz	r3, 801323c <_fflush_r+0x10>
 8013236:	2500      	movs	r5, #0
 8013238:	4628      	mov	r0, r5
 801323a:	bd38      	pop	{r3, r4, r5, pc}
 801323c:	b118      	cbz	r0, 8013246 <_fflush_r+0x1a>
 801323e:	6983      	ldr	r3, [r0, #24]
 8013240:	b90b      	cbnz	r3, 8013246 <_fflush_r+0x1a>
 8013242:	f7ff fc27 	bl	8012a94 <__sinit>
 8013246:	4b14      	ldr	r3, [pc, #80]	; (8013298 <_fflush_r+0x6c>)
 8013248:	429c      	cmp	r4, r3
 801324a:	d11b      	bne.n	8013284 <_fflush_r+0x58>
 801324c:	686c      	ldr	r4, [r5, #4]
 801324e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013252:	2b00      	cmp	r3, #0
 8013254:	d0ef      	beq.n	8013236 <_fflush_r+0xa>
 8013256:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013258:	07d0      	lsls	r0, r2, #31
 801325a:	d404      	bmi.n	8013266 <_fflush_r+0x3a>
 801325c:	0599      	lsls	r1, r3, #22
 801325e:	d402      	bmi.n	8013266 <_fflush_r+0x3a>
 8013260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013262:	f7ff fcda 	bl	8012c1a <__retarget_lock_acquire_recursive>
 8013266:	4628      	mov	r0, r5
 8013268:	4621      	mov	r1, r4
 801326a:	f7ff ff59 	bl	8013120 <__sflush_r>
 801326e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013270:	07da      	lsls	r2, r3, #31
 8013272:	4605      	mov	r5, r0
 8013274:	d4e0      	bmi.n	8013238 <_fflush_r+0xc>
 8013276:	89a3      	ldrh	r3, [r4, #12]
 8013278:	059b      	lsls	r3, r3, #22
 801327a:	d4dd      	bmi.n	8013238 <_fflush_r+0xc>
 801327c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801327e:	f7ff fccd 	bl	8012c1c <__retarget_lock_release_recursive>
 8013282:	e7d9      	b.n	8013238 <_fflush_r+0xc>
 8013284:	4b05      	ldr	r3, [pc, #20]	; (801329c <_fflush_r+0x70>)
 8013286:	429c      	cmp	r4, r3
 8013288:	d101      	bne.n	801328e <_fflush_r+0x62>
 801328a:	68ac      	ldr	r4, [r5, #8]
 801328c:	e7df      	b.n	801324e <_fflush_r+0x22>
 801328e:	4b04      	ldr	r3, [pc, #16]	; (80132a0 <_fflush_r+0x74>)
 8013290:	429c      	cmp	r4, r3
 8013292:	bf08      	it	eq
 8013294:	68ec      	ldreq	r4, [r5, #12]
 8013296:	e7da      	b.n	801324e <_fflush_r+0x22>
 8013298:	08014750 	.word	0x08014750
 801329c:	08014770 	.word	0x08014770
 80132a0:	08014730 	.word	0x08014730

080132a4 <fiprintf>:
 80132a4:	b40e      	push	{r1, r2, r3}
 80132a6:	b503      	push	{r0, r1, lr}
 80132a8:	4601      	mov	r1, r0
 80132aa:	ab03      	add	r3, sp, #12
 80132ac:	4805      	ldr	r0, [pc, #20]	; (80132c4 <fiprintf+0x20>)
 80132ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80132b2:	6800      	ldr	r0, [r0, #0]
 80132b4:	9301      	str	r3, [sp, #4]
 80132b6:	f000 f9ab 	bl	8013610 <_vfiprintf_r>
 80132ba:	b002      	add	sp, #8
 80132bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80132c0:	b003      	add	sp, #12
 80132c2:	4770      	bx	lr
 80132c4:	200002b0 	.word	0x200002b0

080132c8 <_lseek_r>:
 80132c8:	b538      	push	{r3, r4, r5, lr}
 80132ca:	4d07      	ldr	r5, [pc, #28]	; (80132e8 <_lseek_r+0x20>)
 80132cc:	4604      	mov	r4, r0
 80132ce:	4608      	mov	r0, r1
 80132d0:	4611      	mov	r1, r2
 80132d2:	2200      	movs	r2, #0
 80132d4:	602a      	str	r2, [r5, #0]
 80132d6:	461a      	mov	r2, r3
 80132d8:	f7ee ff48 	bl	800216c <_lseek>
 80132dc:	1c43      	adds	r3, r0, #1
 80132de:	d102      	bne.n	80132e6 <_lseek_r+0x1e>
 80132e0:	682b      	ldr	r3, [r5, #0]
 80132e2:	b103      	cbz	r3, 80132e6 <_lseek_r+0x1e>
 80132e4:	6023      	str	r3, [r4, #0]
 80132e6:	bd38      	pop	{r3, r4, r5, pc}
 80132e8:	2000c300 	.word	0x2000c300

080132ec <__malloc_lock>:
 80132ec:	4801      	ldr	r0, [pc, #4]	; (80132f4 <__malloc_lock+0x8>)
 80132ee:	f7ff bc94 	b.w	8012c1a <__retarget_lock_acquire_recursive>
 80132f2:	bf00      	nop
 80132f4:	2000c2f4 	.word	0x2000c2f4

080132f8 <__malloc_unlock>:
 80132f8:	4801      	ldr	r0, [pc, #4]	; (8013300 <__malloc_unlock+0x8>)
 80132fa:	f7ff bc8f 	b.w	8012c1c <__retarget_lock_release_recursive>
 80132fe:	bf00      	nop
 8013300:	2000c2f4 	.word	0x2000c2f4

08013304 <__ssputs_r>:
 8013304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013308:	688e      	ldr	r6, [r1, #8]
 801330a:	429e      	cmp	r6, r3
 801330c:	4682      	mov	sl, r0
 801330e:	460c      	mov	r4, r1
 8013310:	4690      	mov	r8, r2
 8013312:	461f      	mov	r7, r3
 8013314:	d838      	bhi.n	8013388 <__ssputs_r+0x84>
 8013316:	898a      	ldrh	r2, [r1, #12]
 8013318:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801331c:	d032      	beq.n	8013384 <__ssputs_r+0x80>
 801331e:	6825      	ldr	r5, [r4, #0]
 8013320:	6909      	ldr	r1, [r1, #16]
 8013322:	eba5 0901 	sub.w	r9, r5, r1
 8013326:	6965      	ldr	r5, [r4, #20]
 8013328:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801332c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013330:	3301      	adds	r3, #1
 8013332:	444b      	add	r3, r9
 8013334:	106d      	asrs	r5, r5, #1
 8013336:	429d      	cmp	r5, r3
 8013338:	bf38      	it	cc
 801333a:	461d      	movcc	r5, r3
 801333c:	0553      	lsls	r3, r2, #21
 801333e:	d531      	bpl.n	80133a4 <__ssputs_r+0xa0>
 8013340:	4629      	mov	r1, r5
 8013342:	f7ff fcff 	bl	8012d44 <_malloc_r>
 8013346:	4606      	mov	r6, r0
 8013348:	b950      	cbnz	r0, 8013360 <__ssputs_r+0x5c>
 801334a:	230c      	movs	r3, #12
 801334c:	f8ca 3000 	str.w	r3, [sl]
 8013350:	89a3      	ldrh	r3, [r4, #12]
 8013352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013356:	81a3      	strh	r3, [r4, #12]
 8013358:	f04f 30ff 	mov.w	r0, #4294967295
 801335c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013360:	6921      	ldr	r1, [r4, #16]
 8013362:	464a      	mov	r2, r9
 8013364:	f7ff fc6c 	bl	8012c40 <memcpy>
 8013368:	89a3      	ldrh	r3, [r4, #12]
 801336a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801336e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013372:	81a3      	strh	r3, [r4, #12]
 8013374:	6126      	str	r6, [r4, #16]
 8013376:	6165      	str	r5, [r4, #20]
 8013378:	444e      	add	r6, r9
 801337a:	eba5 0509 	sub.w	r5, r5, r9
 801337e:	6026      	str	r6, [r4, #0]
 8013380:	60a5      	str	r5, [r4, #8]
 8013382:	463e      	mov	r6, r7
 8013384:	42be      	cmp	r6, r7
 8013386:	d900      	bls.n	801338a <__ssputs_r+0x86>
 8013388:	463e      	mov	r6, r7
 801338a:	6820      	ldr	r0, [r4, #0]
 801338c:	4632      	mov	r2, r6
 801338e:	4641      	mov	r1, r8
 8013390:	f000 fd40 	bl	8013e14 <memmove>
 8013394:	68a3      	ldr	r3, [r4, #8]
 8013396:	1b9b      	subs	r3, r3, r6
 8013398:	60a3      	str	r3, [r4, #8]
 801339a:	6823      	ldr	r3, [r4, #0]
 801339c:	4433      	add	r3, r6
 801339e:	6023      	str	r3, [r4, #0]
 80133a0:	2000      	movs	r0, #0
 80133a2:	e7db      	b.n	801335c <__ssputs_r+0x58>
 80133a4:	462a      	mov	r2, r5
 80133a6:	f000 fd4f 	bl	8013e48 <_realloc_r>
 80133aa:	4606      	mov	r6, r0
 80133ac:	2800      	cmp	r0, #0
 80133ae:	d1e1      	bne.n	8013374 <__ssputs_r+0x70>
 80133b0:	6921      	ldr	r1, [r4, #16]
 80133b2:	4650      	mov	r0, sl
 80133b4:	f7ff fc5a 	bl	8012c6c <_free_r>
 80133b8:	e7c7      	b.n	801334a <__ssputs_r+0x46>
	...

080133bc <_svfiprintf_r>:
 80133bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133c0:	4698      	mov	r8, r3
 80133c2:	898b      	ldrh	r3, [r1, #12]
 80133c4:	061b      	lsls	r3, r3, #24
 80133c6:	b09d      	sub	sp, #116	; 0x74
 80133c8:	4607      	mov	r7, r0
 80133ca:	460d      	mov	r5, r1
 80133cc:	4614      	mov	r4, r2
 80133ce:	d50e      	bpl.n	80133ee <_svfiprintf_r+0x32>
 80133d0:	690b      	ldr	r3, [r1, #16]
 80133d2:	b963      	cbnz	r3, 80133ee <_svfiprintf_r+0x32>
 80133d4:	2140      	movs	r1, #64	; 0x40
 80133d6:	f7ff fcb5 	bl	8012d44 <_malloc_r>
 80133da:	6028      	str	r0, [r5, #0]
 80133dc:	6128      	str	r0, [r5, #16]
 80133de:	b920      	cbnz	r0, 80133ea <_svfiprintf_r+0x2e>
 80133e0:	230c      	movs	r3, #12
 80133e2:	603b      	str	r3, [r7, #0]
 80133e4:	f04f 30ff 	mov.w	r0, #4294967295
 80133e8:	e0d1      	b.n	801358e <_svfiprintf_r+0x1d2>
 80133ea:	2340      	movs	r3, #64	; 0x40
 80133ec:	616b      	str	r3, [r5, #20]
 80133ee:	2300      	movs	r3, #0
 80133f0:	9309      	str	r3, [sp, #36]	; 0x24
 80133f2:	2320      	movs	r3, #32
 80133f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80133f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80133fc:	2330      	movs	r3, #48	; 0x30
 80133fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80135a8 <_svfiprintf_r+0x1ec>
 8013402:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013406:	f04f 0901 	mov.w	r9, #1
 801340a:	4623      	mov	r3, r4
 801340c:	469a      	mov	sl, r3
 801340e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013412:	b10a      	cbz	r2, 8013418 <_svfiprintf_r+0x5c>
 8013414:	2a25      	cmp	r2, #37	; 0x25
 8013416:	d1f9      	bne.n	801340c <_svfiprintf_r+0x50>
 8013418:	ebba 0b04 	subs.w	fp, sl, r4
 801341c:	d00b      	beq.n	8013436 <_svfiprintf_r+0x7a>
 801341e:	465b      	mov	r3, fp
 8013420:	4622      	mov	r2, r4
 8013422:	4629      	mov	r1, r5
 8013424:	4638      	mov	r0, r7
 8013426:	f7ff ff6d 	bl	8013304 <__ssputs_r>
 801342a:	3001      	adds	r0, #1
 801342c:	f000 80aa 	beq.w	8013584 <_svfiprintf_r+0x1c8>
 8013430:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013432:	445a      	add	r2, fp
 8013434:	9209      	str	r2, [sp, #36]	; 0x24
 8013436:	f89a 3000 	ldrb.w	r3, [sl]
 801343a:	2b00      	cmp	r3, #0
 801343c:	f000 80a2 	beq.w	8013584 <_svfiprintf_r+0x1c8>
 8013440:	2300      	movs	r3, #0
 8013442:	f04f 32ff 	mov.w	r2, #4294967295
 8013446:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801344a:	f10a 0a01 	add.w	sl, sl, #1
 801344e:	9304      	str	r3, [sp, #16]
 8013450:	9307      	str	r3, [sp, #28]
 8013452:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013456:	931a      	str	r3, [sp, #104]	; 0x68
 8013458:	4654      	mov	r4, sl
 801345a:	2205      	movs	r2, #5
 801345c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013460:	4851      	ldr	r0, [pc, #324]	; (80135a8 <_svfiprintf_r+0x1ec>)
 8013462:	f7ec fecd 	bl	8000200 <memchr>
 8013466:	9a04      	ldr	r2, [sp, #16]
 8013468:	b9d8      	cbnz	r0, 80134a2 <_svfiprintf_r+0xe6>
 801346a:	06d0      	lsls	r0, r2, #27
 801346c:	bf44      	itt	mi
 801346e:	2320      	movmi	r3, #32
 8013470:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013474:	0711      	lsls	r1, r2, #28
 8013476:	bf44      	itt	mi
 8013478:	232b      	movmi	r3, #43	; 0x2b
 801347a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801347e:	f89a 3000 	ldrb.w	r3, [sl]
 8013482:	2b2a      	cmp	r3, #42	; 0x2a
 8013484:	d015      	beq.n	80134b2 <_svfiprintf_r+0xf6>
 8013486:	9a07      	ldr	r2, [sp, #28]
 8013488:	4654      	mov	r4, sl
 801348a:	2000      	movs	r0, #0
 801348c:	f04f 0c0a 	mov.w	ip, #10
 8013490:	4621      	mov	r1, r4
 8013492:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013496:	3b30      	subs	r3, #48	; 0x30
 8013498:	2b09      	cmp	r3, #9
 801349a:	d94e      	bls.n	801353a <_svfiprintf_r+0x17e>
 801349c:	b1b0      	cbz	r0, 80134cc <_svfiprintf_r+0x110>
 801349e:	9207      	str	r2, [sp, #28]
 80134a0:	e014      	b.n	80134cc <_svfiprintf_r+0x110>
 80134a2:	eba0 0308 	sub.w	r3, r0, r8
 80134a6:	fa09 f303 	lsl.w	r3, r9, r3
 80134aa:	4313      	orrs	r3, r2
 80134ac:	9304      	str	r3, [sp, #16]
 80134ae:	46a2      	mov	sl, r4
 80134b0:	e7d2      	b.n	8013458 <_svfiprintf_r+0x9c>
 80134b2:	9b03      	ldr	r3, [sp, #12]
 80134b4:	1d19      	adds	r1, r3, #4
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	9103      	str	r1, [sp, #12]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	bfbb      	ittet	lt
 80134be:	425b      	neglt	r3, r3
 80134c0:	f042 0202 	orrlt.w	r2, r2, #2
 80134c4:	9307      	strge	r3, [sp, #28]
 80134c6:	9307      	strlt	r3, [sp, #28]
 80134c8:	bfb8      	it	lt
 80134ca:	9204      	strlt	r2, [sp, #16]
 80134cc:	7823      	ldrb	r3, [r4, #0]
 80134ce:	2b2e      	cmp	r3, #46	; 0x2e
 80134d0:	d10c      	bne.n	80134ec <_svfiprintf_r+0x130>
 80134d2:	7863      	ldrb	r3, [r4, #1]
 80134d4:	2b2a      	cmp	r3, #42	; 0x2a
 80134d6:	d135      	bne.n	8013544 <_svfiprintf_r+0x188>
 80134d8:	9b03      	ldr	r3, [sp, #12]
 80134da:	1d1a      	adds	r2, r3, #4
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	9203      	str	r2, [sp, #12]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	bfb8      	it	lt
 80134e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80134e8:	3402      	adds	r4, #2
 80134ea:	9305      	str	r3, [sp, #20]
 80134ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80135b8 <_svfiprintf_r+0x1fc>
 80134f0:	7821      	ldrb	r1, [r4, #0]
 80134f2:	2203      	movs	r2, #3
 80134f4:	4650      	mov	r0, sl
 80134f6:	f7ec fe83 	bl	8000200 <memchr>
 80134fa:	b140      	cbz	r0, 801350e <_svfiprintf_r+0x152>
 80134fc:	2340      	movs	r3, #64	; 0x40
 80134fe:	eba0 000a 	sub.w	r0, r0, sl
 8013502:	fa03 f000 	lsl.w	r0, r3, r0
 8013506:	9b04      	ldr	r3, [sp, #16]
 8013508:	4303      	orrs	r3, r0
 801350a:	3401      	adds	r4, #1
 801350c:	9304      	str	r3, [sp, #16]
 801350e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013512:	4826      	ldr	r0, [pc, #152]	; (80135ac <_svfiprintf_r+0x1f0>)
 8013514:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013518:	2206      	movs	r2, #6
 801351a:	f7ec fe71 	bl	8000200 <memchr>
 801351e:	2800      	cmp	r0, #0
 8013520:	d038      	beq.n	8013594 <_svfiprintf_r+0x1d8>
 8013522:	4b23      	ldr	r3, [pc, #140]	; (80135b0 <_svfiprintf_r+0x1f4>)
 8013524:	bb1b      	cbnz	r3, 801356e <_svfiprintf_r+0x1b2>
 8013526:	9b03      	ldr	r3, [sp, #12]
 8013528:	3307      	adds	r3, #7
 801352a:	f023 0307 	bic.w	r3, r3, #7
 801352e:	3308      	adds	r3, #8
 8013530:	9303      	str	r3, [sp, #12]
 8013532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013534:	4433      	add	r3, r6
 8013536:	9309      	str	r3, [sp, #36]	; 0x24
 8013538:	e767      	b.n	801340a <_svfiprintf_r+0x4e>
 801353a:	fb0c 3202 	mla	r2, ip, r2, r3
 801353e:	460c      	mov	r4, r1
 8013540:	2001      	movs	r0, #1
 8013542:	e7a5      	b.n	8013490 <_svfiprintf_r+0xd4>
 8013544:	2300      	movs	r3, #0
 8013546:	3401      	adds	r4, #1
 8013548:	9305      	str	r3, [sp, #20]
 801354a:	4619      	mov	r1, r3
 801354c:	f04f 0c0a 	mov.w	ip, #10
 8013550:	4620      	mov	r0, r4
 8013552:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013556:	3a30      	subs	r2, #48	; 0x30
 8013558:	2a09      	cmp	r2, #9
 801355a:	d903      	bls.n	8013564 <_svfiprintf_r+0x1a8>
 801355c:	2b00      	cmp	r3, #0
 801355e:	d0c5      	beq.n	80134ec <_svfiprintf_r+0x130>
 8013560:	9105      	str	r1, [sp, #20]
 8013562:	e7c3      	b.n	80134ec <_svfiprintf_r+0x130>
 8013564:	fb0c 2101 	mla	r1, ip, r1, r2
 8013568:	4604      	mov	r4, r0
 801356a:	2301      	movs	r3, #1
 801356c:	e7f0      	b.n	8013550 <_svfiprintf_r+0x194>
 801356e:	ab03      	add	r3, sp, #12
 8013570:	9300      	str	r3, [sp, #0]
 8013572:	462a      	mov	r2, r5
 8013574:	4b0f      	ldr	r3, [pc, #60]	; (80135b4 <_svfiprintf_r+0x1f8>)
 8013576:	a904      	add	r1, sp, #16
 8013578:	4638      	mov	r0, r7
 801357a:	f3af 8000 	nop.w
 801357e:	1c42      	adds	r2, r0, #1
 8013580:	4606      	mov	r6, r0
 8013582:	d1d6      	bne.n	8013532 <_svfiprintf_r+0x176>
 8013584:	89ab      	ldrh	r3, [r5, #12]
 8013586:	065b      	lsls	r3, r3, #25
 8013588:	f53f af2c 	bmi.w	80133e4 <_svfiprintf_r+0x28>
 801358c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801358e:	b01d      	add	sp, #116	; 0x74
 8013590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013594:	ab03      	add	r3, sp, #12
 8013596:	9300      	str	r3, [sp, #0]
 8013598:	462a      	mov	r2, r5
 801359a:	4b06      	ldr	r3, [pc, #24]	; (80135b4 <_svfiprintf_r+0x1f8>)
 801359c:	a904      	add	r1, sp, #16
 801359e:	4638      	mov	r0, r7
 80135a0:	f000 f9d4 	bl	801394c <_printf_i>
 80135a4:	e7eb      	b.n	801357e <_svfiprintf_r+0x1c2>
 80135a6:	bf00      	nop
 80135a8:	08014844 	.word	0x08014844
 80135ac:	0801484e 	.word	0x0801484e
 80135b0:	00000000 	.word	0x00000000
 80135b4:	08013305 	.word	0x08013305
 80135b8:	0801484a 	.word	0x0801484a

080135bc <__sfputc_r>:
 80135bc:	6893      	ldr	r3, [r2, #8]
 80135be:	3b01      	subs	r3, #1
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	b410      	push	{r4}
 80135c4:	6093      	str	r3, [r2, #8]
 80135c6:	da08      	bge.n	80135da <__sfputc_r+0x1e>
 80135c8:	6994      	ldr	r4, [r2, #24]
 80135ca:	42a3      	cmp	r3, r4
 80135cc:	db01      	blt.n	80135d2 <__sfputc_r+0x16>
 80135ce:	290a      	cmp	r1, #10
 80135d0:	d103      	bne.n	80135da <__sfputc_r+0x1e>
 80135d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135d6:	f000 baf1 	b.w	8013bbc <__swbuf_r>
 80135da:	6813      	ldr	r3, [r2, #0]
 80135dc:	1c58      	adds	r0, r3, #1
 80135de:	6010      	str	r0, [r2, #0]
 80135e0:	7019      	strb	r1, [r3, #0]
 80135e2:	4608      	mov	r0, r1
 80135e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135e8:	4770      	bx	lr

080135ea <__sfputs_r>:
 80135ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135ec:	4606      	mov	r6, r0
 80135ee:	460f      	mov	r7, r1
 80135f0:	4614      	mov	r4, r2
 80135f2:	18d5      	adds	r5, r2, r3
 80135f4:	42ac      	cmp	r4, r5
 80135f6:	d101      	bne.n	80135fc <__sfputs_r+0x12>
 80135f8:	2000      	movs	r0, #0
 80135fa:	e007      	b.n	801360c <__sfputs_r+0x22>
 80135fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013600:	463a      	mov	r2, r7
 8013602:	4630      	mov	r0, r6
 8013604:	f7ff ffda 	bl	80135bc <__sfputc_r>
 8013608:	1c43      	adds	r3, r0, #1
 801360a:	d1f3      	bne.n	80135f4 <__sfputs_r+0xa>
 801360c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013610 <_vfiprintf_r>:
 8013610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013614:	460d      	mov	r5, r1
 8013616:	b09d      	sub	sp, #116	; 0x74
 8013618:	4614      	mov	r4, r2
 801361a:	4698      	mov	r8, r3
 801361c:	4606      	mov	r6, r0
 801361e:	b118      	cbz	r0, 8013628 <_vfiprintf_r+0x18>
 8013620:	6983      	ldr	r3, [r0, #24]
 8013622:	b90b      	cbnz	r3, 8013628 <_vfiprintf_r+0x18>
 8013624:	f7ff fa36 	bl	8012a94 <__sinit>
 8013628:	4b89      	ldr	r3, [pc, #548]	; (8013850 <_vfiprintf_r+0x240>)
 801362a:	429d      	cmp	r5, r3
 801362c:	d11b      	bne.n	8013666 <_vfiprintf_r+0x56>
 801362e:	6875      	ldr	r5, [r6, #4]
 8013630:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013632:	07d9      	lsls	r1, r3, #31
 8013634:	d405      	bmi.n	8013642 <_vfiprintf_r+0x32>
 8013636:	89ab      	ldrh	r3, [r5, #12]
 8013638:	059a      	lsls	r2, r3, #22
 801363a:	d402      	bmi.n	8013642 <_vfiprintf_r+0x32>
 801363c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801363e:	f7ff faec 	bl	8012c1a <__retarget_lock_acquire_recursive>
 8013642:	89ab      	ldrh	r3, [r5, #12]
 8013644:	071b      	lsls	r3, r3, #28
 8013646:	d501      	bpl.n	801364c <_vfiprintf_r+0x3c>
 8013648:	692b      	ldr	r3, [r5, #16]
 801364a:	b9eb      	cbnz	r3, 8013688 <_vfiprintf_r+0x78>
 801364c:	4629      	mov	r1, r5
 801364e:	4630      	mov	r0, r6
 8013650:	f000 fb06 	bl	8013c60 <__swsetup_r>
 8013654:	b1c0      	cbz	r0, 8013688 <_vfiprintf_r+0x78>
 8013656:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013658:	07dc      	lsls	r4, r3, #31
 801365a:	d50e      	bpl.n	801367a <_vfiprintf_r+0x6a>
 801365c:	f04f 30ff 	mov.w	r0, #4294967295
 8013660:	b01d      	add	sp, #116	; 0x74
 8013662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013666:	4b7b      	ldr	r3, [pc, #492]	; (8013854 <_vfiprintf_r+0x244>)
 8013668:	429d      	cmp	r5, r3
 801366a:	d101      	bne.n	8013670 <_vfiprintf_r+0x60>
 801366c:	68b5      	ldr	r5, [r6, #8]
 801366e:	e7df      	b.n	8013630 <_vfiprintf_r+0x20>
 8013670:	4b79      	ldr	r3, [pc, #484]	; (8013858 <_vfiprintf_r+0x248>)
 8013672:	429d      	cmp	r5, r3
 8013674:	bf08      	it	eq
 8013676:	68f5      	ldreq	r5, [r6, #12]
 8013678:	e7da      	b.n	8013630 <_vfiprintf_r+0x20>
 801367a:	89ab      	ldrh	r3, [r5, #12]
 801367c:	0598      	lsls	r0, r3, #22
 801367e:	d4ed      	bmi.n	801365c <_vfiprintf_r+0x4c>
 8013680:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013682:	f7ff facb 	bl	8012c1c <__retarget_lock_release_recursive>
 8013686:	e7e9      	b.n	801365c <_vfiprintf_r+0x4c>
 8013688:	2300      	movs	r3, #0
 801368a:	9309      	str	r3, [sp, #36]	; 0x24
 801368c:	2320      	movs	r3, #32
 801368e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013692:	f8cd 800c 	str.w	r8, [sp, #12]
 8013696:	2330      	movs	r3, #48	; 0x30
 8013698:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801385c <_vfiprintf_r+0x24c>
 801369c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80136a0:	f04f 0901 	mov.w	r9, #1
 80136a4:	4623      	mov	r3, r4
 80136a6:	469a      	mov	sl, r3
 80136a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80136ac:	b10a      	cbz	r2, 80136b2 <_vfiprintf_r+0xa2>
 80136ae:	2a25      	cmp	r2, #37	; 0x25
 80136b0:	d1f9      	bne.n	80136a6 <_vfiprintf_r+0x96>
 80136b2:	ebba 0b04 	subs.w	fp, sl, r4
 80136b6:	d00b      	beq.n	80136d0 <_vfiprintf_r+0xc0>
 80136b8:	465b      	mov	r3, fp
 80136ba:	4622      	mov	r2, r4
 80136bc:	4629      	mov	r1, r5
 80136be:	4630      	mov	r0, r6
 80136c0:	f7ff ff93 	bl	80135ea <__sfputs_r>
 80136c4:	3001      	adds	r0, #1
 80136c6:	f000 80aa 	beq.w	801381e <_vfiprintf_r+0x20e>
 80136ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80136cc:	445a      	add	r2, fp
 80136ce:	9209      	str	r2, [sp, #36]	; 0x24
 80136d0:	f89a 3000 	ldrb.w	r3, [sl]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	f000 80a2 	beq.w	801381e <_vfiprintf_r+0x20e>
 80136da:	2300      	movs	r3, #0
 80136dc:	f04f 32ff 	mov.w	r2, #4294967295
 80136e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80136e4:	f10a 0a01 	add.w	sl, sl, #1
 80136e8:	9304      	str	r3, [sp, #16]
 80136ea:	9307      	str	r3, [sp, #28]
 80136ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80136f0:	931a      	str	r3, [sp, #104]	; 0x68
 80136f2:	4654      	mov	r4, sl
 80136f4:	2205      	movs	r2, #5
 80136f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80136fa:	4858      	ldr	r0, [pc, #352]	; (801385c <_vfiprintf_r+0x24c>)
 80136fc:	f7ec fd80 	bl	8000200 <memchr>
 8013700:	9a04      	ldr	r2, [sp, #16]
 8013702:	b9d8      	cbnz	r0, 801373c <_vfiprintf_r+0x12c>
 8013704:	06d1      	lsls	r1, r2, #27
 8013706:	bf44      	itt	mi
 8013708:	2320      	movmi	r3, #32
 801370a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801370e:	0713      	lsls	r3, r2, #28
 8013710:	bf44      	itt	mi
 8013712:	232b      	movmi	r3, #43	; 0x2b
 8013714:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013718:	f89a 3000 	ldrb.w	r3, [sl]
 801371c:	2b2a      	cmp	r3, #42	; 0x2a
 801371e:	d015      	beq.n	801374c <_vfiprintf_r+0x13c>
 8013720:	9a07      	ldr	r2, [sp, #28]
 8013722:	4654      	mov	r4, sl
 8013724:	2000      	movs	r0, #0
 8013726:	f04f 0c0a 	mov.w	ip, #10
 801372a:	4621      	mov	r1, r4
 801372c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013730:	3b30      	subs	r3, #48	; 0x30
 8013732:	2b09      	cmp	r3, #9
 8013734:	d94e      	bls.n	80137d4 <_vfiprintf_r+0x1c4>
 8013736:	b1b0      	cbz	r0, 8013766 <_vfiprintf_r+0x156>
 8013738:	9207      	str	r2, [sp, #28]
 801373a:	e014      	b.n	8013766 <_vfiprintf_r+0x156>
 801373c:	eba0 0308 	sub.w	r3, r0, r8
 8013740:	fa09 f303 	lsl.w	r3, r9, r3
 8013744:	4313      	orrs	r3, r2
 8013746:	9304      	str	r3, [sp, #16]
 8013748:	46a2      	mov	sl, r4
 801374a:	e7d2      	b.n	80136f2 <_vfiprintf_r+0xe2>
 801374c:	9b03      	ldr	r3, [sp, #12]
 801374e:	1d19      	adds	r1, r3, #4
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	9103      	str	r1, [sp, #12]
 8013754:	2b00      	cmp	r3, #0
 8013756:	bfbb      	ittet	lt
 8013758:	425b      	neglt	r3, r3
 801375a:	f042 0202 	orrlt.w	r2, r2, #2
 801375e:	9307      	strge	r3, [sp, #28]
 8013760:	9307      	strlt	r3, [sp, #28]
 8013762:	bfb8      	it	lt
 8013764:	9204      	strlt	r2, [sp, #16]
 8013766:	7823      	ldrb	r3, [r4, #0]
 8013768:	2b2e      	cmp	r3, #46	; 0x2e
 801376a:	d10c      	bne.n	8013786 <_vfiprintf_r+0x176>
 801376c:	7863      	ldrb	r3, [r4, #1]
 801376e:	2b2a      	cmp	r3, #42	; 0x2a
 8013770:	d135      	bne.n	80137de <_vfiprintf_r+0x1ce>
 8013772:	9b03      	ldr	r3, [sp, #12]
 8013774:	1d1a      	adds	r2, r3, #4
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	9203      	str	r2, [sp, #12]
 801377a:	2b00      	cmp	r3, #0
 801377c:	bfb8      	it	lt
 801377e:	f04f 33ff 	movlt.w	r3, #4294967295
 8013782:	3402      	adds	r4, #2
 8013784:	9305      	str	r3, [sp, #20]
 8013786:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801386c <_vfiprintf_r+0x25c>
 801378a:	7821      	ldrb	r1, [r4, #0]
 801378c:	2203      	movs	r2, #3
 801378e:	4650      	mov	r0, sl
 8013790:	f7ec fd36 	bl	8000200 <memchr>
 8013794:	b140      	cbz	r0, 80137a8 <_vfiprintf_r+0x198>
 8013796:	2340      	movs	r3, #64	; 0x40
 8013798:	eba0 000a 	sub.w	r0, r0, sl
 801379c:	fa03 f000 	lsl.w	r0, r3, r0
 80137a0:	9b04      	ldr	r3, [sp, #16]
 80137a2:	4303      	orrs	r3, r0
 80137a4:	3401      	adds	r4, #1
 80137a6:	9304      	str	r3, [sp, #16]
 80137a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137ac:	482c      	ldr	r0, [pc, #176]	; (8013860 <_vfiprintf_r+0x250>)
 80137ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80137b2:	2206      	movs	r2, #6
 80137b4:	f7ec fd24 	bl	8000200 <memchr>
 80137b8:	2800      	cmp	r0, #0
 80137ba:	d03f      	beq.n	801383c <_vfiprintf_r+0x22c>
 80137bc:	4b29      	ldr	r3, [pc, #164]	; (8013864 <_vfiprintf_r+0x254>)
 80137be:	bb1b      	cbnz	r3, 8013808 <_vfiprintf_r+0x1f8>
 80137c0:	9b03      	ldr	r3, [sp, #12]
 80137c2:	3307      	adds	r3, #7
 80137c4:	f023 0307 	bic.w	r3, r3, #7
 80137c8:	3308      	adds	r3, #8
 80137ca:	9303      	str	r3, [sp, #12]
 80137cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137ce:	443b      	add	r3, r7
 80137d0:	9309      	str	r3, [sp, #36]	; 0x24
 80137d2:	e767      	b.n	80136a4 <_vfiprintf_r+0x94>
 80137d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80137d8:	460c      	mov	r4, r1
 80137da:	2001      	movs	r0, #1
 80137dc:	e7a5      	b.n	801372a <_vfiprintf_r+0x11a>
 80137de:	2300      	movs	r3, #0
 80137e0:	3401      	adds	r4, #1
 80137e2:	9305      	str	r3, [sp, #20]
 80137e4:	4619      	mov	r1, r3
 80137e6:	f04f 0c0a 	mov.w	ip, #10
 80137ea:	4620      	mov	r0, r4
 80137ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80137f0:	3a30      	subs	r2, #48	; 0x30
 80137f2:	2a09      	cmp	r2, #9
 80137f4:	d903      	bls.n	80137fe <_vfiprintf_r+0x1ee>
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d0c5      	beq.n	8013786 <_vfiprintf_r+0x176>
 80137fa:	9105      	str	r1, [sp, #20]
 80137fc:	e7c3      	b.n	8013786 <_vfiprintf_r+0x176>
 80137fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8013802:	4604      	mov	r4, r0
 8013804:	2301      	movs	r3, #1
 8013806:	e7f0      	b.n	80137ea <_vfiprintf_r+0x1da>
 8013808:	ab03      	add	r3, sp, #12
 801380a:	9300      	str	r3, [sp, #0]
 801380c:	462a      	mov	r2, r5
 801380e:	4b16      	ldr	r3, [pc, #88]	; (8013868 <_vfiprintf_r+0x258>)
 8013810:	a904      	add	r1, sp, #16
 8013812:	4630      	mov	r0, r6
 8013814:	f3af 8000 	nop.w
 8013818:	4607      	mov	r7, r0
 801381a:	1c78      	adds	r0, r7, #1
 801381c:	d1d6      	bne.n	80137cc <_vfiprintf_r+0x1bc>
 801381e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013820:	07d9      	lsls	r1, r3, #31
 8013822:	d405      	bmi.n	8013830 <_vfiprintf_r+0x220>
 8013824:	89ab      	ldrh	r3, [r5, #12]
 8013826:	059a      	lsls	r2, r3, #22
 8013828:	d402      	bmi.n	8013830 <_vfiprintf_r+0x220>
 801382a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801382c:	f7ff f9f6 	bl	8012c1c <__retarget_lock_release_recursive>
 8013830:	89ab      	ldrh	r3, [r5, #12]
 8013832:	065b      	lsls	r3, r3, #25
 8013834:	f53f af12 	bmi.w	801365c <_vfiprintf_r+0x4c>
 8013838:	9809      	ldr	r0, [sp, #36]	; 0x24
 801383a:	e711      	b.n	8013660 <_vfiprintf_r+0x50>
 801383c:	ab03      	add	r3, sp, #12
 801383e:	9300      	str	r3, [sp, #0]
 8013840:	462a      	mov	r2, r5
 8013842:	4b09      	ldr	r3, [pc, #36]	; (8013868 <_vfiprintf_r+0x258>)
 8013844:	a904      	add	r1, sp, #16
 8013846:	4630      	mov	r0, r6
 8013848:	f000 f880 	bl	801394c <_printf_i>
 801384c:	e7e4      	b.n	8013818 <_vfiprintf_r+0x208>
 801384e:	bf00      	nop
 8013850:	08014750 	.word	0x08014750
 8013854:	08014770 	.word	0x08014770
 8013858:	08014730 	.word	0x08014730
 801385c:	08014844 	.word	0x08014844
 8013860:	0801484e 	.word	0x0801484e
 8013864:	00000000 	.word	0x00000000
 8013868:	080135eb 	.word	0x080135eb
 801386c:	0801484a 	.word	0x0801484a

08013870 <_printf_common>:
 8013870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013874:	4616      	mov	r6, r2
 8013876:	4699      	mov	r9, r3
 8013878:	688a      	ldr	r2, [r1, #8]
 801387a:	690b      	ldr	r3, [r1, #16]
 801387c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013880:	4293      	cmp	r3, r2
 8013882:	bfb8      	it	lt
 8013884:	4613      	movlt	r3, r2
 8013886:	6033      	str	r3, [r6, #0]
 8013888:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801388c:	4607      	mov	r7, r0
 801388e:	460c      	mov	r4, r1
 8013890:	b10a      	cbz	r2, 8013896 <_printf_common+0x26>
 8013892:	3301      	adds	r3, #1
 8013894:	6033      	str	r3, [r6, #0]
 8013896:	6823      	ldr	r3, [r4, #0]
 8013898:	0699      	lsls	r1, r3, #26
 801389a:	bf42      	ittt	mi
 801389c:	6833      	ldrmi	r3, [r6, #0]
 801389e:	3302      	addmi	r3, #2
 80138a0:	6033      	strmi	r3, [r6, #0]
 80138a2:	6825      	ldr	r5, [r4, #0]
 80138a4:	f015 0506 	ands.w	r5, r5, #6
 80138a8:	d106      	bne.n	80138b8 <_printf_common+0x48>
 80138aa:	f104 0a19 	add.w	sl, r4, #25
 80138ae:	68e3      	ldr	r3, [r4, #12]
 80138b0:	6832      	ldr	r2, [r6, #0]
 80138b2:	1a9b      	subs	r3, r3, r2
 80138b4:	42ab      	cmp	r3, r5
 80138b6:	dc26      	bgt.n	8013906 <_printf_common+0x96>
 80138b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80138bc:	1e13      	subs	r3, r2, #0
 80138be:	6822      	ldr	r2, [r4, #0]
 80138c0:	bf18      	it	ne
 80138c2:	2301      	movne	r3, #1
 80138c4:	0692      	lsls	r2, r2, #26
 80138c6:	d42b      	bmi.n	8013920 <_printf_common+0xb0>
 80138c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80138cc:	4649      	mov	r1, r9
 80138ce:	4638      	mov	r0, r7
 80138d0:	47c0      	blx	r8
 80138d2:	3001      	adds	r0, #1
 80138d4:	d01e      	beq.n	8013914 <_printf_common+0xa4>
 80138d6:	6823      	ldr	r3, [r4, #0]
 80138d8:	68e5      	ldr	r5, [r4, #12]
 80138da:	6832      	ldr	r2, [r6, #0]
 80138dc:	f003 0306 	and.w	r3, r3, #6
 80138e0:	2b04      	cmp	r3, #4
 80138e2:	bf08      	it	eq
 80138e4:	1aad      	subeq	r5, r5, r2
 80138e6:	68a3      	ldr	r3, [r4, #8]
 80138e8:	6922      	ldr	r2, [r4, #16]
 80138ea:	bf0c      	ite	eq
 80138ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80138f0:	2500      	movne	r5, #0
 80138f2:	4293      	cmp	r3, r2
 80138f4:	bfc4      	itt	gt
 80138f6:	1a9b      	subgt	r3, r3, r2
 80138f8:	18ed      	addgt	r5, r5, r3
 80138fa:	2600      	movs	r6, #0
 80138fc:	341a      	adds	r4, #26
 80138fe:	42b5      	cmp	r5, r6
 8013900:	d11a      	bne.n	8013938 <_printf_common+0xc8>
 8013902:	2000      	movs	r0, #0
 8013904:	e008      	b.n	8013918 <_printf_common+0xa8>
 8013906:	2301      	movs	r3, #1
 8013908:	4652      	mov	r2, sl
 801390a:	4649      	mov	r1, r9
 801390c:	4638      	mov	r0, r7
 801390e:	47c0      	blx	r8
 8013910:	3001      	adds	r0, #1
 8013912:	d103      	bne.n	801391c <_printf_common+0xac>
 8013914:	f04f 30ff 	mov.w	r0, #4294967295
 8013918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801391c:	3501      	adds	r5, #1
 801391e:	e7c6      	b.n	80138ae <_printf_common+0x3e>
 8013920:	18e1      	adds	r1, r4, r3
 8013922:	1c5a      	adds	r2, r3, #1
 8013924:	2030      	movs	r0, #48	; 0x30
 8013926:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801392a:	4422      	add	r2, r4
 801392c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013930:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013934:	3302      	adds	r3, #2
 8013936:	e7c7      	b.n	80138c8 <_printf_common+0x58>
 8013938:	2301      	movs	r3, #1
 801393a:	4622      	mov	r2, r4
 801393c:	4649      	mov	r1, r9
 801393e:	4638      	mov	r0, r7
 8013940:	47c0      	blx	r8
 8013942:	3001      	adds	r0, #1
 8013944:	d0e6      	beq.n	8013914 <_printf_common+0xa4>
 8013946:	3601      	adds	r6, #1
 8013948:	e7d9      	b.n	80138fe <_printf_common+0x8e>
	...

0801394c <_printf_i>:
 801394c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013950:	7e0f      	ldrb	r7, [r1, #24]
 8013952:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013954:	2f78      	cmp	r7, #120	; 0x78
 8013956:	4691      	mov	r9, r2
 8013958:	4680      	mov	r8, r0
 801395a:	460c      	mov	r4, r1
 801395c:	469a      	mov	sl, r3
 801395e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013962:	d807      	bhi.n	8013974 <_printf_i+0x28>
 8013964:	2f62      	cmp	r7, #98	; 0x62
 8013966:	d80a      	bhi.n	801397e <_printf_i+0x32>
 8013968:	2f00      	cmp	r7, #0
 801396a:	f000 80d8 	beq.w	8013b1e <_printf_i+0x1d2>
 801396e:	2f58      	cmp	r7, #88	; 0x58
 8013970:	f000 80a3 	beq.w	8013aba <_printf_i+0x16e>
 8013974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013978:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801397c:	e03a      	b.n	80139f4 <_printf_i+0xa8>
 801397e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013982:	2b15      	cmp	r3, #21
 8013984:	d8f6      	bhi.n	8013974 <_printf_i+0x28>
 8013986:	a101      	add	r1, pc, #4	; (adr r1, 801398c <_printf_i+0x40>)
 8013988:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801398c:	080139e5 	.word	0x080139e5
 8013990:	080139f9 	.word	0x080139f9
 8013994:	08013975 	.word	0x08013975
 8013998:	08013975 	.word	0x08013975
 801399c:	08013975 	.word	0x08013975
 80139a0:	08013975 	.word	0x08013975
 80139a4:	080139f9 	.word	0x080139f9
 80139a8:	08013975 	.word	0x08013975
 80139ac:	08013975 	.word	0x08013975
 80139b0:	08013975 	.word	0x08013975
 80139b4:	08013975 	.word	0x08013975
 80139b8:	08013b05 	.word	0x08013b05
 80139bc:	08013a29 	.word	0x08013a29
 80139c0:	08013ae7 	.word	0x08013ae7
 80139c4:	08013975 	.word	0x08013975
 80139c8:	08013975 	.word	0x08013975
 80139cc:	08013b27 	.word	0x08013b27
 80139d0:	08013975 	.word	0x08013975
 80139d4:	08013a29 	.word	0x08013a29
 80139d8:	08013975 	.word	0x08013975
 80139dc:	08013975 	.word	0x08013975
 80139e0:	08013aef 	.word	0x08013aef
 80139e4:	682b      	ldr	r3, [r5, #0]
 80139e6:	1d1a      	adds	r2, r3, #4
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	602a      	str	r2, [r5, #0]
 80139ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80139f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80139f4:	2301      	movs	r3, #1
 80139f6:	e0a3      	b.n	8013b40 <_printf_i+0x1f4>
 80139f8:	6820      	ldr	r0, [r4, #0]
 80139fa:	6829      	ldr	r1, [r5, #0]
 80139fc:	0606      	lsls	r6, r0, #24
 80139fe:	f101 0304 	add.w	r3, r1, #4
 8013a02:	d50a      	bpl.n	8013a1a <_printf_i+0xce>
 8013a04:	680e      	ldr	r6, [r1, #0]
 8013a06:	602b      	str	r3, [r5, #0]
 8013a08:	2e00      	cmp	r6, #0
 8013a0a:	da03      	bge.n	8013a14 <_printf_i+0xc8>
 8013a0c:	232d      	movs	r3, #45	; 0x2d
 8013a0e:	4276      	negs	r6, r6
 8013a10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013a14:	485e      	ldr	r0, [pc, #376]	; (8013b90 <_printf_i+0x244>)
 8013a16:	230a      	movs	r3, #10
 8013a18:	e019      	b.n	8013a4e <_printf_i+0x102>
 8013a1a:	680e      	ldr	r6, [r1, #0]
 8013a1c:	602b      	str	r3, [r5, #0]
 8013a1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013a22:	bf18      	it	ne
 8013a24:	b236      	sxthne	r6, r6
 8013a26:	e7ef      	b.n	8013a08 <_printf_i+0xbc>
 8013a28:	682b      	ldr	r3, [r5, #0]
 8013a2a:	6820      	ldr	r0, [r4, #0]
 8013a2c:	1d19      	adds	r1, r3, #4
 8013a2e:	6029      	str	r1, [r5, #0]
 8013a30:	0601      	lsls	r1, r0, #24
 8013a32:	d501      	bpl.n	8013a38 <_printf_i+0xec>
 8013a34:	681e      	ldr	r6, [r3, #0]
 8013a36:	e002      	b.n	8013a3e <_printf_i+0xf2>
 8013a38:	0646      	lsls	r6, r0, #25
 8013a3a:	d5fb      	bpl.n	8013a34 <_printf_i+0xe8>
 8013a3c:	881e      	ldrh	r6, [r3, #0]
 8013a3e:	4854      	ldr	r0, [pc, #336]	; (8013b90 <_printf_i+0x244>)
 8013a40:	2f6f      	cmp	r7, #111	; 0x6f
 8013a42:	bf0c      	ite	eq
 8013a44:	2308      	moveq	r3, #8
 8013a46:	230a      	movne	r3, #10
 8013a48:	2100      	movs	r1, #0
 8013a4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013a4e:	6865      	ldr	r5, [r4, #4]
 8013a50:	60a5      	str	r5, [r4, #8]
 8013a52:	2d00      	cmp	r5, #0
 8013a54:	bfa2      	ittt	ge
 8013a56:	6821      	ldrge	r1, [r4, #0]
 8013a58:	f021 0104 	bicge.w	r1, r1, #4
 8013a5c:	6021      	strge	r1, [r4, #0]
 8013a5e:	b90e      	cbnz	r6, 8013a64 <_printf_i+0x118>
 8013a60:	2d00      	cmp	r5, #0
 8013a62:	d04d      	beq.n	8013b00 <_printf_i+0x1b4>
 8013a64:	4615      	mov	r5, r2
 8013a66:	fbb6 f1f3 	udiv	r1, r6, r3
 8013a6a:	fb03 6711 	mls	r7, r3, r1, r6
 8013a6e:	5dc7      	ldrb	r7, [r0, r7]
 8013a70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013a74:	4637      	mov	r7, r6
 8013a76:	42bb      	cmp	r3, r7
 8013a78:	460e      	mov	r6, r1
 8013a7a:	d9f4      	bls.n	8013a66 <_printf_i+0x11a>
 8013a7c:	2b08      	cmp	r3, #8
 8013a7e:	d10b      	bne.n	8013a98 <_printf_i+0x14c>
 8013a80:	6823      	ldr	r3, [r4, #0]
 8013a82:	07de      	lsls	r6, r3, #31
 8013a84:	d508      	bpl.n	8013a98 <_printf_i+0x14c>
 8013a86:	6923      	ldr	r3, [r4, #16]
 8013a88:	6861      	ldr	r1, [r4, #4]
 8013a8a:	4299      	cmp	r1, r3
 8013a8c:	bfde      	ittt	le
 8013a8e:	2330      	movle	r3, #48	; 0x30
 8013a90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013a94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013a98:	1b52      	subs	r2, r2, r5
 8013a9a:	6122      	str	r2, [r4, #16]
 8013a9c:	f8cd a000 	str.w	sl, [sp]
 8013aa0:	464b      	mov	r3, r9
 8013aa2:	aa03      	add	r2, sp, #12
 8013aa4:	4621      	mov	r1, r4
 8013aa6:	4640      	mov	r0, r8
 8013aa8:	f7ff fee2 	bl	8013870 <_printf_common>
 8013aac:	3001      	adds	r0, #1
 8013aae:	d14c      	bne.n	8013b4a <_printf_i+0x1fe>
 8013ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8013ab4:	b004      	add	sp, #16
 8013ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013aba:	4835      	ldr	r0, [pc, #212]	; (8013b90 <_printf_i+0x244>)
 8013abc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013ac0:	6829      	ldr	r1, [r5, #0]
 8013ac2:	6823      	ldr	r3, [r4, #0]
 8013ac4:	f851 6b04 	ldr.w	r6, [r1], #4
 8013ac8:	6029      	str	r1, [r5, #0]
 8013aca:	061d      	lsls	r5, r3, #24
 8013acc:	d514      	bpl.n	8013af8 <_printf_i+0x1ac>
 8013ace:	07df      	lsls	r7, r3, #31
 8013ad0:	bf44      	itt	mi
 8013ad2:	f043 0320 	orrmi.w	r3, r3, #32
 8013ad6:	6023      	strmi	r3, [r4, #0]
 8013ad8:	b91e      	cbnz	r6, 8013ae2 <_printf_i+0x196>
 8013ada:	6823      	ldr	r3, [r4, #0]
 8013adc:	f023 0320 	bic.w	r3, r3, #32
 8013ae0:	6023      	str	r3, [r4, #0]
 8013ae2:	2310      	movs	r3, #16
 8013ae4:	e7b0      	b.n	8013a48 <_printf_i+0xfc>
 8013ae6:	6823      	ldr	r3, [r4, #0]
 8013ae8:	f043 0320 	orr.w	r3, r3, #32
 8013aec:	6023      	str	r3, [r4, #0]
 8013aee:	2378      	movs	r3, #120	; 0x78
 8013af0:	4828      	ldr	r0, [pc, #160]	; (8013b94 <_printf_i+0x248>)
 8013af2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013af6:	e7e3      	b.n	8013ac0 <_printf_i+0x174>
 8013af8:	0659      	lsls	r1, r3, #25
 8013afa:	bf48      	it	mi
 8013afc:	b2b6      	uxthmi	r6, r6
 8013afe:	e7e6      	b.n	8013ace <_printf_i+0x182>
 8013b00:	4615      	mov	r5, r2
 8013b02:	e7bb      	b.n	8013a7c <_printf_i+0x130>
 8013b04:	682b      	ldr	r3, [r5, #0]
 8013b06:	6826      	ldr	r6, [r4, #0]
 8013b08:	6961      	ldr	r1, [r4, #20]
 8013b0a:	1d18      	adds	r0, r3, #4
 8013b0c:	6028      	str	r0, [r5, #0]
 8013b0e:	0635      	lsls	r5, r6, #24
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	d501      	bpl.n	8013b18 <_printf_i+0x1cc>
 8013b14:	6019      	str	r1, [r3, #0]
 8013b16:	e002      	b.n	8013b1e <_printf_i+0x1d2>
 8013b18:	0670      	lsls	r0, r6, #25
 8013b1a:	d5fb      	bpl.n	8013b14 <_printf_i+0x1c8>
 8013b1c:	8019      	strh	r1, [r3, #0]
 8013b1e:	2300      	movs	r3, #0
 8013b20:	6123      	str	r3, [r4, #16]
 8013b22:	4615      	mov	r5, r2
 8013b24:	e7ba      	b.n	8013a9c <_printf_i+0x150>
 8013b26:	682b      	ldr	r3, [r5, #0]
 8013b28:	1d1a      	adds	r2, r3, #4
 8013b2a:	602a      	str	r2, [r5, #0]
 8013b2c:	681d      	ldr	r5, [r3, #0]
 8013b2e:	6862      	ldr	r2, [r4, #4]
 8013b30:	2100      	movs	r1, #0
 8013b32:	4628      	mov	r0, r5
 8013b34:	f7ec fb64 	bl	8000200 <memchr>
 8013b38:	b108      	cbz	r0, 8013b3e <_printf_i+0x1f2>
 8013b3a:	1b40      	subs	r0, r0, r5
 8013b3c:	6060      	str	r0, [r4, #4]
 8013b3e:	6863      	ldr	r3, [r4, #4]
 8013b40:	6123      	str	r3, [r4, #16]
 8013b42:	2300      	movs	r3, #0
 8013b44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013b48:	e7a8      	b.n	8013a9c <_printf_i+0x150>
 8013b4a:	6923      	ldr	r3, [r4, #16]
 8013b4c:	462a      	mov	r2, r5
 8013b4e:	4649      	mov	r1, r9
 8013b50:	4640      	mov	r0, r8
 8013b52:	47d0      	blx	sl
 8013b54:	3001      	adds	r0, #1
 8013b56:	d0ab      	beq.n	8013ab0 <_printf_i+0x164>
 8013b58:	6823      	ldr	r3, [r4, #0]
 8013b5a:	079b      	lsls	r3, r3, #30
 8013b5c:	d413      	bmi.n	8013b86 <_printf_i+0x23a>
 8013b5e:	68e0      	ldr	r0, [r4, #12]
 8013b60:	9b03      	ldr	r3, [sp, #12]
 8013b62:	4298      	cmp	r0, r3
 8013b64:	bfb8      	it	lt
 8013b66:	4618      	movlt	r0, r3
 8013b68:	e7a4      	b.n	8013ab4 <_printf_i+0x168>
 8013b6a:	2301      	movs	r3, #1
 8013b6c:	4632      	mov	r2, r6
 8013b6e:	4649      	mov	r1, r9
 8013b70:	4640      	mov	r0, r8
 8013b72:	47d0      	blx	sl
 8013b74:	3001      	adds	r0, #1
 8013b76:	d09b      	beq.n	8013ab0 <_printf_i+0x164>
 8013b78:	3501      	adds	r5, #1
 8013b7a:	68e3      	ldr	r3, [r4, #12]
 8013b7c:	9903      	ldr	r1, [sp, #12]
 8013b7e:	1a5b      	subs	r3, r3, r1
 8013b80:	42ab      	cmp	r3, r5
 8013b82:	dcf2      	bgt.n	8013b6a <_printf_i+0x21e>
 8013b84:	e7eb      	b.n	8013b5e <_printf_i+0x212>
 8013b86:	2500      	movs	r5, #0
 8013b88:	f104 0619 	add.w	r6, r4, #25
 8013b8c:	e7f5      	b.n	8013b7a <_printf_i+0x22e>
 8013b8e:	bf00      	nop
 8013b90:	08014855 	.word	0x08014855
 8013b94:	08014866 	.word	0x08014866

08013b98 <_read_r>:
 8013b98:	b538      	push	{r3, r4, r5, lr}
 8013b9a:	4d07      	ldr	r5, [pc, #28]	; (8013bb8 <_read_r+0x20>)
 8013b9c:	4604      	mov	r4, r0
 8013b9e:	4608      	mov	r0, r1
 8013ba0:	4611      	mov	r1, r2
 8013ba2:	2200      	movs	r2, #0
 8013ba4:	602a      	str	r2, [r5, #0]
 8013ba6:	461a      	mov	r2, r3
 8013ba8:	f7ee fa80 	bl	80020ac <_read>
 8013bac:	1c43      	adds	r3, r0, #1
 8013bae:	d102      	bne.n	8013bb6 <_read_r+0x1e>
 8013bb0:	682b      	ldr	r3, [r5, #0]
 8013bb2:	b103      	cbz	r3, 8013bb6 <_read_r+0x1e>
 8013bb4:	6023      	str	r3, [r4, #0]
 8013bb6:	bd38      	pop	{r3, r4, r5, pc}
 8013bb8:	2000c300 	.word	0x2000c300

08013bbc <__swbuf_r>:
 8013bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bbe:	460e      	mov	r6, r1
 8013bc0:	4614      	mov	r4, r2
 8013bc2:	4605      	mov	r5, r0
 8013bc4:	b118      	cbz	r0, 8013bce <__swbuf_r+0x12>
 8013bc6:	6983      	ldr	r3, [r0, #24]
 8013bc8:	b90b      	cbnz	r3, 8013bce <__swbuf_r+0x12>
 8013bca:	f7fe ff63 	bl	8012a94 <__sinit>
 8013bce:	4b21      	ldr	r3, [pc, #132]	; (8013c54 <__swbuf_r+0x98>)
 8013bd0:	429c      	cmp	r4, r3
 8013bd2:	d12b      	bne.n	8013c2c <__swbuf_r+0x70>
 8013bd4:	686c      	ldr	r4, [r5, #4]
 8013bd6:	69a3      	ldr	r3, [r4, #24]
 8013bd8:	60a3      	str	r3, [r4, #8]
 8013bda:	89a3      	ldrh	r3, [r4, #12]
 8013bdc:	071a      	lsls	r2, r3, #28
 8013bde:	d52f      	bpl.n	8013c40 <__swbuf_r+0x84>
 8013be0:	6923      	ldr	r3, [r4, #16]
 8013be2:	b36b      	cbz	r3, 8013c40 <__swbuf_r+0x84>
 8013be4:	6923      	ldr	r3, [r4, #16]
 8013be6:	6820      	ldr	r0, [r4, #0]
 8013be8:	1ac0      	subs	r0, r0, r3
 8013bea:	6963      	ldr	r3, [r4, #20]
 8013bec:	b2f6      	uxtb	r6, r6
 8013bee:	4283      	cmp	r3, r0
 8013bf0:	4637      	mov	r7, r6
 8013bf2:	dc04      	bgt.n	8013bfe <__swbuf_r+0x42>
 8013bf4:	4621      	mov	r1, r4
 8013bf6:	4628      	mov	r0, r5
 8013bf8:	f7ff fb18 	bl	801322c <_fflush_r>
 8013bfc:	bb30      	cbnz	r0, 8013c4c <__swbuf_r+0x90>
 8013bfe:	68a3      	ldr	r3, [r4, #8]
 8013c00:	3b01      	subs	r3, #1
 8013c02:	60a3      	str	r3, [r4, #8]
 8013c04:	6823      	ldr	r3, [r4, #0]
 8013c06:	1c5a      	adds	r2, r3, #1
 8013c08:	6022      	str	r2, [r4, #0]
 8013c0a:	701e      	strb	r6, [r3, #0]
 8013c0c:	6963      	ldr	r3, [r4, #20]
 8013c0e:	3001      	adds	r0, #1
 8013c10:	4283      	cmp	r3, r0
 8013c12:	d004      	beq.n	8013c1e <__swbuf_r+0x62>
 8013c14:	89a3      	ldrh	r3, [r4, #12]
 8013c16:	07db      	lsls	r3, r3, #31
 8013c18:	d506      	bpl.n	8013c28 <__swbuf_r+0x6c>
 8013c1a:	2e0a      	cmp	r6, #10
 8013c1c:	d104      	bne.n	8013c28 <__swbuf_r+0x6c>
 8013c1e:	4621      	mov	r1, r4
 8013c20:	4628      	mov	r0, r5
 8013c22:	f7ff fb03 	bl	801322c <_fflush_r>
 8013c26:	b988      	cbnz	r0, 8013c4c <__swbuf_r+0x90>
 8013c28:	4638      	mov	r0, r7
 8013c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c2c:	4b0a      	ldr	r3, [pc, #40]	; (8013c58 <__swbuf_r+0x9c>)
 8013c2e:	429c      	cmp	r4, r3
 8013c30:	d101      	bne.n	8013c36 <__swbuf_r+0x7a>
 8013c32:	68ac      	ldr	r4, [r5, #8]
 8013c34:	e7cf      	b.n	8013bd6 <__swbuf_r+0x1a>
 8013c36:	4b09      	ldr	r3, [pc, #36]	; (8013c5c <__swbuf_r+0xa0>)
 8013c38:	429c      	cmp	r4, r3
 8013c3a:	bf08      	it	eq
 8013c3c:	68ec      	ldreq	r4, [r5, #12]
 8013c3e:	e7ca      	b.n	8013bd6 <__swbuf_r+0x1a>
 8013c40:	4621      	mov	r1, r4
 8013c42:	4628      	mov	r0, r5
 8013c44:	f000 f80c 	bl	8013c60 <__swsetup_r>
 8013c48:	2800      	cmp	r0, #0
 8013c4a:	d0cb      	beq.n	8013be4 <__swbuf_r+0x28>
 8013c4c:	f04f 37ff 	mov.w	r7, #4294967295
 8013c50:	e7ea      	b.n	8013c28 <__swbuf_r+0x6c>
 8013c52:	bf00      	nop
 8013c54:	08014750 	.word	0x08014750
 8013c58:	08014770 	.word	0x08014770
 8013c5c:	08014730 	.word	0x08014730

08013c60 <__swsetup_r>:
 8013c60:	4b32      	ldr	r3, [pc, #200]	; (8013d2c <__swsetup_r+0xcc>)
 8013c62:	b570      	push	{r4, r5, r6, lr}
 8013c64:	681d      	ldr	r5, [r3, #0]
 8013c66:	4606      	mov	r6, r0
 8013c68:	460c      	mov	r4, r1
 8013c6a:	b125      	cbz	r5, 8013c76 <__swsetup_r+0x16>
 8013c6c:	69ab      	ldr	r3, [r5, #24]
 8013c6e:	b913      	cbnz	r3, 8013c76 <__swsetup_r+0x16>
 8013c70:	4628      	mov	r0, r5
 8013c72:	f7fe ff0f 	bl	8012a94 <__sinit>
 8013c76:	4b2e      	ldr	r3, [pc, #184]	; (8013d30 <__swsetup_r+0xd0>)
 8013c78:	429c      	cmp	r4, r3
 8013c7a:	d10f      	bne.n	8013c9c <__swsetup_r+0x3c>
 8013c7c:	686c      	ldr	r4, [r5, #4]
 8013c7e:	89a3      	ldrh	r3, [r4, #12]
 8013c80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013c84:	0719      	lsls	r1, r3, #28
 8013c86:	d42c      	bmi.n	8013ce2 <__swsetup_r+0x82>
 8013c88:	06dd      	lsls	r5, r3, #27
 8013c8a:	d411      	bmi.n	8013cb0 <__swsetup_r+0x50>
 8013c8c:	2309      	movs	r3, #9
 8013c8e:	6033      	str	r3, [r6, #0]
 8013c90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013c94:	81a3      	strh	r3, [r4, #12]
 8013c96:	f04f 30ff 	mov.w	r0, #4294967295
 8013c9a:	e03e      	b.n	8013d1a <__swsetup_r+0xba>
 8013c9c:	4b25      	ldr	r3, [pc, #148]	; (8013d34 <__swsetup_r+0xd4>)
 8013c9e:	429c      	cmp	r4, r3
 8013ca0:	d101      	bne.n	8013ca6 <__swsetup_r+0x46>
 8013ca2:	68ac      	ldr	r4, [r5, #8]
 8013ca4:	e7eb      	b.n	8013c7e <__swsetup_r+0x1e>
 8013ca6:	4b24      	ldr	r3, [pc, #144]	; (8013d38 <__swsetup_r+0xd8>)
 8013ca8:	429c      	cmp	r4, r3
 8013caa:	bf08      	it	eq
 8013cac:	68ec      	ldreq	r4, [r5, #12]
 8013cae:	e7e6      	b.n	8013c7e <__swsetup_r+0x1e>
 8013cb0:	0758      	lsls	r0, r3, #29
 8013cb2:	d512      	bpl.n	8013cda <__swsetup_r+0x7a>
 8013cb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013cb6:	b141      	cbz	r1, 8013cca <__swsetup_r+0x6a>
 8013cb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013cbc:	4299      	cmp	r1, r3
 8013cbe:	d002      	beq.n	8013cc6 <__swsetup_r+0x66>
 8013cc0:	4630      	mov	r0, r6
 8013cc2:	f7fe ffd3 	bl	8012c6c <_free_r>
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	6363      	str	r3, [r4, #52]	; 0x34
 8013cca:	89a3      	ldrh	r3, [r4, #12]
 8013ccc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013cd0:	81a3      	strh	r3, [r4, #12]
 8013cd2:	2300      	movs	r3, #0
 8013cd4:	6063      	str	r3, [r4, #4]
 8013cd6:	6923      	ldr	r3, [r4, #16]
 8013cd8:	6023      	str	r3, [r4, #0]
 8013cda:	89a3      	ldrh	r3, [r4, #12]
 8013cdc:	f043 0308 	orr.w	r3, r3, #8
 8013ce0:	81a3      	strh	r3, [r4, #12]
 8013ce2:	6923      	ldr	r3, [r4, #16]
 8013ce4:	b94b      	cbnz	r3, 8013cfa <__swsetup_r+0x9a>
 8013ce6:	89a3      	ldrh	r3, [r4, #12]
 8013ce8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013cf0:	d003      	beq.n	8013cfa <__swsetup_r+0x9a>
 8013cf2:	4621      	mov	r1, r4
 8013cf4:	4630      	mov	r0, r6
 8013cf6:	f000 f84d 	bl	8013d94 <__smakebuf_r>
 8013cfa:	89a0      	ldrh	r0, [r4, #12]
 8013cfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013d00:	f010 0301 	ands.w	r3, r0, #1
 8013d04:	d00a      	beq.n	8013d1c <__swsetup_r+0xbc>
 8013d06:	2300      	movs	r3, #0
 8013d08:	60a3      	str	r3, [r4, #8]
 8013d0a:	6963      	ldr	r3, [r4, #20]
 8013d0c:	425b      	negs	r3, r3
 8013d0e:	61a3      	str	r3, [r4, #24]
 8013d10:	6923      	ldr	r3, [r4, #16]
 8013d12:	b943      	cbnz	r3, 8013d26 <__swsetup_r+0xc6>
 8013d14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013d18:	d1ba      	bne.n	8013c90 <__swsetup_r+0x30>
 8013d1a:	bd70      	pop	{r4, r5, r6, pc}
 8013d1c:	0781      	lsls	r1, r0, #30
 8013d1e:	bf58      	it	pl
 8013d20:	6963      	ldrpl	r3, [r4, #20]
 8013d22:	60a3      	str	r3, [r4, #8]
 8013d24:	e7f4      	b.n	8013d10 <__swsetup_r+0xb0>
 8013d26:	2000      	movs	r0, #0
 8013d28:	e7f7      	b.n	8013d1a <__swsetup_r+0xba>
 8013d2a:	bf00      	nop
 8013d2c:	200002b0 	.word	0x200002b0
 8013d30:	08014750 	.word	0x08014750
 8013d34:	08014770 	.word	0x08014770
 8013d38:	08014730 	.word	0x08014730

08013d3c <abort>:
 8013d3c:	b508      	push	{r3, lr}
 8013d3e:	2006      	movs	r0, #6
 8013d40:	f000 f8da 	bl	8013ef8 <raise>
 8013d44:	2001      	movs	r0, #1
 8013d46:	f7ee f9a7 	bl	8002098 <_exit>

08013d4a <__swhatbuf_r>:
 8013d4a:	b570      	push	{r4, r5, r6, lr}
 8013d4c:	460e      	mov	r6, r1
 8013d4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d52:	2900      	cmp	r1, #0
 8013d54:	b096      	sub	sp, #88	; 0x58
 8013d56:	4614      	mov	r4, r2
 8013d58:	461d      	mov	r5, r3
 8013d5a:	da08      	bge.n	8013d6e <__swhatbuf_r+0x24>
 8013d5c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013d60:	2200      	movs	r2, #0
 8013d62:	602a      	str	r2, [r5, #0]
 8013d64:	061a      	lsls	r2, r3, #24
 8013d66:	d410      	bmi.n	8013d8a <__swhatbuf_r+0x40>
 8013d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013d6c:	e00e      	b.n	8013d8c <__swhatbuf_r+0x42>
 8013d6e:	466a      	mov	r2, sp
 8013d70:	f000 f8de 	bl	8013f30 <_fstat_r>
 8013d74:	2800      	cmp	r0, #0
 8013d76:	dbf1      	blt.n	8013d5c <__swhatbuf_r+0x12>
 8013d78:	9a01      	ldr	r2, [sp, #4]
 8013d7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013d7e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013d82:	425a      	negs	r2, r3
 8013d84:	415a      	adcs	r2, r3
 8013d86:	602a      	str	r2, [r5, #0]
 8013d88:	e7ee      	b.n	8013d68 <__swhatbuf_r+0x1e>
 8013d8a:	2340      	movs	r3, #64	; 0x40
 8013d8c:	2000      	movs	r0, #0
 8013d8e:	6023      	str	r3, [r4, #0]
 8013d90:	b016      	add	sp, #88	; 0x58
 8013d92:	bd70      	pop	{r4, r5, r6, pc}

08013d94 <__smakebuf_r>:
 8013d94:	898b      	ldrh	r3, [r1, #12]
 8013d96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013d98:	079d      	lsls	r5, r3, #30
 8013d9a:	4606      	mov	r6, r0
 8013d9c:	460c      	mov	r4, r1
 8013d9e:	d507      	bpl.n	8013db0 <__smakebuf_r+0x1c>
 8013da0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013da4:	6023      	str	r3, [r4, #0]
 8013da6:	6123      	str	r3, [r4, #16]
 8013da8:	2301      	movs	r3, #1
 8013daa:	6163      	str	r3, [r4, #20]
 8013dac:	b002      	add	sp, #8
 8013dae:	bd70      	pop	{r4, r5, r6, pc}
 8013db0:	ab01      	add	r3, sp, #4
 8013db2:	466a      	mov	r2, sp
 8013db4:	f7ff ffc9 	bl	8013d4a <__swhatbuf_r>
 8013db8:	9900      	ldr	r1, [sp, #0]
 8013dba:	4605      	mov	r5, r0
 8013dbc:	4630      	mov	r0, r6
 8013dbe:	f7fe ffc1 	bl	8012d44 <_malloc_r>
 8013dc2:	b948      	cbnz	r0, 8013dd8 <__smakebuf_r+0x44>
 8013dc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013dc8:	059a      	lsls	r2, r3, #22
 8013dca:	d4ef      	bmi.n	8013dac <__smakebuf_r+0x18>
 8013dcc:	f023 0303 	bic.w	r3, r3, #3
 8013dd0:	f043 0302 	orr.w	r3, r3, #2
 8013dd4:	81a3      	strh	r3, [r4, #12]
 8013dd6:	e7e3      	b.n	8013da0 <__smakebuf_r+0xc>
 8013dd8:	4b0d      	ldr	r3, [pc, #52]	; (8013e10 <__smakebuf_r+0x7c>)
 8013dda:	62b3      	str	r3, [r6, #40]	; 0x28
 8013ddc:	89a3      	ldrh	r3, [r4, #12]
 8013dde:	6020      	str	r0, [r4, #0]
 8013de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013de4:	81a3      	strh	r3, [r4, #12]
 8013de6:	9b00      	ldr	r3, [sp, #0]
 8013de8:	6163      	str	r3, [r4, #20]
 8013dea:	9b01      	ldr	r3, [sp, #4]
 8013dec:	6120      	str	r0, [r4, #16]
 8013dee:	b15b      	cbz	r3, 8013e08 <__smakebuf_r+0x74>
 8013df0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013df4:	4630      	mov	r0, r6
 8013df6:	f000 f8ad 	bl	8013f54 <_isatty_r>
 8013dfa:	b128      	cbz	r0, 8013e08 <__smakebuf_r+0x74>
 8013dfc:	89a3      	ldrh	r3, [r4, #12]
 8013dfe:	f023 0303 	bic.w	r3, r3, #3
 8013e02:	f043 0301 	orr.w	r3, r3, #1
 8013e06:	81a3      	strh	r3, [r4, #12]
 8013e08:	89a0      	ldrh	r0, [r4, #12]
 8013e0a:	4305      	orrs	r5, r0
 8013e0c:	81a5      	strh	r5, [r4, #12]
 8013e0e:	e7cd      	b.n	8013dac <__smakebuf_r+0x18>
 8013e10:	08012a2d 	.word	0x08012a2d

08013e14 <memmove>:
 8013e14:	4288      	cmp	r0, r1
 8013e16:	b510      	push	{r4, lr}
 8013e18:	eb01 0402 	add.w	r4, r1, r2
 8013e1c:	d902      	bls.n	8013e24 <memmove+0x10>
 8013e1e:	4284      	cmp	r4, r0
 8013e20:	4623      	mov	r3, r4
 8013e22:	d807      	bhi.n	8013e34 <memmove+0x20>
 8013e24:	1e43      	subs	r3, r0, #1
 8013e26:	42a1      	cmp	r1, r4
 8013e28:	d008      	beq.n	8013e3c <memmove+0x28>
 8013e2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013e2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013e32:	e7f8      	b.n	8013e26 <memmove+0x12>
 8013e34:	4402      	add	r2, r0
 8013e36:	4601      	mov	r1, r0
 8013e38:	428a      	cmp	r2, r1
 8013e3a:	d100      	bne.n	8013e3e <memmove+0x2a>
 8013e3c:	bd10      	pop	{r4, pc}
 8013e3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013e42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013e46:	e7f7      	b.n	8013e38 <memmove+0x24>

08013e48 <_realloc_r>:
 8013e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e4c:	4680      	mov	r8, r0
 8013e4e:	4614      	mov	r4, r2
 8013e50:	460e      	mov	r6, r1
 8013e52:	b921      	cbnz	r1, 8013e5e <_realloc_r+0x16>
 8013e54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e58:	4611      	mov	r1, r2
 8013e5a:	f7fe bf73 	b.w	8012d44 <_malloc_r>
 8013e5e:	b92a      	cbnz	r2, 8013e6c <_realloc_r+0x24>
 8013e60:	f7fe ff04 	bl	8012c6c <_free_r>
 8013e64:	4625      	mov	r5, r4
 8013e66:	4628      	mov	r0, r5
 8013e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e6c:	f000 f882 	bl	8013f74 <_malloc_usable_size_r>
 8013e70:	4284      	cmp	r4, r0
 8013e72:	4607      	mov	r7, r0
 8013e74:	d802      	bhi.n	8013e7c <_realloc_r+0x34>
 8013e76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013e7a:	d812      	bhi.n	8013ea2 <_realloc_r+0x5a>
 8013e7c:	4621      	mov	r1, r4
 8013e7e:	4640      	mov	r0, r8
 8013e80:	f7fe ff60 	bl	8012d44 <_malloc_r>
 8013e84:	4605      	mov	r5, r0
 8013e86:	2800      	cmp	r0, #0
 8013e88:	d0ed      	beq.n	8013e66 <_realloc_r+0x1e>
 8013e8a:	42bc      	cmp	r4, r7
 8013e8c:	4622      	mov	r2, r4
 8013e8e:	4631      	mov	r1, r6
 8013e90:	bf28      	it	cs
 8013e92:	463a      	movcs	r2, r7
 8013e94:	f7fe fed4 	bl	8012c40 <memcpy>
 8013e98:	4631      	mov	r1, r6
 8013e9a:	4640      	mov	r0, r8
 8013e9c:	f7fe fee6 	bl	8012c6c <_free_r>
 8013ea0:	e7e1      	b.n	8013e66 <_realloc_r+0x1e>
 8013ea2:	4635      	mov	r5, r6
 8013ea4:	e7df      	b.n	8013e66 <_realloc_r+0x1e>

08013ea6 <_raise_r>:
 8013ea6:	291f      	cmp	r1, #31
 8013ea8:	b538      	push	{r3, r4, r5, lr}
 8013eaa:	4604      	mov	r4, r0
 8013eac:	460d      	mov	r5, r1
 8013eae:	d904      	bls.n	8013eba <_raise_r+0x14>
 8013eb0:	2316      	movs	r3, #22
 8013eb2:	6003      	str	r3, [r0, #0]
 8013eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8013eb8:	bd38      	pop	{r3, r4, r5, pc}
 8013eba:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013ebc:	b112      	cbz	r2, 8013ec4 <_raise_r+0x1e>
 8013ebe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013ec2:	b94b      	cbnz	r3, 8013ed8 <_raise_r+0x32>
 8013ec4:	4620      	mov	r0, r4
 8013ec6:	f000 f831 	bl	8013f2c <_getpid_r>
 8013eca:	462a      	mov	r2, r5
 8013ecc:	4601      	mov	r1, r0
 8013ece:	4620      	mov	r0, r4
 8013ed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013ed4:	f000 b818 	b.w	8013f08 <_kill_r>
 8013ed8:	2b01      	cmp	r3, #1
 8013eda:	d00a      	beq.n	8013ef2 <_raise_r+0x4c>
 8013edc:	1c59      	adds	r1, r3, #1
 8013ede:	d103      	bne.n	8013ee8 <_raise_r+0x42>
 8013ee0:	2316      	movs	r3, #22
 8013ee2:	6003      	str	r3, [r0, #0]
 8013ee4:	2001      	movs	r0, #1
 8013ee6:	e7e7      	b.n	8013eb8 <_raise_r+0x12>
 8013ee8:	2400      	movs	r4, #0
 8013eea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013eee:	4628      	mov	r0, r5
 8013ef0:	4798      	blx	r3
 8013ef2:	2000      	movs	r0, #0
 8013ef4:	e7e0      	b.n	8013eb8 <_raise_r+0x12>
	...

08013ef8 <raise>:
 8013ef8:	4b02      	ldr	r3, [pc, #8]	; (8013f04 <raise+0xc>)
 8013efa:	4601      	mov	r1, r0
 8013efc:	6818      	ldr	r0, [r3, #0]
 8013efe:	f7ff bfd2 	b.w	8013ea6 <_raise_r>
 8013f02:	bf00      	nop
 8013f04:	200002b0 	.word	0x200002b0

08013f08 <_kill_r>:
 8013f08:	b538      	push	{r3, r4, r5, lr}
 8013f0a:	4d07      	ldr	r5, [pc, #28]	; (8013f28 <_kill_r+0x20>)
 8013f0c:	2300      	movs	r3, #0
 8013f0e:	4604      	mov	r4, r0
 8013f10:	4608      	mov	r0, r1
 8013f12:	4611      	mov	r1, r2
 8013f14:	602b      	str	r3, [r5, #0]
 8013f16:	f7ee f8af 	bl	8002078 <_kill>
 8013f1a:	1c43      	adds	r3, r0, #1
 8013f1c:	d102      	bne.n	8013f24 <_kill_r+0x1c>
 8013f1e:	682b      	ldr	r3, [r5, #0]
 8013f20:	b103      	cbz	r3, 8013f24 <_kill_r+0x1c>
 8013f22:	6023      	str	r3, [r4, #0]
 8013f24:	bd38      	pop	{r3, r4, r5, pc}
 8013f26:	bf00      	nop
 8013f28:	2000c300 	.word	0x2000c300

08013f2c <_getpid_r>:
 8013f2c:	f7ee b89c 	b.w	8002068 <_getpid>

08013f30 <_fstat_r>:
 8013f30:	b538      	push	{r3, r4, r5, lr}
 8013f32:	4d07      	ldr	r5, [pc, #28]	; (8013f50 <_fstat_r+0x20>)
 8013f34:	2300      	movs	r3, #0
 8013f36:	4604      	mov	r4, r0
 8013f38:	4608      	mov	r0, r1
 8013f3a:	4611      	mov	r1, r2
 8013f3c:	602b      	str	r3, [r5, #0]
 8013f3e:	f7ee f8fa 	bl	8002136 <_fstat>
 8013f42:	1c43      	adds	r3, r0, #1
 8013f44:	d102      	bne.n	8013f4c <_fstat_r+0x1c>
 8013f46:	682b      	ldr	r3, [r5, #0]
 8013f48:	b103      	cbz	r3, 8013f4c <_fstat_r+0x1c>
 8013f4a:	6023      	str	r3, [r4, #0]
 8013f4c:	bd38      	pop	{r3, r4, r5, pc}
 8013f4e:	bf00      	nop
 8013f50:	2000c300 	.word	0x2000c300

08013f54 <_isatty_r>:
 8013f54:	b538      	push	{r3, r4, r5, lr}
 8013f56:	4d06      	ldr	r5, [pc, #24]	; (8013f70 <_isatty_r+0x1c>)
 8013f58:	2300      	movs	r3, #0
 8013f5a:	4604      	mov	r4, r0
 8013f5c:	4608      	mov	r0, r1
 8013f5e:	602b      	str	r3, [r5, #0]
 8013f60:	f7ee f8f9 	bl	8002156 <_isatty>
 8013f64:	1c43      	adds	r3, r0, #1
 8013f66:	d102      	bne.n	8013f6e <_isatty_r+0x1a>
 8013f68:	682b      	ldr	r3, [r5, #0]
 8013f6a:	b103      	cbz	r3, 8013f6e <_isatty_r+0x1a>
 8013f6c:	6023      	str	r3, [r4, #0]
 8013f6e:	bd38      	pop	{r3, r4, r5, pc}
 8013f70:	2000c300 	.word	0x2000c300

08013f74 <_malloc_usable_size_r>:
 8013f74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013f78:	1f18      	subs	r0, r3, #4
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	bfbc      	itt	lt
 8013f7e:	580b      	ldrlt	r3, [r1, r0]
 8013f80:	18c0      	addlt	r0, r0, r3
 8013f82:	4770      	bx	lr

08013f84 <_init>:
 8013f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f86:	bf00      	nop
 8013f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f8a:	bc08      	pop	{r3}
 8013f8c:	469e      	mov	lr, r3
 8013f8e:	4770      	bx	lr

08013f90 <_fini>:
 8013f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f92:	bf00      	nop
 8013f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f96:	bc08      	pop	{r3}
 8013f98:	469e      	mov	lr, r3
 8013f9a:	4770      	bx	lr
