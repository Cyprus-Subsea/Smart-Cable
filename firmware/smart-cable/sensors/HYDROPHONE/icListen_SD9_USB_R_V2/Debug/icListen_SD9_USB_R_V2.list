
icListen_SD9_USB_R_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016320  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b54  080164b0  080164b0  000264b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017004  08017004  00030378  2**0
                  CONTENTS
  4 .ARM          00000008  08017004  08017004  00027004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801700c  0801700c  00030378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801700c  0801700c  0002700c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017010  08017010  00027010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000378  20000000  08017014  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030378  2**0
                  CONTENTS
 10 .bss          0000c948  20000378  20000378  00030378  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000ccc0  2000ccc0  00030378  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030378  2**0
                  CONTENTS, READONLY
 13 .debug_info   000323a3  00000000  00000000  000303a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000072f1  00000000  00000000  0006274b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002490  00000000  00000000  00069a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000021c8  00000000  00000000  0006bed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002acb8  00000000  00000000  0006e098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00032fe1  00000000  00000000  00098d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dab8d  00000000  00000000  000cbd31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a68be  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a810  00000000  00000000  001a6910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000378 	.word	0x20000378
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016498 	.word	0x08016498

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000037c 	.word	0x2000037c
 80001cc:	08016498 	.word	0x08016498

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <UI_init>:
char temp_array[400];
const char* UI_commands_strings[]={"help here\r"};


void UI_init(UI_typedef* UI_obj)
{
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b096      	sub	sp, #88	; 0x58
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	UI_messages_init(UI_obj);
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f000 f967 	bl	8000880 <UI_messages_init>


	osMessageQDef(UI_events_q, 20, uint8_t);
 80005b2:	4b20      	ldr	r3, [pc, #128]	; (8000634 <UI_init+0x90>)
 80005b4:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80005b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UI_obj->events_q= osMessageCreate(osMessageQ(UI_events_q), NULL);
 80005be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005c2:	2100      	movs	r1, #0
 80005c4:	4618      	mov	r0, r3
 80005c6:	f010 fd08 	bl	8010fda <osMessageCreate>
 80005ca:	4602      	mov	r2, r0
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	609a      	str	r2, [r3, #8]

	osMessageQDef(UI_media_rx_q, 20, uint16_t);
 80005d0:	4b19      	ldr	r3, [pc, #100]	; (8000638 <UI_init+0x94>)
 80005d2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UI_obj->media_rx_messages_q= osMessageCreate(osMessageQ(UI_media_rx_q), NULL);
 80005dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f010 fcf9 	bl	8010fda <osMessageCreate>
 80005e8:	4602      	mov	r2, r0
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	601a      	str	r2, [r3, #0]

	osMessageQDef(UI_media_tx_q, 200, uint8_t);
 80005ee:	4b13      	ldr	r3, [pc, #76]	; (800063c <UI_init+0x98>)
 80005f0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80005f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UI_obj->media_tx_q = osMessageCreate(osMessageQ(UI_media_tx_q), NULL);
 80005fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f010 fcea 	bl	8010fda <osMessageCreate>
 8000606:	4602      	mov	r2, r0
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	605a      	str	r2, [r3, #4]

	osThreadDef(UI_task, UI_loop, osPriorityNormal, 0, 256);
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <UI_init+0x9c>)
 800060e:	f107 040c 	add.w	r4, r7, #12
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(UI_task), UI_obj);
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	6879      	ldr	r1, [r7, #4]
 8000626:	4618      	mov	r0, r3
 8000628:	f010 fc77 	bl	8010f1a <osThreadCreate>
}
 800062c:	bf00      	nop
 800062e:	3758      	adds	r7, #88	; 0x58
 8000630:	46bd      	mov	sp, r7
 8000632:	bdb0      	pop	{r4, r5, r7, pc}
 8000634:	080164c4 	.word	0x080164c4
 8000638:	080164d4 	.word	0x080164d4
 800063c:	080164e4 	.word	0x080164e4
 8000640:	080164f4 	.word	0x080164f4

08000644 <UI_loop>:


void UI_loop(UI_typedef* UI_obj)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	 uint16_t msg_indx;
	 for(;;)
	 {
		if(xQueueReceive(UI_obj->media_rx_messages_q,&msg_indx,osWaitForever))
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f107 010a 	add.w	r1, r7, #10
 8000654:	f04f 32ff 	mov.w	r2, #4294967295
 8000658:	4618      	mov	r0, r3
 800065a:	f011 f923 	bl	80118a4 <xQueueReceive>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0f3      	beq.n	800064c <UI_loop+0x8>
		{   uint8_t* msg=UI_obj->rx_buffer+msg_indx;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	330e      	adds	r3, #14
 8000668:	897a      	ldrh	r2, [r7, #10]
 800066a:	4413      	add	r3, r2
 800066c:	60fb      	str	r3, [r7, #12]
			UI_parse_message(UI_obj,msg);
 800066e:	68f9      	ldr	r1, [r7, #12]
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f000 f8c7 	bl	8000804 <UI_parse_message>
		if(xQueueReceive(UI_obj->media_rx_messages_q,&msg_indx,osWaitForever))
 8000676:	e7e9      	b.n	800064c <UI_loop+0x8>

08000678 <UI_media_process_byte>:

}


void UI_media_process_byte(UI_typedef* UI_obj,uint8_t rx_byte)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
	if(UI_obj->media_status==UI_MEDIA_READY && rx_byte!=0x00)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	7b5b      	ldrb	r3, [r3, #13]
 8000688:	2b0a      	cmp	r3, #10
 800068a:	d160      	bne.n	800074e <UI_media_process_byte+0xd6>
 800068c:	78fb      	ldrb	r3, [r7, #3]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d05d      	beq.n	800074e <UI_media_process_byte+0xd6>
	{
		UI_obj->rx_buffer[UI_obj->rx_buffer_indx]=rx_byte;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000698:	b29b      	uxth	r3, r3
 800069a:	461a      	mov	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4413      	add	r3, r2
 80006a0:	78fa      	ldrb	r2, [r7, #3]
 80006a2:	739a      	strb	r2, [r3, #14]
		if(rx_byte=='\r')
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	2b0d      	cmp	r3, #13
 80006a8:	d132      	bne.n	8000710 <UI_media_process_byte+0x98>
		{
			UI_obj->rx_buffer[UI_obj->rx_buffer_indx]=0x00;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	461a      	mov	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4413      	add	r3, r2
 80006b8:	2200      	movs	r2, #0
 80006ba:	739a      	strb	r2, [r3, #14]
			osMessagePut(UI_obj->media_rx_messages_q,UI_obj->rx_buffer_new_string_indx,0);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	6818      	ldr	r0, [r3, #0]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	2200      	movs	r2, #0
 80006ca:	4619      	mov	r1, r3
 80006cc:	f010 fcae 	bl	801102c <osMessagePut>
			if(UI_obj->rx_buffer_indx>UI_RX_BUFFER_THR) UI_obj->rx_buffer_indx=0;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80006dc:	d907      	bls.n	80006ee <UI_media_process_byte+0x76>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 80006e6:	2200      	movs	r2, #0
 80006e8:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
 80006ec:	e008      	b.n	8000700 <UI_media_process_byte+0x88>
			else  UI_obj->rx_buffer_indx++;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	3301      	adds	r3, #1
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
			UI_obj->rx_buffer_new_string_indx=UI_obj->rx_buffer_indx;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000706:	b29a      	uxth	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
 800070e:	e008      	b.n	8000722 <UI_media_process_byte+0xaa>
		}
		else UI_obj->rx_buffer_indx++;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000716:	b29b      	uxth	r3, r3
 8000718:	3301      	adds	r3, #1
 800071a:	b29a      	uxth	r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
		if(UI_obj->rx_buffer_indx==UI_RX_BUFFER_SIZE)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000728:	b29b      	uxth	r3, r3
 800072a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800072e:	d11d      	bne.n	800076c <UI_media_process_byte+0xf4>
		{
			UI_obj->rx_buffer_indx=0;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2200      	movs	r2, #0
 8000734:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 8000738:	2200      	movs	r2, #0
 800073a:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
			UI_obj->rx_buffer_new_string_indx=UI_obj->rx_buffer_indx;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000744:	b29a      	uxth	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
		if(UI_obj->rx_buffer_indx==UI_RX_BUFFER_SIZE)
 800074c:	e00e      	b.n	800076c <UI_media_process_byte+0xf4>
		}
	}
	else
	{
		UI_obj->rx_buffer_indx=0;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2200      	movs	r2, #0
 8000752:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 8000756:	2200      	movs	r2, #0
 8000758:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
		UI_obj->rx_buffer_new_string_indx=UI_obj->rx_buffer_indx;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8000762:	b29a      	uxth	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
	}
}
 800076a:	bf00      	nop
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <UI_media_get_byte>:

uint8_t UI_media_get_byte(UI_typedef* UI_obj,uint8_t* tx_byte)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
	osEvent res=osMessageGet(UI_obj->media_tx_q,0);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6859      	ldr	r1, [r3, #4]
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2200      	movs	r2, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f010 fc8f 	bl	80110ac <osMessageGet>
	if(res.status==osEventMessage)
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	2b10      	cmp	r3, #16
 8000792:	d105      	bne.n	80007a0 <UI_media_get_byte+0x2c>
    {
		*tx_byte=res.value.v;
 8000794:	693b      	ldr	r3, [r7, #16]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	701a      	strb	r2, [r3, #0]
		return UI_F_OK;
 800079c:	2300      	movs	r3, #0
 800079e:	e000      	b.n	80007a2 <UI_media_get_byte+0x2e>
    }
  return UI_F_ERR;
 80007a0:	2301      	movs	r3, #1
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3718      	adds	r7, #24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <UI_send_msg>:


void UI_send_msg(UI_typedef* UI_obj,uint8_t cmd_id,void* arg)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	60f8      	str	r0, [r7, #12]
 80007b2:	460b      	mov	r3, r1
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	72fb      	strb	r3, [r7, #11]
 memory_region_pointer*  ptr=arg;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	613b      	str	r3, [r7, #16]

 switch(cmd_id)
 80007bc:	7afb      	ldrb	r3, [r7, #11]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d01a      	beq.n	80007f8 <UI_send_msg+0x4e>
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d000      	beq.n	80007c8 <UI_send_msg+0x1e>
		   osMessagePut(UI_obj->media_tx_q,*((uint8_t*)(ptr->start_addr)+i),osWaitForever);
	   }
     break;
 }

}
 80007c6:	e018      	b.n	80007fa <UI_send_msg+0x50>
       for(int i=0;i<ptr->size;i++)
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	e00e      	b.n	80007ec <UI_send_msg+0x42>
		   osMessagePut(UI_obj->media_tx_q,*((uint8_t*)(ptr->start_addr)+i),osWaitForever);
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	6858      	ldr	r0, [r3, #4]
 80007d2:	693b      	ldr	r3, [r7, #16]
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	4413      	add	r3, r2
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	f04f 32ff 	mov.w	r2, #4294967295
 80007e0:	4619      	mov	r1, r3
 80007e2:	f010 fc23 	bl	801102c <osMessagePut>
       for(int i=0;i<ptr->size;i++)
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	3301      	adds	r3, #1
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	685a      	ldr	r2, [r3, #4]
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d8eb      	bhi.n	80007ce <UI_send_msg+0x24>
     break;
 80007f6:	e000      	b.n	80007fa <UI_send_msg+0x50>
	 break;
 80007f8:	bf00      	nop
}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <UI_parse_message>:
	return UI_F_ERR;
}


int UI_parse_message(UI_typedef* UI_obj,uint8_t* msg)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
 char* pch;
 pch=strtok(msg," ");
 800080e:	4919      	ldr	r1, [pc, #100]	; (8000874 <UI_parse_message+0x70>)
 8000810:	6838      	ldr	r0, [r7, #0]
 8000812:	f013 fee3 	bl	80145dc <strtok>
 8000816:	60b8      	str	r0, [r7, #8]
 for(int i=0;i<UI_MSG_NUM_OF_FUNCTIONS;i++)
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	e022      	b.n	8000864 <UI_parse_message+0x60>
 {
	  if(strcmp(pch,UI_messages_strings[i])==0)
 800081e:	4a16      	ldr	r2, [pc, #88]	; (8000878 <UI_parse_message+0x74>)
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000826:	4619      	mov	r1, r3
 8000828:	68b8      	ldr	r0, [r7, #8]
 800082a:	f7ff fcd1 	bl	80001d0 <strcmp>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d114      	bne.n	800085e <UI_parse_message+0x5a>
		{
			if(UI_functions[i](UI_obj,pch+strlen(pch)+1)==UI_F_OK) return UI_F_OK;
 8000834:	4a11      	ldr	r2, [pc, #68]	; (800087c <UI_parse_message+0x78>)
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800083c:	68b8      	ldr	r0, [r7, #8]
 800083e:	f7ff fcd1 	bl	80001e4 <strlen>
 8000842:	4603      	mov	r3, r0
 8000844:	3301      	adds	r3, #1
 8000846:	68ba      	ldr	r2, [r7, #8]
 8000848:	4413      	add	r3, r2
 800084a:	4619      	mov	r1, r3
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	47a0      	blx	r4
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d101      	bne.n	800085a <UI_parse_message+0x56>
 8000856:	2300      	movs	r3, #0
 8000858:	e008      	b.n	800086c <UI_parse_message+0x68>
      else return UI_F_ERR;
 800085a:	2301      	movs	r3, #1
 800085c:	e006      	b.n	800086c <UI_parse_message+0x68>
 for(int i=0;i<UI_MSG_NUM_OF_FUNCTIONS;i++)
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	3301      	adds	r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2b03      	cmp	r3, #3
 8000868:	ddd9      	ble.n	800081e <UI_parse_message+0x1a>
		}

 }
 return UI_F_ERR;
 800086a:	2301      	movs	r3, #1
}
 800086c:	4618      	mov	r0, r3
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	bd90      	pop	{r4, r7, pc}
 8000874:	08016510 	.word	0x08016510
 8000878:	200003a4 	.word	0x200003a4
 800087c:	20000394 	.word	0x20000394

08000880 <UI_messages_init>:

void UI_messages_init(UI_typedef* UI_obj)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	UI_functions[UI_MSG_SET] = UI_MSG_SET_f;
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <UI_messages_init+0x44>)
 800088a:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <UI_messages_init+0x48>)
 800088c:	601a      	str	r2, [r3, #0]
	UI_functions[UI_MSG_SHOW] = UI_MSG_SHOW_f;
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <UI_messages_init+0x44>)
 8000890:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <UI_messages_init+0x4c>)
 8000892:	605a      	str	r2, [r3, #4]
	UI_functions[UI_MSG_RESET] = UI_MSG_RESET_f;
 8000894:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <UI_messages_init+0x44>)
 8000896:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <UI_messages_init+0x50>)
 8000898:	609a      	str	r2, [r3, #8]
	UI_functions[UI_MSG_HELP] = UI_MSG_HELP_f;
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <UI_messages_init+0x44>)
 800089c:	4a0d      	ldr	r2, [pc, #52]	; (80008d4 <UI_messages_init+0x54>)
 800089e:	60da      	str	r2, [r3, #12]

	UI_messages_strings[UI_MSG_SET] = "set";
 80008a0:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <UI_messages_init+0x58>)
 80008a2:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <UI_messages_init+0x5c>)
 80008a4:	601a      	str	r2, [r3, #0]
	UI_messages_strings[UI_MSG_SHOW] = "show";
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <UI_messages_init+0x58>)
 80008a8:	4a0d      	ldr	r2, [pc, #52]	; (80008e0 <UI_messages_init+0x60>)
 80008aa:	605a      	str	r2, [r3, #4]
	UI_messages_strings[UI_MSG_RESET] = "reset";
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <UI_messages_init+0x58>)
 80008ae:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <UI_messages_init+0x64>)
 80008b0:	609a      	str	r2, [r3, #8]
	UI_messages_strings[UI_MSG_HELP] = "help";
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <UI_messages_init+0x58>)
 80008b4:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <UI_messages_init+0x68>)
 80008b6:	60da      	str	r2, [r3, #12]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	20000394 	.word	0x20000394
 80008c8:	08000c09 	.word	0x08000c09
 80008cc:	080009b5 	.word	0x080009b5
 80008d0:	0800091d 	.word	0x0800091d
 80008d4:	080008ed 	.word	0x080008ed
 80008d8:	200003a4 	.word	0x200003a4
 80008dc:	08016514 	.word	0x08016514
 80008e0:	08016518 	.word	0x08016518
 80008e4:	08016520 	.word	0x08016520
 80008e8:	08016528 	.word	0x08016528

080008ec <UI_MSG_HELP_f>:

int UI_MSG_HELP_f(UI_typedef* UI_obj,uint8_t* msg)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
	char * pch;
	memory_region_pointer ptr;

	pch = strtok (NULL," ");//subcomand
 80008f6:	4908      	ldr	r1, [pc, #32]	; (8000918 <UI_MSG_HELP_f+0x2c>)
 80008f8:	2000      	movs	r0, #0
 80008fa:	f013 fe6f 	bl	80145dc <strtok>
 80008fe:	6178      	str	r0, [r7, #20]
	osMessagePut(UI_obj->events_q,UI_EVNT_HELP,1);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	2201      	movs	r2, #1
 8000906:	2103      	movs	r1, #3
 8000908:	4618      	mov	r0, r3
 800090a:	f010 fb8f 	bl	801102c <osMessagePut>
	return UI_F_OK;
 800090e:	2300      	movs	r3, #0
}
 8000910:	4618      	mov	r0, r3
 8000912:	3718      	adds	r7, #24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	08016510 	.word	0x08016510

0800091c <UI_MSG_RESET_f>:

int UI_MSG_RESET_f(UI_typedef* UI_obj,uint8_t* msg)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
	char * pch;
	memory_region_pointer ptr;

	pch = strtok (NULL," ");//subcomand
 8000926:	491f      	ldr	r1, [pc, #124]	; (80009a4 <UI_MSG_RESET_f+0x88>)
 8000928:	2000      	movs	r0, #0
 800092a:	f013 fe57 	bl	80145dc <strtok>
 800092e:	6178      	str	r0, [r7, #20]
	if(strcmp(pch,"settings")==0){
 8000930:	491d      	ldr	r1, [pc, #116]	; (80009a8 <UI_MSG_RESET_f+0x8c>)
 8000932:	6978      	ldr	r0, [r7, #20]
 8000934:	f7ff fc4c 	bl	80001d0 <strcmp>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d126      	bne.n	800098c <UI_MSG_RESET_f+0x70>
		icListen.settings->wav_sample_rate=ICLISTEN_DEFAULT_WAV_SAMPLE_RATE;
 800093e:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <UI_MSG_RESET_f+0x90>)
 8000940:	6a1b      	ldr	r3, [r3, #32]
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]
 8000946:	2200      	movs	r2, #0
 8000948:	f042 027d 	orr.w	r2, r2, #125	; 0x7d
 800094c:	705a      	strb	r2, [r3, #1]
 800094e:	2200      	movs	r2, #0
 8000950:	709a      	strb	r2, [r3, #2]
 8000952:	2200      	movs	r2, #0
 8000954:	70da      	strb	r2, [r3, #3]
		icListen.settings->wav_sample_bit_depth=ICLISTEN_DEFAULT_WAV_SAMPLE_BIT_DEPTH;
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <UI_MSG_RESET_f+0x90>)
 8000958:	6a1b      	ldr	r3, [r3, #32]
 800095a:	2200      	movs	r2, #0
 800095c:	f042 0218 	orr.w	r2, r2, #24
 8000960:	711a      	strb	r2, [r3, #4]
 8000962:	2200      	movs	r2, #0
 8000964:	715a      	strb	r2, [r3, #5]
 8000966:	2200      	movs	r2, #0
 8000968:	719a      	strb	r2, [r3, #6]
 800096a:	2200      	movs	r2, #0
 800096c:	71da      	strb	r2, [r3, #7]
		icListen.settings->file_duration=ICLISTEN_DEFAULT_FILE_DURATION;
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <UI_MSG_RESET_f+0x90>)
 8000970:	6a1b      	ldr	r3, [r3, #32]
 8000972:	2200      	movs	r2, #0
 8000974:	f042 0201 	orr.w	r2, r2, #1
 8000978:	721a      	strb	r2, [r3, #8]
 800097a:	2200      	movs	r2, #0
 800097c:	725a      	strb	r2, [r3, #9]
 800097e:	2200      	movs	r2, #0
 8000980:	729a      	strb	r2, [r3, #10]
 8000982:	2200      	movs	r2, #0
 8000984:	72da      	strb	r2, [r3, #11]
		mcu_flash_save(&mcu_flash);
 8000986:	480a      	ldr	r0, [pc, #40]	; (80009b0 <UI_MSG_RESET_f+0x94>)
 8000988:	f001 f904 	bl	8001b94 <mcu_flash_save>
	}
	osMessagePut(UI_obj->events_q,UI_EVNT_RESET,1);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	2201      	movs	r2, #1
 8000992:	2102      	movs	r1, #2
 8000994:	4618      	mov	r0, r3
 8000996:	f010 fb49 	bl	801102c <osMessagePut>
	return UI_F_OK;
 800099a:	2300      	movs	r3, #0
}
 800099c:	4618      	mov	r0, r3
 800099e:	3718      	adds	r7, #24
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	08016510 	.word	0x08016510
 80009a8:	08016530 	.word	0x08016530
 80009ac:	20000800 	.word	0x20000800
 80009b0:	20000dcc 	.word	0x20000dcc

080009b4 <UI_MSG_SHOW_f>:

int UI_MSG_SHOW_f(UI_typedef* UI_obj,uint8_t* msg)
{
 80009b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009b6:	b09d      	sub	sp, #116	; 0x74
 80009b8:	af06      	add	r7, sp, #24
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
	char * pch;

	pch = strtok (NULL," ");//subcomand
 80009be:	4983      	ldr	r1, [pc, #524]	; (8000bcc <UI_MSG_SHOW_f+0x218>)
 80009c0:	2000      	movs	r0, #0
 80009c2:	f013 fe0b 	bl	80145dc <strtok>
 80009c6:	6538      	str	r0, [r7, #80]	; 0x50
	RTC_DateTypeDef date;

	time_t timestamp;
	struct tm currTime;

	if(strcmp(pch,"sensor")==0){
 80009c8:	4981      	ldr	r1, [pc, #516]	; (8000bd0 <UI_MSG_SHOW_f+0x21c>)
 80009ca:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80009cc:	f7ff fc00 	bl	80001d0 <strcmp>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d12e      	bne.n	8000a34 <UI_MSG_SHOW_f+0x80>
		sprintf(temp_array,"Device type: %d\rSerial num: %d\rFW version: %s\rBuild date: %s\rStatus: %d\rFile duration: %d\rWAV sample depth: %d\rWAV sample rate: %d\r",icListen.device_type,icListen.serial_number,icListen.firmware_version,icListen.build_date,icListen.status,icListen.settings->file_duration,icListen.settings->wav_sample_bit_depth,icListen.settings->wav_sample_rate);
 80009d6:	4b7f      	ldr	r3, [pc, #508]	; (8000bd4 <UI_MSG_SHOW_f+0x220>)
 80009d8:	7f1b      	ldrb	r3, [r3, #28]
 80009da:	461c      	mov	r4, r3
 80009dc:	4b7d      	ldr	r3, [pc, #500]	; (8000bd4 <UI_MSG_SHOW_f+0x220>)
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	461d      	mov	r5, r3
 80009e2:	4b7c      	ldr	r3, [pc, #496]	; (8000bd4 <UI_MSG_SHOW_f+0x220>)
 80009e4:	7f5b      	ldrb	r3, [r3, #29]
 80009e6:	4618      	mov	r0, r3
 80009e8:	4b7a      	ldr	r3, [pc, #488]	; (8000bd4 <UI_MSG_SHOW_f+0x220>)
 80009ea:	6a1b      	ldr	r3, [r3, #32]
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	4a79      	ldr	r2, [pc, #484]	; (8000bd4 <UI_MSG_SHOW_f+0x220>)
 80009f0:	6a12      	ldr	r2, [r2, #32]
 80009f2:	6852      	ldr	r2, [r2, #4]
 80009f4:	4977      	ldr	r1, [pc, #476]	; (8000bd4 <UI_MSG_SHOW_f+0x220>)
 80009f6:	6a09      	ldr	r1, [r1, #32]
 80009f8:	6809      	ldr	r1, [r1, #0]
 80009fa:	9105      	str	r1, [sp, #20]
 80009fc:	9204      	str	r2, [sp, #16]
 80009fe:	9303      	str	r3, [sp, #12]
 8000a00:	9002      	str	r0, [sp, #8]
 8000a02:	4b75      	ldr	r3, [pc, #468]	; (8000bd8 <UI_MSG_SHOW_f+0x224>)
 8000a04:	9301      	str	r3, [sp, #4]
 8000a06:	4b75      	ldr	r3, [pc, #468]	; (8000bdc <UI_MSG_SHOW_f+0x228>)
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	462b      	mov	r3, r5
 8000a0c:	4622      	mov	r2, r4
 8000a0e:	4974      	ldr	r1, [pc, #464]	; (8000be0 <UI_MSG_SHOW_f+0x22c>)
 8000a10:	4874      	ldr	r0, [pc, #464]	; (8000be4 <UI_MSG_SHOW_f+0x230>)
 8000a12:	f013 fd7d 	bl	8014510 <siprintf>
		temp_ptr.start_addr=temp_array;
 8000a16:	4b74      	ldr	r3, [pc, #464]	; (8000be8 <UI_MSG_SHOW_f+0x234>)
 8000a18:	4a72      	ldr	r2, [pc, #456]	; (8000be4 <UI_MSG_SHOW_f+0x230>)
 8000a1a:	601a      	str	r2, [r3, #0]
		temp_ptr.size=strlen(temp_array);
 8000a1c:	4871      	ldr	r0, [pc, #452]	; (8000be4 <UI_MSG_SHOW_f+0x230>)
 8000a1e:	f7ff fbe1 	bl	80001e4 <strlen>
 8000a22:	4603      	mov	r3, r0
 8000a24:	4a70      	ldr	r2, [pc, #448]	; (8000be8 <UI_MSG_SHOW_f+0x234>)
 8000a26:	6053      	str	r3, [r2, #4]
		UI_send_msg(UI_obj,UI_CMD_SEND_DATA,&temp_ptr);
 8000a28:	4a6f      	ldr	r2, [pc, #444]	; (8000be8 <UI_MSG_SHOW_f+0x234>)
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f7ff febc 	bl	80007aa <UI_send_msg>
 8000a32:	e0bf      	b.n	8000bb4 <UI_MSG_SHOW_f+0x200>
	}
	else if(strcmp(pch,"storage")==0){
 8000a34:	496d      	ldr	r1, [pc, #436]	; (8000bec <UI_MSG_SHOW_f+0x238>)
 8000a36:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000a38:	f7ff fbca 	bl	80001d0 <strcmp>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d146      	bne.n	8000ad0 <UI_MSG_SHOW_f+0x11c>
		temp_array[0]=0x00;
 8000a42:	4b68      	ldr	r3, [pc, #416]	; (8000be4 <UI_MSG_SHOW_f+0x230>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000a48:	2300      	movs	r3, #0
 8000a4a:	657b      	str	r3, [r7, #84]	; 0x54
 8000a4c:	e02e      	b.n	8000aac <UI_MSG_SHOW_f+0xf8>
		{
		 sprintf(temp_array+strlen(temp_array),"Disk: %d\rStatus: %d\rSize: %d KB\rFree space: %d KB\r",i,microsd_storage.disks[i].status,microsd_storage.disks[i].size,microsd_storage.disks[i].free_space);
 8000a4e:	4865      	ldr	r0, [pc, #404]	; (8000be4 <UI_MSG_SHOW_f+0x230>)
 8000a50:	f7ff fbc8 	bl	80001e4 <strlen>
 8000a54:	4603      	mov	r3, r0
 8000a56:	4a63      	ldr	r2, [pc, #396]	; (8000be4 <UI_MSG_SHOW_f+0x230>)
 8000a58:	1898      	adds	r0, r3, r2
 8000a5a:	4a65      	ldr	r2, [pc, #404]	; (8000bf0 <UI_MSG_SHOW_f+0x23c>)
 8000a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a5e:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000a62:	fb01 f303 	mul.w	r3, r1, r3
 8000a66:	4413      	add	r3, r2
 8000a68:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	461d      	mov	r5, r3
 8000a70:	4a5f      	ldr	r2, [pc, #380]	; (8000bf0 <UI_MSG_SHOW_f+0x23c>)
 8000a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a74:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000a78:	fb01 f303 	mul.w	r3, r1, r3
 8000a7c:	4413      	add	r3, r2
 8000a7e:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	495a      	ldr	r1, [pc, #360]	; (8000bf0 <UI_MSG_SHOW_f+0x23c>)
 8000a86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a88:	f44f 7411 	mov.w	r4, #580	; 0x244
 8000a8c:	fb04 f202 	mul.w	r2, r4, r2
 8000a90:	440a      	add	r2, r1
 8000a92:	f502 7210 	add.w	r2, r2, #576	; 0x240
 8000a96:	6812      	ldr	r2, [r2, #0]
 8000a98:	9201      	str	r2, [sp, #4]
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	462b      	mov	r3, r5
 8000a9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000aa0:	4954      	ldr	r1, [pc, #336]	; (8000bf4 <UI_MSG_SHOW_f+0x240>)
 8000aa2:	f013 fd35 	bl	8014510 <siprintf>
		for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	657b      	str	r3, [r7, #84]	; 0x54
 8000aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000aae:	2b03      	cmp	r3, #3
 8000ab0:	ddcd      	ble.n	8000a4e <UI_MSG_SHOW_f+0x9a>
		}
		temp_ptr.start_addr=temp_array;
 8000ab2:	4b4d      	ldr	r3, [pc, #308]	; (8000be8 <UI_MSG_SHOW_f+0x234>)
 8000ab4:	4a4b      	ldr	r2, [pc, #300]	; (8000be4 <UI_MSG_SHOW_f+0x230>)
 8000ab6:	601a      	str	r2, [r3, #0]
		temp_ptr.size=strlen(temp_array);
 8000ab8:	484a      	ldr	r0, [pc, #296]	; (8000be4 <UI_MSG_SHOW_f+0x230>)
 8000aba:	f7ff fb93 	bl	80001e4 <strlen>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	4a49      	ldr	r2, [pc, #292]	; (8000be8 <UI_MSG_SHOW_f+0x234>)
 8000ac2:	6053      	str	r3, [r2, #4]
		UI_send_msg(UI_obj,UI_CMD_SEND_DATA,&temp_ptr);
 8000ac4:	4a48      	ldr	r2, [pc, #288]	; (8000be8 <UI_MSG_SHOW_f+0x234>)
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff fe6e 	bl	80007aa <UI_send_msg>
 8000ace:	e071      	b.n	8000bb4 <UI_MSG_SHOW_f+0x200>
	}
	else if(strcmp(pch,"clock")==0){
 8000ad0:	4949      	ldr	r1, [pc, #292]	; (8000bf8 <UI_MSG_SHOW_f+0x244>)
 8000ad2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000ad4:	f7ff fb7c 	bl	80001d0 <strcmp>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d158      	bne.n	8000b90 <UI_MSG_SHOW_f+0x1dc>
		temp_array[0]=0x00;
 8000ade:	4b41      	ldr	r3, [pc, #260]	; (8000be4 <UI_MSG_SHOW_f+0x230>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
		HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000ae4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ae8:	2200      	movs	r2, #0
 8000aea:	4619      	mov	r1, r3
 8000aec:	4843      	ldr	r0, [pc, #268]	; (8000bfc <UI_MSG_SHOW_f+0x248>)
 8000aee:	f005 facb 	bl	8006088 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8000af2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000af6:	2200      	movs	r2, #0
 8000af8:	4619      	mov	r1, r3
 8000afa:	4840      	ldr	r0, [pc, #256]	; (8000bfc <UI_MSG_SHOW_f+0x248>)
 8000afc:	f005 fba6 	bl	800624c <HAL_RTC_GetDate>
		currTime.tm_hour=time.Hours;
 8000b00:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000b04:	617b      	str	r3, [r7, #20]
		currTime.tm_min=time.Minutes;
 8000b06:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000b0a:	613b      	str	r3, [r7, #16]
		currTime.tm_sec=time.Seconds;
 8000b0c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000b10:	60fb      	str	r3, [r7, #12]
		currTime.tm_mday=date.Date;
 8000b12:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000b16:	61bb      	str	r3, [r7, #24]
		currTime.tm_mon=date.Month-1;
 8000b18:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000b1c:	3b01      	subs	r3, #1
 8000b1e:	61fb      	str	r3, [r7, #28]
		currTime.tm_year=(2000+date.Year)-1900;
 8000b20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b24:	3364      	adds	r3, #100	; 0x64
 8000b26:	623b      	str	r3, [r7, #32]
		timestamp=mktime(&currTime);
 8000b28:	f107 030c 	add.w	r3, r7, #12
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f013 f9fb 	bl	8013f28 <mktime>
 8000b32:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
        sprintf(temp_array,"Hours: %d Minutes: %d Seconds: %d\rDay: %d Month: %d Year: %d Unix:%d\r",time.Hours,time.Minutes,time.Seconds,date.Date,date.Month,date.Year,(uint32_t)timestamp);
 8000b36:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000b3a:	461d      	mov	r5, r3
 8000b3c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000b40:	461e      	mov	r6, r3
 8000b42:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000b46:	461a      	mov	r2, r3
 8000b48:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000b52:	4618      	mov	r0, r3
 8000b54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b58:	461c      	mov	r4, r3
 8000b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b5c:	9304      	str	r3, [sp, #16]
 8000b5e:	9403      	str	r4, [sp, #12]
 8000b60:	9002      	str	r0, [sp, #8]
 8000b62:	9101      	str	r1, [sp, #4]
 8000b64:	9200      	str	r2, [sp, #0]
 8000b66:	4633      	mov	r3, r6
 8000b68:	462a      	mov	r2, r5
 8000b6a:	4925      	ldr	r1, [pc, #148]	; (8000c00 <UI_MSG_SHOW_f+0x24c>)
 8000b6c:	481d      	ldr	r0, [pc, #116]	; (8000be4 <UI_MSG_SHOW_f+0x230>)
 8000b6e:	f013 fccf 	bl	8014510 <siprintf>
		temp_ptr.start_addr=temp_array;
 8000b72:	4b1d      	ldr	r3, [pc, #116]	; (8000be8 <UI_MSG_SHOW_f+0x234>)
 8000b74:	4a1b      	ldr	r2, [pc, #108]	; (8000be4 <UI_MSG_SHOW_f+0x230>)
 8000b76:	601a      	str	r2, [r3, #0]
		temp_ptr.size=strlen(temp_array);
 8000b78:	481a      	ldr	r0, [pc, #104]	; (8000be4 <UI_MSG_SHOW_f+0x230>)
 8000b7a:	f7ff fb33 	bl	80001e4 <strlen>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	4a19      	ldr	r2, [pc, #100]	; (8000be8 <UI_MSG_SHOW_f+0x234>)
 8000b82:	6053      	str	r3, [r2, #4]
		UI_send_msg(UI_obj,UI_CMD_SEND_DATA,&temp_ptr);
 8000b84:	4a18      	ldr	r2, [pc, #96]	; (8000be8 <UI_MSG_SHOW_f+0x234>)
 8000b86:	2101      	movs	r1, #1
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff fe0e 	bl	80007aa <UI_send_msg>
 8000b8e:	e011      	b.n	8000bb4 <UI_MSG_SHOW_f+0x200>
	}
	else{
		sprintf(temp_array,"settings\rsensor\rstorage\r");
 8000b90:	491c      	ldr	r1, [pc, #112]	; (8000c04 <UI_MSG_SHOW_f+0x250>)
 8000b92:	4814      	ldr	r0, [pc, #80]	; (8000be4 <UI_MSG_SHOW_f+0x230>)
 8000b94:	f013 fcbc 	bl	8014510 <siprintf>
		temp_ptr.start_addr=temp_array;
 8000b98:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <UI_MSG_SHOW_f+0x234>)
 8000b9a:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <UI_MSG_SHOW_f+0x230>)
 8000b9c:	601a      	str	r2, [r3, #0]
		temp_ptr.size=strlen(temp_array);
 8000b9e:	4811      	ldr	r0, [pc, #68]	; (8000be4 <UI_MSG_SHOW_f+0x230>)
 8000ba0:	f7ff fb20 	bl	80001e4 <strlen>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	4a10      	ldr	r2, [pc, #64]	; (8000be8 <UI_MSG_SHOW_f+0x234>)
 8000ba8:	6053      	str	r3, [r2, #4]
		UI_send_msg(UI_obj,UI_CMD_SEND_DATA,&temp_ptr);
 8000baa:	4a0f      	ldr	r2, [pc, #60]	; (8000be8 <UI_MSG_SHOW_f+0x234>)
 8000bac:	2101      	movs	r1, #1
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff fdfb 	bl	80007aa <UI_send_msg>
	}
	osMessagePut(UI_obj->events_q,UI_EVNT_SHOW,1);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2101      	movs	r1, #1
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f010 fa35 	bl	801102c <osMessagePut>
	return UI_F_OK;
 8000bc2:	2300      	movs	r3, #0
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	375c      	adds	r7, #92	; 0x5c
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bcc:	08016510 	.word	0x08016510
 8000bd0:	0801653c 	.word	0x0801653c
 8000bd4:	20000800 	.word	0x20000800
 8000bd8:	2000080a 	.word	0x2000080a
 8000bdc:	20000802 	.word	0x20000802
 8000be0:	08016544 	.word	0x08016544
 8000be4:	200003bc 	.word	0x200003bc
 8000be8:	200003b4 	.word	0x200003b4
 8000bec:	080165c8 	.word	0x080165c8
 8000bf0:	20000dec 	.word	0x20000dec
 8000bf4:	080165d0 	.word	0x080165d0
 8000bf8:	08016604 	.word	0x08016604
 8000bfc:	2000082c 	.word	0x2000082c
 8000c00:	0801660c 	.word	0x0801660c
 8000c04:	08016654 	.word	0x08016654

08000c08 <UI_MSG_SET_f>:

int UI_MSG_SET_f(UI_typedef* UI_obj,uint8_t* msg)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	; 0x28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
	char * pch;
	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;

	pch = strtok (NULL," ");//subcomand
 8000c12:	4935      	ldr	r1, [pc, #212]	; (8000ce8 <UI_MSG_SET_f+0xe0>)
 8000c14:	2000      	movs	r0, #0
 8000c16:	f013 fce1 	bl	80145dc <strtok>
 8000c1a:	6278      	str	r0, [r7, #36]	; 0x24
	if(strcmp(pch,"clock")==0){
 8000c1c:	4933      	ldr	r1, [pc, #204]	; (8000cec <UI_MSG_SET_f+0xe4>)
 8000c1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c20:	f7ff fad6 	bl	80001d0 <strcmp>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d151      	bne.n	8000cce <UI_MSG_SET_f+0xc6>
		pch = strtok (NULL,"-");//seconds
 8000c2a:	4931      	ldr	r1, [pc, #196]	; (8000cf0 <UI_MSG_SET_f+0xe8>)
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f013 fcd5 	bl	80145dc <strtok>
 8000c32:	6278      	str	r0, [r7, #36]	; 0x24
		time.Seconds=atol(pch);
 8000c34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c36:	f012 ff4f 	bl	8013ad8 <atol>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	74bb      	strb	r3, [r7, #18]
		pch = strtok (NULL,"-");//minutes
 8000c40:	492b      	ldr	r1, [pc, #172]	; (8000cf0 <UI_MSG_SET_f+0xe8>)
 8000c42:	2000      	movs	r0, #0
 8000c44:	f013 fcca 	bl	80145dc <strtok>
 8000c48:	6278      	str	r0, [r7, #36]	; 0x24
		time.Minutes=atol(pch);
 8000c4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c4c:	f012 ff44 	bl	8013ad8 <atol>
 8000c50:	4603      	mov	r3, r0
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	747b      	strb	r3, [r7, #17]
		pch = strtok (NULL," ");//hours
 8000c56:	4924      	ldr	r1, [pc, #144]	; (8000ce8 <UI_MSG_SET_f+0xe0>)
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f013 fcbf 	bl	80145dc <strtok>
 8000c5e:	6278      	str	r0, [r7, #36]	; 0x24
		time.Hours=atol(pch);
 8000c60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c62:	f012 ff39 	bl	8013ad8 <atol>
 8000c66:	4603      	mov	r3, r0
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	743b      	strb	r3, [r7, #16]
		pch = strtok (NULL,"-");//day
 8000c6c:	4920      	ldr	r1, [pc, #128]	; (8000cf0 <UI_MSG_SET_f+0xe8>)
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f013 fcb4 	bl	80145dc <strtok>
 8000c74:	6278      	str	r0, [r7, #36]	; 0x24
		date.Date=atol(pch);
 8000c76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c78:	f012 ff2e 	bl	8013ad8 <atol>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	73bb      	strb	r3, [r7, #14]
		pch = strtok (NULL,"-");//month
 8000c82:	491b      	ldr	r1, [pc, #108]	; (8000cf0 <UI_MSG_SET_f+0xe8>)
 8000c84:	2000      	movs	r0, #0
 8000c86:	f013 fca9 	bl	80145dc <strtok>
 8000c8a:	6278      	str	r0, [r7, #36]	; 0x24
		date.Month=atol(pch);
 8000c8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c8e:	f012 ff23 	bl	8013ad8 <atol>
 8000c92:	4603      	mov	r3, r0
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	737b      	strb	r3, [r7, #13]
		pch = strtok (NULL," ");//year
 8000c98:	4913      	ldr	r1, [pc, #76]	; (8000ce8 <UI_MSG_SET_f+0xe0>)
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f013 fc9e 	bl	80145dc <strtok>
 8000ca0:	6278      	str	r0, [r7, #36]	; 0x24
		date.Year=atol(pch);
 8000ca2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ca4:	f012 ff18 	bl	8013ad8 <atol>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	73fb      	strb	r3, [r7, #15]
		date.WeekDay=RTC_WEEKDAY_MONDAY;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	733b      	strb	r3, [r7, #12]
		HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000cb2:	f107 0310 	add.w	r3, r7, #16
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	4619      	mov	r1, r3
 8000cba:	480e      	ldr	r0, [pc, #56]	; (8000cf4 <UI_MSG_SET_f+0xec>)
 8000cbc:	f005 f94a 	bl	8005f54 <HAL_RTC_SetTime>
		HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	480a      	ldr	r0, [pc, #40]	; (8000cf4 <UI_MSG_SET_f+0xec>)
 8000cca:	f005 fa3b 	bl	8006144 <HAL_RTC_SetDate>
	}

	osMessagePut(UI_obj->events_q,UI_EVNT_SET,1);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f010 f9a8 	bl	801102c <osMessagePut>
	return UI_F_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3728      	adds	r7, #40	; 0x28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	08016510 	.word	0x08016510
 8000cec:	08016604 	.word	0x08016604
 8000cf0:	08016670 	.word	0x08016670
 8000cf4:	2000082c 	.word	0x2000082c

08000cf8 <crc16_arc_update>:
};



uint16_t crc16_arc_update( char data, uint16_t accum )
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	460a      	mov	r2, r1
 8000d02:	71fb      	strb	r3, [r7, #7]
 8000d04:	4613      	mov	r3, r2
 8000d06:	80bb      	strh	r3, [r7, #4]
  unsigned char comb_value;
  comb_value = ( accum&0x00ff ) ^ (unsigned char)data;
 8000d08:	88bb      	ldrh	r3, [r7, #4]
 8000d0a:	b25a      	sxtb	r2, r3
 8000d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d10:	4053      	eors	r3, r2
 8000d12:	b25b      	sxtb	r3, r3
 8000d14:	73fb      	strb	r3, [r7, #15]
  accum = ( accum >> 8 ) ^ crc16_arc_table[ comb_value ];
 8000d16:	88bb      	ldrh	r3, [r7, #4]
 8000d18:	0a1b      	lsrs	r3, r3, #8
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
 8000d1e:	4906      	ldr	r1, [pc, #24]	; (8000d38 <crc16_arc_update+0x40>)
 8000d20:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d24:	4053      	eors	r3, r2
 8000d26:	80bb      	strh	r3, [r7, #4]
  return ( accum );
 8000d28:	88bb      	ldrh	r3, [r7, #4]
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000000 	.word	0x20000000

08000d3c <get_crc16_arc>:

uint16_t get_crc16_arc( uint8_t* data,uint16_t length )
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	460b      	mov	r3, r1
 8000d46:	807b      	strh	r3, [r7, #2]
  uint16_t accm=0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	81fb      	strh	r3, [r7, #14]

  for(int i=0;i<length;i++)
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	e00d      	b.n	8000d6e <get_crc16_arc+0x32>
  {
    accm=crc16_arc_update(data[i], accm);
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	4413      	add	r3, r2
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	89fa      	ldrh	r2, [r7, #14]
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ffca 	bl	8000cf8 <crc16_arc_update>
 8000d64:	4603      	mov	r3, r0
 8000d66:	81fb      	strh	r3, [r7, #14]
  for(int i=0;i<length;i++)
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	887b      	ldrh	r3, [r7, #2]
 8000d70:	68ba      	ldr	r2, [r7, #8]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	dbed      	blt.n	8000d52 <get_crc16_arc+0x16>
  }

  return accm;
 8000d76:	89fb      	ldrh	r3, [r7, #14]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <sd_storage_disk_init>:

extern ss_pp sd_cards_ss[4];
extern UART_HandleTypeDef huart1;

F_RES sd_storage_disk_init(FATFS* fs,char* path)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
	if(f_mount(fs,path,1)==FR_OK) return F_OK;
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	6839      	ldr	r1, [r7, #0]
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f00e fc9e 	bl	800f6d0 <f_mount>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d101      	bne.n	8000d9e <sd_storage_disk_init+0x1e>
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	e000      	b.n	8000da0 <sd_storage_disk_init+0x20>
	else return F_ERR;
 8000d9e:	2301      	movs	r3, #1
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <sd_storage_init>:
F_RES sd_storage_init(sd_storage_t* self_object)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  char tt[10];
  FRESULT res;
  DWORD fre_clust, fre_sect, tot_sect;
  FATFS*  fs;

  MX_FATFS_Init();
 8000db0:	f008 fb86 	bl	80094c0 <MX_FATFS_Init>

  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
 8000db8:	e078      	b.n	8000eac <sd_storage_init+0x104>
  {
	  sprintf(tt,"%d:",i);
 8000dba:	f107 0310 	add.w	r3, r7, #16
 8000dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dc0:	493e      	ldr	r1, [pc, #248]	; (8000ebc <sd_storage_init+0x114>)
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f013 fba4 	bl	8014510 <siprintf>
	  if(sd_storage_disk_init(&self_object->disks[i].fs,tt)==F_OK){
 8000dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dca:	f44f 7211 	mov.w	r2, #580	; 0x244
 8000dce:	fb02 f303 	mul.w	r3, r2, r3
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	f107 0210 	add.w	r2, r7, #16
 8000dda:	4611      	mov	r1, r2
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ffcf 	bl	8000d80 <sd_storage_disk_init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d153      	bne.n	8000e90 <sd_storage_init+0xe8>
		  self_object->disks[i].status=DISK_PRESENT;
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dec:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000df0:	fb01 f303 	mul.w	r3, r1, r3
 8000df4:	4413      	add	r3, r2
 8000df6:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	701a      	strb	r2, [r3, #0]
  		  if(f_getfree(tt, &fre_clust, &fs)==FR_OK){
 8000dfe:	f107 0208 	add.w	r2, r7, #8
 8000e02:	f107 010c 	add.w	r1, r7, #12
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f00f fe2f 	bl	8010a6e <f_getfree>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d147      	bne.n	8000ea6 <sd_storage_init+0xfe>
		    tot_sect = (self_object->disks[i].fs.n_fatent - 2) * self_object->disks[i].fs.csize;
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1a:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000e1e:	fb01 f303 	mul.w	r3, r1, r3
 8000e22:	4413      	add	r3, r2
 8000e24:	331c      	adds	r3, #28
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	3b02      	subs	r3, #2
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e2e:	f44f 7011 	mov.w	r0, #580	; 0x244
 8000e32:	fb00 f202 	mul.w	r2, r0, r2
 8000e36:	440a      	add	r2, r1
 8000e38:	320a      	adds	r2, #10
 8000e3a:	8812      	ldrh	r2, [r2, #0]
 8000e3c:	fb02 f303 	mul.w	r3, r2, r3
 8000e40:	623b      	str	r3, [r7, #32]
			fre_sect = fre_clust * self_object->disks[i].fs.csize;
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e46:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000e4a:	fb01 f303 	mul.w	r3, r1, r3
 8000e4e:	4413      	add	r3, r2
 8000e50:	330a      	adds	r3, #10
 8000e52:	881b      	ldrh	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	fb02 f303 	mul.w	r3, r2, r3
 8000e5c:	61fb      	str	r3, [r7, #28]
			self_object->disks[i].size=tot_sect/2;
 8000e5e:	6a3b      	ldr	r3, [r7, #32]
 8000e60:	085a      	lsrs	r2, r3, #1
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e66:	f44f 7011 	mov.w	r0, #580	; 0x244
 8000e6a:	fb00 f303 	mul.w	r3, r0, r3
 8000e6e:	440b      	add	r3, r1
 8000e70:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000e74:	601a      	str	r2, [r3, #0]
			self_object->disks[i].free_space=fre_sect/2;
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	085a      	lsrs	r2, r3, #1
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7e:	f44f 7011 	mov.w	r0, #580	; 0x244
 8000e82:	fb00 f303 	mul.w	r3, r0, r3
 8000e86:	440b      	add	r3, r1
 8000e88:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	e00a      	b.n	8000ea6 <sd_storage_init+0xfe>
		  }
	  }
	  else
	  {
		 self_object->disks[i].status=DISK_ABSENT;
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e94:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000e98:	fb01 f303 	mul.w	r3, r1, r3
 8000e9c:	4413      	add	r3, r2
 8000e9e:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8000eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	dd83      	ble.n	8000dba <sd_storage_init+0x12>
	  }
  }
  return F_OK;
 8000eb2:	2300      	movs	r3, #0
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3728      	adds	r7, #40	; 0x28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	08016674 	.word	0x08016674

08000ec0 <sd_storage_link_ss>:

F_RES sd_storage_link_ss(sd_storage_t* self_object,uint8_t disk_num, uint16_t sd_ss_pin,GPIO_TypeDef* sd_ss_port)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	460b      	mov	r3, r1
 8000ecc:	72fb      	strb	r3, [r7, #11]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	813b      	strh	r3, [r7, #8]
	  sd_cards_ss[disk_num].sd_ss_pin=sd_ss_pin;
 8000ed2:	7afb      	ldrb	r3, [r7, #11]
 8000ed4:	4908      	ldr	r1, [pc, #32]	; (8000ef8 <sd_storage_link_ss+0x38>)
 8000ed6:	893a      	ldrh	r2, [r7, #8]
 8000ed8:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
	  sd_cards_ss[disk_num].sd_ss_port=sd_ss_port;
 8000edc:	7afb      	ldrb	r3, [r7, #11]
 8000ede:	4a06      	ldr	r2, [pc, #24]	; (8000ef8 <sd_storage_link_ss+0x38>)
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	4413      	add	r3, r2
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	605a      	str	r2, [r3, #4]
	  return F_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20001ac8 	.word	0x20001ac8

08000efc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4a07      	ldr	r2, [pc, #28]	; (8000f28 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	4a06      	ldr	r2, [pc, #24]	; (8000f2c <vApplicationGetIdleTaskMemory+0x30>)
 8000f12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2280      	movs	r2, #128	; 0x80
 8000f18:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f1a:	bf00      	nop
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	2000054c 	.word	0x2000054c
 8000f2c:	20000600 	.word	0x20000600

08000f30 <icListen_prepare_collect_msg>:
	msg->basic_hdr.length=sizeof(icListen_setup_full_msg)-4-2;
	msg->crc=get_crc16_arc((uint8_t*)msg,sizeof(icListen_setup_full_msg)-2);
}

void icListen_prepare_collect_msg(icListen_collect_short_mask_msg* msg,uint8_t mask)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	70fb      	strb	r3, [r7, #3]
	msg->basic_hdr.sync=MSG_SYNC;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	222a      	movs	r2, #42	; 0x2a
 8000f40:	701a      	strb	r2, [r3, #0]
    msg->basic_hdr.type=MSG_TYPE_COLLECT_DATA;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2243      	movs	r2, #67	; 0x43
 8000f46:	705a      	strb	r2, [r3, #1]
    msg->mask_hdr.mask=mask;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	78fa      	ldrb	r2, [r7, #3]
 8000f4c:	711a      	strb	r2, [r3, #4]
    msg->basic_hdr.length=1;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	f042 0201 	orr.w	r2, r2, #1
 8000f56:	709a      	strb	r2, [r3, #2]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	70da      	strb	r2, [r3, #3]
	msg->crc=get_crc16_arc((uint8_t*)msg,sizeof(icListen_collect_short_mask_msg)-2);
 8000f5c:	2105      	movs	r1, #5
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff feec 	bl	8000d3c <get_crc16_arc>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f8a3 2005 	strh.w	r2, [r3, #5]
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <icListen_parse_msg>:
	msg->crc=get_crc16_arc((uint8_t*)msg,sizeof(icListen_enquire_device_msg)-2);

}

F_RES icListen_parse_msg(uint8_t* msg,icListen_object_typedef* self_object)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]

	icListen_basic_header* basic_header=(icListen_basic_header*)msg;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	617b      	str	r3, [r7, #20]
	icListen_status_basic_msg* status_msg=(icListen_status_basic_msg*)msg;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	613b      	str	r3, [r7, #16]

	uint16_t crc_msg=*(uint16_t*)(msg+basic_header->length+4);
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	885b      	ldrh	r3, [r3, #2]
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	3304      	adds	r3, #4
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	81fb      	strh	r3, [r7, #14]

	if(basic_header->sync==MSG_SYNC){
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b2a      	cmp	r3, #42	; 0x2a
 8000fa0:	d14a      	bne.n	8001038 <icListen_parse_msg+0xc0>

	switch(basic_header->type){
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	785b      	ldrb	r3, [r3, #1]
 8000fa6:	2b43      	cmp	r3, #67	; 0x43
 8000fa8:	d033      	beq.n	8001012 <icListen_parse_msg+0x9a>
 8000faa:	2b45      	cmp	r3, #69	; 0x45
 8000fac:	d146      	bne.n	800103c <icListen_parse_msg+0xc4>
	     case MSG_TYPE_ENQUIRE_DEVICE:
	    	 if(crc_msg==get_crc16_arc(msg,(uint16_t)basic_header->length+4)){
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	885b      	ldrh	r3, [r3, #2]
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	4619      	mov	r1, r3
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff febe 	bl	8000d3c <get_crc16_arc>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	89fb      	ldrh	r3, [r7, #14]
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d121      	bne.n	800100e <icListen_parse_msg+0x96>
		    	  self_object->status=status_msg->status;
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	775a      	strb	r2, [r3, #29]
		    	  memcpy(self_object->build_date,status_msg->build_date,18);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	f103 000a 	add.w	r0, r3, #10
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	330e      	adds	r3, #14
 8000fde:	2212      	movs	r2, #18
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f012 feb3 	bl	8013d4c <memcpy>
		    	  memcpy(self_object->firmware_version,status_msg->firmware_version,8);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	1c98      	adds	r0, r3, #2
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	3306      	adds	r3, #6
 8000fee:	2208      	movs	r2, #8
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f012 feab 	bl	8013d4c <memcpy>
		    	  self_object->serial_number=status_msg->serial_number;
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	889b      	ldrh	r3, [r3, #4]
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	801a      	strh	r2, [r3, #0]
		    	  self_object->device_type=status_msg->device_type;
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	771a      	strb	r2, [r3, #28]
		    	  return F_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	e017      	b.n	800103e <icListen_parse_msg+0xc6>
	    	  }
	    	 else return F_ERR;
 800100e:	2301      	movs	r3, #1
 8001010:	e015      	b.n	800103e <icListen_parse_msg+0xc6>
	     break;
		 case MSG_TYPE_COLLECT_DATA:
		    	  //msg_ptr2.start_addr=msg+sizeof(icListen_basic_header);
			      msg_ptr2.start_addr=msg;
 8001012:	4a0d      	ldr	r2, [pc, #52]	; (8001048 <icListen_parse_msg+0xd0>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6013      	str	r3, [r2, #0]
		    	  msg_ptr2.size=basic_header->length+6;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	885b      	ldrh	r3, [r3, #2]
 800101c:	b29b      	uxth	r3, r3
 800101e:	3306      	adds	r3, #6
 8001020:	461a      	mov	r2, r3
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <icListen_parse_msg+0xd0>)
 8001024:	605a      	str	r2, [r3, #4]
		    	  osMessagePut(storage_wHandle,&msg_ptr2,0);
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <icListen_parse_msg+0xd4>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4907      	ldr	r1, [pc, #28]	; (8001048 <icListen_parse_msg+0xd0>)
 800102c:	2200      	movs	r2, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f00f fffc 	bl	801102c <osMessagePut>
		    	  return F_OK;
 8001034:	2300      	movs	r3, #0
 8001036:	e002      	b.n	800103e <icListen_parse_msg+0xc6>
		 break;
	 };
	}
	else{
		return F_ERR;
 8001038:	2301      	movs	r3, #1
 800103a:	e000      	b.n	800103e <icListen_parse_msg+0xc6>
	}
	return F_ERR;
 800103c:	2301      	movs	r3, #1
}
 800103e:	4618      	mov	r0, r3
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000824 	.word	0x20000824
 800104c:	200009ac 	.word	0x200009ac

08001050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001050:	b5b0      	push	{r4, r5, r7, lr}
 8001052:	b0ac      	sub	sp, #176	; 0xb0
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001056:	f001 fc3f 	bl	80028d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105a:	f000 f8c7 	bl	80011ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105e:	f000 fa57 	bl	8001510 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001062:	f000 f989 	bl	8001378 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001066:	f000 fa09 	bl	800147c <MX_USART1_UART_Init>
  MX_DMA_Init();
 800106a:	f000 fa31 	bl	80014d0 <MX_DMA_Init>
  MX_TIM2_Init();
 800106e:	f000 f9b9 	bl	80013e4 <MX_TIM2_Init>
  MX_RTC_Init();
 8001072:	f000 f927 	bl	80012c4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  UI_init(&user_interface);
 8001076:	484a      	ldr	r0, [pc, #296]	; (80011a0 <main+0x150>)
 8001078:	f7ff fa94 	bl	80005a4 <UI_init>
  HAL_UART_Receive_IT(&UI_UART,&(user_interface.media_rx_byte),1);
 800107c:	2201      	movs	r2, #1
 800107e:	4949      	ldr	r1, [pc, #292]	; (80011a4 <main+0x154>)
 8001080:	4849      	ldr	r0, [pc, #292]	; (80011a8 <main+0x158>)
 8001082:	f006 fb17 	bl	80076b4 <HAL_UART_Receive_IT>

  mcu_flash_init(&mcu_flash,FLASH_SECTOR_11);
 8001086:	210b      	movs	r1, #11
 8001088:	4848      	ldr	r0, [pc, #288]	; (80011ac <main+0x15c>)
 800108a:	f000 fd11 	bl	8001ab0 <mcu_flash_init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of AppliEvent */
  osMessageQDef(AppliEvent, 16, uint16_t);
 800108e:	4b48      	ldr	r3, [pc, #288]	; (80011b0 <main+0x160>)
 8001090:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8001094:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001096:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  AppliEventHandle = osMessageCreate(osMessageQ(AppliEvent), NULL);
 800109a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f00f ff9a 	bl	8010fda <osMessageCreate>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4a42      	ldr	r2, [pc, #264]	; (80011b4 <main+0x164>)
 80010aa:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_rx */
  osMessageQDef(USB_rx, 10, uint32_t);
 80010ac:	4b42      	ldr	r3, [pc, #264]	; (80011b8 <main+0x168>)
 80010ae:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80010b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  USB_rxHandle = osMessageCreate(osMessageQ(USB_rx), NULL);
 80010b8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f00f ff8b 	bl	8010fda <osMessageCreate>
 80010c4:	4603      	mov	r3, r0
 80010c6:	4a3d      	ldr	r2, [pc, #244]	; (80011bc <main+0x16c>)
 80010c8:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_tx */
  osMessageQDef(USB_tx, 10, uint32_t);
 80010ca:	4b3b      	ldr	r3, [pc, #236]	; (80011b8 <main+0x168>)
 80010cc:	f107 0480 	add.w	r4, r7, #128	; 0x80
 80010d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  USB_txHandle = osMessageCreate(osMessageQ(USB_tx), NULL);
 80010d6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f00f ff7c 	bl	8010fda <osMessageCreate>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4a36      	ldr	r2, [pc, #216]	; (80011c0 <main+0x170>)
 80010e6:	6013      	str	r3, [r2, #0]

  /* definition and creation of storage_w */
  osMessageQDef(storage_w, 5, uint32_t);
 80010e8:	4b36      	ldr	r3, [pc, #216]	; (80011c4 <main+0x174>)
 80010ea:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80010ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  storage_wHandle = osMessageCreate(osMessageQ(storage_w), NULL);
 80010f4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f00f ff6d 	bl	8010fda <osMessageCreate>
 8001100:	4603      	mov	r3, r0
 8001102:	4a31      	ldr	r2, [pc, #196]	; (80011c8 <main+0x178>)
 8001104:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8001106:	4b31      	ldr	r3, [pc, #196]	; (80011cc <main+0x17c>)
 8001108:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800110c:	461d      	mov	r5, r3
 800110e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001110:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001112:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001116:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800111a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f00f fefa 	bl	8010f1a <osThreadCreate>
 8001126:	4603      	mov	r3, r0
 8001128:	4a29      	ldr	r2, [pc, #164]	; (80011d0 <main+0x180>)
 800112a:	6013      	str	r3, [r2, #0]

  /* definition and creation of storage_t */
  osThreadDef(storage_t, storage_f, osPriorityNormal, 0, 512);
 800112c:	4b29      	ldr	r3, [pc, #164]	; (80011d4 <main+0x184>)
 800112e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001132:	461d      	mov	r5, r3
 8001134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001138:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800113c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  storage_tHandle = osThreadCreate(osThread(storage_t), NULL);
 8001140:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f00f fee7 	bl	8010f1a <osThreadCreate>
 800114c:	4603      	mov	r3, r0
 800114e:	4a22      	ldr	r2, [pc, #136]	; (80011d8 <main+0x188>)
 8001150:	6013      	str	r3, [r2, #0]

  /* definition and creation of main_t */
  osThreadDef(main_t, main_f, osPriorityNormal, 0, 512);
 8001152:	4b22      	ldr	r3, [pc, #136]	; (80011dc <main+0x18c>)
 8001154:	f107 041c 	add.w	r4, r7, #28
 8001158:	461d      	mov	r5, r3
 800115a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800115c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800115e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001162:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  main_tHandle = osThreadCreate(osThread(main_t), NULL);
 8001166:	f107 031c 	add.w	r3, r7, #28
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f00f fed4 	bl	8010f1a <osThreadCreate>
 8001172:	4603      	mov	r3, r0
 8001174:	4a1a      	ldr	r2, [pc, #104]	; (80011e0 <main+0x190>)
 8001176:	6013      	str	r3, [r2, #0]

  /* definition and creation of uart_t */
  osThreadDef(uart_t, uart_f, osPriorityNormal, 0, 256);
 8001178:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <main+0x194>)
 800117a:	463c      	mov	r4, r7
 800117c:	461d      	mov	r5, r3
 800117e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001180:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001182:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001186:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart_tHandle = osThreadCreate(osThread(uart_t), NULL);
 800118a:	463b      	mov	r3, r7
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f00f fec3 	bl	8010f1a <osThreadCreate>
 8001194:	4603      	mov	r3, r0
 8001196:	4a14      	ldr	r2, [pc, #80]	; (80011e8 <main+0x198>)
 8001198:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800119a:	f00f feb7 	bl	8010f0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800119e:	e7fe      	b.n	800119e <main+0x14e>
 80011a0:	200009b8 	.word	0x200009b8
 80011a4:	200009c4 	.word	0x200009c4
 80011a8:	2000094c 	.word	0x2000094c
 80011ac:	20000dcc 	.word	0x20000dcc
 80011b0:	080166a0 	.word	0x080166a0
 80011b4:	200009a0 	.word	0x200009a0
 80011b8:	080166b0 	.word	0x080166b0
 80011bc:	200009a4 	.word	0x200009a4
 80011c0:	200009a8 	.word	0x200009a8
 80011c4:	080166c0 	.word	0x080166c0
 80011c8:	200009ac 	.word	0x200009ac
 80011cc:	080166d0 	.word	0x080166d0
 80011d0:	20000990 	.word	0x20000990
 80011d4:	080166ec 	.word	0x080166ec
 80011d8:	20000994 	.word	0x20000994
 80011dc:	08016708 	.word	0x08016708
 80011e0:	20000998 	.word	0x20000998
 80011e4:	08016724 	.word	0x08016724
 80011e8:	2000099c 	.word	0x2000099c

080011ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b094      	sub	sp, #80	; 0x50
 80011f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f2:	f107 0320 	add.w	r3, r7, #32
 80011f6:	2230      	movs	r2, #48	; 0x30
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f012 fdb4 	bl	8013d68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001210:	2300      	movs	r3, #0
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	4b29      	ldr	r3, [pc, #164]	; (80012bc <SystemClock_Config+0xd0>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	4a28      	ldr	r2, [pc, #160]	; (80012bc <SystemClock_Config+0xd0>)
 800121a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121e:	6413      	str	r3, [r2, #64]	; 0x40
 8001220:	4b26      	ldr	r3, [pc, #152]	; (80012bc <SystemClock_Config+0xd0>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800122c:	2300      	movs	r3, #0
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <SystemClock_Config+0xd4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a22      	ldr	r2, [pc, #136]	; (80012c0 <SystemClock_Config+0xd4>)
 8001236:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <SystemClock_Config+0xd4>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001248:	2305      	movs	r3, #5
 800124a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800124c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001252:	2301      	movs	r3, #1
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001256:	2302      	movs	r3, #2
 8001258:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800125a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800125e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001260:	230f      	movs	r3, #15
 8001262:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001264:	2390      	movs	r3, #144	; 0x90
 8001266:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001268:	2302      	movs	r3, #2
 800126a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800126c:	2305      	movs	r3, #5
 800126e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001270:	f107 0320 	add.w	r3, r7, #32
 8001274:	4618      	mov	r0, r3
 8001276:	f004 f88b 	bl	8005390 <HAL_RCC_OscConfig>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001280:	f000 fc10 	bl	8001aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001284:	230f      	movs	r3, #15
 8001286:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001288:	2302      	movs	r3, #2
 800128a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001290:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001294:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	2103      	movs	r1, #3
 80012a2:	4618      	mov	r0, r3
 80012a4:	f004 faec 	bl	8005880 <HAL_RCC_ClockConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012ae:	f000 fbf9 	bl	8001aa4 <Error_Handler>
  }
}
 80012b2:	bf00      	nop
 80012b4:	3750      	adds	r7, #80	; 0x50
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40007000 	.word	0x40007000

080012c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80012d8:	2300      	movs	r3, #0
 80012da:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012dc:	4b24      	ldr	r3, [pc, #144]	; (8001370 <MX_RTC_Init+0xac>)
 80012de:	4a25      	ldr	r2, [pc, #148]	; (8001374 <MX_RTC_Init+0xb0>)
 80012e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80012e2:	4b23      	ldr	r3, [pc, #140]	; (8001370 <MX_RTC_Init+0xac>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80012e8:	4b21      	ldr	r3, [pc, #132]	; (8001370 <MX_RTC_Init+0xac>)
 80012ea:	227f      	movs	r2, #127	; 0x7f
 80012ec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80012ee:	4b20      	ldr	r3, [pc, #128]	; (8001370 <MX_RTC_Init+0xac>)
 80012f0:	22ff      	movs	r2, #255	; 0xff
 80012f2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012f4:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <MX_RTC_Init+0xac>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012fa:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <MX_RTC_Init+0xac>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <MX_RTC_Init+0xac>)
 8001302:	2200      	movs	r2, #0
 8001304:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001306:	481a      	ldr	r0, [pc, #104]	; (8001370 <MX_RTC_Init+0xac>)
 8001308:	f004 fdae 	bl	8005e68 <HAL_RTC_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001312:	f000 fbc7 	bl	8001aa4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2200      	movs	r2, #0
 800132e:	4619      	mov	r1, r3
 8001330:	480f      	ldr	r0, [pc, #60]	; (8001370 <MX_RTC_Init+0xac>)
 8001332:	f004 fe0f 	bl	8005f54 <HAL_RTC_SetTime>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800133c:	f000 fbb2 	bl	8001aa4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001340:	2301      	movs	r3, #1
 8001342:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001344:	2301      	movs	r3, #1
 8001346:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001348:	2301      	movs	r3, #1
 800134a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001350:	463b      	mov	r3, r7
 8001352:	2200      	movs	r2, #0
 8001354:	4619      	mov	r1, r3
 8001356:	4806      	ldr	r0, [pc, #24]	; (8001370 <MX_RTC_Init+0xac>)
 8001358:	f004 fef4 	bl	8006144 <HAL_RTC_SetDate>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001362:	f000 fb9f 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	2000082c 	.word	0x2000082c
 8001374:	40002800 	.word	0x40002800

08001378 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <MX_SPI1_Init+0x64>)
 800137e:	4a18      	ldr	r2, [pc, #96]	; (80013e0 <MX_SPI1_Init+0x68>)
 8001380:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <MX_SPI1_Init+0x64>)
 8001384:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001388:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800138a:	4b14      	ldr	r3, [pc, #80]	; (80013dc <MX_SPI1_Init+0x64>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <MX_SPI1_Init+0x64>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <MX_SPI1_Init+0x64>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <MX_SPI1_Init+0x64>)
 800139e:	2200      	movs	r2, #0
 80013a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <MX_SPI1_Init+0x64>)
 80013a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <MX_SPI1_Init+0x64>)
 80013ac:	2208      	movs	r2, #8
 80013ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <MX_SPI1_Init+0x64>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <MX_SPI1_Init+0x64>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013bc:	4b07      	ldr	r3, [pc, #28]	; (80013dc <MX_SPI1_Init+0x64>)
 80013be:	2200      	movs	r2, #0
 80013c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <MX_SPI1_Init+0x64>)
 80013c4:	220a      	movs	r2, #10
 80013c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013c8:	4804      	ldr	r0, [pc, #16]	; (80013dc <MX_SPI1_Init+0x64>)
 80013ca:	f005 f84b 	bl	8006464 <HAL_SPI_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013d4:	f000 fb66 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	2000084c 	.word	0x2000084c
 80013e0:	40013000 	.word	0x40013000

080013e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f8:	463b      	mov	r3, r7
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001400:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <MX_TIM2_Init+0x94>)
 8001402:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001406:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001408:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <MX_TIM2_Init+0x94>)
 800140a:	2200      	movs	r2, #0
 800140c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140e:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <MX_TIM2_Init+0x94>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001414:	4b18      	ldr	r3, [pc, #96]	; (8001478 <MX_TIM2_Init+0x94>)
 8001416:	f04f 32ff 	mov.w	r2, #4294967295
 800141a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141c:	4b16      	ldr	r3, [pc, #88]	; (8001478 <MX_TIM2_Init+0x94>)
 800141e:	2200      	movs	r2, #0
 8001420:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <MX_TIM2_Init+0x94>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001428:	4813      	ldr	r0, [pc, #76]	; (8001478 <MX_TIM2_Init+0x94>)
 800142a:	f005 fc2f 	bl	8006c8c <HAL_TIM_Base_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001434:	f000 fb36 	bl	8001aa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001438:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800143c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800143e:	f107 0308 	add.w	r3, r7, #8
 8001442:	4619      	mov	r1, r3
 8001444:	480c      	ldr	r0, [pc, #48]	; (8001478 <MX_TIM2_Init+0x94>)
 8001446:	f005 fde9 	bl	800701c <HAL_TIM_ConfigClockSource>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001450:	f000 fb28 	bl	8001aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001454:	2300      	movs	r3, #0
 8001456:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800145c:	463b      	mov	r3, r7
 800145e:	4619      	mov	r1, r3
 8001460:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_TIM2_Init+0x94>)
 8001462:	f006 f805 	bl	8007470 <HAL_TIMEx_MasterConfigSynchronization>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800146c:	f000 fb1a 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000904 	.word	0x20000904

0800147c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001480:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <MX_USART1_UART_Init+0x4c>)
 8001482:	4a12      	ldr	r2, [pc, #72]	; (80014cc <MX_USART1_UART_Init+0x50>)
 8001484:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <MX_USART1_UART_Init+0x4c>)
 8001488:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800148c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <MX_USART1_UART_Init+0x4c>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <MX_USART1_UART_Init+0x4c>)
 8001496:	2200      	movs	r2, #0
 8001498:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <MX_USART1_UART_Init+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <MX_USART1_UART_Init+0x4c>)
 80014a2:	220c      	movs	r2, #12
 80014a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <MX_USART1_UART_Init+0x4c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <MX_USART1_UART_Init+0x4c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014b2:	4805      	ldr	r0, [pc, #20]	; (80014c8 <MX_USART1_UART_Init+0x4c>)
 80014b4:	f006 f86c 	bl	8007590 <HAL_UART_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014be:	f000 faf1 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2000094c 	.word	0x2000094c
 80014cc:	40011000 	.word	0x40011000

080014d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <MX_DMA_Init+0x3c>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a0b      	ldr	r2, [pc, #44]	; (800150c <MX_DMA_Init+0x3c>)
 80014e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <MX_DMA_Init+0x3c>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2105      	movs	r1, #5
 80014f6:	203b      	movs	r0, #59	; 0x3b
 80014f8:	f001 fb0c 	bl	8002b14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80014fc:	203b      	movs	r0, #59	; 0x3b
 80014fe:	f001 fb25 	bl	8002b4c <HAL_NVIC_EnableIRQ>

}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800

08001510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	; 0x28
 8001514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
 8001524:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	4b39      	ldr	r3, [pc, #228]	; (8001610 <MX_GPIO_Init+0x100>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a38      	ldr	r2, [pc, #224]	; (8001610 <MX_GPIO_Init+0x100>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b36      	ldr	r3, [pc, #216]	; (8001610 <MX_GPIO_Init+0x100>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	4b32      	ldr	r3, [pc, #200]	; (8001610 <MX_GPIO_Init+0x100>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a31      	ldr	r2, [pc, #196]	; (8001610 <MX_GPIO_Init+0x100>)
 800154c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b2f      	ldr	r3, [pc, #188]	; (8001610 <MX_GPIO_Init+0x100>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <MX_GPIO_Init+0x100>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a2a      	ldr	r2, [pc, #168]	; (8001610 <MX_GPIO_Init+0x100>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b28      	ldr	r3, [pc, #160]	; (8001610 <MX_GPIO_Init+0x100>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	4b24      	ldr	r3, [pc, #144]	; (8001610 <MX_GPIO_Init+0x100>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a23      	ldr	r2, [pc, #140]	; (8001610 <MX_GPIO_Init+0x100>)
 8001584:	f043 0302 	orr.w	r3, r3, #2
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b21      	ldr	r3, [pc, #132]	; (8001610 <MX_GPIO_Init+0x100>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_SD3_GPIO_Port, SS_SD3_Pin, GPIO_PIN_SET);
 8001596:	2201      	movs	r2, #1
 8001598:	2102      	movs	r1, #2
 800159a:	481e      	ldr	r0, [pc, #120]	; (8001614 <MX_GPIO_Init+0x104>)
 800159c:	f002 fad4 	bl	8003b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin, GPIO_PIN_SET);
 80015a0:	2201      	movs	r2, #1
 80015a2:	2186      	movs	r1, #134	; 0x86
 80015a4:	481c      	ldr	r0, [pc, #112]	; (8001618 <MX_GPIO_Init+0x108>)
 80015a6:	f002 facf 	bl	8003b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_VBUS_GPIO_Port, USB_VBUS_Pin, GPIO_PIN_SET);
 80015aa:	2201      	movs	r2, #1
 80015ac:	2101      	movs	r1, #1
 80015ae:	481b      	ldr	r0, [pc, #108]	; (800161c <MX_GPIO_Init+0x10c>)
 80015b0:	f002 faca 	bl	8003b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SS_SD3_Pin */
  GPIO_InitStruct.Pin = SS_SD3_Pin;
 80015b4:	2302      	movs	r3, #2
 80015b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015bc:	2301      	movs	r3, #1
 80015be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c0:	2302      	movs	r3, #2
 80015c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SS_SD3_GPIO_Port, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	4812      	ldr	r0, [pc, #72]	; (8001614 <MX_GPIO_Init+0x104>)
 80015cc:	f002 f920 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS_SD1_Pin SS_SD2_Pin SS_SD4_Pin */
  GPIO_InitStruct.Pin = SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin;
 80015d0:	2386      	movs	r3, #134	; 0x86
 80015d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d4:	2301      	movs	r3, #1
 80015d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015d8:	2301      	movs	r3, #1
 80015da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015dc:	2302      	movs	r3, #2
 80015de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4619      	mov	r1, r3
 80015e6:	480c      	ldr	r0, [pc, #48]	; (8001618 <MX_GPIO_Init+0x108>)
 80015e8:	f002 f912 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80015ec:	2301      	movs	r3, #1
 80015ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f0:	2301      	movs	r3, #1
 80015f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4619      	mov	r1, r3
 8001602:	4806      	ldr	r0, [pc, #24]	; (800161c <MX_GPIO_Init+0x10c>)
 8001604:	f002 f904 	bl	8003810 <HAL_GPIO_Init>

}
 8001608:	bf00      	nop
 800160a:	3728      	adds	r7, #40	; 0x28
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40023800 	.word	0x40023800
 8001614:	40020800 	.word	0x40020800
 8001618:	40020000 	.word	0x40020000
 800161c:	40020400 	.word	0x40020400

08001620 <HAL_UART_RxCpltCallback>:

uint8_t tmp1;
uint8_t tmp2;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 if(huart==&UI_UART)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a09      	ldr	r2, [pc, #36]	; (8001650 <HAL_UART_RxCpltCallback+0x30>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d10a      	bne.n	8001646 <HAL_UART_RxCpltCallback+0x26>
 {
	 UI_media_process_byte(&user_interface,user_interface.media_rx_byte);
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <HAL_UART_RxCpltCallback+0x34>)
 8001632:	7b1b      	ldrb	r3, [r3, #12]
 8001634:	4619      	mov	r1, r3
 8001636:	4807      	ldr	r0, [pc, #28]	; (8001654 <HAL_UART_RxCpltCallback+0x34>)
 8001638:	f7ff f81e 	bl	8000678 <UI_media_process_byte>
	 HAL_UART_Receive_IT(&UI_UART,&(user_interface.media_rx_byte),1);
 800163c:	2201      	movs	r2, #1
 800163e:	4906      	ldr	r1, [pc, #24]	; (8001658 <HAL_UART_RxCpltCallback+0x38>)
 8001640:	4803      	ldr	r0, [pc, #12]	; (8001650 <HAL_UART_RxCpltCallback+0x30>)
 8001642:	f006 f837 	bl	80076b4 <HAL_UART_Receive_IT>
 }
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	2000094c 	.word	0x2000094c
 8001654:	200009b8 	.word	0x200009b8
 8001658:	200009c4 	.word	0x200009c4

0800165c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]

 if(huart==&UI_UART)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a09      	ldr	r2, [pc, #36]	; (800168c <HAL_UART_TxCpltCallback+0x30>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d10b      	bne.n	8001684 <HAL_UART_TxCpltCallback+0x28>
 {
	 if(UI_media_get_byte(&user_interface,&tmp2)==UI_F_OK)
 800166c:	4908      	ldr	r1, [pc, #32]	; (8001690 <HAL_UART_TxCpltCallback+0x34>)
 800166e:	4809      	ldr	r0, [pc, #36]	; (8001694 <HAL_UART_TxCpltCallback+0x38>)
 8001670:	f7ff f880 	bl	8000774 <UI_media_get_byte>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d104      	bne.n	8001684 <HAL_UART_TxCpltCallback+0x28>
	 {
	    HAL_UART_Transmit_IT(&UI_UART,&tmp2,1);
 800167a:	2201      	movs	r2, #1
 800167c:	4904      	ldr	r1, [pc, #16]	; (8001690 <HAL_UART_TxCpltCallback+0x34>)
 800167e:	4803      	ldr	r0, [pc, #12]	; (800168c <HAL_UART_TxCpltCallback+0x30>)
 8001680:	f005 ffd3 	bl	800762a <HAL_UART_Transmit_IT>
	 }
 }
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	2000094c 	.word	0x2000094c
 8001690:	20001abc 	.word	0x20001abc
 8001694:	200009b8 	.word	0x200009b8

08001698 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80016a0:	f011 ff12 	bl	80134c8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
   osEvent event;
  /* Infinite loop */
  for(;;)
  {
	  event = osMessageGet(AppliEventHandle, osWaitForever);
 80016a4:	4b17      	ldr	r3, [pc, #92]	; (8001704 <StartDefaultTask+0x6c>)
 80016a6:	6819      	ldr	r1, [r3, #0]
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	f04f 32ff 	mov.w	r2, #4294967295
 80016b0:	4618      	mov	r0, r3
 80016b2:	f00f fcfb 	bl	80110ac <osMessageGet>

	  if(event.status == osEventMessage)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2b10      	cmp	r3, #16
 80016ba:	d11f      	bne.n	80016fc <StartDefaultTask+0x64>
	  {
		switch(event.value.v)
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d006      	beq.n	80016d0 <StartDefaultTask+0x38>
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	d81c      	bhi.n	8001700 <StartDefaultTask+0x68>
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d015      	beq.n	80016f6 <StartDefaultTask+0x5e>
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d004      	beq.n	80016d8 <StartDefaultTask+0x40>
		 case APPLICATION_START:
		   USB_set_line_coding();
		 break;

		 default:
		 break;
 80016ce:	e017      	b.n	8001700 <StartDefaultTask+0x68>
			 icListen.status=DISCONNECTED;
 80016d0:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <StartDefaultTask+0x70>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	775a      	strb	r2, [r3, #29]
		 break;
 80016d6:	e014      	b.n	8001702 <StartDefaultTask+0x6a>
			 osDelay(5000);
 80016d8:	f241 3088 	movw	r0, #5000	; 0x1388
 80016dc:	f00f fc69 	bl	8010fb2 <osDelay>
			 icListen.status=CONNECTED;
 80016e0:	4b09      	ldr	r3, [pc, #36]	; (8001708 <StartDefaultTask+0x70>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	775a      	strb	r2, [r3, #29]
			 osMessagePut(USB_txHandle,&collect_msg_ptr, 0);
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <StartDefaultTask+0x74>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4909      	ldr	r1, [pc, #36]	; (8001710 <StartDefaultTask+0x78>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f00f fc9c 	bl	801102c <osMessagePut>
		 break;
 80016f4:	e005      	b.n	8001702 <StartDefaultTask+0x6a>
		   USB_set_line_coding();
 80016f6:	f011 feb9 	bl	801346c <USB_set_line_coding>
		 break;
 80016fa:	e002      	b.n	8001702 <StartDefaultTask+0x6a>
		 }
	   }
 80016fc:	bf00      	nop
 80016fe:	e7d1      	b.n	80016a4 <StartDefaultTask+0xc>
		 break;
 8001700:	bf00      	nop
	  event = osMessageGet(AppliEventHandle, osWaitForever);
 8001702:	e7cf      	b.n	80016a4 <StartDefaultTask+0xc>
 8001704:	200009a0 	.word	0x200009a0
 8001708:	20000800 	.word	0x20000800
 800170c:	200009a8 	.word	0x200009a8
 8001710:	200009b0 	.word	0x200009b0

08001714 <storage_f>:
* @retval None
*/

/* USER CODE END Header_storage_f */
void storage_f(void const * argument)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b098      	sub	sp, #96	; 0x60
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN storage_f */
  osDelay(500);
 800171c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001720:	f00f fc47 	bl	8010fb2 <osDelay>
  char ttr[20];
  memory_region_pointer msg_ptr;
  memory_region_pointer* data_ptr;
  msg_ptr.start_addr=ttr;
 8001724:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001728:	63bb      	str	r3, [r7, #56]	; 0x38

  uint8_t disk_id=0;
 800172a:	2300      	movs	r3, #0
 800172c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  char file_name[15];

  osEvent storage_w_event;

  sd_storage_link_ss(&microsd_storage,0,SS_SD1_Pin,GPIOA);
 8001730:	4b70      	ldr	r3, [pc, #448]	; (80018f4 <storage_f+0x1e0>)
 8001732:	2202      	movs	r2, #2
 8001734:	2100      	movs	r1, #0
 8001736:	4870      	ldr	r0, [pc, #448]	; (80018f8 <storage_f+0x1e4>)
 8001738:	f7ff fbc2 	bl	8000ec0 <sd_storage_link_ss>
  sd_storage_link_ss(&microsd_storage,1,SS_SD2_Pin,GPIOA);
 800173c:	4b6d      	ldr	r3, [pc, #436]	; (80018f4 <storage_f+0x1e0>)
 800173e:	2204      	movs	r2, #4
 8001740:	2101      	movs	r1, #1
 8001742:	486d      	ldr	r0, [pc, #436]	; (80018f8 <storage_f+0x1e4>)
 8001744:	f7ff fbbc 	bl	8000ec0 <sd_storage_link_ss>
  sd_storage_link_ss(&microsd_storage,2,SS_SD3_Pin,SS_SD3_GPIO_Port);
 8001748:	4b6c      	ldr	r3, [pc, #432]	; (80018fc <storage_f+0x1e8>)
 800174a:	2202      	movs	r2, #2
 800174c:	2102      	movs	r1, #2
 800174e:	486a      	ldr	r0, [pc, #424]	; (80018f8 <storage_f+0x1e4>)
 8001750:	f7ff fbb6 	bl	8000ec0 <sd_storage_link_ss>
  sd_storage_link_ss(&microsd_storage,3,SS_SD4_Pin,GPIOA);
 8001754:	4b67      	ldr	r3, [pc, #412]	; (80018f4 <storage_f+0x1e0>)
 8001756:	2280      	movs	r2, #128	; 0x80
 8001758:	2103      	movs	r1, #3
 800175a:	4867      	ldr	r0, [pc, #412]	; (80018f8 <storage_f+0x1e4>)
 800175c:	f7ff fbb0 	bl	8000ec0 <sd_storage_link_ss>
  sd_storage_init(&microsd_storage);
 8001760:	4865      	ldr	r0, [pc, #404]	; (80018f8 <storage_f+0x1e4>)
 8001762:	f7ff fb21 	bl	8000da8 <sd_storage_init>

  while(disk_id<4)
 8001766:	e024      	b.n	80017b2 <storage_f+0x9e>
  {
   sprintf(file_name,"%d:test%d.wav",disk_id,disk_id);
 8001768:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800176c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001770:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001774:	4962      	ldr	r1, [pc, #392]	; (8001900 <storage_f+0x1ec>)
 8001776:	f012 fecb 	bl	8014510 <siprintf>

   if(wav_file_open(&wav_file,file_name)==F_OK){
 800177a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800177e:	4619      	mov	r1, r3
 8001780:	4860      	ldr	r0, [pc, #384]	; (8001904 <storage_f+0x1f0>)
 8001782:	f000 ffdb 	bl	800273c <wav_file_open>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d10d      	bne.n	80017a8 <storage_f+0x94>
	  sprintf(ttr,"%d mounted\r",disk_id);
 800178c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001790:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001794:	495c      	ldr	r1, [pc, #368]	; (8001908 <storage_f+0x1f4>)
 8001796:	4618      	mov	r0, r3
 8001798:	f012 feba 	bl	8014510 <siprintf>
	  disk_id++;
 800179c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80017a0:	3301      	adds	r3, #1
 80017a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	  break;
 80017a6:	e008      	b.n	80017ba <storage_f+0xa6>
   }
   disk_id++;
 80017a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80017ac:	3301      	adds	r3, #1
 80017ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  while(disk_id<4)
 80017b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	d9d6      	bls.n	8001768 <storage_f+0x54>
  }
  msg_ptr.size=strlen(msg_ptr.start_addr);
 80017ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fd11 	bl	80001e4 <strlen>
 80017c2:	4603      	mov	r3, r0
 80017c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  UI_send_msg(&user_interface,UI_CMD_SEND_DATA,&msg_ptr);
 80017c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017ca:	461a      	mov	r2, r3
 80017cc:	2101      	movs	r1, #1
 80017ce:	484f      	ldr	r0, [pc, #316]	; (800190c <storage_f+0x1f8>)
 80017d0:	f7fe ffeb 	bl	80007aa <UI_send_msg>


  //readDir("0:/");
  //f_unlink("0:test1.wav");
  char xxx[20];
  int num_pckts=100;
 80017d4:	2364      	movs	r3, #100	; 0x64
 80017d6:	65bb      	str	r3, [r7, #88]	; 0x58
  /* Infinite loop */
  for(;;)
  {
	  storage_w_event = osMessageGet(storage_wHandle, osWaitForever);
 80017d8:	4b4d      	ldr	r3, [pc, #308]	; (8001910 <storage_f+0x1fc>)
 80017da:	6819      	ldr	r1, [r3, #0]
 80017dc:	f107 031c 	add.w	r3, r7, #28
 80017e0:	f04f 32ff 	mov.w	r2, #4294967295
 80017e4:	4618      	mov	r0, r3
 80017e6:	f00f fc61 	bl	80110ac <osMessageGet>
	  if(storage_w_event.status == osEventMessage){
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	2b10      	cmp	r3, #16
 80017ee:	d1f3      	bne.n	80017d8 <storage_f+0xc4>
		  if(num_pckts>0)
 80017f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	dd17      	ble.n	8001826 <storage_f+0x112>
		  {
		   data_ptr=(memory_region_pointer*)storage_w_event.value.v;
 80017f6:	6a3b      	ldr	r3, [r7, #32]
 80017f8:	657b      	str	r3, [r7, #84]	; 0x54
	       wav_file_write(&wav_file,data_ptr->start_addr,data_ptr->size);
 80017fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017fc:	6819      	ldr	r1, [r3, #0]
 80017fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	461a      	mov	r2, r3
 8001804:	483f      	ldr	r0, [pc, #252]	; (8001904 <storage_f+0x1f0>)
 8001806:	f001 f81a 	bl	800283e <wav_file_write>
	       osDelay(35);
 800180a:	2023      	movs	r0, #35	; 0x23
 800180c:	f00f fbd1 	bl	8010fb2 <osDelay>
	       osMessagePut(USB_txHandle,(uint8_t*)&collect_msg_ptr, 0);
 8001810:	4b40      	ldr	r3, [pc, #256]	; (8001914 <storage_f+0x200>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4940      	ldr	r1, [pc, #256]	; (8001918 <storage_f+0x204>)
 8001816:	2200      	movs	r2, #0
 8001818:	4618      	mov	r0, r3
 800181a:	f00f fc07 	bl	801102c <osMessagePut>
	       num_pckts--;
 800181e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001820:	3b01      	subs	r3, #1
 8001822:	65bb      	str	r3, [r7, #88]	; 0x58
 8001824:	e7d8      	b.n	80017d8 <storage_f+0xc4>
		  }
		  else if (num_pckts==0)
 8001826:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1d5      	bne.n	80017d8 <storage_f+0xc4>
		  {
			 wav_file_close(&wav_file);
 800182c:	4835      	ldr	r0, [pc, #212]	; (8001904 <storage_f+0x1f0>)
 800182e:	f000 ffd5 	bl	80027dc <wav_file_close>
			 sprintf(ttr,"Closed\r");
 8001832:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001836:	4939      	ldr	r1, [pc, #228]	; (800191c <storage_f+0x208>)
 8001838:	4618      	mov	r0, r3
 800183a:	f012 fe69 	bl	8014510 <siprintf>
			 msg_ptr.size=strlen(msg_ptr.start_addr);
 800183e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fccf 	bl	80001e4 <strlen>
 8001846:	4603      	mov	r3, r0
 8001848:	63fb      	str	r3, [r7, #60]	; 0x3c
			 UI_send_msg(&user_interface,UI_CMD_SEND_DATA,&msg_ptr);
 800184a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800184e:	461a      	mov	r2, r3
 8001850:	2101      	movs	r1, #1
 8001852:	482e      	ldr	r0, [pc, #184]	; (800190c <storage_f+0x1f8>)
 8001854:	f7fe ffa9 	bl	80007aa <UI_send_msg>
			 num_pckts--;
 8001858:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800185a:	3b01      	subs	r3, #1
 800185c:	65bb      	str	r3, [r7, #88]	; 0x58
			 if(disk_id<4)
 800185e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001862:	2b03      	cmp	r3, #3
 8001864:	d8b8      	bhi.n	80017d8 <storage_f+0xc4>
			 {
			  while(disk_id<4)
 8001866:	e029      	b.n	80018bc <storage_f+0x1a8>
			  {
			   sprintf(file_name,"%d:test%d.wav",disk_id,disk_id);
 8001868:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800186c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001870:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001874:	4922      	ldr	r1, [pc, #136]	; (8001900 <storage_f+0x1ec>)
 8001876:	f012 fe4b 	bl	8014510 <siprintf>
			   if(wav_file_open(&wav_file,file_name)==F_OK){
 800187a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800187e:	4619      	mov	r1, r3
 8001880:	4820      	ldr	r0, [pc, #128]	; (8001904 <storage_f+0x1f0>)
 8001882:	f000 ff5b 	bl	800273c <wav_file_open>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10f      	bne.n	80018ac <storage_f+0x198>
				 sprintf(ttr,"%d mounted\r",disk_id);
 800188c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001890:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001894:	491c      	ldr	r1, [pc, #112]	; (8001908 <storage_f+0x1f4>)
 8001896:	4618      	mov	r0, r3
 8001898:	f012 fe3a 	bl	8014510 <siprintf>
				 num_pckts=100;
 800189c:	2364      	movs	r3, #100	; 0x64
 800189e:	65bb      	str	r3, [r7, #88]	; 0x58
				 disk_id++;
 80018a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80018a4:	3301      	adds	r3, #1
 80018a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				 break;
 80018aa:	e00b      	b.n	80018c4 <storage_f+0x1b0>
			   }
			   else sprintf(ttr,"%d error\r",disk_id);
 80018ac:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80018b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018b4:	491a      	ldr	r1, [pc, #104]	; (8001920 <storage_f+0x20c>)
 80018b6:	4618      	mov	r0, r3
 80018b8:	f012 fe2a 	bl	8014510 <siprintf>
			  while(disk_id<4)
 80018bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80018c0:	2b03      	cmp	r3, #3
 80018c2:	d9d1      	bls.n	8001868 <storage_f+0x154>
			  }
			  msg_ptr.size=strlen(msg_ptr.start_addr);
 80018c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fc8c 	bl	80001e4 <strlen>
 80018cc:	4603      	mov	r3, r0
 80018ce:	63fb      	str	r3, [r7, #60]	; 0x3c
			  UI_send_msg(&user_interface,UI_CMD_SEND_DATA,&msg_ptr);
 80018d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018d4:	461a      	mov	r2, r3
 80018d6:	2101      	movs	r1, #1
 80018d8:	480c      	ldr	r0, [pc, #48]	; (800190c <storage_f+0x1f8>)
 80018da:	f7fe ff66 	bl	80007aa <UI_send_msg>
			  osDelay(35);
 80018de:	2023      	movs	r0, #35	; 0x23
 80018e0:	f00f fb67 	bl	8010fb2 <osDelay>
			  osMessagePut(USB_txHandle,(uint8_t*)&collect_msg_ptr, 0);
 80018e4:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <storage_f+0x200>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	490b      	ldr	r1, [pc, #44]	; (8001918 <storage_f+0x204>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	4618      	mov	r0, r3
 80018ee:	f00f fb9d 	bl	801102c <osMessagePut>
	  storage_w_event = osMessageGet(storage_wHandle, osWaitForever);
 80018f2:	e771      	b.n	80017d8 <storage_f+0xc4>
 80018f4:	40020000 	.word	0x40020000
 80018f8:	20000dec 	.word	0x20000dec
 80018fc:	40020800 	.word	0x40020800
 8001900:	08016740 	.word	0x08016740
 8001904:	200016fc 	.word	0x200016fc
 8001908:	08016750 	.word	0x08016750
 800190c:	200009b8 	.word	0x200009b8
 8001910:	200009ac 	.word	0x200009ac
 8001914:	200009a8 	.word	0x200009a8
 8001918:	200009b0 	.word	0x200009b0
 800191c:	0801675c 	.word	0x0801675c
 8001920:	08016764 	.word	0x08016764

08001924 <main_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_main_f */
void main_f(void const * argument)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08c      	sub	sp, #48	; 0x30
 8001928:	af00      	add	r7, sp, #0
 800192a:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN main_f */
  icListen.settings=(icListen_settings_typedef*)mcu_flash.data.raw_data;
 800192c:	4b3b      	ldr	r3, [pc, #236]	; (8001a1c <main_f+0xf8>)
 800192e:	4a3c      	ldr	r2, [pc, #240]	; (8001a20 <main_f+0xfc>)
 8001930:	621a      	str	r2, [r3, #32]




  icListen_collect_short_mask_msg collect_msg;
  icListen_prepare_collect_msg(&collect_msg,0x20);
 8001932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001936:	2120      	movs	r1, #32
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff faf9 	bl	8000f30 <icListen_prepare_collect_msg>

  collect_msg_ptr.start_addr=(uint8_t*)&collect_msg;
 800193e:	4a39      	ldr	r2, [pc, #228]	; (8001a24 <main_f+0x100>)
 8001940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001944:	6013      	str	r3, [r2, #0]
  collect_msg_ptr.size=sizeof(icListen_collect_short_mask_msg);
 8001946:	4b37      	ldr	r3, [pc, #220]	; (8001a24 <main_f+0x100>)
 8001948:	2207      	movs	r2, #7
 800194a:	605a      	str	r2, [r3, #4]

  osEvent event;

  if(mcu_flash_read(&mcu_flash)!=F_OK){
 800194c:	4836      	ldr	r0, [pc, #216]	; (8001a28 <main_f+0x104>)
 800194e:	f000 f901 	bl	8001b54 <mcu_flash_read>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d026      	beq.n	80019a6 <main_f+0x82>
		icListen.settings->wav_sample_rate=ICLISTEN_DEFAULT_WAV_SAMPLE_RATE;
 8001958:	4b30      	ldr	r3, [pc, #192]	; (8001a1c <main_f+0xf8>)
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
 8001960:	2200      	movs	r2, #0
 8001962:	f042 027d 	orr.w	r2, r2, #125	; 0x7d
 8001966:	705a      	strb	r2, [r3, #1]
 8001968:	2200      	movs	r2, #0
 800196a:	709a      	strb	r2, [r3, #2]
 800196c:	2200      	movs	r2, #0
 800196e:	70da      	strb	r2, [r3, #3]
		icListen.settings->wav_sample_bit_depth=ICLISTEN_DEFAULT_WAV_SAMPLE_BIT_DEPTH;
 8001970:	4b2a      	ldr	r3, [pc, #168]	; (8001a1c <main_f+0xf8>)
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	2200      	movs	r2, #0
 8001976:	f042 0218 	orr.w	r2, r2, #24
 800197a:	711a      	strb	r2, [r3, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	715a      	strb	r2, [r3, #5]
 8001980:	2200      	movs	r2, #0
 8001982:	719a      	strb	r2, [r3, #6]
 8001984:	2200      	movs	r2, #0
 8001986:	71da      	strb	r2, [r3, #7]
		icListen.settings->file_duration=ICLISTEN_DEFAULT_FILE_DURATION;
 8001988:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <main_f+0xf8>)
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	2200      	movs	r2, #0
 800198e:	f042 0201 	orr.w	r2, r2, #1
 8001992:	721a      	strb	r2, [r3, #8]
 8001994:	2200      	movs	r2, #0
 8001996:	725a      	strb	r2, [r3, #9]
 8001998:	2200      	movs	r2, #0
 800199a:	729a      	strb	r2, [r3, #10]
 800199c:	2200      	movs	r2, #0
 800199e:	72da      	strb	r2, [r3, #11]
		mcu_flash_save(&mcu_flash);
 80019a0:	4821      	ldr	r0, [pc, #132]	; (8001a28 <main_f+0x104>)
 80019a2:	f000 f8f7 	bl	8001b94 <mcu_flash_save>
  }
  icListen.status=DISCONNECTED;
 80019a6:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <main_f+0xf8>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	775a      	strb	r2, [r3, #29]

  while(icListen.status==DISCONNECTED) osDelay(1);
 80019ac:	e002      	b.n	80019b4 <main_f+0x90>
 80019ae:	2001      	movs	r0, #1
 80019b0:	f00f faff 	bl	8010fb2 <osDelay>
 80019b4:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <main_f+0xf8>)
 80019b6:	7f5b      	ldrb	r3, [r3, #29]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d0f8      	beq.n	80019ae <main_f+0x8a>

  /* Infinite loop */
  for(;;)
  {
	  if(icListen.status==CONNECTED){
 80019bc:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <main_f+0xf8>)
 80019be:	7f5b      	ldrb	r3, [r3, #29]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1fb      	bne.n	80019bc <main_f+0x98>
	   event = osMessageGet(USB_txHandle, osWaitForever);
 80019c4:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <main_f+0x108>)
 80019c6:	6819      	ldr	r1, [r3, #0]
 80019c8:	f107 0318 	add.w	r3, r7, #24
 80019cc:	f04f 32ff 	mov.w	r2, #4294967295
 80019d0:	4618      	mov	r0, r3
 80019d2:	f00f fb6b 	bl	80110ac <osMessageGet>
	   if(event.status == osEventMessage){
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	2b10      	cmp	r3, #16
 80019da:	d109      	bne.n	80019f0 <main_f+0xcc>
		   mem_ptr=(memory_region_pointer*)event.value.v;
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	62fb      	str	r3, [r7, #44]	; 0x2c
		   USB_transmit_msg(mem_ptr->start_addr,mem_ptr->size);
 80019e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	4619      	mov	r1, r3
 80019ea:	4610      	mov	r0, r2
 80019ec:	f011 fd0e 	bl	801340c <USB_transmit_msg>

	   }
	   event = osMessageGet(USB_rxHandle, 10);
 80019f0:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <main_f+0x10c>)
 80019f2:	6819      	ldr	r1, [r3, #0]
 80019f4:	463b      	mov	r3, r7
 80019f6:	220a      	movs	r2, #10
 80019f8:	4618      	mov	r0, r3
 80019fa:	f00f fb57 	bl	80110ac <osMessageGet>
 80019fe:	f107 0318 	add.w	r3, r7, #24
 8001a02:	463a      	mov	r2, r7
 8001a04:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	   if(event.status == osEventMessage){
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	2b10      	cmp	r3, #16
 8001a0e:	d1d5      	bne.n	80019bc <main_f+0x98>

		   icListen_parse_msg((uint8_t*)event.value.v,&icListen);
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	4902      	ldr	r1, [pc, #8]	; (8001a1c <main_f+0xf8>)
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff faaf 	bl	8000f78 <icListen_parse_msg>
	  if(icListen.status==CONNECTED){
 8001a1a:	e7cf      	b.n	80019bc <main_f+0x98>
 8001a1c:	20000800 	.word	0x20000800
 8001a20:	20000dd8 	.word	0x20000dd8
 8001a24:	200009b0 	.word	0x200009b0
 8001a28:	20000dcc 	.word	0x20000dcc
 8001a2c:	200009a8 	.word	0x200009a8
 8001a30:	200009a4 	.word	0x200009a4

08001a34 <uart_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart_f */
void uart_f(void const * argument)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uart_f */
  uint8_t tmp;
  /* Infinite loop */
  user_interface.media_status=UI_MEDIA_READY;
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <uart_f+0x44>)
 8001a3e:	220a      	movs	r2, #10
 8001a40:	735a      	strb	r2, [r3, #13]
  for(;;)
  {
	   if(UI_UART.gState!=HAL_UART_STATE_BUSY_TX)
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <uart_f+0x48>)
 8001a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b21      	cmp	r3, #33	; 0x21
 8001a4c:	d00f      	beq.n	8001a6e <uart_f+0x3a>
	   {
		if(UI_media_get_byte(&user_interface,&tmp)==UI_F_OK)
 8001a4e:	f107 030f 	add.w	r3, r7, #15
 8001a52:	4619      	mov	r1, r3
 8001a54:	4808      	ldr	r0, [pc, #32]	; (8001a78 <uart_f+0x44>)
 8001a56:	f7fe fe8d 	bl	8000774 <UI_media_get_byte>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d106      	bne.n	8001a6e <uart_f+0x3a>
		{
		   HAL_UART_Transmit_IT(&UI_UART,&tmp,1);
 8001a60:	f107 030f 	add.w	r3, r7, #15
 8001a64:	2201      	movs	r2, #1
 8001a66:	4619      	mov	r1, r3
 8001a68:	4804      	ldr	r0, [pc, #16]	; (8001a7c <uart_f+0x48>)
 8001a6a:	f005 fdde 	bl	800762a <HAL_UART_Transmit_IT>
		}
	   }
	  osDelay(1);
 8001a6e:	2001      	movs	r0, #1
 8001a70:	f00f fa9f 	bl	8010fb2 <osDelay>
	   if(UI_UART.gState!=HAL_UART_STATE_BUSY_TX)
 8001a74:	e7e5      	b.n	8001a42 <uart_f+0xe>
 8001a76:	bf00      	nop
 8001a78:	200009b8 	.word	0x200009b8
 8001a7c:	2000094c 	.word	0x2000094c

08001a80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d101      	bne.n	8001a96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a92:	f000 ff43 	bl	800291c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40010000 	.word	0x40010000

08001aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa8:	b672      	cpsid	i
}
 8001aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aac:	e7fe      	b.n	8001aac <Error_Handler+0x8>
	...

08001ab0 <mcu_flash_init>:
#if defined(STM32F205xx)  //KB
uint32_t  flash_block_size[]={16,16,16,16,64,128,128,128,128,128,128,128};
#endif

void mcu_flash_init(mcu_flash_typedef* mcu_flash_obj,uint32_t first_block)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b087      	sub	sp, #28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
	uint32_t temp=0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
	int32_t temp2=0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
	if(first_block<FLASH_NUM_OF_BLOCKS){
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	2b0b      	cmp	r3, #11
 8001ac6:	d83d      	bhi.n	8001b44 <mcu_flash_init+0x94>
      mcu_flash_obj->first_block_num=first_block;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	605a      	str	r2, [r3, #4]
      for(int i=0;i<first_block;i++) temp+=flash_block_size[i];
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	e009      	b.n	8001ae8 <mcu_flash_init+0x38>
 8001ad4:	4a1e      	ldr	r2, [pc, #120]	; (8001b50 <mcu_flash_init+0xa0>)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	4413      	add	r3, r2
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d8f1      	bhi.n	8001ad4 <mcu_flash_init+0x24>
	  mcu_flash_obj->first_block_addr=FLASH_BASE+(temp*1024);
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001af6:	029a      	lsls	r2, r3, #10
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	601a      	str	r2, [r3, #0]

	  temp2=FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE;
 8001afc:	2312      	movs	r3, #18
 8001afe:	613b      	str	r3, [r7, #16]
	  mcu_flash_obj->num_of_blocks=0;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	721a      	strb	r2, [r3, #8]
 8001b06:	2200      	movs	r2, #0
 8001b08:	725a      	strb	r2, [r3, #9]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	729a      	strb	r2, [r3, #10]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	72da      	strb	r2, [r3, #11]
	  for(int i=mcu_flash_obj->first_block_num;i<FLASH_NUM_OF_BLOCKS&&temp2>0;i++) {
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	e00e      	b.n	8001b38 <mcu_flash_init+0x88>
		  temp2-=flash_block_size[i];
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	490c      	ldr	r1, [pc, #48]	; (8001b50 <mcu_flash_init+0xa0>)
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	613b      	str	r3, [r7, #16]
		  mcu_flash_obj->num_of_blocks++;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	1c5a      	adds	r2, r3, #1
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	609a      	str	r2, [r3, #8]
	  for(int i=mcu_flash_obj->first_block_num;i<FLASH_NUM_OF_BLOCKS&&temp2>0;i++) {
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	3301      	adds	r3, #1
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	2b0b      	cmp	r3, #11
 8001b3c:	dc02      	bgt.n	8001b44 <mcu_flash_init+0x94>
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	dcea      	bgt.n	8001b1a <mcu_flash_init+0x6a>
	  }
	}
}
 8001b44:	bf00      	nop
 8001b46:	371c      	adds	r7, #28
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	20000200 	.word	0x20000200

08001b54 <mcu_flash_read>:

F_RES mcu_flash_read(mcu_flash_typedef* mcu_flash_obj)
{
 8001b54:	b590      	push	{r4, r7, lr}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	 memcpy((uint8_t*)&(mcu_flash_obj->data),(uint8_t*)mcu_flash_obj->first_block_addr,FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f103 000c 	add.w	r0, r3, #12
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2212      	movs	r2, #18
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f012 f8ef 	bl	8013d4c <memcpy>
	 if(mcu_flash_obj->data.crc==get_crc16_arc(mcu_flash_obj->data.raw_data,FLASH_DATA_SIZE)){
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	8b9b      	ldrh	r3, [r3, #28]
 8001b72:	b29c      	uxth	r4, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	330c      	adds	r3, #12
 8001b78:	2110      	movs	r1, #16
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff f8de 	bl	8000d3c <get_crc16_arc>
 8001b80:	4603      	mov	r3, r0
 8001b82:	429c      	cmp	r4, r3
 8001b84:	d101      	bne.n	8001b8a <mcu_flash_read+0x36>
		 return F_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	e000      	b.n	8001b8c <mcu_flash_read+0x38>
	 }
	 else{
		 return F_ERR;
 8001b8a:	2301      	movs	r3, #1
	 }

}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd90      	pop	{r4, r7, pc}

08001b94 <mcu_flash_save>:
void mcu_flash_save(mcu_flash_typedef* mcu_flash_obj)
{
 8001b94:	b5b0      	push	{r4, r5, r7, lr}
 8001b96:	b08c      	sub	sp, #48	; 0x30
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	uint32_t i=0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t tmp;
	uint32_t pgerr = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	623b      	str	r3, [r7, #32]
	uint8_t* data=(uint8_t*)&mcu_flash_obj->data;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	330c      	adds	r3, #12
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24

	mcu_flash_obj->data.crc=get_crc16_arc(mcu_flash_obj->data.raw_data,FLASH_DATA_SIZE);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	330c      	adds	r3, #12
 8001bae:	2110      	movs	r1, #16
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff f8c3 	bl	8000d3c <get_crc16_arc>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	461a      	mov	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	839a      	strh	r2, [r3, #28]

    HAL_FLASH_Unlock();
 8001bbe:	f001 fba3 	bl	8003308 <HAL_FLASH_Unlock>
    #if defined(STM32F405xx)
	FLASH_EraseInitTypeDef erase_info = {
 8001bc2:	f107 030c 	add.w	r3, r7, #12
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	60da      	str	r2, [r3, #12]
 8001bd0:	611a      	str	r2, [r3, #16]
		.TypeErase = FLASH_TYPEERASE_SECTORS,
		.Sector = mcu_flash_obj->first_block_num,
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
	FLASH_EraseInitTypeDef erase_info = {
 8001bd6:	617b      	str	r3, [r7, #20]
		.NbSectors = mcu_flash_obj->num_of_blocks,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
	FLASH_EraseInitTypeDef erase_info = {
 8001bdc:	61bb      	str	r3, [r7, #24]
	.NbPages = mcu_flash_obj->num_of_blocks,
    };
    #endif


	HAL_FLASHEx_Erase(&erase_info, &pgerr);
 8001bde:	f107 0220 	add.w	r2, r7, #32
 8001be2:	f107 030c 	add.w	r3, r7, #12
 8001be6:	4611      	mov	r1, r2
 8001be8:	4618      	mov	r0, r3
 8001bea:	f001 fcef 	bl	80035cc <HAL_FLASHEx_Erase>

	if(pgerr != 0xFFFFFFFFul)
 8001bee:	6a3b      	ldr	r3, [r7, #32]
 8001bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf4:	d027      	beq.n	8001c46 <mcu_flash_save+0xb2>
	{
		HAL_FLASH_Lock();
 8001bf6:	f001 fba9 	bl	800334c <HAL_FLASH_Lock>
 8001bfa:	e029      	b.n	8001c50 <mcu_flash_save+0xbc>
		return ;
	}

	while(i<(FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE))
	{
        tmp=(tmp&0x0000)|(data[i]&0x00FF);
 8001bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c00:	4413      	add	r3, r2
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	857b      	strh	r3, [r7, #42]	; 0x2a
		if((i+1)<(FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE)) tmp=tmp|(data[i+1]<<8&0xFF00);
 8001c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c08:	3301      	adds	r3, #1
 8001c0a:	2b11      	cmp	r3, #17
 8001c0c:	d80b      	bhi.n	8001c26 <mcu_flash_save+0x92>
 8001c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c10:	3301      	adds	r3, #1
 8001c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c14:	4413      	add	r3, r2
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	021b      	lsls	r3, r3, #8
 8001c1a:	b21a      	sxth	r2, r3
 8001c1c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001c20:	4313      	orrs	r3, r2
 8001c22:	b21b      	sxth	r3, r3
 8001c24:	857b      	strh	r3, [r7, #42]	; 0x2a
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,mcu_flash_obj->first_block_addr+i,tmp);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c2c:	18d1      	adds	r1, r2, r3
 8001c2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c30:	2200      	movs	r2, #0
 8001c32:	461c      	mov	r4, r3
 8001c34:	4615      	mov	r5, r2
 8001c36:	4622      	mov	r2, r4
 8001c38:	462b      	mov	r3, r5
 8001c3a:	2001      	movs	r0, #1
 8001c3c:	f001 fb10 	bl	8003260 <HAL_FLASH_Program>
		i=i+2;
 8001c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c42:	3302      	adds	r3, #2
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(i<(FLASH_DATA_SIZE+FLASH_DATA_CRC_SIZE))
 8001c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c48:	2b11      	cmp	r3, #17
 8001c4a:	d9d7      	bls.n	8001bfc <mcu_flash_save+0x68>
	}

	HAL_FLASH_Lock();
 8001c4c:	f001 fb7e 	bl	800334c <HAL_FLASH_Lock>
}
 8001c50:	3730      	adds	r7, #48	; 0x30
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001c58 <sd_ss_set_active>:
extern volatile uint16_t htim2;

uint8_t spi_rx_buffer[512];

void sd_ss_set_active(uint8_t drv)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
  active_sd_ss_pin=sd_cards_ss[drv].sd_ss_pin;
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	4a08      	ldr	r2, [pc, #32]	; (8001c88 <sd_ss_set_active+0x30>)
 8001c66:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <sd_ss_set_active+0x34>)
 8001c6c:	801a      	strh	r2, [r3, #0]
  active_sd_ss_port=sd_cards_ss[drv].sd_ss_port;
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	4a05      	ldr	r2, [pc, #20]	; (8001c88 <sd_ss_set_active+0x30>)
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4413      	add	r3, r2
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	4a05      	ldr	r2, [pc, #20]	; (8001c90 <sd_ss_set_active+0x38>)
 8001c7a:	6013      	str	r3, [r2, #0]
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	20001ac8 	.word	0x20001ac8
 8001c8c:	20001ac2 	.word	0x20001ac2
 8001c90:	20001ac4 	.word	0x20001ac4

08001c94 <sd_ss_active_pin_down>:

void sd_ss_active_pin_down()
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(active_sd_ss_port, active_sd_ss_pin, GPIO_PIN_RESET);
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <sd_ss_active_pin_down+0x18>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <sd_ss_active_pin_down+0x1c>)
 8001c9e:	8811      	ldrh	r1, [r2, #0]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f001 ff50 	bl	8003b48 <HAL_GPIO_WritePin>
}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20001ac4 	.word	0x20001ac4
 8001cb0:	20001ac2 	.word	0x20001ac2

08001cb4 <sd_ss_active_pin_up>:
void sd_ss_active_pin_up()
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(active_sd_ss_port, active_sd_ss_pin, GPIO_PIN_SET);
 8001cb8:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <sd_ss_active_pin_up+0x18>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a04      	ldr	r2, [pc, #16]	; (8001cd0 <sd_ss_active_pin_up+0x1c>)
 8001cbe:	8811      	ldrh	r1, [r2, #0]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f001 ff40 	bl	8003b48 <HAL_GPIO_WritePin>
}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20001ac4 	.word	0x20001ac4
 8001cd0:	20001ac2 	.word	0x20001ac2

08001cd4 <SD_cmd>:



//-----------------------------------------------
static uint8_t SD_cmd (uint8_t cmd, uint32_t arg)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	6039      	str	r1, [r7, #0]
 8001cde:	71fb      	strb	r3, [r7, #7]
  uint8_t n, res;
  // ACMD<n> is the command sequense of CMD55-CMD<n>
  if (cmd & 0x80)
 8001ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	da0e      	bge.n	8001d06 <SD_cmd+0x32>
  {
    cmd &= 0x7F;
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cee:	71fb      	strb	r3, [r7, #7]
    res = SD_cmd(CMD55, 0);
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	2077      	movs	r0, #119	; 0x77
 8001cf4:	f7ff ffee 	bl	8001cd4 <SD_cmd>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	73bb      	strb	r3, [r7, #14]
    if (res > 1) return res;
 8001cfc:	7bbb      	ldrb	r3, [r7, #14]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d901      	bls.n	8001d06 <SD_cmd+0x32>
 8001d02:	7bbb      	ldrb	r3, [r7, #14]
 8001d04:	e043      	b.n	8001d8e <SD_cmd+0xba>
  }
  // Select the card
  SS_SD_DESELECT();
 8001d06:	f7ff ffd5 	bl	8001cb4 <sd_ss_active_pin_up>
  SPI_ReceiveByte();
 8001d0a:	f000 f96a 	bl	8001fe2 <SPI_ReceiveByte>

  SS_SD_SELECT();
 8001d0e:	f7ff ffc1 	bl	8001c94 <sd_ss_active_pin_down>
  SPI_ReceiveByte();
 8001d12:	f000 f966 	bl	8001fe2 <SPI_ReceiveByte>
  // Send a command packet
  SPI_SendByte(cmd); // Start + Command index
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 f955 	bl	8001fc8 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 24)); // Argument[31..24]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	0e1b      	lsrs	r3, r3, #24
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	4618      	mov	r0, r3
 8001d26:	f000 f94f 	bl	8001fc8 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 16)); // Argument[23..16]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	0c1b      	lsrs	r3, r3, #16
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	4618      	mov	r0, r3
 8001d32:	f000 f949 	bl	8001fc8 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 8)); // Argument[15..8]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	0a1b      	lsrs	r3, r3, #8
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f000 f943 	bl	8001fc8 <SPI_SendByte>
  SPI_SendByte((uint8_t)arg); // Argument[7..0]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 f93e 	bl	8001fc8 <SPI_SendByte>

  n = 0x01; // Dummy CRC + Stop
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0) {n = 0x95;} // Valid CRC for CMD0(0)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	2b40      	cmp	r3, #64	; 0x40
 8001d54:	d101      	bne.n	8001d5a <SD_cmd+0x86>
 8001d56:	2395      	movs	r3, #149	; 0x95
 8001d58:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD8) {n = 0x87;} // Valid CRC for CMD8(0x1AA)
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	2b48      	cmp	r3, #72	; 0x48
 8001d5e:	d101      	bne.n	8001d64 <SD_cmd+0x90>
 8001d60:	2387      	movs	r3, #135	; 0x87
 8001d62:	73fb      	strb	r3, [r7, #15]
  SPI_SendByte(n);
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 f92e 	bl	8001fc8 <SPI_SendByte>
  // Receive a command response
  n = 10; // Wait for a valid response in timeout of 10 attempts
 8001d6c:	230a      	movs	r3, #10
 8001d6e:	73fb      	strb	r3, [r7, #15]
  do {
    res = SPI_ReceiveByte();
 8001d70:	f000 f937 	bl	8001fe2 <SPI_ReceiveByte>
 8001d74:	4603      	mov	r3, r0
 8001d76:	73bb      	strb	r3, [r7, #14]
  } while ((res & 0x80) && --n);
 8001d78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	da05      	bge.n	8001d8c <SD_cmd+0xb8>
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	73fb      	strb	r3, [r7, #15]
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1f1      	bne.n	8001d70 <SD_cmd+0x9c>
  return res;
 8001d8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <sd_ini>:

uint8_t sd_ini(void)
{
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
	  uint8_t i, cmd;;
	  uint8_t ocr[4];
	  int16_t tmr;
	  uint32_t temp;
	  //LD_OFF;
	  sdinfo.type = 0;
 8001d9e:	4b57      	ldr	r3, [pc, #348]	; (8001efc <sd_ini+0x164>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]

	  hspi1.Init.BaudRatePrescaler = temp;
	  HAL_SPI_Init(&hspi1);
	  */

	  SS_SD_SELECT();
 8001da4:	f7ff ff76 	bl	8001c94 <sd_ss_active_pin_down>
	  if (SD_cmd(CMD0, 0) == 1) // Enter Idle state
 8001da8:	2100      	movs	r1, #0
 8001daa:	2040      	movs	r0, #64	; 0x40
 8001dac:	f7ff ff92 	bl	8001cd4 <SD_cmd>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	f040 809a 	bne.w	8001eec <sd_ini+0x154>
	  {
		  SPI_Release();
 8001db8:	f000 f920 	bl	8001ffc <SPI_Release>
		  if (SD_cmd(CMD8, 0x1AA) == 1) // SDv2
 8001dbc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001dc0:	2048      	movs	r0, #72	; 0x48
 8001dc2:	f7ff ff87 	bl	8001cd4 <SD_cmd>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d157      	bne.n	8001e7c <sd_ini+0xe4>
		  {
			  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8001dcc:	2300      	movs	r3, #0
 8001dce:	71fb      	strb	r3, [r7, #7]
 8001dd0:	e00c      	b.n	8001dec <sd_ini+0x54>
 8001dd2:	79fc      	ldrb	r4, [r7, #7]
 8001dd4:	f000 f905 	bl	8001fe2 <SPI_ReceiveByte>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	461a      	mov	r2, r3
 8001ddc:	f104 0308 	add.w	r3, r4, #8
 8001de0:	443b      	add	r3, r7
 8001de2:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	3301      	adds	r3, #1
 8001dea:	71fb      	strb	r3, [r7, #7]
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	2b03      	cmp	r3, #3
 8001df0:	d9ef      	bls.n	8001dd2 <sd_ini+0x3a>

			    // Get trailing return value of R7 resp
			    if (ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 8001df2:	78bb      	ldrb	r3, [r7, #2]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d17b      	bne.n	8001ef0 <sd_ini+0x158>
 8001df8:	78fb      	ldrb	r3, [r7, #3]
 8001dfa:	2baa      	cmp	r3, #170	; 0xaa
 8001dfc:	d178      	bne.n	8001ef0 <sd_ini+0x158>
			    {
			    	for (tmr = 12000; tmr && SD_cmd(ACMD41, 1UL << 30); tmr--)
 8001dfe:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8001e02:	80bb      	strh	r3, [r7, #4]
 8001e04:	e005      	b.n	8001e12 <sd_ini+0x7a>
 8001e06:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	80bb      	strh	r3, [r7, #4]
 8001e12:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d007      	beq.n	8001e2a <sd_ini+0x92>
 8001e1a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e1e:	20e9      	movs	r0, #233	; 0xe9
 8001e20:	f7ff ff58 	bl	8001cd4 <SD_cmd>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1ed      	bne.n	8001e06 <sd_ini+0x6e>
			    	    ; // Wait for leaving idle state (ACMD41 with HCS bit)
			    	if (tmr && SD_cmd(CMD58, 0) == 0)
 8001e2a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d05e      	beq.n	8001ef0 <sd_ini+0x158>
 8001e32:	2100      	movs	r1, #0
 8001e34:	207a      	movs	r0, #122	; 0x7a
 8001e36:	f7ff ff4d 	bl	8001cd4 <SD_cmd>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d157      	bne.n	8001ef0 <sd_ini+0x158>
			    	 { // Check CCS bit in the OCR
			    	  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8001e40:	2300      	movs	r3, #0
 8001e42:	71fb      	strb	r3, [r7, #7]
 8001e44:	e00c      	b.n	8001e60 <sd_ini+0xc8>
 8001e46:	79fc      	ldrb	r4, [r7, #7]
 8001e48:	f000 f8cb 	bl	8001fe2 <SPI_ReceiveByte>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	461a      	mov	r2, r3
 8001e50:	f104 0308 	add.w	r3, r4, #8
 8001e54:	443b      	add	r3, r7
 8001e56:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	71fb      	strb	r3, [r7, #7]
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	d9ef      	bls.n	8001e46 <sd_ini+0xae>
			     	   sdinfo.type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 8001e66:	783b      	ldrb	r3, [r7, #0]
 8001e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <sd_ini+0xdc>
 8001e70:	220c      	movs	r2, #12
 8001e72:	e000      	b.n	8001e76 <sd_ini+0xde>
 8001e74:	2204      	movs	r2, #4
 8001e76:	4b21      	ldr	r3, [pc, #132]	; (8001efc <sd_ini+0x164>)
 8001e78:	701a      	strb	r2, [r3, #0]
 8001e7a:	e039      	b.n	8001ef0 <sd_ini+0x158>
			    	}
			    }
		  }
		  else //SDv1 or MMCv3
		  {
			  if (SD_cmd(ACMD41, 0) <= 1)
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	20e9      	movs	r0, #233	; 0xe9
 8001e80:	f7ff ff28 	bl	8001cd4 <SD_cmd>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d805      	bhi.n	8001e96 <sd_ini+0xfe>
			    {
			      sdinfo.type = CT_SD1; cmd = ACMD41; // SDv1
 8001e8a:	4b1c      	ldr	r3, [pc, #112]	; (8001efc <sd_ini+0x164>)
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	701a      	strb	r2, [r3, #0]
 8001e90:	23e9      	movs	r3, #233	; 0xe9
 8001e92:	71bb      	strb	r3, [r7, #6]
 8001e94:	e004      	b.n	8001ea0 <sd_ini+0x108>
			    }
			    else
			    {
			      sdinfo.type = CT_MMC; cmd = CMD1; // MMCv3
 8001e96:	4b19      	ldr	r3, [pc, #100]	; (8001efc <sd_ini+0x164>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	701a      	strb	r2, [r3, #0]
 8001e9c:	2341      	movs	r3, #65	; 0x41
 8001e9e:	71bb      	strb	r3, [r7, #6]
			    }
			    for (tmr = 25000; tmr && SD_cmd(cmd, 0); tmr--) ; // Wait for leaving idle state
 8001ea0:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8001ea4:	80bb      	strh	r3, [r7, #4]
 8001ea6:	e005      	b.n	8001eb4 <sd_ini+0x11c>
 8001ea8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	80bb      	strh	r3, [r7, #4]
 8001eb4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d007      	beq.n	8001ecc <sd_ini+0x134>
 8001ebc:	79bb      	ldrb	r3, [r7, #6]
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff07 	bl	8001cd4 <SD_cmd>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1ed      	bne.n	8001ea8 <sd_ini+0x110>
			    if (!tmr || SD_cmd(CMD16, 512) != 0) // Set R/W block length to 512
 8001ecc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d007      	beq.n	8001ee4 <sd_ini+0x14c>
 8001ed4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ed8:	2050      	movs	r0, #80	; 0x50
 8001eda:	f7ff fefb 	bl	8001cd4 <SD_cmd>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <sd_ini+0x158>
			    sdinfo.type = 0;
 8001ee4:	4b05      	ldr	r3, [pc, #20]	; (8001efc <sd_ini+0x164>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	701a      	strb	r2, [r3, #0]
 8001eea:	e001      	b.n	8001ef0 <sd_ini+0x158>

	  }
	  else
	  {

	    return 1;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e000      	b.n	8001ef2 <sd_ini+0x15a>
	  }




  return 0;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd90      	pop	{r4, r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20001ac0 	.word	0x20001ac0

08001f00 <Error>:

static void Error (void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  //LD_ON;
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <SPI_wait_ready>:

uint8_t SPI_wait_ready(void)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
  uint8_t res;
  uint16_t cnt;
  cnt=0;
 8001f14:	2300      	movs	r3, #0
 8001f16:	80fb      	strh	r3, [r7, #6]
  do {
    res=SPI_ReceiveByte();
 8001f18:	f000 f863 	bl	8001fe2 <SPI_ReceiveByte>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	717b      	strb	r3, [r7, #5]
    cnt++;
 8001f20:	88fb      	ldrh	r3, [r7, #6]
 8001f22:	3301      	adds	r3, #1
 8001f24:	80fb      	strh	r3, [r7, #6]
  } while ( (res!=0xFF)&&(cnt<0xFFFF) );
 8001f26:	797b      	ldrb	r3, [r7, #5]
 8001f28:	2bff      	cmp	r3, #255	; 0xff
 8001f2a:	d004      	beq.n	8001f36 <SPI_wait_ready+0x28>
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d1f0      	bne.n	8001f18 <SPI_wait_ready+0xa>
  if (cnt>=0xFFFF) return 1;
 8001f36:	88fb      	ldrh	r3, [r7, #6]
 8001f38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d101      	bne.n	8001f44 <SPI_wait_ready+0x36>
 8001f40:	2301      	movs	r3, #1
 8001f42:	e000      	b.n	8001f46 <SPI_wait_ready+0x38>
  return res;
 8001f44:	797b      	ldrb	r3, [r7, #5]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <SPIx_Write_Multi>:
{
	if(HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_READY) return F_OK;
	else return F_ERR;
}
F_RES SPIx_Write_Multi(uint8_t* tx_buf,uint32_t size)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af02      	add	r7, sp, #8
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
	if(HAL_SPI_TransmitReceive(&hspi1, tx_buf, spi_rx_buffer, size,HAL_MAX_DELAY)==HAL_OK) return F_OK;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8001f62:	9200      	str	r2, [sp, #0]
 8001f64:	4a07      	ldr	r2, [pc, #28]	; (8001f84 <SPIx_Write_Multi+0x34>)
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	4807      	ldr	r0, [pc, #28]	; (8001f88 <SPIx_Write_Multi+0x38>)
 8001f6a:	f004 fb04 	bl	8006576 <HAL_SPI_TransmitReceive>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <SPIx_Write_Multi+0x28>
 8001f74:	2300      	movs	r3, #0
 8001f76:	e000      	b.n	8001f7a <SPIx_Write_Multi+0x2a>
		else return F_ERR;
 8001f78:	2301      	movs	r3, #1
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20001ae8 	.word	0x20001ae8
 8001f88:	2000084c 	.word	0x2000084c

08001f8c <SPIx_WriteRead>:
	if(HAL_SPI_Transmit_DMA(&hspi1, tx_buf, size)==HAL_OK) return F_OK;
	else return F_ERR;
}

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af02      	add	r7, sp, #8
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 8001f9a:	f107 020f 	add.w	r2, r7, #15
 8001f9e:	1df9      	adds	r1, r7, #7
 8001fa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	4806      	ldr	r0, [pc, #24]	; (8001fc4 <SPIx_WriteRead+0x38>)
 8001faa:	f004 fae4 	bl	8006576 <HAL_SPI_TransmitReceive>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <SPIx_WriteRead+0x2c>
  {
    Error();
 8001fb4:	f7ff ffa4 	bl	8001f00 <Error>
  }
  return receivedbyte;
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	2000084c 	.word	0x2000084c

08001fc8 <SPI_SendByte>:

void SPI_SendByte(uint8_t bt)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]
  SPIx_WriteRead(bt);
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ffd9 	bl	8001f8c <SPIx_WriteRead>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <SPI_ReceiveByte>:

uint8_t SPI_ReceiveByte(void)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
  uint8_t bt = SPIx_WriteRead(0xFF);
 8001fe8:	20ff      	movs	r0, #255	; 0xff
 8001fea:	f7ff ffcf 	bl	8001f8c <SPIx_WriteRead>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
  return bt;
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <SPI_Release>:
void SPI_Release(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  SPIx_WriteRead(0xFF);
 8002000:	20ff      	movs	r0, #255	; 0xff
 8002002:	f7ff ffc3 	bl	8001f8c <SPIx_WriteRead>
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}

0800200a <SD_Read_Block>:

uint8_t SD_Read_Block (uint8_t *buff, uint32_t lba)
{
 800200a:	b590      	push	{r4, r7, lr}
 800200c:	b085      	sub	sp, #20
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
 8002012:	6039      	str	r1, [r7, #0]
  uint8_t result;
  uint16_t cnt;

  result=SD_cmd (CMD17, lba);
 8002014:	6839      	ldr	r1, [r7, #0]
 8002016:	2051      	movs	r0, #81	; 0x51
 8002018:	f7ff fe5c 	bl	8001cd4 <SD_cmd>
 800201c:	4603      	mov	r3, r0
 800201e:	737b      	strb	r3, [r7, #13]
  if (result!=0x00){
 8002020:	7b7b      	ldrb	r3, [r7, #13]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <SD_Read_Block+0x20>
	  return 5;
 8002026:	2305      	movs	r3, #5
 8002028:	e02f      	b.n	800208a <SD_Read_Block+0x80>
  }

  SPI_Release();
 800202a:	f7ff ffe7 	bl	8001ffc <SPI_Release>
   cnt=0;
 800202e:	2300      	movs	r3, #0
 8002030:	81fb      	strh	r3, [r7, #14]
   do{
     result=SPI_ReceiveByte();
 8002032:	f7ff ffd6 	bl	8001fe2 <SPI_ReceiveByte>
 8002036:	4603      	mov	r3, r0
 8002038:	737b      	strb	r3, [r7, #13]
     cnt++;
 800203a:	89fb      	ldrh	r3, [r7, #14]
 800203c:	3301      	adds	r3, #1
 800203e:	81fb      	strh	r3, [r7, #14]
   } while ( (result!=0xFE)&&(cnt<0xFFFF) );
 8002040:	7b7b      	ldrb	r3, [r7, #13]
 8002042:	2bfe      	cmp	r3, #254	; 0xfe
 8002044:	d004      	beq.n	8002050 <SD_Read_Block+0x46>
 8002046:	89fb      	ldrh	r3, [r7, #14]
 8002048:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800204c:	4293      	cmp	r3, r2
 800204e:	d1f0      	bne.n	8002032 <SD_Read_Block+0x28>
   if (cnt>=0xFFFF) {
 8002050:	89fb      	ldrh	r3, [r7, #14]
 8002052:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002056:	4293      	cmp	r3, r2
 8002058:	d101      	bne.n	800205e <SD_Read_Block+0x54>
	   return 5;
 800205a:	2305      	movs	r3, #5
 800205c:	e015      	b.n	800208a <SD_Read_Block+0x80>
   }
   for (cnt=0;cnt<512;cnt++) buff[cnt]=SPI_ReceiveByte();
 800205e:	2300      	movs	r3, #0
 8002060:	81fb      	strh	r3, [r7, #14]
 8002062:	e009      	b.n	8002078 <SD_Read_Block+0x6e>
 8002064:	89fb      	ldrh	r3, [r7, #14]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	18d4      	adds	r4, r2, r3
 800206a:	f7ff ffba 	bl	8001fe2 <SPI_ReceiveByte>
 800206e:	4603      	mov	r3, r0
 8002070:	7023      	strb	r3, [r4, #0]
 8002072:	89fb      	ldrh	r3, [r7, #14]
 8002074:	3301      	adds	r3, #1
 8002076:	81fb      	strh	r3, [r7, #14]
 8002078:	89fb      	ldrh	r3, [r7, #14]
 800207a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800207e:	d3f1      	bcc.n	8002064 <SD_Read_Block+0x5a>
   SPI_Release();
 8002080:	f7ff ffbc 	bl	8001ffc <SPI_Release>
   SPI_Release();
 8002084:	f7ff ffba 	bl	8001ffc <SPI_Release>



  return 0;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	bd90      	pop	{r4, r7, pc}
	...

08002094 <SD_Write_Blocks>:

uint8_t SD_Write_Blocks (uint8_t *buff, uint32_t lba,uint16_t count)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	4613      	mov	r3, r2
 80020a0:	80fb      	strh	r3, [r7, #6]
  tick1=xTaskGetTickCount();
 80020a2:	f010 f961 	bl	8012368 <xTaskGetTickCount>
 80020a6:	4603      	mov	r3, r0
 80020a8:	4a39      	ldr	r2, [pc, #228]	; (8002190 <SD_Write_Blocks+0xfc>)
 80020aa:	6013      	str	r3, [r2, #0]
  uint8_t result;
  uint16_t cnt;


  result=SD_cmd(CMD25,lba);//CMD25
 80020ac:	68b9      	ldr	r1, [r7, #8]
 80020ae:	2059      	movs	r0, #89	; 0x59
 80020b0:	f7ff fe10 	bl	8001cd4 <SD_cmd>
 80020b4:	4603      	mov	r3, r0
 80020b6:	75fb      	strb	r3, [r7, #23]
  if (result!=0x00){
 80020b8:	7dfb      	ldrb	r3, [r7, #23]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <SD_Write_Blocks+0x2e>
	  return 6;
 80020be:	2306      	movs	r3, #6
 80020c0:	e061      	b.n	8002186 <SD_Write_Blocks+0xf2>
  }
  SPI_Release();  //1byte gap
 80020c2:	f7ff ff9b 	bl	8001ffc <SPI_Release>

  for(int i=0;i<count;i++){
 80020c6:	2300      	movs	r3, #0
 80020c8:	61bb      	str	r3, [r7, #24]
 80020ca:	e035      	b.n	8002138 <SD_Write_Blocks+0xa4>
   SPI_SendByte (0xFC);//token CMD25
 80020cc:	20fc      	movs	r0, #252	; 0xfc
 80020ce:	f7ff ff7b 	bl	8001fc8 <SPI_SendByte>

   SPIx_Write_Multi(buff,512);
 80020d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f7ff ff3a 	bl	8001f50 <SPIx_Write_Multi>
   buff+=512;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80020e2:	60fb      	str	r3, [r7, #12]
   SPI_Release();   //CRC
 80020e4:	f7ff ff8a 	bl	8001ffc <SPI_Release>
   SPI_Release();   //CRC
 80020e8:	f7ff ff88 	bl	8001ffc <SPI_Release>


   result=SPI_ReceiveByte();
 80020ec:	f7ff ff79 	bl	8001fe2 <SPI_ReceiveByte>
 80020f0:	4603      	mov	r3, r0
 80020f2:	75fb      	strb	r3, [r7, #23]
   if ((result&0x1F)!=0x05) {
 80020f4:	7dfb      	ldrb	r3, [r7, #23]
 80020f6:	f003 031f 	and.w	r3, r3, #31
 80020fa:	2b05      	cmp	r3, #5
 80020fc:	d001      	beq.n	8002102 <SD_Write_Blocks+0x6e>
	  return 6;
 80020fe:	2306      	movs	r3, #6
 8002100:	e041      	b.n	8002186 <SD_Write_Blocks+0xf2>
   }
   cnt=0;
 8002102:	2300      	movs	r3, #0
 8002104:	83fb      	strh	r3, [r7, #30]
   do {
    result=SPI_ReceiveByte();
 8002106:	f7ff ff6c 	bl	8001fe2 <SPI_ReceiveByte>
 800210a:	4603      	mov	r3, r0
 800210c:	75fb      	strb	r3, [r7, #23]
    cnt++;
 800210e:	8bfb      	ldrh	r3, [r7, #30]
 8002110:	3301      	adds	r3, #1
 8002112:	83fb      	strh	r3, [r7, #30]
   } while ( (result!=0xFF)&&(cnt<0xFFFF) );
 8002114:	7dfb      	ldrb	r3, [r7, #23]
 8002116:	2bff      	cmp	r3, #255	; 0xff
 8002118:	d004      	beq.n	8002124 <SD_Write_Blocks+0x90>
 800211a:	8bfb      	ldrh	r3, [r7, #30]
 800211c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002120:	4293      	cmp	r3, r2
 8002122:	d1f0      	bne.n	8002106 <SD_Write_Blocks+0x72>
   if (cnt>=0xFFFF) {
 8002124:	8bfb      	ldrh	r3, [r7, #30]
 8002126:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800212a:	4293      	cmp	r3, r2
 800212c:	d101      	bne.n	8002132 <SD_Write_Blocks+0x9e>
	  return 6;
 800212e:	2306      	movs	r3, #6
 8002130:	e029      	b.n	8002186 <SD_Write_Blocks+0xf2>
  for(int i=0;i<count;i++){
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	3301      	adds	r3, #1
 8002136:	61bb      	str	r3, [r7, #24]
 8002138:	88fb      	ldrh	r3, [r7, #6]
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	429a      	cmp	r2, r3
 800213e:	dbc5      	blt.n	80020cc <SD_Write_Blocks+0x38>
   }
  }

  SPI_SendByte (0xFD); //stop transaction token for CMD25
 8002140:	20fd      	movs	r0, #253	; 0xfd
 8002142:	f7ff ff41 	bl	8001fc8 <SPI_SendByte>
  SPI_Release();       //1byte gap
 8002146:	f7ff ff59 	bl	8001ffc <SPI_Release>
  cnt=0;
 800214a:	2300      	movs	r3, #0
 800214c:	83fb      	strh	r3, [r7, #30]
  do {
	result=SPI_ReceiveByte();
 800214e:	f7ff ff48 	bl	8001fe2 <SPI_ReceiveByte>
 8002152:	4603      	mov	r3, r0
 8002154:	75fb      	strb	r3, [r7, #23]
	cnt++;
 8002156:	8bfb      	ldrh	r3, [r7, #30]
 8002158:	3301      	adds	r3, #1
 800215a:	83fb      	strh	r3, [r7, #30]
  } while ( (result!=0xFF)&&(cnt<0xFFFF) );
 800215c:	7dfb      	ldrb	r3, [r7, #23]
 800215e:	2bff      	cmp	r3, #255	; 0xff
 8002160:	d004      	beq.n	800216c <SD_Write_Blocks+0xd8>
 8002162:	8bfb      	ldrh	r3, [r7, #30]
 8002164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002168:	4293      	cmp	r3, r2
 800216a:	d1f0      	bne.n	800214e <SD_Write_Blocks+0xba>
  if (cnt>=0xFFFF) return 6;
 800216c:	8bfb      	ldrh	r3, [r7, #30]
 800216e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002172:	4293      	cmp	r3, r2
 8002174:	d101      	bne.n	800217a <SD_Write_Blocks+0xe6>
 8002176:	2306      	movs	r3, #6
 8002178:	e005      	b.n	8002186 <SD_Write_Blocks+0xf2>
  tick2=xTaskGetTickCount();
 800217a:	f010 f8f5 	bl	8012368 <xTaskGetTickCount>
 800217e:	4603      	mov	r3, r0
 8002180:	4a04      	ldr	r2, [pc, #16]	; (8002194 <SD_Write_Blocks+0x100>)
 8002182:	6013      	str	r3, [r2, #0]
  return 0;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3720      	adds	r7, #32
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20001ab4 	.word	0x20001ab4
 8002194:	20001ab8 	.word	0x20001ab8

08002198 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	607b      	str	r3, [r7, #4]
 80021a2:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_MspInit+0x54>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	4a11      	ldr	r2, [pc, #68]	; (80021ec <HAL_MspInit+0x54>)
 80021a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ac:	6453      	str	r3, [r2, #68]	; 0x44
 80021ae:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <HAL_MspInit+0x54>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b6:	607b      	str	r3, [r7, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	603b      	str	r3, [r7, #0]
 80021be:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_MspInit+0x54>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_MspInit+0x54>)
 80021c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <HAL_MspInit+0x54>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d2:	603b      	str	r3, [r7, #0]
 80021d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021d6:	2200      	movs	r2, #0
 80021d8:	210f      	movs	r1, #15
 80021da:	f06f 0001 	mvn.w	r0, #1
 80021de:	f000 fc99 	bl	8002b14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800

080021f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021f8:	f107 0308 	add.w	r3, r7, #8
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a0c      	ldr	r2, [pc, #48]	; (800223c <HAL_RTC_MspInit+0x4c>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d111      	bne.n	8002234 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002210:	2302      	movs	r3, #2
 8002212:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002214:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002218:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800221a:	f107 0308 	add.w	r3, r7, #8
 800221e:	4618      	mov	r0, r3
 8002220:	f003 fd40 	bl	8005ca4 <HAL_RCCEx_PeriphCLKConfig>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800222a:	f7ff fc3b 	bl	8001aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800222e:	4b04      	ldr	r3, [pc, #16]	; (8002240 <HAL_RTC_MspInit+0x50>)
 8002230:	2201      	movs	r2, #1
 8002232:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002234:	bf00      	nop
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40002800 	.word	0x40002800
 8002240:	42470e3c 	.word	0x42470e3c

08002244 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08a      	sub	sp, #40	; 0x28
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a34      	ldr	r2, [pc, #208]	; (8002334 <HAL_SPI_MspInit+0xf0>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d162      	bne.n	800232c <HAL_SPI_MspInit+0xe8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	4b33      	ldr	r3, [pc, #204]	; (8002338 <HAL_SPI_MspInit+0xf4>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	4a32      	ldr	r2, [pc, #200]	; (8002338 <HAL_SPI_MspInit+0xf4>)
 8002270:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002274:	6453      	str	r3, [r2, #68]	; 0x44
 8002276:	4b30      	ldr	r3, [pc, #192]	; (8002338 <HAL_SPI_MspInit+0xf4>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800227e:	613b      	str	r3, [r7, #16]
 8002280:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	4b2c      	ldr	r3, [pc, #176]	; (8002338 <HAL_SPI_MspInit+0xf4>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	4a2b      	ldr	r2, [pc, #172]	; (8002338 <HAL_SPI_MspInit+0xf4>)
 800228c:	f043 0302 	orr.w	r3, r3, #2
 8002290:	6313      	str	r3, [r2, #48]	; 0x30
 8002292:	4b29      	ldr	r3, [pc, #164]	; (8002338 <HAL_SPI_MspInit+0xf4>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800229e:	2338      	movs	r3, #56	; 0x38
 80022a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a2:	2302      	movs	r3, #2
 80022a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022a6:	2301      	movs	r3, #1
 80022a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022aa:	2303      	movs	r3, #3
 80022ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022ae:	2305      	movs	r3, #5
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b2:	f107 0314 	add.w	r3, r7, #20
 80022b6:	4619      	mov	r1, r3
 80022b8:	4820      	ldr	r0, [pc, #128]	; (800233c <HAL_SPI_MspInit+0xf8>)
 80022ba:	f001 faa9 	bl	8003810 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80022be:	4b20      	ldr	r3, [pc, #128]	; (8002340 <HAL_SPI_MspInit+0xfc>)
 80022c0:	4a20      	ldr	r2, [pc, #128]	; (8002344 <HAL_SPI_MspInit+0x100>)
 80022c2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80022c4:	4b1e      	ldr	r3, [pc, #120]	; (8002340 <HAL_SPI_MspInit+0xfc>)
 80022c6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80022ca:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022cc:	4b1c      	ldr	r3, [pc, #112]	; (8002340 <HAL_SPI_MspInit+0xfc>)
 80022ce:	2240      	movs	r2, #64	; 0x40
 80022d0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022d2:	4b1b      	ldr	r3, [pc, #108]	; (8002340 <HAL_SPI_MspInit+0xfc>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022d8:	4b19      	ldr	r3, [pc, #100]	; (8002340 <HAL_SPI_MspInit+0xfc>)
 80022da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022de:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022e0:	4b17      	ldr	r3, [pc, #92]	; (8002340 <HAL_SPI_MspInit+0xfc>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022e6:	4b16      	ldr	r3, [pc, #88]	; (8002340 <HAL_SPI_MspInit+0xfc>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80022ec:	4b14      	ldr	r3, [pc, #80]	; (8002340 <HAL_SPI_MspInit+0xfc>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80022f2:	4b13      	ldr	r3, [pc, #76]	; (8002340 <HAL_SPI_MspInit+0xfc>)
 80022f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022f8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022fa:	4b11      	ldr	r3, [pc, #68]	; (8002340 <HAL_SPI_MspInit+0xfc>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002300:	480f      	ldr	r0, [pc, #60]	; (8002340 <HAL_SPI_MspInit+0xfc>)
 8002302:	f000 fc31 	bl	8002b68 <HAL_DMA_Init>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 800230c:	f7ff fbca 	bl	8001aa4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a0b      	ldr	r2, [pc, #44]	; (8002340 <HAL_SPI_MspInit+0xfc>)
 8002314:	649a      	str	r2, [r3, #72]	; 0x48
 8002316:	4a0a      	ldr	r2, [pc, #40]	; (8002340 <HAL_SPI_MspInit+0xfc>)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800231c:	2200      	movs	r2, #0
 800231e:	2105      	movs	r1, #5
 8002320:	2023      	movs	r0, #35	; 0x23
 8002322:	f000 fbf7 	bl	8002b14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002326:	2023      	movs	r0, #35	; 0x23
 8002328:	f000 fc10 	bl	8002b4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800232c:	bf00      	nop
 800232e:	3728      	adds	r7, #40	; 0x28
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40013000 	.word	0x40013000
 8002338:	40023800 	.word	0x40023800
 800233c:	40020400 	.word	0x40020400
 8002340:	200008a4 	.word	0x200008a4
 8002344:	40026458 	.word	0x40026458

08002348 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002358:	d115      	bne.n	8002386 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <HAL_TIM_Base_MspInit+0x48>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	4a0b      	ldr	r2, [pc, #44]	; (8002390 <HAL_TIM_Base_MspInit+0x48>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6413      	str	r3, [r2, #64]	; 0x40
 800236a:	4b09      	ldr	r3, [pc, #36]	; (8002390 <HAL_TIM_Base_MspInit+0x48>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002376:	2200      	movs	r2, #0
 8002378:	2105      	movs	r1, #5
 800237a:	201c      	movs	r0, #28
 800237c:	f000 fbca 	bl	8002b14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002380:	201c      	movs	r0, #28
 8002382:	f000 fbe3 	bl	8002b4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002386:	bf00      	nop
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40023800 	.word	0x40023800

08002394 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08a      	sub	sp, #40	; 0x28
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	f107 0314 	add.w	r3, r7, #20
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a1d      	ldr	r2, [pc, #116]	; (8002428 <HAL_UART_MspInit+0x94>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d134      	bne.n	8002420 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	613b      	str	r3, [r7, #16]
 80023ba:	4b1c      	ldr	r3, [pc, #112]	; (800242c <HAL_UART_MspInit+0x98>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	4a1b      	ldr	r2, [pc, #108]	; (800242c <HAL_UART_MspInit+0x98>)
 80023c0:	f043 0310 	orr.w	r3, r3, #16
 80023c4:	6453      	str	r3, [r2, #68]	; 0x44
 80023c6:	4b19      	ldr	r3, [pc, #100]	; (800242c <HAL_UART_MspInit+0x98>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	4b15      	ldr	r3, [pc, #84]	; (800242c <HAL_UART_MspInit+0x98>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	4a14      	ldr	r2, [pc, #80]	; (800242c <HAL_UART_MspInit+0x98>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	6313      	str	r3, [r2, #48]	; 0x30
 80023e2:	4b12      	ldr	r3, [pc, #72]	; (800242c <HAL_UART_MspInit+0x98>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f4:	2302      	movs	r3, #2
 80023f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fc:	2303      	movs	r3, #3
 80023fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002400:	2307      	movs	r3, #7
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002404:	f107 0314 	add.w	r3, r7, #20
 8002408:	4619      	mov	r1, r3
 800240a:	4809      	ldr	r0, [pc, #36]	; (8002430 <HAL_UART_MspInit+0x9c>)
 800240c:	f001 fa00 	bl	8003810 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002410:	2200      	movs	r2, #0
 8002412:	2105      	movs	r1, #5
 8002414:	2025      	movs	r0, #37	; 0x25
 8002416:	f000 fb7d 	bl	8002b14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800241a:	2025      	movs	r0, #37	; 0x25
 800241c:	f000 fb96 	bl	8002b4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002420:	bf00      	nop
 8002422:	3728      	adds	r7, #40	; 0x28
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40011000 	.word	0x40011000
 800242c:	40023800 	.word	0x40023800
 8002430:	40020000 	.word	0x40020000

08002434 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08c      	sub	sp, #48	; 0x30
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002444:	2200      	movs	r2, #0
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	2019      	movs	r0, #25
 800244a:	f000 fb63 	bl	8002b14 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800244e:	2019      	movs	r0, #25
 8002450:	f000 fb7c 	bl	8002b4c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	4b1f      	ldr	r3, [pc, #124]	; (80024d8 <HAL_InitTick+0xa4>)
 800245a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245c:	4a1e      	ldr	r2, [pc, #120]	; (80024d8 <HAL_InitTick+0xa4>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	6453      	str	r3, [r2, #68]	; 0x44
 8002464:	4b1c      	ldr	r3, [pc, #112]	; (80024d8 <HAL_InitTick+0xa4>)
 8002466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002470:	f107 0210 	add.w	r2, r7, #16
 8002474:	f107 0314 	add.w	r3, r7, #20
 8002478:	4611      	mov	r1, r2
 800247a:	4618      	mov	r0, r3
 800247c:	f003 fbe0 	bl	8005c40 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002480:	f003 fbca 	bl	8005c18 <HAL_RCC_GetPCLK2Freq>
 8002484:	4603      	mov	r3, r0
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800248a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248c:	4a13      	ldr	r2, [pc, #76]	; (80024dc <HAL_InitTick+0xa8>)
 800248e:	fba2 2303 	umull	r2, r3, r2, r3
 8002492:	0c9b      	lsrs	r3, r3, #18
 8002494:	3b01      	subs	r3, #1
 8002496:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002498:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <HAL_InitTick+0xac>)
 800249a:	4a12      	ldr	r2, [pc, #72]	; (80024e4 <HAL_InitTick+0xb0>)
 800249c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800249e:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <HAL_InitTick+0xac>)
 80024a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024a4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80024a6:	4a0e      	ldr	r2, [pc, #56]	; (80024e0 <HAL_InitTick+0xac>)
 80024a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024aa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80024ac:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <HAL_InitTick+0xac>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b2:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <HAL_InitTick+0xac>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80024b8:	4809      	ldr	r0, [pc, #36]	; (80024e0 <HAL_InitTick+0xac>)
 80024ba:	f004 fbe7 	bl	8006c8c <HAL_TIM_Base_Init>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d104      	bne.n	80024ce <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80024c4:	4806      	ldr	r0, [pc, #24]	; (80024e0 <HAL_InitTick+0xac>)
 80024c6:	f004 fc31 	bl	8006d2c <HAL_TIM_Base_Start_IT>
 80024ca:	4603      	mov	r3, r0
 80024cc:	e000      	b.n	80024d0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3730      	adds	r7, #48	; 0x30
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40023800 	.word	0x40023800
 80024dc:	431bde83 	.word	0x431bde83
 80024e0:	20001ce8 	.word	0x20001ce8
 80024e4:	40010000 	.word	0x40010000

080024e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024ec:	e7fe      	b.n	80024ec <NMI_Handler+0x4>

080024ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024f2:	e7fe      	b.n	80024f2 <HardFault_Handler+0x4>

080024f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024f8:	e7fe      	b.n	80024f8 <MemManage_Handler+0x4>

080024fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024fa:	b480      	push	{r7}
 80024fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024fe:	e7fe      	b.n	80024fe <BusFault_Handler+0x4>

08002500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002504:	e7fe      	b.n	8002504 <UsageFault_Handler+0x4>

08002506 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002506:	b480      	push	{r7}
 8002508:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002518:	4802      	ldr	r0, [pc, #8]	; (8002524 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800251a:	f004 fc77 	bl	8006e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20001ce8 	.word	0x20001ce8

08002528 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800252c:	4802      	ldr	r0, [pc, #8]	; (8002538 <TIM2_IRQHandler+0x10>)
 800252e:	f004 fc6d 	bl	8006e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000904 	.word	0x20000904

0800253c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002540:	4802      	ldr	r0, [pc, #8]	; (800254c <SPI1_IRQHandler+0x10>)
 8002542:	f004 f9bb 	bl	80068bc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	2000084c 	.word	0x2000084c

08002550 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002554:	4802      	ldr	r0, [pc, #8]	; (8002560 <USART1_IRQHandler+0x10>)
 8002556:	f005 f8dd 	bl	8007714 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	2000094c 	.word	0x2000094c

08002564 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002568:	4802      	ldr	r0, [pc, #8]	; (8002574 <DMA2_Stream3_IRQHandler+0x10>)
 800256a:	f000 fc3d 	bl	8002de8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	200008a4 	.word	0x200008a4

08002578 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800257c:	4802      	ldr	r0, [pc, #8]	; (8002588 <OTG_FS_IRQHandler+0x10>)
 800257e:	f001 fd67 	bl	8004050 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	2000c984 	.word	0x2000c984

0800258c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
	return 1;
 8002590:	2301      	movs	r3, #1
}
 8002592:	4618      	mov	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <_kill>:

int _kill(int pid, int sig)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80025a6:	f011 fa9b 	bl	8013ae0 <__errno>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2216      	movs	r2, #22
 80025ae:	601a      	str	r2, [r3, #0]
	return -1;
 80025b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <_exit>:

void _exit (int status)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025c4:	f04f 31ff 	mov.w	r1, #4294967295
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff ffe7 	bl	800259c <_kill>
	while (1) {}		/* Make sure we hang here */
 80025ce:	e7fe      	b.n	80025ce <_exit+0x12>

080025d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	e00a      	b.n	80025f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025e2:	f3af 8000 	nop.w
 80025e6:	4601      	mov	r1, r0
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	60ba      	str	r2, [r7, #8]
 80025ee:	b2ca      	uxtb	r2, r1
 80025f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	3301      	adds	r3, #1
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	dbf0      	blt.n	80025e2 <_read+0x12>
	}

return len;
 8002600:	687b      	ldr	r3, [r7, #4]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b086      	sub	sp, #24
 800260e:	af00      	add	r7, sp, #0
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002616:	2300      	movs	r3, #0
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	e009      	b.n	8002630 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	60ba      	str	r2, [r7, #8]
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	3301      	adds	r3, #1
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	429a      	cmp	r2, r3
 8002636:	dbf1      	blt.n	800261c <_write+0x12>
	}
	return len;
 8002638:	687b      	ldr	r3, [r7, #4]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <_close>:

int _close(int file)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
	return -1;
 800264a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800264e:	4618      	mov	r0, r3
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800266a:	605a      	str	r2, [r3, #4]
	return 0;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <_isatty>:

int _isatty(int file)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
	return 1;
 8002682:	2301      	movs	r3, #1
}
 8002684:	4618      	mov	r0, r3
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
	return 0;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
	...

080026ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026b4:	4a14      	ldr	r2, [pc, #80]	; (8002708 <_sbrk+0x5c>)
 80026b6:	4b15      	ldr	r3, [pc, #84]	; (800270c <_sbrk+0x60>)
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026c0:	4b13      	ldr	r3, [pc, #76]	; (8002710 <_sbrk+0x64>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d102      	bne.n	80026ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026c8:	4b11      	ldr	r3, [pc, #68]	; (8002710 <_sbrk+0x64>)
 80026ca:	4a12      	ldr	r2, [pc, #72]	; (8002714 <_sbrk+0x68>)
 80026cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ce:	4b10      	ldr	r3, [pc, #64]	; (8002710 <_sbrk+0x64>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4413      	add	r3, r2
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d207      	bcs.n	80026ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026dc:	f011 fa00 	bl	8013ae0 <__errno>
 80026e0:	4603      	mov	r3, r0
 80026e2:	220c      	movs	r2, #12
 80026e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026e6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ea:	e009      	b.n	8002700 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026ec:	4b08      	ldr	r3, [pc, #32]	; (8002710 <_sbrk+0x64>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026f2:	4b07      	ldr	r3, [pc, #28]	; (8002710 <_sbrk+0x64>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	4a05      	ldr	r2, [pc, #20]	; (8002710 <_sbrk+0x64>)
 80026fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026fe:	68fb      	ldr	r3, [r7, #12]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	20020000 	.word	0x20020000
 800270c:	00000400 	.word	0x00000400
 8002710:	20001d34 	.word	0x20001d34
 8002714:	2000ccc0 	.word	0x2000ccc0

08002718 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800271c:	4b06      	ldr	r3, [pc, #24]	; (8002738 <SystemInit+0x20>)
 800271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002722:	4a05      	ldr	r2, [pc, #20]	; (8002738 <SystemInit+0x20>)
 8002724:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002728:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	e000ed00 	.word	0xe000ed00

0800273c <wav_file_open>:


extern UART_HandleTypeDef huart1;

F_RES wav_file_open(wav_file_typedef* self_object,char* filename)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  memcpy(self_object->header.chunk.prefix,"RIFF",4);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2204      	movs	r2, #4
 800274a:	4920      	ldr	r1, [pc, #128]	; (80027cc <wav_file_open+0x90>)
 800274c:	4618      	mov	r0, r3
 800274e:	f011 fafd 	bl	8013d4c <memcpy>
  memcpy(self_object->header.chunk.postfix,"WAVE",4);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3308      	adds	r3, #8
 8002756:	2204      	movs	r2, #4
 8002758:	491d      	ldr	r1, [pc, #116]	; (80027d0 <wav_file_open+0x94>)
 800275a:	4618      	mov	r0, r3
 800275c:	f011 faf6 	bl	8013d4c <memcpy>
  memcpy(self_object->header.subchunk_fmt.prefix,"fmt ",4);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	330c      	adds	r3, #12
 8002764:	2204      	movs	r2, #4
 8002766:	491b      	ldr	r1, [pc, #108]	; (80027d4 <wav_file_open+0x98>)
 8002768:	4618      	mov	r0, r3
 800276a:	f011 faef 	bl	8013d4c <memcpy>
  memcpy(self_object->header.subchunk_data.prefix,"data",4);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	3324      	adds	r3, #36	; 0x24
 8002772:	2204      	movs	r2, #4
 8002774:	4918      	ldr	r1, [pc, #96]	; (80027d8 <wav_file_open+0x9c>)
 8002776:	4618      	mov	r0, r3
 8002778:	f011 fae8 	bl	8013d4c <memcpy>
  self_object->data_counter=0;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8002784:	2200      	movs	r2, #0
 8002786:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800278a:	2200      	movs	r2, #0
 800278c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8002790:	2200      	movs	r2, #0
 8002792:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  if(f_open(&self_object->media.file,filename,FA_CREATE_ALWAYS|FA_WRITE)==FR_OK){
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3330      	adds	r3, #48	; 0x30
 800279a:	220a      	movs	r2, #10
 800279c:	6839      	ldr	r1, [r7, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f00c ffdc 	bl	800f75c <f_open>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10b      	bne.n	80027c2 <wav_file_open+0x86>
   f_lseek(&self_object->media.file, sizeof(self_object->header));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80027b0:	f04f 022c 	mov.w	r2, #44	; 0x2c
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	4608      	mov	r0, r1
 80027ba:	f00d fd8c 	bl	80102d6 <f_lseek>
   return F_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	e000      	b.n	80027c4 <wav_file_open+0x88>
  }
  return F_ERR;
 80027c2:	2301      	movs	r3, #1
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	08016770 	.word	0x08016770
 80027d0:	08016778 	.word	0x08016778
 80027d4:	08016780 	.word	0x08016780
 80027d8:	08016788 	.word	0x08016788

080027dc <wav_file_close>:

F_RES wav_file_close(wav_file_typedef* self_object)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
	self_object->header.subchunk_data.size=self_object->data_counter;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	629a      	str	r2, [r3, #40]	; 0x28
	self_object->header.chunk.size=36+self_object->data_counter;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	605a      	str	r2, [r3, #4]
 	f_lseek(&self_object->media.file, 0);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	f04f 0300 	mov.w	r3, #0
 8002806:	4608      	mov	r0, r1
 8002808:	f00d fd65 	bl	80102d6 <f_lseek>
 	if(f_write(&self_object->media.file,(uint8_t*)&self_object->header,sizeof(self_object->header),(void*)&self_object->media.byteswritten)==FR_OK){
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 800281a:	222c      	movs	r2, #44	; 0x2c
 800281c:	f00d fa5f 	bl	800fcde <f_write>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d106      	bne.n	8002834 <wav_file_close+0x58>
 	  f_close(&self_object->media.file);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3330      	adds	r3, #48	; 0x30
 800282a:	4618      	mov	r0, r3
 800282c:	f00d fd29 	bl	8010282 <f_close>
 	  return F_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	e000      	b.n	8002836 <wav_file_close+0x5a>
 	}
 	return F_ERR;
 8002834:	2301      	movs	r3, #1
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <wav_file_write>:

F_RES wav_file_write(wav_file_typedef* self_object,uint8_t* data,uint32_t length)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b086      	sub	sp, #24
 8002842:	af00      	add	r7, sp, #0
 8002844:	60f8      	str	r0, [r7, #12]
 8002846:	60b9      	str	r1, [r7, #8]
 8002848:	607a      	str	r2, [r7, #4]
	FRESULT res;
	self_object->data_counter+=length;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	441a      	add	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	62da      	str	r2, [r3, #44]	; 0x2c
	res=f_write(&self_object->media.file,data,length,(void*)&self_object->media.byteswritten);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	68b9      	ldr	r1, [r7, #8]
 8002866:	f00d fa3a 	bl	800fcde <f_write>
 800286a:	4603      	mov	r3, r0
 800286c:	75fb      	strb	r3, [r7, #23]
	if(res==FR_OK) return F_OK;
 800286e:	7dfb      	ldrb	r3, [r7, #23]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <wav_file_write+0x3a>
 8002874:	2300      	movs	r3, #0
 8002876:	e000      	b.n	800287a <wav_file_write+0x3c>
	return F_ERR;
 8002878:	2301      	movs	r3, #1
}
 800287a:	4618      	mov	r0, r3
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002884:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002888:	480d      	ldr	r0, [pc, #52]	; (80028c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800288a:	490e      	ldr	r1, [pc, #56]	; (80028c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800288c:	4a0e      	ldr	r2, [pc, #56]	; (80028c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800288e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002890:	e002      	b.n	8002898 <LoopCopyDataInit>

08002892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002896:	3304      	adds	r3, #4

08002898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800289a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800289c:	d3f9      	bcc.n	8002892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800289e:	4a0b      	ldr	r2, [pc, #44]	; (80028cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028a0:	4c0b      	ldr	r4, [pc, #44]	; (80028d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80028a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028a4:	e001      	b.n	80028aa <LoopFillZerobss>

080028a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028a8:	3204      	adds	r2, #4

080028aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028ac:	d3fb      	bcc.n	80028a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80028ae:	f7ff ff33 	bl	8002718 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028b2:	f011 fa11 	bl	8013cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028b6:	f7fe fbcb 	bl	8001050 <main>
  bx  lr    
 80028ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80028bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028c4:	20000378 	.word	0x20000378
  ldr r2, =_sidata
 80028c8:	08017014 	.word	0x08017014
  ldr r2, =_sbss
 80028cc:	20000378 	.word	0x20000378
  ldr r4, =_ebss
 80028d0:	2000ccc0 	.word	0x2000ccc0

080028d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028d4:	e7fe      	b.n	80028d4 <ADC_IRQHandler>
	...

080028d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028dc:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <HAL_Init+0x40>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a0d      	ldr	r2, [pc, #52]	; (8002918 <HAL_Init+0x40>)
 80028e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028e8:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <HAL_Init+0x40>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a0a      	ldr	r2, [pc, #40]	; (8002918 <HAL_Init+0x40>)
 80028ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028f4:	4b08      	ldr	r3, [pc, #32]	; (8002918 <HAL_Init+0x40>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a07      	ldr	r2, [pc, #28]	; (8002918 <HAL_Init+0x40>)
 80028fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002900:	2003      	movs	r0, #3
 8002902:	f000 f8fc 	bl	8002afe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002906:	200f      	movs	r0, #15
 8002908:	f7ff fd94 	bl	8002434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800290c:	f7ff fc44 	bl	8002198 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40023c00 	.word	0x40023c00

0800291c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002920:	4b06      	ldr	r3, [pc, #24]	; (800293c <HAL_IncTick+0x20>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	461a      	mov	r2, r3
 8002926:	4b06      	ldr	r3, [pc, #24]	; (8002940 <HAL_IncTick+0x24>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4413      	add	r3, r2
 800292c:	4a04      	ldr	r2, [pc, #16]	; (8002940 <HAL_IncTick+0x24>)
 800292e:	6013      	str	r3, [r2, #0]
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	2000023c 	.word	0x2000023c
 8002940:	20001d38 	.word	0x20001d38

08002944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  return uwTick;
 8002948:	4b03      	ldr	r3, [pc, #12]	; (8002958 <HAL_GetTick+0x14>)
 800294a:	681b      	ldr	r3, [r3, #0]
}
 800294c:	4618      	mov	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	20001d38 	.word	0x20001d38

0800295c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002964:	f7ff ffee 	bl	8002944 <HAL_GetTick>
 8002968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002974:	d005      	beq.n	8002982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002976:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <HAL_Delay+0x44>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4413      	add	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002982:	bf00      	nop
 8002984:	f7ff ffde 	bl	8002944 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	429a      	cmp	r2, r3
 8002992:	d8f7      	bhi.n	8002984 <HAL_Delay+0x28>
  {
  }
}
 8002994:	bf00      	nop
 8002996:	bf00      	nop
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	2000023c 	.word	0x2000023c

080029a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029b4:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <__NVIC_SetPriorityGrouping+0x44>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029c0:	4013      	ands	r3, r2
 80029c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029d6:	4a04      	ldr	r2, [pc, #16]	; (80029e8 <__NVIC_SetPriorityGrouping+0x44>)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	60d3      	str	r3, [r2, #12]
}
 80029dc:	bf00      	nop
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	e000ed00 	.word	0xe000ed00

080029ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029f0:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <__NVIC_GetPriorityGrouping+0x18>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	0a1b      	lsrs	r3, r3, #8
 80029f6:	f003 0307 	and.w	r3, r3, #7
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	db0b      	blt.n	8002a32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	f003 021f 	and.w	r2, r3, #31
 8002a20:	4907      	ldr	r1, [pc, #28]	; (8002a40 <__NVIC_EnableIRQ+0x38>)
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	2001      	movs	r0, #1
 8002a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	e000e100 	.word	0xe000e100

08002a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	6039      	str	r1, [r7, #0]
 8002a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	db0a      	blt.n	8002a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	490c      	ldr	r1, [pc, #48]	; (8002a90 <__NVIC_SetPriority+0x4c>)
 8002a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a62:	0112      	lsls	r2, r2, #4
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	440b      	add	r3, r1
 8002a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a6c:	e00a      	b.n	8002a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	4908      	ldr	r1, [pc, #32]	; (8002a94 <__NVIC_SetPriority+0x50>)
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	3b04      	subs	r3, #4
 8002a7c:	0112      	lsls	r2, r2, #4
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	440b      	add	r3, r1
 8002a82:	761a      	strb	r2, [r3, #24]
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000e100 	.word	0xe000e100
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b089      	sub	sp, #36	; 0x24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f1c3 0307 	rsb	r3, r3, #7
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	bf28      	it	cs
 8002ab6:	2304      	movcs	r3, #4
 8002ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	3304      	adds	r3, #4
 8002abe:	2b06      	cmp	r3, #6
 8002ac0:	d902      	bls.n	8002ac8 <NVIC_EncodePriority+0x30>
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	3b03      	subs	r3, #3
 8002ac6:	e000      	b.n	8002aca <NVIC_EncodePriority+0x32>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002acc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43da      	mvns	r2, r3
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	401a      	ands	r2, r3
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aea:	43d9      	mvns	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af0:	4313      	orrs	r3, r2
         );
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3724      	adds	r7, #36	; 0x24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b082      	sub	sp, #8
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7ff ff4c 	bl	80029a4 <__NVIC_SetPriorityGrouping>
}
 8002b0c:	bf00      	nop
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
 8002b20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b26:	f7ff ff61 	bl	80029ec <__NVIC_GetPriorityGrouping>
 8002b2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	68b9      	ldr	r1, [r7, #8]
 8002b30:	6978      	ldr	r0, [r7, #20]
 8002b32:	f7ff ffb1 	bl	8002a98 <NVIC_EncodePriority>
 8002b36:	4602      	mov	r2, r0
 8002b38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b3c:	4611      	mov	r1, r2
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff ff80 	bl	8002a44 <__NVIC_SetPriority>
}
 8002b44:	bf00      	nop
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff ff54 	bl	8002a08 <__NVIC_EnableIRQ>
}
 8002b60:	bf00      	nop
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b74:	f7ff fee6 	bl	8002944 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e099      	b.n	8002cb8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0201 	bic.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ba4:	e00f      	b.n	8002bc6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ba6:	f7ff fecd 	bl	8002944 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b05      	cmp	r3, #5
 8002bb2:	d908      	bls.n	8002bc6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e078      	b.n	8002cb8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1e8      	bne.n	8002ba6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	4b38      	ldr	r3, [pc, #224]	; (8002cc0 <HAL_DMA_Init+0x158>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d107      	bne.n	8002c30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	f023 0307 	bic.w	r3, r3, #7
 8002c46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d117      	bne.n	8002c8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00e      	beq.n	8002c8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 fa7b 	bl	8003168 <DMA_CheckFifoParam>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2240      	movs	r2, #64	; 0x40
 8002c7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c86:	2301      	movs	r3, #1
 8002c88:	e016      	b.n	8002cb8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fa32 	bl	80030fc <DMA_CalcBaseAndBitshift>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca0:	223f      	movs	r2, #63	; 0x3f
 8002ca2:	409a      	lsls	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	f010803f 	.word	0xf010803f

08002cc4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cd2:	f7ff fe37 	bl	8002944 <HAL_GetTick>
 8002cd6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d008      	beq.n	8002cf6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2280      	movs	r2, #128	; 0x80
 8002ce8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e052      	b.n	8002d9c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0216 	bic.w	r2, r2, #22
 8002d04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	695a      	ldr	r2, [r3, #20]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d103      	bne.n	8002d26 <HAL_DMA_Abort+0x62>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d007      	beq.n	8002d36 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0208 	bic.w	r2, r2, #8
 8002d34:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0201 	bic.w	r2, r2, #1
 8002d44:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d46:	e013      	b.n	8002d70 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d48:	f7ff fdfc 	bl	8002944 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b05      	cmp	r3, #5
 8002d54:	d90c      	bls.n	8002d70 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2203      	movs	r2, #3
 8002d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e015      	b.n	8002d9c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1e4      	bne.n	8002d48 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d82:	223f      	movs	r2, #63	; 0x3f
 8002d84:	409a      	lsls	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d004      	beq.n	8002dc2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2280      	movs	r2, #128	; 0x80
 8002dbc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e00c      	b.n	8002ddc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2205      	movs	r2, #5
 8002dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0201 	bic.w	r2, r2, #1
 8002dd8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002df4:	4b8e      	ldr	r3, [pc, #568]	; (8003030 <HAL_DMA_IRQHandler+0x248>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a8e      	ldr	r2, [pc, #568]	; (8003034 <HAL_DMA_IRQHandler+0x24c>)
 8002dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfe:	0a9b      	lsrs	r3, r3, #10
 8002e00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e12:	2208      	movs	r2, #8
 8002e14:	409a      	lsls	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d01a      	beq.n	8002e54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d013      	beq.n	8002e54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0204 	bic.w	r2, r2, #4
 8002e3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e40:	2208      	movs	r2, #8
 8002e42:	409a      	lsls	r2, r3
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4c:	f043 0201 	orr.w	r2, r3, #1
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e58:	2201      	movs	r2, #1
 8002e5a:	409a      	lsls	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d012      	beq.n	8002e8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00b      	beq.n	8002e8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e76:	2201      	movs	r2, #1
 8002e78:	409a      	lsls	r2, r3
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e82:	f043 0202 	orr.w	r2, r3, #2
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8e:	2204      	movs	r2, #4
 8002e90:	409a      	lsls	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4013      	ands	r3, r2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d012      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00b      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eac:	2204      	movs	r2, #4
 8002eae:	409a      	lsls	r2, r3
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb8:	f043 0204 	orr.w	r2, r3, #4
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec4:	2210      	movs	r2, #16
 8002ec6:	409a      	lsls	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d043      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d03c      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee2:	2210      	movs	r2, #16
 8002ee4:	409a      	lsls	r2, r3
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d018      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d108      	bne.n	8002f18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d024      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	4798      	blx	r3
 8002f16:	e01f      	b.n	8002f58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d01b      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	4798      	blx	r3
 8002f28:	e016      	b.n	8002f58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d107      	bne.n	8002f48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0208 	bic.w	r2, r2, #8
 8002f46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	409a      	lsls	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4013      	ands	r3, r2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 808f 	beq.w	8003088 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 8087 	beq.w	8003088 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7e:	2220      	movs	r2, #32
 8002f80:	409a      	lsls	r2, r3
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b05      	cmp	r3, #5
 8002f90:	d136      	bne.n	8003000 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0216 	bic.w	r2, r2, #22
 8002fa0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	695a      	ldr	r2, [r3, #20]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d103      	bne.n	8002fc2 <HAL_DMA_IRQHandler+0x1da>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d007      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0208 	bic.w	r2, r2, #8
 8002fd0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd6:	223f      	movs	r2, #63	; 0x3f
 8002fd8:	409a      	lsls	r2, r3
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d07e      	beq.n	80030f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	4798      	blx	r3
        }
        return;
 8002ffe:	e079      	b.n	80030f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d01d      	beq.n	800304a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10d      	bne.n	8003038 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003020:	2b00      	cmp	r3, #0
 8003022:	d031      	beq.n	8003088 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	4798      	blx	r3
 800302c:	e02c      	b.n	8003088 <HAL_DMA_IRQHandler+0x2a0>
 800302e:	bf00      	nop
 8003030:	20000234 	.word	0x20000234
 8003034:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303c:	2b00      	cmp	r3, #0
 800303e:	d023      	beq.n	8003088 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	4798      	blx	r3
 8003048:	e01e      	b.n	8003088 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10f      	bne.n	8003078 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0210 	bic.w	r2, r2, #16
 8003066:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308c:	2b00      	cmp	r3, #0
 800308e:	d032      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	d022      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2205      	movs	r2, #5
 80030a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0201 	bic.w	r2, r2, #1
 80030b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	3301      	adds	r3, #1
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d307      	bcc.n	80030d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f2      	bne.n	80030b4 <HAL_DMA_IRQHandler+0x2cc>
 80030ce:	e000      	b.n	80030d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80030d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d005      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	4798      	blx	r3
 80030f2:	e000      	b.n	80030f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80030f4:	bf00      	nop
    }
  }
}
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	b2db      	uxtb	r3, r3
 800310a:	3b10      	subs	r3, #16
 800310c:	4a14      	ldr	r2, [pc, #80]	; (8003160 <DMA_CalcBaseAndBitshift+0x64>)
 800310e:	fba2 2303 	umull	r2, r3, r2, r3
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003116:	4a13      	ldr	r2, [pc, #76]	; (8003164 <DMA_CalcBaseAndBitshift+0x68>)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4413      	add	r3, r2
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2b03      	cmp	r3, #3
 8003128:	d909      	bls.n	800313e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003132:	f023 0303 	bic.w	r3, r3, #3
 8003136:	1d1a      	adds	r2, r3, #4
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	659a      	str	r2, [r3, #88]	; 0x58
 800313c:	e007      	b.n	800314e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003146:	f023 0303 	bic.w	r3, r3, #3
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003152:	4618      	mov	r0, r3
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	aaaaaaab 	.word	0xaaaaaaab
 8003164:	08016858 	.word	0x08016858

08003168 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003170:	2300      	movs	r3, #0
 8003172:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003178:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d11f      	bne.n	80031c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b03      	cmp	r3, #3
 8003186:	d856      	bhi.n	8003236 <DMA_CheckFifoParam+0xce>
 8003188:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <DMA_CheckFifoParam+0x28>)
 800318a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318e:	bf00      	nop
 8003190:	080031a1 	.word	0x080031a1
 8003194:	080031b3 	.word	0x080031b3
 8003198:	080031a1 	.word	0x080031a1
 800319c:	08003237 	.word	0x08003237
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d046      	beq.n	800323a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031b0:	e043      	b.n	800323a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031ba:	d140      	bne.n	800323e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031c0:	e03d      	b.n	800323e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ca:	d121      	bne.n	8003210 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	d837      	bhi.n	8003242 <DMA_CheckFifoParam+0xda>
 80031d2:	a201      	add	r2, pc, #4	; (adr r2, 80031d8 <DMA_CheckFifoParam+0x70>)
 80031d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d8:	080031e9 	.word	0x080031e9
 80031dc:	080031ef 	.word	0x080031ef
 80031e0:	080031e9 	.word	0x080031e9
 80031e4:	08003201 	.word	0x08003201
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	73fb      	strb	r3, [r7, #15]
      break;
 80031ec:	e030      	b.n	8003250 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d025      	beq.n	8003246 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031fe:	e022      	b.n	8003246 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003208:	d11f      	bne.n	800324a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800320e:	e01c      	b.n	800324a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d903      	bls.n	800321e <DMA_CheckFifoParam+0xb6>
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2b03      	cmp	r3, #3
 800321a:	d003      	beq.n	8003224 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800321c:	e018      	b.n	8003250 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	73fb      	strb	r3, [r7, #15]
      break;
 8003222:	e015      	b.n	8003250 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00e      	beq.n	800324e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	73fb      	strb	r3, [r7, #15]
      break;
 8003234:	e00b      	b.n	800324e <DMA_CheckFifoParam+0xe6>
      break;
 8003236:	bf00      	nop
 8003238:	e00a      	b.n	8003250 <DMA_CheckFifoParam+0xe8>
      break;
 800323a:	bf00      	nop
 800323c:	e008      	b.n	8003250 <DMA_CheckFifoParam+0xe8>
      break;
 800323e:	bf00      	nop
 8003240:	e006      	b.n	8003250 <DMA_CheckFifoParam+0xe8>
      break;
 8003242:	bf00      	nop
 8003244:	e004      	b.n	8003250 <DMA_CheckFifoParam+0xe8>
      break;
 8003246:	bf00      	nop
 8003248:	e002      	b.n	8003250 <DMA_CheckFifoParam+0xe8>
      break;   
 800324a:	bf00      	nop
 800324c:	e000      	b.n	8003250 <DMA_CheckFifoParam+0xe8>
      break;
 800324e:	bf00      	nop
    }
  } 
  
  return status; 
 8003250:	7bfb      	ldrb	r3, [r7, #15]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop

08003260 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003272:	4b23      	ldr	r3, [pc, #140]	; (8003300 <HAL_FLASH_Program+0xa0>)
 8003274:	7e1b      	ldrb	r3, [r3, #24]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <HAL_FLASH_Program+0x1e>
 800327a:	2302      	movs	r3, #2
 800327c:	e03b      	b.n	80032f6 <HAL_FLASH_Program+0x96>
 800327e:	4b20      	ldr	r3, [pc, #128]	; (8003300 <HAL_FLASH_Program+0xa0>)
 8003280:	2201      	movs	r2, #1
 8003282:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003284:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003288:	f000 f870 	bl	800336c <FLASH_WaitForLastOperation>
 800328c:	4603      	mov	r3, r0
 800328e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003290:	7dfb      	ldrb	r3, [r7, #23]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d12b      	bne.n	80032ee <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d105      	bne.n	80032a8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800329c:	783b      	ldrb	r3, [r7, #0]
 800329e:	4619      	mov	r1, r3
 80032a0:	68b8      	ldr	r0, [r7, #8]
 80032a2:	f000 f91b 	bl	80034dc <FLASH_Program_Byte>
 80032a6:	e016      	b.n	80032d6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d105      	bne.n	80032ba <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80032ae:	883b      	ldrh	r3, [r7, #0]
 80032b0:	4619      	mov	r1, r3
 80032b2:	68b8      	ldr	r0, [r7, #8]
 80032b4:	f000 f8ee 	bl	8003494 <FLASH_Program_HalfWord>
 80032b8:	e00d      	b.n	80032d6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d105      	bne.n	80032cc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	4619      	mov	r1, r3
 80032c4:	68b8      	ldr	r0, [r7, #8]
 80032c6:	f000 f8c3 	bl	8003450 <FLASH_Program_Word>
 80032ca:	e004      	b.n	80032d6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80032cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032d0:	68b8      	ldr	r0, [r7, #8]
 80032d2:	f000 f88b 	bl	80033ec <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80032d6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80032da:	f000 f847 	bl	800336c <FLASH_WaitForLastOperation>
 80032de:	4603      	mov	r3, r0
 80032e0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80032e2:	4b08      	ldr	r3, [pc, #32]	; (8003304 <HAL_FLASH_Program+0xa4>)
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	4a07      	ldr	r2, [pc, #28]	; (8003304 <HAL_FLASH_Program+0xa4>)
 80032e8:	f023 0301 	bic.w	r3, r3, #1
 80032ec:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80032ee:	4b04      	ldr	r3, [pc, #16]	; (8003300 <HAL_FLASH_Program+0xa0>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80032f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	20001d3c 	.word	0x20001d3c
 8003304:	40023c00 	.word	0x40023c00

08003308 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003312:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <HAL_FLASH_Unlock+0x38>)
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	2b00      	cmp	r3, #0
 8003318:	da0b      	bge.n	8003332 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800331a:	4b09      	ldr	r3, [pc, #36]	; (8003340 <HAL_FLASH_Unlock+0x38>)
 800331c:	4a09      	ldr	r2, [pc, #36]	; (8003344 <HAL_FLASH_Unlock+0x3c>)
 800331e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003320:	4b07      	ldr	r3, [pc, #28]	; (8003340 <HAL_FLASH_Unlock+0x38>)
 8003322:	4a09      	ldr	r2, [pc, #36]	; (8003348 <HAL_FLASH_Unlock+0x40>)
 8003324:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003326:	4b06      	ldr	r3, [pc, #24]	; (8003340 <HAL_FLASH_Unlock+0x38>)
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	2b00      	cmp	r3, #0
 800332c:	da01      	bge.n	8003332 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003332:	79fb      	ldrb	r3, [r7, #7]
}
 8003334:	4618      	mov	r0, r3
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	40023c00 	.word	0x40023c00
 8003344:	45670123 	.word	0x45670123
 8003348:	cdef89ab 	.word	0xcdef89ab

0800334c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003350:	4b05      	ldr	r3, [pc, #20]	; (8003368 <HAL_FLASH_Lock+0x1c>)
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	4a04      	ldr	r2, [pc, #16]	; (8003368 <HAL_FLASH_Lock+0x1c>)
 8003356:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800335a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	40023c00 	.word	0x40023c00

0800336c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003378:	4b1a      	ldr	r3, [pc, #104]	; (80033e4 <FLASH_WaitForLastOperation+0x78>)
 800337a:	2200      	movs	r2, #0
 800337c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800337e:	f7ff fae1 	bl	8002944 <HAL_GetTick>
 8003382:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003384:	e010      	b.n	80033a8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338c:	d00c      	beq.n	80033a8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d007      	beq.n	80033a4 <FLASH_WaitForLastOperation+0x38>
 8003394:	f7ff fad6 	bl	8002944 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d201      	bcs.n	80033a8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e019      	b.n	80033dc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80033a8:	4b0f      	ldr	r3, [pc, #60]	; (80033e8 <FLASH_WaitForLastOperation+0x7c>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1e8      	bne.n	8003386 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80033b4:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <FLASH_WaitForLastOperation+0x7c>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80033c0:	4b09      	ldr	r3, [pc, #36]	; (80033e8 <FLASH_WaitForLastOperation+0x7c>)
 80033c2:	2201      	movs	r2, #1
 80033c4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80033c6:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <FLASH_WaitForLastOperation+0x7c>)
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80033d2:	f000 f8a5 	bl	8003520 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80033da:	2300      	movs	r3, #0
  
}  
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	20001d3c 	.word	0x20001d3c
 80033e8:	40023c00 	.word	0x40023c00

080033ec <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80033f8:	4b14      	ldr	r3, [pc, #80]	; (800344c <FLASH_Program_DoubleWord+0x60>)
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	4a13      	ldr	r2, [pc, #76]	; (800344c <FLASH_Program_DoubleWord+0x60>)
 80033fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003402:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003404:	4b11      	ldr	r3, [pc, #68]	; (800344c <FLASH_Program_DoubleWord+0x60>)
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	4a10      	ldr	r2, [pc, #64]	; (800344c <FLASH_Program_DoubleWord+0x60>)
 800340a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800340e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003410:	4b0e      	ldr	r3, [pc, #56]	; (800344c <FLASH_Program_DoubleWord+0x60>)
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	4a0d      	ldr	r2, [pc, #52]	; (800344c <FLASH_Program_DoubleWord+0x60>)
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003422:	f3bf 8f6f 	isb	sy
}
 8003426:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003428:	e9d7 0100 	ldrd	r0, r1, [r7]
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	000a      	movs	r2, r1
 8003436:	2300      	movs	r3, #0
 8003438:	68f9      	ldr	r1, [r7, #12]
 800343a:	3104      	adds	r1, #4
 800343c:	4613      	mov	r3, r2
 800343e:	600b      	str	r3, [r1, #0]
}
 8003440:	bf00      	nop
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	40023c00 	.word	0x40023c00

08003450 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800345a:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <FLASH_Program_Word+0x40>)
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	4a0c      	ldr	r2, [pc, #48]	; (8003490 <FLASH_Program_Word+0x40>)
 8003460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003464:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003466:	4b0a      	ldr	r3, [pc, #40]	; (8003490 <FLASH_Program_Word+0x40>)
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	4a09      	ldr	r2, [pc, #36]	; (8003490 <FLASH_Program_Word+0x40>)
 800346c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003470:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003472:	4b07      	ldr	r3, [pc, #28]	; (8003490 <FLASH_Program_Word+0x40>)
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	4a06      	ldr	r2, [pc, #24]	; (8003490 <FLASH_Program_Word+0x40>)
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	601a      	str	r2, [r3, #0]
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	40023c00 	.word	0x40023c00

08003494 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80034a0:	4b0d      	ldr	r3, [pc, #52]	; (80034d8 <FLASH_Program_HalfWord+0x44>)
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	4a0c      	ldr	r2, [pc, #48]	; (80034d8 <FLASH_Program_HalfWord+0x44>)
 80034a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80034ac:	4b0a      	ldr	r3, [pc, #40]	; (80034d8 <FLASH_Program_HalfWord+0x44>)
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	4a09      	ldr	r2, [pc, #36]	; (80034d8 <FLASH_Program_HalfWord+0x44>)
 80034b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80034b8:	4b07      	ldr	r3, [pc, #28]	; (80034d8 <FLASH_Program_HalfWord+0x44>)
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	4a06      	ldr	r2, [pc, #24]	; (80034d8 <FLASH_Program_HalfWord+0x44>)
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	887a      	ldrh	r2, [r7, #2]
 80034c8:	801a      	strh	r2, [r3, #0]
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	40023c00 	.word	0x40023c00

080034dc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80034e8:	4b0c      	ldr	r3, [pc, #48]	; (800351c <FLASH_Program_Byte+0x40>)
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	4a0b      	ldr	r2, [pc, #44]	; (800351c <FLASH_Program_Byte+0x40>)
 80034ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80034f4:	4b09      	ldr	r3, [pc, #36]	; (800351c <FLASH_Program_Byte+0x40>)
 80034f6:	4a09      	ldr	r2, [pc, #36]	; (800351c <FLASH_Program_Byte+0x40>)
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80034fc:	4b07      	ldr	r3, [pc, #28]	; (800351c <FLASH_Program_Byte+0x40>)
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	4a06      	ldr	r2, [pc, #24]	; (800351c <FLASH_Program_Byte+0x40>)
 8003502:	f043 0301 	orr.w	r3, r3, #1
 8003506:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	78fa      	ldrb	r2, [r7, #3]
 800350c:	701a      	strb	r2, [r3, #0]
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	40023c00 	.word	0x40023c00

08003520 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003524:	4b27      	ldr	r3, [pc, #156]	; (80035c4 <FLASH_SetErrorCode+0xa4>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f003 0310 	and.w	r3, r3, #16
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003530:	4b25      	ldr	r3, [pc, #148]	; (80035c8 <FLASH_SetErrorCode+0xa8>)
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	f043 0310 	orr.w	r3, r3, #16
 8003538:	4a23      	ldr	r2, [pc, #140]	; (80035c8 <FLASH_SetErrorCode+0xa8>)
 800353a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800353c:	4b21      	ldr	r3, [pc, #132]	; (80035c4 <FLASH_SetErrorCode+0xa4>)
 800353e:	2210      	movs	r2, #16
 8003540:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003542:	4b20      	ldr	r3, [pc, #128]	; (80035c4 <FLASH_SetErrorCode+0xa4>)
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f003 0320 	and.w	r3, r3, #32
 800354a:	2b00      	cmp	r3, #0
 800354c:	d008      	beq.n	8003560 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800354e:	4b1e      	ldr	r3, [pc, #120]	; (80035c8 <FLASH_SetErrorCode+0xa8>)
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	f043 0308 	orr.w	r3, r3, #8
 8003556:	4a1c      	ldr	r2, [pc, #112]	; (80035c8 <FLASH_SetErrorCode+0xa8>)
 8003558:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800355a:	4b1a      	ldr	r3, [pc, #104]	; (80035c4 <FLASH_SetErrorCode+0xa4>)
 800355c:	2220      	movs	r2, #32
 800355e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003560:	4b18      	ldr	r3, [pc, #96]	; (80035c4 <FLASH_SetErrorCode+0xa4>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003568:	2b00      	cmp	r3, #0
 800356a:	d008      	beq.n	800357e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800356c:	4b16      	ldr	r3, [pc, #88]	; (80035c8 <FLASH_SetErrorCode+0xa8>)
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	f043 0304 	orr.w	r3, r3, #4
 8003574:	4a14      	ldr	r2, [pc, #80]	; (80035c8 <FLASH_SetErrorCode+0xa8>)
 8003576:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003578:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <FLASH_SetErrorCode+0xa4>)
 800357a:	2240      	movs	r2, #64	; 0x40
 800357c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800357e:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <FLASH_SetErrorCode+0xa4>)
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003586:	2b00      	cmp	r3, #0
 8003588:	d008      	beq.n	800359c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800358a:	4b0f      	ldr	r3, [pc, #60]	; (80035c8 <FLASH_SetErrorCode+0xa8>)
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	f043 0302 	orr.w	r3, r3, #2
 8003592:	4a0d      	ldr	r2, [pc, #52]	; (80035c8 <FLASH_SetErrorCode+0xa8>)
 8003594:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003596:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <FLASH_SetErrorCode+0xa4>)
 8003598:	2280      	movs	r2, #128	; 0x80
 800359a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800359c:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <FLASH_SetErrorCode+0xa4>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d008      	beq.n	80035ba <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80035a8:	4b07      	ldr	r3, [pc, #28]	; (80035c8 <FLASH_SetErrorCode+0xa8>)
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	f043 0320 	orr.w	r3, r3, #32
 80035b0:	4a05      	ldr	r2, [pc, #20]	; (80035c8 <FLASH_SetErrorCode+0xa8>)
 80035b2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80035b4:	4b03      	ldr	r3, [pc, #12]	; (80035c4 <FLASH_SetErrorCode+0xa4>)
 80035b6:	2202      	movs	r2, #2
 80035b8:	60da      	str	r2, [r3, #12]
  }
}
 80035ba:	bf00      	nop
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	40023c00 	.word	0x40023c00
 80035c8:	20001d3c 	.word	0x20001d3c

080035cc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80035da:	2300      	movs	r3, #0
 80035dc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80035de:	4b31      	ldr	r3, [pc, #196]	; (80036a4 <HAL_FLASHEx_Erase+0xd8>)
 80035e0:	7e1b      	ldrb	r3, [r3, #24]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d101      	bne.n	80035ea <HAL_FLASHEx_Erase+0x1e>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e058      	b.n	800369c <HAL_FLASHEx_Erase+0xd0>
 80035ea:	4b2e      	ldr	r3, [pc, #184]	; (80036a4 <HAL_FLASHEx_Erase+0xd8>)
 80035ec:	2201      	movs	r2, #1
 80035ee:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80035f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80035f4:	f7ff feba 	bl	800336c <FLASH_WaitForLastOperation>
 80035f8:	4603      	mov	r3, r0
 80035fa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d148      	bne.n	8003694 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	f04f 32ff 	mov.w	r2, #4294967295
 8003608:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d115      	bne.n	800363e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	b2da      	uxtb	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	4619      	mov	r1, r3
 800361e:	4610      	mov	r0, r2
 8003620:	f000 f844 	bl	80036ac <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003624:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003628:	f7ff fea0 	bl	800336c <FLASH_WaitForLastOperation>
 800362c:	4603      	mov	r3, r0
 800362e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003630:	4b1d      	ldr	r3, [pc, #116]	; (80036a8 <HAL_FLASHEx_Erase+0xdc>)
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	4a1c      	ldr	r2, [pc, #112]	; (80036a8 <HAL_FLASHEx_Erase+0xdc>)
 8003636:	f023 0304 	bic.w	r3, r3, #4
 800363a:	6113      	str	r3, [r2, #16]
 800363c:	e028      	b.n	8003690 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	60bb      	str	r3, [r7, #8]
 8003644:	e01c      	b.n	8003680 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	b2db      	uxtb	r3, r3
 800364c:	4619      	mov	r1, r3
 800364e:	68b8      	ldr	r0, [r7, #8]
 8003650:	f000 f850 	bl	80036f4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003654:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003658:	f7ff fe88 	bl	800336c <FLASH_WaitForLastOperation>
 800365c:	4603      	mov	r3, r0
 800365e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003660:	4b11      	ldr	r3, [pc, #68]	; (80036a8 <HAL_FLASHEx_Erase+0xdc>)
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	4a10      	ldr	r2, [pc, #64]	; (80036a8 <HAL_FLASHEx_Erase+0xdc>)
 8003666:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800366a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800366c:	7bfb      	ldrb	r3, [r7, #15]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	601a      	str	r2, [r3, #0]
          break;
 8003678:	e00a      	b.n	8003690 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	3301      	adds	r3, #1
 800367e:	60bb      	str	r3, [r7, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	4413      	add	r3, r2
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	429a      	cmp	r2, r3
 800368e:	d3da      	bcc.n	8003646 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003690:	f000 f878 	bl	8003784 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003694:	4b03      	ldr	r3, [pc, #12]	; (80036a4 <HAL_FLASHEx_Erase+0xd8>)
 8003696:	2200      	movs	r2, #0
 8003698:	761a      	strb	r2, [r3, #24]

  return status;
 800369a:	7bfb      	ldrb	r3, [r7, #15]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	20001d3c 	.word	0x20001d3c
 80036a8:	40023c00 	.word	0x40023c00

080036ac <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	4603      	mov	r3, r0
 80036b4:	6039      	str	r1, [r7, #0]
 80036b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80036b8:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <FLASH_MassErase+0x44>)
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	4a0c      	ldr	r2, [pc, #48]	; (80036f0 <FLASH_MassErase+0x44>)
 80036be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80036c4:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <FLASH_MassErase+0x44>)
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	4a09      	ldr	r2, [pc, #36]	; (80036f0 <FLASH_MassErase+0x44>)
 80036ca:	f043 0304 	orr.w	r3, r3, #4
 80036ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80036d0:	4b07      	ldr	r3, [pc, #28]	; (80036f0 <FLASH_MassErase+0x44>)
 80036d2:	691a      	ldr	r2, [r3, #16]
 80036d4:	79fb      	ldrb	r3, [r7, #7]
 80036d6:	021b      	lsls	r3, r3, #8
 80036d8:	4313      	orrs	r3, r2
 80036da:	4a05      	ldr	r2, [pc, #20]	; (80036f0 <FLASH_MassErase+0x44>)
 80036dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e0:	6113      	str	r3, [r2, #16]
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40023c00 	.word	0x40023c00

080036f4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003704:	78fb      	ldrb	r3, [r7, #3]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d102      	bne.n	8003710 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
 800370e:	e010      	b.n	8003732 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d103      	bne.n	800371e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	e009      	b.n	8003732 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800371e:	78fb      	ldrb	r3, [r7, #3]
 8003720:	2b02      	cmp	r3, #2
 8003722:	d103      	bne.n	800372c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003724:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	e002      	b.n	8003732 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800372c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003730:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003732:	4b13      	ldr	r3, [pc, #76]	; (8003780 <FLASH_Erase_Sector+0x8c>)
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	4a12      	ldr	r2, [pc, #72]	; (8003780 <FLASH_Erase_Sector+0x8c>)
 8003738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800373c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800373e:	4b10      	ldr	r3, [pc, #64]	; (8003780 <FLASH_Erase_Sector+0x8c>)
 8003740:	691a      	ldr	r2, [r3, #16]
 8003742:	490f      	ldr	r1, [pc, #60]	; (8003780 <FLASH_Erase_Sector+0x8c>)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800374a:	4b0d      	ldr	r3, [pc, #52]	; (8003780 <FLASH_Erase_Sector+0x8c>)
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	4a0c      	ldr	r2, [pc, #48]	; (8003780 <FLASH_Erase_Sector+0x8c>)
 8003750:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003754:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003756:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <FLASH_Erase_Sector+0x8c>)
 8003758:	691a      	ldr	r2, [r3, #16]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	4313      	orrs	r3, r2
 8003760:	4a07      	ldr	r2, [pc, #28]	; (8003780 <FLASH_Erase_Sector+0x8c>)
 8003762:	f043 0302 	orr.w	r3, r3, #2
 8003766:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003768:	4b05      	ldr	r3, [pc, #20]	; (8003780 <FLASH_Erase_Sector+0x8c>)
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	4a04      	ldr	r2, [pc, #16]	; (8003780 <FLASH_Erase_Sector+0x8c>)
 800376e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003772:	6113      	str	r3, [r2, #16]
}
 8003774:	bf00      	nop
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	40023c00 	.word	0x40023c00

08003784 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8003788:	4b20      	ldr	r3, [pc, #128]	; (800380c <FLASH_FlushCaches+0x88>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003790:	2b00      	cmp	r3, #0
 8003792:	d017      	beq.n	80037c4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003794:	4b1d      	ldr	r3, [pc, #116]	; (800380c <FLASH_FlushCaches+0x88>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a1c      	ldr	r2, [pc, #112]	; (800380c <FLASH_FlushCaches+0x88>)
 800379a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800379e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80037a0:	4b1a      	ldr	r3, [pc, #104]	; (800380c <FLASH_FlushCaches+0x88>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a19      	ldr	r2, [pc, #100]	; (800380c <FLASH_FlushCaches+0x88>)
 80037a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037aa:	6013      	str	r3, [r2, #0]
 80037ac:	4b17      	ldr	r3, [pc, #92]	; (800380c <FLASH_FlushCaches+0x88>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a16      	ldr	r2, [pc, #88]	; (800380c <FLASH_FlushCaches+0x88>)
 80037b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037b6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037b8:	4b14      	ldr	r3, [pc, #80]	; (800380c <FLASH_FlushCaches+0x88>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a13      	ldr	r2, [pc, #76]	; (800380c <FLASH_FlushCaches+0x88>)
 80037be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037c2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80037c4:	4b11      	ldr	r3, [pc, #68]	; (800380c <FLASH_FlushCaches+0x88>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d017      	beq.n	8003800 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80037d0:	4b0e      	ldr	r3, [pc, #56]	; (800380c <FLASH_FlushCaches+0x88>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a0d      	ldr	r2, [pc, #52]	; (800380c <FLASH_FlushCaches+0x88>)
 80037d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037da:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80037dc:	4b0b      	ldr	r3, [pc, #44]	; (800380c <FLASH_FlushCaches+0x88>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a0a      	ldr	r2, [pc, #40]	; (800380c <FLASH_FlushCaches+0x88>)
 80037e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037e6:	6013      	str	r3, [r2, #0]
 80037e8:	4b08      	ldr	r3, [pc, #32]	; (800380c <FLASH_FlushCaches+0x88>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a07      	ldr	r2, [pc, #28]	; (800380c <FLASH_FlushCaches+0x88>)
 80037ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037f2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80037f4:	4b05      	ldr	r3, [pc, #20]	; (800380c <FLASH_FlushCaches+0x88>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a04      	ldr	r2, [pc, #16]	; (800380c <FLASH_FlushCaches+0x88>)
 80037fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037fe:	6013      	str	r3, [r2, #0]
  }
}
 8003800:	bf00      	nop
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40023c00 	.word	0x40023c00

08003810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003810:	b480      	push	{r7}
 8003812:	b089      	sub	sp, #36	; 0x24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800381a:	2300      	movs	r3, #0
 800381c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800381e:	2300      	movs	r3, #0
 8003820:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003822:	2300      	movs	r3, #0
 8003824:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
 800382a:	e16b      	b.n	8003b04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800382c:	2201      	movs	r2, #1
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	4013      	ands	r3, r2
 800383e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	429a      	cmp	r2, r3
 8003846:	f040 815a 	bne.w	8003afe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f003 0303 	and.w	r3, r3, #3
 8003852:	2b01      	cmp	r3, #1
 8003854:	d005      	beq.n	8003862 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800385e:	2b02      	cmp	r3, #2
 8003860:	d130      	bne.n	80038c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	2203      	movs	r2, #3
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	43db      	mvns	r3, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4013      	ands	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	4313      	orrs	r3, r2
 800388a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003898:	2201      	movs	r2, #1
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	43db      	mvns	r3, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4013      	ands	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	091b      	lsrs	r3, r3, #4
 80038ae:	f003 0201 	and.w	r2, r3, #1
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f003 0303 	and.w	r3, r3, #3
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d017      	beq.n	8003900 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	2203      	movs	r2, #3
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	43db      	mvns	r3, r3
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	4013      	ands	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d123      	bne.n	8003954 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	08da      	lsrs	r2, r3, #3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3208      	adds	r2, #8
 8003914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003918:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	220f      	movs	r2, #15
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	43db      	mvns	r3, r3
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4013      	ands	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	691a      	ldr	r2, [r3, #16]
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4313      	orrs	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	08da      	lsrs	r2, r3, #3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	3208      	adds	r2, #8
 800394e:	69b9      	ldr	r1, [r7, #24]
 8003950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	2203      	movs	r2, #3
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	43db      	mvns	r3, r3
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	4013      	ands	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 0203 	and.w	r2, r3, #3
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4313      	orrs	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 80b4 	beq.w	8003afe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003996:	2300      	movs	r3, #0
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	4b60      	ldr	r3, [pc, #384]	; (8003b1c <HAL_GPIO_Init+0x30c>)
 800399c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399e:	4a5f      	ldr	r2, [pc, #380]	; (8003b1c <HAL_GPIO_Init+0x30c>)
 80039a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039a4:	6453      	str	r3, [r2, #68]	; 0x44
 80039a6:	4b5d      	ldr	r3, [pc, #372]	; (8003b1c <HAL_GPIO_Init+0x30c>)
 80039a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039b2:	4a5b      	ldr	r2, [pc, #364]	; (8003b20 <HAL_GPIO_Init+0x310>)
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	089b      	lsrs	r3, r3, #2
 80039b8:	3302      	adds	r3, #2
 80039ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	220f      	movs	r2, #15
 80039ca:	fa02 f303 	lsl.w	r3, r2, r3
 80039ce:	43db      	mvns	r3, r3
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	4013      	ands	r3, r2
 80039d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a52      	ldr	r2, [pc, #328]	; (8003b24 <HAL_GPIO_Init+0x314>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d02b      	beq.n	8003a36 <HAL_GPIO_Init+0x226>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a51      	ldr	r2, [pc, #324]	; (8003b28 <HAL_GPIO_Init+0x318>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d025      	beq.n	8003a32 <HAL_GPIO_Init+0x222>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a50      	ldr	r2, [pc, #320]	; (8003b2c <HAL_GPIO_Init+0x31c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d01f      	beq.n	8003a2e <HAL_GPIO_Init+0x21e>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a4f      	ldr	r2, [pc, #316]	; (8003b30 <HAL_GPIO_Init+0x320>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d019      	beq.n	8003a2a <HAL_GPIO_Init+0x21a>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a4e      	ldr	r2, [pc, #312]	; (8003b34 <HAL_GPIO_Init+0x324>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d013      	beq.n	8003a26 <HAL_GPIO_Init+0x216>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a4d      	ldr	r2, [pc, #308]	; (8003b38 <HAL_GPIO_Init+0x328>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00d      	beq.n	8003a22 <HAL_GPIO_Init+0x212>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a4c      	ldr	r2, [pc, #304]	; (8003b3c <HAL_GPIO_Init+0x32c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d007      	beq.n	8003a1e <HAL_GPIO_Init+0x20e>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a4b      	ldr	r2, [pc, #300]	; (8003b40 <HAL_GPIO_Init+0x330>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d101      	bne.n	8003a1a <HAL_GPIO_Init+0x20a>
 8003a16:	2307      	movs	r3, #7
 8003a18:	e00e      	b.n	8003a38 <HAL_GPIO_Init+0x228>
 8003a1a:	2308      	movs	r3, #8
 8003a1c:	e00c      	b.n	8003a38 <HAL_GPIO_Init+0x228>
 8003a1e:	2306      	movs	r3, #6
 8003a20:	e00a      	b.n	8003a38 <HAL_GPIO_Init+0x228>
 8003a22:	2305      	movs	r3, #5
 8003a24:	e008      	b.n	8003a38 <HAL_GPIO_Init+0x228>
 8003a26:	2304      	movs	r3, #4
 8003a28:	e006      	b.n	8003a38 <HAL_GPIO_Init+0x228>
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e004      	b.n	8003a38 <HAL_GPIO_Init+0x228>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e002      	b.n	8003a38 <HAL_GPIO_Init+0x228>
 8003a32:	2301      	movs	r3, #1
 8003a34:	e000      	b.n	8003a38 <HAL_GPIO_Init+0x228>
 8003a36:	2300      	movs	r3, #0
 8003a38:	69fa      	ldr	r2, [r7, #28]
 8003a3a:	f002 0203 	and.w	r2, r2, #3
 8003a3e:	0092      	lsls	r2, r2, #2
 8003a40:	4093      	lsls	r3, r2
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a48:	4935      	ldr	r1, [pc, #212]	; (8003b20 <HAL_GPIO_Init+0x310>)
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	089b      	lsrs	r3, r3, #2
 8003a4e:	3302      	adds	r3, #2
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a56:	4b3b      	ldr	r3, [pc, #236]	; (8003b44 <HAL_GPIO_Init+0x334>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	4013      	ands	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a7a:	4a32      	ldr	r2, [pc, #200]	; (8003b44 <HAL_GPIO_Init+0x334>)
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a80:	4b30      	ldr	r3, [pc, #192]	; (8003b44 <HAL_GPIO_Init+0x334>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003aa4:	4a27      	ldr	r2, [pc, #156]	; (8003b44 <HAL_GPIO_Init+0x334>)
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003aaa:	4b26      	ldr	r3, [pc, #152]	; (8003b44 <HAL_GPIO_Init+0x334>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ace:	4a1d      	ldr	r2, [pc, #116]	; (8003b44 <HAL_GPIO_Init+0x334>)
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ad4:	4b1b      	ldr	r3, [pc, #108]	; (8003b44 <HAL_GPIO_Init+0x334>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	43db      	mvns	r3, r3
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003af8:	4a12      	ldr	r2, [pc, #72]	; (8003b44 <HAL_GPIO_Init+0x334>)
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	3301      	adds	r3, #1
 8003b02:	61fb      	str	r3, [r7, #28]
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	2b0f      	cmp	r3, #15
 8003b08:	f67f ae90 	bls.w	800382c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b0c:	bf00      	nop
 8003b0e:	bf00      	nop
 8003b10:	3724      	adds	r7, #36	; 0x24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	40013800 	.word	0x40013800
 8003b24:	40020000 	.word	0x40020000
 8003b28:	40020400 	.word	0x40020400
 8003b2c:	40020800 	.word	0x40020800
 8003b30:	40020c00 	.word	0x40020c00
 8003b34:	40021000 	.word	0x40021000
 8003b38:	40021400 	.word	0x40021400
 8003b3c:	40021800 	.word	0x40021800
 8003b40:	40021c00 	.word	0x40021c00
 8003b44:	40013c00 	.word	0x40013c00

08003b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	807b      	strh	r3, [r7, #2]
 8003b54:	4613      	mov	r3, r2
 8003b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b58:	787b      	ldrb	r3, [r7, #1]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b5e:	887a      	ldrh	r2, [r7, #2]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b64:	e003      	b.n	8003b6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b66:	887b      	ldrh	r3, [r7, #2]
 8003b68:	041a      	lsls	r2, r3, #16
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	619a      	str	r2, [r3, #24]
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003b7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b7c:	b08f      	sub	sp, #60	; 0x3c
 8003b7e:	af0a      	add	r7, sp, #40	; 0x28
 8003b80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d101      	bne.n	8003b8c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e054      	b.n	8003c36 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d106      	bne.n	8003bac <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f00f fcf6 	bl	8013598 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2203      	movs	r2, #3
 8003bb0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d102      	bne.n	8003bc6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f004 fd04 	bl	80085d8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	603b      	str	r3, [r7, #0]
 8003bd6:	687e      	ldr	r6, [r7, #4]
 8003bd8:	466d      	mov	r5, sp
 8003bda:	f106 0410 	add.w	r4, r6, #16
 8003bde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003be0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003be2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003be4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003be6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bea:	e885 0003 	stmia.w	r5, {r0, r1}
 8003bee:	1d33      	adds	r3, r6, #4
 8003bf0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bf2:	6838      	ldr	r0, [r7, #0]
 8003bf4:	f004 fc7e 	bl	80084f4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f004 fcfb 	bl	80085fa <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	603b      	str	r3, [r7, #0]
 8003c0a:	687e      	ldr	r6, [r7, #4]
 8003c0c:	466d      	mov	r5, sp
 8003c0e:	f106 0410 	add.w	r4, r6, #16
 8003c12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c22:	1d33      	adds	r3, r6, #4
 8003c24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c26:	6838      	ldr	r0, [r7, #0]
 8003c28:	f004 fe84 	bl	8008934 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c3e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003c3e:	b590      	push	{r4, r7, lr}
 8003c40:	b089      	sub	sp, #36	; 0x24
 8003c42:	af04      	add	r7, sp, #16
 8003c44:	6078      	str	r0, [r7, #4]
 8003c46:	4608      	mov	r0, r1
 8003c48:	4611      	mov	r1, r2
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	70fb      	strb	r3, [r7, #3]
 8003c50:	460b      	mov	r3, r1
 8003c52:	70bb      	strb	r3, [r7, #2]
 8003c54:	4613      	mov	r3, r2
 8003c56:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d101      	bne.n	8003c66 <HAL_HCD_HC_Init+0x28>
 8003c62:	2302      	movs	r3, #2
 8003c64:	e076      	b.n	8003d54 <HAL_HCD_HC_Init+0x116>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003c6e:	78fb      	ldrb	r3, [r7, #3]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	212c      	movs	r1, #44	; 0x2c
 8003c74:	fb01 f303 	mul.w	r3, r1, r3
 8003c78:	4413      	add	r3, r2
 8003c7a:	333d      	adds	r3, #61	; 0x3d
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003c80:	78fb      	ldrb	r3, [r7, #3]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	212c      	movs	r1, #44	; 0x2c
 8003c86:	fb01 f303 	mul.w	r3, r1, r3
 8003c8a:	4413      	add	r3, r2
 8003c8c:	3338      	adds	r3, #56	; 0x38
 8003c8e:	787a      	ldrb	r2, [r7, #1]
 8003c90:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003c92:	78fb      	ldrb	r3, [r7, #3]
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	212c      	movs	r1, #44	; 0x2c
 8003c98:	fb01 f303 	mul.w	r3, r1, r3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	3340      	adds	r3, #64	; 0x40
 8003ca0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003ca2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	212c      	movs	r1, #44	; 0x2c
 8003caa:	fb01 f303 	mul.w	r3, r1, r3
 8003cae:	4413      	add	r3, r2
 8003cb0:	3339      	adds	r3, #57	; 0x39
 8003cb2:	78fa      	ldrb	r2, [r7, #3]
 8003cb4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003cb6:	78fb      	ldrb	r3, [r7, #3]
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	212c      	movs	r1, #44	; 0x2c
 8003cbc:	fb01 f303 	mul.w	r3, r1, r3
 8003cc0:	4413      	add	r3, r2
 8003cc2:	333f      	adds	r3, #63	; 0x3f
 8003cc4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003cc8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003cca:	78fb      	ldrb	r3, [r7, #3]
 8003ccc:	78ba      	ldrb	r2, [r7, #2]
 8003cce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cd2:	b2d0      	uxtb	r0, r2
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	212c      	movs	r1, #44	; 0x2c
 8003cd8:	fb01 f303 	mul.w	r3, r1, r3
 8003cdc:	4413      	add	r3, r2
 8003cde:	333a      	adds	r3, #58	; 0x3a
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003ce4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	da09      	bge.n	8003d00 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003cec:	78fb      	ldrb	r3, [r7, #3]
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	212c      	movs	r1, #44	; 0x2c
 8003cf2:	fb01 f303 	mul.w	r3, r1, r3
 8003cf6:	4413      	add	r3, r2
 8003cf8:	333b      	adds	r3, #59	; 0x3b
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	701a      	strb	r2, [r3, #0]
 8003cfe:	e008      	b.n	8003d12 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003d00:	78fb      	ldrb	r3, [r7, #3]
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	212c      	movs	r1, #44	; 0x2c
 8003d06:	fb01 f303 	mul.w	r3, r1, r3
 8003d0a:	4413      	add	r3, r2
 8003d0c:	333b      	adds	r3, #59	; 0x3b
 8003d0e:	2200      	movs	r2, #0
 8003d10:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003d12:	78fb      	ldrb	r3, [r7, #3]
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	212c      	movs	r1, #44	; 0x2c
 8003d18:	fb01 f303 	mul.w	r3, r1, r3
 8003d1c:	4413      	add	r3, r2
 8003d1e:	333c      	adds	r3, #60	; 0x3c
 8003d20:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003d24:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6818      	ldr	r0, [r3, #0]
 8003d2a:	787c      	ldrb	r4, [r7, #1]
 8003d2c:	78ba      	ldrb	r2, [r7, #2]
 8003d2e:	78f9      	ldrb	r1, [r7, #3]
 8003d30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003d32:	9302      	str	r3, [sp, #8]
 8003d34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003d38:	9301      	str	r3, [sp, #4]
 8003d3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	4623      	mov	r3, r4
 8003d42:	f004 ff7d 	bl	8008c40 <USB_HC_Init>
 8003d46:	4603      	mov	r3, r0
 8003d48:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd90      	pop	{r4, r7, pc}

08003d5c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	460b      	mov	r3, r1
 8003d66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d101      	bne.n	8003d7a <HAL_HCD_HC_Halt+0x1e>
 8003d76:	2302      	movs	r3, #2
 8003d78:	e00f      	b.n	8003d9a <HAL_HCD_HC_Halt+0x3e>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	78fa      	ldrb	r2, [r7, #3]
 8003d88:	4611      	mov	r1, r2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f005 f9cd 	bl	800912a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
	...

08003da4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	4608      	mov	r0, r1
 8003dae:	4611      	mov	r1, r2
 8003db0:	461a      	mov	r2, r3
 8003db2:	4603      	mov	r3, r0
 8003db4:	70fb      	strb	r3, [r7, #3]
 8003db6:	460b      	mov	r3, r1
 8003db8:	70bb      	strb	r3, [r7, #2]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003dbe:	78fb      	ldrb	r3, [r7, #3]
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	212c      	movs	r1, #44	; 0x2c
 8003dc4:	fb01 f303 	mul.w	r3, r1, r3
 8003dc8:	4413      	add	r3, r2
 8003dca:	333b      	adds	r3, #59	; 0x3b
 8003dcc:	78ba      	ldrb	r2, [r7, #2]
 8003dce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003dd0:	78fb      	ldrb	r3, [r7, #3]
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	212c      	movs	r1, #44	; 0x2c
 8003dd6:	fb01 f303 	mul.w	r3, r1, r3
 8003dda:	4413      	add	r3, r2
 8003ddc:	333f      	adds	r3, #63	; 0x3f
 8003dde:	787a      	ldrb	r2, [r7, #1]
 8003de0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003de2:	7c3b      	ldrb	r3, [r7, #16]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d112      	bne.n	8003e0e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003de8:	78fb      	ldrb	r3, [r7, #3]
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	212c      	movs	r1, #44	; 0x2c
 8003dee:	fb01 f303 	mul.w	r3, r1, r3
 8003df2:	4413      	add	r3, r2
 8003df4:	3342      	adds	r3, #66	; 0x42
 8003df6:	2203      	movs	r2, #3
 8003df8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003dfa:	78fb      	ldrb	r3, [r7, #3]
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	212c      	movs	r1, #44	; 0x2c
 8003e00:	fb01 f303 	mul.w	r3, r1, r3
 8003e04:	4413      	add	r3, r2
 8003e06:	333d      	adds	r3, #61	; 0x3d
 8003e08:	7f3a      	ldrb	r2, [r7, #28]
 8003e0a:	701a      	strb	r2, [r3, #0]
 8003e0c:	e008      	b.n	8003e20 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e0e:	78fb      	ldrb	r3, [r7, #3]
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	212c      	movs	r1, #44	; 0x2c
 8003e14:	fb01 f303 	mul.w	r3, r1, r3
 8003e18:	4413      	add	r3, r2
 8003e1a:	3342      	adds	r3, #66	; 0x42
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003e20:	787b      	ldrb	r3, [r7, #1]
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	f200 80c6 	bhi.w	8003fb4 <HAL_HCD_HC_SubmitRequest+0x210>
 8003e28:	a201      	add	r2, pc, #4	; (adr r2, 8003e30 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2e:	bf00      	nop
 8003e30:	08003e41 	.word	0x08003e41
 8003e34:	08003fa1 	.word	0x08003fa1
 8003e38:	08003ea5 	.word	0x08003ea5
 8003e3c:	08003f23 	.word	0x08003f23
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003e40:	7c3b      	ldrb	r3, [r7, #16]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	f040 80b8 	bne.w	8003fb8 <HAL_HCD_HC_SubmitRequest+0x214>
 8003e48:	78bb      	ldrb	r3, [r7, #2]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f040 80b4 	bne.w	8003fb8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003e50:	8b3b      	ldrh	r3, [r7, #24]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d108      	bne.n	8003e68 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003e56:	78fb      	ldrb	r3, [r7, #3]
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	212c      	movs	r1, #44	; 0x2c
 8003e5c:	fb01 f303 	mul.w	r3, r1, r3
 8003e60:	4413      	add	r3, r2
 8003e62:	3355      	adds	r3, #85	; 0x55
 8003e64:	2201      	movs	r2, #1
 8003e66:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003e68:	78fb      	ldrb	r3, [r7, #3]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	212c      	movs	r1, #44	; 0x2c
 8003e6e:	fb01 f303 	mul.w	r3, r1, r3
 8003e72:	4413      	add	r3, r2
 8003e74:	3355      	adds	r3, #85	; 0x55
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d109      	bne.n	8003e90 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e7c:	78fb      	ldrb	r3, [r7, #3]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	212c      	movs	r1, #44	; 0x2c
 8003e82:	fb01 f303 	mul.w	r3, r1, r3
 8003e86:	4413      	add	r3, r2
 8003e88:	3342      	adds	r3, #66	; 0x42
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003e8e:	e093      	b.n	8003fb8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e90:	78fb      	ldrb	r3, [r7, #3]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	212c      	movs	r1, #44	; 0x2c
 8003e96:	fb01 f303 	mul.w	r3, r1, r3
 8003e9a:	4413      	add	r3, r2
 8003e9c:	3342      	adds	r3, #66	; 0x42
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	701a      	strb	r2, [r3, #0]
      break;
 8003ea2:	e089      	b.n	8003fb8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003ea4:	78bb      	ldrb	r3, [r7, #2]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d11d      	bne.n	8003ee6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003eaa:	78fb      	ldrb	r3, [r7, #3]
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	212c      	movs	r1, #44	; 0x2c
 8003eb0:	fb01 f303 	mul.w	r3, r1, r3
 8003eb4:	4413      	add	r3, r2
 8003eb6:	3355      	adds	r3, #85	; 0x55
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d109      	bne.n	8003ed2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ebe:	78fb      	ldrb	r3, [r7, #3]
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	212c      	movs	r1, #44	; 0x2c
 8003ec4:	fb01 f303 	mul.w	r3, r1, r3
 8003ec8:	4413      	add	r3, r2
 8003eca:	3342      	adds	r3, #66	; 0x42
 8003ecc:	2200      	movs	r2, #0
 8003ece:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003ed0:	e073      	b.n	8003fba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ed2:	78fb      	ldrb	r3, [r7, #3]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	212c      	movs	r1, #44	; 0x2c
 8003ed8:	fb01 f303 	mul.w	r3, r1, r3
 8003edc:	4413      	add	r3, r2
 8003ede:	3342      	adds	r3, #66	; 0x42
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	701a      	strb	r2, [r3, #0]
      break;
 8003ee4:	e069      	b.n	8003fba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003ee6:	78fb      	ldrb	r3, [r7, #3]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	212c      	movs	r1, #44	; 0x2c
 8003eec:	fb01 f303 	mul.w	r3, r1, r3
 8003ef0:	4413      	add	r3, r2
 8003ef2:	3354      	adds	r3, #84	; 0x54
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d109      	bne.n	8003f0e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003efa:	78fb      	ldrb	r3, [r7, #3]
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	212c      	movs	r1, #44	; 0x2c
 8003f00:	fb01 f303 	mul.w	r3, r1, r3
 8003f04:	4413      	add	r3, r2
 8003f06:	3342      	adds	r3, #66	; 0x42
 8003f08:	2200      	movs	r2, #0
 8003f0a:	701a      	strb	r2, [r3, #0]
      break;
 8003f0c:	e055      	b.n	8003fba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f0e:	78fb      	ldrb	r3, [r7, #3]
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	212c      	movs	r1, #44	; 0x2c
 8003f14:	fb01 f303 	mul.w	r3, r1, r3
 8003f18:	4413      	add	r3, r2
 8003f1a:	3342      	adds	r3, #66	; 0x42
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	701a      	strb	r2, [r3, #0]
      break;
 8003f20:	e04b      	b.n	8003fba <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003f22:	78bb      	ldrb	r3, [r7, #2]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d11d      	bne.n	8003f64 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003f28:	78fb      	ldrb	r3, [r7, #3]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	212c      	movs	r1, #44	; 0x2c
 8003f2e:	fb01 f303 	mul.w	r3, r1, r3
 8003f32:	4413      	add	r3, r2
 8003f34:	3355      	adds	r3, #85	; 0x55
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d109      	bne.n	8003f50 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f3c:	78fb      	ldrb	r3, [r7, #3]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	212c      	movs	r1, #44	; 0x2c
 8003f42:	fb01 f303 	mul.w	r3, r1, r3
 8003f46:	4413      	add	r3, r2
 8003f48:	3342      	adds	r3, #66	; 0x42
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003f4e:	e034      	b.n	8003fba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	212c      	movs	r1, #44	; 0x2c
 8003f56:	fb01 f303 	mul.w	r3, r1, r3
 8003f5a:	4413      	add	r3, r2
 8003f5c:	3342      	adds	r3, #66	; 0x42
 8003f5e:	2202      	movs	r2, #2
 8003f60:	701a      	strb	r2, [r3, #0]
      break;
 8003f62:	e02a      	b.n	8003fba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003f64:	78fb      	ldrb	r3, [r7, #3]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	212c      	movs	r1, #44	; 0x2c
 8003f6a:	fb01 f303 	mul.w	r3, r1, r3
 8003f6e:	4413      	add	r3, r2
 8003f70:	3354      	adds	r3, #84	; 0x54
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d109      	bne.n	8003f8c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f78:	78fb      	ldrb	r3, [r7, #3]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	212c      	movs	r1, #44	; 0x2c
 8003f7e:	fb01 f303 	mul.w	r3, r1, r3
 8003f82:	4413      	add	r3, r2
 8003f84:	3342      	adds	r3, #66	; 0x42
 8003f86:	2200      	movs	r2, #0
 8003f88:	701a      	strb	r2, [r3, #0]
      break;
 8003f8a:	e016      	b.n	8003fba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f8c:	78fb      	ldrb	r3, [r7, #3]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	212c      	movs	r1, #44	; 0x2c
 8003f92:	fb01 f303 	mul.w	r3, r1, r3
 8003f96:	4413      	add	r3, r2
 8003f98:	3342      	adds	r3, #66	; 0x42
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	701a      	strb	r2, [r3, #0]
      break;
 8003f9e:	e00c      	b.n	8003fba <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	212c      	movs	r1, #44	; 0x2c
 8003fa6:	fb01 f303 	mul.w	r3, r1, r3
 8003faa:	4413      	add	r3, r2
 8003fac:	3342      	adds	r3, #66	; 0x42
 8003fae:	2200      	movs	r2, #0
 8003fb0:	701a      	strb	r2, [r3, #0]
      break;
 8003fb2:	e002      	b.n	8003fba <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003fb4:	bf00      	nop
 8003fb6:	e000      	b.n	8003fba <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003fb8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003fba:	78fb      	ldrb	r3, [r7, #3]
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	212c      	movs	r1, #44	; 0x2c
 8003fc0:	fb01 f303 	mul.w	r3, r1, r3
 8003fc4:	4413      	add	r3, r2
 8003fc6:	3344      	adds	r3, #68	; 0x44
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003fcc:	78fb      	ldrb	r3, [r7, #3]
 8003fce:	8b3a      	ldrh	r2, [r7, #24]
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	202c      	movs	r0, #44	; 0x2c
 8003fd4:	fb00 f303 	mul.w	r3, r0, r3
 8003fd8:	440b      	add	r3, r1
 8003fda:	334c      	adds	r3, #76	; 0x4c
 8003fdc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003fde:	78fb      	ldrb	r3, [r7, #3]
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	212c      	movs	r1, #44	; 0x2c
 8003fe4:	fb01 f303 	mul.w	r3, r1, r3
 8003fe8:	4413      	add	r3, r2
 8003fea:	3360      	adds	r3, #96	; 0x60
 8003fec:	2200      	movs	r2, #0
 8003fee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	212c      	movs	r1, #44	; 0x2c
 8003ff6:	fb01 f303 	mul.w	r3, r1, r3
 8003ffa:	4413      	add	r3, r2
 8003ffc:	3350      	adds	r3, #80	; 0x50
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004002:	78fb      	ldrb	r3, [r7, #3]
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	212c      	movs	r1, #44	; 0x2c
 8004008:	fb01 f303 	mul.w	r3, r1, r3
 800400c:	4413      	add	r3, r2
 800400e:	3339      	adds	r3, #57	; 0x39
 8004010:	78fa      	ldrb	r2, [r7, #3]
 8004012:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004014:	78fb      	ldrb	r3, [r7, #3]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	212c      	movs	r1, #44	; 0x2c
 800401a:	fb01 f303 	mul.w	r3, r1, r3
 800401e:	4413      	add	r3, r2
 8004020:	3361      	adds	r3, #97	; 0x61
 8004022:	2200      	movs	r2, #0
 8004024:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6818      	ldr	r0, [r3, #0]
 800402a:	78fb      	ldrb	r3, [r7, #3]
 800402c:	222c      	movs	r2, #44	; 0x2c
 800402e:	fb02 f303 	mul.w	r3, r2, r3
 8004032:	3338      	adds	r3, #56	; 0x38
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	18d1      	adds	r1, r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	b2db      	uxtb	r3, r3
 800403e:	461a      	mov	r2, r3
 8004040:	f004 ff20 	bl	8008e84 <USB_HC_StartXfer>
 8004044:	4603      	mov	r3, r0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop

08004050 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f004 fc21 	bl	80088ae <USB_GetMode>
 800406c:	4603      	mov	r3, r0
 800406e:	2b01      	cmp	r3, #1
 8004070:	f040 80f6 	bne.w	8004260 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	f004 fc05 	bl	8008888 <USB_ReadInterrupts>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 80ec 	beq.w	800425e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4618      	mov	r0, r3
 800408c:	f004 fbfc 	bl	8008888 <USB_ReadInterrupts>
 8004090:	4603      	mov	r3, r0
 8004092:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004096:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800409a:	d104      	bne.n	80040a6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80040a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f004 fbec 	bl	8008888 <USB_ReadInterrupts>
 80040b0:	4603      	mov	r3, r0
 80040b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040ba:	d104      	bne.n	80040c6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80040c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f004 fbdc 	bl	8008888 <USB_ReadInterrupts>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040da:	d104      	bne.n	80040e6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80040e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f004 fbcc 	bl	8008888 <USB_ReadInterrupts>
 80040f0:	4603      	mov	r3, r0
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d103      	bne.n	8004102 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2202      	movs	r2, #2
 8004100:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f004 fbbe 	bl	8008888 <USB_ReadInterrupts>
 800410c:	4603      	mov	r3, r0
 800410e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004112:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004116:	d11c      	bne.n	8004152 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004120:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10f      	bne.n	8004152 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004132:	2110      	movs	r1, #16
 8004134:	6938      	ldr	r0, [r7, #16]
 8004136:	f004 faad 	bl	8008694 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800413a:	6938      	ldr	r0, [r7, #16]
 800413c:	f004 fade 	bl	80086fc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2101      	movs	r1, #1
 8004146:	4618      	mov	r0, r3
 8004148:	f004 fcb4 	bl	8008ab4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f00f fa93 	bl	8013678 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4618      	mov	r0, r3
 8004158:	f004 fb96 	bl	8008888 <USB_ReadInterrupts>
 800415c:	4603      	mov	r3, r0
 800415e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004162:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004166:	d102      	bne.n	800416e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f001 f89e 	bl	80052aa <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f004 fb88 	bl	8008888 <USB_ReadInterrupts>
 8004178:	4603      	mov	r3, r0
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	2b08      	cmp	r3, #8
 8004180:	d106      	bne.n	8004190 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f00f fa5c 	bl	8013640 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2208      	movs	r2, #8
 800418e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4618      	mov	r0, r3
 8004196:	f004 fb77 	bl	8008888 <USB_ReadInterrupts>
 800419a:	4603      	mov	r3, r0
 800419c:	f003 0310 	and.w	r3, r3, #16
 80041a0:	2b10      	cmp	r3, #16
 80041a2:	d101      	bne.n	80041a8 <HAL_HCD_IRQHandler+0x158>
 80041a4:	2301      	movs	r3, #1
 80041a6:	e000      	b.n	80041aa <HAL_HCD_IRQHandler+0x15a>
 80041a8:	2300      	movs	r3, #0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d012      	beq.n	80041d4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	699a      	ldr	r2, [r3, #24]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0210 	bic.w	r2, r2, #16
 80041bc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 ffa1 	bl	8005106 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699a      	ldr	r2, [r3, #24]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0210 	orr.w	r2, r2, #16
 80041d2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4618      	mov	r0, r3
 80041da:	f004 fb55 	bl	8008888 <USB_ReadInterrupts>
 80041de:	4603      	mov	r3, r0
 80041e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041e8:	d13a      	bne.n	8004260 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f004 ff8a 	bl	8009108 <USB_HC_ReadInterrupt>
 80041f4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80041f6:	2300      	movs	r3, #0
 80041f8:	617b      	str	r3, [r7, #20]
 80041fa:	e025      	b.n	8004248 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	fa22 f303 	lsr.w	r3, r2, r3
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b00      	cmp	r3, #0
 800420e:	d018      	beq.n	8004242 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	015a      	lsls	r2, r3, #5
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4413      	add	r3, r2
 8004218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004222:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004226:	d106      	bne.n	8004236 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	b2db      	uxtb	r3, r3
 800422c:	4619      	mov	r1, r3
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f8ab 	bl	800438a <HCD_HC_IN_IRQHandler>
 8004234:	e005      	b.n	8004242 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	b2db      	uxtb	r3, r3
 800423a:	4619      	mov	r1, r3
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 fbf9 	bl	8004a34 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	3301      	adds	r3, #1
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	429a      	cmp	r2, r3
 8004250:	d3d4      	bcc.n	80041fc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800425a:	615a      	str	r2, [r3, #20]
 800425c:	e000      	b.n	8004260 <HAL_HCD_IRQHandler+0x210>
      return;
 800425e:	bf00      	nop
    }
  }
}
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b082      	sub	sp, #8
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004274:	2b01      	cmp	r3, #1
 8004276:	d101      	bne.n	800427c <HAL_HCD_Start+0x16>
 8004278:	2302      	movs	r3, #2
 800427a:	e013      	b.n	80042a4 <HAL_HCD_Start+0x3e>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2101      	movs	r1, #1
 800428a:	4618      	mov	r0, r3
 800428c:	f004 fc76 	bl	8008b7c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4618      	mov	r0, r3
 8004296:	f004 f98e 	bl	80085b6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <HAL_HCD_Stop+0x16>
 80042be:	2302      	movs	r3, #2
 80042c0:	e00d      	b.n	80042de <HAL_HCD_Stop+0x32>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f005 f864 	bl	800939c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b082      	sub	sp, #8
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f004 fc18 	bl	8008b28 <USB_ResetPort>
 80042f8:	4603      	mov	r3, r0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	460b      	mov	r3, r1
 800430c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800430e:	78fb      	ldrb	r3, [r7, #3]
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	212c      	movs	r1, #44	; 0x2c
 8004314:	fb01 f303 	mul.w	r3, r1, r3
 8004318:	4413      	add	r3, r2
 800431a:	3360      	adds	r3, #96	; 0x60
 800431c:	781b      	ldrb	r3, [r3, #0]
}
 800431e:	4618      	mov	r0, r3
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
 8004332:	460b      	mov	r3, r1
 8004334:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004336:	78fb      	ldrb	r3, [r7, #3]
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	212c      	movs	r1, #44	; 0x2c
 800433c:	fb01 f303 	mul.w	r3, r1, r3
 8004340:	4413      	add	r3, r2
 8004342:	3350      	adds	r3, #80	; 0x50
 8004344:	681b      	ldr	r3, [r3, #0]
}
 8004346:	4618      	mov	r0, r3
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b082      	sub	sp, #8
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4618      	mov	r0, r3
 8004360:	f004 fc5c 	bl	8008c1c <USB_GetCurrentFrame>
 8004364:	4603      	mov	r3, r0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b082      	sub	sp, #8
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4618      	mov	r0, r3
 800437c:	f004 fc37 	bl	8008bee <USB_GetHostSpeed>
 8004380:	4603      	mov	r3, r0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b086      	sub	sp, #24
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	460b      	mov	r3, r1
 8004394:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80043a0:	78fb      	ldrb	r3, [r7, #3]
 80043a2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 0304 	and.w	r3, r3, #4
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d11a      	bne.n	80043f0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c6:	461a      	mov	r2, r3
 80043c8:	2304      	movs	r3, #4
 80043ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	212c      	movs	r1, #44	; 0x2c
 80043d2:	fb01 f303 	mul.w	r3, r1, r3
 80043d6:	4413      	add	r3, r2
 80043d8:	3361      	adds	r3, #97	; 0x61
 80043da:	2206      	movs	r2, #6
 80043dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	b2d2      	uxtb	r2, r2
 80043e6:	4611      	mov	r1, r2
 80043e8:	4618      	mov	r0, r3
 80043ea:	f004 fe9e 	bl	800912a <USB_HC_Halt>
 80043ee:	e0af      	b.n	8004550 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004406:	d11b      	bne.n	8004440 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	015a      	lsls	r2, r3, #5
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	4413      	add	r3, r2
 8004410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004414:	461a      	mov	r2, r3
 8004416:	f44f 7380 	mov.w	r3, #256	; 0x100
 800441a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	212c      	movs	r1, #44	; 0x2c
 8004422:	fb01 f303 	mul.w	r3, r1, r3
 8004426:	4413      	add	r3, r2
 8004428:	3361      	adds	r3, #97	; 0x61
 800442a:	2207      	movs	r2, #7
 800442c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	4611      	mov	r1, r2
 8004438:	4618      	mov	r0, r3
 800443a:	f004 fe76 	bl	800912a <USB_HC_Halt>
 800443e:	e087      	b.n	8004550 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	4413      	add	r3, r2
 8004448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 0320 	and.w	r3, r3, #32
 8004452:	2b20      	cmp	r3, #32
 8004454:	d109      	bne.n	800446a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	015a      	lsls	r2, r3, #5
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	4413      	add	r3, r2
 800445e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004462:	461a      	mov	r2, r3
 8004464:	2320      	movs	r3, #32
 8004466:	6093      	str	r3, [r2, #8]
 8004468:	e072      	b.n	8004550 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	015a      	lsls	r2, r3, #5
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	4413      	add	r3, r2
 8004472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 0308 	and.w	r3, r3, #8
 800447c:	2b08      	cmp	r3, #8
 800447e:	d11a      	bne.n	80044b6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	4413      	add	r3, r2
 8004488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800448c:	461a      	mov	r2, r3
 800448e:	2308      	movs	r3, #8
 8004490:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	212c      	movs	r1, #44	; 0x2c
 8004498:	fb01 f303 	mul.w	r3, r1, r3
 800449c:	4413      	add	r3, r2
 800449e:	3361      	adds	r3, #97	; 0x61
 80044a0:	2205      	movs	r2, #5
 80044a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	4611      	mov	r1, r2
 80044ae:	4618      	mov	r0, r3
 80044b0:	f004 fe3b 	bl	800912a <USB_HC_Halt>
 80044b4:	e04c      	b.n	8004550 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	015a      	lsls	r2, r3, #5
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	4413      	add	r3, r2
 80044be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044cc:	d11b      	bne.n	8004506 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	015a      	lsls	r2, r3, #5
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	4413      	add	r3, r2
 80044d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044da:	461a      	mov	r2, r3
 80044dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	212c      	movs	r1, #44	; 0x2c
 80044e8:	fb01 f303 	mul.w	r3, r1, r3
 80044ec:	4413      	add	r3, r2
 80044ee:	3361      	adds	r3, #97	; 0x61
 80044f0:	2208      	movs	r2, #8
 80044f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	4611      	mov	r1, r2
 80044fe:	4618      	mov	r0, r3
 8004500:	f004 fe13 	bl	800912a <USB_HC_Halt>
 8004504:	e024      	b.n	8004550 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	4413      	add	r3, r2
 800450e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004518:	2b80      	cmp	r3, #128	; 0x80
 800451a:	d119      	bne.n	8004550 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	4413      	add	r3, r2
 8004524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004528:	461a      	mov	r2, r3
 800452a:	2380      	movs	r3, #128	; 0x80
 800452c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	212c      	movs	r1, #44	; 0x2c
 8004534:	fb01 f303 	mul.w	r3, r1, r3
 8004538:	4413      	add	r3, r2
 800453a:	3361      	adds	r3, #97	; 0x61
 800453c:	2206      	movs	r2, #6
 800453e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	4611      	mov	r1, r2
 800454a:	4618      	mov	r0, r3
 800454c:	f004 fded 	bl	800912a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	4413      	add	r3, r2
 8004558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004566:	d112      	bne.n	800458e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	4611      	mov	r1, r2
 8004572:	4618      	mov	r0, r3
 8004574:	f004 fdd9 	bl	800912a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	4413      	add	r3, r2
 8004580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004584:	461a      	mov	r2, r3
 8004586:	f44f 7300 	mov.w	r3, #512	; 0x200
 800458a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800458c:	e24e      	b.n	8004a2c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	015a      	lsls	r2, r3, #5
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	4413      	add	r3, r2
 8004596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	f040 80df 	bne.w	8004764 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d019      	beq.n	80045e2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	212c      	movs	r1, #44	; 0x2c
 80045b4:	fb01 f303 	mul.w	r3, r1, r3
 80045b8:	4413      	add	r3, r2
 80045ba:	3348      	adds	r3, #72	; 0x48
 80045bc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	0159      	lsls	r1, r3, #5
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	440b      	add	r3, r1
 80045c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80045d0:	1ad2      	subs	r2, r2, r3
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	202c      	movs	r0, #44	; 0x2c
 80045d8:	fb00 f303 	mul.w	r3, r0, r3
 80045dc:	440b      	add	r3, r1
 80045de:	3350      	adds	r3, #80	; 0x50
 80045e0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	212c      	movs	r1, #44	; 0x2c
 80045e8:	fb01 f303 	mul.w	r3, r1, r3
 80045ec:	4413      	add	r3, r2
 80045ee:	3361      	adds	r3, #97	; 0x61
 80045f0:	2201      	movs	r2, #1
 80045f2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	212c      	movs	r1, #44	; 0x2c
 80045fa:	fb01 f303 	mul.w	r3, r1, r3
 80045fe:	4413      	add	r3, r2
 8004600:	335c      	adds	r3, #92	; 0x5c
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	4413      	add	r3, r2
 800460e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004612:	461a      	mov	r2, r3
 8004614:	2301      	movs	r3, #1
 8004616:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	212c      	movs	r1, #44	; 0x2c
 800461e:	fb01 f303 	mul.w	r3, r1, r3
 8004622:	4413      	add	r3, r2
 8004624:	333f      	adds	r3, #63	; 0x3f
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d009      	beq.n	8004640 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	212c      	movs	r1, #44	; 0x2c
 8004632:	fb01 f303 	mul.w	r3, r1, r3
 8004636:	4413      	add	r3, r2
 8004638:	333f      	adds	r3, #63	; 0x3f
 800463a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800463c:	2b02      	cmp	r3, #2
 800463e:	d111      	bne.n	8004664 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	4611      	mov	r1, r2
 800464a:	4618      	mov	r0, r3
 800464c:	f004 fd6d 	bl	800912a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	4413      	add	r3, r2
 8004658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800465c:	461a      	mov	r2, r3
 800465e:	2310      	movs	r3, #16
 8004660:	6093      	str	r3, [r2, #8]
 8004662:	e03a      	b.n	80046da <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	212c      	movs	r1, #44	; 0x2c
 800466a:	fb01 f303 	mul.w	r3, r1, r3
 800466e:	4413      	add	r3, r2
 8004670:	333f      	adds	r3, #63	; 0x3f
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	2b03      	cmp	r3, #3
 8004676:	d009      	beq.n	800468c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	212c      	movs	r1, #44	; 0x2c
 800467e:	fb01 f303 	mul.w	r3, r1, r3
 8004682:	4413      	add	r3, r2
 8004684:	333f      	adds	r3, #63	; 0x3f
 8004686:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004688:	2b01      	cmp	r3, #1
 800468a:	d126      	bne.n	80046da <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	4413      	add	r3, r2
 8004694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	0151      	lsls	r1, r2, #5
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	440a      	add	r2, r1
 80046a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046aa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	212c      	movs	r1, #44	; 0x2c
 80046b2:	fb01 f303 	mul.w	r3, r1, r3
 80046b6:	4413      	add	r3, r2
 80046b8:	3360      	adds	r3, #96	; 0x60
 80046ba:	2201      	movs	r2, #1
 80046bc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	b2d9      	uxtb	r1, r3
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	202c      	movs	r0, #44	; 0x2c
 80046c8:	fb00 f303 	mul.w	r3, r0, r3
 80046cc:	4413      	add	r3, r2
 80046ce:	3360      	adds	r3, #96	; 0x60
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	461a      	mov	r2, r3
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f00e ffdd 	bl	8013694 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d12b      	bne.n	800473a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	212c      	movs	r1, #44	; 0x2c
 80046e8:	fb01 f303 	mul.w	r3, r1, r3
 80046ec:	4413      	add	r3, r2
 80046ee:	3348      	adds	r3, #72	; 0x48
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6879      	ldr	r1, [r7, #4]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	202c      	movs	r0, #44	; 0x2c
 80046f8:	fb00 f202 	mul.w	r2, r0, r2
 80046fc:	440a      	add	r2, r1
 80046fe:	3240      	adds	r2, #64	; 0x40
 8004700:	8812      	ldrh	r2, [r2, #0]
 8004702:	fbb3 f3f2 	udiv	r3, r3, r2
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 818e 	beq.w	8004a2c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	212c      	movs	r1, #44	; 0x2c
 8004716:	fb01 f303 	mul.w	r3, r1, r3
 800471a:	4413      	add	r3, r2
 800471c:	3354      	adds	r3, #84	; 0x54
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	f083 0301 	eor.w	r3, r3, #1
 8004724:	b2d8      	uxtb	r0, r3
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	212c      	movs	r1, #44	; 0x2c
 800472c:	fb01 f303 	mul.w	r3, r1, r3
 8004730:	4413      	add	r3, r2
 8004732:	3354      	adds	r3, #84	; 0x54
 8004734:	4602      	mov	r2, r0
 8004736:	701a      	strb	r2, [r3, #0]
}
 8004738:	e178      	b.n	8004a2c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	212c      	movs	r1, #44	; 0x2c
 8004740:	fb01 f303 	mul.w	r3, r1, r3
 8004744:	4413      	add	r3, r2
 8004746:	3354      	adds	r3, #84	; 0x54
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	f083 0301 	eor.w	r3, r3, #1
 800474e:	b2d8      	uxtb	r0, r3
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	212c      	movs	r1, #44	; 0x2c
 8004756:	fb01 f303 	mul.w	r3, r1, r3
 800475a:	4413      	add	r3, r2
 800475c:	3354      	adds	r3, #84	; 0x54
 800475e:	4602      	mov	r2, r0
 8004760:	701a      	strb	r2, [r3, #0]
}
 8004762:	e163      	b.n	8004a2c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	015a      	lsls	r2, r3, #5
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	4413      	add	r3, r2
 800476c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b02      	cmp	r3, #2
 8004778:	f040 80f6 	bne.w	8004968 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	212c      	movs	r1, #44	; 0x2c
 8004782:	fb01 f303 	mul.w	r3, r1, r3
 8004786:	4413      	add	r3, r2
 8004788:	3361      	adds	r3, #97	; 0x61
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d109      	bne.n	80047a4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	212c      	movs	r1, #44	; 0x2c
 8004796:	fb01 f303 	mul.w	r3, r1, r3
 800479a:	4413      	add	r3, r2
 800479c:	3360      	adds	r3, #96	; 0x60
 800479e:	2201      	movs	r2, #1
 80047a0:	701a      	strb	r2, [r3, #0]
 80047a2:	e0c9      	b.n	8004938 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	212c      	movs	r1, #44	; 0x2c
 80047aa:	fb01 f303 	mul.w	r3, r1, r3
 80047ae:	4413      	add	r3, r2
 80047b0:	3361      	adds	r3, #97	; 0x61
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	2b05      	cmp	r3, #5
 80047b6:	d109      	bne.n	80047cc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	212c      	movs	r1, #44	; 0x2c
 80047be:	fb01 f303 	mul.w	r3, r1, r3
 80047c2:	4413      	add	r3, r2
 80047c4:	3360      	adds	r3, #96	; 0x60
 80047c6:	2205      	movs	r2, #5
 80047c8:	701a      	strb	r2, [r3, #0]
 80047ca:	e0b5      	b.n	8004938 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	212c      	movs	r1, #44	; 0x2c
 80047d2:	fb01 f303 	mul.w	r3, r1, r3
 80047d6:	4413      	add	r3, r2
 80047d8:	3361      	adds	r3, #97	; 0x61
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	2b06      	cmp	r3, #6
 80047de:	d009      	beq.n	80047f4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	212c      	movs	r1, #44	; 0x2c
 80047e6:	fb01 f303 	mul.w	r3, r1, r3
 80047ea:	4413      	add	r3, r2
 80047ec:	3361      	adds	r3, #97	; 0x61
 80047ee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d150      	bne.n	8004896 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	212c      	movs	r1, #44	; 0x2c
 80047fa:	fb01 f303 	mul.w	r3, r1, r3
 80047fe:	4413      	add	r3, r2
 8004800:	335c      	adds	r3, #92	; 0x5c
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	6879      	ldr	r1, [r7, #4]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	202c      	movs	r0, #44	; 0x2c
 800480c:	fb00 f303 	mul.w	r3, r0, r3
 8004810:	440b      	add	r3, r1
 8004812:	335c      	adds	r3, #92	; 0x5c
 8004814:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	212c      	movs	r1, #44	; 0x2c
 800481c:	fb01 f303 	mul.w	r3, r1, r3
 8004820:	4413      	add	r3, r2
 8004822:	335c      	adds	r3, #92	; 0x5c
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2b02      	cmp	r3, #2
 8004828:	d912      	bls.n	8004850 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	212c      	movs	r1, #44	; 0x2c
 8004830:	fb01 f303 	mul.w	r3, r1, r3
 8004834:	4413      	add	r3, r2
 8004836:	335c      	adds	r3, #92	; 0x5c
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	212c      	movs	r1, #44	; 0x2c
 8004842:	fb01 f303 	mul.w	r3, r1, r3
 8004846:	4413      	add	r3, r2
 8004848:	3360      	adds	r3, #96	; 0x60
 800484a:	2204      	movs	r2, #4
 800484c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800484e:	e073      	b.n	8004938 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	212c      	movs	r1, #44	; 0x2c
 8004856:	fb01 f303 	mul.w	r3, r1, r3
 800485a:	4413      	add	r3, r2
 800485c:	3360      	adds	r3, #96	; 0x60
 800485e:	2202      	movs	r2, #2
 8004860:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	4413      	add	r3, r2
 800486a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004878:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004880:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	015a      	lsls	r2, r3, #5
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	4413      	add	r3, r2
 800488a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800488e:	461a      	mov	r2, r3
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004894:	e050      	b.n	8004938 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	212c      	movs	r1, #44	; 0x2c
 800489c:	fb01 f303 	mul.w	r3, r1, r3
 80048a0:	4413      	add	r3, r2
 80048a2:	3361      	adds	r3, #97	; 0x61
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	2b03      	cmp	r3, #3
 80048a8:	d122      	bne.n	80048f0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	212c      	movs	r1, #44	; 0x2c
 80048b0:	fb01 f303 	mul.w	r3, r1, r3
 80048b4:	4413      	add	r3, r2
 80048b6:	3360      	adds	r3, #96	; 0x60
 80048b8:	2202      	movs	r2, #2
 80048ba:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048d2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048da:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e8:	461a      	mov	r2, r3
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	6013      	str	r3, [r2, #0]
 80048ee:	e023      	b.n	8004938 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	212c      	movs	r1, #44	; 0x2c
 80048f6:	fb01 f303 	mul.w	r3, r1, r3
 80048fa:	4413      	add	r3, r2
 80048fc:	3361      	adds	r3, #97	; 0x61
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	2b07      	cmp	r3, #7
 8004902:	d119      	bne.n	8004938 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	212c      	movs	r1, #44	; 0x2c
 800490a:	fb01 f303 	mul.w	r3, r1, r3
 800490e:	4413      	add	r3, r2
 8004910:	335c      	adds	r3, #92	; 0x5c
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	6879      	ldr	r1, [r7, #4]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	202c      	movs	r0, #44	; 0x2c
 800491c:	fb00 f303 	mul.w	r3, r0, r3
 8004920:	440b      	add	r3, r1
 8004922:	335c      	adds	r3, #92	; 0x5c
 8004924:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	212c      	movs	r1, #44	; 0x2c
 800492c:	fb01 f303 	mul.w	r3, r1, r3
 8004930:	4413      	add	r3, r2
 8004932:	3360      	adds	r3, #96	; 0x60
 8004934:	2204      	movs	r2, #4
 8004936:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	015a      	lsls	r2, r3, #5
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	4413      	add	r3, r2
 8004940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004944:	461a      	mov	r2, r3
 8004946:	2302      	movs	r3, #2
 8004948:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	b2d9      	uxtb	r1, r3
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	202c      	movs	r0, #44	; 0x2c
 8004954:	fb00 f303 	mul.w	r3, r0, r3
 8004958:	4413      	add	r3, r2
 800495a:	3360      	adds	r3, #96	; 0x60
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	461a      	mov	r2, r3
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f00e fe97 	bl	8013694 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004966:	e061      	b.n	8004a2c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	4413      	add	r3, r2
 8004970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 0310 	and.w	r3, r3, #16
 800497a:	2b10      	cmp	r3, #16
 800497c:	d156      	bne.n	8004a2c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	212c      	movs	r1, #44	; 0x2c
 8004984:	fb01 f303 	mul.w	r3, r1, r3
 8004988:	4413      	add	r3, r2
 800498a:	333f      	adds	r3, #63	; 0x3f
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	2b03      	cmp	r3, #3
 8004990:	d111      	bne.n	80049b6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	212c      	movs	r1, #44	; 0x2c
 8004998:	fb01 f303 	mul.w	r3, r1, r3
 800499c:	4413      	add	r3, r2
 800499e:	335c      	adds	r3, #92	; 0x5c
 80049a0:	2200      	movs	r2, #0
 80049a2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	4611      	mov	r1, r2
 80049ae:	4618      	mov	r0, r3
 80049b0:	f004 fbbb 	bl	800912a <USB_HC_Halt>
 80049b4:	e031      	b.n	8004a1a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	212c      	movs	r1, #44	; 0x2c
 80049bc:	fb01 f303 	mul.w	r3, r1, r3
 80049c0:	4413      	add	r3, r2
 80049c2:	333f      	adds	r3, #63	; 0x3f
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d009      	beq.n	80049de <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	212c      	movs	r1, #44	; 0x2c
 80049d0:	fb01 f303 	mul.w	r3, r1, r3
 80049d4:	4413      	add	r3, r2
 80049d6:	333f      	adds	r3, #63	; 0x3f
 80049d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d11d      	bne.n	8004a1a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	212c      	movs	r1, #44	; 0x2c
 80049e4:	fb01 f303 	mul.w	r3, r1, r3
 80049e8:	4413      	add	r3, r2
 80049ea:	335c      	adds	r3, #92	; 0x5c
 80049ec:	2200      	movs	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d110      	bne.n	8004a1a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	212c      	movs	r1, #44	; 0x2c
 80049fe:	fb01 f303 	mul.w	r3, r1, r3
 8004a02:	4413      	add	r3, r2
 8004a04:	3361      	adds	r3, #97	; 0x61
 8004a06:	2203      	movs	r2, #3
 8004a08:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	b2d2      	uxtb	r2, r2
 8004a12:	4611      	mov	r1, r2
 8004a14:	4618      	mov	r0, r3
 8004a16:	f004 fb88 	bl	800912a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a26:	461a      	mov	r2, r3
 8004a28:	2310      	movs	r3, #16
 8004a2a:	6093      	str	r3, [r2, #8]
}
 8004a2c:	bf00      	nop
 8004a2e:	3718      	adds	r7, #24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b088      	sub	sp, #32
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004a4a:	78fb      	ldrb	r3, [r7, #3]
 8004a4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b04      	cmp	r3, #4
 8004a62:	d11a      	bne.n	8004a9a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a70:	461a      	mov	r2, r3
 8004a72:	2304      	movs	r3, #4
 8004a74:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	212c      	movs	r1, #44	; 0x2c
 8004a7c:	fb01 f303 	mul.w	r3, r1, r3
 8004a80:	4413      	add	r3, r2
 8004a82:	3361      	adds	r3, #97	; 0x61
 8004a84:	2206      	movs	r2, #6
 8004a86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	4611      	mov	r1, r2
 8004a92:	4618      	mov	r0, r3
 8004a94:	f004 fb49 	bl	800912a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004a98:	e331      	b.n	80050fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	015a      	lsls	r2, r3, #5
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 0320 	and.w	r3, r3, #32
 8004aac:	2b20      	cmp	r3, #32
 8004aae:	d12e      	bne.n	8004b0e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004abc:	461a      	mov	r2, r3
 8004abe:	2320      	movs	r3, #32
 8004ac0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	212c      	movs	r1, #44	; 0x2c
 8004ac8:	fb01 f303 	mul.w	r3, r1, r3
 8004acc:	4413      	add	r3, r2
 8004ace:	333d      	adds	r3, #61	; 0x3d
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	f040 8313 	bne.w	80050fe <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	212c      	movs	r1, #44	; 0x2c
 8004ade:	fb01 f303 	mul.w	r3, r1, r3
 8004ae2:	4413      	add	r3, r2
 8004ae4:	333d      	adds	r3, #61	; 0x3d
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	212c      	movs	r1, #44	; 0x2c
 8004af0:	fb01 f303 	mul.w	r3, r1, r3
 8004af4:	4413      	add	r3, r2
 8004af6:	3360      	adds	r3, #96	; 0x60
 8004af8:	2202      	movs	r2, #2
 8004afa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	b2d2      	uxtb	r2, r2
 8004b04:	4611      	mov	r1, r2
 8004b06:	4618      	mov	r0, r3
 8004b08:	f004 fb0f 	bl	800912a <USB_HC_Halt>
}
 8004b0c:	e2f7      	b.n	80050fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	015a      	lsls	r2, r3, #5
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b24:	d112      	bne.n	8004b4c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b32:	461a      	mov	r2, r3
 8004b34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b38:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	b2d2      	uxtb	r2, r2
 8004b42:	4611      	mov	r1, r2
 8004b44:	4618      	mov	r0, r3
 8004b46:	f004 faf0 	bl	800912a <USB_HC_Halt>
}
 8004b4a:	e2d8      	b.n	80050fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d140      	bne.n	8004be4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	212c      	movs	r1, #44	; 0x2c
 8004b68:	fb01 f303 	mul.w	r3, r1, r3
 8004b6c:	4413      	add	r3, r2
 8004b6e:	335c      	adds	r3, #92	; 0x5c
 8004b70:	2200      	movs	r2, #0
 8004b72:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b86:	2b40      	cmp	r3, #64	; 0x40
 8004b88:	d111      	bne.n	8004bae <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	212c      	movs	r1, #44	; 0x2c
 8004b90:	fb01 f303 	mul.w	r3, r1, r3
 8004b94:	4413      	add	r3, r2
 8004b96:	333d      	adds	r3, #61	; 0x3d
 8004b98:	2201      	movs	r2, #1
 8004b9a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba8:	461a      	mov	r2, r3
 8004baa:	2340      	movs	r3, #64	; 0x40
 8004bac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	015a      	lsls	r2, r3, #5
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bba:	461a      	mov	r2, r3
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	212c      	movs	r1, #44	; 0x2c
 8004bc6:	fb01 f303 	mul.w	r3, r1, r3
 8004bca:	4413      	add	r3, r2
 8004bcc:	3361      	adds	r3, #97	; 0x61
 8004bce:	2201      	movs	r2, #1
 8004bd0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	b2d2      	uxtb	r2, r2
 8004bda:	4611      	mov	r1, r2
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f004 faa4 	bl	800912a <USB_HC_Halt>
}
 8004be2:	e28c      	b.n	80050fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf6:	2b40      	cmp	r3, #64	; 0x40
 8004bf8:	d12c      	bne.n	8004c54 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	212c      	movs	r1, #44	; 0x2c
 8004c00:	fb01 f303 	mul.w	r3, r1, r3
 8004c04:	4413      	add	r3, r2
 8004c06:	3361      	adds	r3, #97	; 0x61
 8004c08:	2204      	movs	r2, #4
 8004c0a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	212c      	movs	r1, #44	; 0x2c
 8004c12:	fb01 f303 	mul.w	r3, r1, r3
 8004c16:	4413      	add	r3, r2
 8004c18:	333d      	adds	r3, #61	; 0x3d
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	212c      	movs	r1, #44	; 0x2c
 8004c24:	fb01 f303 	mul.w	r3, r1, r3
 8004c28:	4413      	add	r3, r2
 8004c2a:	335c      	adds	r3, #92	; 0x5c
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	b2d2      	uxtb	r2, r2
 8004c38:	4611      	mov	r1, r2
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f004 fa75 	bl	800912a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	2340      	movs	r3, #64	; 0x40
 8004c50:	6093      	str	r3, [r2, #8]
}
 8004c52:	e254      	b.n	80050fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	2b08      	cmp	r3, #8
 8004c68:	d11a      	bne.n	8004ca0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c76:	461a      	mov	r2, r3
 8004c78:	2308      	movs	r3, #8
 8004c7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	212c      	movs	r1, #44	; 0x2c
 8004c82:	fb01 f303 	mul.w	r3, r1, r3
 8004c86:	4413      	add	r3, r2
 8004c88:	3361      	adds	r3, #97	; 0x61
 8004c8a:	2205      	movs	r2, #5
 8004c8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	b2d2      	uxtb	r2, r2
 8004c96:	4611      	mov	r1, r2
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f004 fa46 	bl	800912a <USB_HC_Halt>
}
 8004c9e:	e22e      	b.n	80050fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	015a      	lsls	r2, r3, #5
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 0310 	and.w	r3, r3, #16
 8004cb2:	2b10      	cmp	r3, #16
 8004cb4:	d140      	bne.n	8004d38 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	212c      	movs	r1, #44	; 0x2c
 8004cbc:	fb01 f303 	mul.w	r3, r1, r3
 8004cc0:	4413      	add	r3, r2
 8004cc2:	335c      	adds	r3, #92	; 0x5c
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	212c      	movs	r1, #44	; 0x2c
 8004cce:	fb01 f303 	mul.w	r3, r1, r3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	3361      	adds	r3, #97	; 0x61
 8004cd6:	2203      	movs	r2, #3
 8004cd8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	212c      	movs	r1, #44	; 0x2c
 8004ce0:	fb01 f303 	mul.w	r3, r1, r3
 8004ce4:	4413      	add	r3, r2
 8004ce6:	333d      	adds	r3, #61	; 0x3d
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d112      	bne.n	8004d14 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	212c      	movs	r1, #44	; 0x2c
 8004cf4:	fb01 f303 	mul.w	r3, r1, r3
 8004cf8:	4413      	add	r3, r2
 8004cfa:	333c      	adds	r3, #60	; 0x3c
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d108      	bne.n	8004d14 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	212c      	movs	r1, #44	; 0x2c
 8004d08:	fb01 f303 	mul.w	r3, r1, r3
 8004d0c:	4413      	add	r3, r2
 8004d0e:	333d      	adds	r3, #61	; 0x3d
 8004d10:	2201      	movs	r2, #1
 8004d12:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	4611      	mov	r1, r2
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f004 fa03 	bl	800912a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d30:	461a      	mov	r2, r3
 8004d32:	2310      	movs	r3, #16
 8004d34:	6093      	str	r3, [r2, #8]
}
 8004d36:	e1e2      	b.n	80050fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4a:	2b80      	cmp	r3, #128	; 0x80
 8004d4c:	d164      	bne.n	8004e18 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d111      	bne.n	8004d7a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	212c      	movs	r1, #44	; 0x2c
 8004d5c:	fb01 f303 	mul.w	r3, r1, r3
 8004d60:	4413      	add	r3, r2
 8004d62:	3361      	adds	r3, #97	; 0x61
 8004d64:	2206      	movs	r2, #6
 8004d66:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	b2d2      	uxtb	r2, r2
 8004d70:	4611      	mov	r1, r2
 8004d72:	4618      	mov	r0, r3
 8004d74:	f004 f9d9 	bl	800912a <USB_HC_Halt>
 8004d78:	e044      	b.n	8004e04 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	212c      	movs	r1, #44	; 0x2c
 8004d80:	fb01 f303 	mul.w	r3, r1, r3
 8004d84:	4413      	add	r3, r2
 8004d86:	335c      	adds	r3, #92	; 0x5c
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	1c5a      	adds	r2, r3, #1
 8004d8c:	6879      	ldr	r1, [r7, #4]
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	202c      	movs	r0, #44	; 0x2c
 8004d92:	fb00 f303 	mul.w	r3, r0, r3
 8004d96:	440b      	add	r3, r1
 8004d98:	335c      	adds	r3, #92	; 0x5c
 8004d9a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	212c      	movs	r1, #44	; 0x2c
 8004da2:	fb01 f303 	mul.w	r3, r1, r3
 8004da6:	4413      	add	r3, r2
 8004da8:	335c      	adds	r3, #92	; 0x5c
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d920      	bls.n	8004df2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	212c      	movs	r1, #44	; 0x2c
 8004db6:	fb01 f303 	mul.w	r3, r1, r3
 8004dba:	4413      	add	r3, r2
 8004dbc:	335c      	adds	r3, #92	; 0x5c
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	212c      	movs	r1, #44	; 0x2c
 8004dc8:	fb01 f303 	mul.w	r3, r1, r3
 8004dcc:	4413      	add	r3, r2
 8004dce:	3360      	adds	r3, #96	; 0x60
 8004dd0:	2204      	movs	r2, #4
 8004dd2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	b2d9      	uxtb	r1, r3
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	202c      	movs	r0, #44	; 0x2c
 8004dde:	fb00 f303 	mul.w	r3, r0, r3
 8004de2:	4413      	add	r3, r2
 8004de4:	3360      	adds	r3, #96	; 0x60
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	461a      	mov	r2, r3
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f00e fc52 	bl	8013694 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004df0:	e008      	b.n	8004e04 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	212c      	movs	r1, #44	; 0x2c
 8004df8:	fb01 f303 	mul.w	r3, r1, r3
 8004dfc:	4413      	add	r3, r2
 8004dfe:	3360      	adds	r3, #96	; 0x60
 8004e00:	2202      	movs	r2, #2
 8004e02:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	015a      	lsls	r2, r3, #5
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e10:	461a      	mov	r2, r3
 8004e12:	2380      	movs	r3, #128	; 0x80
 8004e14:	6093      	str	r3, [r2, #8]
}
 8004e16:	e172      	b.n	80050fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e2e:	d11b      	bne.n	8004e68 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	212c      	movs	r1, #44	; 0x2c
 8004e36:	fb01 f303 	mul.w	r3, r1, r3
 8004e3a:	4413      	add	r3, r2
 8004e3c:	3361      	adds	r3, #97	; 0x61
 8004e3e:	2208      	movs	r2, #8
 8004e40:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	b2d2      	uxtb	r2, r2
 8004e4a:	4611      	mov	r1, r2
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f004 f96c 	bl	800912a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e5e:	461a      	mov	r2, r3
 8004e60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e64:	6093      	str	r3, [r2, #8]
}
 8004e66:	e14a      	b.n	80050fe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	f040 813f 	bne.w	80050fe <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	212c      	movs	r1, #44	; 0x2c
 8004e86:	fb01 f303 	mul.w	r3, r1, r3
 8004e8a:	4413      	add	r3, r2
 8004e8c:	3361      	adds	r3, #97	; 0x61
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d17d      	bne.n	8004f90 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	212c      	movs	r1, #44	; 0x2c
 8004e9a:	fb01 f303 	mul.w	r3, r1, r3
 8004e9e:	4413      	add	r3, r2
 8004ea0:	3360      	adds	r3, #96	; 0x60
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	212c      	movs	r1, #44	; 0x2c
 8004eac:	fb01 f303 	mul.w	r3, r1, r3
 8004eb0:	4413      	add	r3, r2
 8004eb2:	333f      	adds	r3, #63	; 0x3f
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d00a      	beq.n	8004ed0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	212c      	movs	r1, #44	; 0x2c
 8004ec0:	fb01 f303 	mul.w	r3, r1, r3
 8004ec4:	4413      	add	r3, r2
 8004ec6:	333f      	adds	r3, #63	; 0x3f
 8004ec8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004eca:	2b03      	cmp	r3, #3
 8004ecc:	f040 8100 	bne.w	80050d0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d113      	bne.n	8004f00 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	212c      	movs	r1, #44	; 0x2c
 8004ede:	fb01 f303 	mul.w	r3, r1, r3
 8004ee2:	4413      	add	r3, r2
 8004ee4:	3355      	adds	r3, #85	; 0x55
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	f083 0301 	eor.w	r3, r3, #1
 8004eec:	b2d8      	uxtb	r0, r3
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	212c      	movs	r1, #44	; 0x2c
 8004ef4:	fb01 f303 	mul.w	r3, r1, r3
 8004ef8:	4413      	add	r3, r2
 8004efa:	3355      	adds	r3, #85	; 0x55
 8004efc:	4602      	mov	r2, r0
 8004efe:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	f040 80e3 	bne.w	80050d0 <HCD_HC_OUT_IRQHandler+0x69c>
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	212c      	movs	r1, #44	; 0x2c
 8004f10:	fb01 f303 	mul.w	r3, r1, r3
 8004f14:	4413      	add	r3, r2
 8004f16:	334c      	adds	r3, #76	; 0x4c
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f000 80d8 	beq.w	80050d0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	212c      	movs	r1, #44	; 0x2c
 8004f26:	fb01 f303 	mul.w	r3, r1, r3
 8004f2a:	4413      	add	r3, r2
 8004f2c:	334c      	adds	r3, #76	; 0x4c
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6879      	ldr	r1, [r7, #4]
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	202c      	movs	r0, #44	; 0x2c
 8004f36:	fb00 f202 	mul.w	r2, r0, r2
 8004f3a:	440a      	add	r2, r1
 8004f3c:	3240      	adds	r2, #64	; 0x40
 8004f3e:	8812      	ldrh	r2, [r2, #0]
 8004f40:	4413      	add	r3, r2
 8004f42:	3b01      	subs	r3, #1
 8004f44:	6879      	ldr	r1, [r7, #4]
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	202c      	movs	r0, #44	; 0x2c
 8004f4a:	fb00 f202 	mul.w	r2, r0, r2
 8004f4e:	440a      	add	r2, r1
 8004f50:	3240      	adds	r2, #64	; 0x40
 8004f52:	8812      	ldrh	r2, [r2, #0]
 8004f54:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 80b5 	beq.w	80050d0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	212c      	movs	r1, #44	; 0x2c
 8004f6c:	fb01 f303 	mul.w	r3, r1, r3
 8004f70:	4413      	add	r3, r2
 8004f72:	3355      	adds	r3, #85	; 0x55
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	f083 0301 	eor.w	r3, r3, #1
 8004f7a:	b2d8      	uxtb	r0, r3
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	212c      	movs	r1, #44	; 0x2c
 8004f82:	fb01 f303 	mul.w	r3, r1, r3
 8004f86:	4413      	add	r3, r2
 8004f88:	3355      	adds	r3, #85	; 0x55
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	701a      	strb	r2, [r3, #0]
 8004f8e:	e09f      	b.n	80050d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	212c      	movs	r1, #44	; 0x2c
 8004f96:	fb01 f303 	mul.w	r3, r1, r3
 8004f9a:	4413      	add	r3, r2
 8004f9c:	3361      	adds	r3, #97	; 0x61
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	2b03      	cmp	r3, #3
 8004fa2:	d109      	bne.n	8004fb8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	212c      	movs	r1, #44	; 0x2c
 8004faa:	fb01 f303 	mul.w	r3, r1, r3
 8004fae:	4413      	add	r3, r2
 8004fb0:	3360      	adds	r3, #96	; 0x60
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	701a      	strb	r2, [r3, #0]
 8004fb6:	e08b      	b.n	80050d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	212c      	movs	r1, #44	; 0x2c
 8004fbe:	fb01 f303 	mul.w	r3, r1, r3
 8004fc2:	4413      	add	r3, r2
 8004fc4:	3361      	adds	r3, #97	; 0x61
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	2b04      	cmp	r3, #4
 8004fca:	d109      	bne.n	8004fe0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	212c      	movs	r1, #44	; 0x2c
 8004fd2:	fb01 f303 	mul.w	r3, r1, r3
 8004fd6:	4413      	add	r3, r2
 8004fd8:	3360      	adds	r3, #96	; 0x60
 8004fda:	2202      	movs	r2, #2
 8004fdc:	701a      	strb	r2, [r3, #0]
 8004fde:	e077      	b.n	80050d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	212c      	movs	r1, #44	; 0x2c
 8004fe6:	fb01 f303 	mul.w	r3, r1, r3
 8004fea:	4413      	add	r3, r2
 8004fec:	3361      	adds	r3, #97	; 0x61
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2b05      	cmp	r3, #5
 8004ff2:	d109      	bne.n	8005008 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	212c      	movs	r1, #44	; 0x2c
 8004ffa:	fb01 f303 	mul.w	r3, r1, r3
 8004ffe:	4413      	add	r3, r2
 8005000:	3360      	adds	r3, #96	; 0x60
 8005002:	2205      	movs	r2, #5
 8005004:	701a      	strb	r2, [r3, #0]
 8005006:	e063      	b.n	80050d0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	212c      	movs	r1, #44	; 0x2c
 800500e:	fb01 f303 	mul.w	r3, r1, r3
 8005012:	4413      	add	r3, r2
 8005014:	3361      	adds	r3, #97	; 0x61
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	2b06      	cmp	r3, #6
 800501a:	d009      	beq.n	8005030 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	212c      	movs	r1, #44	; 0x2c
 8005022:	fb01 f303 	mul.w	r3, r1, r3
 8005026:	4413      	add	r3, r2
 8005028:	3361      	adds	r3, #97	; 0x61
 800502a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800502c:	2b08      	cmp	r3, #8
 800502e:	d14f      	bne.n	80050d0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	212c      	movs	r1, #44	; 0x2c
 8005036:	fb01 f303 	mul.w	r3, r1, r3
 800503a:	4413      	add	r3, r2
 800503c:	335c      	adds	r3, #92	; 0x5c
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	6879      	ldr	r1, [r7, #4]
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	202c      	movs	r0, #44	; 0x2c
 8005048:	fb00 f303 	mul.w	r3, r0, r3
 800504c:	440b      	add	r3, r1
 800504e:	335c      	adds	r3, #92	; 0x5c
 8005050:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	212c      	movs	r1, #44	; 0x2c
 8005058:	fb01 f303 	mul.w	r3, r1, r3
 800505c:	4413      	add	r3, r2
 800505e:	335c      	adds	r3, #92	; 0x5c
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2b02      	cmp	r3, #2
 8005064:	d912      	bls.n	800508c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	212c      	movs	r1, #44	; 0x2c
 800506c:	fb01 f303 	mul.w	r3, r1, r3
 8005070:	4413      	add	r3, r2
 8005072:	335c      	adds	r3, #92	; 0x5c
 8005074:	2200      	movs	r2, #0
 8005076:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	212c      	movs	r1, #44	; 0x2c
 800507e:	fb01 f303 	mul.w	r3, r1, r3
 8005082:	4413      	add	r3, r2
 8005084:	3360      	adds	r3, #96	; 0x60
 8005086:	2204      	movs	r2, #4
 8005088:	701a      	strb	r2, [r3, #0]
 800508a:	e021      	b.n	80050d0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	212c      	movs	r1, #44	; 0x2c
 8005092:	fb01 f303 	mul.w	r3, r1, r3
 8005096:	4413      	add	r3, r2
 8005098:	3360      	adds	r3, #96	; 0x60
 800509a:	2202      	movs	r2, #2
 800509c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050b4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050bc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ca:	461a      	mov	r2, r3
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050dc:	461a      	mov	r2, r3
 80050de:	2302      	movs	r3, #2
 80050e0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	b2d9      	uxtb	r1, r3
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	202c      	movs	r0, #44	; 0x2c
 80050ec:	fb00 f303 	mul.w	r3, r0, r3
 80050f0:	4413      	add	r3, r2
 80050f2:	3360      	adds	r3, #96	; 0x60
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	461a      	mov	r2, r3
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f00e facb 	bl	8013694 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80050fe:	bf00      	nop
 8005100:	3720      	adds	r7, #32
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b08a      	sub	sp, #40	; 0x28
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	f003 030f 	and.w	r3, r3, #15
 8005126:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	0c5b      	lsrs	r3, r3, #17
 800512c:	f003 030f 	and.w	r3, r3, #15
 8005130:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	091b      	lsrs	r3, r3, #4
 8005136:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800513a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	2b02      	cmp	r3, #2
 8005140:	d004      	beq.n	800514c <HCD_RXQLVL_IRQHandler+0x46>
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	2b05      	cmp	r3, #5
 8005146:	f000 80a9 	beq.w	800529c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800514a:	e0aa      	b.n	80052a2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	2b00      	cmp	r3, #0
 8005150:	f000 80a6 	beq.w	80052a0 <HCD_RXQLVL_IRQHandler+0x19a>
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	212c      	movs	r1, #44	; 0x2c
 800515a:	fb01 f303 	mul.w	r3, r1, r3
 800515e:	4413      	add	r3, r2
 8005160:	3344      	adds	r3, #68	; 0x44
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 809b 	beq.w	80052a0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	212c      	movs	r1, #44	; 0x2c
 8005170:	fb01 f303 	mul.w	r3, r1, r3
 8005174:	4413      	add	r3, r2
 8005176:	3350      	adds	r3, #80	; 0x50
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	441a      	add	r2, r3
 800517e:	6879      	ldr	r1, [r7, #4]
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	202c      	movs	r0, #44	; 0x2c
 8005184:	fb00 f303 	mul.w	r3, r0, r3
 8005188:	440b      	add	r3, r1
 800518a:	334c      	adds	r3, #76	; 0x4c
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d87a      	bhi.n	8005288 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6818      	ldr	r0, [r3, #0]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	212c      	movs	r1, #44	; 0x2c
 800519c:	fb01 f303 	mul.w	r3, r1, r3
 80051a0:	4413      	add	r3, r2
 80051a2:	3344      	adds	r3, #68	; 0x44
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	b292      	uxth	r2, r2
 80051aa:	4619      	mov	r1, r3
 80051ac:	f003 fb14 	bl	80087d8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	212c      	movs	r1, #44	; 0x2c
 80051b6:	fb01 f303 	mul.w	r3, r1, r3
 80051ba:	4413      	add	r3, r2
 80051bc:	3344      	adds	r3, #68	; 0x44
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	441a      	add	r2, r3
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	202c      	movs	r0, #44	; 0x2c
 80051ca:	fb00 f303 	mul.w	r3, r0, r3
 80051ce:	440b      	add	r3, r1
 80051d0:	3344      	adds	r3, #68	; 0x44
 80051d2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	212c      	movs	r1, #44	; 0x2c
 80051da:	fb01 f303 	mul.w	r3, r1, r3
 80051de:	4413      	add	r3, r2
 80051e0:	3350      	adds	r3, #80	; 0x50
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	441a      	add	r2, r3
 80051e8:	6879      	ldr	r1, [r7, #4]
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	202c      	movs	r0, #44	; 0x2c
 80051ee:	fb00 f303 	mul.w	r3, r0, r3
 80051f2:	440b      	add	r3, r1
 80051f4:	3350      	adds	r3, #80	; 0x50
 80051f6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	6a3b      	ldr	r3, [r7, #32]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	0cdb      	lsrs	r3, r3, #19
 8005208:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800520c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	212c      	movs	r1, #44	; 0x2c
 8005214:	fb01 f303 	mul.w	r3, r1, r3
 8005218:	4413      	add	r3, r2
 800521a:	3340      	adds	r3, #64	; 0x40
 800521c:	881b      	ldrh	r3, [r3, #0]
 800521e:	461a      	mov	r2, r3
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	4293      	cmp	r3, r2
 8005224:	d13c      	bne.n	80052a0 <HCD_RXQLVL_IRQHandler+0x19a>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d039      	beq.n	80052a0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	6a3b      	ldr	r3, [r7, #32]
 8005232:	4413      	add	r3, r2
 8005234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005242:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800524a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	4413      	add	r3, r2
 8005254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005258:	461a      	mov	r2, r3
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	212c      	movs	r1, #44	; 0x2c
 8005264:	fb01 f303 	mul.w	r3, r1, r3
 8005268:	4413      	add	r3, r2
 800526a:	3354      	adds	r3, #84	; 0x54
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	f083 0301 	eor.w	r3, r3, #1
 8005272:	b2d8      	uxtb	r0, r3
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	212c      	movs	r1, #44	; 0x2c
 800527a:	fb01 f303 	mul.w	r3, r1, r3
 800527e:	4413      	add	r3, r2
 8005280:	3354      	adds	r3, #84	; 0x54
 8005282:	4602      	mov	r2, r0
 8005284:	701a      	strb	r2, [r3, #0]
      break;
 8005286:	e00b      	b.n	80052a0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	212c      	movs	r1, #44	; 0x2c
 800528e:	fb01 f303 	mul.w	r3, r1, r3
 8005292:	4413      	add	r3, r2
 8005294:	3360      	adds	r3, #96	; 0x60
 8005296:	2204      	movs	r2, #4
 8005298:	701a      	strb	r2, [r3, #0]
      break;
 800529a:	e001      	b.n	80052a0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800529c:	bf00      	nop
 800529e:	e000      	b.n	80052a2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80052a0:	bf00      	nop
  }
}
 80052a2:	bf00      	nop
 80052a4:	3728      	adds	r7, #40	; 0x28
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b086      	sub	sp, #24
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80052d6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d10b      	bne.n	80052fa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d102      	bne.n	80052f2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f00e f9b5 	bl	801365c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	f043 0302 	orr.w	r3, r3, #2
 80052f8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f003 0308 	and.w	r3, r3, #8
 8005300:	2b08      	cmp	r3, #8
 8005302:	d132      	bne.n	800536a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	f043 0308 	orr.w	r3, r3, #8
 800530a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f003 0304 	and.w	r3, r3, #4
 8005312:	2b04      	cmp	r3, #4
 8005314:	d126      	bne.n	8005364 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	2b02      	cmp	r3, #2
 800531c:	d113      	bne.n	8005346 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005324:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005328:	d106      	bne.n	8005338 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2102      	movs	r1, #2
 8005330:	4618      	mov	r0, r3
 8005332:	f003 fbbf 	bl	8008ab4 <USB_InitFSLSPClkSel>
 8005336:	e011      	b.n	800535c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2101      	movs	r1, #1
 800533e:	4618      	mov	r0, r3
 8005340:	f003 fbb8 	bl	8008ab4 <USB_InitFSLSPClkSel>
 8005344:	e00a      	b.n	800535c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d106      	bne.n	800535c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005354:	461a      	mov	r2, r3
 8005356:	f64e 2360 	movw	r3, #60000	; 0xea60
 800535a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f00e f9ab 	bl	80136b8 <HAL_HCD_PortEnabled_Callback>
 8005362:	e002      	b.n	800536a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f00e f9b5 	bl	80136d4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f003 0320 	and.w	r3, r3, #32
 8005370:	2b20      	cmp	r3, #32
 8005372:	d103      	bne.n	800537c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f043 0320 	orr.w	r3, r3, #32
 800537a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005382:	461a      	mov	r2, r3
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	6013      	str	r3, [r2, #0]
}
 8005388:	bf00      	nop
 800538a:	3718      	adds	r7, #24
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e267      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d075      	beq.n	800549a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053ae:	4b88      	ldr	r3, [pc, #544]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f003 030c 	and.w	r3, r3, #12
 80053b6:	2b04      	cmp	r3, #4
 80053b8:	d00c      	beq.n	80053d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053ba:	4b85      	ldr	r3, [pc, #532]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053c2:	2b08      	cmp	r3, #8
 80053c4:	d112      	bne.n	80053ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053c6:	4b82      	ldr	r3, [pc, #520]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053d2:	d10b      	bne.n	80053ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d4:	4b7e      	ldr	r3, [pc, #504]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d05b      	beq.n	8005498 <HAL_RCC_OscConfig+0x108>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d157      	bne.n	8005498 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e242      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053f4:	d106      	bne.n	8005404 <HAL_RCC_OscConfig+0x74>
 80053f6:	4b76      	ldr	r3, [pc, #472]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a75      	ldr	r2, [pc, #468]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 80053fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005400:	6013      	str	r3, [r2, #0]
 8005402:	e01d      	b.n	8005440 <HAL_RCC_OscConfig+0xb0>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800540c:	d10c      	bne.n	8005428 <HAL_RCC_OscConfig+0x98>
 800540e:	4b70      	ldr	r3, [pc, #448]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a6f      	ldr	r2, [pc, #444]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 8005414:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005418:	6013      	str	r3, [r2, #0]
 800541a:	4b6d      	ldr	r3, [pc, #436]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a6c      	ldr	r2, [pc, #432]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 8005420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005424:	6013      	str	r3, [r2, #0]
 8005426:	e00b      	b.n	8005440 <HAL_RCC_OscConfig+0xb0>
 8005428:	4b69      	ldr	r3, [pc, #420]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a68      	ldr	r2, [pc, #416]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 800542e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005432:	6013      	str	r3, [r2, #0]
 8005434:	4b66      	ldr	r3, [pc, #408]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a65      	ldr	r2, [pc, #404]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 800543a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800543e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d013      	beq.n	8005470 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005448:	f7fd fa7c 	bl	8002944 <HAL_GetTick>
 800544c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800544e:	e008      	b.n	8005462 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005450:	f7fd fa78 	bl	8002944 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b64      	cmp	r3, #100	; 0x64
 800545c:	d901      	bls.n	8005462 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e207      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005462:	4b5b      	ldr	r3, [pc, #364]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d0f0      	beq.n	8005450 <HAL_RCC_OscConfig+0xc0>
 800546e:	e014      	b.n	800549a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005470:	f7fd fa68 	bl	8002944 <HAL_GetTick>
 8005474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005476:	e008      	b.n	800548a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005478:	f7fd fa64 	bl	8002944 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b64      	cmp	r3, #100	; 0x64
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e1f3      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800548a:	4b51      	ldr	r3, [pc, #324]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1f0      	bne.n	8005478 <HAL_RCC_OscConfig+0xe8>
 8005496:	e000      	b.n	800549a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d063      	beq.n	800556e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054a6:	4b4a      	ldr	r3, [pc, #296]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f003 030c 	and.w	r3, r3, #12
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00b      	beq.n	80054ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054b2:	4b47      	ldr	r3, [pc, #284]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054ba:	2b08      	cmp	r3, #8
 80054bc:	d11c      	bne.n	80054f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054be:	4b44      	ldr	r3, [pc, #272]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d116      	bne.n	80054f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ca:	4b41      	ldr	r3, [pc, #260]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d005      	beq.n	80054e2 <HAL_RCC_OscConfig+0x152>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d001      	beq.n	80054e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e1c7      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054e2:	4b3b      	ldr	r3, [pc, #236]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	4937      	ldr	r1, [pc, #220]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054f6:	e03a      	b.n	800556e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d020      	beq.n	8005542 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005500:	4b34      	ldr	r3, [pc, #208]	; (80055d4 <HAL_RCC_OscConfig+0x244>)
 8005502:	2201      	movs	r2, #1
 8005504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005506:	f7fd fa1d 	bl	8002944 <HAL_GetTick>
 800550a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800550c:	e008      	b.n	8005520 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800550e:	f7fd fa19 	bl	8002944 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	2b02      	cmp	r3, #2
 800551a:	d901      	bls.n	8005520 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e1a8      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005520:	4b2b      	ldr	r3, [pc, #172]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0f0      	beq.n	800550e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800552c:	4b28      	ldr	r3, [pc, #160]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	00db      	lsls	r3, r3, #3
 800553a:	4925      	ldr	r1, [pc, #148]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 800553c:	4313      	orrs	r3, r2
 800553e:	600b      	str	r3, [r1, #0]
 8005540:	e015      	b.n	800556e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005542:	4b24      	ldr	r3, [pc, #144]	; (80055d4 <HAL_RCC_OscConfig+0x244>)
 8005544:	2200      	movs	r2, #0
 8005546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005548:	f7fd f9fc 	bl	8002944 <HAL_GetTick>
 800554c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800554e:	e008      	b.n	8005562 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005550:	f7fd f9f8 	bl	8002944 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b02      	cmp	r3, #2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e187      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005562:	4b1b      	ldr	r3, [pc, #108]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1f0      	bne.n	8005550 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0308 	and.w	r3, r3, #8
 8005576:	2b00      	cmp	r3, #0
 8005578:	d036      	beq.n	80055e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d016      	beq.n	80055b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005582:	4b15      	ldr	r3, [pc, #84]	; (80055d8 <HAL_RCC_OscConfig+0x248>)
 8005584:	2201      	movs	r2, #1
 8005586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005588:	f7fd f9dc 	bl	8002944 <HAL_GetTick>
 800558c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800558e:	e008      	b.n	80055a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005590:	f7fd f9d8 	bl	8002944 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b02      	cmp	r3, #2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e167      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055a2:	4b0b      	ldr	r3, [pc, #44]	; (80055d0 <HAL_RCC_OscConfig+0x240>)
 80055a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d0f0      	beq.n	8005590 <HAL_RCC_OscConfig+0x200>
 80055ae:	e01b      	b.n	80055e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055b0:	4b09      	ldr	r3, [pc, #36]	; (80055d8 <HAL_RCC_OscConfig+0x248>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055b6:	f7fd f9c5 	bl	8002944 <HAL_GetTick>
 80055ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055bc:	e00e      	b.n	80055dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055be:	f7fd f9c1 	bl	8002944 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d907      	bls.n	80055dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e150      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
 80055d0:	40023800 	.word	0x40023800
 80055d4:	42470000 	.word	0x42470000
 80055d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055dc:	4b88      	ldr	r3, [pc, #544]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 80055de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1ea      	bne.n	80055be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0304 	and.w	r3, r3, #4
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 8097 	beq.w	8005724 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055f6:	2300      	movs	r3, #0
 80055f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055fa:	4b81      	ldr	r3, [pc, #516]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10f      	bne.n	8005626 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005606:	2300      	movs	r3, #0
 8005608:	60bb      	str	r3, [r7, #8]
 800560a:	4b7d      	ldr	r3, [pc, #500]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 800560c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560e:	4a7c      	ldr	r2, [pc, #496]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 8005610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005614:	6413      	str	r3, [r2, #64]	; 0x40
 8005616:	4b7a      	ldr	r3, [pc, #488]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 8005618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800561e:	60bb      	str	r3, [r7, #8]
 8005620:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005622:	2301      	movs	r3, #1
 8005624:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005626:	4b77      	ldr	r3, [pc, #476]	; (8005804 <HAL_RCC_OscConfig+0x474>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800562e:	2b00      	cmp	r3, #0
 8005630:	d118      	bne.n	8005664 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005632:	4b74      	ldr	r3, [pc, #464]	; (8005804 <HAL_RCC_OscConfig+0x474>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a73      	ldr	r2, [pc, #460]	; (8005804 <HAL_RCC_OscConfig+0x474>)
 8005638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800563c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800563e:	f7fd f981 	bl	8002944 <HAL_GetTick>
 8005642:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005644:	e008      	b.n	8005658 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005646:	f7fd f97d 	bl	8002944 <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	2b02      	cmp	r3, #2
 8005652:	d901      	bls.n	8005658 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e10c      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005658:	4b6a      	ldr	r3, [pc, #424]	; (8005804 <HAL_RCC_OscConfig+0x474>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005660:	2b00      	cmp	r3, #0
 8005662:	d0f0      	beq.n	8005646 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d106      	bne.n	800567a <HAL_RCC_OscConfig+0x2ea>
 800566c:	4b64      	ldr	r3, [pc, #400]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 800566e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005670:	4a63      	ldr	r2, [pc, #396]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 8005672:	f043 0301 	orr.w	r3, r3, #1
 8005676:	6713      	str	r3, [r2, #112]	; 0x70
 8005678:	e01c      	b.n	80056b4 <HAL_RCC_OscConfig+0x324>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	2b05      	cmp	r3, #5
 8005680:	d10c      	bne.n	800569c <HAL_RCC_OscConfig+0x30c>
 8005682:	4b5f      	ldr	r3, [pc, #380]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 8005684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005686:	4a5e      	ldr	r2, [pc, #376]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 8005688:	f043 0304 	orr.w	r3, r3, #4
 800568c:	6713      	str	r3, [r2, #112]	; 0x70
 800568e:	4b5c      	ldr	r3, [pc, #368]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 8005690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005692:	4a5b      	ldr	r2, [pc, #364]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 8005694:	f043 0301 	orr.w	r3, r3, #1
 8005698:	6713      	str	r3, [r2, #112]	; 0x70
 800569a:	e00b      	b.n	80056b4 <HAL_RCC_OscConfig+0x324>
 800569c:	4b58      	ldr	r3, [pc, #352]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 800569e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a0:	4a57      	ldr	r2, [pc, #348]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 80056a2:	f023 0301 	bic.w	r3, r3, #1
 80056a6:	6713      	str	r3, [r2, #112]	; 0x70
 80056a8:	4b55      	ldr	r3, [pc, #340]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 80056aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ac:	4a54      	ldr	r2, [pc, #336]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 80056ae:	f023 0304 	bic.w	r3, r3, #4
 80056b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d015      	beq.n	80056e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056bc:	f7fd f942 	bl	8002944 <HAL_GetTick>
 80056c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056c2:	e00a      	b.n	80056da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056c4:	f7fd f93e 	bl	8002944 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e0cb      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056da:	4b49      	ldr	r3, [pc, #292]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 80056dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0ee      	beq.n	80056c4 <HAL_RCC_OscConfig+0x334>
 80056e6:	e014      	b.n	8005712 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056e8:	f7fd f92c 	bl	8002944 <HAL_GetTick>
 80056ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056ee:	e00a      	b.n	8005706 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056f0:	f7fd f928 	bl	8002944 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80056fe:	4293      	cmp	r3, r2
 8005700:	d901      	bls.n	8005706 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e0b5      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005706:	4b3e      	ldr	r3, [pc, #248]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 8005708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1ee      	bne.n	80056f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005712:	7dfb      	ldrb	r3, [r7, #23]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d105      	bne.n	8005724 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005718:	4b39      	ldr	r3, [pc, #228]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 800571a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571c:	4a38      	ldr	r2, [pc, #224]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 800571e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005722:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 80a1 	beq.w	8005870 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800572e:	4b34      	ldr	r3, [pc, #208]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f003 030c 	and.w	r3, r3, #12
 8005736:	2b08      	cmp	r3, #8
 8005738:	d05c      	beq.n	80057f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	2b02      	cmp	r3, #2
 8005740:	d141      	bne.n	80057c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005742:	4b31      	ldr	r3, [pc, #196]	; (8005808 <HAL_RCC_OscConfig+0x478>)
 8005744:	2200      	movs	r2, #0
 8005746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005748:	f7fd f8fc 	bl	8002944 <HAL_GetTick>
 800574c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800574e:	e008      	b.n	8005762 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005750:	f7fd f8f8 	bl	8002944 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	2b02      	cmp	r3, #2
 800575c:	d901      	bls.n	8005762 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e087      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005762:	4b27      	ldr	r3, [pc, #156]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1f0      	bne.n	8005750 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	69da      	ldr	r2, [r3, #28]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	431a      	orrs	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	019b      	lsls	r3, r3, #6
 800577e:	431a      	orrs	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005784:	085b      	lsrs	r3, r3, #1
 8005786:	3b01      	subs	r3, #1
 8005788:	041b      	lsls	r3, r3, #16
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005790:	061b      	lsls	r3, r3, #24
 8005792:	491b      	ldr	r1, [pc, #108]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 8005794:	4313      	orrs	r3, r2
 8005796:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005798:	4b1b      	ldr	r3, [pc, #108]	; (8005808 <HAL_RCC_OscConfig+0x478>)
 800579a:	2201      	movs	r2, #1
 800579c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800579e:	f7fd f8d1 	bl	8002944 <HAL_GetTick>
 80057a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057a4:	e008      	b.n	80057b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057a6:	f7fd f8cd 	bl	8002944 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e05c      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057b8:	4b11      	ldr	r3, [pc, #68]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0f0      	beq.n	80057a6 <HAL_RCC_OscConfig+0x416>
 80057c4:	e054      	b.n	8005870 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057c6:	4b10      	ldr	r3, [pc, #64]	; (8005808 <HAL_RCC_OscConfig+0x478>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057cc:	f7fd f8ba 	bl	8002944 <HAL_GetTick>
 80057d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057d2:	e008      	b.n	80057e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057d4:	f7fd f8b6 	bl	8002944 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d901      	bls.n	80057e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e045      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057e6:	4b06      	ldr	r3, [pc, #24]	; (8005800 <HAL_RCC_OscConfig+0x470>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1f0      	bne.n	80057d4 <HAL_RCC_OscConfig+0x444>
 80057f2:	e03d      	b.n	8005870 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d107      	bne.n	800580c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e038      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
 8005800:	40023800 	.word	0x40023800
 8005804:	40007000 	.word	0x40007000
 8005808:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800580c:	4b1b      	ldr	r3, [pc, #108]	; (800587c <HAL_RCC_OscConfig+0x4ec>)
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d028      	beq.n	800586c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005824:	429a      	cmp	r2, r3
 8005826:	d121      	bne.n	800586c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005832:	429a      	cmp	r2, r3
 8005834:	d11a      	bne.n	800586c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800583c:	4013      	ands	r3, r2
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005842:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005844:	4293      	cmp	r3, r2
 8005846:	d111      	bne.n	800586c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005852:	085b      	lsrs	r3, r3, #1
 8005854:	3b01      	subs	r3, #1
 8005856:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005858:	429a      	cmp	r2, r3
 800585a:	d107      	bne.n	800586c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005866:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005868:	429a      	cmp	r2, r3
 800586a:	d001      	beq.n	8005870 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e000      	b.n	8005872 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3718      	adds	r7, #24
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	40023800 	.word	0x40023800

08005880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e0cc      	b.n	8005a2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005894:	4b68      	ldr	r3, [pc, #416]	; (8005a38 <HAL_RCC_ClockConfig+0x1b8>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0307 	and.w	r3, r3, #7
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d90c      	bls.n	80058bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058a2:	4b65      	ldr	r3, [pc, #404]	; (8005a38 <HAL_RCC_ClockConfig+0x1b8>)
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	b2d2      	uxtb	r2, r2
 80058a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058aa:	4b63      	ldr	r3, [pc, #396]	; (8005a38 <HAL_RCC_ClockConfig+0x1b8>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0307 	and.w	r3, r3, #7
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d001      	beq.n	80058bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e0b8      	b.n	8005a2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d020      	beq.n	800590a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d005      	beq.n	80058e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058d4:	4b59      	ldr	r3, [pc, #356]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	4a58      	ldr	r2, [pc, #352]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 80058da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0308 	and.w	r3, r3, #8
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d005      	beq.n	80058f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058ec:	4b53      	ldr	r3, [pc, #332]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	4a52      	ldr	r2, [pc, #328]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 80058f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058f8:	4b50      	ldr	r3, [pc, #320]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	494d      	ldr	r1, [pc, #308]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 8005906:	4313      	orrs	r3, r2
 8005908:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d044      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d107      	bne.n	800592e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800591e:	4b47      	ldr	r3, [pc, #284]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d119      	bne.n	800595e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e07f      	b.n	8005a2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	2b02      	cmp	r3, #2
 8005934:	d003      	beq.n	800593e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800593a:	2b03      	cmp	r3, #3
 800593c:	d107      	bne.n	800594e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800593e:	4b3f      	ldr	r3, [pc, #252]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d109      	bne.n	800595e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e06f      	b.n	8005a2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800594e:	4b3b      	ldr	r3, [pc, #236]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e067      	b.n	8005a2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800595e:	4b37      	ldr	r3, [pc, #220]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f023 0203 	bic.w	r2, r3, #3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	4934      	ldr	r1, [pc, #208]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 800596c:	4313      	orrs	r3, r2
 800596e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005970:	f7fc ffe8 	bl	8002944 <HAL_GetTick>
 8005974:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005976:	e00a      	b.n	800598e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005978:	f7fc ffe4 	bl	8002944 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	f241 3288 	movw	r2, #5000	; 0x1388
 8005986:	4293      	cmp	r3, r2
 8005988:	d901      	bls.n	800598e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e04f      	b.n	8005a2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800598e:	4b2b      	ldr	r3, [pc, #172]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 020c 	and.w	r2, r3, #12
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	429a      	cmp	r2, r3
 800599e:	d1eb      	bne.n	8005978 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059a0:	4b25      	ldr	r3, [pc, #148]	; (8005a38 <HAL_RCC_ClockConfig+0x1b8>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0307 	and.w	r3, r3, #7
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d20c      	bcs.n	80059c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ae:	4b22      	ldr	r3, [pc, #136]	; (8005a38 <HAL_RCC_ClockConfig+0x1b8>)
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059b6:	4b20      	ldr	r3, [pc, #128]	; (8005a38 <HAL_RCC_ClockConfig+0x1b8>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0307 	and.w	r3, r3, #7
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d001      	beq.n	80059c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e032      	b.n	8005a2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d008      	beq.n	80059e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059d4:	4b19      	ldr	r3, [pc, #100]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	4916      	ldr	r1, [pc, #88]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0308 	and.w	r3, r3, #8
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d009      	beq.n	8005a06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059f2:	4b12      	ldr	r3, [pc, #72]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	490e      	ldr	r1, [pc, #56]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a06:	f000 f821 	bl	8005a4c <HAL_RCC_GetSysClockFreq>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	4b0b      	ldr	r3, [pc, #44]	; (8005a3c <HAL_RCC_ClockConfig+0x1bc>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	091b      	lsrs	r3, r3, #4
 8005a12:	f003 030f 	and.w	r3, r3, #15
 8005a16:	490a      	ldr	r1, [pc, #40]	; (8005a40 <HAL_RCC_ClockConfig+0x1c0>)
 8005a18:	5ccb      	ldrb	r3, [r1, r3]
 8005a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a1e:	4a09      	ldr	r2, [pc, #36]	; (8005a44 <HAL_RCC_ClockConfig+0x1c4>)
 8005a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a22:	4b09      	ldr	r3, [pc, #36]	; (8005a48 <HAL_RCC_ClockConfig+0x1c8>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fc fd04 	bl	8002434 <HAL_InitTick>

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	40023c00 	.word	0x40023c00
 8005a3c:	40023800 	.word	0x40023800
 8005a40:	08016840 	.word	0x08016840
 8005a44:	20000234 	.word	0x20000234
 8005a48:	20000238 	.word	0x20000238

08005a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a50:	b090      	sub	sp, #64	; 0x40
 8005a52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	637b      	str	r3, [r7, #52]	; 0x34
 8005a58:	2300      	movs	r3, #0
 8005a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a64:	4b59      	ldr	r3, [pc, #356]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x180>)
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f003 030c 	and.w	r3, r3, #12
 8005a6c:	2b08      	cmp	r3, #8
 8005a6e:	d00d      	beq.n	8005a8c <HAL_RCC_GetSysClockFreq+0x40>
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	f200 80a1 	bhi.w	8005bb8 <HAL_RCC_GetSysClockFreq+0x16c>
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d002      	beq.n	8005a80 <HAL_RCC_GetSysClockFreq+0x34>
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	d003      	beq.n	8005a86 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a7e:	e09b      	b.n	8005bb8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a80:	4b53      	ldr	r3, [pc, #332]	; (8005bd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005a82:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005a84:	e09b      	b.n	8005bbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a86:	4b53      	ldr	r3, [pc, #332]	; (8005bd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005a8a:	e098      	b.n	8005bbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a8c:	4b4f      	ldr	r3, [pc, #316]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x180>)
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a94:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a96:	4b4d      	ldr	r3, [pc, #308]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x180>)
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d028      	beq.n	8005af4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aa2:	4b4a      	ldr	r3, [pc, #296]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x180>)
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	099b      	lsrs	r3, r3, #6
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	623b      	str	r3, [r7, #32]
 8005aac:	627a      	str	r2, [r7, #36]	; 0x24
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	4b47      	ldr	r3, [pc, #284]	; (8005bd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005ab8:	fb03 f201 	mul.w	r2, r3, r1
 8005abc:	2300      	movs	r3, #0
 8005abe:	fb00 f303 	mul.w	r3, r0, r3
 8005ac2:	4413      	add	r3, r2
 8005ac4:	4a43      	ldr	r2, [pc, #268]	; (8005bd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005ac6:	fba0 1202 	umull	r1, r2, r0, r2
 8005aca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005acc:	460a      	mov	r2, r1
 8005ace:	62ba      	str	r2, [r7, #40]	; 0x28
 8005ad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ad2:	4413      	add	r3, r2
 8005ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad8:	2200      	movs	r2, #0
 8005ada:	61bb      	str	r3, [r7, #24]
 8005adc:	61fa      	str	r2, [r7, #28]
 8005ade:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ae2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005ae6:	f7fa fbdb 	bl	80002a0 <__aeabi_uldivmod>
 8005aea:	4602      	mov	r2, r0
 8005aec:	460b      	mov	r3, r1
 8005aee:	4613      	mov	r3, r2
 8005af0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005af2:	e053      	b.n	8005b9c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005af4:	4b35      	ldr	r3, [pc, #212]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x180>)
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	099b      	lsrs	r3, r3, #6
 8005afa:	2200      	movs	r2, #0
 8005afc:	613b      	str	r3, [r7, #16]
 8005afe:	617a      	str	r2, [r7, #20]
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005b06:	f04f 0b00 	mov.w	fp, #0
 8005b0a:	4652      	mov	r2, sl
 8005b0c:	465b      	mov	r3, fp
 8005b0e:	f04f 0000 	mov.w	r0, #0
 8005b12:	f04f 0100 	mov.w	r1, #0
 8005b16:	0159      	lsls	r1, r3, #5
 8005b18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b1c:	0150      	lsls	r0, r2, #5
 8005b1e:	4602      	mov	r2, r0
 8005b20:	460b      	mov	r3, r1
 8005b22:	ebb2 080a 	subs.w	r8, r2, sl
 8005b26:	eb63 090b 	sbc.w	r9, r3, fp
 8005b2a:	f04f 0200 	mov.w	r2, #0
 8005b2e:	f04f 0300 	mov.w	r3, #0
 8005b32:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005b36:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005b3a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005b3e:	ebb2 0408 	subs.w	r4, r2, r8
 8005b42:	eb63 0509 	sbc.w	r5, r3, r9
 8005b46:	f04f 0200 	mov.w	r2, #0
 8005b4a:	f04f 0300 	mov.w	r3, #0
 8005b4e:	00eb      	lsls	r3, r5, #3
 8005b50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b54:	00e2      	lsls	r2, r4, #3
 8005b56:	4614      	mov	r4, r2
 8005b58:	461d      	mov	r5, r3
 8005b5a:	eb14 030a 	adds.w	r3, r4, sl
 8005b5e:	603b      	str	r3, [r7, #0]
 8005b60:	eb45 030b 	adc.w	r3, r5, fp
 8005b64:	607b      	str	r3, [r7, #4]
 8005b66:	f04f 0200 	mov.w	r2, #0
 8005b6a:	f04f 0300 	mov.w	r3, #0
 8005b6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b72:	4629      	mov	r1, r5
 8005b74:	028b      	lsls	r3, r1, #10
 8005b76:	4621      	mov	r1, r4
 8005b78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b7c:	4621      	mov	r1, r4
 8005b7e:	028a      	lsls	r2, r1, #10
 8005b80:	4610      	mov	r0, r2
 8005b82:	4619      	mov	r1, r3
 8005b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b86:	2200      	movs	r2, #0
 8005b88:	60bb      	str	r3, [r7, #8]
 8005b8a:	60fa      	str	r2, [r7, #12]
 8005b8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b90:	f7fa fb86 	bl	80002a0 <__aeabi_uldivmod>
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	4613      	mov	r3, r2
 8005b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b9c:	4b0b      	ldr	r3, [pc, #44]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x180>)
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	0c1b      	lsrs	r3, r3, #16
 8005ba2:	f003 0303 	and.w	r3, r3, #3
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005bac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005bb6:	e002      	b.n	8005bbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bb8:	4b05      	ldr	r3, [pc, #20]	; (8005bd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005bba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005bbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3740      	adds	r7, #64	; 0x40
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bca:	bf00      	nop
 8005bcc:	40023800 	.word	0x40023800
 8005bd0:	00f42400 	.word	0x00f42400
 8005bd4:	017d7840 	.word	0x017d7840

08005bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bdc:	4b03      	ldr	r3, [pc, #12]	; (8005bec <HAL_RCC_GetHCLKFreq+0x14>)
 8005bde:	681b      	ldr	r3, [r3, #0]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	20000234 	.word	0x20000234

08005bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005bf4:	f7ff fff0 	bl	8005bd8 <HAL_RCC_GetHCLKFreq>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	0a9b      	lsrs	r3, r3, #10
 8005c00:	f003 0307 	and.w	r3, r3, #7
 8005c04:	4903      	ldr	r1, [pc, #12]	; (8005c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c06:	5ccb      	ldrb	r3, [r1, r3]
 8005c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	40023800 	.word	0x40023800
 8005c14:	08016850 	.word	0x08016850

08005c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c1c:	f7ff ffdc 	bl	8005bd8 <HAL_RCC_GetHCLKFreq>
 8005c20:	4602      	mov	r2, r0
 8005c22:	4b05      	ldr	r3, [pc, #20]	; (8005c38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	0b5b      	lsrs	r3, r3, #13
 8005c28:	f003 0307 	and.w	r3, r3, #7
 8005c2c:	4903      	ldr	r1, [pc, #12]	; (8005c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c2e:	5ccb      	ldrb	r3, [r1, r3]
 8005c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	40023800 	.word	0x40023800
 8005c3c:	08016850 	.word	0x08016850

08005c40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	220f      	movs	r2, #15
 8005c4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005c50:	4b12      	ldr	r3, [pc, #72]	; (8005c9c <HAL_RCC_GetClockConfig+0x5c>)
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f003 0203 	and.w	r2, r3, #3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005c5c:	4b0f      	ldr	r3, [pc, #60]	; (8005c9c <HAL_RCC_GetClockConfig+0x5c>)
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005c68:	4b0c      	ldr	r3, [pc, #48]	; (8005c9c <HAL_RCC_GetClockConfig+0x5c>)
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005c74:	4b09      	ldr	r3, [pc, #36]	; (8005c9c <HAL_RCC_GetClockConfig+0x5c>)
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	08db      	lsrs	r3, r3, #3
 8005c7a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005c82:	4b07      	ldr	r3, [pc, #28]	; (8005ca0 <HAL_RCC_GetClockConfig+0x60>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0207 	and.w	r2, r3, #7
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	601a      	str	r2, [r3, #0]
}
 8005c8e:	bf00      	nop
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	40023800 	.word	0x40023800
 8005ca0:	40023c00 	.word	0x40023c00

08005ca4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d105      	bne.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d035      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005ccc:	4b62      	ldr	r3, [pc, #392]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cd2:	f7fc fe37 	bl	8002944 <HAL_GetTick>
 8005cd6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cd8:	e008      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005cda:	f7fc fe33 	bl	8002944 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d901      	bls.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e0b0      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cec:	4b5b      	ldr	r3, [pc, #364]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1f0      	bne.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	019a      	lsls	r2, r3, #6
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	071b      	lsls	r3, r3, #28
 8005d04:	4955      	ldr	r1, [pc, #340]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d0c:	4b52      	ldr	r3, [pc, #328]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005d0e:	2201      	movs	r2, #1
 8005d10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d12:	f7fc fe17 	bl	8002944 <HAL_GetTick>
 8005d16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d18:	e008      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d1a:	f7fc fe13 	bl	8002944 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d901      	bls.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e090      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d2c:	4b4b      	ldr	r3, [pc, #300]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d0f0      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0302 	and.w	r3, r3, #2
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 8083 	beq.w	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d46:	2300      	movs	r3, #0
 8005d48:	60fb      	str	r3, [r7, #12]
 8005d4a:	4b44      	ldr	r3, [pc, #272]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4e:	4a43      	ldr	r2, [pc, #268]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d54:	6413      	str	r3, [r2, #64]	; 0x40
 8005d56:	4b41      	ldr	r3, [pc, #260]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d62:	4b3f      	ldr	r3, [pc, #252]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a3e      	ldr	r2, [pc, #248]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d6c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d6e:	f7fc fde9 	bl	8002944 <HAL_GetTick>
 8005d72:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d74:	e008      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005d76:	f7fc fde5 	bl	8002944 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d901      	bls.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e062      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d88:	4b35      	ldr	r3, [pc, #212]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d0f0      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d94:	4b31      	ldr	r3, [pc, #196]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d9c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d02f      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d028      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005db2:	4b2a      	ldr	r3, [pc, #168]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dba:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005dbc:	4b29      	ldr	r3, [pc, #164]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005dc2:	4b28      	ldr	r3, [pc, #160]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005dc8:	4a24      	ldr	r2, [pc, #144]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005dce:	4b23      	ldr	r3, [pc, #140]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d114      	bne.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005dda:	f7fc fdb3 	bl	8002944 <HAL_GetTick>
 8005dde:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005de0:	e00a      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005de2:	f7fc fdaf 	bl	8002944 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d901      	bls.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e02a      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005df8:	4b18      	ldr	r3, [pc, #96]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfc:	f003 0302 	and.w	r3, r3, #2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0ee      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e10:	d10d      	bne.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005e12:	4b12      	ldr	r3, [pc, #72]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e26:	490d      	ldr	r1, [pc, #52]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	608b      	str	r3, [r1, #8]
 8005e2c:	e005      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005e2e:	4b0b      	ldr	r3, [pc, #44]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	4a0a      	ldr	r2, [pc, #40]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e34:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005e38:	6093      	str	r3, [r2, #8]
 8005e3a:	4b08      	ldr	r3, [pc, #32]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e46:	4905      	ldr	r1, [pc, #20]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3718      	adds	r7, #24
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	42470068 	.word	0x42470068
 8005e5c:	40023800 	.word	0x40023800
 8005e60:	40007000 	.word	0x40007000
 8005e64:	42470e40 	.word	0x42470e40

08005e68 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e066      	b.n	8005f4c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	7f5b      	ldrb	r3, [r3, #29]
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d105      	bne.n	8005e94 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f7fc f9ae 	bl	80021f0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2202      	movs	r2, #2
 8005e98:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	22ca      	movs	r2, #202	; 0xca
 8005ea0:	625a      	str	r2, [r3, #36]	; 0x24
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2253      	movs	r2, #83	; 0x53
 8005ea8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 fa45 	bl	800633a <RTC_EnterInitMode>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005eb4:	7bfb      	ldrb	r3, [r7, #15]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d12c      	bne.n	8005f14 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	6812      	ldr	r2, [r2, #0]
 8005ec4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ec8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ecc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6899      	ldr	r1, [r3, #8]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	431a      	orrs	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	431a      	orrs	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	68d2      	ldr	r2, [r2, #12]
 8005ef4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	6919      	ldr	r1, [r3, #16]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	041a      	lsls	r2, r3, #16
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 fa4c 	bl	80063a8 <RTC_ExitInitMode>
 8005f10:	4603      	mov	r3, r0
 8005f12:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005f14:	7bfb      	ldrb	r3, [r7, #15]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d113      	bne.n	8005f42 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f28:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	699a      	ldr	r2, [r3, #24]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	22ff      	movs	r2, #255	; 0xff
 8005f48:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005f54:	b590      	push	{r4, r7, lr}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	7f1b      	ldrb	r3, [r3, #28]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d101      	bne.n	8005f70 <HAL_RTC_SetTime+0x1c>
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	e087      	b.n	8006080 <HAL_RTC_SetTime+0x12c>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2201      	movs	r2, #1
 8005f74:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2202      	movs	r2, #2
 8005f7a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d126      	bne.n	8005fd0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d102      	bne.n	8005f96 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	2200      	movs	r2, #0
 8005f94:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 fa29 	bl	80063f2 <RTC_ByteToBcd2>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	785b      	ldrb	r3, [r3, #1]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 fa22 	bl	80063f2 <RTC_ByteToBcd2>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005fb2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	789b      	ldrb	r3, [r3, #2]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f000 fa1a 	bl	80063f2 <RTC_ByteToBcd2>
 8005fbe:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005fc0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	78db      	ldrb	r3, [r3, #3]
 8005fc8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	617b      	str	r3, [r7, #20]
 8005fce:	e018      	b.n	8006002 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d102      	bne.n	8005fe4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	785b      	ldrb	r3, [r3, #1]
 8005fee:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005ff0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005ff6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	78db      	ldrb	r3, [r3, #3]
 8005ffc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005ffe:	4313      	orrs	r3, r2
 8006000:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	22ca      	movs	r2, #202	; 0xca
 8006008:	625a      	str	r2, [r3, #36]	; 0x24
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2253      	movs	r2, #83	; 0x53
 8006010:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f000 f991 	bl	800633a <RTC_EnterInitMode>
 8006018:	4603      	mov	r3, r0
 800601a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800601c:	7cfb      	ldrb	r3, [r7, #19]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d120      	bne.n	8006064 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800602c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006030:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	689a      	ldr	r2, [r3, #8]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006040:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6899      	ldr	r1, [r3, #8]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	68da      	ldr	r2, [r3, #12]
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	431a      	orrs	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f000 f9a4 	bl	80063a8 <RTC_ExitInitMode>
 8006060:	4603      	mov	r3, r0
 8006062:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006064:	7cfb      	ldrb	r3, [r7, #19]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d102      	bne.n	8006070 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2201      	movs	r2, #1
 800606e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	22ff      	movs	r2, #255	; 0xff
 8006076:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	771a      	strb	r2, [r3, #28]

  return status;
 800607e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006080:	4618      	mov	r0, r3
 8006082:	371c      	adds	r7, #28
 8006084:	46bd      	mov	sp, r7
 8006086:	bd90      	pop	{r4, r7, pc}

08006088 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80060ba:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80060be:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	0c1b      	lsrs	r3, r3, #16
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	0a1b      	lsrs	r3, r3, #8
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060e8:	b2da      	uxtb	r2, r3
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	0d9b      	lsrs	r3, r3, #22
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d11a      	bne.n	800613a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	4618      	mov	r0, r3
 800610a:	f000 f98f 	bl	800642c <RTC_Bcd2ToByte>
 800610e:	4603      	mov	r3, r0
 8006110:	461a      	mov	r2, r3
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	785b      	ldrb	r3, [r3, #1]
 800611a:	4618      	mov	r0, r3
 800611c:	f000 f986 	bl	800642c <RTC_Bcd2ToByte>
 8006120:	4603      	mov	r3, r0
 8006122:	461a      	mov	r2, r3
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	789b      	ldrb	r3, [r3, #2]
 800612c:	4618      	mov	r0, r3
 800612e:	f000 f97d 	bl	800642c <RTC_Bcd2ToByte>
 8006132:	4603      	mov	r3, r0
 8006134:	461a      	mov	r2, r3
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3718      	adds	r7, #24
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006144:	b590      	push	{r4, r7, lr}
 8006146:	b087      	sub	sp, #28
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006150:	2300      	movs	r3, #0
 8006152:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	7f1b      	ldrb	r3, [r3, #28]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d101      	bne.n	8006160 <HAL_RTC_SetDate+0x1c>
 800615c:	2302      	movs	r3, #2
 800615e:	e071      	b.n	8006244 <HAL_RTC_SetDate+0x100>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2201      	movs	r2, #1
 8006164:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2202      	movs	r2, #2
 800616a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10e      	bne.n	8006190 <HAL_RTC_SetDate+0x4c>
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	785b      	ldrb	r3, [r3, #1]
 8006176:	f003 0310 	and.w	r3, r3, #16
 800617a:	2b00      	cmp	r3, #0
 800617c:	d008      	beq.n	8006190 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	785b      	ldrb	r3, [r3, #1]
 8006182:	f023 0310 	bic.w	r3, r3, #16
 8006186:	b2db      	uxtb	r3, r3
 8006188:	330a      	adds	r3, #10
 800618a:	b2da      	uxtb	r2, r3
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d11c      	bne.n	80061d0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	78db      	ldrb	r3, [r3, #3]
 800619a:	4618      	mov	r0, r3
 800619c:	f000 f929 	bl	80063f2 <RTC_ByteToBcd2>
 80061a0:	4603      	mov	r3, r0
 80061a2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	785b      	ldrb	r3, [r3, #1]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f000 f922 	bl	80063f2 <RTC_ByteToBcd2>
 80061ae:	4603      	mov	r3, r0
 80061b0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80061b2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	789b      	ldrb	r3, [r3, #2]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 f91a 	bl	80063f2 <RTC_ByteToBcd2>
 80061be:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80061c0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80061ca:	4313      	orrs	r3, r2
 80061cc:	617b      	str	r3, [r7, #20]
 80061ce:	e00e      	b.n	80061ee <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	78db      	ldrb	r3, [r3, #3]
 80061d4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	785b      	ldrb	r3, [r3, #1]
 80061da:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80061dc:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80061e2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80061ea:	4313      	orrs	r3, r2
 80061ec:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	22ca      	movs	r2, #202	; 0xca
 80061f4:	625a      	str	r2, [r3, #36]	; 0x24
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2253      	movs	r2, #83	; 0x53
 80061fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f000 f89b 	bl	800633a <RTC_EnterInitMode>
 8006204:	4603      	mov	r3, r0
 8006206:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006208:	7cfb      	ldrb	r3, [r7, #19]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10c      	bne.n	8006228 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006218:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800621c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f000 f8c2 	bl	80063a8 <RTC_ExitInitMode>
 8006224:	4603      	mov	r3, r0
 8006226:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006228:	7cfb      	ldrb	r3, [r7, #19]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d102      	bne.n	8006234 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2201      	movs	r2, #1
 8006232:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	22ff      	movs	r2, #255	; 0xff
 800623a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	771a      	strb	r2, [r3, #28]

  return status;
 8006242:	7cfb      	ldrb	r3, [r7, #19]
}
 8006244:	4618      	mov	r0, r3
 8006246:	371c      	adds	r7, #28
 8006248:	46bd      	mov	sp, r7
 800624a:	bd90      	pop	{r4, r7, pc}

0800624c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b086      	sub	sp, #24
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006258:	2300      	movs	r3, #0
 800625a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006266:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800626a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	0c1b      	lsrs	r3, r3, #16
 8006270:	b2da      	uxtb	r2, r3
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	0a1b      	lsrs	r3, r3, #8
 800627a:	b2db      	uxtb	r3, r3
 800627c:	f003 031f 	and.w	r3, r3, #31
 8006280:	b2da      	uxtb	r2, r3
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	b2db      	uxtb	r3, r3
 800628a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800628e:	b2da      	uxtb	r2, r3
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	0b5b      	lsrs	r3, r3, #13
 8006298:	b2db      	uxtb	r3, r3
 800629a:	f003 0307 	and.w	r3, r3, #7
 800629e:	b2da      	uxtb	r2, r3
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d11a      	bne.n	80062e0 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	78db      	ldrb	r3, [r3, #3]
 80062ae:	4618      	mov	r0, r3
 80062b0:	f000 f8bc 	bl	800642c <RTC_Bcd2ToByte>
 80062b4:	4603      	mov	r3, r0
 80062b6:	461a      	mov	r2, r3
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	785b      	ldrb	r3, [r3, #1]
 80062c0:	4618      	mov	r0, r3
 80062c2:	f000 f8b3 	bl	800642c <RTC_Bcd2ToByte>
 80062c6:	4603      	mov	r3, r0
 80062c8:	461a      	mov	r2, r3
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	789b      	ldrb	r3, [r3, #2]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 f8aa 	bl	800642c <RTC_Bcd2ToByte>
 80062d8:	4603      	mov	r3, r0
 80062da:	461a      	mov	r2, r3
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3718      	adds	r7, #24
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b084      	sub	sp, #16
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68da      	ldr	r2, [r3, #12]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006304:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006306:	f7fc fb1d 	bl	8002944 <HAL_GetTick>
 800630a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800630c:	e009      	b.n	8006322 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800630e:	f7fc fb19 	bl	8002944 <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800631c:	d901      	bls.n	8006322 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e007      	b.n	8006332 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f003 0320 	and.w	r3, r3, #32
 800632c:	2b00      	cmp	r3, #0
 800632e:	d0ee      	beq.n	800630e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b084      	sub	sp, #16
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006342:	2300      	movs	r3, #0
 8006344:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006346:	2300      	movs	r3, #0
 8006348:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006354:	2b00      	cmp	r3, #0
 8006356:	d122      	bne.n	800639e <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68da      	ldr	r2, [r3, #12]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006366:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006368:	f7fc faec 	bl	8002944 <HAL_GetTick>
 800636c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800636e:	e00c      	b.n	800638a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006370:	f7fc fae8 	bl	8002944 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800637e:	d904      	bls.n	800638a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2204      	movs	r2, #4
 8006384:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006394:	2b00      	cmp	r3, #0
 8006396:	d102      	bne.n	800639e <RTC_EnterInitMode+0x64>
 8006398:	7bfb      	ldrb	r3, [r7, #15]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d1e8      	bne.n	8006370 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800639e:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063b0:	2300      	movs	r3, #0
 80063b2:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68da      	ldr	r2, [r3, #12]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063c2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f003 0320 	and.w	r3, r3, #32
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10a      	bne.n	80063e8 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7ff ff89 	bl	80062ea <HAL_RTC_WaitForSynchro>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d004      	beq.n	80063e8 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2204      	movs	r2, #4
 80063e2:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b085      	sub	sp, #20
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	4603      	mov	r3, r0
 80063fa:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80063fc:	2300      	movs	r3, #0
 80063fe:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006400:	e005      	b.n	800640e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006402:	7bfb      	ldrb	r3, [r7, #15]
 8006404:	3301      	adds	r3, #1
 8006406:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006408:	79fb      	ldrb	r3, [r7, #7]
 800640a:	3b0a      	subs	r3, #10
 800640c:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800640e:	79fb      	ldrb	r3, [r7, #7]
 8006410:	2b09      	cmp	r3, #9
 8006412:	d8f6      	bhi.n	8006402 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006414:	7bfb      	ldrb	r3, [r7, #15]
 8006416:	011b      	lsls	r3, r3, #4
 8006418:	b2da      	uxtb	r2, r3
 800641a:	79fb      	ldrb	r3, [r7, #7]
 800641c:	4313      	orrs	r3, r2
 800641e:	b2db      	uxtb	r3, r3
}
 8006420:	4618      	mov	r0, r3
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	4603      	mov	r3, r0
 8006434:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006436:	2300      	movs	r3, #0
 8006438:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800643a:	79fb      	ldrb	r3, [r7, #7]
 800643c:	091b      	lsrs	r3, r3, #4
 800643e:	b2db      	uxtb	r3, r3
 8006440:	461a      	mov	r2, r3
 8006442:	0092      	lsls	r2, r2, #2
 8006444:	4413      	add	r3, r2
 8006446:	005b      	lsls	r3, r3, #1
 8006448:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800644a:	79fb      	ldrb	r3, [r7, #7]
 800644c:	f003 030f 	and.w	r3, r3, #15
 8006450:	b2da      	uxtb	r2, r3
 8006452:	7bfb      	ldrb	r3, [r7, #15]
 8006454:	4413      	add	r3, r2
 8006456:	b2db      	uxtb	r3, r3
}
 8006458:	4618      	mov	r0, r3
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e07b      	b.n	800656e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647a:	2b00      	cmp	r3, #0
 800647c:	d108      	bne.n	8006490 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006486:	d009      	beq.n	800649c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	61da      	str	r2, [r3, #28]
 800648e:	e005      	b.n	800649c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d106      	bne.n	80064bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f7fb fec4 	bl	8002244 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2202      	movs	r2, #2
 80064c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80064e4:	431a      	orrs	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064ee:	431a      	orrs	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	f003 0302 	and.w	r3, r3, #2
 80064f8:	431a      	orrs	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	431a      	orrs	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800650c:	431a      	orrs	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006516:	431a      	orrs	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006520:	ea42 0103 	orr.w	r1, r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006528:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	430a      	orrs	r2, r1
 8006532:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	0c1b      	lsrs	r3, r3, #16
 800653a:	f003 0104 	and.w	r1, r3, #4
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006542:	f003 0210 	and.w	r2, r3, #16
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	430a      	orrs	r2, r1
 800654c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	69da      	ldr	r2, [r3, #28]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800655c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b08c      	sub	sp, #48	; 0x30
 800657a:	af00      	add	r7, sp, #0
 800657c:	60f8      	str	r0, [r7, #12]
 800657e:	60b9      	str	r1, [r7, #8]
 8006580:	607a      	str	r2, [r7, #4]
 8006582:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006584:	2301      	movs	r3, #1
 8006586:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006588:	2300      	movs	r3, #0
 800658a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006594:	2b01      	cmp	r3, #1
 8006596:	d101      	bne.n	800659c <HAL_SPI_TransmitReceive+0x26>
 8006598:	2302      	movs	r3, #2
 800659a:	e18a      	b.n	80068b2 <HAL_SPI_TransmitReceive+0x33c>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065a4:	f7fc f9ce 	bl	8002944 <HAL_GetTick>
 80065a8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80065ba:	887b      	ldrh	r3, [r7, #2]
 80065bc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80065be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d00f      	beq.n	80065e6 <HAL_SPI_TransmitReceive+0x70>
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065cc:	d107      	bne.n	80065de <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d103      	bne.n	80065de <HAL_SPI_TransmitReceive+0x68>
 80065d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065da:	2b04      	cmp	r3, #4
 80065dc:	d003      	beq.n	80065e6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80065de:	2302      	movs	r3, #2
 80065e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80065e4:	e15b      	b.n	800689e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d005      	beq.n	80065f8 <HAL_SPI_TransmitReceive+0x82>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d002      	beq.n	80065f8 <HAL_SPI_TransmitReceive+0x82>
 80065f2:	887b      	ldrh	r3, [r7, #2]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d103      	bne.n	8006600 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80065fe:	e14e      	b.n	800689e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006606:	b2db      	uxtb	r3, r3
 8006608:	2b04      	cmp	r3, #4
 800660a:	d003      	beq.n	8006614 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2205      	movs	r2, #5
 8006610:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	887a      	ldrh	r2, [r7, #2]
 8006624:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	887a      	ldrh	r2, [r7, #2]
 800662a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	887a      	ldrh	r2, [r7, #2]
 8006636:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	887a      	ldrh	r2, [r7, #2]
 800663c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006654:	2b40      	cmp	r3, #64	; 0x40
 8006656:	d007      	beq.n	8006668 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006666:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006670:	d178      	bne.n	8006764 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d002      	beq.n	8006680 <HAL_SPI_TransmitReceive+0x10a>
 800667a:	8b7b      	ldrh	r3, [r7, #26]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d166      	bne.n	800674e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006684:	881a      	ldrh	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006690:	1c9a      	adds	r2, r3, #2
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800669a:	b29b      	uxth	r3, r3
 800669c:	3b01      	subs	r3, #1
 800669e:	b29a      	uxth	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066a4:	e053      	b.n	800674e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d11b      	bne.n	80066ec <HAL_SPI_TransmitReceive+0x176>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d016      	beq.n	80066ec <HAL_SPI_TransmitReceive+0x176>
 80066be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d113      	bne.n	80066ec <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c8:	881a      	ldrh	r2, [r3, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d4:	1c9a      	adds	r2, r3, #2
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066de:	b29b      	uxth	r3, r3
 80066e0:	3b01      	subs	r3, #1
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066e8:	2300      	movs	r3, #0
 80066ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d119      	bne.n	800672e <HAL_SPI_TransmitReceive+0x1b8>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066fe:	b29b      	uxth	r3, r3
 8006700:	2b00      	cmp	r3, #0
 8006702:	d014      	beq.n	800672e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68da      	ldr	r2, [r3, #12]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670e:	b292      	uxth	r2, r2
 8006710:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006716:	1c9a      	adds	r2, r3, #2
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006720:	b29b      	uxth	r3, r3
 8006722:	3b01      	subs	r3, #1
 8006724:	b29a      	uxth	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800672a:	2301      	movs	r3, #1
 800672c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800672e:	f7fc f909 	bl	8002944 <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800673a:	429a      	cmp	r2, r3
 800673c:	d807      	bhi.n	800674e <HAL_SPI_TransmitReceive+0x1d8>
 800673e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006744:	d003      	beq.n	800674e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800674c:	e0a7      	b.n	800689e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006752:	b29b      	uxth	r3, r3
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1a6      	bne.n	80066a6 <HAL_SPI_TransmitReceive+0x130>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800675c:	b29b      	uxth	r3, r3
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1a1      	bne.n	80066a6 <HAL_SPI_TransmitReceive+0x130>
 8006762:	e07c      	b.n	800685e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <HAL_SPI_TransmitReceive+0x1fc>
 800676c:	8b7b      	ldrh	r3, [r7, #26]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d16b      	bne.n	800684a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	330c      	adds	r3, #12
 800677c:	7812      	ldrb	r2, [r2, #0]
 800677e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006784:	1c5a      	adds	r2, r3, #1
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800678e:	b29b      	uxth	r3, r3
 8006790:	3b01      	subs	r3, #1
 8006792:	b29a      	uxth	r2, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006798:	e057      	b.n	800684a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f003 0302 	and.w	r3, r3, #2
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d11c      	bne.n	80067e2 <HAL_SPI_TransmitReceive+0x26c>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d017      	beq.n	80067e2 <HAL_SPI_TransmitReceive+0x26c>
 80067b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d114      	bne.n	80067e2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	330c      	adds	r3, #12
 80067c2:	7812      	ldrb	r2, [r2, #0]
 80067c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ca:	1c5a      	adds	r2, r3, #1
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	3b01      	subs	r3, #1
 80067d8:	b29a      	uxth	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067de:	2300      	movs	r3, #0
 80067e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f003 0301 	and.w	r3, r3, #1
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d119      	bne.n	8006824 <HAL_SPI_TransmitReceive+0x2ae>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d014      	beq.n	8006824 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68da      	ldr	r2, [r3, #12]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006804:	b2d2      	uxtb	r2, r2
 8006806:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680c:	1c5a      	adds	r2, r3, #1
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006816:	b29b      	uxth	r3, r3
 8006818:	3b01      	subs	r3, #1
 800681a:	b29a      	uxth	r2, r3
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006820:	2301      	movs	r3, #1
 8006822:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006824:	f7fc f88e 	bl	8002944 <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006830:	429a      	cmp	r2, r3
 8006832:	d803      	bhi.n	800683c <HAL_SPI_TransmitReceive+0x2c6>
 8006834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800683a:	d102      	bne.n	8006842 <HAL_SPI_TransmitReceive+0x2cc>
 800683c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683e:	2b00      	cmp	r3, #0
 8006840:	d103      	bne.n	800684a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006848:	e029      	b.n	800689e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800684e:	b29b      	uxth	r3, r3
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1a2      	bne.n	800679a <HAL_SPI_TransmitReceive+0x224>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006858:	b29b      	uxth	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d19d      	bne.n	800679a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800685e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006860:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f000 f9d0 	bl	8006c08 <SPI_EndRxTxTransaction>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d006      	beq.n	800687c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2220      	movs	r2, #32
 8006878:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800687a:	e010      	b.n	800689e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d10b      	bne.n	800689c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006884:	2300      	movs	r3, #0
 8006886:	617b      	str	r3, [r7, #20]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	617b      	str	r3, [r7, #20]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	617b      	str	r3, [r7, #20]
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	e000      	b.n	800689e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800689c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80068ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3730      	adds	r7, #48	; 0x30
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
	...

080068bc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b088      	sub	sp, #32
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	099b      	lsrs	r3, r3, #6
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d10f      	bne.n	8006900 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00a      	beq.n	8006900 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	099b      	lsrs	r3, r3, #6
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d004      	beq.n	8006900 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	4798      	blx	r3
    return;
 80068fe:	e0d7      	b.n	8006ab0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	085b      	lsrs	r3, r3, #1
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00a      	beq.n	8006922 <HAL_SPI_IRQHandler+0x66>
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	09db      	lsrs	r3, r3, #7
 8006910:	f003 0301 	and.w	r3, r3, #1
 8006914:	2b00      	cmp	r3, #0
 8006916:	d004      	beq.n	8006922 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	4798      	blx	r3
    return;
 8006920:	e0c6      	b.n	8006ab0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	095b      	lsrs	r3, r3, #5
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10c      	bne.n	8006948 <HAL_SPI_IRQHandler+0x8c>
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	099b      	lsrs	r3, r3, #6
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b00      	cmp	r3, #0
 8006938:	d106      	bne.n	8006948 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	0a1b      	lsrs	r3, r3, #8
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b00      	cmp	r3, #0
 8006944:	f000 80b4 	beq.w	8006ab0 <HAL_SPI_IRQHandler+0x1f4>
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	095b      	lsrs	r3, r3, #5
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	2b00      	cmp	r3, #0
 8006952:	f000 80ad 	beq.w	8006ab0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	099b      	lsrs	r3, r3, #6
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	2b00      	cmp	r3, #0
 8006960:	d023      	beq.n	80069aa <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b03      	cmp	r3, #3
 800696c:	d011      	beq.n	8006992 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006972:	f043 0204 	orr.w	r2, r3, #4
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800697a:	2300      	movs	r3, #0
 800697c:	617b      	str	r3, [r7, #20]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	617b      	str	r3, [r7, #20]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	617b      	str	r3, [r7, #20]
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	e00b      	b.n	80069aa <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006992:	2300      	movs	r3, #0
 8006994:	613b      	str	r3, [r7, #16]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	613b      	str	r3, [r7, #16]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	613b      	str	r3, [r7, #16]
 80069a6:	693b      	ldr	r3, [r7, #16]
        return;
 80069a8:	e082      	b.n	8006ab0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	095b      	lsrs	r3, r3, #5
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d014      	beq.n	80069e0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ba:	f043 0201 	orr.w	r2, r3, #1
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80069c2:	2300      	movs	r3, #0
 80069c4:	60fb      	str	r3, [r7, #12]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	60fb      	str	r3, [r7, #12]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	0a1b      	lsrs	r3, r3, #8
 80069e4:	f003 0301 	and.w	r3, r3, #1
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00c      	beq.n	8006a06 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069f0:	f043 0208 	orr.w	r2, r3, #8
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80069f8:	2300      	movs	r3, #0
 80069fa:	60bb      	str	r3, [r7, #8]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	60bb      	str	r3, [r7, #8]
 8006a04:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d04f      	beq.n	8006aae <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a1c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	f003 0302 	and.w	r3, r3, #2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d104      	bne.n	8006a3a <HAL_SPI_IRQHandler+0x17e>
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d034      	beq.n	8006aa4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 0203 	bic.w	r2, r2, #3
 8006a48:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d011      	beq.n	8006a76 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a56:	4a18      	ldr	r2, [pc, #96]	; (8006ab8 <HAL_SPI_IRQHandler+0x1fc>)
 8006a58:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7fc f9a0 	bl	8002da4 <HAL_DMA_Abort_IT>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d005      	beq.n	8006a76 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d016      	beq.n	8006aac <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a82:	4a0d      	ldr	r2, [pc, #52]	; (8006ab8 <HAL_SPI_IRQHandler+0x1fc>)
 8006a84:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7fc f98a 	bl	8002da4 <HAL_DMA_Abort_IT>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00a      	beq.n	8006aac <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006aa2:	e003      	b.n	8006aac <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f809 	bl	8006abc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006aaa:	e000      	b.n	8006aae <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006aac:	bf00      	nop
    return;
 8006aae:	bf00      	nop
  }
}
 8006ab0:	3720      	adds	r7, #32
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	08006ad1 	.word	0x08006ad1

08006abc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006adc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f7ff ffe6 	bl	8006abc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006af0:	bf00      	nop
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b088      	sub	sp, #32
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	603b      	str	r3, [r7, #0]
 8006b04:	4613      	mov	r3, r2
 8006b06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b08:	f7fb ff1c 	bl	8002944 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b10:	1a9b      	subs	r3, r3, r2
 8006b12:	683a      	ldr	r2, [r7, #0]
 8006b14:	4413      	add	r3, r2
 8006b16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b18:	f7fb ff14 	bl	8002944 <HAL_GetTick>
 8006b1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b1e:	4b39      	ldr	r3, [pc, #228]	; (8006c04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	015b      	lsls	r3, r3, #5
 8006b24:	0d1b      	lsrs	r3, r3, #20
 8006b26:	69fa      	ldr	r2, [r7, #28]
 8006b28:	fb02 f303 	mul.w	r3, r2, r3
 8006b2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b2e:	e054      	b.n	8006bda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b36:	d050      	beq.n	8006bda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b38:	f7fb ff04 	bl	8002944 <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	69fa      	ldr	r2, [r7, #28]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d902      	bls.n	8006b4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d13d      	bne.n	8006bca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	685a      	ldr	r2, [r3, #4]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b66:	d111      	bne.n	8006b8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b70:	d004      	beq.n	8006b7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b7a:	d107      	bne.n	8006b8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b94:	d10f      	bne.n	8006bb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ba4:	601a      	str	r2, [r3, #0]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e017      	b.n	8006bfa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	689a      	ldr	r2, [r3, #8]
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	4013      	ands	r3, r2
 8006be4:	68ba      	ldr	r2, [r7, #8]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	bf0c      	ite	eq
 8006bea:	2301      	moveq	r3, #1
 8006bec:	2300      	movne	r3, #0
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	79fb      	ldrb	r3, [r7, #7]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d19b      	bne.n	8006b30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3720      	adds	r7, #32
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	20000234 	.word	0x20000234

08006c08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b088      	sub	sp, #32
 8006c0c:	af02      	add	r7, sp, #8
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006c14:	4b1b      	ldr	r3, [pc, #108]	; (8006c84 <SPI_EndRxTxTransaction+0x7c>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a1b      	ldr	r2, [pc, #108]	; (8006c88 <SPI_EndRxTxTransaction+0x80>)
 8006c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c1e:	0d5b      	lsrs	r3, r3, #21
 8006c20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c24:	fb02 f303 	mul.w	r3, r2, r3
 8006c28:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c32:	d112      	bne.n	8006c5a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	2180      	movs	r1, #128	; 0x80
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f7ff ff5a 	bl	8006af8 <SPI_WaitFlagStateUntilTimeout>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d016      	beq.n	8006c78 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c4e:	f043 0220 	orr.w	r2, r3, #32
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e00f      	b.n	8006c7a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00a      	beq.n	8006c76 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	3b01      	subs	r3, #1
 8006c64:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c70:	2b80      	cmp	r3, #128	; 0x80
 8006c72:	d0f2      	beq.n	8006c5a <SPI_EndRxTxTransaction+0x52>
 8006c74:	e000      	b.n	8006c78 <SPI_EndRxTxTransaction+0x70>
        break;
 8006c76:	bf00      	nop
  }

  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3718      	adds	r7, #24
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	20000234 	.word	0x20000234
 8006c88:	165e9f81 	.word	0x165e9f81

08006c8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d101      	bne.n	8006c9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e041      	b.n	8006d22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d106      	bne.n	8006cb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f7fb fb48 	bl	8002348 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2202      	movs	r2, #2
 8006cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	3304      	adds	r3, #4
 8006cc8:	4619      	mov	r1, r3
 8006cca:	4610      	mov	r0, r2
 8006ccc:	f000 fa96 	bl	80071fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
	...

08006d2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d001      	beq.n	8006d44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e04e      	b.n	8006de2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2202      	movs	r2, #2
 8006d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68da      	ldr	r2, [r3, #12]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f042 0201 	orr.w	r2, r2, #1
 8006d5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a23      	ldr	r2, [pc, #140]	; (8006df0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d022      	beq.n	8006dac <HAL_TIM_Base_Start_IT+0x80>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d6e:	d01d      	beq.n	8006dac <HAL_TIM_Base_Start_IT+0x80>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a1f      	ldr	r2, [pc, #124]	; (8006df4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d018      	beq.n	8006dac <HAL_TIM_Base_Start_IT+0x80>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a1e      	ldr	r2, [pc, #120]	; (8006df8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d013      	beq.n	8006dac <HAL_TIM_Base_Start_IT+0x80>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a1c      	ldr	r2, [pc, #112]	; (8006dfc <HAL_TIM_Base_Start_IT+0xd0>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d00e      	beq.n	8006dac <HAL_TIM_Base_Start_IT+0x80>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a1b      	ldr	r2, [pc, #108]	; (8006e00 <HAL_TIM_Base_Start_IT+0xd4>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d009      	beq.n	8006dac <HAL_TIM_Base_Start_IT+0x80>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a19      	ldr	r2, [pc, #100]	; (8006e04 <HAL_TIM_Base_Start_IT+0xd8>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d004      	beq.n	8006dac <HAL_TIM_Base_Start_IT+0x80>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a18      	ldr	r2, [pc, #96]	; (8006e08 <HAL_TIM_Base_Start_IT+0xdc>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d111      	bne.n	8006dd0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f003 0307 	and.w	r3, r3, #7
 8006db6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2b06      	cmp	r3, #6
 8006dbc:	d010      	beq.n	8006de0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f042 0201 	orr.w	r2, r2, #1
 8006dcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dce:	e007      	b.n	8006de0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f042 0201 	orr.w	r2, r2, #1
 8006dde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3714      	adds	r7, #20
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	40010000 	.word	0x40010000
 8006df4:	40000400 	.word	0x40000400
 8006df8:	40000800 	.word	0x40000800
 8006dfc:	40000c00 	.word	0x40000c00
 8006e00:	40010400 	.word	0x40010400
 8006e04:	40014000 	.word	0x40014000
 8006e08:	40001800 	.word	0x40001800

08006e0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	f003 0302 	and.w	r3, r3, #2
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d122      	bne.n	8006e68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	f003 0302 	and.w	r3, r3, #2
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d11b      	bne.n	8006e68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f06f 0202 	mvn.w	r2, #2
 8006e38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	f003 0303 	and.w	r3, r3, #3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d003      	beq.n	8006e56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f9b5 	bl	80071be <HAL_TIM_IC_CaptureCallback>
 8006e54:	e005      	b.n	8006e62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f9a7 	bl	80071aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 f9b8 	bl	80071d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	f003 0304 	and.w	r3, r3, #4
 8006e72:	2b04      	cmp	r3, #4
 8006e74:	d122      	bne.n	8006ebc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	f003 0304 	and.w	r3, r3, #4
 8006e80:	2b04      	cmp	r3, #4
 8006e82:	d11b      	bne.n	8006ebc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f06f 0204 	mvn.w	r2, #4
 8006e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2202      	movs	r2, #2
 8006e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d003      	beq.n	8006eaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f98b 	bl	80071be <HAL_TIM_IC_CaptureCallback>
 8006ea8:	e005      	b.n	8006eb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f97d 	bl	80071aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f98e 	bl	80071d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	f003 0308 	and.w	r3, r3, #8
 8006ec6:	2b08      	cmp	r3, #8
 8006ec8:	d122      	bne.n	8006f10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	f003 0308 	and.w	r3, r3, #8
 8006ed4:	2b08      	cmp	r3, #8
 8006ed6:	d11b      	bne.n	8006f10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f06f 0208 	mvn.w	r2, #8
 8006ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2204      	movs	r2, #4
 8006ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	69db      	ldr	r3, [r3, #28]
 8006eee:	f003 0303 	and.w	r3, r3, #3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f961 	bl	80071be <HAL_TIM_IC_CaptureCallback>
 8006efc:	e005      	b.n	8006f0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f953 	bl	80071aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f964 	bl	80071d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	f003 0310 	and.w	r3, r3, #16
 8006f1a:	2b10      	cmp	r3, #16
 8006f1c:	d122      	bne.n	8006f64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	f003 0310 	and.w	r3, r3, #16
 8006f28:	2b10      	cmp	r3, #16
 8006f2a:	d11b      	bne.n	8006f64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f06f 0210 	mvn.w	r2, #16
 8006f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2208      	movs	r2, #8
 8006f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d003      	beq.n	8006f52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f937 	bl	80071be <HAL_TIM_IC_CaptureCallback>
 8006f50:	e005      	b.n	8006f5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f929 	bl	80071aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 f93a 	bl	80071d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d10e      	bne.n	8006f90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	f003 0301 	and.w	r3, r3, #1
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d107      	bne.n	8006f90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f06f 0201 	mvn.w	r2, #1
 8006f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7fa fd78 	bl	8001a80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f9a:	2b80      	cmp	r3, #128	; 0x80
 8006f9c:	d10e      	bne.n	8006fbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fa8:	2b80      	cmp	r3, #128	; 0x80
 8006faa:	d107      	bne.n	8006fbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fae0 	bl	800757c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc6:	2b40      	cmp	r3, #64	; 0x40
 8006fc8:	d10e      	bne.n	8006fe8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd4:	2b40      	cmp	r3, #64	; 0x40
 8006fd6:	d107      	bne.n	8006fe8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f8ff 	bl	80071e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	f003 0320 	and.w	r3, r3, #32
 8006ff2:	2b20      	cmp	r3, #32
 8006ff4:	d10e      	bne.n	8007014 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	f003 0320 	and.w	r3, r3, #32
 8007000:	2b20      	cmp	r3, #32
 8007002:	d107      	bne.n	8007014 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f06f 0220 	mvn.w	r2, #32
 800700c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 faaa 	bl	8007568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007014:	bf00      	nop
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007026:	2300      	movs	r3, #0
 8007028:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007030:	2b01      	cmp	r3, #1
 8007032:	d101      	bne.n	8007038 <HAL_TIM_ConfigClockSource+0x1c>
 8007034:	2302      	movs	r3, #2
 8007036:	e0b4      	b.n	80071a2 <HAL_TIM_ConfigClockSource+0x186>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2202      	movs	r2, #2
 8007044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007056:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800705e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68ba      	ldr	r2, [r7, #8]
 8007066:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007070:	d03e      	beq.n	80070f0 <HAL_TIM_ConfigClockSource+0xd4>
 8007072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007076:	f200 8087 	bhi.w	8007188 <HAL_TIM_ConfigClockSource+0x16c>
 800707a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800707e:	f000 8086 	beq.w	800718e <HAL_TIM_ConfigClockSource+0x172>
 8007082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007086:	d87f      	bhi.n	8007188 <HAL_TIM_ConfigClockSource+0x16c>
 8007088:	2b70      	cmp	r3, #112	; 0x70
 800708a:	d01a      	beq.n	80070c2 <HAL_TIM_ConfigClockSource+0xa6>
 800708c:	2b70      	cmp	r3, #112	; 0x70
 800708e:	d87b      	bhi.n	8007188 <HAL_TIM_ConfigClockSource+0x16c>
 8007090:	2b60      	cmp	r3, #96	; 0x60
 8007092:	d050      	beq.n	8007136 <HAL_TIM_ConfigClockSource+0x11a>
 8007094:	2b60      	cmp	r3, #96	; 0x60
 8007096:	d877      	bhi.n	8007188 <HAL_TIM_ConfigClockSource+0x16c>
 8007098:	2b50      	cmp	r3, #80	; 0x50
 800709a:	d03c      	beq.n	8007116 <HAL_TIM_ConfigClockSource+0xfa>
 800709c:	2b50      	cmp	r3, #80	; 0x50
 800709e:	d873      	bhi.n	8007188 <HAL_TIM_ConfigClockSource+0x16c>
 80070a0:	2b40      	cmp	r3, #64	; 0x40
 80070a2:	d058      	beq.n	8007156 <HAL_TIM_ConfigClockSource+0x13a>
 80070a4:	2b40      	cmp	r3, #64	; 0x40
 80070a6:	d86f      	bhi.n	8007188 <HAL_TIM_ConfigClockSource+0x16c>
 80070a8:	2b30      	cmp	r3, #48	; 0x30
 80070aa:	d064      	beq.n	8007176 <HAL_TIM_ConfigClockSource+0x15a>
 80070ac:	2b30      	cmp	r3, #48	; 0x30
 80070ae:	d86b      	bhi.n	8007188 <HAL_TIM_ConfigClockSource+0x16c>
 80070b0:	2b20      	cmp	r3, #32
 80070b2:	d060      	beq.n	8007176 <HAL_TIM_ConfigClockSource+0x15a>
 80070b4:	2b20      	cmp	r3, #32
 80070b6:	d867      	bhi.n	8007188 <HAL_TIM_ConfigClockSource+0x16c>
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d05c      	beq.n	8007176 <HAL_TIM_ConfigClockSource+0x15a>
 80070bc:	2b10      	cmp	r3, #16
 80070be:	d05a      	beq.n	8007176 <HAL_TIM_ConfigClockSource+0x15a>
 80070c0:	e062      	b.n	8007188 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6818      	ldr	r0, [r3, #0]
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	6899      	ldr	r1, [r3, #8]
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	685a      	ldr	r2, [r3, #4]
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	f000 f9ad 	bl	8007430 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80070e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68ba      	ldr	r2, [r7, #8]
 80070ec:	609a      	str	r2, [r3, #8]
      break;
 80070ee:	e04f      	b.n	8007190 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6818      	ldr	r0, [r3, #0]
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	6899      	ldr	r1, [r3, #8]
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	685a      	ldr	r2, [r3, #4]
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	f000 f996 	bl	8007430 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	689a      	ldr	r2, [r3, #8]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007112:	609a      	str	r2, [r3, #8]
      break;
 8007114:	e03c      	b.n	8007190 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6818      	ldr	r0, [r3, #0]
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	6859      	ldr	r1, [r3, #4]
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	461a      	mov	r2, r3
 8007124:	f000 f90a 	bl	800733c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2150      	movs	r1, #80	; 0x50
 800712e:	4618      	mov	r0, r3
 8007130:	f000 f963 	bl	80073fa <TIM_ITRx_SetConfig>
      break;
 8007134:	e02c      	b.n	8007190 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6818      	ldr	r0, [r3, #0]
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	6859      	ldr	r1, [r3, #4]
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	461a      	mov	r2, r3
 8007144:	f000 f929 	bl	800739a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2160      	movs	r1, #96	; 0x60
 800714e:	4618      	mov	r0, r3
 8007150:	f000 f953 	bl	80073fa <TIM_ITRx_SetConfig>
      break;
 8007154:	e01c      	b.n	8007190 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6818      	ldr	r0, [r3, #0]
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	6859      	ldr	r1, [r3, #4]
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	461a      	mov	r2, r3
 8007164:	f000 f8ea 	bl	800733c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2140      	movs	r1, #64	; 0x40
 800716e:	4618      	mov	r0, r3
 8007170:	f000 f943 	bl	80073fa <TIM_ITRx_SetConfig>
      break;
 8007174:	e00c      	b.n	8007190 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4619      	mov	r1, r3
 8007180:	4610      	mov	r0, r2
 8007182:	f000 f93a 	bl	80073fa <TIM_ITRx_SetConfig>
      break;
 8007186:	e003      	b.n	8007190 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	73fb      	strb	r3, [r7, #15]
      break;
 800718c:	e000      	b.n	8007190 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800718e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071aa:	b480      	push	{r7}
 80071ac:	b083      	sub	sp, #12
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071b2:	bf00      	nop
 80071b4:	370c      	adds	r7, #12
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80071be:	b480      	push	{r7}
 80071c0:	b083      	sub	sp, #12
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071c6:	bf00      	nop
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b083      	sub	sp, #12
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071da:	bf00      	nop
 80071dc:	370c      	adds	r7, #12
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b083      	sub	sp, #12
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071ee:	bf00      	nop
 80071f0:	370c      	adds	r7, #12
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
	...

080071fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a40      	ldr	r2, [pc, #256]	; (8007310 <TIM_Base_SetConfig+0x114>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d013      	beq.n	800723c <TIM_Base_SetConfig+0x40>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800721a:	d00f      	beq.n	800723c <TIM_Base_SetConfig+0x40>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a3d      	ldr	r2, [pc, #244]	; (8007314 <TIM_Base_SetConfig+0x118>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d00b      	beq.n	800723c <TIM_Base_SetConfig+0x40>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a3c      	ldr	r2, [pc, #240]	; (8007318 <TIM_Base_SetConfig+0x11c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d007      	beq.n	800723c <TIM_Base_SetConfig+0x40>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4a3b      	ldr	r2, [pc, #236]	; (800731c <TIM_Base_SetConfig+0x120>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d003      	beq.n	800723c <TIM_Base_SetConfig+0x40>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	4a3a      	ldr	r2, [pc, #232]	; (8007320 <TIM_Base_SetConfig+0x124>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d108      	bne.n	800724e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	4313      	orrs	r3, r2
 800724c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a2f      	ldr	r2, [pc, #188]	; (8007310 <TIM_Base_SetConfig+0x114>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d02b      	beq.n	80072ae <TIM_Base_SetConfig+0xb2>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800725c:	d027      	beq.n	80072ae <TIM_Base_SetConfig+0xb2>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4a2c      	ldr	r2, [pc, #176]	; (8007314 <TIM_Base_SetConfig+0x118>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d023      	beq.n	80072ae <TIM_Base_SetConfig+0xb2>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4a2b      	ldr	r2, [pc, #172]	; (8007318 <TIM_Base_SetConfig+0x11c>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d01f      	beq.n	80072ae <TIM_Base_SetConfig+0xb2>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a2a      	ldr	r2, [pc, #168]	; (800731c <TIM_Base_SetConfig+0x120>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d01b      	beq.n	80072ae <TIM_Base_SetConfig+0xb2>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4a29      	ldr	r2, [pc, #164]	; (8007320 <TIM_Base_SetConfig+0x124>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d017      	beq.n	80072ae <TIM_Base_SetConfig+0xb2>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a28      	ldr	r2, [pc, #160]	; (8007324 <TIM_Base_SetConfig+0x128>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d013      	beq.n	80072ae <TIM_Base_SetConfig+0xb2>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a27      	ldr	r2, [pc, #156]	; (8007328 <TIM_Base_SetConfig+0x12c>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d00f      	beq.n	80072ae <TIM_Base_SetConfig+0xb2>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a26      	ldr	r2, [pc, #152]	; (800732c <TIM_Base_SetConfig+0x130>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d00b      	beq.n	80072ae <TIM_Base_SetConfig+0xb2>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a25      	ldr	r2, [pc, #148]	; (8007330 <TIM_Base_SetConfig+0x134>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d007      	beq.n	80072ae <TIM_Base_SetConfig+0xb2>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a24      	ldr	r2, [pc, #144]	; (8007334 <TIM_Base_SetConfig+0x138>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d003      	beq.n	80072ae <TIM_Base_SetConfig+0xb2>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a23      	ldr	r2, [pc, #140]	; (8007338 <TIM_Base_SetConfig+0x13c>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d108      	bne.n	80072c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	4313      	orrs	r3, r2
 80072be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	695b      	ldr	r3, [r3, #20]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	689a      	ldr	r2, [r3, #8]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a0a      	ldr	r2, [pc, #40]	; (8007310 <TIM_Base_SetConfig+0x114>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d003      	beq.n	80072f4 <TIM_Base_SetConfig+0xf8>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a0c      	ldr	r2, [pc, #48]	; (8007320 <TIM_Base_SetConfig+0x124>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d103      	bne.n	80072fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	691a      	ldr	r2, [r3, #16]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	615a      	str	r2, [r3, #20]
}
 8007302:	bf00      	nop
 8007304:	3714      	adds	r7, #20
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	40010000 	.word	0x40010000
 8007314:	40000400 	.word	0x40000400
 8007318:	40000800 	.word	0x40000800
 800731c:	40000c00 	.word	0x40000c00
 8007320:	40010400 	.word	0x40010400
 8007324:	40014000 	.word	0x40014000
 8007328:	40014400 	.word	0x40014400
 800732c:	40014800 	.word	0x40014800
 8007330:	40001800 	.word	0x40001800
 8007334:	40001c00 	.word	0x40001c00
 8007338:	40002000 	.word	0x40002000

0800733c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800733c:	b480      	push	{r7}
 800733e:	b087      	sub	sp, #28
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6a1b      	ldr	r3, [r3, #32]
 800734c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	f023 0201 	bic.w	r2, r3, #1
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	011b      	lsls	r3, r3, #4
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	4313      	orrs	r3, r2
 8007370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	f023 030a 	bic.w	r3, r3, #10
 8007378:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	4313      	orrs	r3, r2
 8007380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	693a      	ldr	r2, [r7, #16]
 8007386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	697a      	ldr	r2, [r7, #20]
 800738c:	621a      	str	r2, [r3, #32]
}
 800738e:	bf00      	nop
 8007390:	371c      	adds	r7, #28
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800739a:	b480      	push	{r7}
 800739c:	b087      	sub	sp, #28
 800739e:	af00      	add	r7, sp, #0
 80073a0:	60f8      	str	r0, [r7, #12]
 80073a2:	60b9      	str	r1, [r7, #8]
 80073a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	f023 0210 	bic.w	r2, r3, #16
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6a1b      	ldr	r3, [r3, #32]
 80073bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	031b      	lsls	r3, r3, #12
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	011b      	lsls	r3, r3, #4
 80073dc:	693a      	ldr	r2, [r7, #16]
 80073de:	4313      	orrs	r3, r2
 80073e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	697a      	ldr	r2, [r7, #20]
 80073e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	693a      	ldr	r2, [r7, #16]
 80073ec:	621a      	str	r2, [r3, #32]
}
 80073ee:	bf00      	nop
 80073f0:	371c      	adds	r7, #28
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b085      	sub	sp, #20
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
 8007402:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007410:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007412:	683a      	ldr	r2, [r7, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	4313      	orrs	r3, r2
 8007418:	f043 0307 	orr.w	r3, r3, #7
 800741c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	609a      	str	r2, [r3, #8]
}
 8007424:	bf00      	nop
 8007426:	3714      	adds	r7, #20
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007430:	b480      	push	{r7}
 8007432:	b087      	sub	sp, #28
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]
 800743c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800744a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	021a      	lsls	r2, r3, #8
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	431a      	orrs	r2, r3
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	4313      	orrs	r3, r2
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	4313      	orrs	r3, r2
 800745c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	697a      	ldr	r2, [r7, #20]
 8007462:	609a      	str	r2, [r3, #8]
}
 8007464:	bf00      	nop
 8007466:	371c      	adds	r7, #28
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007480:	2b01      	cmp	r3, #1
 8007482:	d101      	bne.n	8007488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007484:	2302      	movs	r3, #2
 8007486:	e05a      	b.n	800753e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2202      	movs	r2, #2
 8007494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a21      	ldr	r2, [pc, #132]	; (800754c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d022      	beq.n	8007512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074d4:	d01d      	beq.n	8007512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a1d      	ldr	r2, [pc, #116]	; (8007550 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d018      	beq.n	8007512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a1b      	ldr	r2, [pc, #108]	; (8007554 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d013      	beq.n	8007512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a1a      	ldr	r2, [pc, #104]	; (8007558 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d00e      	beq.n	8007512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a18      	ldr	r2, [pc, #96]	; (800755c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d009      	beq.n	8007512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a17      	ldr	r2, [pc, #92]	; (8007560 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d004      	beq.n	8007512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a15      	ldr	r2, [pc, #84]	; (8007564 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d10c      	bne.n	800752c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007518:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	68ba      	ldr	r2, [r7, #8]
 8007520:	4313      	orrs	r3, r2
 8007522:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3714      	adds	r7, #20
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	40010000 	.word	0x40010000
 8007550:	40000400 	.word	0x40000400
 8007554:	40000800 	.word	0x40000800
 8007558:	40000c00 	.word	0x40000c00
 800755c:	40010400 	.word	0x40010400
 8007560:	40014000 	.word	0x40014000
 8007564:	40001800 	.word	0x40001800

08007568 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d101      	bne.n	80075a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e03f      	b.n	8007622 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d106      	bne.n	80075bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f7fa feec 	bl	8002394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2224      	movs	r2, #36	; 0x24
 80075c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68da      	ldr	r2, [r3, #12]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 fd19 	bl	800800c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	691a      	ldr	r2, [r3, #16]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	695a      	ldr	r2, [r3, #20]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68da      	ldr	r2, [r3, #12]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007608:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2220      	movs	r2, #32
 8007614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2220      	movs	r2, #32
 800761c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800762a:	b480      	push	{r7}
 800762c:	b085      	sub	sp, #20
 800762e:	af00      	add	r7, sp, #0
 8007630:	60f8      	str	r0, [r7, #12]
 8007632:	60b9      	str	r1, [r7, #8]
 8007634:	4613      	mov	r3, r2
 8007636:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800763e:	b2db      	uxtb	r3, r3
 8007640:	2b20      	cmp	r3, #32
 8007642:	d130      	bne.n	80076a6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d002      	beq.n	8007650 <HAL_UART_Transmit_IT+0x26>
 800764a:	88fb      	ldrh	r3, [r7, #6]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d101      	bne.n	8007654 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e029      	b.n	80076a8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800765a:	2b01      	cmp	r3, #1
 800765c:	d101      	bne.n	8007662 <HAL_UART_Transmit_IT+0x38>
 800765e:	2302      	movs	r3, #2
 8007660:	e022      	b.n	80076a8 <HAL_UART_Transmit_IT+0x7e>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	88fa      	ldrh	r2, [r7, #6]
 8007674:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	88fa      	ldrh	r2, [r7, #6]
 800767a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2221      	movs	r2, #33	; 0x21
 8007686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68da      	ldr	r2, [r3, #12]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80076a0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80076a2:	2300      	movs	r3, #0
 80076a4:	e000      	b.n	80076a8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80076a6:	2302      	movs	r3, #2
  }
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3714      	adds	r7, #20
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	4613      	mov	r3, r2
 80076c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b20      	cmp	r3, #32
 80076cc:	d11d      	bne.n	800770a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d002      	beq.n	80076da <HAL_UART_Receive_IT+0x26>
 80076d4:	88fb      	ldrh	r3, [r7, #6]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d101      	bne.n	80076de <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e016      	b.n	800770c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d101      	bne.n	80076ec <HAL_UART_Receive_IT+0x38>
 80076e8:	2302      	movs	r3, #2
 80076ea:	e00f      	b.n	800770c <HAL_UART_Receive_IT+0x58>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80076fa:	88fb      	ldrh	r3, [r7, #6]
 80076fc:	461a      	mov	r2, r3
 80076fe:	68b9      	ldr	r1, [r7, #8]
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f000 faab 	bl	8007c5c <UART_Start_Receive_IT>
 8007706:	4603      	mov	r3, r0
 8007708:	e000      	b.n	800770c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800770a:	2302      	movs	r3, #2
  }
}
 800770c:	4618      	mov	r0, r3
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b0ba      	sub	sp, #232	; 0xe8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800773a:	2300      	movs	r3, #0
 800773c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007740:	2300      	movs	r3, #0
 8007742:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800774a:	f003 030f 	and.w	r3, r3, #15
 800774e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007752:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007756:	2b00      	cmp	r3, #0
 8007758:	d10f      	bne.n	800777a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800775a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800775e:	f003 0320 	and.w	r3, r3, #32
 8007762:	2b00      	cmp	r3, #0
 8007764:	d009      	beq.n	800777a <HAL_UART_IRQHandler+0x66>
 8007766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800776a:	f003 0320 	and.w	r3, r3, #32
 800776e:	2b00      	cmp	r3, #0
 8007770:	d003      	beq.n	800777a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fb8f 	bl	8007e96 <UART_Receive_IT>
      return;
 8007778:	e256      	b.n	8007c28 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800777a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800777e:	2b00      	cmp	r3, #0
 8007780:	f000 80de 	beq.w	8007940 <HAL_UART_IRQHandler+0x22c>
 8007784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007788:	f003 0301 	and.w	r3, r3, #1
 800778c:	2b00      	cmp	r3, #0
 800778e:	d106      	bne.n	800779e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007794:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007798:	2b00      	cmp	r3, #0
 800779a:	f000 80d1 	beq.w	8007940 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800779e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077a2:	f003 0301 	and.w	r3, r3, #1
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00b      	beq.n	80077c2 <HAL_UART_IRQHandler+0xae>
 80077aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d005      	beq.n	80077c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ba:	f043 0201 	orr.w	r2, r3, #1
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077c6:	f003 0304 	and.w	r3, r3, #4
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00b      	beq.n	80077e6 <HAL_UART_IRQHandler+0xd2>
 80077ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077d2:	f003 0301 	and.w	r3, r3, #1
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d005      	beq.n	80077e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077de:	f043 0202 	orr.w	r2, r3, #2
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ea:	f003 0302 	and.w	r3, r3, #2
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00b      	beq.n	800780a <HAL_UART_IRQHandler+0xf6>
 80077f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077f6:	f003 0301 	and.w	r3, r3, #1
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d005      	beq.n	800780a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007802:	f043 0204 	orr.w	r2, r3, #4
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800780a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800780e:	f003 0308 	and.w	r3, r3, #8
 8007812:	2b00      	cmp	r3, #0
 8007814:	d011      	beq.n	800783a <HAL_UART_IRQHandler+0x126>
 8007816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800781a:	f003 0320 	and.w	r3, r3, #32
 800781e:	2b00      	cmp	r3, #0
 8007820:	d105      	bne.n	800782e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007826:	f003 0301 	and.w	r3, r3, #1
 800782a:	2b00      	cmp	r3, #0
 800782c:	d005      	beq.n	800783a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007832:	f043 0208 	orr.w	r2, r3, #8
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783e:	2b00      	cmp	r3, #0
 8007840:	f000 81ed 	beq.w	8007c1e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007848:	f003 0320 	and.w	r3, r3, #32
 800784c:	2b00      	cmp	r3, #0
 800784e:	d008      	beq.n	8007862 <HAL_UART_IRQHandler+0x14e>
 8007850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007854:	f003 0320 	and.w	r3, r3, #32
 8007858:	2b00      	cmp	r3, #0
 800785a:	d002      	beq.n	8007862 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fb1a 	bl	8007e96 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	695b      	ldr	r3, [r3, #20]
 8007868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786c:	2b40      	cmp	r3, #64	; 0x40
 800786e:	bf0c      	ite	eq
 8007870:	2301      	moveq	r3, #1
 8007872:	2300      	movne	r3, #0
 8007874:	b2db      	uxtb	r3, r3
 8007876:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787e:	f003 0308 	and.w	r3, r3, #8
 8007882:	2b00      	cmp	r3, #0
 8007884:	d103      	bne.n	800788e <HAL_UART_IRQHandler+0x17a>
 8007886:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800788a:	2b00      	cmp	r3, #0
 800788c:	d04f      	beq.n	800792e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 fa22 	bl	8007cd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800789e:	2b40      	cmp	r3, #64	; 0x40
 80078a0:	d141      	bne.n	8007926 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	3314      	adds	r3, #20
 80078a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078b0:	e853 3f00 	ldrex	r3, [r3]
 80078b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80078b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	3314      	adds	r3, #20
 80078ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80078ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80078d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80078da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80078de:	e841 2300 	strex	r3, r2, [r1]
 80078e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80078e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1d9      	bne.n	80078a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d013      	beq.n	800791e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fa:	4a7d      	ldr	r2, [pc, #500]	; (8007af0 <HAL_UART_IRQHandler+0x3dc>)
 80078fc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007902:	4618      	mov	r0, r3
 8007904:	f7fb fa4e 	bl	8002da4 <HAL_DMA_Abort_IT>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d016      	beq.n	800793c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007918:	4610      	mov	r0, r2
 800791a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800791c:	e00e      	b.n	800793c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f986 	bl	8007c30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007924:	e00a      	b.n	800793c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f982 	bl	8007c30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800792c:	e006      	b.n	800793c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f97e 	bl	8007c30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800793a:	e170      	b.n	8007c1e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800793c:	bf00      	nop
    return;
 800793e:	e16e      	b.n	8007c1e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007944:	2b01      	cmp	r3, #1
 8007946:	f040 814a 	bne.w	8007bde <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800794a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800794e:	f003 0310 	and.w	r3, r3, #16
 8007952:	2b00      	cmp	r3, #0
 8007954:	f000 8143 	beq.w	8007bde <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800795c:	f003 0310 	and.w	r3, r3, #16
 8007960:	2b00      	cmp	r3, #0
 8007962:	f000 813c 	beq.w	8007bde <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007966:	2300      	movs	r3, #0
 8007968:	60bb      	str	r3, [r7, #8]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	60bb      	str	r3, [r7, #8]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	60bb      	str	r3, [r7, #8]
 800797a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007986:	2b40      	cmp	r3, #64	; 0x40
 8007988:	f040 80b4 	bne.w	8007af4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007998:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800799c:	2b00      	cmp	r3, #0
 800799e:	f000 8140 	beq.w	8007c22 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80079a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079aa:	429a      	cmp	r2, r3
 80079ac:	f080 8139 	bcs.w	8007c22 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079bc:	69db      	ldr	r3, [r3, #28]
 80079be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079c2:	f000 8088 	beq.w	8007ad6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	330c      	adds	r3, #12
 80079cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079d4:	e853 3f00 	ldrex	r3, [r3]
 80079d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80079dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	330c      	adds	r3, #12
 80079ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80079f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80079f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80079fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a02:	e841 2300 	strex	r3, r2, [r1]
 8007a06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007a0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1d9      	bne.n	80079c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	3314      	adds	r3, #20
 8007a18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a1c:	e853 3f00 	ldrex	r3, [r3]
 8007a20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a24:	f023 0301 	bic.w	r3, r3, #1
 8007a28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	3314      	adds	r3, #20
 8007a32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a42:	e841 2300 	strex	r3, r2, [r1]
 8007a46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1e1      	bne.n	8007a12 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	3314      	adds	r3, #20
 8007a54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a58:	e853 3f00 	ldrex	r3, [r3]
 8007a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	3314      	adds	r3, #20
 8007a6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a7a:	e841 2300 	strex	r3, r2, [r1]
 8007a7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1e3      	bne.n	8007a4e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2220      	movs	r2, #32
 8007a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	330c      	adds	r3, #12
 8007a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a9e:	e853 3f00 	ldrex	r3, [r3]
 8007aa2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007aa6:	f023 0310 	bic.w	r3, r3, #16
 8007aaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	330c      	adds	r3, #12
 8007ab4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007ab8:	65ba      	str	r2, [r7, #88]	; 0x58
 8007aba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007abe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ac0:	e841 2300 	strex	r3, r2, [r1]
 8007ac4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1e3      	bne.n	8007a94 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7fb f8f7 	bl	8002cc4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f8ac 	bl	8007c44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007aec:	e099      	b.n	8007c22 <HAL_UART_IRQHandler+0x50e>
 8007aee:	bf00      	nop
 8007af0:	08007d9f 	.word	0x08007d9f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	f000 808b 	beq.w	8007c26 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007b10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f000 8086 	beq.w	8007c26 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	330c      	adds	r3, #12
 8007b20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b24:	e853 3f00 	ldrex	r3, [r3]
 8007b28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	330c      	adds	r3, #12
 8007b3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007b3e:	647a      	str	r2, [r7, #68]	; 0x44
 8007b40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b46:	e841 2300 	strex	r3, r2, [r1]
 8007b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1e3      	bne.n	8007b1a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	3314      	adds	r3, #20
 8007b58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5c:	e853 3f00 	ldrex	r3, [r3]
 8007b60:	623b      	str	r3, [r7, #32]
   return(result);
 8007b62:	6a3b      	ldr	r3, [r7, #32]
 8007b64:	f023 0301 	bic.w	r3, r3, #1
 8007b68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	3314      	adds	r3, #20
 8007b72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b76:	633a      	str	r2, [r7, #48]	; 0x30
 8007b78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b7e:	e841 2300 	strex	r3, r2, [r1]
 8007b82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1e3      	bne.n	8007b52 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2220      	movs	r2, #32
 8007b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	330c      	adds	r3, #12
 8007b9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	e853 3f00 	ldrex	r3, [r3]
 8007ba6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f023 0310 	bic.w	r3, r3, #16
 8007bae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	330c      	adds	r3, #12
 8007bb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007bbc:	61fa      	str	r2, [r7, #28]
 8007bbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc0:	69b9      	ldr	r1, [r7, #24]
 8007bc2:	69fa      	ldr	r2, [r7, #28]
 8007bc4:	e841 2300 	strex	r3, r2, [r1]
 8007bc8:	617b      	str	r3, [r7, #20]
   return(result);
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1e3      	bne.n	8007b98 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007bd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f834 	bl	8007c44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007bdc:	e023      	b.n	8007c26 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d009      	beq.n	8007bfe <HAL_UART_IRQHandler+0x4ea>
 8007bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d003      	beq.n	8007bfe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f8e5 	bl	8007dc6 <UART_Transmit_IT>
    return;
 8007bfc:	e014      	b.n	8007c28 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00e      	beq.n	8007c28 <HAL_UART_IRQHandler+0x514>
 8007c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d008      	beq.n	8007c28 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f925 	bl	8007e66 <UART_EndTransmit_IT>
    return;
 8007c1c:	e004      	b.n	8007c28 <HAL_UART_IRQHandler+0x514>
    return;
 8007c1e:	bf00      	nop
 8007c20:	e002      	b.n	8007c28 <HAL_UART_IRQHandler+0x514>
      return;
 8007c22:	bf00      	nop
 8007c24:	e000      	b.n	8007c28 <HAL_UART_IRQHandler+0x514>
      return;
 8007c26:	bf00      	nop
  }
}
 8007c28:	37e8      	adds	r7, #232	; 0xe8
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop

08007c30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	4613      	mov	r3, r2
 8007c68:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	68ba      	ldr	r2, [r7, #8]
 8007c6e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	88fa      	ldrh	r2, [r7, #6]
 8007c74:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	88fa      	ldrh	r2, [r7, #6]
 8007c7a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2222      	movs	r2, #34	; 0x22
 8007c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d007      	beq.n	8007caa <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68da      	ldr	r2, [r3, #12]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ca8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	695a      	ldr	r2, [r3, #20]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f042 0201 	orr.w	r2, r2, #1
 8007cb8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68da      	ldr	r2, [r3, #12]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f042 0220 	orr.w	r2, r2, #32
 8007cc8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3714      	adds	r7, #20
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b095      	sub	sp, #84	; 0x54
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	330c      	adds	r3, #12
 8007ce6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cea:	e853 3f00 	ldrex	r3, [r3]
 8007cee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	330c      	adds	r3, #12
 8007cfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d00:	643a      	str	r2, [r7, #64]	; 0x40
 8007d02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d08:	e841 2300 	strex	r3, r2, [r1]
 8007d0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1e5      	bne.n	8007ce0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	3314      	adds	r3, #20
 8007d1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1c:	6a3b      	ldr	r3, [r7, #32]
 8007d1e:	e853 3f00 	ldrex	r3, [r3]
 8007d22:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	f023 0301 	bic.w	r3, r3, #1
 8007d2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	3314      	adds	r3, #20
 8007d32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d3c:	e841 2300 	strex	r3, r2, [r1]
 8007d40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1e5      	bne.n	8007d14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d119      	bne.n	8007d84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	330c      	adds	r3, #12
 8007d56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	e853 3f00 	ldrex	r3, [r3]
 8007d5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	f023 0310 	bic.w	r3, r3, #16
 8007d66:	647b      	str	r3, [r7, #68]	; 0x44
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	330c      	adds	r3, #12
 8007d6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d70:	61ba      	str	r2, [r7, #24]
 8007d72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d74:	6979      	ldr	r1, [r7, #20]
 8007d76:	69ba      	ldr	r2, [r7, #24]
 8007d78:	e841 2300 	strex	r3, r2, [r1]
 8007d7c:	613b      	str	r3, [r7, #16]
   return(result);
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d1e5      	bne.n	8007d50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2220      	movs	r2, #32
 8007d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007d92:	bf00      	nop
 8007d94:	3754      	adds	r7, #84	; 0x54
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr

08007d9e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b084      	sub	sp, #16
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007daa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2200      	movs	r2, #0
 8007db6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	f7ff ff39 	bl	8007c30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dbe:	bf00      	nop
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	b085      	sub	sp, #20
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b21      	cmp	r3, #33	; 0x21
 8007dd8:	d13e      	bne.n	8007e58 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007de2:	d114      	bne.n	8007e0e <UART_Transmit_IT+0x48>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d110      	bne.n	8007e0e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a1b      	ldr	r3, [r3, #32]
 8007df0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	881b      	ldrh	r3, [r3, #0]
 8007df6:	461a      	mov	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e00:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a1b      	ldr	r3, [r3, #32]
 8007e06:	1c9a      	adds	r2, r3, #2
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	621a      	str	r2, [r3, #32]
 8007e0c:	e008      	b.n	8007e20 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a1b      	ldr	r3, [r3, #32]
 8007e12:	1c59      	adds	r1, r3, #1
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	6211      	str	r1, [r2, #32]
 8007e18:	781a      	ldrb	r2, [r3, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	3b01      	subs	r3, #1
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10f      	bne.n	8007e54 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68da      	ldr	r2, [r3, #12]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e42:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68da      	ldr	r2, [r3, #12]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e52:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007e54:	2300      	movs	r3, #0
 8007e56:	e000      	b.n	8007e5a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007e58:	2302      	movs	r3, #2
  }
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3714      	adds	r7, #20
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr

08007e66 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b082      	sub	sp, #8
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68da      	ldr	r2, [r3, #12]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e7c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2220      	movs	r2, #32
 8007e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f7f9 fbe8 	bl	800165c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3708      	adds	r7, #8
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b08c      	sub	sp, #48	; 0x30
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	2b22      	cmp	r3, #34	; 0x22
 8007ea8:	f040 80ab 	bne.w	8008002 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eb4:	d117      	bne.n	8007ee6 <UART_Receive_IT+0x50>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d113      	bne.n	8007ee6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ed4:	b29a      	uxth	r2, r3
 8007ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ede:	1c9a      	adds	r2, r3, #2
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	629a      	str	r2, [r3, #40]	; 0x28
 8007ee4:	e026      	b.n	8007f34 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007eec:	2300      	movs	r3, #0
 8007eee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ef8:	d007      	beq.n	8007f0a <UART_Receive_IT+0x74>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d10a      	bne.n	8007f18 <UART_Receive_IT+0x82>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d106      	bne.n	8007f18 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	b2da      	uxtb	r2, r3
 8007f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f14:	701a      	strb	r2, [r3, #0]
 8007f16:	e008      	b.n	8007f2a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f24:	b2da      	uxtb	r2, r3
 8007f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f28:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2e:	1c5a      	adds	r2, r3, #1
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	4619      	mov	r1, r3
 8007f42:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d15a      	bne.n	8007ffe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68da      	ldr	r2, [r3, #12]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f022 0220 	bic.w	r2, r2, #32
 8007f56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68da      	ldr	r2, [r3, #12]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	695a      	ldr	r2, [r3, #20]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f022 0201 	bic.w	r2, r2, #1
 8007f76:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2220      	movs	r2, #32
 8007f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d135      	bne.n	8007ff4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	330c      	adds	r3, #12
 8007f94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	e853 3f00 	ldrex	r3, [r3]
 8007f9c:	613b      	str	r3, [r7, #16]
   return(result);
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	f023 0310 	bic.w	r3, r3, #16
 8007fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	330c      	adds	r3, #12
 8007fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fae:	623a      	str	r2, [r7, #32]
 8007fb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb2:	69f9      	ldr	r1, [r7, #28]
 8007fb4:	6a3a      	ldr	r2, [r7, #32]
 8007fb6:	e841 2300 	strex	r3, r2, [r1]
 8007fba:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1e5      	bne.n	8007f8e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 0310 	and.w	r3, r3, #16
 8007fcc:	2b10      	cmp	r3, #16
 8007fce:	d10a      	bne.n	8007fe6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	60fb      	str	r3, [r7, #12]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	60fb      	str	r3, [r7, #12]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	60fb      	str	r3, [r7, #12]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007fea:	4619      	mov	r1, r3
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f7ff fe29 	bl	8007c44 <HAL_UARTEx_RxEventCallback>
 8007ff2:	e002      	b.n	8007ffa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f7f9 fb13 	bl	8001620 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	e002      	b.n	8008004 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007ffe:	2300      	movs	r3, #0
 8008000:	e000      	b.n	8008004 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008002:	2302      	movs	r3, #2
  }
}
 8008004:	4618      	mov	r0, r3
 8008006:	3730      	adds	r7, #48	; 0x30
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800800c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008010:	b0c0      	sub	sp, #256	; 0x100
 8008012:	af00      	add	r7, sp, #0
 8008014:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008028:	68d9      	ldr	r1, [r3, #12]
 800802a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	ea40 0301 	orr.w	r3, r0, r1
 8008034:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800803a:	689a      	ldr	r2, [r3, #8]
 800803c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	431a      	orrs	r2, r3
 8008044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008048:	695b      	ldr	r3, [r3, #20]
 800804a:	431a      	orrs	r2, r3
 800804c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008050:	69db      	ldr	r3, [r3, #28]
 8008052:	4313      	orrs	r3, r2
 8008054:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008064:	f021 010c 	bic.w	r1, r1, #12
 8008068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008072:	430b      	orrs	r3, r1
 8008074:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	695b      	ldr	r3, [r3, #20]
 800807e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008086:	6999      	ldr	r1, [r3, #24]
 8008088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	ea40 0301 	orr.w	r3, r0, r1
 8008092:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	4b8f      	ldr	r3, [pc, #572]	; (80082d8 <UART_SetConfig+0x2cc>)
 800809c:	429a      	cmp	r2, r3
 800809e:	d005      	beq.n	80080ac <UART_SetConfig+0xa0>
 80080a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	4b8d      	ldr	r3, [pc, #564]	; (80082dc <UART_SetConfig+0x2d0>)
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d104      	bne.n	80080b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80080ac:	f7fd fdb4 	bl	8005c18 <HAL_RCC_GetPCLK2Freq>
 80080b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80080b4:	e003      	b.n	80080be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80080b6:	f7fd fd9b 	bl	8005bf0 <HAL_RCC_GetPCLK1Freq>
 80080ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080c2:	69db      	ldr	r3, [r3, #28]
 80080c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080c8:	f040 810c 	bne.w	80082e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80080cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080d0:	2200      	movs	r2, #0
 80080d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80080d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80080da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80080de:	4622      	mov	r2, r4
 80080e0:	462b      	mov	r3, r5
 80080e2:	1891      	adds	r1, r2, r2
 80080e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80080e6:	415b      	adcs	r3, r3
 80080e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80080ee:	4621      	mov	r1, r4
 80080f0:	eb12 0801 	adds.w	r8, r2, r1
 80080f4:	4629      	mov	r1, r5
 80080f6:	eb43 0901 	adc.w	r9, r3, r1
 80080fa:	f04f 0200 	mov.w	r2, #0
 80080fe:	f04f 0300 	mov.w	r3, #0
 8008102:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008106:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800810a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800810e:	4690      	mov	r8, r2
 8008110:	4699      	mov	r9, r3
 8008112:	4623      	mov	r3, r4
 8008114:	eb18 0303 	adds.w	r3, r8, r3
 8008118:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800811c:	462b      	mov	r3, r5
 800811e:	eb49 0303 	adc.w	r3, r9, r3
 8008122:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008132:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008136:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800813a:	460b      	mov	r3, r1
 800813c:	18db      	adds	r3, r3, r3
 800813e:	653b      	str	r3, [r7, #80]	; 0x50
 8008140:	4613      	mov	r3, r2
 8008142:	eb42 0303 	adc.w	r3, r2, r3
 8008146:	657b      	str	r3, [r7, #84]	; 0x54
 8008148:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800814c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008150:	f7f8 f8a6 	bl	80002a0 <__aeabi_uldivmod>
 8008154:	4602      	mov	r2, r0
 8008156:	460b      	mov	r3, r1
 8008158:	4b61      	ldr	r3, [pc, #388]	; (80082e0 <UART_SetConfig+0x2d4>)
 800815a:	fba3 2302 	umull	r2, r3, r3, r2
 800815e:	095b      	lsrs	r3, r3, #5
 8008160:	011c      	lsls	r4, r3, #4
 8008162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008166:	2200      	movs	r2, #0
 8008168:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800816c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008170:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008174:	4642      	mov	r2, r8
 8008176:	464b      	mov	r3, r9
 8008178:	1891      	adds	r1, r2, r2
 800817a:	64b9      	str	r1, [r7, #72]	; 0x48
 800817c:	415b      	adcs	r3, r3
 800817e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008180:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008184:	4641      	mov	r1, r8
 8008186:	eb12 0a01 	adds.w	sl, r2, r1
 800818a:	4649      	mov	r1, r9
 800818c:	eb43 0b01 	adc.w	fp, r3, r1
 8008190:	f04f 0200 	mov.w	r2, #0
 8008194:	f04f 0300 	mov.w	r3, #0
 8008198:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800819c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80081a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80081a4:	4692      	mov	sl, r2
 80081a6:	469b      	mov	fp, r3
 80081a8:	4643      	mov	r3, r8
 80081aa:	eb1a 0303 	adds.w	r3, sl, r3
 80081ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80081b2:	464b      	mov	r3, r9
 80081b4:	eb4b 0303 	adc.w	r3, fp, r3
 80081b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80081bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80081c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80081cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80081d0:	460b      	mov	r3, r1
 80081d2:	18db      	adds	r3, r3, r3
 80081d4:	643b      	str	r3, [r7, #64]	; 0x40
 80081d6:	4613      	mov	r3, r2
 80081d8:	eb42 0303 	adc.w	r3, r2, r3
 80081dc:	647b      	str	r3, [r7, #68]	; 0x44
 80081de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80081e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80081e6:	f7f8 f85b 	bl	80002a0 <__aeabi_uldivmod>
 80081ea:	4602      	mov	r2, r0
 80081ec:	460b      	mov	r3, r1
 80081ee:	4611      	mov	r1, r2
 80081f0:	4b3b      	ldr	r3, [pc, #236]	; (80082e0 <UART_SetConfig+0x2d4>)
 80081f2:	fba3 2301 	umull	r2, r3, r3, r1
 80081f6:	095b      	lsrs	r3, r3, #5
 80081f8:	2264      	movs	r2, #100	; 0x64
 80081fa:	fb02 f303 	mul.w	r3, r2, r3
 80081fe:	1acb      	subs	r3, r1, r3
 8008200:	00db      	lsls	r3, r3, #3
 8008202:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008206:	4b36      	ldr	r3, [pc, #216]	; (80082e0 <UART_SetConfig+0x2d4>)
 8008208:	fba3 2302 	umull	r2, r3, r3, r2
 800820c:	095b      	lsrs	r3, r3, #5
 800820e:	005b      	lsls	r3, r3, #1
 8008210:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008214:	441c      	add	r4, r3
 8008216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800821a:	2200      	movs	r2, #0
 800821c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008220:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008224:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008228:	4642      	mov	r2, r8
 800822a:	464b      	mov	r3, r9
 800822c:	1891      	adds	r1, r2, r2
 800822e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008230:	415b      	adcs	r3, r3
 8008232:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008234:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008238:	4641      	mov	r1, r8
 800823a:	1851      	adds	r1, r2, r1
 800823c:	6339      	str	r1, [r7, #48]	; 0x30
 800823e:	4649      	mov	r1, r9
 8008240:	414b      	adcs	r3, r1
 8008242:	637b      	str	r3, [r7, #52]	; 0x34
 8008244:	f04f 0200 	mov.w	r2, #0
 8008248:	f04f 0300 	mov.w	r3, #0
 800824c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008250:	4659      	mov	r1, fp
 8008252:	00cb      	lsls	r3, r1, #3
 8008254:	4651      	mov	r1, sl
 8008256:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800825a:	4651      	mov	r1, sl
 800825c:	00ca      	lsls	r2, r1, #3
 800825e:	4610      	mov	r0, r2
 8008260:	4619      	mov	r1, r3
 8008262:	4603      	mov	r3, r0
 8008264:	4642      	mov	r2, r8
 8008266:	189b      	adds	r3, r3, r2
 8008268:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800826c:	464b      	mov	r3, r9
 800826e:	460a      	mov	r2, r1
 8008270:	eb42 0303 	adc.w	r3, r2, r3
 8008274:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008284:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008288:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800828c:	460b      	mov	r3, r1
 800828e:	18db      	adds	r3, r3, r3
 8008290:	62bb      	str	r3, [r7, #40]	; 0x28
 8008292:	4613      	mov	r3, r2
 8008294:	eb42 0303 	adc.w	r3, r2, r3
 8008298:	62fb      	str	r3, [r7, #44]	; 0x2c
 800829a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800829e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80082a2:	f7f7 fffd 	bl	80002a0 <__aeabi_uldivmod>
 80082a6:	4602      	mov	r2, r0
 80082a8:	460b      	mov	r3, r1
 80082aa:	4b0d      	ldr	r3, [pc, #52]	; (80082e0 <UART_SetConfig+0x2d4>)
 80082ac:	fba3 1302 	umull	r1, r3, r3, r2
 80082b0:	095b      	lsrs	r3, r3, #5
 80082b2:	2164      	movs	r1, #100	; 0x64
 80082b4:	fb01 f303 	mul.w	r3, r1, r3
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	00db      	lsls	r3, r3, #3
 80082bc:	3332      	adds	r3, #50	; 0x32
 80082be:	4a08      	ldr	r2, [pc, #32]	; (80082e0 <UART_SetConfig+0x2d4>)
 80082c0:	fba2 2303 	umull	r2, r3, r2, r3
 80082c4:	095b      	lsrs	r3, r3, #5
 80082c6:	f003 0207 	and.w	r2, r3, #7
 80082ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4422      	add	r2, r4
 80082d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80082d4:	e105      	b.n	80084e2 <UART_SetConfig+0x4d6>
 80082d6:	bf00      	nop
 80082d8:	40011000 	.word	0x40011000
 80082dc:	40011400 	.word	0x40011400
 80082e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80082e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082e8:	2200      	movs	r2, #0
 80082ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80082ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80082f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80082f6:	4642      	mov	r2, r8
 80082f8:	464b      	mov	r3, r9
 80082fa:	1891      	adds	r1, r2, r2
 80082fc:	6239      	str	r1, [r7, #32]
 80082fe:	415b      	adcs	r3, r3
 8008300:	627b      	str	r3, [r7, #36]	; 0x24
 8008302:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008306:	4641      	mov	r1, r8
 8008308:	1854      	adds	r4, r2, r1
 800830a:	4649      	mov	r1, r9
 800830c:	eb43 0501 	adc.w	r5, r3, r1
 8008310:	f04f 0200 	mov.w	r2, #0
 8008314:	f04f 0300 	mov.w	r3, #0
 8008318:	00eb      	lsls	r3, r5, #3
 800831a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800831e:	00e2      	lsls	r2, r4, #3
 8008320:	4614      	mov	r4, r2
 8008322:	461d      	mov	r5, r3
 8008324:	4643      	mov	r3, r8
 8008326:	18e3      	adds	r3, r4, r3
 8008328:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800832c:	464b      	mov	r3, r9
 800832e:	eb45 0303 	adc.w	r3, r5, r3
 8008332:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008342:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008346:	f04f 0200 	mov.w	r2, #0
 800834a:	f04f 0300 	mov.w	r3, #0
 800834e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008352:	4629      	mov	r1, r5
 8008354:	008b      	lsls	r3, r1, #2
 8008356:	4621      	mov	r1, r4
 8008358:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800835c:	4621      	mov	r1, r4
 800835e:	008a      	lsls	r2, r1, #2
 8008360:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008364:	f7f7 ff9c 	bl	80002a0 <__aeabi_uldivmod>
 8008368:	4602      	mov	r2, r0
 800836a:	460b      	mov	r3, r1
 800836c:	4b60      	ldr	r3, [pc, #384]	; (80084f0 <UART_SetConfig+0x4e4>)
 800836e:	fba3 2302 	umull	r2, r3, r3, r2
 8008372:	095b      	lsrs	r3, r3, #5
 8008374:	011c      	lsls	r4, r3, #4
 8008376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800837a:	2200      	movs	r2, #0
 800837c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008380:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008384:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008388:	4642      	mov	r2, r8
 800838a:	464b      	mov	r3, r9
 800838c:	1891      	adds	r1, r2, r2
 800838e:	61b9      	str	r1, [r7, #24]
 8008390:	415b      	adcs	r3, r3
 8008392:	61fb      	str	r3, [r7, #28]
 8008394:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008398:	4641      	mov	r1, r8
 800839a:	1851      	adds	r1, r2, r1
 800839c:	6139      	str	r1, [r7, #16]
 800839e:	4649      	mov	r1, r9
 80083a0:	414b      	adcs	r3, r1
 80083a2:	617b      	str	r3, [r7, #20]
 80083a4:	f04f 0200 	mov.w	r2, #0
 80083a8:	f04f 0300 	mov.w	r3, #0
 80083ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80083b0:	4659      	mov	r1, fp
 80083b2:	00cb      	lsls	r3, r1, #3
 80083b4:	4651      	mov	r1, sl
 80083b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083ba:	4651      	mov	r1, sl
 80083bc:	00ca      	lsls	r2, r1, #3
 80083be:	4610      	mov	r0, r2
 80083c0:	4619      	mov	r1, r3
 80083c2:	4603      	mov	r3, r0
 80083c4:	4642      	mov	r2, r8
 80083c6:	189b      	adds	r3, r3, r2
 80083c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80083cc:	464b      	mov	r3, r9
 80083ce:	460a      	mov	r2, r1
 80083d0:	eb42 0303 	adc.w	r3, r2, r3
 80083d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80083d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80083e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80083e4:	f04f 0200 	mov.w	r2, #0
 80083e8:	f04f 0300 	mov.w	r3, #0
 80083ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80083f0:	4649      	mov	r1, r9
 80083f2:	008b      	lsls	r3, r1, #2
 80083f4:	4641      	mov	r1, r8
 80083f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083fa:	4641      	mov	r1, r8
 80083fc:	008a      	lsls	r2, r1, #2
 80083fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008402:	f7f7 ff4d 	bl	80002a0 <__aeabi_uldivmod>
 8008406:	4602      	mov	r2, r0
 8008408:	460b      	mov	r3, r1
 800840a:	4b39      	ldr	r3, [pc, #228]	; (80084f0 <UART_SetConfig+0x4e4>)
 800840c:	fba3 1302 	umull	r1, r3, r3, r2
 8008410:	095b      	lsrs	r3, r3, #5
 8008412:	2164      	movs	r1, #100	; 0x64
 8008414:	fb01 f303 	mul.w	r3, r1, r3
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	011b      	lsls	r3, r3, #4
 800841c:	3332      	adds	r3, #50	; 0x32
 800841e:	4a34      	ldr	r2, [pc, #208]	; (80084f0 <UART_SetConfig+0x4e4>)
 8008420:	fba2 2303 	umull	r2, r3, r2, r3
 8008424:	095b      	lsrs	r3, r3, #5
 8008426:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800842a:	441c      	add	r4, r3
 800842c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008430:	2200      	movs	r2, #0
 8008432:	673b      	str	r3, [r7, #112]	; 0x70
 8008434:	677a      	str	r2, [r7, #116]	; 0x74
 8008436:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800843a:	4642      	mov	r2, r8
 800843c:	464b      	mov	r3, r9
 800843e:	1891      	adds	r1, r2, r2
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	415b      	adcs	r3, r3
 8008444:	60fb      	str	r3, [r7, #12]
 8008446:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800844a:	4641      	mov	r1, r8
 800844c:	1851      	adds	r1, r2, r1
 800844e:	6039      	str	r1, [r7, #0]
 8008450:	4649      	mov	r1, r9
 8008452:	414b      	adcs	r3, r1
 8008454:	607b      	str	r3, [r7, #4]
 8008456:	f04f 0200 	mov.w	r2, #0
 800845a:	f04f 0300 	mov.w	r3, #0
 800845e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008462:	4659      	mov	r1, fp
 8008464:	00cb      	lsls	r3, r1, #3
 8008466:	4651      	mov	r1, sl
 8008468:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800846c:	4651      	mov	r1, sl
 800846e:	00ca      	lsls	r2, r1, #3
 8008470:	4610      	mov	r0, r2
 8008472:	4619      	mov	r1, r3
 8008474:	4603      	mov	r3, r0
 8008476:	4642      	mov	r2, r8
 8008478:	189b      	adds	r3, r3, r2
 800847a:	66bb      	str	r3, [r7, #104]	; 0x68
 800847c:	464b      	mov	r3, r9
 800847e:	460a      	mov	r2, r1
 8008480:	eb42 0303 	adc.w	r3, r2, r3
 8008484:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	663b      	str	r3, [r7, #96]	; 0x60
 8008490:	667a      	str	r2, [r7, #100]	; 0x64
 8008492:	f04f 0200 	mov.w	r2, #0
 8008496:	f04f 0300 	mov.w	r3, #0
 800849a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800849e:	4649      	mov	r1, r9
 80084a0:	008b      	lsls	r3, r1, #2
 80084a2:	4641      	mov	r1, r8
 80084a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084a8:	4641      	mov	r1, r8
 80084aa:	008a      	lsls	r2, r1, #2
 80084ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80084b0:	f7f7 fef6 	bl	80002a0 <__aeabi_uldivmod>
 80084b4:	4602      	mov	r2, r0
 80084b6:	460b      	mov	r3, r1
 80084b8:	4b0d      	ldr	r3, [pc, #52]	; (80084f0 <UART_SetConfig+0x4e4>)
 80084ba:	fba3 1302 	umull	r1, r3, r3, r2
 80084be:	095b      	lsrs	r3, r3, #5
 80084c0:	2164      	movs	r1, #100	; 0x64
 80084c2:	fb01 f303 	mul.w	r3, r1, r3
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	011b      	lsls	r3, r3, #4
 80084ca:	3332      	adds	r3, #50	; 0x32
 80084cc:	4a08      	ldr	r2, [pc, #32]	; (80084f0 <UART_SetConfig+0x4e4>)
 80084ce:	fba2 2303 	umull	r2, r3, r2, r3
 80084d2:	095b      	lsrs	r3, r3, #5
 80084d4:	f003 020f 	and.w	r2, r3, #15
 80084d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4422      	add	r2, r4
 80084e0:	609a      	str	r2, [r3, #8]
}
 80084e2:	bf00      	nop
 80084e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80084e8:	46bd      	mov	sp, r7
 80084ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084ee:	bf00      	nop
 80084f0:	51eb851f 	.word	0x51eb851f

080084f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80084f4:	b084      	sub	sp, #16
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b084      	sub	sp, #16
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
 80084fe:	f107 001c 	add.w	r0, r7, #28
 8008502:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008508:	2b01      	cmp	r3, #1
 800850a:	d122      	bne.n	8008552 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008510:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008536:	2b01      	cmp	r3, #1
 8008538:	d105      	bne.n	8008546 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 f9c0 	bl	80088cc <USB_CoreReset>
 800854c:	4603      	mov	r3, r0
 800854e:	73fb      	strb	r3, [r7, #15]
 8008550:	e01a      	b.n	8008588 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 f9b4 	bl	80088cc <USB_CoreReset>
 8008564:	4603      	mov	r3, r0
 8008566:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800856a:	2b00      	cmp	r3, #0
 800856c:	d106      	bne.n	800857c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008572:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	639a      	str	r2, [r3, #56]	; 0x38
 800857a:	e005      	b.n	8008588 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008580:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858a:	2b01      	cmp	r3, #1
 800858c:	d10b      	bne.n	80085a6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	f043 0206 	orr.w	r2, r3, #6
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	f043 0220 	orr.w	r2, r3, #32
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80085a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085b2:	b004      	add	sp, #16
 80085b4:	4770      	bx	lr

080085b6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80085b6:	b480      	push	{r7}
 80085b8:	b083      	sub	sp, #12
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	f043 0201 	orr.w	r2, r3, #1
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	f023 0201 	bic.w	r2, r3, #1
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	370c      	adds	r7, #12
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b084      	sub	sp, #16
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
 8008602:	460b      	mov	r3, r1
 8008604:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008606:	2300      	movs	r3, #0
 8008608:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008616:	78fb      	ldrb	r3, [r7, #3]
 8008618:	2b01      	cmp	r3, #1
 800861a:	d115      	bne.n	8008648 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008628:	2001      	movs	r0, #1
 800862a:	f7fa f997 	bl	800295c <HAL_Delay>
      ms++;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	3301      	adds	r3, #1
 8008632:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 f93a 	bl	80088ae <USB_GetMode>
 800863a:	4603      	mov	r3, r0
 800863c:	2b01      	cmp	r3, #1
 800863e:	d01e      	beq.n	800867e <USB_SetCurrentMode+0x84>
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2b31      	cmp	r3, #49	; 0x31
 8008644:	d9f0      	bls.n	8008628 <USB_SetCurrentMode+0x2e>
 8008646:	e01a      	b.n	800867e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008648:	78fb      	ldrb	r3, [r7, #3]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d115      	bne.n	800867a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800865a:	2001      	movs	r0, #1
 800865c:	f7fa f97e 	bl	800295c <HAL_Delay>
      ms++;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	3301      	adds	r3, #1
 8008664:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 f921 	bl	80088ae <USB_GetMode>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d005      	beq.n	800867e <USB_SetCurrentMode+0x84>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2b31      	cmp	r3, #49	; 0x31
 8008676:	d9f0      	bls.n	800865a <USB_SetCurrentMode+0x60>
 8008678:	e001      	b.n	800867e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800867a:	2301      	movs	r3, #1
 800867c:	e005      	b.n	800868a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2b32      	cmp	r3, #50	; 0x32
 8008682:	d101      	bne.n	8008688 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	e000      	b.n	800868a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
	...

08008694 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008694:	b480      	push	{r7}
 8008696:	b085      	sub	sp, #20
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800869e:	2300      	movs	r3, #0
 80086a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	3301      	adds	r3, #1
 80086a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	4a13      	ldr	r2, [pc, #76]	; (80086f8 <USB_FlushTxFifo+0x64>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d901      	bls.n	80086b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80086b0:	2303      	movs	r3, #3
 80086b2:	e01b      	b.n	80086ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	691b      	ldr	r3, [r3, #16]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	daf2      	bge.n	80086a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80086bc:	2300      	movs	r3, #0
 80086be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	019b      	lsls	r3, r3, #6
 80086c4:	f043 0220 	orr.w	r2, r3, #32
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	3301      	adds	r3, #1
 80086d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	4a08      	ldr	r2, [pc, #32]	; (80086f8 <USB_FlushTxFifo+0x64>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d901      	bls.n	80086de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80086da:	2303      	movs	r3, #3
 80086dc:	e006      	b.n	80086ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	f003 0320 	and.w	r3, r3, #32
 80086e6:	2b20      	cmp	r3, #32
 80086e8:	d0f0      	beq.n	80086cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3714      	adds	r7, #20
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr
 80086f8:	00030d40 	.word	0x00030d40

080086fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b085      	sub	sp, #20
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008704:	2300      	movs	r3, #0
 8008706:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	3301      	adds	r3, #1
 800870c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	4a11      	ldr	r2, [pc, #68]	; (8008758 <USB_FlushRxFifo+0x5c>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d901      	bls.n	800871a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008716:	2303      	movs	r3, #3
 8008718:	e018      	b.n	800874c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	2b00      	cmp	r3, #0
 8008720:	daf2      	bge.n	8008708 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008722:	2300      	movs	r3, #0
 8008724:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2210      	movs	r2, #16
 800872a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	3301      	adds	r3, #1
 8008730:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	4a08      	ldr	r2, [pc, #32]	; (8008758 <USB_FlushRxFifo+0x5c>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d901      	bls.n	800873e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800873a:	2303      	movs	r3, #3
 800873c:	e006      	b.n	800874c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	f003 0310 	and.w	r3, r3, #16
 8008746:	2b10      	cmp	r3, #16
 8008748:	d0f0      	beq.n	800872c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3714      	adds	r7, #20
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr
 8008758:	00030d40 	.word	0x00030d40

0800875c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800875c:	b480      	push	{r7}
 800875e:	b089      	sub	sp, #36	; 0x24
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	4611      	mov	r1, r2
 8008768:	461a      	mov	r2, r3
 800876a:	460b      	mov	r3, r1
 800876c:	71fb      	strb	r3, [r7, #7]
 800876e:	4613      	mov	r3, r2
 8008770:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800877a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800877e:	2b00      	cmp	r3, #0
 8008780:	d123      	bne.n	80087ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008782:	88bb      	ldrh	r3, [r7, #4]
 8008784:	3303      	adds	r3, #3
 8008786:	089b      	lsrs	r3, r3, #2
 8008788:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800878a:	2300      	movs	r3, #0
 800878c:	61bb      	str	r3, [r7, #24]
 800878e:	e018      	b.n	80087c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008790:	79fb      	ldrb	r3, [r7, #7]
 8008792:	031a      	lsls	r2, r3, #12
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	4413      	add	r3, r2
 8008798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800879c:	461a      	mov	r2, r3
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	3301      	adds	r3, #1
 80087a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	3301      	adds	r3, #1
 80087ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	3301      	adds	r3, #1
 80087b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	3301      	adds	r3, #1
 80087ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	3301      	adds	r3, #1
 80087c0:	61bb      	str	r3, [r7, #24]
 80087c2:	69ba      	ldr	r2, [r7, #24]
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d3e2      	bcc.n	8008790 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80087ca:	2300      	movs	r3, #0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3724      	adds	r7, #36	; 0x24
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80087d8:	b480      	push	{r7}
 80087da:	b08b      	sub	sp, #44	; 0x2c
 80087dc:	af00      	add	r7, sp, #0
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	4613      	mov	r3, r2
 80087e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80087ee:	88fb      	ldrh	r3, [r7, #6]
 80087f0:	089b      	lsrs	r3, r3, #2
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80087f6:	88fb      	ldrh	r3, [r7, #6]
 80087f8:	f003 0303 	and.w	r3, r3, #3
 80087fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80087fe:	2300      	movs	r3, #0
 8008800:	623b      	str	r3, [r7, #32]
 8008802:	e014      	b.n	800882e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008812:	3301      	adds	r3, #1
 8008814:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008818:	3301      	adds	r3, #1
 800881a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800881c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881e:	3301      	adds	r3, #1
 8008820:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008824:	3301      	adds	r3, #1
 8008826:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008828:	6a3b      	ldr	r3, [r7, #32]
 800882a:	3301      	adds	r3, #1
 800882c:	623b      	str	r3, [r7, #32]
 800882e:	6a3a      	ldr	r2, [r7, #32]
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	429a      	cmp	r2, r3
 8008834:	d3e6      	bcc.n	8008804 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008836:	8bfb      	ldrh	r3, [r7, #30]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d01e      	beq.n	800887a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800883c:	2300      	movs	r3, #0
 800883e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008846:	461a      	mov	r2, r3
 8008848:	f107 0310 	add.w	r3, r7, #16
 800884c:	6812      	ldr	r2, [r2, #0]
 800884e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008850:	693a      	ldr	r2, [r7, #16]
 8008852:	6a3b      	ldr	r3, [r7, #32]
 8008854:	b2db      	uxtb	r3, r3
 8008856:	00db      	lsls	r3, r3, #3
 8008858:	fa22 f303 	lsr.w	r3, r2, r3
 800885c:	b2da      	uxtb	r2, r3
 800885e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008860:	701a      	strb	r2, [r3, #0]
      i++;
 8008862:	6a3b      	ldr	r3, [r7, #32]
 8008864:	3301      	adds	r3, #1
 8008866:	623b      	str	r3, [r7, #32]
      pDest++;
 8008868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886a:	3301      	adds	r3, #1
 800886c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800886e:	8bfb      	ldrh	r3, [r7, #30]
 8008870:	3b01      	subs	r3, #1
 8008872:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008874:	8bfb      	ldrh	r3, [r7, #30]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1ea      	bne.n	8008850 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800887a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800887c:	4618      	mov	r0, r3
 800887e:	372c      	adds	r7, #44	; 0x2c
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	695b      	ldr	r3, [r3, #20]
 8008894:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	699b      	ldr	r3, [r3, #24]
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	4013      	ands	r3, r2
 800889e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80088a0:	68fb      	ldr	r3, [r7, #12]
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3714      	adds	r7, #20
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr

080088ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80088ae:	b480      	push	{r7}
 80088b0:	b083      	sub	sp, #12
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	695b      	ldr	r3, [r3, #20]
 80088ba:	f003 0301 	and.w	r3, r3, #1
}
 80088be:	4618      	mov	r0, r3
 80088c0:	370c      	adds	r7, #12
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
	...

080088cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088d4:	2300      	movs	r3, #0
 80088d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	3301      	adds	r3, #1
 80088dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	4a13      	ldr	r2, [pc, #76]	; (8008930 <USB_CoreReset+0x64>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d901      	bls.n	80088ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80088e6:	2303      	movs	r3, #3
 80088e8:	e01b      	b.n	8008922 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	daf2      	bge.n	80088d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80088f2:	2300      	movs	r3, #0
 80088f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	691b      	ldr	r3, [r3, #16]
 80088fa:	f043 0201 	orr.w	r2, r3, #1
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	3301      	adds	r3, #1
 8008906:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	4a09      	ldr	r2, [pc, #36]	; (8008930 <USB_CoreReset+0x64>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d901      	bls.n	8008914 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008910:	2303      	movs	r3, #3
 8008912:	e006      	b.n	8008922 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	f003 0301 	and.w	r3, r3, #1
 800891c:	2b01      	cmp	r3, #1
 800891e:	d0f0      	beq.n	8008902 <USB_CoreReset+0x36>

  return HAL_OK;
 8008920:	2300      	movs	r3, #0
}
 8008922:	4618      	mov	r0, r3
 8008924:	3714      	adds	r7, #20
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr
 800892e:	bf00      	nop
 8008930:	00030d40 	.word	0x00030d40

08008934 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008934:	b084      	sub	sp, #16
 8008936:	b580      	push	{r7, lr}
 8008938:	b086      	sub	sp, #24
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
 800893e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008942:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008946:	2300      	movs	r3, #0
 8008948:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008954:	461a      	mov	r2, r3
 8008956:	2300      	movs	r3, #0
 8008958:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800896a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008976:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008986:	2b00      	cmp	r3, #0
 8008988:	d018      	beq.n	80089bc <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800898a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800898c:	2b01      	cmp	r3, #1
 800898e:	d10a      	bne.n	80089a6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800899e:	f043 0304 	orr.w	r3, r3, #4
 80089a2:	6013      	str	r3, [r2, #0]
 80089a4:	e014      	b.n	80089d0 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80089b4:	f023 0304 	bic.w	r3, r3, #4
 80089b8:	6013      	str	r3, [r2, #0]
 80089ba:	e009      	b.n	80089d0 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68fa      	ldr	r2, [r7, #12]
 80089c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80089ca:	f023 0304 	bic.w	r3, r3, #4
 80089ce:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80089d0:	2110      	movs	r1, #16
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f7ff fe5e 	bl	8008694 <USB_FlushTxFifo>
 80089d8:	4603      	mov	r3, r0
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d001      	beq.n	80089e2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f7ff fe8a 	bl	80086fc <USB_FlushRxFifo>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d001      	beq.n	80089f2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80089f2:	2300      	movs	r3, #0
 80089f4:	613b      	str	r3, [r7, #16]
 80089f6:	e015      	b.n	8008a24 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	015a      	lsls	r2, r3, #5
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	4413      	add	r3, r2
 8008a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a04:	461a      	mov	r2, r3
 8008a06:	f04f 33ff 	mov.w	r3, #4294967295
 8008a0a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	015a      	lsls	r2, r3, #5
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	4413      	add	r3, r2
 8008a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a18:	461a      	mov	r2, r3
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	3301      	adds	r3, #1
 8008a22:	613b      	str	r3, [r7, #16]
 8008a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a26:	693a      	ldr	r2, [r7, #16]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d3e5      	bcc.n	80089f8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f04f 32ff 	mov.w	r2, #4294967295
 8008a38:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00b      	beq.n	8008a5e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a4c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a13      	ldr	r2, [pc, #76]	; (8008aa0 <USB_HostInit+0x16c>)
 8008a52:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4a13      	ldr	r2, [pc, #76]	; (8008aa4 <USB_HostInit+0x170>)
 8008a58:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008a5c:	e009      	b.n	8008a72 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2280      	movs	r2, #128	; 0x80
 8008a62:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4a10      	ldr	r2, [pc, #64]	; (8008aa8 <USB_HostInit+0x174>)
 8008a68:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4a0f      	ldr	r2, [pc, #60]	; (8008aac <USB_HostInit+0x178>)
 8008a6e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d105      	bne.n	8008a84 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	699b      	ldr	r3, [r3, #24]
 8008a7c:	f043 0210 	orr.w	r2, r3, #16
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	699a      	ldr	r2, [r3, #24]
 8008a88:	4b09      	ldr	r3, [pc, #36]	; (8008ab0 <USB_HostInit+0x17c>)
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3718      	adds	r7, #24
 8008a96:	46bd      	mov	sp, r7
 8008a98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a9c:	b004      	add	sp, #16
 8008a9e:	4770      	bx	lr
 8008aa0:	01000200 	.word	0x01000200
 8008aa4:	00e00300 	.word	0x00e00300
 8008aa8:	00600080 	.word	0x00600080
 8008aac:	004000e0 	.word	0x004000e0
 8008ab0:	a3200008 	.word	0xa3200008

08008ab4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	460b      	mov	r3, r1
 8008abe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ad2:	f023 0303 	bic.w	r3, r3, #3
 8008ad6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	78fb      	ldrb	r3, [r7, #3]
 8008ae2:	f003 0303 	and.w	r3, r3, #3
 8008ae6:	68f9      	ldr	r1, [r7, #12]
 8008ae8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008aec:	4313      	orrs	r3, r2
 8008aee:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008af0:	78fb      	ldrb	r3, [r7, #3]
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d107      	bne.n	8008b06 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008afc:	461a      	mov	r2, r3
 8008afe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008b02:	6053      	str	r3, [r2, #4]
 8008b04:	e009      	b.n	8008b1a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008b06:	78fb      	ldrb	r3, [r7, #3]
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d106      	bne.n	8008b1a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b12:	461a      	mov	r2, r3
 8008b14:	f241 7370 	movw	r3, #6000	; 0x1770
 8008b18:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3714      	adds	r7, #20
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008b34:	2300      	movs	r3, #0
 8008b36:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008b48:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	68fa      	ldr	r2, [r7, #12]
 8008b4e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b56:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008b58:	2064      	movs	r0, #100	; 0x64
 8008b5a:	f7f9 feff 	bl	800295c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008b66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b6a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008b6c:	200a      	movs	r0, #10
 8008b6e:	f7f9 fef5 	bl	800295c <HAL_Delay>

  return HAL_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b085      	sub	sp, #20
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	460b      	mov	r3, r1
 8008b86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008ba0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d109      	bne.n	8008bc0 <USB_DriveVbus+0x44>
 8008bac:	78fb      	ldrb	r3, [r7, #3]
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d106      	bne.n	8008bc0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008bba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008bbe:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bca:	d109      	bne.n	8008be0 <USB_DriveVbus+0x64>
 8008bcc:	78fb      	ldrb	r3, [r7, #3]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d106      	bne.n	8008be0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008bda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bde:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008be0:	2300      	movs	r3, #0
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3714      	adds	r7, #20
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr

08008bee <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008bee:	b480      	push	{r7}
 8008bf0:	b085      	sub	sp, #20
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	0c5b      	lsrs	r3, r3, #17
 8008c0c:	f003 0303 	and.w	r3, r3, #3
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3714      	adds	r7, #20
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	b29b      	uxth	r3, r3
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3714      	adds	r7, #20
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr
	...

08008c40 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b088      	sub	sp, #32
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	4608      	mov	r0, r1
 8008c4a:	4611      	mov	r1, r2
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	4603      	mov	r3, r0
 8008c50:	70fb      	strb	r3, [r7, #3]
 8008c52:	460b      	mov	r3, r1
 8008c54:	70bb      	strb	r3, [r7, #2]
 8008c56:	4613      	mov	r3, r2
 8008c58:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008c62:	78fb      	ldrb	r3, [r7, #3]
 8008c64:	015a      	lsls	r2, r3, #5
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	4413      	add	r3, r2
 8008c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c6e:	461a      	mov	r2, r3
 8008c70:	f04f 33ff 	mov.w	r3, #4294967295
 8008c74:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008c76:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008c7a:	2b03      	cmp	r3, #3
 8008c7c:	d87e      	bhi.n	8008d7c <USB_HC_Init+0x13c>
 8008c7e:	a201      	add	r2, pc, #4	; (adr r2, 8008c84 <USB_HC_Init+0x44>)
 8008c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c84:	08008c95 	.word	0x08008c95
 8008c88:	08008d3f 	.word	0x08008d3f
 8008c8c:	08008c95 	.word	0x08008c95
 8008c90:	08008d01 	.word	0x08008d01
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008c94:	78fb      	ldrb	r3, [r7, #3]
 8008c96:	015a      	lsls	r2, r3, #5
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	f240 439d 	movw	r3, #1181	; 0x49d
 8008ca6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008ca8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	da10      	bge.n	8008cd2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008cb0:	78fb      	ldrb	r3, [r7, #3]
 8008cb2:	015a      	lsls	r2, r3, #5
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	78fa      	ldrb	r2, [r7, #3]
 8008cc0:	0151      	lsls	r1, r2, #5
 8008cc2:	693a      	ldr	r2, [r7, #16]
 8008cc4:	440a      	add	r2, r1
 8008cc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cce:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008cd0:	e057      	b.n	8008d82 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d051      	beq.n	8008d82 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008cde:	78fb      	ldrb	r3, [r7, #3]
 8008ce0:	015a      	lsls	r2, r3, #5
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	78fa      	ldrb	r2, [r7, #3]
 8008cee:	0151      	lsls	r1, r2, #5
 8008cf0:	693a      	ldr	r2, [r7, #16]
 8008cf2:	440a      	add	r2, r1
 8008cf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cf8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008cfc:	60d3      	str	r3, [r2, #12]
      break;
 8008cfe:	e040      	b.n	8008d82 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008d00:	78fb      	ldrb	r3, [r7, #3]
 8008d02:	015a      	lsls	r2, r3, #5
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	4413      	add	r3, r2
 8008d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	f240 639d 	movw	r3, #1693	; 0x69d
 8008d12:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008d14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	da34      	bge.n	8008d86 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008d1c:	78fb      	ldrb	r3, [r7, #3]
 8008d1e:	015a      	lsls	r2, r3, #5
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	4413      	add	r3, r2
 8008d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	78fa      	ldrb	r2, [r7, #3]
 8008d2c:	0151      	lsls	r1, r2, #5
 8008d2e:	693a      	ldr	r2, [r7, #16]
 8008d30:	440a      	add	r2, r1
 8008d32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d3a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008d3c:	e023      	b.n	8008d86 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008d3e:	78fb      	ldrb	r3, [r7, #3]
 8008d40:	015a      	lsls	r2, r3, #5
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	4413      	add	r3, r2
 8008d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	f240 2325 	movw	r3, #549	; 0x225
 8008d50:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008d52:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	da17      	bge.n	8008d8a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008d5a:	78fb      	ldrb	r3, [r7, #3]
 8008d5c:	015a      	lsls	r2, r3, #5
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	4413      	add	r3, r2
 8008d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	78fa      	ldrb	r2, [r7, #3]
 8008d6a:	0151      	lsls	r1, r2, #5
 8008d6c:	693a      	ldr	r2, [r7, #16]
 8008d6e:	440a      	add	r2, r1
 8008d70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d74:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008d78:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008d7a:	e006      	b.n	8008d8a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	77fb      	strb	r3, [r7, #31]
      break;
 8008d80:	e004      	b.n	8008d8c <USB_HC_Init+0x14c>
      break;
 8008d82:	bf00      	nop
 8008d84:	e002      	b.n	8008d8c <USB_HC_Init+0x14c>
      break;
 8008d86:	bf00      	nop
 8008d88:	e000      	b.n	8008d8c <USB_HC_Init+0x14c>
      break;
 8008d8a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008d8c:	78fb      	ldrb	r3, [r7, #3]
 8008d8e:	015a      	lsls	r2, r3, #5
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	4413      	add	r3, r2
 8008d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	78fa      	ldrb	r2, [r7, #3]
 8008d9c:	0151      	lsls	r1, r2, #5
 8008d9e:	693a      	ldr	r2, [r7, #16]
 8008da0:	440a      	add	r2, r1
 8008da2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008da6:	f043 0302 	orr.w	r3, r3, #2
 8008daa:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008db2:	699a      	ldr	r2, [r3, #24]
 8008db4:	78fb      	ldrb	r3, [r7, #3]
 8008db6:	f003 030f 	and.w	r3, r3, #15
 8008dba:	2101      	movs	r1, #1
 8008dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8008dc0:	6939      	ldr	r1, [r7, #16]
 8008dc2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	699b      	ldr	r3, [r3, #24]
 8008dce:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008dd6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	da03      	bge.n	8008de6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008de2:	61bb      	str	r3, [r7, #24]
 8008de4:	e001      	b.n	8008dea <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8008de6:	2300      	movs	r3, #0
 8008de8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f7ff feff 	bl	8008bee <USB_GetHostSpeed>
 8008df0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008df2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008df6:	2b02      	cmp	r3, #2
 8008df8:	d106      	bne.n	8008e08 <USB_HC_Init+0x1c8>
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2b02      	cmp	r3, #2
 8008dfe:	d003      	beq.n	8008e08 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008e00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008e04:	617b      	str	r3, [r7, #20]
 8008e06:	e001      	b.n	8008e0c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008e0c:	787b      	ldrb	r3, [r7, #1]
 8008e0e:	059b      	lsls	r3, r3, #22
 8008e10:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008e14:	78bb      	ldrb	r3, [r7, #2]
 8008e16:	02db      	lsls	r3, r3, #11
 8008e18:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008e1c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008e1e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008e22:	049b      	lsls	r3, r3, #18
 8008e24:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008e28:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008e2a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008e2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008e30:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008e36:	78fb      	ldrb	r3, [r7, #3]
 8008e38:	0159      	lsls	r1, r3, #5
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	440b      	add	r3, r1
 8008e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e42:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008e48:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008e4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008e4e:	2b03      	cmp	r3, #3
 8008e50:	d003      	beq.n	8008e5a <USB_HC_Init+0x21a>
 8008e52:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d10f      	bne.n	8008e7a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008e5a:	78fb      	ldrb	r3, [r7, #3]
 8008e5c:	015a      	lsls	r2, r3, #5
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	4413      	add	r3, r2
 8008e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	78fa      	ldrb	r2, [r7, #3]
 8008e6a:	0151      	lsls	r1, r2, #5
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	440a      	add	r2, r1
 8008e70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e78:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008e7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3720      	adds	r7, #32
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b08c      	sub	sp, #48	; 0x30
 8008e88:	af02      	add	r7, sp, #8
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	4613      	mov	r3, r2
 8008e90:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	785b      	ldrb	r3, [r3, #1]
 8008e9a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008e9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ea0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d02d      	beq.n	8008f0a <USB_HC_StartXfer+0x86>
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	791b      	ldrb	r3, [r3, #4]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d129      	bne.n	8008f0a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008eb6:	79fb      	ldrb	r3, [r7, #7]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d117      	bne.n	8008eec <USB_HC_StartXfer+0x68>
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	79db      	ldrb	r3, [r3, #7]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d003      	beq.n	8008ecc <USB_HC_StartXfer+0x48>
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	79db      	ldrb	r3, [r3, #7]
 8008ec8:	2b02      	cmp	r3, #2
 8008eca:	d10f      	bne.n	8008eec <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	015a      	lsls	r2, r3, #5
 8008ed0:	6a3b      	ldr	r3, [r7, #32]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	69fa      	ldr	r2, [r7, #28]
 8008edc:	0151      	lsls	r1, r2, #5
 8008ede:	6a3a      	ldr	r2, [r7, #32]
 8008ee0:	440a      	add	r2, r1
 8008ee2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eea:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008eec:	79fb      	ldrb	r3, [r7, #7]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d10b      	bne.n	8008f0a <USB_HC_StartXfer+0x86>
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	795b      	ldrb	r3, [r3, #5]
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d107      	bne.n	8008f0a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	785b      	ldrb	r3, [r3, #1]
 8008efe:	4619      	mov	r1, r3
 8008f00:	68f8      	ldr	r0, [r7, #12]
 8008f02:	f000 fa0f 	bl	8009324 <USB_DoPing>
      return HAL_OK;
 8008f06:	2300      	movs	r3, #0
 8008f08:	e0f8      	b.n	80090fc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	695b      	ldr	r3, [r3, #20]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d018      	beq.n	8008f44 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	695b      	ldr	r3, [r3, #20]
 8008f16:	68ba      	ldr	r2, [r7, #8]
 8008f18:	8912      	ldrh	r2, [r2, #8]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	68ba      	ldr	r2, [r7, #8]
 8008f20:	8912      	ldrh	r2, [r2, #8]
 8008f22:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f26:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008f28:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008f2a:	8b7b      	ldrh	r3, [r7, #26]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d90b      	bls.n	8008f48 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008f30:	8b7b      	ldrh	r3, [r7, #26]
 8008f32:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008f34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f36:	68ba      	ldr	r2, [r7, #8]
 8008f38:	8912      	ldrh	r2, [r2, #8]
 8008f3a:	fb03 f202 	mul.w	r2, r3, r2
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	611a      	str	r2, [r3, #16]
 8008f42:	e001      	b.n	8008f48 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008f44:	2301      	movs	r3, #1
 8008f46:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	78db      	ldrb	r3, [r3, #3]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d007      	beq.n	8008f60 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008f50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	8912      	ldrh	r2, [r2, #8]
 8008f56:	fb03 f202 	mul.w	r2, r3, r2
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	611a      	str	r2, [r3, #16]
 8008f5e:	e003      	b.n	8008f68 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	695a      	ldr	r2, [r3, #20]
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008f70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f72:	04d9      	lsls	r1, r3, #19
 8008f74:	4b63      	ldr	r3, [pc, #396]	; (8009104 <USB_HC_StartXfer+0x280>)
 8008f76:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008f78:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	7a9b      	ldrb	r3, [r3, #10]
 8008f7e:	075b      	lsls	r3, r3, #29
 8008f80:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008f84:	69f9      	ldr	r1, [r7, #28]
 8008f86:	0148      	lsls	r0, r1, #5
 8008f88:	6a39      	ldr	r1, [r7, #32]
 8008f8a:	4401      	add	r1, r0
 8008f8c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008f90:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008f92:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008f94:	79fb      	ldrb	r3, [r7, #7]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d009      	beq.n	8008fae <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	68d9      	ldr	r1, [r3, #12]
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	015a      	lsls	r2, r3, #5
 8008fa2:	6a3b      	ldr	r3, [r7, #32]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008faa:	460a      	mov	r2, r1
 8008fac:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008fae:	6a3b      	ldr	r3, [r7, #32]
 8008fb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	f003 0301 	and.w	r3, r3, #1
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	bf0c      	ite	eq
 8008fbe:	2301      	moveq	r3, #1
 8008fc0:	2300      	movne	r3, #0
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	015a      	lsls	r2, r3, #5
 8008fca:	6a3b      	ldr	r3, [r7, #32]
 8008fcc:	4413      	add	r3, r2
 8008fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	69fa      	ldr	r2, [r7, #28]
 8008fd6:	0151      	lsls	r1, r2, #5
 8008fd8:	6a3a      	ldr	r2, [r7, #32]
 8008fda:	440a      	add	r2, r1
 8008fdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fe0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008fe4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008fe6:	69fb      	ldr	r3, [r7, #28]
 8008fe8:	015a      	lsls	r2, r3, #5
 8008fea:	6a3b      	ldr	r3, [r7, #32]
 8008fec:	4413      	add	r3, r2
 8008fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	7e7b      	ldrb	r3, [r7, #25]
 8008ff6:	075b      	lsls	r3, r3, #29
 8008ff8:	69f9      	ldr	r1, [r7, #28]
 8008ffa:	0148      	lsls	r0, r1, #5
 8008ffc:	6a39      	ldr	r1, [r7, #32]
 8008ffe:	4401      	add	r1, r0
 8009000:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009004:	4313      	orrs	r3, r2
 8009006:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	015a      	lsls	r2, r3, #5
 800900c:	6a3b      	ldr	r3, [r7, #32]
 800900e:	4413      	add	r3, r2
 8009010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800901e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	78db      	ldrb	r3, [r3, #3]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d004      	beq.n	8009032 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800902e:	613b      	str	r3, [r7, #16]
 8009030:	e003      	b.n	800903a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009038:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009040:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	015a      	lsls	r2, r3, #5
 8009046:	6a3b      	ldr	r3, [r7, #32]
 8009048:	4413      	add	r3, r2
 800904a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800904e:	461a      	mov	r2, r3
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009054:	79fb      	ldrb	r3, [r7, #7]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d001      	beq.n	800905e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800905a:	2300      	movs	r3, #0
 800905c:	e04e      	b.n	80090fc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	78db      	ldrb	r3, [r3, #3]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d149      	bne.n	80090fa <USB_HC_StartXfer+0x276>
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	695b      	ldr	r3, [r3, #20]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d045      	beq.n	80090fa <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	79db      	ldrb	r3, [r3, #7]
 8009072:	2b03      	cmp	r3, #3
 8009074:	d830      	bhi.n	80090d8 <USB_HC_StartXfer+0x254>
 8009076:	a201      	add	r2, pc, #4	; (adr r2, 800907c <USB_HC_StartXfer+0x1f8>)
 8009078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800907c:	0800908d 	.word	0x0800908d
 8009080:	080090b1 	.word	0x080090b1
 8009084:	0800908d 	.word	0x0800908d
 8009088:	080090b1 	.word	0x080090b1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	695b      	ldr	r3, [r3, #20]
 8009090:	3303      	adds	r3, #3
 8009092:	089b      	lsrs	r3, r3, #2
 8009094:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009096:	8afa      	ldrh	r2, [r7, #22]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909c:	b29b      	uxth	r3, r3
 800909e:	429a      	cmp	r2, r3
 80090a0:	d91c      	bls.n	80090dc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	699b      	ldr	r3, [r3, #24]
 80090a6:	f043 0220 	orr.w	r2, r3, #32
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	619a      	str	r2, [r3, #24]
        }
        break;
 80090ae:	e015      	b.n	80090dc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	695b      	ldr	r3, [r3, #20]
 80090b4:	3303      	adds	r3, #3
 80090b6:	089b      	lsrs	r3, r3, #2
 80090b8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80090ba:	8afa      	ldrh	r2, [r7, #22]
 80090bc:	6a3b      	ldr	r3, [r7, #32]
 80090be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d90a      	bls.n	80090e0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	699b      	ldr	r3, [r3, #24]
 80090ce:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	619a      	str	r2, [r3, #24]
        }
        break;
 80090d6:	e003      	b.n	80090e0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80090d8:	bf00      	nop
 80090da:	e002      	b.n	80090e2 <USB_HC_StartXfer+0x25e>
        break;
 80090dc:	bf00      	nop
 80090de:	e000      	b.n	80090e2 <USB_HC_StartXfer+0x25e>
        break;
 80090e0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	68d9      	ldr	r1, [r3, #12]
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	785a      	ldrb	r2, [r3, #1]
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	695b      	ldr	r3, [r3, #20]
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	2000      	movs	r0, #0
 80090f2:	9000      	str	r0, [sp, #0]
 80090f4:	68f8      	ldr	r0, [r7, #12]
 80090f6:	f7ff fb31 	bl	800875c <USB_WritePacket>
  }

  return HAL_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3728      	adds	r7, #40	; 0x28
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}
 8009104:	1ff80000 	.word	0x1ff80000

08009108 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800911a:	695b      	ldr	r3, [r3, #20]
 800911c:	b29b      	uxth	r3, r3
}
 800911e:	4618      	mov	r0, r3
 8009120:	3714      	adds	r7, #20
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr

0800912a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800912a:	b480      	push	{r7}
 800912c:	b089      	sub	sp, #36	; 0x24
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
 8009132:	460b      	mov	r3, r1
 8009134:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800913a:	78fb      	ldrb	r3, [r7, #3]
 800913c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800913e:	2300      	movs	r3, #0
 8009140:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	015a      	lsls	r2, r3, #5
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	4413      	add	r3, r2
 800914a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	0c9b      	lsrs	r3, r3, #18
 8009152:	f003 0303 	and.w	r3, r3, #3
 8009156:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	015a      	lsls	r2, r3, #5
 800915c:	69fb      	ldr	r3, [r7, #28]
 800915e:	4413      	add	r3, r2
 8009160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	0fdb      	lsrs	r3, r3, #31
 8009168:	f003 0301 	and.w	r3, r3, #1
 800916c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	f003 0320 	and.w	r3, r3, #32
 8009176:	2b20      	cmp	r3, #32
 8009178:	d104      	bne.n	8009184 <USB_HC_Halt+0x5a>
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d101      	bne.n	8009184 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009180:	2300      	movs	r3, #0
 8009182:	e0c8      	b.n	8009316 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d002      	beq.n	8009190 <USB_HC_Halt+0x66>
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	2b02      	cmp	r3, #2
 800918e:	d163      	bne.n	8009258 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	015a      	lsls	r2, r3, #5
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	4413      	add	r3, r2
 8009198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	69ba      	ldr	r2, [r7, #24]
 80091a0:	0151      	lsls	r1, r2, #5
 80091a2:	69fa      	ldr	r2, [r7, #28]
 80091a4:	440a      	add	r2, r1
 80091a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091ae:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	f003 0320 	and.w	r3, r3, #32
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f040 80ab 	bne.w	8009314 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d133      	bne.n	8009232 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	015a      	lsls	r2, r3, #5
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	4413      	add	r3, r2
 80091d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	69ba      	ldr	r2, [r7, #24]
 80091da:	0151      	lsls	r1, r2, #5
 80091dc:	69fa      	ldr	r2, [r7, #28]
 80091de:	440a      	add	r2, r1
 80091e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091e8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	015a      	lsls	r2, r3, #5
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	4413      	add	r3, r2
 80091f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	69ba      	ldr	r2, [r7, #24]
 80091fa:	0151      	lsls	r1, r2, #5
 80091fc:	69fa      	ldr	r2, [r7, #28]
 80091fe:	440a      	add	r2, r1
 8009200:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009204:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009208:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	3301      	adds	r3, #1
 800920e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009216:	d81d      	bhi.n	8009254 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	015a      	lsls	r2, r3, #5
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	4413      	add	r3, r2
 8009220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800922a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800922e:	d0ec      	beq.n	800920a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009230:	e070      	b.n	8009314 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	015a      	lsls	r2, r3, #5
 8009236:	69fb      	ldr	r3, [r7, #28]
 8009238:	4413      	add	r3, r2
 800923a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	69ba      	ldr	r2, [r7, #24]
 8009242:	0151      	lsls	r1, r2, #5
 8009244:	69fa      	ldr	r2, [r7, #28]
 8009246:	440a      	add	r2, r1
 8009248:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800924c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009250:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009252:	e05f      	b.n	8009314 <USB_HC_Halt+0x1ea>
            break;
 8009254:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009256:	e05d      	b.n	8009314 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	015a      	lsls	r2, r3, #5
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	4413      	add	r3, r2
 8009260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	69ba      	ldr	r2, [r7, #24]
 8009268:	0151      	lsls	r1, r2, #5
 800926a:	69fa      	ldr	r2, [r7, #28]
 800926c:	440a      	add	r2, r1
 800926e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009272:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009276:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009284:	2b00      	cmp	r3, #0
 8009286:	d133      	bne.n	80092f0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009288:	69bb      	ldr	r3, [r7, #24]
 800928a:	015a      	lsls	r2, r3, #5
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	4413      	add	r3, r2
 8009290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	69ba      	ldr	r2, [r7, #24]
 8009298:	0151      	lsls	r1, r2, #5
 800929a:	69fa      	ldr	r2, [r7, #28]
 800929c:	440a      	add	r2, r1
 800929e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80092a6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	015a      	lsls	r2, r3, #5
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	4413      	add	r3, r2
 80092b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	69ba      	ldr	r2, [r7, #24]
 80092b8:	0151      	lsls	r1, r2, #5
 80092ba:	69fa      	ldr	r2, [r7, #28]
 80092bc:	440a      	add	r2, r1
 80092be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80092c6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	3301      	adds	r3, #1
 80092cc:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092d4:	d81d      	bhi.n	8009312 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	015a      	lsls	r2, r3, #5
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	4413      	add	r3, r2
 80092de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092ec:	d0ec      	beq.n	80092c8 <USB_HC_Halt+0x19e>
 80092ee:	e011      	b.n	8009314 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	015a      	lsls	r2, r3, #5
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	4413      	add	r3, r2
 80092f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	69ba      	ldr	r2, [r7, #24]
 8009300:	0151      	lsls	r1, r2, #5
 8009302:	69fa      	ldr	r2, [r7, #28]
 8009304:	440a      	add	r2, r1
 8009306:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800930a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800930e:	6013      	str	r3, [r2, #0]
 8009310:	e000      	b.n	8009314 <USB_HC_Halt+0x1ea>
          break;
 8009312:	bf00      	nop
    }
  }

  return HAL_OK;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	3724      	adds	r7, #36	; 0x24
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr
	...

08009324 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009324:	b480      	push	{r7}
 8009326:	b087      	sub	sp, #28
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	460b      	mov	r3, r1
 800932e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009334:	78fb      	ldrb	r3, [r7, #3]
 8009336:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009338:	2301      	movs	r3, #1
 800933a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	04da      	lsls	r2, r3, #19
 8009340:	4b15      	ldr	r3, [pc, #84]	; (8009398 <USB_DoPing+0x74>)
 8009342:	4013      	ands	r3, r2
 8009344:	693a      	ldr	r2, [r7, #16]
 8009346:	0151      	lsls	r1, r2, #5
 8009348:	697a      	ldr	r2, [r7, #20]
 800934a:	440a      	add	r2, r1
 800934c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009350:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009354:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	015a      	lsls	r2, r3, #5
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	4413      	add	r3, r2
 800935e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800936c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009374:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	015a      	lsls	r2, r3, #5
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	4413      	add	r3, r2
 800937e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009382:	461a      	mov	r2, r3
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	371c      	adds	r7, #28
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	1ff80000 	.word	0x1ff80000

0800939c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b088      	sub	sp, #32
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80093a4:	2300      	movs	r3, #0
 80093a6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80093ac:	2300      	movs	r3, #0
 80093ae:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f7ff f911 	bl	80085d8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80093b6:	2110      	movs	r1, #16
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f7ff f96b 	bl	8008694 <USB_FlushTxFifo>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d001      	beq.n	80093c8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f7ff f997 	bl	80086fc <USB_FlushRxFifo>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d001      	beq.n	80093d8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80093d4:	2301      	movs	r3, #1
 80093d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80093d8:	2300      	movs	r3, #0
 80093da:	61bb      	str	r3, [r7, #24]
 80093dc:	e01f      	b.n	800941e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	015a      	lsls	r2, r3, #5
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	4413      	add	r3, r2
 80093e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80093f4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009404:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	015a      	lsls	r2, r3, #5
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	4413      	add	r3, r2
 800940e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009412:	461a      	mov	r2, r3
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	3301      	adds	r3, #1
 800941c:	61bb      	str	r3, [r7, #24]
 800941e:	69bb      	ldr	r3, [r7, #24]
 8009420:	2b0f      	cmp	r3, #15
 8009422:	d9dc      	bls.n	80093de <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009424:	2300      	movs	r3, #0
 8009426:	61bb      	str	r3, [r7, #24]
 8009428:	e034      	b.n	8009494 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800942a:	69bb      	ldr	r3, [r7, #24]
 800942c:	015a      	lsls	r2, r3, #5
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	4413      	add	r3, r2
 8009432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009440:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009448:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009450:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	015a      	lsls	r2, r3, #5
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	4413      	add	r3, r2
 800945a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800945e:	461a      	mov	r2, r3
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	3301      	adds	r3, #1
 8009468:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009470:	d80c      	bhi.n	800948c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009472:	69bb      	ldr	r3, [r7, #24]
 8009474:	015a      	lsls	r2, r3, #5
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	4413      	add	r3, r2
 800947a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009484:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009488:	d0ec      	beq.n	8009464 <USB_StopHost+0xc8>
 800948a:	e000      	b.n	800948e <USB_StopHost+0xf2>
        break;
 800948c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	3301      	adds	r3, #1
 8009492:	61bb      	str	r3, [r7, #24]
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	2b0f      	cmp	r3, #15
 8009498:	d9c7      	bls.n	800942a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094a0:	461a      	mov	r2, r3
 80094a2:	f04f 33ff 	mov.w	r3, #4294967295
 80094a6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f04f 32ff 	mov.w	r2, #4294967295
 80094ae:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f7ff f880 	bl	80085b6 <USB_EnableGlobalInt>

  return ret;
 80094b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3720      	adds	r7, #32
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  //retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
	FATFS_LinkDriver(&SD0_Driver, SD0Path);
 80094c4:	4908      	ldr	r1, [pc, #32]	; (80094e8 <MX_FATFS_Init+0x28>)
 80094c6:	4809      	ldr	r0, [pc, #36]	; (80094ec <MX_FATFS_Init+0x2c>)
 80094c8:	f007 fc20 	bl	8010d0c <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD1_Driver, SD1Path);
 80094cc:	4908      	ldr	r1, [pc, #32]	; (80094f0 <MX_FATFS_Init+0x30>)
 80094ce:	4809      	ldr	r0, [pc, #36]	; (80094f4 <MX_FATFS_Init+0x34>)
 80094d0:	f007 fc1c 	bl	8010d0c <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD2_Driver, SD2Path);
 80094d4:	4908      	ldr	r1, [pc, #32]	; (80094f8 <MX_FATFS_Init+0x38>)
 80094d6:	4809      	ldr	r0, [pc, #36]	; (80094fc <MX_FATFS_Init+0x3c>)
 80094d8:	f007 fc18 	bl	8010d0c <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD3_Driver, SD3Path);
 80094dc:	4908      	ldr	r1, [pc, #32]	; (8009500 <MX_FATFS_Init+0x40>)
 80094de:	4809      	ldr	r0, [pc, #36]	; (8009504 <MX_FATFS_Init+0x44>)
 80094e0:	f007 fc14 	bl	8010d0c <FATFS_LinkDriver>


  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80094e4:	bf00      	nop
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	20001d5c 	.word	0x20001d5c
 80094ec:	20000240 	.word	0x20000240
 80094f0:	20001d60 	.word	0x20001d60
 80094f4:	20000254 	.word	0x20000254
 80094f8:	20001d64 	.word	0x20001d64
 80094fc:	20000268 	.word	0x20000268
 8009500:	20001d68 	.word	0x20001d68
 8009504:	2000027c 	.word	0x2000027c

08009508 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009508:	b480      	push	{r7}
 800950a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800950c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800950e:	4618      	mov	r0, r3
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <SD0_initialize>:
  * @brief  Initializes a Drive
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS SD0_initialize (BYTE pdrv)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	4603      	mov	r3, r0
 8009520:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(0);
 8009522:	2000      	movs	r0, #0
 8009524:	f7f8 fb98 	bl	8001c58 <sd_ss_set_active>
	return USER_initialize(pdrv);
 8009528:	79fb      	ldrb	r3, [r7, #7]
 800952a:	4618      	mov	r0, r3
 800952c:	f000 f838 	bl	80095a0 <USER_initialize>
 8009530:	4603      	mov	r3, r0
}
 8009532:	4618      	mov	r0, r3
 8009534:	3708      	adds	r7, #8
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <SD1_initialize>:
DSTATUS SD1_initialize (BYTE pdrv)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b082      	sub	sp, #8
 800953e:	af00      	add	r7, sp, #0
 8009540:	4603      	mov	r3, r0
 8009542:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(1);
 8009544:	2001      	movs	r0, #1
 8009546:	f7f8 fb87 	bl	8001c58 <sd_ss_set_active>
	return USER_initialize(pdrv);
 800954a:	79fb      	ldrb	r3, [r7, #7]
 800954c:	4618      	mov	r0, r3
 800954e:	f000 f827 	bl	80095a0 <USER_initialize>
 8009552:	4603      	mov	r3, r0
}
 8009554:	4618      	mov	r0, r3
 8009556:	3708      	adds	r7, #8
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <SD2_initialize>:
DSTATUS SD2_initialize (BYTE pdrv)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	4603      	mov	r3, r0
 8009564:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(2);
 8009566:	2002      	movs	r0, #2
 8009568:	f7f8 fb76 	bl	8001c58 <sd_ss_set_active>
	return USER_initialize(pdrv);
 800956c:	79fb      	ldrb	r3, [r7, #7]
 800956e:	4618      	mov	r0, r3
 8009570:	f000 f816 	bl	80095a0 <USER_initialize>
 8009574:	4603      	mov	r3, r0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3708      	adds	r7, #8
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <SD3_initialize>:
DSTATUS SD3_initialize (BYTE pdrv)
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b082      	sub	sp, #8
 8009582:	af00      	add	r7, sp, #0
 8009584:	4603      	mov	r3, r0
 8009586:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(3);
 8009588:	2003      	movs	r0, #3
 800958a:	f7f8 fb65 	bl	8001c58 <sd_ss_set_active>
	return USER_initialize(pdrv);
 800958e:	79fb      	ldrb	r3, [r7, #7]
 8009590:	4618      	mov	r0, r3
 8009592:	f000 f805 	bl	80095a0 <USER_initialize>
 8009596:	4603      	mov	r3, r0
}
 8009598:	4618      	mov	r0, r3
 800959a:	3708      	adds	r7, #8
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <USER_initialize>:

DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	4603      	mov	r3, r0
 80095a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	//SD_PowerOn();
	SS_SD_SELECT();
 80095aa:	f7f8 fb73 	bl	8001c94 <sd_ss_active_pin_down>
	if(sd_ini()==0) {Stat &= ~STA_NOINIT;} // STA_NOINIT
 80095ae:	f7f8 fbf3 	bl	8001d98 <sd_ini>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d107      	bne.n	80095c8 <USER_initialize+0x28>
 80095b8:	4b08      	ldr	r3, [pc, #32]	; (80095dc <USER_initialize+0x3c>)
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	f023 0301 	bic.w	r3, r3, #1
 80095c2:	b2da      	uxtb	r2, r3
 80095c4:	4b05      	ldr	r3, [pc, #20]	; (80095dc <USER_initialize+0x3c>)
 80095c6:	701a      	strb	r2, [r3, #0]
	SS_SD_DESELECT();
 80095c8:	f7f8 fb74 	bl	8001cb4 <sd_ss_active_pin_up>
    return Stat;
 80095cc:	4b03      	ldr	r3, [pc, #12]	; (80095dc <USER_initialize+0x3c>)
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3708      	adds	r7, #8
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	2000023d 	.word	0x2000023d

080095e0 <SD0_status>:
  * @brief  Gets Disk Status
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS SD0_status (BYTE pdrv)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b082      	sub	sp, #8
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	4603      	mov	r3, r0
 80095e8:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(0);
 80095ea:	2000      	movs	r0, #0
 80095ec:	f7f8 fb34 	bl	8001c58 <sd_ss_set_active>
	return USER_status(pdrv);
 80095f0:	79fb      	ldrb	r3, [r7, #7]
 80095f2:	4618      	mov	r0, r3
 80095f4:	f000 f838 	bl	8009668 <USER_status>
 80095f8:	4603      	mov	r3, r0
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3708      	adds	r7, #8
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <SD1_status>:
DSTATUS SD1_status (BYTE pdrv)
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b082      	sub	sp, #8
 8009606:	af00      	add	r7, sp, #0
 8009608:	4603      	mov	r3, r0
 800960a:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(1);
 800960c:	2001      	movs	r0, #1
 800960e:	f7f8 fb23 	bl	8001c58 <sd_ss_set_active>
	return USER_status(pdrv);
 8009612:	79fb      	ldrb	r3, [r7, #7]
 8009614:	4618      	mov	r0, r3
 8009616:	f000 f827 	bl	8009668 <USER_status>
 800961a:	4603      	mov	r3, r0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3708      	adds	r7, #8
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <SD2_status>:
DSTATUS SD2_status (BYTE pdrv)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af00      	add	r7, sp, #0
 800962a:	4603      	mov	r3, r0
 800962c:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(2);
 800962e:	2002      	movs	r0, #2
 8009630:	f7f8 fb12 	bl	8001c58 <sd_ss_set_active>
	return USER_status(pdrv);
 8009634:	79fb      	ldrb	r3, [r7, #7]
 8009636:	4618      	mov	r0, r3
 8009638:	f000 f816 	bl	8009668 <USER_status>
 800963c:	4603      	mov	r3, r0
}
 800963e:	4618      	mov	r0, r3
 8009640:	3708      	adds	r7, #8
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <SD3_status>:
DSTATUS SD3_status (BYTE pdrv)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b082      	sub	sp, #8
 800964a:	af00      	add	r7, sp, #0
 800964c:	4603      	mov	r3, r0
 800964e:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(3);
 8009650:	2003      	movs	r0, #3
 8009652:	f7f8 fb01 	bl	8001c58 <sd_ss_set_active>
	return USER_status(pdrv);
 8009656:	79fb      	ldrb	r3, [r7, #7]
 8009658:	4618      	mov	r0, r3
 800965a:	f000 f805 	bl	8009668 <USER_status>
 800965e:	4603      	mov	r3, r0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3708      	adds	r7, #8
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <USER_status>:

DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	4603      	mov	r3, r0
 8009670:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	SS_SD_SELECT();
 8009672:	f7f8 fb0f 	bl	8001c94 <sd_ss_active_pin_down>
	if (pdrv) return STA_NOINIT;
 8009676:	79fb      	ldrb	r3, [r7, #7]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d001      	beq.n	8009680 <USER_status+0x18>
 800967c:	2301      	movs	r3, #1
 800967e:	e004      	b.n	800968a <USER_status+0x22>
	SS_SD_DESELECT();
 8009680:	f7f8 fb18 	bl	8001cb4 <sd_ss_active_pin_up>
    return Stat;
 8009684:	4b03      	ldr	r3, [pc, #12]	; (8009694 <USER_status+0x2c>)
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800968a:	4618      	mov	r0, r3
 800968c:	3708      	adds	r7, #8
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	2000023d 	.word	0x2000023d

08009698 <SD0_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DSTATUS SD0_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	60b9      	str	r1, [r7, #8]
 80096a0:	607a      	str	r2, [r7, #4]
 80096a2:	603b      	str	r3, [r7, #0]
 80096a4:	4603      	mov	r3, r0
 80096a6:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(0);
 80096a8:	2000      	movs	r0, #0
 80096aa:	f7f8 fad5 	bl	8001c58 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 80096ae:	7bf8      	ldrb	r0, [r7, #15]
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	68b9      	ldr	r1, [r7, #8]
 80096b6:	f000 f847 	bl	8009748 <USER_read>
 80096ba:	4603      	mov	r3, r0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3710      	adds	r7, #16
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <SD1_read>:
DSTATUS SD1_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60b9      	str	r1, [r7, #8]
 80096cc:	607a      	str	r2, [r7, #4]
 80096ce:	603b      	str	r3, [r7, #0]
 80096d0:	4603      	mov	r3, r0
 80096d2:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(1);
 80096d4:	2001      	movs	r0, #1
 80096d6:	f7f8 fabf 	bl	8001c58 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 80096da:	7bf8      	ldrb	r0, [r7, #15]
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	68b9      	ldr	r1, [r7, #8]
 80096e2:	f000 f831 	bl	8009748 <USER_read>
 80096e6:	4603      	mov	r3, r0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3710      	adds	r7, #16
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <SD2_read>:
DSTATUS SD2_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	60b9      	str	r1, [r7, #8]
 80096f8:	607a      	str	r2, [r7, #4]
 80096fa:	603b      	str	r3, [r7, #0]
 80096fc:	4603      	mov	r3, r0
 80096fe:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(2);
 8009700:	2002      	movs	r0, #2
 8009702:	f7f8 faa9 	bl	8001c58 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 8009706:	7bf8      	ldrb	r0, [r7, #15]
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	68b9      	ldr	r1, [r7, #8]
 800970e:	f000 f81b 	bl	8009748 <USER_read>
 8009712:	4603      	mov	r3, r0
}
 8009714:	4618      	mov	r0, r3
 8009716:	3710      	adds	r7, #16
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <SD3_read>:
DSTATUS SD3_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	60b9      	str	r1, [r7, #8]
 8009724:	607a      	str	r2, [r7, #4]
 8009726:	603b      	str	r3, [r7, #0]
 8009728:	4603      	mov	r3, r0
 800972a:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(3);
 800972c:	2003      	movs	r0, #3
 800972e:	f7f8 fa93 	bl	8001c58 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 8009732:	7bf8      	ldrb	r0, [r7, #15]
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	68b9      	ldr	r1, [r7, #8]
 800973a:	f000 f805 	bl	8009748 <USER_read>
 800973e:	4603      	mov	r3, r0
}
 8009740:	4618      	mov	r0, r3
 8009742:	3710      	adds	r7, #16
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	60b9      	str	r1, [r7, #8]
 8009750:	607a      	str	r2, [r7, #4]
 8009752:	603b      	str	r3, [r7, #0]
 8009754:	4603      	mov	r3, r0
 8009756:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	SS_SD_SELECT();
 8009758:	f7f8 fa9c 	bl	8001c94 <sd_ss_active_pin_down>
	if (pdrv || !count) return RES_PARERR;
 800975c:	7bfb      	ldrb	r3, [r7, #15]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d102      	bne.n	8009768 <USER_read+0x20>
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d101      	bne.n	800976c <USER_read+0x24>
 8009768:	2304      	movs	r3, #4
 800976a:	e043      	b.n	80097f4 <USER_read+0xac>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800976c:	4b23      	ldr	r3, [pc, #140]	; (80097fc <USER_read+0xb4>)
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	b2db      	uxtb	r3, r3
 8009772:	f003 0301 	and.w	r3, r3, #1
 8009776:	2b00      	cmp	r3, #0
 8009778:	d001      	beq.n	800977e <USER_read+0x36>
 800977a:	2303      	movs	r3, #3
 800977c:	e03a      	b.n	80097f4 <USER_read+0xac>
	if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 800977e:	4b20      	ldr	r3, [pc, #128]	; (8009800 <USER_read+0xb8>)
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	b2db      	uxtb	r3, r3
 8009784:	f003 0304 	and.w	r3, r3, #4
 8009788:	2b00      	cmp	r3, #0
 800978a:	d102      	bne.n	8009792 <USER_read+0x4a>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	025b      	lsls	r3, r3, #9
 8009790:	607b      	str	r3, [r7, #4]
	if (count == 1) /* Single block read */
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	2b01      	cmp	r3, #1
 8009796:	d106      	bne.n	80097a6 <USER_read+0x5e>
	{
	  SD_Read_Block(buff,sector); //Ð¡Ñ‡Ð¸Ñ‚Ð°ÐµÐ¼ Ð±Ð»Ð¾Ðº Ð² Ð±ÑƒÑ„ÐµÑ€
 8009798:	6879      	ldr	r1, [r7, #4]
 800979a:	68b8      	ldr	r0, [r7, #8]
 800979c:	f7f8 fc35 	bl	800200a <SD_Read_Block>
	  count = 0;
 80097a0:	2300      	movs	r3, #0
 80097a2:	603b      	str	r3, [r7, #0]
 80097a4:	e01c      	b.n	80097e0 <USER_read+0x98>
	}
	else /* Multiple block read */
	{
		do{
			SD_Read_Block((BYTE*)buff,sector);
 80097a6:	6879      	ldr	r1, [r7, #4]
 80097a8:	68b8      	ldr	r0, [r7, #8]
 80097aa:	f7f8 fc2e 	bl	800200a <SD_Read_Block>
			if (!(sdinfo.type & 4)){
 80097ae:	4b14      	ldr	r3, [pc, #80]	; (8009800 <USER_read+0xb8>)
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	f003 0304 	and.w	r3, r3, #4
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d104      	bne.n	80097c6 <USER_read+0x7e>
				sector+=512;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80097c2:	607b      	str	r3, [r7, #4]
 80097c4:	e002      	b.n	80097cc <USER_read+0x84>
			}
			else sector++;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	3301      	adds	r3, #1
 80097ca:	607b      	str	r3, [r7, #4]
			buff+=512;
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80097d2:	60bb      	str	r3, [r7, #8]
			count--;
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	3b01      	subs	r3, #1
 80097d8:	603b      	str	r3, [r7, #0]
		}while(count>0);
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d1e2      	bne.n	80097a6 <USER_read+0x5e>
	}
	SPI_Release();
 80097e0:	f7f8 fc0c 	bl	8001ffc <SPI_Release>
	SS_SD_DESELECT();
 80097e4:	f7f8 fa66 	bl	8001cb4 <sd_ss_active_pin_up>
	return count ? RES_ERROR : RES_OK;
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	bf14      	ite	ne
 80097ee:	2301      	movne	r3, #1
 80097f0:	2300      	moveq	r3, #0
 80097f2:	b2db      	uxtb	r3, r3
    return RES_OK;
  /* USER CODE END READ */
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3710      	adds	r7, #16
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	2000023d 	.word	0x2000023d
 8009800:	20001ac0 	.word	0x20001ac0

08009804 <SD0_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DSTATUS SD0_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	60b9      	str	r1, [r7, #8]
 800980c:	607a      	str	r2, [r7, #4]
 800980e:	603b      	str	r3, [r7, #0]
 8009810:	4603      	mov	r3, r0
 8009812:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(0);
 8009814:	2000      	movs	r0, #0
 8009816:	f7f8 fa1f 	bl	8001c58 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 800981a:	7bf8      	ldrb	r0, [r7, #15]
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	68b9      	ldr	r1, [r7, #8]
 8009822:	f000 f847 	bl	80098b4 <USER_write>
 8009826:	4603      	mov	r3, r0
}
 8009828:	4618      	mov	r0, r3
 800982a:	3710      	adds	r7, #16
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <SD1_write>:
DSTATUS SD1_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	60b9      	str	r1, [r7, #8]
 8009838:	607a      	str	r2, [r7, #4]
 800983a:	603b      	str	r3, [r7, #0]
 800983c:	4603      	mov	r3, r0
 800983e:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(1);
 8009840:	2001      	movs	r0, #1
 8009842:	f7f8 fa09 	bl	8001c58 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 8009846:	7bf8      	ldrb	r0, [r7, #15]
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	68b9      	ldr	r1, [r7, #8]
 800984e:	f000 f831 	bl	80098b4 <USER_write>
 8009852:	4603      	mov	r3, r0
}
 8009854:	4618      	mov	r0, r3
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <SD2_write>:
DSTATUS SD2_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	60b9      	str	r1, [r7, #8]
 8009864:	607a      	str	r2, [r7, #4]
 8009866:	603b      	str	r3, [r7, #0]
 8009868:	4603      	mov	r3, r0
 800986a:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(2);
 800986c:	2002      	movs	r0, #2
 800986e:	f7f8 f9f3 	bl	8001c58 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 8009872:	7bf8      	ldrb	r0, [r7, #15]
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	68b9      	ldr	r1, [r7, #8]
 800987a:	f000 f81b 	bl	80098b4 <USER_write>
 800987e:	4603      	mov	r3, r0
}
 8009880:	4618      	mov	r0, r3
 8009882:	3710      	adds	r7, #16
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <SD3_write>:
DSTATUS SD3_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	60b9      	str	r1, [r7, #8]
 8009890:	607a      	str	r2, [r7, #4]
 8009892:	603b      	str	r3, [r7, #0]
 8009894:	4603      	mov	r3, r0
 8009896:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(3);
 8009898:	2003      	movs	r0, #3
 800989a:	f7f8 f9dd 	bl	8001c58 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 800989e:	7bf8      	ldrb	r0, [r7, #15]
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	68b9      	ldr	r1, [r7, #8]
 80098a6:	f000 f805 	bl	80098b4 <USER_write>
 80098aa:	4603      	mov	r3, r0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3710      	adds	r7, #16
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b086      	sub	sp, #24
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	60b9      	str	r1, [r7, #8]
 80098bc:	607a      	str	r2, [r7, #4]
 80098be:	603b      	str	r3, [r7, #0]
 80098c0:	4603      	mov	r3, r0
 80098c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	uint8_t res;
	SS_SD_SELECT();
 80098c4:	f7f8 f9e6 	bl	8001c94 <sd_ss_active_pin_down>
	if (pdrv || !count) return RES_PARERR;
 80098c8:	7bfb      	ldrb	r3, [r7, #15]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d102      	bne.n	80098d4 <USER_write+0x20>
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d101      	bne.n	80098d8 <USER_write+0x24>
 80098d4:	2304      	movs	r3, #4
 80098d6:	e02c      	b.n	8009932 <USER_write+0x7e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80098d8:	4b18      	ldr	r3, [pc, #96]	; (800993c <USER_write+0x88>)
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	f003 0301 	and.w	r3, r3, #1
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d001      	beq.n	80098ea <USER_write+0x36>
 80098e6:	2303      	movs	r3, #3
 80098e8:	e023      	b.n	8009932 <USER_write+0x7e>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80098ea:	4b14      	ldr	r3, [pc, #80]	; (800993c <USER_write+0x88>)
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	f003 0304 	and.w	r3, r3, #4
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d001      	beq.n	80098fc <USER_write+0x48>
 80098f8:	2302      	movs	r3, #2
 80098fa:	e01a      	b.n	8009932 <USER_write+0x7e>
	if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 80098fc:	4b10      	ldr	r3, [pc, #64]	; (8009940 <USER_write+0x8c>)
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	b2db      	uxtb	r3, r3
 8009902:	f003 0304 	and.w	r3, r3, #4
 8009906:	2b00      	cmp	r3, #0
 8009908:	d102      	bne.n	8009910 <USER_write+0x5c>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	025b      	lsls	r3, r3, #9
 800990e:	607b      	str	r3, [r7, #4]
  	res=SD_Write_Blocks((BYTE*)buff,sector,count);
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	b29b      	uxth	r3, r3
 8009914:	461a      	mov	r2, r3
 8009916:	6879      	ldr	r1, [r7, #4]
 8009918:	68b8      	ldr	r0, [r7, #8]
 800991a:	f7f8 fbbb 	bl	8002094 <SD_Write_Blocks>
 800991e:	4603      	mov	r3, r0
 8009920:	75fb      	strb	r3, [r7, #23]
	SS_SD_DESELECT();
 8009922:	f7f8 f9c7 	bl	8001cb4 <sd_ss_active_pin_up>

	return res ? RES_ERROR : RES_OK;
 8009926:	7dfb      	ldrb	r3, [r7, #23]
 8009928:	2b00      	cmp	r3, #0
 800992a:	bf14      	ite	ne
 800992c:	2301      	movne	r3, #1
 800992e:	2300      	moveq	r3, #0
 8009930:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8009932:	4618      	mov	r0, r3
 8009934:	3718      	adds	r7, #24
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	2000023d 	.word	0x2000023d
 8009940:	20001ac0 	.word	0x20001ac0

08009944 <SD0_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DSTATUS SD0_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	4603      	mov	r3, r0
 800994c:	603a      	str	r2, [r7, #0]
 800994e:	71fb      	strb	r3, [r7, #7]
 8009950:	460b      	mov	r3, r1
 8009952:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(0);
 8009954:	2000      	movs	r0, #0
 8009956:	f7f8 f97f 	bl	8001c58 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 800995a:	79b9      	ldrb	r1, [r7, #6]
 800995c:	79fb      	ldrb	r3, [r7, #7]
 800995e:	683a      	ldr	r2, [r7, #0]
 8009960:	4618      	mov	r0, r3
 8009962:	f000 f847 	bl	80099f4 <USER_ioctl>
 8009966:	4603      	mov	r3, r0
}
 8009968:	4618      	mov	r0, r3
 800996a:	3708      	adds	r7, #8
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <SD1_ioctl>:
DSTATUS SD1_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	4603      	mov	r3, r0
 8009978:	603a      	str	r2, [r7, #0]
 800997a:	71fb      	strb	r3, [r7, #7]
 800997c:	460b      	mov	r3, r1
 800997e:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(1);
 8009980:	2001      	movs	r0, #1
 8009982:	f7f8 f969 	bl	8001c58 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 8009986:	79b9      	ldrb	r1, [r7, #6]
 8009988:	79fb      	ldrb	r3, [r7, #7]
 800998a:	683a      	ldr	r2, [r7, #0]
 800998c:	4618      	mov	r0, r3
 800998e:	f000 f831 	bl	80099f4 <USER_ioctl>
 8009992:	4603      	mov	r3, r0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3708      	adds	r7, #8
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <SD2_ioctl>:
DSTATUS SD2_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	4603      	mov	r3, r0
 80099a4:	603a      	str	r2, [r7, #0]
 80099a6:	71fb      	strb	r3, [r7, #7]
 80099a8:	460b      	mov	r3, r1
 80099aa:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(2);
 80099ac:	2002      	movs	r0, #2
 80099ae:	f7f8 f953 	bl	8001c58 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 80099b2:	79b9      	ldrb	r1, [r7, #6]
 80099b4:	79fb      	ldrb	r3, [r7, #7]
 80099b6:	683a      	ldr	r2, [r7, #0]
 80099b8:	4618      	mov	r0, r3
 80099ba:	f000 f81b 	bl	80099f4 <USER_ioctl>
 80099be:	4603      	mov	r3, r0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3708      	adds	r7, #8
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <SD3_ioctl>:
DSTATUS SD3_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	4603      	mov	r3, r0
 80099d0:	603a      	str	r2, [r7, #0]
 80099d2:	71fb      	strb	r3, [r7, #7]
 80099d4:	460b      	mov	r3, r1
 80099d6:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(3);
 80099d8:	2003      	movs	r0, #3
 80099da:	f7f8 f93d 	bl	8001c58 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 80099de:	79b9      	ldrb	r1, [r7, #6]
 80099e0:	79fb      	ldrb	r3, [r7, #7]
 80099e2:	683a      	ldr	r2, [r7, #0]
 80099e4:	4618      	mov	r0, r3
 80099e6:	f000 f805 	bl	80099f4 <USER_ioctl>
 80099ea:	4603      	mov	r3, r0
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3708      	adds	r7, #8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	4603      	mov	r3, r0
 80099fc:	603a      	str	r2, [r7, #0]
 80099fe:	71fb      	strb	r3, [r7, #7]
 8009a00:	460b      	mov	r3, r1
 8009a02:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res;
	sd_ss_set_active(pdrv);
 8009a04:	79fb      	ldrb	r3, [r7, #7]
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7f8 f926 	bl	8001c58 <sd_ss_set_active>
	SS_SD_SELECT();
 8009a0c:	f7f8 f942 	bl	8001c94 <sd_ss_active_pin_down>
	if (pdrv) return RES_PARERR;
 8009a10:	79fb      	ldrb	r3, [r7, #7]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d001      	beq.n	8009a1a <USER_ioctl+0x26>
 8009a16:	2304      	movs	r3, #4
 8009a18:	e02a      	b.n	8009a70 <USER_ioctl+0x7c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009a1a:	4b17      	ldr	r3, [pc, #92]	; (8009a78 <USER_ioctl+0x84>)
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	f003 0301 	and.w	r3, r3, #1
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d001      	beq.n	8009a2c <USER_ioctl+0x38>
 8009a28:	2303      	movs	r3, #3
 8009a2a:	e021      	b.n	8009a70 <USER_ioctl+0x7c>
	res = RES_ERROR;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	73fb      	strb	r3, [r7, #15]
	switch (cmd)
 8009a30:	79bb      	ldrb	r3, [r7, #6]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d002      	beq.n	8009a3c <USER_ioctl+0x48>
 8009a36:	2b02      	cmp	r3, #2
 8009a38:	d00a      	beq.n	8009a50 <USER_ioctl+0x5c>
 8009a3a:	e010      	b.n	8009a5e <USER_ioctl+0x6a>
	{
	  case CTRL_SYNC : /* Flush dirty buffer if present */
	    SS_SD_SELECT();
 8009a3c:	f7f8 f92a 	bl	8001c94 <sd_ss_active_pin_down>
	    if (SPI_wait_ready() == 0xFF)
 8009a40:	f7f8 fa65 	bl	8001f0e <SPI_wait_ready>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2bff      	cmp	r3, #255	; 0xff
 8009a48:	d10c      	bne.n	8009a64 <USER_ioctl+0x70>
	    res = RES_OK;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	73fb      	strb	r3, [r7, #15]
	    break;
 8009a4e:	e009      	b.n	8009a64 <USER_ioctl+0x70>
	  case GET_SECTOR_SIZE : /* Get sectors on the disk (WORD) */
	    *(WORD*)buff = 512;
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a56:	801a      	strh	r2, [r3, #0]
	    res = RES_OK;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	73fb      	strb	r3, [r7, #15]
	    break;
 8009a5c:	e003      	b.n	8009a66 <USER_ioctl+0x72>
	  default:
	    res = RES_PARERR;
 8009a5e:	2304      	movs	r3, #4
 8009a60:	73fb      	strb	r3, [r7, #15]
 8009a62:	e000      	b.n	8009a66 <USER_ioctl+0x72>
	    break;
 8009a64:	bf00      	nop
	}
	SPI_Release();
 8009a66:	f7f8 fac9 	bl	8001ffc <SPI_Release>
	SS_SD_DESELECT();
 8009a6a:	f7f8 f923 	bl	8001cb4 <sd_ss_active_pin_up>
    return res;
 8009a6e:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3710      	adds	r7, #16
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	2000023d 	.word	0x2000023d

08009a7c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009a7c:	b590      	push	{r4, r7, lr}
 8009a7e:	b089      	sub	sp, #36	; 0x24
 8009a80:	af04      	add	r7, sp, #16
 8009a82:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009a84:	2301      	movs	r3, #1
 8009a86:	2202      	movs	r2, #2
 8009a88:	2102      	movs	r1, #2
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 fdb0 	bl	800a5f0 <USBH_FindInterface>
 8009a90:	4603      	mov	r3, r0
 8009a92:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009a94:	7bfb      	ldrb	r3, [r7, #15]
 8009a96:	2bff      	cmp	r3, #255	; 0xff
 8009a98:	d002      	beq.n	8009aa0 <USBH_CDC_InterfaceInit+0x24>
 8009a9a:	7bfb      	ldrb	r3, [r7, #15]
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d901      	bls.n	8009aa4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009aa0:	2302      	movs	r3, #2
 8009aa2:	e13d      	b.n	8009d20 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009aa4:	7bfb      	ldrb	r3, [r7, #15]
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 fd85 	bl	800a5b8 <USBH_SelectInterface>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009ab2:	7bbb      	ldrb	r3, [r7, #14]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d001      	beq.n	8009abc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009ab8:	2302      	movs	r3, #2
 8009aba:	e131      	b.n	8009d20 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009ac2:	2050      	movs	r0, #80	; 0x50
 8009ac4:	f00a f932 	bl	8013d2c <malloc>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ad2:	69db      	ldr	r3, [r3, #28]
 8009ad4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d101      	bne.n	8009ae0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009adc:	2302      	movs	r3, #2
 8009ade:	e11f      	b.n	8009d20 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009ae0:	2250      	movs	r2, #80	; 0x50
 8009ae2:	2100      	movs	r1, #0
 8009ae4:	68b8      	ldr	r0, [r7, #8]
 8009ae6:	f00a f93f 	bl	8013d68 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009aea:	7bfb      	ldrb	r3, [r7, #15]
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	211a      	movs	r1, #26
 8009af0:	fb01 f303 	mul.w	r3, r1, r3
 8009af4:	4413      	add	r3, r2
 8009af6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	b25b      	sxtb	r3, r3
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	da15      	bge.n	8009b2e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009b02:	7bfb      	ldrb	r3, [r7, #15]
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	211a      	movs	r1, #26
 8009b08:	fb01 f303 	mul.w	r3, r1, r3
 8009b0c:	4413      	add	r3, r2
 8009b0e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009b12:	781a      	ldrb	r2, [r3, #0]
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009b18:	7bfb      	ldrb	r3, [r7, #15]
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	211a      	movs	r1, #26
 8009b1e:	fb01 f303 	mul.w	r3, r1, r3
 8009b22:	4413      	add	r3, r2
 8009b24:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009b28:	881a      	ldrh	r2, [r3, #0]
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	785b      	ldrb	r3, [r3, #1]
 8009b32:	4619      	mov	r1, r3
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f002 fa80 	bl	800c03a <USBH_AllocPipe>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	7819      	ldrb	r1, [r3, #0]
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	7858      	ldrb	r0, [r3, #1]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009b56:	68ba      	ldr	r2, [r7, #8]
 8009b58:	8952      	ldrh	r2, [r2, #10]
 8009b5a:	9202      	str	r2, [sp, #8]
 8009b5c:	2203      	movs	r2, #3
 8009b5e:	9201      	str	r2, [sp, #4]
 8009b60:	9300      	str	r3, [sp, #0]
 8009b62:	4623      	mov	r3, r4
 8009b64:	4602      	mov	r2, r0
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f002 fa38 	bl	800bfdc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	2200      	movs	r2, #0
 8009b72:	4619      	mov	r1, r3
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f009 ff2b 	bl	80139d0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	210a      	movs	r1, #10
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 fd35 	bl	800a5f0 <USBH_FindInterface>
 8009b86:	4603      	mov	r3, r0
 8009b88:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009b8a:	7bfb      	ldrb	r3, [r7, #15]
 8009b8c:	2bff      	cmp	r3, #255	; 0xff
 8009b8e:	d002      	beq.n	8009b96 <USBH_CDC_InterfaceInit+0x11a>
 8009b90:	7bfb      	ldrb	r3, [r7, #15]
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d901      	bls.n	8009b9a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009b96:	2302      	movs	r3, #2
 8009b98:	e0c2      	b.n	8009d20 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009b9a:	7bfb      	ldrb	r3, [r7, #15]
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	211a      	movs	r1, #26
 8009ba0:	fb01 f303 	mul.w	r3, r1, r3
 8009ba4:	4413      	add	r3, r2
 8009ba6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	b25b      	sxtb	r3, r3
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	da16      	bge.n	8009be0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009bb2:	7bfb      	ldrb	r3, [r7, #15]
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	211a      	movs	r1, #26
 8009bb8:	fb01 f303 	mul.w	r3, r1, r3
 8009bbc:	4413      	add	r3, r2
 8009bbe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009bc2:	781a      	ldrb	r2, [r3, #0]
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009bc8:	7bfb      	ldrb	r3, [r7, #15]
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	211a      	movs	r1, #26
 8009bce:	fb01 f303 	mul.w	r3, r1, r3
 8009bd2:	4413      	add	r3, r2
 8009bd4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009bd8:	881a      	ldrh	r2, [r3, #0]
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	835a      	strh	r2, [r3, #26]
 8009bde:	e015      	b.n	8009c0c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009be0:	7bfb      	ldrb	r3, [r7, #15]
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	211a      	movs	r1, #26
 8009be6:	fb01 f303 	mul.w	r3, r1, r3
 8009bea:	4413      	add	r3, r2
 8009bec:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009bf0:	781a      	ldrb	r2, [r3, #0]
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009bf6:	7bfb      	ldrb	r3, [r7, #15]
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	211a      	movs	r1, #26
 8009bfc:	fb01 f303 	mul.w	r3, r1, r3
 8009c00:	4413      	add	r3, r2
 8009c02:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009c06:	881a      	ldrh	r2, [r3, #0]
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009c0c:	7bfb      	ldrb	r3, [r7, #15]
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	211a      	movs	r1, #26
 8009c12:	fb01 f303 	mul.w	r3, r1, r3
 8009c16:	4413      	add	r3, r2
 8009c18:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	b25b      	sxtb	r3, r3
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	da16      	bge.n	8009c52 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009c24:	7bfb      	ldrb	r3, [r7, #15]
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	211a      	movs	r1, #26
 8009c2a:	fb01 f303 	mul.w	r3, r1, r3
 8009c2e:	4413      	add	r3, r2
 8009c30:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009c34:	781a      	ldrb	r2, [r3, #0]
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009c3a:	7bfb      	ldrb	r3, [r7, #15]
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	211a      	movs	r1, #26
 8009c40:	fb01 f303 	mul.w	r3, r1, r3
 8009c44:	4413      	add	r3, r2
 8009c46:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009c4a:	881a      	ldrh	r2, [r3, #0]
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	835a      	strh	r2, [r3, #26]
 8009c50:	e015      	b.n	8009c7e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009c52:	7bfb      	ldrb	r3, [r7, #15]
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	211a      	movs	r1, #26
 8009c58:	fb01 f303 	mul.w	r3, r1, r3
 8009c5c:	4413      	add	r3, r2
 8009c5e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009c62:	781a      	ldrb	r2, [r3, #0]
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009c68:	7bfb      	ldrb	r3, [r7, #15]
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	211a      	movs	r1, #26
 8009c6e:	fb01 f303 	mul.w	r3, r1, r3
 8009c72:	4413      	add	r3, r2
 8009c74:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009c78:	881a      	ldrh	r2, [r3, #0]
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	7b9b      	ldrb	r3, [r3, #14]
 8009c82:	4619      	mov	r1, r3
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f002 f9d8 	bl	800c03a <USBH_AllocPipe>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	7bdb      	ldrb	r3, [r3, #15]
 8009c96:	4619      	mov	r1, r3
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f002 f9ce 	bl	800c03a <USBH_AllocPipe>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	7b59      	ldrb	r1, [r3, #13]
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	7b98      	ldrb	r0, [r3, #14]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009cba:	68ba      	ldr	r2, [r7, #8]
 8009cbc:	8b12      	ldrh	r2, [r2, #24]
 8009cbe:	9202      	str	r2, [sp, #8]
 8009cc0:	2202      	movs	r2, #2
 8009cc2:	9201      	str	r2, [sp, #4]
 8009cc4:	9300      	str	r3, [sp, #0]
 8009cc6:	4623      	mov	r3, r4
 8009cc8:	4602      	mov	r2, r0
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f002 f986 	bl	800bfdc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	7b19      	ldrb	r1, [r3, #12]
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	7bd8      	ldrb	r0, [r3, #15]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009ce4:	68ba      	ldr	r2, [r7, #8]
 8009ce6:	8b52      	ldrh	r2, [r2, #26]
 8009ce8:	9202      	str	r2, [sp, #8]
 8009cea:	2202      	movs	r2, #2
 8009cec:	9201      	str	r2, [sp, #4]
 8009cee:	9300      	str	r3, [sp, #0]
 8009cf0:	4623      	mov	r3, r4
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f002 f971 	bl	800bfdc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	7b5b      	ldrb	r3, [r3, #13]
 8009d06:	2200      	movs	r2, #0
 8009d08:	4619      	mov	r1, r3
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f009 fe60 	bl	80139d0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	7b1b      	ldrb	r3, [r3, #12]
 8009d14:	2200      	movs	r2, #0
 8009d16:	4619      	mov	r1, r3
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f009 fe59 	bl	80139d0 <USBH_LL_SetToggle>

  return USBH_OK;
 8009d1e:	2300      	movs	r3, #0
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3714      	adds	r7, #20
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd90      	pop	{r4, r7, pc}

08009d28 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d36:	69db      	ldr	r3, [r3, #28]
 8009d38:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d00e      	beq.n	8009d60 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	4619      	mov	r1, r3
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f002 f966 	bl	800c01a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	4619      	mov	r1, r3
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f002 f991 	bl	800c07c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	7b1b      	ldrb	r3, [r3, #12]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d00e      	beq.n	8009d86 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	7b1b      	ldrb	r3, [r3, #12]
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f002 f953 	bl	800c01a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	7b1b      	ldrb	r3, [r3, #12]
 8009d78:	4619      	mov	r1, r3
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f002 f97e 	bl	800c07c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2200      	movs	r2, #0
 8009d84:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	7b5b      	ldrb	r3, [r3, #13]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00e      	beq.n	8009dac <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	7b5b      	ldrb	r3, [r3, #13]
 8009d92:	4619      	mov	r1, r3
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f002 f940 	bl	800c01a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	7b5b      	ldrb	r3, [r3, #13]
 8009d9e:	4619      	mov	r1, r3
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f002 f96b 	bl	800c07c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2200      	movs	r2, #0
 8009daa:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009db2:	69db      	ldr	r3, [r3, #28]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d00b      	beq.n	8009dd0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dbe:	69db      	ldr	r3, [r3, #28]
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f009 ffbb 	bl	8013d3c <free>
    phost->pActiveClass->pData = 0U;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dcc:	2200      	movs	r2, #0
 8009dce:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009dd0:	2300      	movs	r3, #0
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b084      	sub	sp, #16
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009de8:	69db      	ldr	r3, [r3, #28]
 8009dea:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	3340      	adds	r3, #64	; 0x40
 8009df0:	4619      	mov	r1, r3
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 f8da 	bl	8009fac <GetLineCoding>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009dfc:	7afb      	ldrb	r3, [r7, #11]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d105      	bne.n	8009e0e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009e08:	2102      	movs	r1, #2
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009e0e:	7afb      	ldrb	r3, [r7, #11]
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3710      	adds	r7, #16
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009e20:	2301      	movs	r3, #1
 8009e22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009e24:	2300      	movs	r3, #0
 8009e26:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e2e:	69db      	ldr	r3, [r3, #28]
 8009e30:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009e38:	2b04      	cmp	r3, #4
 8009e3a:	d877      	bhi.n	8009f2c <USBH_CDC_Process+0x114>
 8009e3c:	a201      	add	r2, pc, #4	; (adr r2, 8009e44 <USBH_CDC_Process+0x2c>)
 8009e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e42:	bf00      	nop
 8009e44:	08009e59 	.word	0x08009e59
 8009e48:	08009e5f 	.word	0x08009e5f
 8009e4c:	08009e8f 	.word	0x08009e8f
 8009e50:	08009f03 	.word	0x08009f03
 8009e54:	08009f11 	.word	0x08009f11
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8009e5c:	e06d      	b.n	8009f3a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e62:	4619      	mov	r1, r3
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 f8c0 	bl	8009fea <SetLineCoding>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009e6e:	7bbb      	ldrb	r3, [r7, #14]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d104      	bne.n	8009e7e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	2202      	movs	r2, #2
 8009e78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009e7c:	e058      	b.n	8009f30 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009e7e:	7bbb      	ldrb	r3, [r7, #14]
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d055      	beq.n	8009f30 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	2204      	movs	r2, #4
 8009e88:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009e8c:	e050      	b.n	8009f30 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	3340      	adds	r3, #64	; 0x40
 8009e92:	4619      	mov	r1, r3
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f000 f889 	bl	8009fac <GetLineCoding>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009e9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d126      	bne.n	8009ef2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009eb6:	791b      	ldrb	r3, [r3, #4]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d13b      	bne.n	8009f34 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ec6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d133      	bne.n	8009f34 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ed6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d12b      	bne.n	8009f34 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ee4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d124      	bne.n	8009f34 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 fa7a 	bl	800a3e4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009ef0:	e020      	b.n	8009f34 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009ef2:	7bbb      	ldrb	r3, [r7, #14]
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d01d      	beq.n	8009f34 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	2204      	movs	r2, #4
 8009efc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009f00:	e018      	b.n	8009f34 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 f934 	bl	800a170 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 f9c3 	bl	800a294 <CDC_ProcessReception>
      break;
 8009f0e:	e014      	b.n	8009f3a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009f10:	2100      	movs	r1, #0
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f001 fa53 	bl	800b3be <USBH_ClrFeature>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009f1c:	7bbb      	ldrb	r3, [r7, #14]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d10a      	bne.n	8009f38 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	2200      	movs	r2, #0
 8009f26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8009f2a:	e005      	b.n	8009f38 <USBH_CDC_Process+0x120>

    default:
      break;
 8009f2c:	bf00      	nop
 8009f2e:	e004      	b.n	8009f3a <USBH_CDC_Process+0x122>
      break;
 8009f30:	bf00      	nop
 8009f32:	e002      	b.n	8009f3a <USBH_CDC_Process+0x122>
      break;
 8009f34:	bf00      	nop
 8009f36:	e000      	b.n	8009f3a <USBH_CDC_Process+0x122>
      break;
 8009f38:	bf00      	nop

  }

  return status;
 8009f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3710      	adds	r7, #16
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009f4c:	2300      	movs	r3, #0
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	370c      	adds	r7, #12
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr

08009f5a <USBH_CDC_Stop>:
  *         Stop current CDC Transmission
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_CDC_Stop(USBH_HandleTypeDef *phost)
{
 8009f5a:	b580      	push	{r7, lr}
 8009f5c:	b084      	sub	sp, #16
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f68:	69db      	ldr	r3, [r3, #28]
 8009f6a:	60fb      	str	r3, [r7, #12]

  if (phost->gState == HOST_CLASS)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	2b0b      	cmp	r3, #11
 8009f74:	d115      	bne.n	8009fa2 <USBH_CDC_Stop+0x48>
  {
    CDC_Handle->state = CDC_IDLE_STATE;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	4619      	mov	r1, r3
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f002 f848 	bl	800c01a <USBH_ClosePipe>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	7b1b      	ldrb	r3, [r3, #12]
 8009f8e:	4619      	mov	r1, r3
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f002 f842 	bl	800c01a <USBH_ClosePipe>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	7b5b      	ldrb	r3, [r3, #13]
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f002 f83c 	bl	800c01a <USBH_ClosePipe>
  }
  return USBH_OK;
 8009fa2:	2300      	movs	r3, #0
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	22a1      	movs	r2, #161	; 0xa1
 8009fba:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2221      	movs	r2, #33	; 0x21
 8009fc0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2207      	movs	r2, #7
 8009fd2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	2207      	movs	r2, #7
 8009fd8:	4619      	mov	r1, r3
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f001 fcbc 	bl	800b958 <USBH_CtlReq>
 8009fe0:	4603      	mov	r3, r0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3708      	adds	r7, #8
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b082      	sub	sp, #8
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
 8009ff2:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2221      	movs	r2, #33	; 0x21
 8009ff8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2220      	movs	r2, #32
 8009ffe:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2207      	movs	r2, #7
 800a010:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	2207      	movs	r2, #7
 800a016:	4619      	mov	r1, r3
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f001 fc9d 	bl	800b958 <USBH_CtlReq>
 800a01e:	4603      	mov	r3, r0
}
 800a020:	4618      	mov	r0, r3
 800a022:	3708      	adds	r7, #8
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <USBH_CDC_SetLineCoding>:
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef USBH_CDC_SetLineCoding(USBH_HandleTypeDef *phost,
                                          CDC_LineCodingTypeDef *linecoding)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	6039      	str	r1, [r7, #0]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a038:	69db      	ldr	r3, [r3, #28]
 800a03a:	60fb      	str	r3, [r7, #12]

  if (phost->gState == HOST_CLASS)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	b2db      	uxtb	r3, r3
 800a042:	2b0b      	cmp	r3, #11
 800a044:	d114      	bne.n	800a070 <USBH_CDC_SetLineCoding+0x48>
  {
    CDC_Handle->state = CDC_SET_LINE_CODING_STATE;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2201      	movs	r2, #1
 800a04a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->pUserLineCoding = linecoding;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	683a      	ldr	r2, [r7, #0]
 800a052:	649a      	str	r2, [r3, #72]	; 0x48

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2204      	movs	r2, #4
 800a058:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a068:	2200      	movs	r2, #0
 800a06a:	4619      	mov	r1, r3
 800a06c:	f006 ffde 	bl	801102c <osMessagePut>
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }

  return USBH_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <USBH_CDC_Transmit>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Transmit(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b086      	sub	sp, #24
 800a07e:	af00      	add	r7, sp, #0
 800a080:	60f8      	str	r0, [r7, #12]
 800a082:	60b9      	str	r1, [r7, #8]
 800a084:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a086:	2301      	movs	r3, #1
 800a088:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a090:	69db      	ldr	r3, [r3, #28]
 800a092:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d004      	beq.n	800a0a8 <USBH_CDC_Transmit+0x2e>
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a0a4:	2b03      	cmp	r3, #3
 800a0a6:	d11d      	bne.n	800a0e4 <USBH_CDC_Transmit+0x6a>
  {
    CDC_Handle->pTxData = pbuff;
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	68ba      	ldr	r2, [r7, #8]
 800a0ac:	61da      	str	r2, [r3, #28]
    CDC_Handle->TxDataLength = length;
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	625a      	str	r2, [r3, #36]	; 0x24
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	2203      	movs	r2, #3
 800a0b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    Status = USBH_OK;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2204      	movs	r2, #4
 800a0cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a0dc:	2200      	movs	r2, #0
 800a0de:	4619      	mov	r1, r3
 800a0e0:	f006 ffa4 	bl	801102c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }
  return Status;
 800a0e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3718      	adds	r7, #24
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
	...

0800a0f0 <USBH_CDC_Receive>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b086      	sub	sp, #24
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	60b9      	str	r1, [r7, #8]
 800a0fa:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a106:	69db      	ldr	r3, [r3, #28]
 800a108:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a110:	2b00      	cmp	r3, #0
 800a112:	d004      	beq.n	800a11e <USBH_CDC_Receive+0x2e>
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a11a:	2b03      	cmp	r3, #3
 800a11c:	d120      	bne.n	800a160 <USBH_CDC_Receive+0x70>
  {
	icListen_rx_msg_basic_header=(icListen_wav_full_header*)pbuff;
 800a11e:	4a13      	ldr	r2, [pc, #76]	; (800a16c <USBH_CDC_Receive+0x7c>)
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	6013      	str	r3, [r2, #0]
    CDC_Handle->pRxData = pbuff;
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	68ba      	ldr	r2, [r7, #8]
 800a128:	621a      	str	r2, [r3, #32]
    CDC_Handle->RxDataLength = length;
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	629a      	str	r2, [r3, #40]	; 0x28
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	2203      	movs	r2, #3
 800a134:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	2203      	movs	r2, #3
 800a13c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    Status = USBH_OK;
 800a140:	2300      	movs	r3, #0
 800a142:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2204      	movs	r2, #4
 800a148:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a158:	2200      	movs	r2, #0
 800a15a:	4619      	mov	r1, r3
 800a15c:	f006 ff66 	bl	801102c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }
  return Status;
 800a160:	7dfb      	ldrb	r3, [r7, #23]
}
 800a162:	4618      	mov	r0, r3
 800a164:	3718      	adds	r7, #24
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	20001d6c 	.word	0x20001d6c

0800a170 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b086      	sub	sp, #24
 800a174:	af02      	add	r7, sp, #8
 800a176:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a17e:	69db      	ldr	r3, [r3, #28]
 800a180:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a182:	2300      	movs	r3, #0
 800a184:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d002      	beq.n	800a196 <CDC_ProcessTransmission+0x26>
 800a190:	2b02      	cmp	r3, #2
 800a192:	d023      	beq.n	800a1dc <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a194:	e07a      	b.n	800a28c <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19a:	68fa      	ldr	r2, [r7, #12]
 800a19c:	8b12      	ldrh	r2, [r2, #24]
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d90b      	bls.n	800a1ba <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	69d9      	ldr	r1, [r3, #28]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	8b1a      	ldrh	r2, [r3, #24]
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	7b5b      	ldrb	r3, [r3, #13]
 800a1ae:	2001      	movs	r0, #1
 800a1b0:	9000      	str	r0, [sp, #0]
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f001 fecf 	bl	800bf56 <USBH_BulkSendData>
 800a1b8:	e00b      	b.n	800a1d2 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800a1c2:	b29a      	uxth	r2, r3
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	7b5b      	ldrb	r3, [r3, #13]
 800a1c8:	2001      	movs	r0, #1
 800a1ca:	9000      	str	r0, [sp, #0]
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f001 fec2 	bl	800bf56 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2202      	movs	r2, #2
 800a1d6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a1da:	e057      	b.n	800a28c <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	7b5b      	ldrb	r3, [r3, #13]
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f009 fbca 	bl	801397c <USBH_LL_GetURBState>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a1ec:	7afb      	ldrb	r3, [r7, #11]
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	d136      	bne.n	800a260 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f6:	68fa      	ldr	r2, [r7, #12]
 800a1f8:	8b12      	ldrh	r2, [r2, #24]
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d90e      	bls.n	800a21c <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a202:	68fa      	ldr	r2, [r7, #12]
 800a204:	8b12      	ldrh	r2, [r2, #24]
 800a206:	1a9a      	subs	r2, r3, r2
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	69db      	ldr	r3, [r3, #28]
 800a210:	68fa      	ldr	r2, [r7, #12]
 800a212:	8b12      	ldrh	r2, [r2, #24]
 800a214:	441a      	add	r2, r3
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	61da      	str	r2, [r3, #28]
 800a21a:	e002      	b.n	800a222 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2200      	movs	r2, #0
 800a220:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a226:	2b00      	cmp	r3, #0
 800a228:	d004      	beq.n	800a234 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2201      	movs	r2, #1
 800a22e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800a232:	e006      	b.n	800a242 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2200      	movs	r2, #0
 800a238:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f009 f92f 	bl	80134a0 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2204      	movs	r2, #4
 800a246:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a256:	2200      	movs	r2, #0
 800a258:	4619      	mov	r1, r3
 800a25a:	f006 fee7 	bl	801102c <osMessagePut>
      break;
 800a25e:	e014      	b.n	800a28a <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800a260:	7afb      	ldrb	r3, [r7, #11]
 800a262:	2b02      	cmp	r3, #2
 800a264:	d111      	bne.n	800a28a <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2201      	movs	r2, #1
 800a26a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2204      	movs	r2, #4
 800a272:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a282:	2200      	movs	r2, #0
 800a284:	4619      	mov	r1, r3
 800a286:	f006 fed1 	bl	801102c <osMessagePut>
      break;
 800a28a:	bf00      	nop
  }
}
 800a28c:	bf00      	nop
 800a28e:	3710      	adds	r7, #16
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b086      	sub	sp, #24
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2a2:	69db      	ldr	r3, [r3, #28]
 800a2a4:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a2b0:	2b03      	cmp	r3, #3
 800a2b2:	d002      	beq.n	800a2ba <CDC_ProcessReception+0x26>
 800a2b4:	2b04      	cmp	r3, #4
 800a2b6:	d00e      	beq.n	800a2d6 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a2b8:	e085      	b.n	800a3c6 <CDC_ProcessReception+0x132>
      (void)USBH_BulkReceiveData(phost,
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	6a19      	ldr	r1, [r3, #32]
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	8b5a      	ldrh	r2, [r3, #26]
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	7b1b      	ldrb	r3, [r3, #12]
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f001 fe6a 	bl	800bfa0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	2204      	movs	r2, #4
 800a2d0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a2d4:	e077      	b.n	800a3c6 <CDC_ProcessReception+0x132>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	7b1b      	ldrb	r3, [r3, #12]
 800a2da:	4619      	mov	r1, r3
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f009 fb4d 	bl	801397c <USBH_LL_GetURBState>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a2e6:	7cfb      	ldrb	r3, [r7, #19]
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d16b      	bne.n	800a3c4 <CDC_ProcessReception+0x130>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	7b1b      	ldrb	r3, [r3, #12]
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f009 fab0 	bl	8013858 <USBH_LL_GetLastXferSize>
 800a2f8:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (CDC_Handle->RxDataLength > CDC_Handle->DataItf.InEpSize))
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2fe:	68fa      	ldr	r2, [r7, #12]
 800a300:	429a      	cmp	r2, r3
 800a302:	d04a      	beq.n	800a39a <CDC_ProcessReception+0x106>
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a308:	697a      	ldr	r2, [r7, #20]
 800a30a:	8b52      	ldrh	r2, [r2, #26]
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d944      	bls.n	800a39a <CDC_ProcessReception+0x106>
           CDC_Handle->RxDataLength -= length ;
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	1ad2      	subs	r2, r2, r3
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	629a      	str	r2, [r3, #40]	; 0x28
           CDC_Handle->pRxData += length;
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	6a1a      	ldr	r2, [r3, #32]
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	441a      	add	r2, r3
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	621a      	str	r2, [r3, #32]
           if((icListen_rx_msg_basic_header->length+6)==(USB_RX_BUFF_SIZE-CDC_Handle->RxDataLength))
 800a328:	4b29      	ldr	r3, [pc, #164]	; (800a3d0 <CDC_ProcessReception+0x13c>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	885b      	ldrh	r3, [r3, #2]
 800a32e:	b29b      	uxth	r3, r3
 800a330:	3306      	adds	r3, #6
 800a332:	461a      	mov	r2, r3
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a338:	f5c3 635a 	rsb	r3, r3, #3488	; 0xda0
 800a33c:	330c      	adds	r3, #12
 800a33e:	429a      	cmp	r2, r3
 800a340:	d126      	bne.n	800a390 <CDC_ProcessReception+0xfc>
               CDC_Handle->data_rx_state = CDC_IDLE;
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	2200      	movs	r2, #0
 800a346:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
               osMessagePut(USB_rxHandle, (uint8_t*)usb_rx_buff[usb_rx_buff_active], 0U);
 800a34a:	4b22      	ldr	r3, [pc, #136]	; (800a3d4 <CDC_ProcessReception+0x140>)
 800a34c:	6818      	ldr	r0, [r3, #0]
 800a34e:	4b22      	ldr	r3, [pc, #136]	; (800a3d8 <CDC_ProcessReception+0x144>)
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	461a      	mov	r2, r3
 800a354:	f640 53ac 	movw	r3, #3500	; 0xdac
 800a358:	fb02 f303 	mul.w	r3, r2, r3
 800a35c:	4a1f      	ldr	r2, [pc, #124]	; (800a3dc <CDC_ProcessReception+0x148>)
 800a35e:	4413      	add	r3, r2
 800a360:	2200      	movs	r2, #0
 800a362:	4619      	mov	r1, r3
 800a364:	f006 fe62 	bl	801102c <osMessagePut>
               usb_rx_buff_active++;
 800a368:	4b1b      	ldr	r3, [pc, #108]	; (800a3d8 <CDC_ProcessReception+0x144>)
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	3301      	adds	r3, #1
 800a36e:	b2da      	uxtb	r2, r3
 800a370:	4b19      	ldr	r3, [pc, #100]	; (800a3d8 <CDC_ProcessReception+0x144>)
 800a372:	701a      	strb	r2, [r3, #0]
               usb_rx_buff_active%=USB_RX_NUM_OF_BUFFERS;
 800a374:	4b18      	ldr	r3, [pc, #96]	; (800a3d8 <CDC_ProcessReception+0x144>)
 800a376:	781a      	ldrb	r2, [r3, #0]
 800a378:	4b19      	ldr	r3, [pc, #100]	; (800a3e0 <CDC_ProcessReception+0x14c>)
 800a37a:	fba3 1302 	umull	r1, r3, r3, r2
 800a37e:	0899      	lsrs	r1, r3, #2
 800a380:	460b      	mov	r3, r1
 800a382:	009b      	lsls	r3, r3, #2
 800a384:	440b      	add	r3, r1
 800a386:	1ad3      	subs	r3, r2, r3
 800a388:	b2da      	uxtb	r2, r3
 800a38a:	4b13      	ldr	r3, [pc, #76]	; (800a3d8 <CDC_ProcessReception+0x144>)
 800a38c:	701a      	strb	r2, [r3, #0]
           if((icListen_rx_msg_basic_header->length+6)==(USB_RX_BUFF_SIZE-CDC_Handle->RxDataLength))
 800a38e:	e00b      	b.n	800a3a8 <CDC_ProcessReception+0x114>
         	CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	2203      	movs	r2, #3
 800a394:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
           if((icListen_rx_msg_basic_header->length+6)==(USB_RX_BUFF_SIZE-CDC_Handle->RxDataLength))
 800a398:	e006      	b.n	800a3a8 <CDC_ProcessReception+0x114>
           CDC_Handle->data_rx_state = CDC_IDLE;
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	2200      	movs	r2, #0
 800a39e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
           USBH_CDC_ReceiveCallback(phost);
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f009 f886 	bl	80134b4 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2204      	movs	r2, #4
 800a3ac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a3bc:	2200      	movs	r2, #0
 800a3be:	4619      	mov	r1, r3
 800a3c0:	f006 fe34 	bl	801102c <osMessagePut>
      break;
 800a3c4:	bf00      	nop
  }
}
 800a3c6:	bf00      	nop
 800a3c8:	3718      	adds	r7, #24
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	20001d6c 	.word	0x20001d6c
 800a3d4:	200009a4 	.word	0x200009a4
 800a3d8:	2000c598 	.word	0x2000c598
 800a3dc:	2000813c 	.word	0x2000813c
 800a3e0:	cccccccd 	.word	0xcccccccd

0800a3e4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a3ec:	bf00      	nop
 800a3ee:	370c      	adds	r7, #12
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr

0800a3f8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800a3f8:	b5b0      	push	{r4, r5, r7, lr}
 800a3fa:	b090      	sub	sp, #64	; 0x40
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	60f8      	str	r0, [r7, #12]
 800a400:	60b9      	str	r1, [r7, #8]
 800a402:	4613      	mov	r3, r2
 800a404:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d101      	bne.n	800a410 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a40c:	2302      	movs	r3, #2
 800a40e:	e04d      	b.n	800a4ac <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	79fa      	ldrb	r2, [r7, #7]
 800a414:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2200      	movs	r2, #0
 800a41c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2200      	movs	r2, #0
 800a424:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a428:	68f8      	ldr	r0, [r7, #12]
 800a42a:	f000 f847 	bl	800a4bc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2200      	movs	r2, #0
 800a432:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2200      	movs	r2, #0
 800a43a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2200      	movs	r2, #0
 800a442:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2200      	movs	r2, #0
 800a44a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d003      	beq.n	800a45c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	68ba      	ldr	r2, [r7, #8]
 800a458:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800a45c:	4b15      	ldr	r3, [pc, #84]	; (800a4b4 <USBH_Init+0xbc>)
 800a45e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800a462:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a464:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800a468:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a46c:	2100      	movs	r1, #0
 800a46e:	4618      	mov	r0, r3
 800a470:	f006 fdb3 	bl	8010fda <osMessageCreate>
 800a474:	4602      	mov	r2, r0
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800a47c:	4b0e      	ldr	r3, [pc, #56]	; (800a4b8 <USBH_Init+0xc0>)
 800a47e:	f107 0414 	add.w	r4, r7, #20
 800a482:	461d      	mov	r5, r3
 800a484:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a488:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a48c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800a490:	f107 0314 	add.w	r3, r7, #20
 800a494:	68f9      	ldr	r1, [r7, #12]
 800a496:	4618      	mov	r0, r3
 800a498:	f006 fd3f 	bl	8010f1a <osThreadCreate>
 800a49c:	4602      	mov	r2, r0
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a4a4:	68f8      	ldr	r0, [r7, #12]
 800a4a6:	f009 f923 	bl	80136f0 <USBH_LL_Init>

  return USBH_OK;
 800a4aa:	2300      	movs	r3, #0
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3740      	adds	r7, #64	; 0x40
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bdb0      	pop	{r4, r5, r7, pc}
 800a4b4:	080167ac 	.word	0x080167ac
 800a4b8:	080167bc 	.word	0x080167bc

0800a4bc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b085      	sub	sp, #20
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	60fb      	str	r3, [r7, #12]
 800a4cc:	e009      	b.n	800a4e2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	33e0      	adds	r3, #224	; 0xe0
 800a4d4:	009b      	lsls	r3, r3, #2
 800a4d6:	4413      	add	r3, r2
 800a4d8:	2200      	movs	r2, #0
 800a4da:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	3301      	adds	r3, #1
 800a4e0:	60fb      	str	r3, [r7, #12]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2b0f      	cmp	r3, #15
 800a4e6:	d9f2      	bls.n	800a4ce <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	60fb      	str	r3, [r7, #12]
 800a4ec:	e009      	b.n	800a502 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	3301      	adds	r3, #1
 800a500:	60fb      	str	r3, [r7, #12]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a508:	d3f1      	bcc.n	800a4ee <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2200      	movs	r2, #0
 800a50e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2201      	movs	r2, #1
 800a51a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2201      	movs	r2, #1
 800a528:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2240      	movs	r2, #64	; 0x40
 800a52e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2200      	movs	r2, #0
 800a53a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2201      	movs	r2, #1
 800a542:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2200      	movs	r2, #0
 800a54a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2200      	movs	r2, #0
 800a552:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a556:	2300      	movs	r3, #0
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3714      	adds	r7, #20
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr

0800a564 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a56e:	2300      	movs	r3, #0
 800a570:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d016      	beq.n	800a5a6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d10e      	bne.n	800a5a0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a588:	1c59      	adds	r1, r3, #1
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	33de      	adds	r3, #222	; 0xde
 800a594:	6839      	ldr	r1, [r7, #0]
 800a596:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a59a:	2300      	movs	r3, #0
 800a59c:	73fb      	strb	r3, [r7, #15]
 800a59e:	e004      	b.n	800a5aa <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a5a0:	2302      	movs	r3, #2
 800a5a2:	73fb      	strb	r3, [r7, #15]
 800a5a4:	e001      	b.n	800a5aa <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a5a6:	2302      	movs	r3, #2
 800a5a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a5aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3714      	adds	r7, #20
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b085      	sub	sp, #20
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	460b      	mov	r3, r1
 800a5c2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a5ce:	78fa      	ldrb	r2, [r7, #3]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d204      	bcs.n	800a5de <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	78fa      	ldrb	r2, [r7, #3]
 800a5d8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a5dc:	e001      	b.n	800a5e2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a5de:	2302      	movs	r3, #2
 800a5e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a5e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3714      	adds	r7, #20
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b087      	sub	sp, #28
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	4608      	mov	r0, r1
 800a5fa:	4611      	mov	r1, r2
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	4603      	mov	r3, r0
 800a600:	70fb      	strb	r3, [r7, #3]
 800a602:	460b      	mov	r3, r1
 800a604:	70bb      	strb	r3, [r7, #2]
 800a606:	4613      	mov	r3, r2
 800a608:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a60a:	2300      	movs	r3, #0
 800a60c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a60e:	2300      	movs	r3, #0
 800a610:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a618:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a61a:	e025      	b.n	800a668 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a61c:	7dfb      	ldrb	r3, [r7, #23]
 800a61e:	221a      	movs	r2, #26
 800a620:	fb02 f303 	mul.w	r3, r2, r3
 800a624:	3308      	adds	r3, #8
 800a626:	68fa      	ldr	r2, [r7, #12]
 800a628:	4413      	add	r3, r2
 800a62a:	3302      	adds	r3, #2
 800a62c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	795b      	ldrb	r3, [r3, #5]
 800a632:	78fa      	ldrb	r2, [r7, #3]
 800a634:	429a      	cmp	r2, r3
 800a636:	d002      	beq.n	800a63e <USBH_FindInterface+0x4e>
 800a638:	78fb      	ldrb	r3, [r7, #3]
 800a63a:	2bff      	cmp	r3, #255	; 0xff
 800a63c:	d111      	bne.n	800a662 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a642:	78ba      	ldrb	r2, [r7, #2]
 800a644:	429a      	cmp	r2, r3
 800a646:	d002      	beq.n	800a64e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a648:	78bb      	ldrb	r3, [r7, #2]
 800a64a:	2bff      	cmp	r3, #255	; 0xff
 800a64c:	d109      	bne.n	800a662 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a652:	787a      	ldrb	r2, [r7, #1]
 800a654:	429a      	cmp	r2, r3
 800a656:	d002      	beq.n	800a65e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a658:	787b      	ldrb	r3, [r7, #1]
 800a65a:	2bff      	cmp	r3, #255	; 0xff
 800a65c:	d101      	bne.n	800a662 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a65e:	7dfb      	ldrb	r3, [r7, #23]
 800a660:	e006      	b.n	800a670 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a662:	7dfb      	ldrb	r3, [r7, #23]
 800a664:	3301      	adds	r3, #1
 800a666:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a668:	7dfb      	ldrb	r3, [r7, #23]
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d9d6      	bls.n	800a61c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a66e:	23ff      	movs	r3, #255	; 0xff
}
 800a670:	4618      	mov	r0, r3
 800a672:	371c      	adds	r7, #28
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f009 f86f 	bl	8013768 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a68a:	2101      	movs	r1, #1
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f009 f988 	bl	80139a2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a692:	2300      	movs	r3, #0
}
 800a694:	4618      	mov	r0, r3
 800a696:	3708      	adds	r7, #8
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b088      	sub	sp, #32
 800a6a0:	af04      	add	r7, sp, #16
 800a6a2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a6a4:	2302      	movs	r3, #2
 800a6a6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d102      	bne.n	800a6be <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2203      	movs	r2, #3
 800a6bc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	2b0b      	cmp	r3, #11
 800a6c6:	f200 8247 	bhi.w	800ab58 <USBH_Process+0x4bc>
 800a6ca:	a201      	add	r2, pc, #4	; (adr r2, 800a6d0 <USBH_Process+0x34>)
 800a6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6d0:	0800a701 	.word	0x0800a701
 800a6d4:	0800a74f 	.word	0x0800a74f
 800a6d8:	0800a7d3 	.word	0x0800a7d3
 800a6dc:	0800aad7 	.word	0x0800aad7
 800a6e0:	0800ab59 	.word	0x0800ab59
 800a6e4:	0800a893 	.word	0x0800a893
 800a6e8:	0800aa61 	.word	0x0800aa61
 800a6ec:	0800a8e5 	.word	0x0800a8e5
 800a6f0:	0800a921 	.word	0x0800a921
 800a6f4:	0800a95b 	.word	0x0800a95b
 800a6f8:	0800a9b9 	.word	0x0800a9b9
 800a6fc:	0800aabf 	.word	0x0800aabf
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a706:	b2db      	uxtb	r3, r3
 800a708:	2b00      	cmp	r3, #0
 800a70a:	f000 8227 	beq.w	800ab5c <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2201      	movs	r2, #1
 800a712:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a714:	20c8      	movs	r0, #200	; 0xc8
 800a716:	f009 f98b 	bl	8013a30 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f009 f881 	bl	8013822 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2200      	movs	r2, #0
 800a724:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a744:	2200      	movs	r2, #0
 800a746:	4619      	mov	r1, r3
 800a748:	f006 fc70 	bl	801102c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a74c:	e206      	b.n	800ab5c <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a754:	2b01      	cmp	r3, #1
 800a756:	d107      	bne.n	800a768 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2202      	movs	r2, #2
 800a764:	701a      	strb	r2, [r3, #0]
 800a766:	e025      	b.n	800a7b4 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a76e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a772:	d914      	bls.n	800a79e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a77a:	3301      	adds	r3, #1
 800a77c:	b2da      	uxtb	r2, r3
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a78a:	2b03      	cmp	r3, #3
 800a78c:	d903      	bls.n	800a796 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	220d      	movs	r2, #13
 800a792:	701a      	strb	r2, [r3, #0]
 800a794:	e00e      	b.n	800a7b4 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2200      	movs	r2, #0
 800a79a:	701a      	strb	r2, [r3, #0]
 800a79c:	e00a      	b.n	800a7b4 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a7a4:	f103 020a 	add.w	r2, r3, #10
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a7ae:	200a      	movs	r0, #10
 800a7b0:	f009 f93e 	bl	8013a30 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	f006 fc2e 	bl	801102c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a7d0:	e1cb      	b.n	800ab6a <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d005      	beq.n	800a7e8 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a7e2:	2104      	movs	r1, #4
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a7e8:	2064      	movs	r0, #100	; 0x64
 800a7ea:	f009 f921 	bl	8013a30 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f008 fff0 	bl	80137d4 <USBH_LL_GetSpeed>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2205      	movs	r2, #5
 800a802:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a804:	2100      	movs	r1, #0
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f001 fc17 	bl	800c03a <USBH_AllocPipe>
 800a80c:	4603      	mov	r3, r0
 800a80e:	461a      	mov	r2, r3
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a814:	2180      	movs	r1, #128	; 0x80
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f001 fc0f 	bl	800c03a <USBH_AllocPipe>
 800a81c:	4603      	mov	r3, r0
 800a81e:	461a      	mov	r2, r3
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	7919      	ldrb	r1, [r3, #4]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a838:	b292      	uxth	r2, r2
 800a83a:	9202      	str	r2, [sp, #8]
 800a83c:	2200      	movs	r2, #0
 800a83e:	9201      	str	r2, [sp, #4]
 800a840:	9300      	str	r3, [sp, #0]
 800a842:	4603      	mov	r3, r0
 800a844:	2280      	movs	r2, #128	; 0x80
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f001 fbc8 	bl	800bfdc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	7959      	ldrb	r1, [r3, #5]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a860:	b292      	uxth	r2, r2
 800a862:	9202      	str	r2, [sp, #8]
 800a864:	2200      	movs	r2, #0
 800a866:	9201      	str	r2, [sp, #4]
 800a868:	9300      	str	r3, [sp, #0]
 800a86a:	4603      	mov	r3, r0
 800a86c:	2200      	movs	r2, #0
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f001 fbb4 	bl	800bfdc <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2201      	movs	r2, #1
 800a878:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a888:	2200      	movs	r2, #0
 800a88a:	4619      	mov	r1, r3
 800a88c:	f006 fbce 	bl	801102c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a890:	e16b      	b.n	800ab6a <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 f96e 	bl	800ab74 <USBH_HandleEnum>
 800a898:	4603      	mov	r3, r0
 800a89a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a89c:	7bbb      	ldrb	r3, [r7, #14]
 800a89e:	b2db      	uxtb	r3, r3
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	f040 815d 	bne.w	800ab60 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	d103      	bne.n	800a8c0 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2208      	movs	r2, #8
 800a8bc:	701a      	strb	r2, [r3, #0]
 800a8be:	e002      	b.n	800a8c6 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2207      	movs	r2, #7
 800a8c4:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2205      	movs	r2, #5
 800a8ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a8da:	2200      	movs	r2, #0
 800a8dc:	4619      	mov	r1, r3
 800a8de:	f006 fba5 	bl	801102c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a8e2:	e13d      	b.n	800ab60 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	f000 813a 	beq.w	800ab64 <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a8f6:	2101      	movs	r1, #1
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2208      	movs	r2, #8
 800a900:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2205      	movs	r2, #5
 800a906:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a916:	2200      	movs	r2, #0
 800a918:	4619      	mov	r1, r3
 800a91a:	f006 fb87 	bl	801102c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800a91e:	e121      	b.n	800ab64 <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a926:	b29b      	uxth	r3, r3
 800a928:	4619      	mov	r1, r3
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 fd00 	bl	800b330 <USBH_SetCfg>
 800a930:	4603      	mov	r3, r0
 800a932:	2b00      	cmp	r3, #0
 800a934:	d102      	bne.n	800a93c <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2209      	movs	r2, #9
 800a93a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2201      	movs	r2, #1
 800a940:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a950:	2200      	movs	r2, #0
 800a952:	4619      	mov	r1, r3
 800a954:	f006 fb6a 	bl	801102c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a958:	e107      	b.n	800ab6a <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a960:	f003 0320 	and.w	r3, r3, #32
 800a964:	2b00      	cmp	r3, #0
 800a966:	d015      	beq.n	800a994 <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a968:	2101      	movs	r1, #1
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f000 fd03 	bl	800b376 <USBH_SetFeature>
 800a970:	4603      	mov	r3, r0
 800a972:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a974:	7bbb      	ldrb	r3, [r7, #14]
 800a976:	b2db      	uxtb	r3, r3
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d103      	bne.n	800a984 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	220a      	movs	r2, #10
 800a980:	701a      	strb	r2, [r3, #0]
 800a982:	e00a      	b.n	800a99a <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800a984:	7bbb      	ldrb	r3, [r7, #14]
 800a986:	b2db      	uxtb	r3, r3
 800a988:	2b03      	cmp	r3, #3
 800a98a:	d106      	bne.n	800a99a <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	220a      	movs	r2, #10
 800a990:	701a      	strb	r2, [r3, #0]
 800a992:	e002      	b.n	800a99a <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	220a      	movs	r2, #10
 800a998:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2201      	movs	r2, #1
 800a99e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	f006 fb3b 	bl	801102c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a9b6:	e0d8      	b.n	800ab6a <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d03f      	beq.n	800aa42 <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	73fb      	strb	r3, [r7, #15]
 800a9ce:	e016      	b.n	800a9fe <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a9d0:	7bfa      	ldrb	r2, [r7, #15]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	32de      	adds	r2, #222	; 0xde
 800a9d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9da:	791a      	ldrb	r2, [r3, #4]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d108      	bne.n	800a9f8 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a9e6:	7bfa      	ldrb	r2, [r7, #15]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	32de      	adds	r2, #222	; 0xde
 800a9ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a9f6:	e005      	b.n	800aa04 <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a9f8:	7bfb      	ldrb	r3, [r7, #15]
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	73fb      	strb	r3, [r7, #15]
 800a9fe:	7bfb      	ldrb	r3, [r7, #15]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d0e5      	beq.n	800a9d0 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d016      	beq.n	800aa3c <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa14:	689b      	ldr	r3, [r3, #8]
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	4798      	blx	r3
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d109      	bne.n	800aa34 <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2206      	movs	r2, #6
 800aa24:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aa2c:	2103      	movs	r1, #3
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	4798      	blx	r3
 800aa32:	e006      	b.n	800aa42 <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	220d      	movs	r2, #13
 800aa38:	701a      	strb	r2, [r3, #0]
 800aa3a:	e002      	b.n	800aa42 <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	220d      	movs	r2, #13
 800aa40:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2205      	movs	r2, #5
 800aa46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aa56:	2200      	movs	r2, #0
 800aa58:	4619      	mov	r1, r3
 800aa5a:	f006 fae7 	bl	801102c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aa5e:	e084      	b.n	800ab6a <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d017      	beq.n	800aa9a <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa70:	691b      	ldr	r3, [r3, #16]
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	4798      	blx	r3
 800aa76:	4603      	mov	r3, r0
 800aa78:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800aa7a:	7bbb      	ldrb	r3, [r7, #14]
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d103      	bne.n	800aa8a <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	220b      	movs	r2, #11
 800aa86:	701a      	strb	r2, [r3, #0]
 800aa88:	e00a      	b.n	800aaa0 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 800aa8a:	7bbb      	ldrb	r3, [r7, #14]
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	2b02      	cmp	r3, #2
 800aa90:	d106      	bne.n	800aaa0 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	220d      	movs	r2, #13
 800aa96:	701a      	strb	r2, [r3, #0]
 800aa98:	e002      	b.n	800aaa0 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	220d      	movs	r2, #13
 800aa9e:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2205      	movs	r2, #5
 800aaa4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aab4:	2200      	movs	r2, #0
 800aab6:	4619      	mov	r1, r3
 800aab8:	f006 fab8 	bl	801102c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aabc:	e055      	b.n	800ab6a <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d04f      	beq.n	800ab68 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aace:	695b      	ldr	r3, [r3, #20]
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	4798      	blx	r3
      }
      break;
 800aad4:	e048      	b.n	800ab68 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f7ff fcec 	bl	800a4bc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d009      	beq.n	800ab02 <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2200      	movs	r2, #0
 800aafe:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d005      	beq.n	800ab18 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab12:	2105      	movs	r1, #5
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d107      	bne.n	800ab34 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2200      	movs	r2, #0
 800ab28:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f7ff fda5 	bl	800a67c <USBH_Start>
 800ab32:	e002      	b.n	800ab3a <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f008 fe17 	bl	8013768 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ab4e:	2200      	movs	r2, #0
 800ab50:	4619      	mov	r1, r3
 800ab52:	f006 fa6b 	bl	801102c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ab56:	e008      	b.n	800ab6a <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 800ab58:	bf00      	nop
 800ab5a:	e006      	b.n	800ab6a <USBH_Process+0x4ce>
      break;
 800ab5c:	bf00      	nop
 800ab5e:	e004      	b.n	800ab6a <USBH_Process+0x4ce>
      break;
 800ab60:	bf00      	nop
 800ab62:	e002      	b.n	800ab6a <USBH_Process+0x4ce>
    break;
 800ab64:	bf00      	nop
 800ab66:	e000      	b.n	800ab6a <USBH_Process+0x4ce>
      break;
 800ab68:	bf00      	nop
  }
  return USBH_OK;
 800ab6a:	2300      	movs	r3, #0
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3710      	adds	r7, #16
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b088      	sub	sp, #32
 800ab78:	af04      	add	r7, sp, #16
 800ab7a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ab80:	2301      	movs	r3, #1
 800ab82:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	785b      	ldrb	r3, [r3, #1]
 800ab88:	2b07      	cmp	r3, #7
 800ab8a:	f200 8208 	bhi.w	800af9e <USBH_HandleEnum+0x42a>
 800ab8e:	a201      	add	r2, pc, #4	; (adr r2, 800ab94 <USBH_HandleEnum+0x20>)
 800ab90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab94:	0800abb5 	.word	0x0800abb5
 800ab98:	0800ac73 	.word	0x0800ac73
 800ab9c:	0800acdd 	.word	0x0800acdd
 800aba0:	0800ad6b 	.word	0x0800ad6b
 800aba4:	0800add5 	.word	0x0800add5
 800aba8:	0800ae45 	.word	0x0800ae45
 800abac:	0800aee1 	.word	0x0800aee1
 800abb0:	0800af5f 	.word	0x0800af5f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800abb4:	2108      	movs	r1, #8
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 faea 	bl	800b190 <USBH_Get_DevDesc>
 800abbc:	4603      	mov	r3, r0
 800abbe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800abc0:	7bbb      	ldrb	r3, [r7, #14]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d130      	bne.n	800ac28 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2201      	movs	r2, #1
 800abd4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	7919      	ldrb	r1, [r3, #4]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800abe6:	687a      	ldr	r2, [r7, #4]
 800abe8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800abea:	b292      	uxth	r2, r2
 800abec:	9202      	str	r2, [sp, #8]
 800abee:	2200      	movs	r2, #0
 800abf0:	9201      	str	r2, [sp, #4]
 800abf2:	9300      	str	r3, [sp, #0]
 800abf4:	4603      	mov	r3, r0
 800abf6:	2280      	movs	r2, #128	; 0x80
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f001 f9ef 	bl	800bfdc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	7959      	ldrb	r1, [r3, #5]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ac12:	b292      	uxth	r2, r2
 800ac14:	9202      	str	r2, [sp, #8]
 800ac16:	2200      	movs	r2, #0
 800ac18:	9201      	str	r2, [sp, #4]
 800ac1a:	9300      	str	r3, [sp, #0]
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2200      	movs	r2, #0
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f001 f9db 	bl	800bfdc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ac26:	e1bc      	b.n	800afa2 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac28:	7bbb      	ldrb	r3, [r7, #14]
 800ac2a:	2b03      	cmp	r3, #3
 800ac2c:	f040 81b9 	bne.w	800afa2 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac36:	3301      	adds	r3, #1
 800ac38:	b2da      	uxtb	r2, r3
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac46:	2b03      	cmp	r3, #3
 800ac48:	d903      	bls.n	800ac52 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	220d      	movs	r2, #13
 800ac4e:	701a      	strb	r2, [r3, #0]
      break;
 800ac50:	e1a7      	b.n	800afa2 <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	795b      	ldrb	r3, [r3, #5]
 800ac56:	4619      	mov	r1, r3
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f001 fa0f 	bl	800c07c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	791b      	ldrb	r3, [r3, #4]
 800ac62:	4619      	mov	r1, r3
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f001 fa09 	bl	800c07c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	701a      	strb	r2, [r3, #0]
      break;
 800ac70:	e197      	b.n	800afa2 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ac72:	2112      	movs	r1, #18
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 fa8b 	bl	800b190 <USBH_Get_DevDesc>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ac7e:	7bbb      	ldrb	r3, [r7, #14]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d103      	bne.n	800ac8c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2202      	movs	r2, #2
 800ac88:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ac8a:	e18c      	b.n	800afa6 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac8c:	7bbb      	ldrb	r3, [r7, #14]
 800ac8e:	2b03      	cmp	r3, #3
 800ac90:	f040 8189 	bne.w	800afa6 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	b2da      	uxtb	r2, r3
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800acaa:	2b03      	cmp	r3, #3
 800acac:	d903      	bls.n	800acb6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	220d      	movs	r2, #13
 800acb2:	701a      	strb	r2, [r3, #0]
      break;
 800acb4:	e177      	b.n	800afa6 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	795b      	ldrb	r3, [r3, #5]
 800acba:	4619      	mov	r1, r3
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f001 f9dd 	bl	800c07c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	791b      	ldrb	r3, [r3, #4]
 800acc6:	4619      	mov	r1, r3
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f001 f9d7 	bl	800c07c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2200      	movs	r2, #0
 800acd2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2200      	movs	r2, #0
 800acd8:	701a      	strb	r2, [r3, #0]
      break;
 800acda:	e164      	b.n	800afa6 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800acdc:	2101      	movs	r1, #1
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 fb02 	bl	800b2e8 <USBH_SetAddress>
 800ace4:	4603      	mov	r3, r0
 800ace6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ace8:	7bbb      	ldrb	r3, [r7, #14]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d132      	bne.n	800ad54 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800acee:	2002      	movs	r0, #2
 800acf0:	f008 fe9e 	bl	8013a30 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2201      	movs	r2, #1
 800acf8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2203      	movs	r2, #3
 800ad00:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	7919      	ldrb	r1, [r3, #4]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ad12:	687a      	ldr	r2, [r7, #4]
 800ad14:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ad16:	b292      	uxth	r2, r2
 800ad18:	9202      	str	r2, [sp, #8]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	9201      	str	r2, [sp, #4]
 800ad1e:	9300      	str	r3, [sp, #0]
 800ad20:	4603      	mov	r3, r0
 800ad22:	2280      	movs	r2, #128	; 0x80
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f001 f959 	bl	800bfdc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	7959      	ldrb	r1, [r3, #5]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ad3a:	687a      	ldr	r2, [r7, #4]
 800ad3c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ad3e:	b292      	uxth	r2, r2
 800ad40:	9202      	str	r2, [sp, #8]
 800ad42:	2200      	movs	r2, #0
 800ad44:	9201      	str	r2, [sp, #4]
 800ad46:	9300      	str	r3, [sp, #0]
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f001 f945 	bl	800bfdc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ad52:	e12a      	b.n	800afaa <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad54:	7bbb      	ldrb	r3, [r7, #14]
 800ad56:	2b03      	cmp	r3, #3
 800ad58:	f040 8127 	bne.w	800afaa <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	220d      	movs	r2, #13
 800ad60:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2200      	movs	r2, #0
 800ad66:	705a      	strb	r2, [r3, #1]
      break;
 800ad68:	e11f      	b.n	800afaa <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ad6a:	2109      	movs	r1, #9
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 fa37 	bl	800b1e0 <USBH_Get_CfgDesc>
 800ad72:	4603      	mov	r3, r0
 800ad74:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ad76:	7bbb      	ldrb	r3, [r7, #14]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d103      	bne.n	800ad84 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2204      	movs	r2, #4
 800ad80:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ad82:	e114      	b.n	800afae <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad84:	7bbb      	ldrb	r3, [r7, #14]
 800ad86:	2b03      	cmp	r3, #3
 800ad88:	f040 8111 	bne.w	800afae <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ad92:	3301      	adds	r3, #1
 800ad94:	b2da      	uxtb	r2, r3
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ada2:	2b03      	cmp	r3, #3
 800ada4:	d903      	bls.n	800adae <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	220d      	movs	r2, #13
 800adaa:	701a      	strb	r2, [r3, #0]
      break;
 800adac:	e0ff      	b.n	800afae <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	795b      	ldrb	r3, [r3, #5]
 800adb2:	4619      	mov	r1, r3
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f001 f961 	bl	800c07c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	791b      	ldrb	r3, [r3, #4]
 800adbe:	4619      	mov	r1, r3
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f001 f95b 	bl	800c07c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	701a      	strb	r2, [r3, #0]
      break;
 800add2:	e0ec      	b.n	800afae <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800adda:	4619      	mov	r1, r3
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 f9ff 	bl	800b1e0 <USBH_Get_CfgDesc>
 800ade2:	4603      	mov	r3, r0
 800ade4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ade6:	7bbb      	ldrb	r3, [r7, #14]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d103      	bne.n	800adf4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2205      	movs	r2, #5
 800adf0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800adf2:	e0de      	b.n	800afb2 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800adf4:	7bbb      	ldrb	r3, [r7, #14]
 800adf6:	2b03      	cmp	r3, #3
 800adf8:	f040 80db 	bne.w	800afb2 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ae02:	3301      	adds	r3, #1
 800ae04:	b2da      	uxtb	r2, r3
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ae12:	2b03      	cmp	r3, #3
 800ae14:	d903      	bls.n	800ae1e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	220d      	movs	r2, #13
 800ae1a:	701a      	strb	r2, [r3, #0]
      break;
 800ae1c:	e0c9      	b.n	800afb2 <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	795b      	ldrb	r3, [r3, #5]
 800ae22:	4619      	mov	r1, r3
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f001 f929 	bl	800c07c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	791b      	ldrb	r3, [r3, #4]
 800ae2e:	4619      	mov	r1, r3
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f001 f923 	bl	800c07c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	701a      	strb	r2, [r3, #0]
      break;
 800ae42:	e0b6      	b.n	800afb2 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d036      	beq.n	800aebc <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ae5a:	23ff      	movs	r3, #255	; 0xff
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 f9e3 	bl	800b228 <USBH_Get_StringDesc>
 800ae62:	4603      	mov	r3, r0
 800ae64:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ae66:	7bbb      	ldrb	r3, [r7, #14]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d111      	bne.n	800ae90 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2206      	movs	r2, #6
 800ae70:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2205      	movs	r2, #5
 800ae76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae86:	2200      	movs	r2, #0
 800ae88:	4619      	mov	r1, r3
 800ae8a:	f006 f8cf 	bl	801102c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ae8e:	e092      	b.n	800afb6 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ae90:	7bbb      	ldrb	r3, [r7, #14]
 800ae92:	2b03      	cmp	r3, #3
 800ae94:	f040 808f 	bne.w	800afb6 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2206      	movs	r2, #6
 800ae9c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2205      	movs	r2, #5
 800aea2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	4619      	mov	r1, r3
 800aeb6:	f006 f8b9 	bl	801102c <osMessagePut>
      break;
 800aeba:	e07c      	b.n	800afb6 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2206      	movs	r2, #6
 800aec0:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2205      	movs	r2, #5
 800aec6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aed6:	2200      	movs	r2, #0
 800aed8:	4619      	mov	r1, r3
 800aeda:	f006 f8a7 	bl	801102c <osMessagePut>
      break;
 800aede:	e06a      	b.n	800afb6 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d027      	beq.n	800af3a <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800aef6:	23ff      	movs	r3, #255	; 0xff
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 f995 	bl	800b228 <USBH_Get_StringDesc>
 800aefe:	4603      	mov	r3, r0
 800af00:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800af02:	7bbb      	ldrb	r3, [r7, #14]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d103      	bne.n	800af10 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2207      	movs	r2, #7
 800af0c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800af0e:	e054      	b.n	800afba <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af10:	7bbb      	ldrb	r3, [r7, #14]
 800af12:	2b03      	cmp	r3, #3
 800af14:	d151      	bne.n	800afba <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2207      	movs	r2, #7
 800af1a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2205      	movs	r2, #5
 800af20:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800af30:	2200      	movs	r2, #0
 800af32:	4619      	mov	r1, r3
 800af34:	f006 f87a 	bl	801102c <osMessagePut>
      break;
 800af38:	e03f      	b.n	800afba <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2207      	movs	r2, #7
 800af3e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2205      	movs	r2, #5
 800af44:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800af54:	2200      	movs	r2, #0
 800af56:	4619      	mov	r1, r3
 800af58:	f006 f868 	bl	801102c <osMessagePut>
      break;
 800af5c:	e02d      	b.n	800afba <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800af64:	2b00      	cmp	r3, #0
 800af66:	d017      	beq.n	800af98 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800af74:	23ff      	movs	r3, #255	; 0xff
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f000 f956 	bl	800b228 <USBH_Get_StringDesc>
 800af7c:	4603      	mov	r3, r0
 800af7e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800af80:	7bbb      	ldrb	r3, [r7, #14]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d102      	bne.n	800af8c <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800af86:	2300      	movs	r3, #0
 800af88:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800af8a:	e018      	b.n	800afbe <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af8c:	7bbb      	ldrb	r3, [r7, #14]
 800af8e:	2b03      	cmp	r3, #3
 800af90:	d115      	bne.n	800afbe <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800af92:	2300      	movs	r3, #0
 800af94:	73fb      	strb	r3, [r7, #15]
      break;
 800af96:	e012      	b.n	800afbe <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800af98:	2300      	movs	r3, #0
 800af9a:	73fb      	strb	r3, [r7, #15]
      break;
 800af9c:	e00f      	b.n	800afbe <USBH_HandleEnum+0x44a>

    default:
      break;
 800af9e:	bf00      	nop
 800afa0:	e00e      	b.n	800afc0 <USBH_HandleEnum+0x44c>
      break;
 800afa2:	bf00      	nop
 800afa4:	e00c      	b.n	800afc0 <USBH_HandleEnum+0x44c>
      break;
 800afa6:	bf00      	nop
 800afa8:	e00a      	b.n	800afc0 <USBH_HandleEnum+0x44c>
      break;
 800afaa:	bf00      	nop
 800afac:	e008      	b.n	800afc0 <USBH_HandleEnum+0x44c>
      break;
 800afae:	bf00      	nop
 800afb0:	e006      	b.n	800afc0 <USBH_HandleEnum+0x44c>
      break;
 800afb2:	bf00      	nop
 800afb4:	e004      	b.n	800afc0 <USBH_HandleEnum+0x44c>
      break;
 800afb6:	bf00      	nop
 800afb8:	e002      	b.n	800afc0 <USBH_HandleEnum+0x44c>
      break;
 800afba:	bf00      	nop
 800afbc:	e000      	b.n	800afc0 <USBH_HandleEnum+0x44c>
      break;
 800afbe:	bf00      	nop
  }
  return Status;
 800afc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3710      	adds	r7, #16
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
 800afca:	bf00      	nop

0800afcc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800afcc:	b480      	push	{r7}
 800afce:	b083      	sub	sp, #12
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	683a      	ldr	r2, [r7, #0]
 800afda:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800afde:	bf00      	nop
 800afe0:	370c      	adds	r7, #12
 800afe2:	46bd      	mov	sp, r7
 800afe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe8:	4770      	bx	lr

0800afea <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800afea:	b580      	push	{r7, lr}
 800afec:	b082      	sub	sp, #8
 800afee:	af00      	add	r7, sp, #0
 800aff0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aff8:	1c5a      	adds	r2, r3, #1
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f000 f804 	bl	800b00e <USBH_HandleSof>
}
 800b006:	bf00      	nop
 800b008:	3708      	adds	r7, #8
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}

0800b00e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b00e:	b580      	push	{r7, lr}
 800b010:	b082      	sub	sp, #8
 800b012:	af00      	add	r7, sp, #0
 800b014:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	781b      	ldrb	r3, [r3, #0]
 800b01a:	b2db      	uxtb	r3, r3
 800b01c:	2b0b      	cmp	r3, #11
 800b01e:	d10a      	bne.n	800b036 <USBH_HandleSof+0x28>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b026:	2b00      	cmp	r3, #0
 800b028:	d005      	beq.n	800b036 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b030:	699b      	ldr	r3, [r3, #24]
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	4798      	blx	r3
  }
}
 800b036:	bf00      	nop
 800b038:	3708      	adds	r7, #8
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b03e:	b580      	push	{r7, lr}
 800b040:	b082      	sub	sp, #8
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2201      	movs	r2, #1
 800b04a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2201      	movs	r2, #1
 800b052:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b062:	2200      	movs	r2, #0
 800b064:	4619      	mov	r1, r3
 800b066:	f005 ffe1 	bl	801102c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800b06a:	bf00      	nop
}
 800b06c:	3708      	adds	r7, #8
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}

0800b072 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b072:	b480      	push	{r7}
 800b074:	b083      	sub	sp, #12
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2200      	movs	r2, #0
 800b07e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b082:	bf00      	nop
}
 800b084:	370c      	adds	r7, #12
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr

0800b08e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b08e:	b580      	push	{r7, lr}
 800b090:	b082      	sub	sp, #8
 800b092:	af00      	add	r7, sp, #0
 800b094:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2201      	movs	r2, #1
 800b09a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	f005 ffb1 	bl	801102c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b0ca:	2300      	movs	r3, #0
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3708      	adds	r7, #8
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2201      	movs	r2, #1
 800b0e0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f008 fb52 	bl	801379e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	791b      	ldrb	r3, [r3, #4]
 800b0fe:	4619      	mov	r1, r3
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f000 ffbb 	bl	800c07c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	795b      	ldrb	r3, [r3, #5]
 800b10a:	4619      	mov	r1, r3
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 ffb5 	bl	800c07c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2201      	movs	r2, #1
 800b116:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b126:	2200      	movs	r2, #0
 800b128:	4619      	mov	r1, r3
 800b12a:	f005 ff7f 	bl	801102c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b12e:	2300      	movs	r3, #0
}
 800b130:	4618      	mov	r0, r3
 800b132:	3708      	adds	r7, #8
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}

0800b138 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b086      	sub	sp, #24
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800b146:	f107 030c 	add.w	r3, r7, #12
 800b14a:	f04f 32ff 	mov.w	r2, #4294967295
 800b14e:	4618      	mov	r0, r3
 800b150:	f005 ffac 	bl	80110ac <osMessageGet>
    if (event.status == osEventMessage)
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2b10      	cmp	r3, #16
 800b158:	d1f2      	bne.n	800b140 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f7ff fa9e 	bl	800a69c <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800b160:	e7ee      	b.n	800b140 <USBH_Process_OS+0x8>

0800b162 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b082      	sub	sp, #8
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2201      	movs	r2, #1
 800b16e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b17e:	2200      	movs	r2, #0
 800b180:	4619      	mov	r1, r3
 800b182:	f005 ff53 	bl	801102c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800b186:	2300      	movs	r3, #0
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3708      	adds	r7, #8
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b086      	sub	sp, #24
 800b194:	af02      	add	r7, sp, #8
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	460b      	mov	r3, r1
 800b19a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b1a2:	78fb      	ldrb	r3, [r7, #3]
 800b1a4:	b29b      	uxth	r3, r3
 800b1a6:	9300      	str	r3, [sp, #0]
 800b1a8:	4613      	mov	r3, r2
 800b1aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b1ae:	2100      	movs	r1, #0
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f000 f864 	bl	800b27e <USBH_GetDescriptor>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800b1ba:	7bfb      	ldrb	r3, [r7, #15]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d10a      	bne.n	800b1d6 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b1cc:	78fa      	ldrb	r2, [r7, #3]
 800b1ce:	b292      	uxth	r2, r2
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	f000 f918 	bl	800b406 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b1d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3710      	adds	r7, #16
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b086      	sub	sp, #24
 800b1e4:	af02      	add	r7, sp, #8
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	460b      	mov	r3, r1
 800b1ea:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	331c      	adds	r3, #28
 800b1f0:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b1f2:	887b      	ldrh	r3, [r7, #2]
 800b1f4:	9300      	str	r3, [sp, #0]
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b1fc:	2100      	movs	r1, #0
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 f83d 	bl	800b27e <USBH_GetDescriptor>
 800b204:	4603      	mov	r3, r0
 800b206:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b208:	7bfb      	ldrb	r3, [r7, #15]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d107      	bne.n	800b21e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b20e:	887b      	ldrh	r3, [r7, #2]
 800b210:	461a      	mov	r2, r3
 800b212:	68b9      	ldr	r1, [r7, #8]
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f000 f987 	bl	800b528 <USBH_ParseCfgDesc>
 800b21a:	4603      	mov	r3, r0
 800b21c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b21e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b220:	4618      	mov	r0, r3
 800b222:	3710      	adds	r7, #16
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b088      	sub	sp, #32
 800b22c:	af02      	add	r7, sp, #8
 800b22e:	60f8      	str	r0, [r7, #12]
 800b230:	607a      	str	r2, [r7, #4]
 800b232:	461a      	mov	r2, r3
 800b234:	460b      	mov	r3, r1
 800b236:	72fb      	strb	r3, [r7, #11]
 800b238:	4613      	mov	r3, r2
 800b23a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800b23c:	7afb      	ldrb	r3, [r7, #11]
 800b23e:	b29b      	uxth	r3, r3
 800b240:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b244:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b24c:	893b      	ldrh	r3, [r7, #8]
 800b24e:	9300      	str	r3, [sp, #0]
 800b250:	460b      	mov	r3, r1
 800b252:	2100      	movs	r1, #0
 800b254:	68f8      	ldr	r0, [r7, #12]
 800b256:	f000 f812 	bl	800b27e <USBH_GetDescriptor>
 800b25a:	4603      	mov	r3, r0
 800b25c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b25e:	7dfb      	ldrb	r3, [r7, #23]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d107      	bne.n	800b274 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b26a:	893a      	ldrh	r2, [r7, #8]
 800b26c:	6879      	ldr	r1, [r7, #4]
 800b26e:	4618      	mov	r0, r3
 800b270:	f000 fb24 	bl	800b8bc <USBH_ParseStringDesc>
  }

  return status;
 800b274:	7dfb      	ldrb	r3, [r7, #23]
}
 800b276:	4618      	mov	r0, r3
 800b278:	3718      	adds	r7, #24
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}

0800b27e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b27e:	b580      	push	{r7, lr}
 800b280:	b084      	sub	sp, #16
 800b282:	af00      	add	r7, sp, #0
 800b284:	60f8      	str	r0, [r7, #12]
 800b286:	607b      	str	r3, [r7, #4]
 800b288:	460b      	mov	r3, r1
 800b28a:	72fb      	strb	r3, [r7, #11]
 800b28c:	4613      	mov	r3, r2
 800b28e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	789b      	ldrb	r3, [r3, #2]
 800b294:	2b01      	cmp	r3, #1
 800b296:	d11c      	bne.n	800b2d2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b298:	7afb      	ldrb	r3, [r7, #11]
 800b29a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b29e:	b2da      	uxtb	r2, r3
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2206      	movs	r2, #6
 800b2a8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	893a      	ldrh	r2, [r7, #8]
 800b2ae:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b2b0:	893b      	ldrh	r3, [r7, #8]
 800b2b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b2b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b2ba:	d104      	bne.n	800b2c6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f240 4209 	movw	r2, #1033	; 0x409
 800b2c2:	829a      	strh	r2, [r3, #20]
 800b2c4:	e002      	b.n	800b2cc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	8b3a      	ldrh	r2, [r7, #24]
 800b2d0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b2d2:	8b3b      	ldrh	r3, [r7, #24]
 800b2d4:	461a      	mov	r2, r3
 800b2d6:	6879      	ldr	r1, [r7, #4]
 800b2d8:	68f8      	ldr	r0, [r7, #12]
 800b2da:	f000 fb3d 	bl	800b958 <USBH_CtlReq>
 800b2de:	4603      	mov	r3, r0
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3710      	adds	r7, #16
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}

0800b2e8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b082      	sub	sp, #8
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	789b      	ldrb	r3, [r3, #2]
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d10f      	bne.n	800b31c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2200      	movs	r2, #0
 800b300:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2205      	movs	r2, #5
 800b306:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b308:	78fb      	ldrb	r3, [r7, #3]
 800b30a:	b29a      	uxth	r2, r3
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2200      	movs	r2, #0
 800b314:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2200      	movs	r2, #0
 800b31a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b31c:	2200      	movs	r2, #0
 800b31e:	2100      	movs	r1, #0
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f000 fb19 	bl	800b958 <USBH_CtlReq>
 800b326:	4603      	mov	r3, r0
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3708      	adds	r7, #8
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b082      	sub	sp, #8
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	460b      	mov	r3, r1
 800b33a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	789b      	ldrb	r3, [r3, #2]
 800b340:	2b01      	cmp	r3, #1
 800b342:	d10e      	bne.n	800b362 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2200      	movs	r2, #0
 800b348:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2209      	movs	r2, #9
 800b34e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	887a      	ldrh	r2, [r7, #2]
 800b354:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2200      	movs	r2, #0
 800b35a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2200      	movs	r2, #0
 800b360:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b362:	2200      	movs	r2, #0
 800b364:	2100      	movs	r1, #0
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f000 faf6 	bl	800b958 <USBH_CtlReq>
 800b36c:	4603      	mov	r3, r0
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3708      	adds	r7, #8
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}

0800b376 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b376:	b580      	push	{r7, lr}
 800b378:	b082      	sub	sp, #8
 800b37a:	af00      	add	r7, sp, #0
 800b37c:	6078      	str	r0, [r7, #4]
 800b37e:	460b      	mov	r3, r1
 800b380:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	789b      	ldrb	r3, [r3, #2]
 800b386:	2b01      	cmp	r3, #1
 800b388:	d10f      	bne.n	800b3aa <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2200      	movs	r2, #0
 800b38e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2203      	movs	r2, #3
 800b394:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b396:	78fb      	ldrb	r3, [r7, #3]
 800b398:	b29a      	uxth	r2, r3
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	2100      	movs	r1, #0
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 fad2 	bl	800b958 <USBH_CtlReq>
 800b3b4:	4603      	mov	r3, r0
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3708      	adds	r7, #8
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}

0800b3be <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b3be:	b580      	push	{r7, lr}
 800b3c0:	b082      	sub	sp, #8
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	6078      	str	r0, [r7, #4]
 800b3c6:	460b      	mov	r3, r1
 800b3c8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	789b      	ldrb	r3, [r3, #2]
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d10f      	bne.n	800b3f2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2202      	movs	r2, #2
 800b3d6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2201      	movs	r2, #1
 800b3dc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b3e4:	78fb      	ldrb	r3, [r7, #3]
 800b3e6:	b29a      	uxth	r2, r3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	2100      	movs	r1, #0
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f000 faae 	bl	800b958 <USBH_CtlReq>
 800b3fc:	4603      	mov	r3, r0
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3708      	adds	r7, #8
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}

0800b406 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b406:	b480      	push	{r7}
 800b408:	b085      	sub	sp, #20
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	60f8      	str	r0, [r7, #12]
 800b40e:	60b9      	str	r1, [r7, #8]
 800b410:	4613      	mov	r3, r2
 800b412:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	781a      	ldrb	r2, [r3, #0]
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	785a      	ldrb	r2, [r3, #1]
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	3302      	adds	r3, #2
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	b29a      	uxth	r2, r3
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	3303      	adds	r3, #3
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	b29b      	uxth	r3, r3
 800b434:	021b      	lsls	r3, r3, #8
 800b436:	b29b      	uxth	r3, r3
 800b438:	4313      	orrs	r3, r2
 800b43a:	b29a      	uxth	r2, r3
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	791a      	ldrb	r2, [r3, #4]
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	795a      	ldrb	r2, [r3, #5]
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	799a      	ldrb	r2, [r3, #6]
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	79da      	ldrb	r2, [r3, #7]
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	79db      	ldrb	r3, [r3, #7]
 800b464:	2b20      	cmp	r3, #32
 800b466:	dc11      	bgt.n	800b48c <USBH_ParseDevDesc+0x86>
 800b468:	2b08      	cmp	r3, #8
 800b46a:	db16      	blt.n	800b49a <USBH_ParseDevDesc+0x94>
 800b46c:	3b08      	subs	r3, #8
 800b46e:	2201      	movs	r2, #1
 800b470:	fa02 f303 	lsl.w	r3, r2, r3
 800b474:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800b478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	bf14      	ite	ne
 800b480:	2301      	movne	r3, #1
 800b482:	2300      	moveq	r3, #0
 800b484:	b2db      	uxtb	r3, r3
 800b486:	2b00      	cmp	r3, #0
 800b488:	d102      	bne.n	800b490 <USBH_ParseDevDesc+0x8a>
 800b48a:	e006      	b.n	800b49a <USBH_ParseDevDesc+0x94>
 800b48c:	2b40      	cmp	r3, #64	; 0x40
 800b48e:	d104      	bne.n	800b49a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	79da      	ldrb	r2, [r3, #7]
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	71da      	strb	r2, [r3, #7]
      break;
 800b498:	e003      	b.n	800b4a2 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2240      	movs	r2, #64	; 0x40
 800b49e:	71da      	strb	r2, [r3, #7]
      break;
 800b4a0:	bf00      	nop
  }

  if (length > 8U)
 800b4a2:	88fb      	ldrh	r3, [r7, #6]
 800b4a4:	2b08      	cmp	r3, #8
 800b4a6:	d939      	bls.n	800b51c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	3308      	adds	r3, #8
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	b29a      	uxth	r2, r3
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	3309      	adds	r3, #9
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	b29b      	uxth	r3, r3
 800b4b8:	021b      	lsls	r3, r3, #8
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	4313      	orrs	r3, r2
 800b4be:	b29a      	uxth	r2, r3
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	330a      	adds	r3, #10
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	b29a      	uxth	r2, r3
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	330b      	adds	r3, #11
 800b4d0:	781b      	ldrb	r3, [r3, #0]
 800b4d2:	b29b      	uxth	r3, r3
 800b4d4:	021b      	lsls	r3, r3, #8
 800b4d6:	b29b      	uxth	r3, r3
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	b29a      	uxth	r2, r3
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	330c      	adds	r3, #12
 800b4e4:	781b      	ldrb	r3, [r3, #0]
 800b4e6:	b29a      	uxth	r2, r3
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	330d      	adds	r3, #13
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	b29b      	uxth	r3, r3
 800b4f0:	021b      	lsls	r3, r3, #8
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	b29a      	uxth	r2, r3
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	7b9a      	ldrb	r2, [r3, #14]
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	7bda      	ldrb	r2, [r3, #15]
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	7c1a      	ldrb	r2, [r3, #16]
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	7c5a      	ldrb	r2, [r3, #17]
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	745a      	strb	r2, [r3, #17]
  }
}
 800b51c:	bf00      	nop
 800b51e:	3714      	adds	r7, #20
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr

0800b528 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b08c      	sub	sp, #48	; 0x30
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	60b9      	str	r1, [r7, #8]
 800b532:	4613      	mov	r3, r2
 800b534:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b53c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b53e:	2300      	movs	r3, #0
 800b540:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b548:	2300      	movs	r3, #0
 800b54a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800b54e:	2300      	movs	r3, #0
 800b550:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	781a      	ldrb	r2, [r3, #0]
 800b55c:	6a3b      	ldr	r3, [r7, #32]
 800b55e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	785a      	ldrb	r2, [r3, #1]
 800b564:	6a3b      	ldr	r3, [r7, #32]
 800b566:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	3302      	adds	r3, #2
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	b29a      	uxth	r2, r3
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	3303      	adds	r3, #3
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	b29b      	uxth	r3, r3
 800b578:	021b      	lsls	r3, r3, #8
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	4313      	orrs	r3, r2
 800b57e:	b29b      	uxth	r3, r3
 800b580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b584:	bf28      	it	cs
 800b586:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800b58a:	b29a      	uxth	r2, r3
 800b58c:	6a3b      	ldr	r3, [r7, #32]
 800b58e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	791a      	ldrb	r2, [r3, #4]
 800b594:	6a3b      	ldr	r3, [r7, #32]
 800b596:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	795a      	ldrb	r2, [r3, #5]
 800b59c:	6a3b      	ldr	r3, [r7, #32]
 800b59e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	799a      	ldrb	r2, [r3, #6]
 800b5a4:	6a3b      	ldr	r3, [r7, #32]
 800b5a6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	79da      	ldrb	r2, [r3, #7]
 800b5ac:	6a3b      	ldr	r3, [r7, #32]
 800b5ae:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	7a1a      	ldrb	r2, [r3, #8]
 800b5b4:	6a3b      	ldr	r3, [r7, #32]
 800b5b6:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800b5b8:	6a3b      	ldr	r3, [r7, #32]
 800b5ba:	781b      	ldrb	r3, [r3, #0]
 800b5bc:	2b09      	cmp	r3, #9
 800b5be:	d002      	beq.n	800b5c6 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b5c0:	6a3b      	ldr	r3, [r7, #32]
 800b5c2:	2209      	movs	r2, #9
 800b5c4:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b5c6:	88fb      	ldrh	r3, [r7, #6]
 800b5c8:	2b09      	cmp	r3, #9
 800b5ca:	f240 809d 	bls.w	800b708 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800b5ce:	2309      	movs	r3, #9
 800b5d0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b5d6:	e081      	b.n	800b6dc <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b5d8:	f107 0316 	add.w	r3, r7, #22
 800b5dc:	4619      	mov	r1, r3
 800b5de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5e0:	f000 f99f 	bl	800b922 <USBH_GetNextDesc>
 800b5e4:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e8:	785b      	ldrb	r3, [r3, #1]
 800b5ea:	2b04      	cmp	r3, #4
 800b5ec:	d176      	bne.n	800b6dc <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	2b09      	cmp	r3, #9
 800b5f4:	d002      	beq.n	800b5fc <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f8:	2209      	movs	r2, #9
 800b5fa:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b5fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b600:	221a      	movs	r2, #26
 800b602:	fb02 f303 	mul.w	r3, r2, r3
 800b606:	3308      	adds	r3, #8
 800b608:	6a3a      	ldr	r2, [r7, #32]
 800b60a:	4413      	add	r3, r2
 800b60c:	3302      	adds	r3, #2
 800b60e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b610:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b612:	69f8      	ldr	r0, [r7, #28]
 800b614:	f000 f87e 	bl	800b714 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b618:	2300      	movs	r3, #0
 800b61a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b61e:	2300      	movs	r3, #0
 800b620:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b622:	e043      	b.n	800b6ac <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b624:	f107 0316 	add.w	r3, r7, #22
 800b628:	4619      	mov	r1, r3
 800b62a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b62c:	f000 f979 	bl	800b922 <USBH_GetNextDesc>
 800b630:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b634:	785b      	ldrb	r3, [r3, #1]
 800b636:	2b05      	cmp	r3, #5
 800b638:	d138      	bne.n	800b6ac <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800b63a:	69fb      	ldr	r3, [r7, #28]
 800b63c:	795b      	ldrb	r3, [r3, #5]
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d10f      	bne.n	800b662 <USBH_ParseCfgDesc+0x13a>
 800b642:	69fb      	ldr	r3, [r7, #28]
 800b644:	799b      	ldrb	r3, [r3, #6]
 800b646:	2b02      	cmp	r3, #2
 800b648:	d10b      	bne.n	800b662 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b64a:	69fb      	ldr	r3, [r7, #28]
 800b64c:	79db      	ldrb	r3, [r3, #7]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d10f      	bne.n	800b672 <USBH_ParseCfgDesc+0x14a>
 800b652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b654:	781b      	ldrb	r3, [r3, #0]
 800b656:	2b09      	cmp	r3, #9
 800b658:	d00b      	beq.n	800b672 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800b65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65c:	2209      	movs	r2, #9
 800b65e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b660:	e007      	b.n	800b672 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800b662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	2b07      	cmp	r3, #7
 800b668:	d004      	beq.n	800b674 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b66c:	2207      	movs	r2, #7
 800b66e:	701a      	strb	r2, [r3, #0]
 800b670:	e000      	b.n	800b674 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b672:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b678:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b67c:	3201      	adds	r2, #1
 800b67e:	00d2      	lsls	r2, r2, #3
 800b680:	211a      	movs	r1, #26
 800b682:	fb01 f303 	mul.w	r3, r1, r3
 800b686:	4413      	add	r3, r2
 800b688:	3308      	adds	r3, #8
 800b68a:	6a3a      	ldr	r2, [r7, #32]
 800b68c:	4413      	add	r3, r2
 800b68e:	3304      	adds	r3, #4
 800b690:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b692:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b694:	69b9      	ldr	r1, [r7, #24]
 800b696:	68f8      	ldr	r0, [r7, #12]
 800b698:	f000 f86b 	bl	800b772 <USBH_ParseEPDesc>
 800b69c:	4603      	mov	r3, r0
 800b69e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800b6a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b6ac:	69fb      	ldr	r3, [r7, #28]
 800b6ae:	791b      	ldrb	r3, [r3, #4]
 800b6b0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d204      	bcs.n	800b6c2 <USBH_ParseCfgDesc+0x19a>
 800b6b8:	6a3b      	ldr	r3, [r7, #32]
 800b6ba:	885a      	ldrh	r2, [r3, #2]
 800b6bc:	8afb      	ldrh	r3, [r7, #22]
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d8b0      	bhi.n	800b624 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b6c2:	69fb      	ldr	r3, [r7, #28]
 800b6c4:	791b      	ldrb	r3, [r3, #4]
 800b6c6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d201      	bcs.n	800b6d2 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800b6ce:	2303      	movs	r3, #3
 800b6d0:	e01c      	b.n	800b70c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800b6d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b6dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	d805      	bhi.n	800b6f0 <USBH_ParseCfgDesc+0x1c8>
 800b6e4:	6a3b      	ldr	r3, [r7, #32]
 800b6e6:	885a      	ldrh	r2, [r3, #2]
 800b6e8:	8afb      	ldrh	r3, [r7, #22]
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	f63f af74 	bhi.w	800b5d8 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b6f0:	6a3b      	ldr	r3, [r7, #32]
 800b6f2:	791b      	ldrb	r3, [r3, #4]
 800b6f4:	2b02      	cmp	r3, #2
 800b6f6:	bf28      	it	cs
 800b6f8:	2302      	movcs	r3, #2
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b700:	429a      	cmp	r2, r3
 800b702:	d201      	bcs.n	800b708 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800b704:	2303      	movs	r3, #3
 800b706:	e001      	b.n	800b70c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800b708:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3730      	adds	r7, #48	; 0x30
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b714:	b480      	push	{r7}
 800b716:	b083      	sub	sp, #12
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	781a      	ldrb	r2, [r3, #0]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	785a      	ldrb	r2, [r3, #1]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	789a      	ldrb	r2, [r3, #2]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	78da      	ldrb	r2, [r3, #3]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	791a      	ldrb	r2, [r3, #4]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	795a      	ldrb	r2, [r3, #5]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	799a      	ldrb	r2, [r3, #6]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	79da      	ldrb	r2, [r3, #7]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	7a1a      	ldrb	r2, [r3, #8]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	721a      	strb	r2, [r3, #8]
}
 800b766:	bf00      	nop
 800b768:	370c      	adds	r7, #12
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr

0800b772 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800b772:	b480      	push	{r7}
 800b774:	b087      	sub	sp, #28
 800b776:	af00      	add	r7, sp, #0
 800b778:	60f8      	str	r0, [r7, #12]
 800b77a:	60b9      	str	r1, [r7, #8]
 800b77c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b77e:	2300      	movs	r3, #0
 800b780:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	781a      	ldrb	r2, [r3, #0]
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	785a      	ldrb	r2, [r3, #1]
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	789a      	ldrb	r2, [r3, #2]
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	78da      	ldrb	r2, [r3, #3]
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	3304      	adds	r3, #4
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	b29a      	uxth	r2, r3
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	3305      	adds	r3, #5
 800b7ae:	781b      	ldrb	r3, [r3, #0]
 800b7b0:	b29b      	uxth	r3, r3
 800b7b2:	021b      	lsls	r3, r3, #8
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	b29a      	uxth	r2, r3
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	799a      	ldrb	r2, [r3, #6]
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	889b      	ldrh	r3, [r3, #4]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d102      	bne.n	800b7d4 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800b7ce:	2303      	movs	r3, #3
 800b7d0:	75fb      	strb	r3, [r7, #23]
 800b7d2:	e033      	b.n	800b83c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	889b      	ldrh	r3, [r3, #4]
 800b7d8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b7dc:	f023 0307 	bic.w	r3, r3, #7
 800b7e0:	b29a      	uxth	r2, r3
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	889b      	ldrh	r3, [r3, #4]
 800b7ea:	b21a      	sxth	r2, r3
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	3304      	adds	r3, #4
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	b299      	uxth	r1, r3
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	3305      	adds	r3, #5
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	b29b      	uxth	r3, r3
 800b7fc:	021b      	lsls	r3, r3, #8
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	430b      	orrs	r3, r1
 800b802:	b29b      	uxth	r3, r3
 800b804:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d110      	bne.n	800b82e <USBH_ParseEPDesc+0xbc>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	3304      	adds	r3, #4
 800b810:	781b      	ldrb	r3, [r3, #0]
 800b812:	b299      	uxth	r1, r3
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	3305      	adds	r3, #5
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	021b      	lsls	r3, r3, #8
 800b81e:	b29b      	uxth	r3, r3
 800b820:	430b      	orrs	r3, r1
 800b822:	b29b      	uxth	r3, r3
 800b824:	b21b      	sxth	r3, r3
 800b826:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b82a:	b21b      	sxth	r3, r3
 800b82c:	e001      	b.n	800b832 <USBH_ParseEPDesc+0xc0>
 800b82e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b832:	4313      	orrs	r3, r2
 800b834:	b21b      	sxth	r3, r3
 800b836:	b29a      	uxth	r2, r3
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b842:	2b00      	cmp	r3, #0
 800b844:	d116      	bne.n	800b874 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	78db      	ldrb	r3, [r3, #3]
 800b84a:	f003 0303 	and.w	r3, r3, #3
 800b84e:	2b01      	cmp	r3, #1
 800b850:	d005      	beq.n	800b85e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	78db      	ldrb	r3, [r3, #3]
 800b856:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b85a:	2b03      	cmp	r3, #3
 800b85c:	d127      	bne.n	800b8ae <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	799b      	ldrb	r3, [r3, #6]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d003      	beq.n	800b86e <USBH_ParseEPDesc+0xfc>
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	799b      	ldrb	r3, [r3, #6]
 800b86a:	2b10      	cmp	r3, #16
 800b86c:	d91f      	bls.n	800b8ae <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b86e:	2303      	movs	r3, #3
 800b870:	75fb      	strb	r3, [r7, #23]
 800b872:	e01c      	b.n	800b8ae <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	78db      	ldrb	r3, [r3, #3]
 800b878:	f003 0303 	and.w	r3, r3, #3
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d10a      	bne.n	800b896 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	799b      	ldrb	r3, [r3, #6]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d003      	beq.n	800b890 <USBH_ParseEPDesc+0x11e>
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	799b      	ldrb	r3, [r3, #6]
 800b88c:	2b10      	cmp	r3, #16
 800b88e:	d90e      	bls.n	800b8ae <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b890:	2303      	movs	r3, #3
 800b892:	75fb      	strb	r3, [r7, #23]
 800b894:	e00b      	b.n	800b8ae <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	78db      	ldrb	r3, [r3, #3]
 800b89a:	f003 0303 	and.w	r3, r3, #3
 800b89e:	2b03      	cmp	r3, #3
 800b8a0:	d105      	bne.n	800b8ae <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	799b      	ldrb	r3, [r3, #6]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d101      	bne.n	800b8ae <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b8aa:	2303      	movs	r3, #3
 800b8ac:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800b8ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	371c      	adds	r7, #28
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr

0800b8bc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b087      	sub	sp, #28
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	60f8      	str	r0, [r7, #12]
 800b8c4:	60b9      	str	r1, [r7, #8]
 800b8c6:	4613      	mov	r3, r2
 800b8c8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	781b      	ldrb	r3, [r3, #0]
 800b8d0:	2b03      	cmp	r3, #3
 800b8d2:	d120      	bne.n	800b916 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	1e9a      	subs	r2, r3, #2
 800b8da:	88fb      	ldrh	r3, [r7, #6]
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	bf28      	it	cs
 800b8e0:	4613      	movcs	r3, r2
 800b8e2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	3302      	adds	r3, #2
 800b8e8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	82fb      	strh	r3, [r7, #22]
 800b8ee:	e00b      	b.n	800b908 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b8f0:	8afb      	ldrh	r3, [r7, #22]
 800b8f2:	68fa      	ldr	r2, [r7, #12]
 800b8f4:	4413      	add	r3, r2
 800b8f6:	781a      	ldrb	r2, [r3, #0]
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	3301      	adds	r3, #1
 800b900:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b902:	8afb      	ldrh	r3, [r7, #22]
 800b904:	3302      	adds	r3, #2
 800b906:	82fb      	strh	r3, [r7, #22]
 800b908:	8afa      	ldrh	r2, [r7, #22]
 800b90a:	8abb      	ldrh	r3, [r7, #20]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d3ef      	bcc.n	800b8f0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	2200      	movs	r2, #0
 800b914:	701a      	strb	r2, [r3, #0]
  }
}
 800b916:	bf00      	nop
 800b918:	371c      	adds	r7, #28
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr

0800b922 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b922:	b480      	push	{r7}
 800b924:	b085      	sub	sp, #20
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
 800b92a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	881a      	ldrh	r2, [r3, #0]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	781b      	ldrb	r3, [r3, #0]
 800b934:	b29b      	uxth	r3, r3
 800b936:	4413      	add	r3, r2
 800b938:	b29a      	uxth	r2, r3
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	4413      	add	r3, r2
 800b948:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b94a:	68fb      	ldr	r3, [r7, #12]
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3714      	adds	r7, #20
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr

0800b958 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b086      	sub	sp, #24
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	60b9      	str	r1, [r7, #8]
 800b962:	4613      	mov	r3, r2
 800b964:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b966:	2301      	movs	r3, #1
 800b968:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	789b      	ldrb	r3, [r3, #2]
 800b96e:	2b01      	cmp	r3, #1
 800b970:	d002      	beq.n	800b978 <USBH_CtlReq+0x20>
 800b972:	2b02      	cmp	r3, #2
 800b974:	d01d      	beq.n	800b9b2 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800b976:	e043      	b.n	800ba00 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	68ba      	ldr	r2, [r7, #8]
 800b97c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	88fa      	ldrh	r2, [r7, #6]
 800b982:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2201      	movs	r2, #1
 800b988:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2202      	movs	r2, #2
 800b98e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b990:	2301      	movs	r3, #1
 800b992:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2203      	movs	r2, #3
 800b998:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	f005 fb3e 	bl	801102c <osMessagePut>
      break;
 800b9b0:	e026      	b.n	800ba00 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800b9b2:	68f8      	ldr	r0, [r7, #12]
 800b9b4:	f000 f82a 	bl	800ba0c <USBH_HandleControl>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b9bc:	7dfb      	ldrb	r3, [r7, #23]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d002      	beq.n	800b9c8 <USBH_CtlReq+0x70>
 800b9c2:	7dfb      	ldrb	r3, [r7, #23]
 800b9c4:	2b03      	cmp	r3, #3
 800b9c6:	d106      	bne.n	800b9d6 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	761a      	strb	r2, [r3, #24]
 800b9d4:	e005      	b.n	800b9e2 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800b9d6:	7dfb      	ldrb	r3, [r7, #23]
 800b9d8:	2b02      	cmp	r3, #2
 800b9da:	d102      	bne.n	800b9e2 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2201      	movs	r2, #1
 800b9e0:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2203      	movs	r2, #3
 800b9e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	f005 fb17 	bl	801102c <osMessagePut>
      break;
 800b9fe:	bf00      	nop
  }
  return status;
 800ba00:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3718      	adds	r7, #24
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
	...

0800ba0c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b086      	sub	sp, #24
 800ba10:	af02      	add	r7, sp, #8
 800ba12:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ba14:	2301      	movs	r3, #1
 800ba16:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	7e1b      	ldrb	r3, [r3, #24]
 800ba20:	3b01      	subs	r3, #1
 800ba22:	2b0a      	cmp	r3, #10
 800ba24:	f200 8229 	bhi.w	800be7a <USBH_HandleControl+0x46e>
 800ba28:	a201      	add	r2, pc, #4	; (adr r2, 800ba30 <USBH_HandleControl+0x24>)
 800ba2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba2e:	bf00      	nop
 800ba30:	0800ba5d 	.word	0x0800ba5d
 800ba34:	0800ba77 	.word	0x0800ba77
 800ba38:	0800bb19 	.word	0x0800bb19
 800ba3c:	0800bb3f 	.word	0x0800bb3f
 800ba40:	0800bbcb 	.word	0x0800bbcb
 800ba44:	0800bbf5 	.word	0x0800bbf5
 800ba48:	0800bcb7 	.word	0x0800bcb7
 800ba4c:	0800bcd9 	.word	0x0800bcd9
 800ba50:	0800bd6b 	.word	0x0800bd6b
 800ba54:	0800bd91 	.word	0x0800bd91
 800ba58:	0800be23 	.word	0x0800be23
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f103 0110 	add.w	r1, r3, #16
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	795b      	ldrb	r3, [r3, #5]
 800ba66:	461a      	mov	r2, r3
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f000 fa17 	bl	800be9c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2202      	movs	r2, #2
 800ba72:	761a      	strb	r2, [r3, #24]
      break;
 800ba74:	e20c      	b.n	800be90 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	795b      	ldrb	r3, [r3, #5]
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f007 ff7d 	bl	801397c <USBH_LL_GetURBState>
 800ba82:	4603      	mov	r3, r0
 800ba84:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ba86:	7bbb      	ldrb	r3, [r7, #14]
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d12c      	bne.n	800bae6 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	7c1b      	ldrb	r3, [r3, #16]
 800ba90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ba94:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	8adb      	ldrh	r3, [r3, #22]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d00a      	beq.n	800bab4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ba9e:	7b7b      	ldrb	r3, [r7, #13]
 800baa0:	2b80      	cmp	r3, #128	; 0x80
 800baa2:	d103      	bne.n	800baac <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2203      	movs	r2, #3
 800baa8:	761a      	strb	r2, [r3, #24]
 800baaa:	e00d      	b.n	800bac8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2205      	movs	r2, #5
 800bab0:	761a      	strb	r2, [r3, #24]
 800bab2:	e009      	b.n	800bac8 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800bab4:	7b7b      	ldrb	r3, [r7, #13]
 800bab6:	2b80      	cmp	r3, #128	; 0x80
 800bab8:	d103      	bne.n	800bac2 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2209      	movs	r2, #9
 800babe:	761a      	strb	r2, [r3, #24]
 800bac0:	e002      	b.n	800bac8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2207      	movs	r2, #7
 800bac6:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2203      	movs	r2, #3
 800bacc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800badc:	2200      	movs	r2, #0
 800bade:	4619      	mov	r1, r3
 800bae0:	f005 faa4 	bl	801102c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bae4:	e1cb      	b.n	800be7e <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800bae6:	7bbb      	ldrb	r3, [r7, #14]
 800bae8:	2b04      	cmp	r3, #4
 800baea:	d003      	beq.n	800baf4 <USBH_HandleControl+0xe8>
 800baec:	7bbb      	ldrb	r3, [r7, #14]
 800baee:	2b02      	cmp	r3, #2
 800baf0:	f040 81c5 	bne.w	800be7e <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	220b      	movs	r2, #11
 800baf8:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2203      	movs	r2, #3
 800bafe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bb0e:	2200      	movs	r2, #0
 800bb10:	4619      	mov	r1, r3
 800bb12:	f005 fa8b 	bl	801102c <osMessagePut>
      break;
 800bb16:	e1b2      	b.n	800be7e <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bb1e:	b29a      	uxth	r2, r3
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6899      	ldr	r1, [r3, #8]
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	899a      	ldrh	r2, [r3, #12]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	791b      	ldrb	r3, [r3, #4]
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f000 f9f2 	bl	800bf1a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2204      	movs	r2, #4
 800bb3a:	761a      	strb	r2, [r3, #24]
      break;
 800bb3c:	e1a8      	b.n	800be90 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	791b      	ldrb	r3, [r3, #4]
 800bb42:	4619      	mov	r1, r3
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f007 ff19 	bl	801397c <USBH_LL_GetURBState>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800bb4e:	7bbb      	ldrb	r3, [r7, #14]
 800bb50:	2b01      	cmp	r3, #1
 800bb52:	d110      	bne.n	800bb76 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2209      	movs	r2, #9
 800bb58:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2203      	movs	r2, #3
 800bb5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bb6e:	2200      	movs	r2, #0
 800bb70:	4619      	mov	r1, r3
 800bb72:	f005 fa5b 	bl	801102c <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800bb76:	7bbb      	ldrb	r3, [r7, #14]
 800bb78:	2b05      	cmp	r3, #5
 800bb7a:	d110      	bne.n	800bb9e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800bb7c:	2303      	movs	r3, #3
 800bb7e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2203      	movs	r2, #3
 800bb84:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bb94:	2200      	movs	r2, #0
 800bb96:	4619      	mov	r1, r3
 800bb98:	f005 fa48 	bl	801102c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bb9c:	e171      	b.n	800be82 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800bb9e:	7bbb      	ldrb	r3, [r7, #14]
 800bba0:	2b04      	cmp	r3, #4
 800bba2:	f040 816e 	bne.w	800be82 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	220b      	movs	r2, #11
 800bbaa:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2203      	movs	r2, #3
 800bbb0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	f005 fa32 	bl	801102c <osMessagePut>
      break;
 800bbc8:	e15b      	b.n	800be82 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6899      	ldr	r1, [r3, #8]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	899a      	ldrh	r2, [r3, #12]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	795b      	ldrb	r3, [r3, #5]
 800bbd6:	2001      	movs	r0, #1
 800bbd8:	9000      	str	r0, [sp, #0]
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 f978 	bl	800bed0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bbe6:	b29a      	uxth	r2, r3
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2206      	movs	r2, #6
 800bbf0:	761a      	strb	r2, [r3, #24]
      break;
 800bbf2:	e14d      	b.n	800be90 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	795b      	ldrb	r3, [r3, #5]
 800bbf8:	4619      	mov	r1, r3
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f007 febe 	bl	801397c <USBH_LL_GetURBState>
 800bc00:	4603      	mov	r3, r0
 800bc02:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bc04:	7bbb      	ldrb	r3, [r7, #14]
 800bc06:	2b01      	cmp	r3, #1
 800bc08:	d111      	bne.n	800bc2e <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2207      	movs	r2, #7
 800bc0e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2203      	movs	r2, #3
 800bc14:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bc24:	2200      	movs	r2, #0
 800bc26:	4619      	mov	r1, r3
 800bc28:	f005 fa00 	bl	801102c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bc2c:	e12b      	b.n	800be86 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800bc2e:	7bbb      	ldrb	r3, [r7, #14]
 800bc30:	2b05      	cmp	r3, #5
 800bc32:	d113      	bne.n	800bc5c <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	220c      	movs	r2, #12
 800bc38:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800bc3a:	2303      	movs	r3, #3
 800bc3c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2203      	movs	r2, #3
 800bc42:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bc52:	2200      	movs	r2, #0
 800bc54:	4619      	mov	r1, r3
 800bc56:	f005 f9e9 	bl	801102c <osMessagePut>
      break;
 800bc5a:	e114      	b.n	800be86 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bc5c:	7bbb      	ldrb	r3, [r7, #14]
 800bc5e:	2b02      	cmp	r3, #2
 800bc60:	d111      	bne.n	800bc86 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2205      	movs	r2, #5
 800bc66:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2203      	movs	r2, #3
 800bc6c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	4619      	mov	r1, r3
 800bc80:	f005 f9d4 	bl	801102c <osMessagePut>
      break;
 800bc84:	e0ff      	b.n	800be86 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800bc86:	7bbb      	ldrb	r3, [r7, #14]
 800bc88:	2b04      	cmp	r3, #4
 800bc8a:	f040 80fc 	bne.w	800be86 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	220b      	movs	r2, #11
 800bc92:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800bc94:	2302      	movs	r3, #2
 800bc96:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2203      	movs	r2, #3
 800bc9c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bcac:	2200      	movs	r2, #0
 800bcae:	4619      	mov	r1, r3
 800bcb0:	f005 f9bc 	bl	801102c <osMessagePut>
      break;
 800bcb4:	e0e7      	b.n	800be86 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	791b      	ldrb	r3, [r3, #4]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	2100      	movs	r1, #0
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f000 f92b 	bl	800bf1a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bcca:	b29a      	uxth	r2, r3
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2208      	movs	r2, #8
 800bcd4:	761a      	strb	r2, [r3, #24]

      break;
 800bcd6:	e0db      	b.n	800be90 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	791b      	ldrb	r3, [r3, #4]
 800bcdc:	4619      	mov	r1, r3
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f007 fe4c 	bl	801397c <USBH_LL_GetURBState>
 800bce4:	4603      	mov	r3, r0
 800bce6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bce8:	7bbb      	ldrb	r3, [r7, #14]
 800bcea:	2b01      	cmp	r3, #1
 800bcec:	d113      	bne.n	800bd16 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	220d      	movs	r2, #13
 800bcf2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2203      	movs	r2, #3
 800bcfc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	4619      	mov	r1, r3
 800bd10:	f005 f98c 	bl	801102c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bd14:	e0b9      	b.n	800be8a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800bd16:	7bbb      	ldrb	r3, [r7, #14]
 800bd18:	2b04      	cmp	r3, #4
 800bd1a:	d111      	bne.n	800bd40 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	220b      	movs	r2, #11
 800bd20:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2203      	movs	r2, #3
 800bd26:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bd36:	2200      	movs	r2, #0
 800bd38:	4619      	mov	r1, r3
 800bd3a:	f005 f977 	bl	801102c <osMessagePut>
      break;
 800bd3e:	e0a4      	b.n	800be8a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800bd40:	7bbb      	ldrb	r3, [r7, #14]
 800bd42:	2b05      	cmp	r3, #5
 800bd44:	f040 80a1 	bne.w	800be8a <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800bd48:	2303      	movs	r3, #3
 800bd4a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2203      	movs	r2, #3
 800bd50:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bd60:	2200      	movs	r2, #0
 800bd62:	4619      	mov	r1, r3
 800bd64:	f005 f962 	bl	801102c <osMessagePut>
      break;
 800bd68:	e08f      	b.n	800be8a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	795b      	ldrb	r3, [r3, #5]
 800bd6e:	2201      	movs	r2, #1
 800bd70:	9200      	str	r2, [sp, #0]
 800bd72:	2200      	movs	r2, #0
 800bd74:	2100      	movs	r1, #0
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f000 f8aa 	bl	800bed0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bd82:	b29a      	uxth	r2, r3
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	220a      	movs	r2, #10
 800bd8c:	761a      	strb	r2, [r3, #24]
      break;
 800bd8e:	e07f      	b.n	800be90 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	795b      	ldrb	r3, [r3, #5]
 800bd94:	4619      	mov	r1, r3
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f007 fdf0 	bl	801397c <USBH_LL_GetURBState>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bda0:	7bbb      	ldrb	r3, [r7, #14]
 800bda2:	2b01      	cmp	r3, #1
 800bda4:	d113      	bne.n	800bdce <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800bda6:	2300      	movs	r3, #0
 800bda8:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	220d      	movs	r2, #13
 800bdae:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2203      	movs	r2, #3
 800bdb4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	f005 f930 	bl	801102c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bdcc:	e05f      	b.n	800be8e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bdce:	7bbb      	ldrb	r3, [r7, #14]
 800bdd0:	2b02      	cmp	r3, #2
 800bdd2:	d111      	bne.n	800bdf8 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2209      	movs	r2, #9
 800bdd8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2203      	movs	r2, #3
 800bdde:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bdee:	2200      	movs	r2, #0
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	f005 f91b 	bl	801102c <osMessagePut>
      break;
 800bdf6:	e04a      	b.n	800be8e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800bdf8:	7bbb      	ldrb	r3, [r7, #14]
 800bdfa:	2b04      	cmp	r3, #4
 800bdfc:	d147      	bne.n	800be8e <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	220b      	movs	r2, #11
 800be02:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2203      	movs	r2, #3
 800be08:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800be18:	2200      	movs	r2, #0
 800be1a:	4619      	mov	r1, r3
 800be1c:	f005 f906 	bl	801102c <osMessagePut>
      break;
 800be20:	e035      	b.n	800be8e <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	7e5b      	ldrb	r3, [r3, #25]
 800be26:	3301      	adds	r3, #1
 800be28:	b2da      	uxtb	r2, r3
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	765a      	strb	r2, [r3, #25]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	7e5b      	ldrb	r3, [r3, #25]
 800be32:	2b02      	cmp	r3, #2
 800be34:	d806      	bhi.n	800be44 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2201      	movs	r2, #1
 800be3a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2201      	movs	r2, #1
 800be40:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800be42:	e025      	b.n	800be90 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800be4a:	2106      	movs	r1, #6
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2200      	movs	r2, #0
 800be54:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	795b      	ldrb	r3, [r3, #5]
 800be5a:	4619      	mov	r1, r3
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f000 f90d 	bl	800c07c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	791b      	ldrb	r3, [r3, #4]
 800be66:	4619      	mov	r1, r3
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 f907 	bl	800c07c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2200      	movs	r2, #0
 800be72:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800be74:	2302      	movs	r3, #2
 800be76:	73fb      	strb	r3, [r7, #15]
      break;
 800be78:	e00a      	b.n	800be90 <USBH_HandleControl+0x484>

    default:
      break;
 800be7a:	bf00      	nop
 800be7c:	e008      	b.n	800be90 <USBH_HandleControl+0x484>
      break;
 800be7e:	bf00      	nop
 800be80:	e006      	b.n	800be90 <USBH_HandleControl+0x484>
      break;
 800be82:	bf00      	nop
 800be84:	e004      	b.n	800be90 <USBH_HandleControl+0x484>
      break;
 800be86:	bf00      	nop
 800be88:	e002      	b.n	800be90 <USBH_HandleControl+0x484>
      break;
 800be8a:	bf00      	nop
 800be8c:	e000      	b.n	800be90 <USBH_HandleControl+0x484>
      break;
 800be8e:	bf00      	nop
  }

  return status;
 800be90:	7bfb      	ldrb	r3, [r7, #15]
}
 800be92:	4618      	mov	r0, r3
 800be94:	3710      	adds	r7, #16
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop

0800be9c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b088      	sub	sp, #32
 800bea0:	af04      	add	r7, sp, #16
 800bea2:	60f8      	str	r0, [r7, #12]
 800bea4:	60b9      	str	r1, [r7, #8]
 800bea6:	4613      	mov	r3, r2
 800bea8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800beaa:	79f9      	ldrb	r1, [r7, #7]
 800beac:	2300      	movs	r3, #0
 800beae:	9303      	str	r3, [sp, #12]
 800beb0:	2308      	movs	r3, #8
 800beb2:	9302      	str	r3, [sp, #8]
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	9301      	str	r3, [sp, #4]
 800beb8:	2300      	movs	r3, #0
 800beba:	9300      	str	r3, [sp, #0]
 800bebc:	2300      	movs	r3, #0
 800bebe:	2200      	movs	r2, #0
 800bec0:	68f8      	ldr	r0, [r7, #12]
 800bec2:	f007 fd2a 	bl	801391a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800bec6:	2300      	movs	r3, #0
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3710      	adds	r7, #16
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b088      	sub	sp, #32
 800bed4:	af04      	add	r7, sp, #16
 800bed6:	60f8      	str	r0, [r7, #12]
 800bed8:	60b9      	str	r1, [r7, #8]
 800beda:	4611      	mov	r1, r2
 800bedc:	461a      	mov	r2, r3
 800bede:	460b      	mov	r3, r1
 800bee0:	80fb      	strh	r3, [r7, #6]
 800bee2:	4613      	mov	r3, r2
 800bee4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800beec:	2b00      	cmp	r3, #0
 800beee:	d001      	beq.n	800bef4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bef0:	2300      	movs	r3, #0
 800bef2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bef4:	7979      	ldrb	r1, [r7, #5]
 800bef6:	7e3b      	ldrb	r3, [r7, #24]
 800bef8:	9303      	str	r3, [sp, #12]
 800befa:	88fb      	ldrh	r3, [r7, #6]
 800befc:	9302      	str	r3, [sp, #8]
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	9301      	str	r3, [sp, #4]
 800bf02:	2301      	movs	r3, #1
 800bf04:	9300      	str	r3, [sp, #0]
 800bf06:	2300      	movs	r3, #0
 800bf08:	2200      	movs	r2, #0
 800bf0a:	68f8      	ldr	r0, [r7, #12]
 800bf0c:	f007 fd05 	bl	801391a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bf10:	2300      	movs	r3, #0
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3710      	adds	r7, #16
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}

0800bf1a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bf1a:	b580      	push	{r7, lr}
 800bf1c:	b088      	sub	sp, #32
 800bf1e:	af04      	add	r7, sp, #16
 800bf20:	60f8      	str	r0, [r7, #12]
 800bf22:	60b9      	str	r1, [r7, #8]
 800bf24:	4611      	mov	r1, r2
 800bf26:	461a      	mov	r2, r3
 800bf28:	460b      	mov	r3, r1
 800bf2a:	80fb      	strh	r3, [r7, #6]
 800bf2c:	4613      	mov	r3, r2
 800bf2e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bf30:	7979      	ldrb	r1, [r7, #5]
 800bf32:	2300      	movs	r3, #0
 800bf34:	9303      	str	r3, [sp, #12]
 800bf36:	88fb      	ldrh	r3, [r7, #6]
 800bf38:	9302      	str	r3, [sp, #8]
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	9301      	str	r3, [sp, #4]
 800bf3e:	2301      	movs	r3, #1
 800bf40:	9300      	str	r3, [sp, #0]
 800bf42:	2300      	movs	r3, #0
 800bf44:	2201      	movs	r2, #1
 800bf46:	68f8      	ldr	r0, [r7, #12]
 800bf48:	f007 fce7 	bl	801391a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bf4c:	2300      	movs	r3, #0

}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	3710      	adds	r7, #16
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}

0800bf56 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bf56:	b580      	push	{r7, lr}
 800bf58:	b088      	sub	sp, #32
 800bf5a:	af04      	add	r7, sp, #16
 800bf5c:	60f8      	str	r0, [r7, #12]
 800bf5e:	60b9      	str	r1, [r7, #8]
 800bf60:	4611      	mov	r1, r2
 800bf62:	461a      	mov	r2, r3
 800bf64:	460b      	mov	r3, r1
 800bf66:	80fb      	strh	r3, [r7, #6]
 800bf68:	4613      	mov	r3, r2
 800bf6a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d001      	beq.n	800bf7a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bf76:	2300      	movs	r3, #0
 800bf78:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bf7a:	7979      	ldrb	r1, [r7, #5]
 800bf7c:	7e3b      	ldrb	r3, [r7, #24]
 800bf7e:	9303      	str	r3, [sp, #12]
 800bf80:	88fb      	ldrh	r3, [r7, #6]
 800bf82:	9302      	str	r3, [sp, #8]
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	9301      	str	r3, [sp, #4]
 800bf88:	2301      	movs	r3, #1
 800bf8a:	9300      	str	r3, [sp, #0]
 800bf8c:	2302      	movs	r3, #2
 800bf8e:	2200      	movs	r2, #0
 800bf90:	68f8      	ldr	r0, [r7, #12]
 800bf92:	f007 fcc2 	bl	801391a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bf96:	2300      	movs	r3, #0
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3710      	adds	r7, #16
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b088      	sub	sp, #32
 800bfa4:	af04      	add	r7, sp, #16
 800bfa6:	60f8      	str	r0, [r7, #12]
 800bfa8:	60b9      	str	r1, [r7, #8]
 800bfaa:	4611      	mov	r1, r2
 800bfac:	461a      	mov	r2, r3
 800bfae:	460b      	mov	r3, r1
 800bfb0:	80fb      	strh	r3, [r7, #6]
 800bfb2:	4613      	mov	r3, r2
 800bfb4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bfb6:	7979      	ldrb	r1, [r7, #5]
 800bfb8:	2300      	movs	r3, #0
 800bfba:	9303      	str	r3, [sp, #12]
 800bfbc:	88fb      	ldrh	r3, [r7, #6]
 800bfbe:	9302      	str	r3, [sp, #8]
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	9301      	str	r3, [sp, #4]
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	9300      	str	r3, [sp, #0]
 800bfc8:	2302      	movs	r3, #2
 800bfca:	2201      	movs	r2, #1
 800bfcc:	68f8      	ldr	r0, [r7, #12]
 800bfce:	f007 fca4 	bl	801391a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bfd2:	2300      	movs	r3, #0
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3710      	adds	r7, #16
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b086      	sub	sp, #24
 800bfe0:	af04      	add	r7, sp, #16
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	4608      	mov	r0, r1
 800bfe6:	4611      	mov	r1, r2
 800bfe8:	461a      	mov	r2, r3
 800bfea:	4603      	mov	r3, r0
 800bfec:	70fb      	strb	r3, [r7, #3]
 800bfee:	460b      	mov	r3, r1
 800bff0:	70bb      	strb	r3, [r7, #2]
 800bff2:	4613      	mov	r3, r2
 800bff4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bff6:	7878      	ldrb	r0, [r7, #1]
 800bff8:	78ba      	ldrb	r2, [r7, #2]
 800bffa:	78f9      	ldrb	r1, [r7, #3]
 800bffc:	8b3b      	ldrh	r3, [r7, #24]
 800bffe:	9302      	str	r3, [sp, #8]
 800c000:	7d3b      	ldrb	r3, [r7, #20]
 800c002:	9301      	str	r3, [sp, #4]
 800c004:	7c3b      	ldrb	r3, [r7, #16]
 800c006:	9300      	str	r3, [sp, #0]
 800c008:	4603      	mov	r3, r0
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f007 fc37 	bl	801387e <USBH_LL_OpenPipe>

  return USBH_OK;
 800c010:	2300      	movs	r3, #0
}
 800c012:	4618      	mov	r0, r3
 800c014:	3708      	adds	r7, #8
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}

0800c01a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c01a:	b580      	push	{r7, lr}
 800c01c:	b082      	sub	sp, #8
 800c01e:	af00      	add	r7, sp, #0
 800c020:	6078      	str	r0, [r7, #4]
 800c022:	460b      	mov	r3, r1
 800c024:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c026:	78fb      	ldrb	r3, [r7, #3]
 800c028:	4619      	mov	r1, r3
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f007 fc56 	bl	80138dc <USBH_LL_ClosePipe>

  return USBH_OK;
 800c030:	2300      	movs	r3, #0
}
 800c032:	4618      	mov	r0, r3
 800c034:	3708      	adds	r7, #8
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}

0800c03a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c03a:	b580      	push	{r7, lr}
 800c03c:	b084      	sub	sp, #16
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
 800c042:	460b      	mov	r3, r1
 800c044:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f000 f836 	bl	800c0b8 <USBH_GetFreePipe>
 800c04c:	4603      	mov	r3, r0
 800c04e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c050:	89fb      	ldrh	r3, [r7, #14]
 800c052:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c056:	4293      	cmp	r3, r2
 800c058:	d00a      	beq.n	800c070 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c05a:	78fa      	ldrb	r2, [r7, #3]
 800c05c:	89fb      	ldrh	r3, [r7, #14]
 800c05e:	f003 030f 	and.w	r3, r3, #15
 800c062:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c066:	6879      	ldr	r1, [r7, #4]
 800c068:	33e0      	adds	r3, #224	; 0xe0
 800c06a:	009b      	lsls	r3, r3, #2
 800c06c:	440b      	add	r3, r1
 800c06e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c070:	89fb      	ldrh	r3, [r7, #14]
 800c072:	b2db      	uxtb	r3, r3
}
 800c074:	4618      	mov	r0, r3
 800c076:	3710      	adds	r7, #16
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c07c:	b480      	push	{r7}
 800c07e:	b083      	sub	sp, #12
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	460b      	mov	r3, r1
 800c086:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800c088:	78fb      	ldrb	r3, [r7, #3]
 800c08a:	2b0f      	cmp	r3, #15
 800c08c:	d80d      	bhi.n	800c0aa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c08e:	78fb      	ldrb	r3, [r7, #3]
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	33e0      	adds	r3, #224	; 0xe0
 800c094:	009b      	lsls	r3, r3, #2
 800c096:	4413      	add	r3, r2
 800c098:	685a      	ldr	r2, [r3, #4]
 800c09a:	78fb      	ldrb	r3, [r7, #3]
 800c09c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c0a0:	6879      	ldr	r1, [r7, #4]
 800c0a2:	33e0      	adds	r3, #224	; 0xe0
 800c0a4:	009b      	lsls	r3, r3, #2
 800c0a6:	440b      	add	r3, r1
 800c0a8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c0aa:	2300      	movs	r3, #0
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	370c      	adds	r7, #12
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr

0800c0b8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b085      	sub	sp, #20
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	73fb      	strb	r3, [r7, #15]
 800c0c8:	e00f      	b.n	800c0ea <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c0ca:	7bfb      	ldrb	r3, [r7, #15]
 800c0cc:	687a      	ldr	r2, [r7, #4]
 800c0ce:	33e0      	adds	r3, #224	; 0xe0
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	4413      	add	r3, r2
 800c0d4:	685b      	ldr	r3, [r3, #4]
 800c0d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d102      	bne.n	800c0e4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c0de:	7bfb      	ldrb	r3, [r7, #15]
 800c0e0:	b29b      	uxth	r3, r3
 800c0e2:	e007      	b.n	800c0f4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c0e4:	7bfb      	ldrb	r3, [r7, #15]
 800c0e6:	3301      	adds	r3, #1
 800c0e8:	73fb      	strb	r3, [r7, #15]
 800c0ea:	7bfb      	ldrb	r3, [r7, #15]
 800c0ec:	2b0f      	cmp	r3, #15
 800c0ee:	d9ec      	bls.n	800c0ca <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c0f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3714      	adds	r7, #20
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr

0800c100 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b084      	sub	sp, #16
 800c104:	af00      	add	r7, sp, #0
 800c106:	4603      	mov	r3, r0
 800c108:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c10a:	79fb      	ldrb	r3, [r7, #7]
 800c10c:	4a08      	ldr	r2, [pc, #32]	; (800c130 <disk_status+0x30>)
 800c10e:	009b      	lsls	r3, r3, #2
 800c110:	4413      	add	r3, r2
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	685b      	ldr	r3, [r3, #4]
 800c116:	79fa      	ldrb	r2, [r7, #7]
 800c118:	4905      	ldr	r1, [pc, #20]	; (800c130 <disk_status+0x30>)
 800c11a:	440a      	add	r2, r1
 800c11c:	7d12      	ldrb	r2, [r2, #20]
 800c11e:	4610      	mov	r0, r2
 800c120:	4798      	blx	r3
 800c122:	4603      	mov	r3, r0
 800c124:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c126:	7bfb      	ldrb	r3, [r7, #15]
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3710      	adds	r7, #16
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	20002204 	.word	0x20002204

0800c134 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b084      	sub	sp, #16
 800c138:	af00      	add	r7, sp, #0
 800c13a:	4603      	mov	r3, r0
 800c13c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c13e:	2300      	movs	r3, #0
 800c140:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c142:	79fb      	ldrb	r3, [r7, #7]
 800c144:	4a0d      	ldr	r2, [pc, #52]	; (800c17c <disk_initialize+0x48>)
 800c146:	5cd3      	ldrb	r3, [r2, r3]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d111      	bne.n	800c170 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c14c:	79fb      	ldrb	r3, [r7, #7]
 800c14e:	4a0b      	ldr	r2, [pc, #44]	; (800c17c <disk_initialize+0x48>)
 800c150:	2101      	movs	r1, #1
 800c152:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c154:	79fb      	ldrb	r3, [r7, #7]
 800c156:	4a09      	ldr	r2, [pc, #36]	; (800c17c <disk_initialize+0x48>)
 800c158:	009b      	lsls	r3, r3, #2
 800c15a:	4413      	add	r3, r2
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	79fa      	ldrb	r2, [r7, #7]
 800c162:	4906      	ldr	r1, [pc, #24]	; (800c17c <disk_initialize+0x48>)
 800c164:	440a      	add	r2, r1
 800c166:	7d12      	ldrb	r2, [r2, #20]
 800c168:	4610      	mov	r0, r2
 800c16a:	4798      	blx	r3
 800c16c:	4603      	mov	r3, r0
 800c16e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c170:	7bfb      	ldrb	r3, [r7, #15]
}
 800c172:	4618      	mov	r0, r3
 800c174:	3710      	adds	r7, #16
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}
 800c17a:	bf00      	nop
 800c17c:	20002204 	.word	0x20002204

0800c180 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c180:	b590      	push	{r4, r7, lr}
 800c182:	b087      	sub	sp, #28
 800c184:	af00      	add	r7, sp, #0
 800c186:	60b9      	str	r1, [r7, #8]
 800c188:	607a      	str	r2, [r7, #4]
 800c18a:	603b      	str	r3, [r7, #0]
 800c18c:	4603      	mov	r3, r0
 800c18e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c190:	7bfb      	ldrb	r3, [r7, #15]
 800c192:	4a0a      	ldr	r2, [pc, #40]	; (800c1bc <disk_read+0x3c>)
 800c194:	009b      	lsls	r3, r3, #2
 800c196:	4413      	add	r3, r2
 800c198:	685b      	ldr	r3, [r3, #4]
 800c19a:	689c      	ldr	r4, [r3, #8]
 800c19c:	7bfb      	ldrb	r3, [r7, #15]
 800c19e:	4a07      	ldr	r2, [pc, #28]	; (800c1bc <disk_read+0x3c>)
 800c1a0:	4413      	add	r3, r2
 800c1a2:	7d18      	ldrb	r0, [r3, #20]
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	68b9      	ldr	r1, [r7, #8]
 800c1aa:	47a0      	blx	r4
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	75fb      	strb	r3, [r7, #23]
  return res;
 800c1b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	371c      	adds	r7, #28
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd90      	pop	{r4, r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	20002204 	.word	0x20002204

0800c1c0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c1c0:	b590      	push	{r4, r7, lr}
 800c1c2:	b087      	sub	sp, #28
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	60b9      	str	r1, [r7, #8]
 800c1c8:	607a      	str	r2, [r7, #4]
 800c1ca:	603b      	str	r3, [r7, #0]
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c1d0:	7bfb      	ldrb	r3, [r7, #15]
 800c1d2:	4a0a      	ldr	r2, [pc, #40]	; (800c1fc <disk_write+0x3c>)
 800c1d4:	009b      	lsls	r3, r3, #2
 800c1d6:	4413      	add	r3, r2
 800c1d8:	685b      	ldr	r3, [r3, #4]
 800c1da:	68dc      	ldr	r4, [r3, #12]
 800c1dc:	7bfb      	ldrb	r3, [r7, #15]
 800c1de:	4a07      	ldr	r2, [pc, #28]	; (800c1fc <disk_write+0x3c>)
 800c1e0:	4413      	add	r3, r2
 800c1e2:	7d18      	ldrb	r0, [r3, #20]
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	687a      	ldr	r2, [r7, #4]
 800c1e8:	68b9      	ldr	r1, [r7, #8]
 800c1ea:	47a0      	blx	r4
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	75fb      	strb	r3, [r7, #23]
  return res;
 800c1f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	371c      	adds	r7, #28
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd90      	pop	{r4, r7, pc}
 800c1fa:	bf00      	nop
 800c1fc:	20002204 	.word	0x20002204

0800c200 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	4603      	mov	r3, r0
 800c208:	603a      	str	r2, [r7, #0]
 800c20a:	71fb      	strb	r3, [r7, #7]
 800c20c:	460b      	mov	r3, r1
 800c20e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c210:	79fb      	ldrb	r3, [r7, #7]
 800c212:	4a09      	ldr	r2, [pc, #36]	; (800c238 <disk_ioctl+0x38>)
 800c214:	009b      	lsls	r3, r3, #2
 800c216:	4413      	add	r3, r2
 800c218:	685b      	ldr	r3, [r3, #4]
 800c21a:	691b      	ldr	r3, [r3, #16]
 800c21c:	79fa      	ldrb	r2, [r7, #7]
 800c21e:	4906      	ldr	r1, [pc, #24]	; (800c238 <disk_ioctl+0x38>)
 800c220:	440a      	add	r2, r1
 800c222:	7d10      	ldrb	r0, [r2, #20]
 800c224:	79b9      	ldrb	r1, [r7, #6]
 800c226:	683a      	ldr	r2, [r7, #0]
 800c228:	4798      	blx	r3
 800c22a:	4603      	mov	r3, r0
 800c22c:	73fb      	strb	r3, [r7, #15]
  return res;
 800c22e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c230:	4618      	mov	r0, r3
 800c232:	3710      	adds	r7, #16
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}
 800c238:	20002204 	.word	0x20002204

0800c23c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c23c:	b480      	push	{r7}
 800c23e:	b085      	sub	sp, #20
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	3301      	adds	r3, #1
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c24c:	89fb      	ldrh	r3, [r7, #14]
 800c24e:	021b      	lsls	r3, r3, #8
 800c250:	b21a      	sxth	r2, r3
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	b21b      	sxth	r3, r3
 800c258:	4313      	orrs	r3, r2
 800c25a:	b21b      	sxth	r3, r3
 800c25c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c25e:	89fb      	ldrh	r3, [r7, #14]
}
 800c260:	4618      	mov	r0, r3
 800c262:	3714      	adds	r7, #20
 800c264:	46bd      	mov	sp, r7
 800c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26a:	4770      	bx	lr

0800c26c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c26c:	b480      	push	{r7}
 800c26e:	b085      	sub	sp, #20
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	3303      	adds	r3, #3
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	021b      	lsls	r3, r3, #8
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	3202      	adds	r2, #2
 800c284:	7812      	ldrb	r2, [r2, #0]
 800c286:	4313      	orrs	r3, r2
 800c288:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	021b      	lsls	r3, r3, #8
 800c28e:	687a      	ldr	r2, [r7, #4]
 800c290:	3201      	adds	r2, #1
 800c292:	7812      	ldrb	r2, [r2, #0]
 800c294:	4313      	orrs	r3, r2
 800c296:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	021b      	lsls	r3, r3, #8
 800c29c:	687a      	ldr	r2, [r7, #4]
 800c29e:	7812      	ldrb	r2, [r2, #0]
 800c2a0:	4313      	orrs	r3, r2
 800c2a2:	60fb      	str	r3, [r7, #12]
	return rv;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3714      	adds	r7, #20
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b0:	4770      	bx	lr

0800c2b2 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800c2b2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c2b6:	b09d      	sub	sp, #116	; 0x74
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 800c2bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c2be:	3307      	adds	r3, #7
 800c2c0:	781b      	ldrb	r3, [r3, #0]
 800c2c2:	b2db      	uxtb	r3, r3
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	469a      	mov	sl, r3
 800c2c8:	4693      	mov	fp, r2
 800c2ca:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 800c2ce:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c2d2:	f04f 0000 	mov.w	r0, #0
 800c2d6:	f04f 0100 	mov.w	r1, #0
 800c2da:	0219      	lsls	r1, r3, #8
 800c2dc:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c2e0:	0210      	lsls	r0, r2, #8
 800c2e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c2e4:	3306      	adds	r3, #6
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	b2db      	uxtb	r3, r3
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	461c      	mov	r4, r3
 800c2ee:	4615      	mov	r5, r2
 800c2f0:	ea40 0804 	orr.w	r8, r0, r4
 800c2f4:	ea41 0905 	orr.w	r9, r1, r5
 800c2f8:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 800c2fc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c300:	f04f 0000 	mov.w	r0, #0
 800c304:	f04f 0100 	mov.w	r1, #0
 800c308:	0219      	lsls	r1, r3, #8
 800c30a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c30e:	0210      	lsls	r0, r2, #8
 800c310:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c312:	3305      	adds	r3, #5
 800c314:	781b      	ldrb	r3, [r3, #0]
 800c316:	b2db      	uxtb	r3, r3
 800c318:	2200      	movs	r2, #0
 800c31a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c31c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c31e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800c322:	4623      	mov	r3, r4
 800c324:	4303      	orrs	r3, r0
 800c326:	62bb      	str	r3, [r7, #40]	; 0x28
 800c328:	462b      	mov	r3, r5
 800c32a:	430b      	orrs	r3, r1
 800c32c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c32e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800c332:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 800c336:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c33a:	f04f 0000 	mov.w	r0, #0
 800c33e:	f04f 0100 	mov.w	r1, #0
 800c342:	0219      	lsls	r1, r3, #8
 800c344:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c348:	0210      	lsls	r0, r2, #8
 800c34a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c34c:	3304      	adds	r3, #4
 800c34e:	781b      	ldrb	r3, [r3, #0]
 800c350:	b2db      	uxtb	r3, r3
 800c352:	2200      	movs	r2, #0
 800c354:	653b      	str	r3, [r7, #80]	; 0x50
 800c356:	657a      	str	r2, [r7, #84]	; 0x54
 800c358:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800c35c:	4623      	mov	r3, r4
 800c35e:	4303      	orrs	r3, r0
 800c360:	623b      	str	r3, [r7, #32]
 800c362:	462b      	mov	r3, r5
 800c364:	430b      	orrs	r3, r1
 800c366:	627b      	str	r3, [r7, #36]	; 0x24
 800c368:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c36c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 800c370:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c374:	f04f 0000 	mov.w	r0, #0
 800c378:	f04f 0100 	mov.w	r1, #0
 800c37c:	0219      	lsls	r1, r3, #8
 800c37e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c382:	0210      	lsls	r0, r2, #8
 800c384:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c386:	3303      	adds	r3, #3
 800c388:	781b      	ldrb	r3, [r3, #0]
 800c38a:	b2db      	uxtb	r3, r3
 800c38c:	2200      	movs	r2, #0
 800c38e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c390:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c392:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800c396:	4623      	mov	r3, r4
 800c398:	4303      	orrs	r3, r0
 800c39a:	61bb      	str	r3, [r7, #24]
 800c39c:	462b      	mov	r3, r5
 800c39e:	430b      	orrs	r3, r1
 800c3a0:	61fb      	str	r3, [r7, #28]
 800c3a2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c3a6:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 800c3aa:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c3ae:	f04f 0000 	mov.w	r0, #0
 800c3b2:	f04f 0100 	mov.w	r1, #0
 800c3b6:	0219      	lsls	r1, r3, #8
 800c3b8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c3bc:	0210      	lsls	r0, r2, #8
 800c3be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3c0:	3302      	adds	r3, #2
 800c3c2:	781b      	ldrb	r3, [r3, #0]
 800c3c4:	b2db      	uxtb	r3, r3
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	643b      	str	r3, [r7, #64]	; 0x40
 800c3ca:	647a      	str	r2, [r7, #68]	; 0x44
 800c3cc:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800c3d0:	4623      	mov	r3, r4
 800c3d2:	4303      	orrs	r3, r0
 800c3d4:	613b      	str	r3, [r7, #16]
 800c3d6:	462b      	mov	r3, r5
 800c3d8:	430b      	orrs	r3, r1
 800c3da:	617b      	str	r3, [r7, #20]
 800c3dc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c3e0:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 800c3e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c3e8:	f04f 0200 	mov.w	r2, #0
 800c3ec:	f04f 0300 	mov.w	r3, #0
 800c3f0:	020b      	lsls	r3, r1, #8
 800c3f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c3f6:	0202      	lsls	r2, r0, #8
 800c3f8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c3fa:	3101      	adds	r1, #1
 800c3fc:	7809      	ldrb	r1, [r1, #0]
 800c3fe:	b2c9      	uxtb	r1, r1
 800c400:	2000      	movs	r0, #0
 800c402:	63b9      	str	r1, [r7, #56]	; 0x38
 800c404:	63f8      	str	r0, [r7, #60]	; 0x3c
 800c406:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800c40a:	4621      	mov	r1, r4
 800c40c:	4311      	orrs	r1, r2
 800c40e:	60b9      	str	r1, [r7, #8]
 800c410:	4629      	mov	r1, r5
 800c412:	4319      	orrs	r1, r3
 800c414:	60f9      	str	r1, [r7, #12]
 800c416:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c41a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 800c41e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c422:	f04f 0200 	mov.w	r2, #0
 800c426:	f04f 0300 	mov.w	r3, #0
 800c42a:	020b      	lsls	r3, r1, #8
 800c42c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c430:	0202      	lsls	r2, r0, #8
 800c432:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c434:	7809      	ldrb	r1, [r1, #0]
 800c436:	b2c9      	uxtb	r1, r1
 800c438:	2000      	movs	r0, #0
 800c43a:	6339      	str	r1, [r7, #48]	; 0x30
 800c43c:	6378      	str	r0, [r7, #52]	; 0x34
 800c43e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800c442:	4621      	mov	r1, r4
 800c444:	4311      	orrs	r1, r2
 800c446:	6039      	str	r1, [r7, #0]
 800c448:	4629      	mov	r1, r5
 800c44a:	4319      	orrs	r1, r3
 800c44c:	6079      	str	r1, [r7, #4]
 800c44e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c452:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 800c456:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 800c45a:	4610      	mov	r0, r2
 800c45c:	4619      	mov	r1, r3
 800c45e:	3774      	adds	r7, #116	; 0x74
 800c460:	46bd      	mov	sp, r7
 800c462:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c466:	4770      	bx	lr

0800c468 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c468:	b480      	push	{r7}
 800c46a:	b083      	sub	sp, #12
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	460b      	mov	r3, r1
 800c472:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	1c5a      	adds	r2, r3, #1
 800c478:	607a      	str	r2, [r7, #4]
 800c47a:	887a      	ldrh	r2, [r7, #2]
 800c47c:	b2d2      	uxtb	r2, r2
 800c47e:	701a      	strb	r2, [r3, #0]
 800c480:	887b      	ldrh	r3, [r7, #2]
 800c482:	0a1b      	lsrs	r3, r3, #8
 800c484:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	1c5a      	adds	r2, r3, #1
 800c48a:	607a      	str	r2, [r7, #4]
 800c48c:	887a      	ldrh	r2, [r7, #2]
 800c48e:	b2d2      	uxtb	r2, r2
 800c490:	701a      	strb	r2, [r3, #0]
}
 800c492:	bf00      	nop
 800c494:	370c      	adds	r7, #12
 800c496:	46bd      	mov	sp, r7
 800c498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49c:	4770      	bx	lr

0800c49e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c49e:	b480      	push	{r7}
 800c4a0:	b083      	sub	sp, #12
 800c4a2:	af00      	add	r7, sp, #0
 800c4a4:	6078      	str	r0, [r7, #4]
 800c4a6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	1c5a      	adds	r2, r3, #1
 800c4ac:	607a      	str	r2, [r7, #4]
 800c4ae:	683a      	ldr	r2, [r7, #0]
 800c4b0:	b2d2      	uxtb	r2, r2
 800c4b2:	701a      	strb	r2, [r3, #0]
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	0a1b      	lsrs	r3, r3, #8
 800c4b8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	1c5a      	adds	r2, r3, #1
 800c4be:	607a      	str	r2, [r7, #4]
 800c4c0:	683a      	ldr	r2, [r7, #0]
 800c4c2:	b2d2      	uxtb	r2, r2
 800c4c4:	701a      	strb	r2, [r3, #0]
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	0a1b      	lsrs	r3, r3, #8
 800c4ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	1c5a      	adds	r2, r3, #1
 800c4d0:	607a      	str	r2, [r7, #4]
 800c4d2:	683a      	ldr	r2, [r7, #0]
 800c4d4:	b2d2      	uxtb	r2, r2
 800c4d6:	701a      	strb	r2, [r3, #0]
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	0a1b      	lsrs	r3, r3, #8
 800c4dc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	1c5a      	adds	r2, r3, #1
 800c4e2:	607a      	str	r2, [r7, #4]
 800c4e4:	683a      	ldr	r2, [r7, #0]
 800c4e6:	b2d2      	uxtb	r2, r2
 800c4e8:	701a      	strb	r2, [r3, #0]
}
 800c4ea:	bf00      	nop
 800c4ec:	370c      	adds	r7, #12
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr

0800c4f6 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800c4f6:	b480      	push	{r7}
 800c4f8:	b085      	sub	sp, #20
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	60f8      	str	r0, [r7, #12]
 800c4fe:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	1c5a      	adds	r2, r3, #1
 800c506:	60fa      	str	r2, [r7, #12]
 800c508:	783a      	ldrb	r2, [r7, #0]
 800c50a:	701a      	strb	r2, [r3, #0]
 800c50c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c510:	f04f 0200 	mov.w	r2, #0
 800c514:	f04f 0300 	mov.w	r3, #0
 800c518:	0a02      	lsrs	r2, r0, #8
 800c51a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c51e:	0a0b      	lsrs	r3, r1, #8
 800c520:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	1c5a      	adds	r2, r3, #1
 800c528:	60fa      	str	r2, [r7, #12]
 800c52a:	783a      	ldrb	r2, [r7, #0]
 800c52c:	701a      	strb	r2, [r3, #0]
 800c52e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c532:	f04f 0200 	mov.w	r2, #0
 800c536:	f04f 0300 	mov.w	r3, #0
 800c53a:	0a02      	lsrs	r2, r0, #8
 800c53c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c540:	0a0b      	lsrs	r3, r1, #8
 800c542:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	1c5a      	adds	r2, r3, #1
 800c54a:	60fa      	str	r2, [r7, #12]
 800c54c:	783a      	ldrb	r2, [r7, #0]
 800c54e:	701a      	strb	r2, [r3, #0]
 800c550:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c554:	f04f 0200 	mov.w	r2, #0
 800c558:	f04f 0300 	mov.w	r3, #0
 800c55c:	0a02      	lsrs	r2, r0, #8
 800c55e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c562:	0a0b      	lsrs	r3, r1, #8
 800c564:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	1c5a      	adds	r2, r3, #1
 800c56c:	60fa      	str	r2, [r7, #12]
 800c56e:	783a      	ldrb	r2, [r7, #0]
 800c570:	701a      	strb	r2, [r3, #0]
 800c572:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c576:	f04f 0200 	mov.w	r2, #0
 800c57a:	f04f 0300 	mov.w	r3, #0
 800c57e:	0a02      	lsrs	r2, r0, #8
 800c580:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c584:	0a0b      	lsrs	r3, r1, #8
 800c586:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	1c5a      	adds	r2, r3, #1
 800c58e:	60fa      	str	r2, [r7, #12]
 800c590:	783a      	ldrb	r2, [r7, #0]
 800c592:	701a      	strb	r2, [r3, #0]
 800c594:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c598:	f04f 0200 	mov.w	r2, #0
 800c59c:	f04f 0300 	mov.w	r3, #0
 800c5a0:	0a02      	lsrs	r2, r0, #8
 800c5a2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c5a6:	0a0b      	lsrs	r3, r1, #8
 800c5a8:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	1c5a      	adds	r2, r3, #1
 800c5b0:	60fa      	str	r2, [r7, #12]
 800c5b2:	783a      	ldrb	r2, [r7, #0]
 800c5b4:	701a      	strb	r2, [r3, #0]
 800c5b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c5ba:	f04f 0200 	mov.w	r2, #0
 800c5be:	f04f 0300 	mov.w	r3, #0
 800c5c2:	0a02      	lsrs	r2, r0, #8
 800c5c4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c5c8:	0a0b      	lsrs	r3, r1, #8
 800c5ca:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	1c5a      	adds	r2, r3, #1
 800c5d2:	60fa      	str	r2, [r7, #12]
 800c5d4:	783a      	ldrb	r2, [r7, #0]
 800c5d6:	701a      	strb	r2, [r3, #0]
 800c5d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c5dc:	f04f 0200 	mov.w	r2, #0
 800c5e0:	f04f 0300 	mov.w	r3, #0
 800c5e4:	0a02      	lsrs	r2, r0, #8
 800c5e6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c5ea:	0a0b      	lsrs	r3, r1, #8
 800c5ec:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	1c5a      	adds	r2, r3, #1
 800c5f4:	60fa      	str	r2, [r7, #12]
 800c5f6:	783a      	ldrb	r2, [r7, #0]
 800c5f8:	701a      	strb	r2, [r3, #0]
}
 800c5fa:	bf00      	nop
 800c5fc:	3714      	adds	r7, #20
 800c5fe:	46bd      	mov	sp, r7
 800c600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c604:	4770      	bx	lr

0800c606 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c606:	b480      	push	{r7}
 800c608:	b087      	sub	sp, #28
 800c60a:	af00      	add	r7, sp, #0
 800c60c:	60f8      	str	r0, [r7, #12]
 800c60e:	60b9      	str	r1, [r7, #8]
 800c610:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d00d      	beq.n	800c63c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c620:	693a      	ldr	r2, [r7, #16]
 800c622:	1c53      	adds	r3, r2, #1
 800c624:	613b      	str	r3, [r7, #16]
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	1c59      	adds	r1, r3, #1
 800c62a:	6179      	str	r1, [r7, #20]
 800c62c:	7812      	ldrb	r2, [r2, #0]
 800c62e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	3b01      	subs	r3, #1
 800c634:	607b      	str	r3, [r7, #4]
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d1f1      	bne.n	800c620 <mem_cpy+0x1a>
	}
}
 800c63c:	bf00      	nop
 800c63e:	371c      	adds	r7, #28
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr

0800c648 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c648:	b480      	push	{r7}
 800c64a:	b087      	sub	sp, #28
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	60f8      	str	r0, [r7, #12]
 800c650:	60b9      	str	r1, [r7, #8]
 800c652:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	1c5a      	adds	r2, r3, #1
 800c65c:	617a      	str	r2, [r7, #20]
 800c65e:	68ba      	ldr	r2, [r7, #8]
 800c660:	b2d2      	uxtb	r2, r2
 800c662:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	3b01      	subs	r3, #1
 800c668:	607b      	str	r3, [r7, #4]
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d1f3      	bne.n	800c658 <mem_set+0x10>
}
 800c670:	bf00      	nop
 800c672:	bf00      	nop
 800c674:	371c      	adds	r7, #28
 800c676:	46bd      	mov	sp, r7
 800c678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67c:	4770      	bx	lr

0800c67e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c67e:	b480      	push	{r7}
 800c680:	b089      	sub	sp, #36	; 0x24
 800c682:	af00      	add	r7, sp, #0
 800c684:	60f8      	str	r0, [r7, #12]
 800c686:	60b9      	str	r1, [r7, #8]
 800c688:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	61fb      	str	r3, [r7, #28]
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c692:	2300      	movs	r3, #0
 800c694:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c696:	69fb      	ldr	r3, [r7, #28]
 800c698:	1c5a      	adds	r2, r3, #1
 800c69a:	61fa      	str	r2, [r7, #28]
 800c69c:	781b      	ldrb	r3, [r3, #0]
 800c69e:	4619      	mov	r1, r3
 800c6a0:	69bb      	ldr	r3, [r7, #24]
 800c6a2:	1c5a      	adds	r2, r3, #1
 800c6a4:	61ba      	str	r2, [r7, #24]
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	1acb      	subs	r3, r1, r3
 800c6aa:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	3b01      	subs	r3, #1
 800c6b0:	607b      	str	r3, [r7, #4]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d002      	beq.n	800c6be <mem_cmp+0x40>
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d0eb      	beq.n	800c696 <mem_cmp+0x18>

	return r;
 800c6be:	697b      	ldr	r3, [r7, #20]
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3724      	adds	r7, #36	; 0x24
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ca:	4770      	bx	lr

0800c6cc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c6cc:	b480      	push	{r7}
 800c6ce:	b083      	sub	sp, #12
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c6d6:	e002      	b.n	800c6de <chk_chr+0x12>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	3301      	adds	r3, #1
 800c6dc:	607b      	str	r3, [r7, #4]
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d005      	beq.n	800c6f2 <chk_chr+0x26>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d1f2      	bne.n	800c6d8 <chk_chr+0xc>
	return *str;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	781b      	ldrb	r3, [r3, #0]
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	370c      	adds	r7, #12
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c700:	4770      	bx	lr
	...

0800c704 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c704:	b480      	push	{r7}
 800c706:	b085      	sub	sp, #20
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c70e:	2300      	movs	r3, #0
 800c710:	60bb      	str	r3, [r7, #8]
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	60fb      	str	r3, [r7, #12]
 800c716:	e029      	b.n	800c76c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c718:	4a27      	ldr	r2, [pc, #156]	; (800c7b8 <chk_lock+0xb4>)
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	011b      	lsls	r3, r3, #4
 800c71e:	4413      	add	r3, r2
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d01d      	beq.n	800c762 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c726:	4a24      	ldr	r2, [pc, #144]	; (800c7b8 <chk_lock+0xb4>)
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	011b      	lsls	r3, r3, #4
 800c72c:	4413      	add	r3, r2
 800c72e:	681a      	ldr	r2, [r3, #0]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	429a      	cmp	r2, r3
 800c736:	d116      	bne.n	800c766 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c738:	4a1f      	ldr	r2, [pc, #124]	; (800c7b8 <chk_lock+0xb4>)
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	011b      	lsls	r3, r3, #4
 800c73e:	4413      	add	r3, r2
 800c740:	3304      	adds	r3, #4
 800c742:	681a      	ldr	r2, [r3, #0]
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c748:	429a      	cmp	r2, r3
 800c74a:	d10c      	bne.n	800c766 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c74c:	4a1a      	ldr	r2, [pc, #104]	; (800c7b8 <chk_lock+0xb4>)
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	011b      	lsls	r3, r3, #4
 800c752:	4413      	add	r3, r2
 800c754:	3308      	adds	r3, #8
 800c756:	681a      	ldr	r2, [r3, #0]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800c75c:	429a      	cmp	r2, r3
 800c75e:	d102      	bne.n	800c766 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c760:	e007      	b.n	800c772 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c762:	2301      	movs	r3, #1
 800c764:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	3301      	adds	r3, #1
 800c76a:	60fb      	str	r3, [r7, #12]
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	2b01      	cmp	r3, #1
 800c770:	d9d2      	bls.n	800c718 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	2b02      	cmp	r3, #2
 800c776:	d109      	bne.n	800c78c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d102      	bne.n	800c784 <chk_lock+0x80>
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	2b02      	cmp	r3, #2
 800c782:	d101      	bne.n	800c788 <chk_lock+0x84>
 800c784:	2300      	movs	r3, #0
 800c786:	e010      	b.n	800c7aa <chk_lock+0xa6>
 800c788:	2312      	movs	r3, #18
 800c78a:	e00e      	b.n	800c7aa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d108      	bne.n	800c7a4 <chk_lock+0xa0>
 800c792:	4a09      	ldr	r2, [pc, #36]	; (800c7b8 <chk_lock+0xb4>)
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	011b      	lsls	r3, r3, #4
 800c798:	4413      	add	r3, r2
 800c79a:	330c      	adds	r3, #12
 800c79c:	881b      	ldrh	r3, [r3, #0]
 800c79e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7a2:	d101      	bne.n	800c7a8 <chk_lock+0xa4>
 800c7a4:	2310      	movs	r3, #16
 800c7a6:	e000      	b.n	800c7aa <chk_lock+0xa6>
 800c7a8:	2300      	movs	r3, #0
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	3714      	adds	r7, #20
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b4:	4770      	bx	lr
 800c7b6:	bf00      	nop
 800c7b8:	20001d84 	.word	0x20001d84

0800c7bc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b083      	sub	sp, #12
 800c7c0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	607b      	str	r3, [r7, #4]
 800c7c6:	e002      	b.n	800c7ce <enq_lock+0x12>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	3301      	adds	r3, #1
 800c7cc:	607b      	str	r3, [r7, #4]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2b01      	cmp	r3, #1
 800c7d2:	d806      	bhi.n	800c7e2 <enq_lock+0x26>
 800c7d4:	4a09      	ldr	r2, [pc, #36]	; (800c7fc <enq_lock+0x40>)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	011b      	lsls	r3, r3, #4
 800c7da:	4413      	add	r3, r2
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d1f2      	bne.n	800c7c8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2b02      	cmp	r3, #2
 800c7e6:	bf14      	ite	ne
 800c7e8:	2301      	movne	r3, #1
 800c7ea:	2300      	moveq	r3, #0
 800c7ec:	b2db      	uxtb	r3, r3
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	370c      	adds	r7, #12
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f8:	4770      	bx	lr
 800c7fa:	bf00      	nop
 800c7fc:	20001d84 	.word	0x20001d84

0800c800 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c800:	b480      	push	{r7}
 800c802:	b085      	sub	sp, #20
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c80a:	2300      	movs	r3, #0
 800c80c:	60fb      	str	r3, [r7, #12]
 800c80e:	e01f      	b.n	800c850 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c810:	4a41      	ldr	r2, [pc, #260]	; (800c918 <inc_lock+0x118>)
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	011b      	lsls	r3, r3, #4
 800c816:	4413      	add	r3, r2
 800c818:	681a      	ldr	r2, [r3, #0]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	429a      	cmp	r2, r3
 800c820:	d113      	bne.n	800c84a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c822:	4a3d      	ldr	r2, [pc, #244]	; (800c918 <inc_lock+0x118>)
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	011b      	lsls	r3, r3, #4
 800c828:	4413      	add	r3, r2
 800c82a:	3304      	adds	r3, #4
 800c82c:	681a      	ldr	r2, [r3, #0]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c832:	429a      	cmp	r2, r3
 800c834:	d109      	bne.n	800c84a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c836:	4a38      	ldr	r2, [pc, #224]	; (800c918 <inc_lock+0x118>)
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	011b      	lsls	r3, r3, #4
 800c83c:	4413      	add	r3, r2
 800c83e:	3308      	adds	r3, #8
 800c840:	681a      	ldr	r2, [r3, #0]
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800c846:	429a      	cmp	r2, r3
 800c848:	d006      	beq.n	800c858 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	3301      	adds	r3, #1
 800c84e:	60fb      	str	r3, [r7, #12]
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	2b01      	cmp	r3, #1
 800c854:	d9dc      	bls.n	800c810 <inc_lock+0x10>
 800c856:	e000      	b.n	800c85a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c858:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	2b02      	cmp	r3, #2
 800c85e:	d132      	bne.n	800c8c6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c860:	2300      	movs	r3, #0
 800c862:	60fb      	str	r3, [r7, #12]
 800c864:	e002      	b.n	800c86c <inc_lock+0x6c>
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	3301      	adds	r3, #1
 800c86a:	60fb      	str	r3, [r7, #12]
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	2b01      	cmp	r3, #1
 800c870:	d806      	bhi.n	800c880 <inc_lock+0x80>
 800c872:	4a29      	ldr	r2, [pc, #164]	; (800c918 <inc_lock+0x118>)
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	011b      	lsls	r3, r3, #4
 800c878:	4413      	add	r3, r2
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d1f2      	bne.n	800c866 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	2b02      	cmp	r3, #2
 800c884:	d101      	bne.n	800c88a <inc_lock+0x8a>
 800c886:	2300      	movs	r3, #0
 800c888:	e040      	b.n	800c90c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681a      	ldr	r2, [r3, #0]
 800c88e:	4922      	ldr	r1, [pc, #136]	; (800c918 <inc_lock+0x118>)
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	011b      	lsls	r3, r3, #4
 800c894:	440b      	add	r3, r1
 800c896:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	689a      	ldr	r2, [r3, #8]
 800c89c:	491e      	ldr	r1, [pc, #120]	; (800c918 <inc_lock+0x118>)
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	011b      	lsls	r3, r3, #4
 800c8a2:	440b      	add	r3, r1
 800c8a4:	3304      	adds	r3, #4
 800c8a6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c8ac:	491a      	ldr	r1, [pc, #104]	; (800c918 <inc_lock+0x118>)
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	011b      	lsls	r3, r3, #4
 800c8b2:	440b      	add	r3, r1
 800c8b4:	3308      	adds	r3, #8
 800c8b6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c8b8:	4a17      	ldr	r2, [pc, #92]	; (800c918 <inc_lock+0x118>)
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	011b      	lsls	r3, r3, #4
 800c8be:	4413      	add	r3, r2
 800c8c0:	330c      	adds	r3, #12
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d009      	beq.n	800c8e0 <inc_lock+0xe0>
 800c8cc:	4a12      	ldr	r2, [pc, #72]	; (800c918 <inc_lock+0x118>)
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	011b      	lsls	r3, r3, #4
 800c8d2:	4413      	add	r3, r2
 800c8d4:	330c      	adds	r3, #12
 800c8d6:	881b      	ldrh	r3, [r3, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d001      	beq.n	800c8e0 <inc_lock+0xe0>
 800c8dc:	2300      	movs	r3, #0
 800c8de:	e015      	b.n	800c90c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d108      	bne.n	800c8f8 <inc_lock+0xf8>
 800c8e6:	4a0c      	ldr	r2, [pc, #48]	; (800c918 <inc_lock+0x118>)
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	011b      	lsls	r3, r3, #4
 800c8ec:	4413      	add	r3, r2
 800c8ee:	330c      	adds	r3, #12
 800c8f0:	881b      	ldrh	r3, [r3, #0]
 800c8f2:	3301      	adds	r3, #1
 800c8f4:	b29a      	uxth	r2, r3
 800c8f6:	e001      	b.n	800c8fc <inc_lock+0xfc>
 800c8f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c8fc:	4906      	ldr	r1, [pc, #24]	; (800c918 <inc_lock+0x118>)
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	011b      	lsls	r3, r3, #4
 800c902:	440b      	add	r3, r1
 800c904:	330c      	adds	r3, #12
 800c906:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	3301      	adds	r3, #1
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	3714      	adds	r7, #20
 800c910:	46bd      	mov	sp, r7
 800c912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c916:	4770      	bx	lr
 800c918:	20001d84 	.word	0x20001d84

0800c91c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b085      	sub	sp, #20
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	3b01      	subs	r3, #1
 800c928:	607b      	str	r3, [r7, #4]
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d825      	bhi.n	800c97c <dec_lock+0x60>
		n = Files[i].ctr;
 800c930:	4a17      	ldr	r2, [pc, #92]	; (800c990 <dec_lock+0x74>)
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	011b      	lsls	r3, r3, #4
 800c936:	4413      	add	r3, r2
 800c938:	330c      	adds	r3, #12
 800c93a:	881b      	ldrh	r3, [r3, #0]
 800c93c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c93e:	89fb      	ldrh	r3, [r7, #14]
 800c940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c944:	d101      	bne.n	800c94a <dec_lock+0x2e>
 800c946:	2300      	movs	r3, #0
 800c948:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c94a:	89fb      	ldrh	r3, [r7, #14]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d002      	beq.n	800c956 <dec_lock+0x3a>
 800c950:	89fb      	ldrh	r3, [r7, #14]
 800c952:	3b01      	subs	r3, #1
 800c954:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c956:	4a0e      	ldr	r2, [pc, #56]	; (800c990 <dec_lock+0x74>)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	011b      	lsls	r3, r3, #4
 800c95c:	4413      	add	r3, r2
 800c95e:	330c      	adds	r3, #12
 800c960:	89fa      	ldrh	r2, [r7, #14]
 800c962:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c964:	89fb      	ldrh	r3, [r7, #14]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d105      	bne.n	800c976 <dec_lock+0x5a>
 800c96a:	4a09      	ldr	r2, [pc, #36]	; (800c990 <dec_lock+0x74>)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	011b      	lsls	r3, r3, #4
 800c970:	4413      	add	r3, r2
 800c972:	2200      	movs	r2, #0
 800c974:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c976:	2300      	movs	r3, #0
 800c978:	737b      	strb	r3, [r7, #13]
 800c97a:	e001      	b.n	800c980 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c97c:	2302      	movs	r3, #2
 800c97e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c980:	7b7b      	ldrb	r3, [r7, #13]
}
 800c982:	4618      	mov	r0, r3
 800c984:	3714      	adds	r7, #20
 800c986:	46bd      	mov	sp, r7
 800c988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98c:	4770      	bx	lr
 800c98e:	bf00      	nop
 800c990:	20001d84 	.word	0x20001d84

0800c994 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c994:	b480      	push	{r7}
 800c996:	b085      	sub	sp, #20
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c99c:	2300      	movs	r3, #0
 800c99e:	60fb      	str	r3, [r7, #12]
 800c9a0:	e010      	b.n	800c9c4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c9a2:	4a0d      	ldr	r2, [pc, #52]	; (800c9d8 <clear_lock+0x44>)
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	011b      	lsls	r3, r3, #4
 800c9a8:	4413      	add	r3, r2
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	687a      	ldr	r2, [r7, #4]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d105      	bne.n	800c9be <clear_lock+0x2a>
 800c9b2:	4a09      	ldr	r2, [pc, #36]	; (800c9d8 <clear_lock+0x44>)
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	011b      	lsls	r3, r3, #4
 800c9b8:	4413      	add	r3, r2
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	3301      	adds	r3, #1
 800c9c2:	60fb      	str	r3, [r7, #12]
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2b01      	cmp	r3, #1
 800c9c8:	d9eb      	bls.n	800c9a2 <clear_lock+0xe>
	}
}
 800c9ca:	bf00      	nop
 800c9cc:	bf00      	nop
 800c9ce:	3714      	adds	r7, #20
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr
 800c9d8:	20001d84 	.word	0x20001d84

0800c9dc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b086      	sub	sp, #24
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	78db      	ldrb	r3, [r3, #3]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d034      	beq.n	800ca5a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9f4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	7858      	ldrb	r0, [r3, #1]
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ca00:	2301      	movs	r3, #1
 800ca02:	697a      	ldr	r2, [r7, #20]
 800ca04:	f7ff fbdc 	bl	800c1c0 <disk_write>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d002      	beq.n	800ca14 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ca0e:	2301      	movs	r3, #1
 800ca10:	73fb      	strb	r3, [r7, #15]
 800ca12:	e022      	b.n	800ca5a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2200      	movs	r2, #0
 800ca18:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca1e:	697a      	ldr	r2, [r7, #20]
 800ca20:	1ad2      	subs	r2, r2, r3
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6a1b      	ldr	r3, [r3, #32]
 800ca26:	429a      	cmp	r2, r3
 800ca28:	d217      	bcs.n	800ca5a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	789b      	ldrb	r3, [r3, #2]
 800ca2e:	613b      	str	r3, [r7, #16]
 800ca30:	e010      	b.n	800ca54 <sync_window+0x78>
					wsect += fs->fsize;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6a1b      	ldr	r3, [r3, #32]
 800ca36:	697a      	ldr	r2, [r7, #20]
 800ca38:	4413      	add	r3, r2
 800ca3a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	7858      	ldrb	r0, [r3, #1]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ca46:	2301      	movs	r3, #1
 800ca48:	697a      	ldr	r2, [r7, #20]
 800ca4a:	f7ff fbb9 	bl	800c1c0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	3b01      	subs	r3, #1
 800ca52:	613b      	str	r3, [r7, #16]
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	2b01      	cmp	r3, #1
 800ca58:	d8eb      	bhi.n	800ca32 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ca5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3718      	adds	r7, #24
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd80      	pop	{r7, pc}

0800ca64 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b084      	sub	sp, #16
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
 800ca6c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca76:	683a      	ldr	r2, [r7, #0]
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d01b      	beq.n	800cab4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f7ff ffad 	bl	800c9dc <sync_window>
 800ca82:	4603      	mov	r3, r0
 800ca84:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ca86:	7bfb      	ldrb	r3, [r7, #15]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d113      	bne.n	800cab4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	7858      	ldrb	r0, [r3, #1]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ca96:	2301      	movs	r3, #1
 800ca98:	683a      	ldr	r2, [r7, #0]
 800ca9a:	f7ff fb71 	bl	800c180 <disk_read>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d004      	beq.n	800caae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800caa4:	f04f 33ff 	mov.w	r3, #4294967295
 800caa8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800caaa:	2301      	movs	r3, #1
 800caac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	683a      	ldr	r2, [r7, #0]
 800cab2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800cab4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3710      	adds	r7, #16
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}
	...

0800cac0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b084      	sub	sp, #16
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f7ff ff87 	bl	800c9dc <sync_window>
 800cace:	4603      	mov	r3, r0
 800cad0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cad2:	7bfb      	ldrb	r3, [r7, #15]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d158      	bne.n	800cb8a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	781b      	ldrb	r3, [r3, #0]
 800cadc:	2b03      	cmp	r3, #3
 800cade:	d148      	bne.n	800cb72 <sync_fs+0xb2>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	791b      	ldrb	r3, [r3, #4]
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	d144      	bne.n	800cb72 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	3338      	adds	r3, #56	; 0x38
 800caec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800caf0:	2100      	movs	r1, #0
 800caf2:	4618      	mov	r0, r3
 800caf4:	f7ff fda8 	bl	800c648 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	3338      	adds	r3, #56	; 0x38
 800cafc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cb00:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800cb04:	4618      	mov	r0, r3
 800cb06:	f7ff fcaf 	bl	800c468 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	3338      	adds	r3, #56	; 0x38
 800cb0e:	4921      	ldr	r1, [pc, #132]	; (800cb94 <sync_fs+0xd4>)
 800cb10:	4618      	mov	r0, r3
 800cb12:	f7ff fcc4 	bl	800c49e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	3338      	adds	r3, #56	; 0x38
 800cb1a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cb1e:	491e      	ldr	r1, [pc, #120]	; (800cb98 <sync_fs+0xd8>)
 800cb20:	4618      	mov	r0, r3
 800cb22:	f7ff fcbc 	bl	800c49e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	3338      	adds	r3, #56	; 0x38
 800cb2a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	699b      	ldr	r3, [r3, #24]
 800cb32:	4619      	mov	r1, r3
 800cb34:	4610      	mov	r0, r2
 800cb36:	f7ff fcb2 	bl	800c49e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	3338      	adds	r3, #56	; 0x38
 800cb3e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	695b      	ldr	r3, [r3, #20]
 800cb46:	4619      	mov	r1, r3
 800cb48:	4610      	mov	r0, r2
 800cb4a:	f7ff fca8 	bl	800c49e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb52:	1c5a      	adds	r2, r3, #1
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	7858      	ldrb	r0, [r3, #1]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb66:	2301      	movs	r3, #1
 800cb68:	f7ff fb2a 	bl	800c1c0 <disk_write>
			fs->fsi_flag = 0;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	785b      	ldrb	r3, [r3, #1]
 800cb76:	2200      	movs	r2, #0
 800cb78:	2100      	movs	r1, #0
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f7ff fb40 	bl	800c200 <disk_ioctl>
 800cb80:	4603      	mov	r3, r0
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d001      	beq.n	800cb8a <sync_fs+0xca>
 800cb86:	2301      	movs	r3, #1
 800cb88:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800cb8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3710      	adds	r7, #16
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}
 800cb94:	41615252 	.word	0x41615252
 800cb98:	61417272 	.word	0x61417272

0800cb9c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b083      	sub	sp, #12
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
 800cba4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	3b02      	subs	r3, #2
 800cbaa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	69db      	ldr	r3, [r3, #28]
 800cbb0:	3b02      	subs	r3, #2
 800cbb2:	683a      	ldr	r2, [r7, #0]
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d301      	bcc.n	800cbbc <clust2sect+0x20>
 800cbb8:	2300      	movs	r3, #0
 800cbba:	e008      	b.n	800cbce <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	895b      	ldrh	r3, [r3, #10]
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	fb03 f202 	mul.w	r2, r3, r2
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbcc:	4413      	add	r3, r2
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	370c      	adds	r7, #12
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd8:	4770      	bx	lr
	...

0800cbdc <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b088      	sub	sp, #32
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800cbe6:	6879      	ldr	r1, [r7, #4]
 800cbe8:	6809      	ldr	r1, [r1, #0]
 800cbea:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cbec:	6839      	ldr	r1, [r7, #0]
 800cbee:	2901      	cmp	r1, #1
 800cbf0:	d904      	bls.n	800cbfc <get_fat+0x20>
 800cbf2:	69b9      	ldr	r1, [r7, #24]
 800cbf4:	69c9      	ldr	r1, [r1, #28]
 800cbf6:	6838      	ldr	r0, [r7, #0]
 800cbf8:	4288      	cmp	r0, r1
 800cbfa:	d302      	bcc.n	800cc02 <get_fat+0x26>
		val = 1;	/* Internal error */
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	61fb      	str	r3, [r7, #28]
 800cc00:	e101      	b.n	800ce06 <get_fat+0x22a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cc02:	f04f 31ff 	mov.w	r1, #4294967295
 800cc06:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 800cc08:	69b9      	ldr	r1, [r7, #24]
 800cc0a:	7809      	ldrb	r1, [r1, #0]
 800cc0c:	3901      	subs	r1, #1
 800cc0e:	2903      	cmp	r1, #3
 800cc10:	f200 80ed 	bhi.w	800cdee <get_fat+0x212>
 800cc14:	a001      	add	r0, pc, #4	; (adr r0, 800cc1c <get_fat+0x40>)
 800cc16:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cc1a:	bf00      	nop
 800cc1c:	0800cc2d 	.word	0x0800cc2d
 800cc20:	0800ccb5 	.word	0x0800ccb5
 800cc24:	0800cceb 	.word	0x0800cceb
 800cc28:	0800cd23 	.word	0x0800cd23
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	60fb      	str	r3, [r7, #12]
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	085b      	lsrs	r3, r3, #1
 800cc34:	68fa      	ldr	r2, [r7, #12]
 800cc36:	4413      	add	r3, r2
 800cc38:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cc3a:	69bb      	ldr	r3, [r7, #24]
 800cc3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	0a5b      	lsrs	r3, r3, #9
 800cc42:	4413      	add	r3, r2
 800cc44:	4619      	mov	r1, r3
 800cc46:	69b8      	ldr	r0, [r7, #24]
 800cc48:	f7ff ff0c 	bl	800ca64 <move_window>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	f040 80d0 	bne.w	800cdf4 <get_fat+0x218>
			wc = fs->win[bc++ % SS(fs)];
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	1c5a      	adds	r2, r3, #1
 800cc58:	60fa      	str	r2, [r7, #12]
 800cc5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc5e:	69ba      	ldr	r2, [r7, #24]
 800cc60:	4413      	add	r3, r2
 800cc62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cc66:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cc68:	69bb      	ldr	r3, [r7, #24]
 800cc6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	0a5b      	lsrs	r3, r3, #9
 800cc70:	4413      	add	r3, r2
 800cc72:	4619      	mov	r1, r3
 800cc74:	69b8      	ldr	r0, [r7, #24]
 800cc76:	f7ff fef5 	bl	800ca64 <move_window>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	f040 80bb 	bne.w	800cdf8 <get_fat+0x21c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc88:	69ba      	ldr	r2, [r7, #24]
 800cc8a:	4413      	add	r3, r2
 800cc8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cc90:	021b      	lsls	r3, r3, #8
 800cc92:	461a      	mov	r2, r3
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	4313      	orrs	r3, r2
 800cc98:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	f003 0301 	and.w	r3, r3, #1
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d002      	beq.n	800ccaa <get_fat+0xce>
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	091b      	lsrs	r3, r3, #4
 800cca8:	e002      	b.n	800ccb0 <get_fat+0xd4>
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ccb0:	61fb      	str	r3, [r7, #28]
			break;
 800ccb2:	e0a8      	b.n	800ce06 <get_fat+0x22a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ccb4:	69bb      	ldr	r3, [r7, #24]
 800ccb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	0a1b      	lsrs	r3, r3, #8
 800ccbc:	4413      	add	r3, r2
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	69b8      	ldr	r0, [r7, #24]
 800ccc2:	f7ff fecf 	bl	800ca64 <move_window>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	f040 8097 	bne.w	800cdfc <get_fat+0x220>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ccce:	69bb      	ldr	r3, [r7, #24]
 800ccd0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	005b      	lsls	r3, r3, #1
 800ccd8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ccdc:	4413      	add	r3, r2
 800ccde:	4618      	mov	r0, r3
 800cce0:	f7ff faac 	bl	800c23c <ld_word>
 800cce4:	4603      	mov	r3, r0
 800cce6:	61fb      	str	r3, [r7, #28]
			break;
 800cce8:	e08d      	b.n	800ce06 <get_fat+0x22a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ccea:	69bb      	ldr	r3, [r7, #24]
 800ccec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	09db      	lsrs	r3, r3, #7
 800ccf2:	4413      	add	r3, r2
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	69b8      	ldr	r0, [r7, #24]
 800ccf8:	f7ff feb4 	bl	800ca64 <move_window>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d17e      	bne.n	800ce00 <get_fat+0x224>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cd02:	69bb      	ldr	r3, [r7, #24]
 800cd04:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	009b      	lsls	r3, r3, #2
 800cd0c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cd10:	4413      	add	r3, r2
 800cd12:	4618      	mov	r0, r3
 800cd14:	f7ff faaa 	bl	800c26c <ld_dword>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cd1e:	61fb      	str	r3, [r7, #28]
			break;
 800cd20:	e071      	b.n	800ce06 <get_fat+0x22a>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800cd22:	6879      	ldr	r1, [r7, #4]
 800cd24:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800cd28:	4301      	orrs	r1, r0
 800cd2a:	d060      	beq.n	800cdee <get_fat+0x212>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800cd2c:	6879      	ldr	r1, [r7, #4]
 800cd2e:	6889      	ldr	r1, [r1, #8]
 800cd30:	6838      	ldr	r0, [r7, #0]
 800cd32:	1a41      	subs	r1, r0, r1
 800cd34:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800cd36:	6879      	ldr	r1, [r7, #4]
 800cd38:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800cd3c:	1e42      	subs	r2, r0, #1
 800cd3e:	f141 33ff 	adc.w	r3, r1, #4294967295
 800cd42:	f04f 0000 	mov.w	r0, #0
 800cd46:	f04f 0100 	mov.w	r1, #0
 800cd4a:	0a50      	lsrs	r0, r2, #9
 800cd4c:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800cd50:	0a59      	lsrs	r1, r3, #9
 800cd52:	4602      	mov	r2, r0
 800cd54:	69bb      	ldr	r3, [r7, #24]
 800cd56:	895b      	ldrh	r3, [r3, #10]
 800cd58:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd5c:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	79db      	ldrb	r3, [r3, #7]
 800cd62:	2b02      	cmp	r3, #2
 800cd64:	d10e      	bne.n	800cd84 <get_fat+0x1a8>
					if (cofs <= clen) {
 800cd66:	697a      	ldr	r2, [r7, #20]
 800cd68:	693b      	ldr	r3, [r7, #16]
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d80a      	bhi.n	800cd84 <get_fat+0x1a8>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800cd6e:	697a      	ldr	r2, [r7, #20]
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	429a      	cmp	r2, r3
 800cd74:	d002      	beq.n	800cd7c <get_fat+0x1a0>
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	3301      	adds	r3, #1
 800cd7a:	e001      	b.n	800cd80 <get_fat+0x1a4>
 800cd7c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cd80:	61fb      	str	r3, [r7, #28]
						break;
 800cd82:	e040      	b.n	800ce06 <get_fat+0x22a>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	79db      	ldrb	r3, [r3, #7]
 800cd88:	2b03      	cmp	r3, #3
 800cd8a:	d108      	bne.n	800cd9e <get_fat+0x1c2>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	699b      	ldr	r3, [r3, #24]
 800cd90:	697a      	ldr	r2, [r7, #20]
 800cd92:	429a      	cmp	r2, r3
 800cd94:	d203      	bcs.n	800cd9e <get_fat+0x1c2>
					val = clst + 1; 	/* Generate the value */
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	3301      	adds	r3, #1
 800cd9a:	61fb      	str	r3, [r7, #28]
					break;
 800cd9c:	e033      	b.n	800ce06 <get_fat+0x22a>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	79db      	ldrb	r3, [r3, #7]
 800cda2:	2b02      	cmp	r3, #2
 800cda4:	d023      	beq.n	800cdee <get_fat+0x212>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	69db      	ldr	r3, [r3, #28]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d003      	beq.n	800cdb6 <get_fat+0x1da>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800cdae:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cdb2:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800cdb4:	e027      	b.n	800ce06 <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cdb6:	69bb      	ldr	r3, [r7, #24]
 800cdb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	09db      	lsrs	r3, r3, #7
 800cdbe:	4413      	add	r3, r2
 800cdc0:	4619      	mov	r1, r3
 800cdc2:	69b8      	ldr	r0, [r7, #24]
 800cdc4:	f7ff fe4e 	bl	800ca64 <move_window>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d11a      	bne.n	800ce04 <get_fat+0x228>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800cdce:	69bb      	ldr	r3, [r7, #24]
 800cdd0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	009b      	lsls	r3, r3, #2
 800cdd8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cddc:	4413      	add	r3, r2
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7ff fa44 	bl	800c26c <ld_dword>
 800cde4:	4603      	mov	r3, r0
 800cde6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cdea:	61fb      	str	r3, [r7, #28]
					break;
 800cdec:	e00b      	b.n	800ce06 <get_fat+0x22a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cdee:	2301      	movs	r3, #1
 800cdf0:	61fb      	str	r3, [r7, #28]
 800cdf2:	e008      	b.n	800ce06 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cdf4:	bf00      	nop
 800cdf6:	e006      	b.n	800ce06 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cdf8:	bf00      	nop
 800cdfa:	e004      	b.n	800ce06 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cdfc:	bf00      	nop
 800cdfe:	e002      	b.n	800ce06 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ce00:	bf00      	nop
 800ce02:	e000      	b.n	800ce06 <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ce04:	bf00      	nop
		}
	}

	return val;
 800ce06:	69fb      	ldr	r3, [r7, #28]
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3720      	adds	r7, #32
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}

0800ce10 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ce10:	b590      	push	{r4, r7, lr}
 800ce12:	b089      	sub	sp, #36	; 0x24
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	60b9      	str	r1, [r7, #8]
 800ce1a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ce1c:	2302      	movs	r3, #2
 800ce1e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	2b01      	cmp	r3, #1
 800ce24:	f240 80d6 	bls.w	800cfd4 <put_fat+0x1c4>
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	69db      	ldr	r3, [r3, #28]
 800ce2c:	68ba      	ldr	r2, [r7, #8]
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	f080 80d0 	bcs.w	800cfd4 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	781b      	ldrb	r3, [r3, #0]
 800ce38:	2b04      	cmp	r3, #4
 800ce3a:	f300 80d4 	bgt.w	800cfe6 <put_fat+0x1d6>
 800ce3e:	2b03      	cmp	r3, #3
 800ce40:	f280 8093 	bge.w	800cf6a <put_fat+0x15a>
 800ce44:	2b01      	cmp	r3, #1
 800ce46:	d002      	beq.n	800ce4e <put_fat+0x3e>
 800ce48:	2b02      	cmp	r3, #2
 800ce4a:	d06e      	beq.n	800cf2a <put_fat+0x11a>
 800ce4c:	e0cb      	b.n	800cfe6 <put_fat+0x1d6>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	61bb      	str	r3, [r7, #24]
 800ce52:	69bb      	ldr	r3, [r7, #24]
 800ce54:	085b      	lsrs	r3, r3, #1
 800ce56:	69ba      	ldr	r2, [r7, #24]
 800ce58:	4413      	add	r3, r2
 800ce5a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ce60:	69bb      	ldr	r3, [r7, #24]
 800ce62:	0a5b      	lsrs	r3, r3, #9
 800ce64:	4413      	add	r3, r2
 800ce66:	4619      	mov	r1, r3
 800ce68:	68f8      	ldr	r0, [r7, #12]
 800ce6a:	f7ff fdfb 	bl	800ca64 <move_window>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ce72:	7ffb      	ldrb	r3, [r7, #31]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	f040 80af 	bne.w	800cfd8 <put_fat+0x1c8>
			p = fs->win + bc++ % SS(fs);
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ce80:	69bb      	ldr	r3, [r7, #24]
 800ce82:	1c59      	adds	r1, r3, #1
 800ce84:	61b9      	str	r1, [r7, #24]
 800ce86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce8a:	4413      	add	r3, r2
 800ce8c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ce8e:	68bb      	ldr	r3, [r7, #8]
 800ce90:	f003 0301 	and.w	r3, r3, #1
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d00d      	beq.n	800ceb4 <put_fat+0xa4>
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	781b      	ldrb	r3, [r3, #0]
 800ce9c:	b25b      	sxtb	r3, r3
 800ce9e:	f003 030f 	and.w	r3, r3, #15
 800cea2:	b25a      	sxtb	r2, r3
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	b2db      	uxtb	r3, r3
 800cea8:	011b      	lsls	r3, r3, #4
 800ceaa:	b25b      	sxtb	r3, r3
 800ceac:	4313      	orrs	r3, r2
 800ceae:	b25b      	sxtb	r3, r3
 800ceb0:	b2db      	uxtb	r3, r3
 800ceb2:	e001      	b.n	800ceb8 <put_fat+0xa8>
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	b2db      	uxtb	r3, r3
 800ceb8:	697a      	ldr	r2, [r7, #20]
 800ceba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	2201      	movs	r2, #1
 800cec0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cec6:	69bb      	ldr	r3, [r7, #24]
 800cec8:	0a5b      	lsrs	r3, r3, #9
 800ceca:	4413      	add	r3, r2
 800cecc:	4619      	mov	r1, r3
 800cece:	68f8      	ldr	r0, [r7, #12]
 800ced0:	f7ff fdc8 	bl	800ca64 <move_window>
 800ced4:	4603      	mov	r3, r0
 800ced6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ced8:	7ffb      	ldrb	r3, [r7, #31]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d17e      	bne.n	800cfdc <put_fat+0x1cc>
			p = fs->win + bc % SS(fs);
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800cee4:	69bb      	ldr	r3, [r7, #24]
 800cee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ceea:	4413      	add	r3, r2
 800ceec:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	f003 0301 	and.w	r3, r3, #1
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d003      	beq.n	800cf00 <put_fat+0xf0>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	091b      	lsrs	r3, r3, #4
 800cefc:	b2db      	uxtb	r3, r3
 800cefe:	e00e      	b.n	800cf1e <put_fat+0x10e>
 800cf00:	697b      	ldr	r3, [r7, #20]
 800cf02:	781b      	ldrb	r3, [r3, #0]
 800cf04:	b25b      	sxtb	r3, r3
 800cf06:	f023 030f 	bic.w	r3, r3, #15
 800cf0a:	b25a      	sxtb	r2, r3
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	0a1b      	lsrs	r3, r3, #8
 800cf10:	b25b      	sxtb	r3, r3
 800cf12:	f003 030f 	and.w	r3, r3, #15
 800cf16:	b25b      	sxtb	r3, r3
 800cf18:	4313      	orrs	r3, r2
 800cf1a:	b25b      	sxtb	r3, r3
 800cf1c:	b2db      	uxtb	r3, r3
 800cf1e:	697a      	ldr	r2, [r7, #20]
 800cf20:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	2201      	movs	r2, #1
 800cf26:	70da      	strb	r2, [r3, #3]
			break;
 800cf28:	e05d      	b.n	800cfe6 <put_fat+0x1d6>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	0a1b      	lsrs	r3, r3, #8
 800cf32:	4413      	add	r3, r2
 800cf34:	4619      	mov	r1, r3
 800cf36:	68f8      	ldr	r0, [r7, #12]
 800cf38:	f7ff fd94 	bl	800ca64 <move_window>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cf40:	7ffb      	ldrb	r3, [r7, #31]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d14c      	bne.n	800cfe0 <put_fat+0x1d0>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	005b      	lsls	r3, r3, #1
 800cf50:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800cf54:	4413      	add	r3, r2
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	b292      	uxth	r2, r2
 800cf5a:	4611      	mov	r1, r2
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f7ff fa83 	bl	800c468 <st_word>
			fs->wflag = 1;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	2201      	movs	r2, #1
 800cf66:	70da      	strb	r2, [r3, #3]
			break;
 800cf68:	e03d      	b.n	800cfe6 <put_fat+0x1d6>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	09db      	lsrs	r3, r3, #7
 800cf72:	4413      	add	r3, r2
 800cf74:	4619      	mov	r1, r3
 800cf76:	68f8      	ldr	r0, [r7, #12]
 800cf78:	f7ff fd74 	bl	800ca64 <move_window>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cf80:	7ffb      	ldrb	r3, [r7, #31]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d12e      	bne.n	800cfe4 <put_fat+0x1d4>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	2b04      	cmp	r3, #4
 800cf8c:	d012      	beq.n	800cfb4 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	009b      	lsls	r3, r3, #2
 800cf9e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cfa2:	4413      	add	r3, r2
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f7ff f961 	bl	800c26c <ld_dword>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cfb0:	4323      	orrs	r3, r4
 800cfb2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	009b      	lsls	r3, r3, #2
 800cfbe:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cfc2:	4413      	add	r3, r2
 800cfc4:	6879      	ldr	r1, [r7, #4]
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f7ff fa69 	bl	800c49e <st_dword>
			fs->wflag = 1;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	2201      	movs	r2, #1
 800cfd0:	70da      	strb	r2, [r3, #3]
			break;
 800cfd2:	e008      	b.n	800cfe6 <put_fat+0x1d6>
		}
	}
 800cfd4:	bf00      	nop
 800cfd6:	e006      	b.n	800cfe6 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800cfd8:	bf00      	nop
 800cfda:	e004      	b.n	800cfe6 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800cfdc:	bf00      	nop
 800cfde:	e002      	b.n	800cfe6 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800cfe0:	bf00      	nop
 800cfe2:	e000      	b.n	800cfe6 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800cfe4:	bf00      	nop
	return res;
 800cfe6:	7ffb      	ldrb	r3, [r7, #31]
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	3724      	adds	r7, #36	; 0x24
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd90      	pop	{r4, r7, pc}

0800cff0 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b08a      	sub	sp, #40	; 0x28
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	60f8      	str	r0, [r7, #12]
 800cff8:	60b9      	str	r1, [r7, #8]
 800cffa:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	3b02      	subs	r3, #2
 800d000:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	69db      	ldr	r3, [r3, #28]
 800d006:	3b02      	subs	r3, #2
 800d008:	68ba      	ldr	r2, [r7, #8]
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d301      	bcc.n	800d012 <find_bitmap+0x22>
 800d00e:	2300      	movs	r3, #0
 800d010:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	61fb      	str	r3, [r7, #28]
 800d016:	69fb      	ldr	r3, [r7, #28]
 800d018:	61bb      	str	r3, [r7, #24]
 800d01a:	2300      	movs	r3, #0
 800d01c:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d022:	69fb      	ldr	r3, [r7, #28]
 800d024:	0b1b      	lsrs	r3, r3, #12
 800d026:	4413      	add	r3, r2
 800d028:	4619      	mov	r1, r3
 800d02a:	68f8      	ldr	r0, [r7, #12]
 800d02c:	f7ff fd1a 	bl	800ca64 <move_window>
 800d030:	4603      	mov	r3, r0
 800d032:	2b00      	cmp	r3, #0
 800d034:	d002      	beq.n	800d03c <find_bitmap+0x4c>
 800d036:	f04f 33ff 	mov.w	r3, #4294967295
 800d03a:	e051      	b.n	800d0e0 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800d03c:	69fb      	ldr	r3, [r7, #28]
 800d03e:	08db      	lsrs	r3, r3, #3
 800d040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d044:	623b      	str	r3, [r7, #32]
 800d046:	69fb      	ldr	r3, [r7, #28]
 800d048:	f003 0307 	and.w	r3, r3, #7
 800d04c:	2201      	movs	r2, #1
 800d04e:	fa02 f303 	lsl.w	r3, r2, r3
 800d052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800d056:	68fa      	ldr	r2, [r7, #12]
 800d058:	6a3b      	ldr	r3, [r7, #32]
 800d05a:	4413      	add	r3, r2
 800d05c:	3338      	adds	r3, #56	; 0x38
 800d05e:	781a      	ldrb	r2, [r3, #0]
 800d060:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d064:	4013      	ands	r3, r2
 800d066:	74fb      	strb	r3, [r7, #19]
 800d068:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d06c:	005b      	lsls	r3, r3, #1
 800d06e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800d072:	69fb      	ldr	r3, [r7, #28]
 800d074:	3301      	adds	r3, #1
 800d076:	61fb      	str	r3, [r7, #28]
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	69db      	ldr	r3, [r3, #28]
 800d07c:	3b02      	subs	r3, #2
 800d07e:	69fa      	ldr	r2, [r7, #28]
 800d080:	429a      	cmp	r2, r3
 800d082:	d307      	bcc.n	800d094 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 800d084:	2300      	movs	r3, #0
 800d086:	61fb      	str	r3, [r7, #28]
 800d088:	2300      	movs	r3, #0
 800d08a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d08e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d092:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800d094:	7cfb      	ldrb	r3, [r7, #19]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d109      	bne.n	800d0ae <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	3301      	adds	r3, #1
 800d09e:	617b      	str	r3, [r7, #20]
 800d0a0:	697a      	ldr	r2, [r7, #20]
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	d106      	bne.n	800d0b6 <find_bitmap+0xc6>
 800d0a8:	69bb      	ldr	r3, [r7, #24]
 800d0aa:	3302      	adds	r3, #2
 800d0ac:	e018      	b.n	800d0e0 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800d0ae:	69fb      	ldr	r3, [r7, #28]
 800d0b0:	61bb      	str	r3, [r7, #24]
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800d0b6:	69fa      	ldr	r2, [r7, #28]
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	d101      	bne.n	800d0c2 <find_bitmap+0xd2>
 800d0be:	2300      	movs	r3, #0
 800d0c0:	e00e      	b.n	800d0e0 <find_bitmap+0xf0>
			} while (bm);
 800d0c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d1c5      	bne.n	800d056 <find_bitmap+0x66>
			bm = 1;
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800d0d0:	6a3b      	ldr	r3, [r7, #32]
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	623b      	str	r3, [r7, #32]
 800d0d6:	6a3b      	ldr	r3, [r7, #32]
 800d0d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d0dc:	d3bb      	bcc.n	800d056 <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800d0de:	e79e      	b.n	800d01e <find_bitmap+0x2e>
	}
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3728      	adds	r7, #40	; 0x28
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}

0800d0e8 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b088      	sub	sp, #32
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	60f8      	str	r0, [r7, #12]
 800d0f0:	60b9      	str	r1, [r7, #8]
 800d0f2:	607a      	str	r2, [r7, #4]
 800d0f4:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	3b02      	subs	r3, #2
 800d0fa:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	0b1b      	lsrs	r3, r3, #12
 800d104:	4413      	add	r3, r2
 800d106:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	08db      	lsrs	r3, r3, #3
 800d10c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d110:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800d112:	68bb      	ldr	r3, [r7, #8]
 800d114:	f003 0307 	and.w	r3, r3, #7
 800d118:	2201      	movs	r2, #1
 800d11a:	fa02 f303 	lsl.w	r3, r2, r3
 800d11e:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	1c5a      	adds	r2, r3, #1
 800d124:	617a      	str	r2, [r7, #20]
 800d126:	4619      	mov	r1, r3
 800d128:	68f8      	ldr	r0, [r7, #12]
 800d12a:	f7ff fc9b 	bl	800ca64 <move_window>
 800d12e:	4603      	mov	r3, r0
 800d130:	2b00      	cmp	r3, #0
 800d132:	d001      	beq.n	800d138 <change_bitmap+0x50>
 800d134:	2301      	movs	r3, #1
 800d136:	e03d      	b.n	800d1b4 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800d138:	68fa      	ldr	r2, [r7, #12]
 800d13a:	69bb      	ldr	r3, [r7, #24]
 800d13c:	4413      	add	r3, r2
 800d13e:	3338      	adds	r3, #56	; 0x38
 800d140:	781a      	ldrb	r2, [r3, #0]
 800d142:	7ffb      	ldrb	r3, [r7, #31]
 800d144:	4013      	ands	r3, r2
 800d146:	b2db      	uxtb	r3, r3
 800d148:	2b00      	cmp	r3, #0
 800d14a:	bf14      	ite	ne
 800d14c:	2301      	movne	r3, #1
 800d14e:	2300      	moveq	r3, #0
 800d150:	b2db      	uxtb	r3, r3
 800d152:	461a      	mov	r2, r3
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	4293      	cmp	r3, r2
 800d158:	d101      	bne.n	800d15e <change_bitmap+0x76>
 800d15a:	2302      	movs	r3, #2
 800d15c:	e02a      	b.n	800d1b4 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 800d15e:	68fa      	ldr	r2, [r7, #12]
 800d160:	69bb      	ldr	r3, [r7, #24]
 800d162:	4413      	add	r3, r2
 800d164:	3338      	adds	r3, #56	; 0x38
 800d166:	781a      	ldrb	r2, [r3, #0]
 800d168:	7ffb      	ldrb	r3, [r7, #31]
 800d16a:	4053      	eors	r3, r2
 800d16c:	b2d9      	uxtb	r1, r3
 800d16e:	68fa      	ldr	r2, [r7, #12]
 800d170:	69bb      	ldr	r3, [r7, #24]
 800d172:	4413      	add	r3, r2
 800d174:	3338      	adds	r3, #56	; 0x38
 800d176:	460a      	mov	r2, r1
 800d178:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	2201      	movs	r2, #1
 800d17e:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	3b01      	subs	r3, #1
 800d184:	607b      	str	r3, [r7, #4]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d101      	bne.n	800d190 <change_bitmap+0xa8>
 800d18c:	2300      	movs	r3, #0
 800d18e:	e011      	b.n	800d1b4 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 800d190:	7ffb      	ldrb	r3, [r7, #31]
 800d192:	005b      	lsls	r3, r3, #1
 800d194:	77fb      	strb	r3, [r7, #31]
 800d196:	7ffb      	ldrb	r3, [r7, #31]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d1cd      	bne.n	800d138 <change_bitmap+0x50>
			bm = 1;
 800d19c:	2301      	movs	r3, #1
 800d19e:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800d1a0:	69bb      	ldr	r3, [r7, #24]
 800d1a2:	3301      	adds	r3, #1
 800d1a4:	61bb      	str	r3, [r7, #24]
 800d1a6:	69bb      	ldr	r3, [r7, #24]
 800d1a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d1ac:	d3c4      	bcc.n	800d138 <change_bitmap+0x50>
		i = 0;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800d1b2:	e7b5      	b.n	800d120 <change_bitmap+0x38>
	}
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3720      	adds	r7, #32
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}

0800d1bc <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b086      	sub	sp, #24
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	79db      	ldrb	r3, [r3, #7]
 800d1c8:	2b03      	cmp	r3, #3
 800d1ca:	d121      	bne.n	800d210 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	689b      	ldr	r3, [r3, #8]
 800d1d0:	617b      	str	r3, [r7, #20]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	699b      	ldr	r3, [r3, #24]
 800d1d6:	613b      	str	r3, [r7, #16]
 800d1d8:	e014      	b.n	800d204 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6818      	ldr	r0, [r3, #0]
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	3301      	adds	r3, #1
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	6979      	ldr	r1, [r7, #20]
 800d1e6:	f7ff fe13 	bl	800ce10 <put_fat>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800d1ee:	7bfb      	ldrb	r3, [r7, #15]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d001      	beq.n	800d1f8 <fill_first_frag+0x3c>
 800d1f4:	7bfb      	ldrb	r3, [r7, #15]
 800d1f6:	e00c      	b.n	800d212 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	617b      	str	r3, [r7, #20]
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	3b01      	subs	r3, #1
 800d202:	613b      	str	r3, [r7, #16]
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d1e7      	bne.n	800d1da <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2200      	movs	r2, #0
 800d20e:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800d210:	2300      	movs	r3, #0
}
 800d212:	4618      	mov	r0, r3
 800d214:	3718      	adds	r7, #24
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}

0800d21a <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800d21a:	b580      	push	{r7, lr}
 800d21c:	b086      	sub	sp, #24
 800d21e:	af00      	add	r7, sp, #0
 800d220:	60f8      	str	r0, [r7, #12]
 800d222:	60b9      	str	r1, [r7, #8]
 800d224:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800d226:	e020      	b.n	800d26a <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	6818      	ldr	r0, [r3, #0]
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	69db      	ldr	r3, [r3, #28]
 800d230:	68ba      	ldr	r2, [r7, #8]
 800d232:	1ad3      	subs	r3, r2, r3
 800d234:	1c59      	adds	r1, r3, #1
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	69db      	ldr	r3, [r3, #28]
 800d23a:	2b01      	cmp	r3, #1
 800d23c:	d905      	bls.n	800d24a <fill_last_frag+0x30>
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	69db      	ldr	r3, [r3, #28]
 800d242:	68ba      	ldr	r2, [r7, #8]
 800d244:	1ad3      	subs	r3, r2, r3
 800d246:	3302      	adds	r3, #2
 800d248:	e000      	b.n	800d24c <fill_last_frag+0x32>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	461a      	mov	r2, r3
 800d24e:	f7ff fddf 	bl	800ce10 <put_fat>
 800d252:	4603      	mov	r3, r0
 800d254:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800d256:	7dfb      	ldrb	r3, [r7, #23]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d001      	beq.n	800d260 <fill_last_frag+0x46>
 800d25c:	7dfb      	ldrb	r3, [r7, #23]
 800d25e:	e009      	b.n	800d274 <fill_last_frag+0x5a>
		obj->n_frag--;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	69db      	ldr	r3, [r3, #28]
 800d264:	1e5a      	subs	r2, r3, #1
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	69db      	ldr	r3, [r3, #28]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d1da      	bne.n	800d228 <fill_last_frag+0xe>
	}
	return FR_OK;
 800d272:	2300      	movs	r3, #0
}
 800d274:	4618      	mov	r0, r3
 800d276:	3718      	adds	r7, #24
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}

0800d27c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b08a      	sub	sp, #40	; 0x28
 800d280:	af00      	add	r7, sp, #0
 800d282:	60f8      	str	r0, [r7, #12]
 800d284:	60b9      	str	r1, [r7, #8]
 800d286:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d288:	2300      	movs	r3, #0
 800d28a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	627b      	str	r3, [r7, #36]	; 0x24
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	2b01      	cmp	r3, #1
 800d29e:	d904      	bls.n	800d2aa <remove_chain+0x2e>
 800d2a0:	69bb      	ldr	r3, [r7, #24]
 800d2a2:	69db      	ldr	r3, [r3, #28]
 800d2a4:	68ba      	ldr	r2, [r7, #8]
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	d301      	bcc.n	800d2ae <remove_chain+0x32>
 800d2aa:	2302      	movs	r3, #2
 800d2ac:	e096      	b.n	800d3dc <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d014      	beq.n	800d2de <remove_chain+0x62>
 800d2b4:	69bb      	ldr	r3, [r7, #24]
 800d2b6:	781b      	ldrb	r3, [r3, #0]
 800d2b8:	2b04      	cmp	r3, #4
 800d2ba:	d103      	bne.n	800d2c4 <remove_chain+0x48>
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	79db      	ldrb	r3, [r3, #7]
 800d2c0:	2b02      	cmp	r3, #2
 800d2c2:	d00c      	beq.n	800d2de <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d2c4:	f04f 32ff 	mov.w	r2, #4294967295
 800d2c8:	6879      	ldr	r1, [r7, #4]
 800d2ca:	69b8      	ldr	r0, [r7, #24]
 800d2cc:	f7ff fda0 	bl	800ce10 <put_fat>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d2d4:	7ffb      	ldrb	r3, [r7, #31]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d001      	beq.n	800d2de <remove_chain+0x62>
 800d2da:	7ffb      	ldrb	r3, [r7, #31]
 800d2dc:	e07e      	b.n	800d3dc <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d2de:	68b9      	ldr	r1, [r7, #8]
 800d2e0:	68f8      	ldr	r0, [r7, #12]
 800d2e2:	f7ff fc7b 	bl	800cbdc <get_fat>
 800d2e6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d055      	beq.n	800d39a <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	2b01      	cmp	r3, #1
 800d2f2:	d101      	bne.n	800d2f8 <remove_chain+0x7c>
 800d2f4:	2302      	movs	r3, #2
 800d2f6:	e071      	b.n	800d3dc <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2fe:	d101      	bne.n	800d304 <remove_chain+0x88>
 800d300:	2301      	movs	r3, #1
 800d302:	e06b      	b.n	800d3dc <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800d304:	69bb      	ldr	r3, [r7, #24]
 800d306:	781b      	ldrb	r3, [r3, #0]
 800d308:	2b04      	cmp	r3, #4
 800d30a:	d00b      	beq.n	800d324 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d30c:	2200      	movs	r2, #0
 800d30e:	68b9      	ldr	r1, [r7, #8]
 800d310:	69b8      	ldr	r0, [r7, #24]
 800d312:	f7ff fd7d 	bl	800ce10 <put_fat>
 800d316:	4603      	mov	r3, r0
 800d318:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d31a:	7ffb      	ldrb	r3, [r7, #31]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d001      	beq.n	800d324 <remove_chain+0xa8>
 800d320:	7ffb      	ldrb	r3, [r7, #31]
 800d322:	e05b      	b.n	800d3dc <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d324:	69bb      	ldr	r3, [r7, #24]
 800d326:	699a      	ldr	r2, [r3, #24]
 800d328:	69bb      	ldr	r3, [r7, #24]
 800d32a:	69db      	ldr	r3, [r3, #28]
 800d32c:	3b02      	subs	r3, #2
 800d32e:	429a      	cmp	r2, r3
 800d330:	d20b      	bcs.n	800d34a <remove_chain+0xce>
			fs->free_clst++;
 800d332:	69bb      	ldr	r3, [r7, #24]
 800d334:	699b      	ldr	r3, [r3, #24]
 800d336:	1c5a      	adds	r2, r3, #1
 800d338:	69bb      	ldr	r3, [r7, #24]
 800d33a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800d33c:	69bb      	ldr	r3, [r7, #24]
 800d33e:	791b      	ldrb	r3, [r3, #4]
 800d340:	f043 0301 	orr.w	r3, r3, #1
 800d344:	b2da      	uxtb	r2, r3
 800d346:	69bb      	ldr	r3, [r7, #24]
 800d348:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800d34a:	6a3b      	ldr	r3, [r7, #32]
 800d34c:	3301      	adds	r3, #1
 800d34e:	697a      	ldr	r2, [r7, #20]
 800d350:	429a      	cmp	r2, r3
 800d352:	d102      	bne.n	800d35a <remove_chain+0xde>
			ecl = nxt;
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	623b      	str	r3, [r7, #32]
 800d358:	e017      	b.n	800d38a <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800d35a:	69bb      	ldr	r3, [r7, #24]
 800d35c:	781b      	ldrb	r3, [r3, #0]
 800d35e:	2b04      	cmp	r3, #4
 800d360:	d10f      	bne.n	800d382 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800d362:	6a3a      	ldr	r2, [r7, #32]
 800d364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d366:	1ad3      	subs	r3, r2, r3
 800d368:	1c5a      	adds	r2, r3, #1
 800d36a:	2300      	movs	r3, #0
 800d36c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d36e:	69b8      	ldr	r0, [r7, #24]
 800d370:	f7ff feba 	bl	800d0e8 <change_bitmap>
 800d374:	4603      	mov	r3, r0
 800d376:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800d378:	7ffb      	ldrb	r3, [r7, #31]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d001      	beq.n	800d382 <remove_chain+0x106>
 800d37e:	7ffb      	ldrb	r3, [r7, #31]
 800d380:	e02c      	b.n	800d3dc <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800d382:	697b      	ldr	r3, [r7, #20]
 800d384:	623b      	str	r3, [r7, #32]
 800d386:	6a3b      	ldr	r3, [r7, #32]
 800d388:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d38e:	69bb      	ldr	r3, [r7, #24]
 800d390:	69db      	ldr	r3, [r3, #28]
 800d392:	68ba      	ldr	r2, [r7, #8]
 800d394:	429a      	cmp	r2, r3
 800d396:	d3a2      	bcc.n	800d2de <remove_chain+0x62>
 800d398:	e000      	b.n	800d39c <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800d39a:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800d39c:	69bb      	ldr	r3, [r7, #24]
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	2b04      	cmp	r3, #4
 800d3a2:	d11a      	bne.n	800d3da <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d103      	bne.n	800d3b2 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	71da      	strb	r2, [r3, #7]
 800d3b0:	e013      	b.n	800d3da <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	79db      	ldrb	r3, [r3, #7]
 800d3b6:	2b03      	cmp	r3, #3
 800d3b8:	d10f      	bne.n	800d3da <remove_chain+0x15e>
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	689b      	ldr	r3, [r3, #8]
 800d3be:	687a      	ldr	r2, [r7, #4]
 800d3c0:	429a      	cmp	r2, r3
 800d3c2:	d30a      	bcc.n	800d3da <remove_chain+0x15e>
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	689a      	ldr	r2, [r3, #8]
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	699b      	ldr	r3, [r3, #24]
 800d3cc:	4413      	add	r3, r2
 800d3ce:	687a      	ldr	r2, [r7, #4]
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d802      	bhi.n	800d3da <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2202      	movs	r2, #2
 800d3d8:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800d3da:	2300      	movs	r3, #0
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3728      	adds	r7, #40	; 0x28
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}

0800d3e4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b088      	sub	sp, #32
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
 800d3ec:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d10d      	bne.n	800d416 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	695b      	ldr	r3, [r3, #20]
 800d3fe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d400:	69bb      	ldr	r3, [r7, #24]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d004      	beq.n	800d410 <create_chain+0x2c>
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	69db      	ldr	r3, [r3, #28]
 800d40a:	69ba      	ldr	r2, [r7, #24]
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d31b      	bcc.n	800d448 <create_chain+0x64>
 800d410:	2301      	movs	r3, #1
 800d412:	61bb      	str	r3, [r7, #24]
 800d414:	e018      	b.n	800d448 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d416:	6839      	ldr	r1, [r7, #0]
 800d418:	6878      	ldr	r0, [r7, #4]
 800d41a:	f7ff fbdf 	bl	800cbdc <get_fat>
 800d41e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	2b01      	cmp	r3, #1
 800d424:	d801      	bhi.n	800d42a <create_chain+0x46>
 800d426:	2301      	movs	r3, #1
 800d428:	e0d9      	b.n	800d5de <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d430:	d101      	bne.n	800d436 <create_chain+0x52>
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	e0d3      	b.n	800d5de <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	69db      	ldr	r3, [r3, #28]
 800d43a:	68fa      	ldr	r2, [r7, #12]
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d201      	bcs.n	800d444 <create_chain+0x60>
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	e0cc      	b.n	800d5de <create_chain+0x1fa>
		scl = clst;
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	781b      	ldrb	r3, [r3, #0]
 800d44c:	2b04      	cmp	r3, #4
 800d44e:	d164      	bne.n	800d51a <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800d450:	2201      	movs	r2, #1
 800d452:	69b9      	ldr	r1, [r7, #24]
 800d454:	6938      	ldr	r0, [r7, #16]
 800d456:	f7ff fdcb 	bl	800cff0 <find_bitmap>
 800d45a:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800d45c:	69fb      	ldr	r3, [r7, #28]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d003      	beq.n	800d46a <create_chain+0x86>
 800d462:	69fb      	ldr	r3, [r7, #28]
 800d464:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d468:	d101      	bne.n	800d46e <create_chain+0x8a>
 800d46a:	69fb      	ldr	r3, [r7, #28]
 800d46c:	e0b7      	b.n	800d5de <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800d46e:	2301      	movs	r3, #1
 800d470:	2201      	movs	r2, #1
 800d472:	69f9      	ldr	r1, [r7, #28]
 800d474:	6938      	ldr	r0, [r7, #16]
 800d476:	f7ff fe37 	bl	800d0e8 <change_bitmap>
 800d47a:	4603      	mov	r3, r0
 800d47c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800d47e:	7dfb      	ldrb	r3, [r7, #23]
 800d480:	2b02      	cmp	r3, #2
 800d482:	d101      	bne.n	800d488 <create_chain+0xa4>
 800d484:	2301      	movs	r3, #1
 800d486:	e0aa      	b.n	800d5de <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800d488:	7dfb      	ldrb	r3, [r7, #23]
 800d48a:	2b01      	cmp	r3, #1
 800d48c:	d102      	bne.n	800d494 <create_chain+0xb0>
 800d48e:	f04f 33ff 	mov.w	r3, #4294967295
 800d492:	e0a4      	b.n	800d5de <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d103      	bne.n	800d4a2 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2202      	movs	r2, #2
 800d49e:	71da      	strb	r2, [r3, #7]
 800d4a0:	e011      	b.n	800d4c6 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	79db      	ldrb	r3, [r3, #7]
 800d4a6:	2b02      	cmp	r3, #2
 800d4a8:	d10d      	bne.n	800d4c6 <create_chain+0xe2>
 800d4aa:	69bb      	ldr	r3, [r7, #24]
 800d4ac:	3301      	adds	r3, #1
 800d4ae:	69fa      	ldr	r2, [r7, #28]
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d008      	beq.n	800d4c6 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	689b      	ldr	r3, [r3, #8]
 800d4b8:	69ba      	ldr	r2, [r7, #24]
 800d4ba:	1ad2      	subs	r2, r2, r3
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2203      	movs	r2, #3
 800d4c4:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	79db      	ldrb	r3, [r3, #7]
 800d4ca:	2b02      	cmp	r3, #2
 800d4cc:	d064      	beq.n	800d598 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	3301      	adds	r3, #1
 800d4d2:	69fa      	ldr	r2, [r7, #28]
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d10b      	bne.n	800d4f0 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	69db      	ldr	r3, [r3, #28]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d003      	beq.n	800d4e8 <create_chain+0x104>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	69db      	ldr	r3, [r3, #28]
 800d4e4:	3301      	adds	r3, #1
 800d4e6:	e000      	b.n	800d4ea <create_chain+0x106>
 800d4e8:	2302      	movs	r3, #2
 800d4ea:	687a      	ldr	r2, [r7, #4]
 800d4ec:	61d3      	str	r3, [r2, #28]
 800d4ee:	e053      	b.n	800d598 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	69db      	ldr	r3, [r3, #28]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d102      	bne.n	800d4fe <create_chain+0x11a>
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800d4fe:	69fa      	ldr	r2, [r7, #28]
 800d500:	6839      	ldr	r1, [r7, #0]
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f7ff fe89 	bl	800d21a <fill_last_frag>
 800d508:	4603      	mov	r3, r0
 800d50a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800d50c:	7dfb      	ldrb	r3, [r7, #23]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d142      	bne.n	800d598 <create_chain+0x1b4>
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2201      	movs	r2, #1
 800d516:	61da      	str	r2, [r3, #28]
 800d518:	e03e      	b.n	800d598 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d51a:	69bb      	ldr	r3, [r7, #24]
 800d51c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d51e:	69fb      	ldr	r3, [r7, #28]
 800d520:	3301      	adds	r3, #1
 800d522:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	69db      	ldr	r3, [r3, #28]
 800d528:	69fa      	ldr	r2, [r7, #28]
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d307      	bcc.n	800d53e <create_chain+0x15a>
				ncl = 2;
 800d52e:	2302      	movs	r3, #2
 800d530:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d532:	69fa      	ldr	r2, [r7, #28]
 800d534:	69bb      	ldr	r3, [r7, #24]
 800d536:	429a      	cmp	r2, r3
 800d538:	d901      	bls.n	800d53e <create_chain+0x15a>
 800d53a:	2300      	movs	r3, #0
 800d53c:	e04f      	b.n	800d5de <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d53e:	69f9      	ldr	r1, [r7, #28]
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	f7ff fb4b 	bl	800cbdc <get_fat>
 800d546:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d00e      	beq.n	800d56c <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	2b01      	cmp	r3, #1
 800d552:	d003      	beq.n	800d55c <create_chain+0x178>
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d55a:	d101      	bne.n	800d560 <create_chain+0x17c>
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	e03e      	b.n	800d5de <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800d560:	69fa      	ldr	r2, [r7, #28]
 800d562:	69bb      	ldr	r3, [r7, #24]
 800d564:	429a      	cmp	r2, r3
 800d566:	d1da      	bne.n	800d51e <create_chain+0x13a>
 800d568:	2300      	movs	r3, #0
 800d56a:	e038      	b.n	800d5de <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800d56c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d56e:	f04f 32ff 	mov.w	r2, #4294967295
 800d572:	69f9      	ldr	r1, [r7, #28]
 800d574:	6938      	ldr	r0, [r7, #16]
 800d576:	f7ff fc4b 	bl	800ce10 <put_fat>
 800d57a:	4603      	mov	r3, r0
 800d57c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d57e:	7dfb      	ldrb	r3, [r7, #23]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d109      	bne.n	800d598 <create_chain+0x1b4>
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d006      	beq.n	800d598 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d58a:	69fa      	ldr	r2, [r7, #28]
 800d58c:	6839      	ldr	r1, [r7, #0]
 800d58e:	6938      	ldr	r0, [r7, #16]
 800d590:	f7ff fc3e 	bl	800ce10 <put_fat>
 800d594:	4603      	mov	r3, r0
 800d596:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d598:	7dfb      	ldrb	r3, [r7, #23]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d116      	bne.n	800d5cc <create_chain+0x1e8>
		fs->last_clst = ncl;
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	69fa      	ldr	r2, [r7, #28]
 800d5a2:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	699a      	ldr	r2, [r3, #24]
 800d5a8:	693b      	ldr	r3, [r7, #16]
 800d5aa:	69db      	ldr	r3, [r3, #28]
 800d5ac:	3b02      	subs	r3, #2
 800d5ae:	429a      	cmp	r2, r3
 800d5b0:	d804      	bhi.n	800d5bc <create_chain+0x1d8>
 800d5b2:	693b      	ldr	r3, [r7, #16]
 800d5b4:	699b      	ldr	r3, [r3, #24]
 800d5b6:	1e5a      	subs	r2, r3, #1
 800d5b8:	693b      	ldr	r3, [r7, #16]
 800d5ba:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	791b      	ldrb	r3, [r3, #4]
 800d5c0:	f043 0301 	orr.w	r3, r3, #1
 800d5c4:	b2da      	uxtb	r2, r3
 800d5c6:	693b      	ldr	r3, [r7, #16]
 800d5c8:	711a      	strb	r2, [r3, #4]
 800d5ca:	e007      	b.n	800d5dc <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d5cc:	7dfb      	ldrb	r3, [r7, #23]
 800d5ce:	2b01      	cmp	r3, #1
 800d5d0:	d102      	bne.n	800d5d8 <create_chain+0x1f4>
 800d5d2:	f04f 33ff 	mov.w	r3, #4294967295
 800d5d6:	e000      	b.n	800d5da <create_chain+0x1f6>
 800d5d8:	2301      	movs	r3, #1
 800d5da:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d5dc:	69fb      	ldr	r3, [r7, #28]
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3720      	adds	r7, #32
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}

0800d5e6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d5e6:	b5b0      	push	{r4, r5, r7, lr}
 800d5e8:	b088      	sub	sp, #32
 800d5ea:	af00      	add	r7, sp, #0
 800d5ec:	60f8      	str	r0, [r7, #12]
 800d5ee:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5fc:	3304      	adds	r3, #4
 800d5fe:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d600:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d604:	f04f 0000 	mov.w	r0, #0
 800d608:	f04f 0100 	mov.w	r1, #0
 800d60c:	0a50      	lsrs	r0, r2, #9
 800d60e:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800d612:	0a59      	lsrs	r1, r3, #9
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	895b      	ldrh	r3, [r3, #10]
 800d618:	b29b      	uxth	r3, r3
 800d61a:	2200      	movs	r2, #0
 800d61c:	461c      	mov	r4, r3
 800d61e:	4615      	mov	r5, r2
 800d620:	4622      	mov	r2, r4
 800d622:	462b      	mov	r3, r5
 800d624:	f7f2 fe3c 	bl	80002a0 <__aeabi_uldivmod>
 800d628:	4602      	mov	r2, r0
 800d62a:	460b      	mov	r3, r1
 800d62c:	4613      	mov	r3, r2
 800d62e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d630:	69bb      	ldr	r3, [r7, #24]
 800d632:	1d1a      	adds	r2, r3, #4
 800d634:	61ba      	str	r2, [r7, #24]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d101      	bne.n	800d644 <clmt_clust+0x5e>
 800d640:	2300      	movs	r3, #0
 800d642:	e010      	b.n	800d666 <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 800d644:	69fa      	ldr	r2, [r7, #28]
 800d646:	693b      	ldr	r3, [r7, #16]
 800d648:	429a      	cmp	r2, r3
 800d64a:	d307      	bcc.n	800d65c <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 800d64c:	69fa      	ldr	r2, [r7, #28]
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	1ad3      	subs	r3, r2, r3
 800d652:	61fb      	str	r3, [r7, #28]
 800d654:	69bb      	ldr	r3, [r7, #24]
 800d656:	3304      	adds	r3, #4
 800d658:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d65a:	e7e9      	b.n	800d630 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 800d65c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d65e:	69bb      	ldr	r3, [r7, #24]
 800d660:	681a      	ldr	r2, [r3, #0]
 800d662:	69fb      	ldr	r3, [r7, #28]
 800d664:	4413      	add	r3, r2
}
 800d666:	4618      	mov	r0, r3
 800d668:	3720      	adds	r7, #32
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bdb0      	pop	{r4, r5, r7, pc}

0800d66e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d66e:	b580      	push	{r7, lr}
 800d670:	b086      	sub	sp, #24
 800d672:	af00      	add	r7, sp, #0
 800d674:	6078      	str	r0, [r7, #4]
 800d676:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d67e:	693b      	ldr	r3, [r7, #16]
 800d680:	781b      	ldrb	r3, [r3, #0]
 800d682:	2b04      	cmp	r3, #4
 800d684:	d102      	bne.n	800d68c <dir_sdi+0x1e>
 800d686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d68a:	e001      	b.n	800d690 <dir_sdi+0x22>
 800d68c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	429a      	cmp	r2, r3
 800d694:	d904      	bls.n	800d6a0 <dir_sdi+0x32>
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	f003 031f 	and.w	r3, r3, #31
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d001      	beq.n	800d6a4 <dir_sdi+0x36>
		return FR_INT_ERR;
 800d6a0:	2302      	movs	r3, #2
 800d6a2:	e066      	b.n	800d772 <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	683a      	ldr	r2, [r7, #0]
 800d6a8:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	689b      	ldr	r3, [r3, #8]
 800d6ae:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d109      	bne.n	800d6ca <dir_sdi+0x5c>
 800d6b6:	693b      	ldr	r3, [r7, #16]
 800d6b8:	781b      	ldrb	r3, [r3, #0]
 800d6ba:	2b02      	cmp	r3, #2
 800d6bc:	d905      	bls.n	800d6ca <dir_sdi+0x5c>
		clst = fs->dirbase;
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6c2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d10c      	bne.n	800d6ea <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	095b      	lsrs	r3, r3, #5
 800d6d4:	693a      	ldr	r2, [r7, #16]
 800d6d6:	8912      	ldrh	r2, [r2, #8]
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d301      	bcc.n	800d6e0 <dir_sdi+0x72>
 800d6dc:	2302      	movs	r3, #2
 800d6de:	e048      	b.n	800d772 <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	639a      	str	r2, [r3, #56]	; 0x38
 800d6e8:	e029      	b.n	800d73e <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d6ea:	693b      	ldr	r3, [r7, #16]
 800d6ec:	895b      	ldrh	r3, [r3, #10]
 800d6ee:	025b      	lsls	r3, r3, #9
 800d6f0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d6f2:	e019      	b.n	800d728 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	6979      	ldr	r1, [r7, #20]
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7ff fa6f 	bl	800cbdc <get_fat>
 800d6fe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d700:	697b      	ldr	r3, [r7, #20]
 800d702:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d706:	d101      	bne.n	800d70c <dir_sdi+0x9e>
 800d708:	2301      	movs	r3, #1
 800d70a:	e032      	b.n	800d772 <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d70c:	697b      	ldr	r3, [r7, #20]
 800d70e:	2b01      	cmp	r3, #1
 800d710:	d904      	bls.n	800d71c <dir_sdi+0xae>
 800d712:	693b      	ldr	r3, [r7, #16]
 800d714:	69db      	ldr	r3, [r3, #28]
 800d716:	697a      	ldr	r2, [r7, #20]
 800d718:	429a      	cmp	r2, r3
 800d71a:	d301      	bcc.n	800d720 <dir_sdi+0xb2>
 800d71c:	2302      	movs	r3, #2
 800d71e:	e028      	b.n	800d772 <dir_sdi+0x104>
			ofs -= csz;
 800d720:	683a      	ldr	r2, [r7, #0]
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	1ad3      	subs	r3, r2, r3
 800d726:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d728:	683a      	ldr	r2, [r7, #0]
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d2e1      	bcs.n	800d6f4 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 800d730:	6979      	ldr	r1, [r7, #20]
 800d732:	6938      	ldr	r0, [r7, #16]
 800d734:	f7ff fa32 	bl	800cb9c <clust2sect>
 800d738:	4602      	mov	r2, r0
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	697a      	ldr	r2, [r7, #20]
 800d742:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d101      	bne.n	800d750 <dir_sdi+0xe2>
 800d74c:	2302      	movs	r3, #2
 800d74e:	e010      	b.n	800d772 <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	0a5b      	lsrs	r3, r3, #9
 800d758:	441a      	add	r2, r3
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d76a:	441a      	add	r2, r3
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800d770:	2300      	movs	r3, #0
}
 800d772:	4618      	mov	r0, r3
 800d774:	3718      	adds	r7, #24
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}

0800d77a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d77a:	b580      	push	{r7, lr}
 800d77c:	b086      	sub	sp, #24
 800d77e:	af00      	add	r7, sp, #0
 800d780:	6078      	str	r0, [r7, #4]
 800d782:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d78e:	3320      	adds	r3, #32
 800d790:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d796:	2b00      	cmp	r3, #0
 800d798:	d00b      	beq.n	800d7b2 <dir_next+0x38>
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	781b      	ldrb	r3, [r3, #0]
 800d79e:	2b04      	cmp	r3, #4
 800d7a0:	d102      	bne.n	800d7a8 <dir_next+0x2e>
 800d7a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7a6:	e001      	b.n	800d7ac <dir_next+0x32>
 800d7a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	d801      	bhi.n	800d7b6 <dir_next+0x3c>
 800d7b2:	2304      	movs	r3, #4
 800d7b4:	e0b2      	b.n	800d91c <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	f040 80a0 	bne.w	800d902 <dir_next+0x188>
		dp->sect++;				/* Next sector */
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7c6:	1c5a      	adds	r2, r3, #1
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d10b      	bne.n	800d7ec <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	095b      	lsrs	r3, r3, #5
 800d7d8:	68fa      	ldr	r2, [r7, #12]
 800d7da:	8912      	ldrh	r2, [r2, #8]
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	f0c0 8090 	bcc.w	800d902 <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	639a      	str	r2, [r3, #56]	; 0x38
 800d7e8:	2304      	movs	r3, #4
 800d7ea:	e097      	b.n	800d91c <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d7ec:	68bb      	ldr	r3, [r7, #8]
 800d7ee:	0a5b      	lsrs	r3, r3, #9
 800d7f0:	68fa      	ldr	r2, [r7, #12]
 800d7f2:	8952      	ldrh	r2, [r2, #10]
 800d7f4:	3a01      	subs	r2, #1
 800d7f6:	4013      	ands	r3, r2
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	f040 8082 	bne.w	800d902 <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d7fe:	687a      	ldr	r2, [r7, #4]
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d804:	4619      	mov	r1, r3
 800d806:	4610      	mov	r0, r2
 800d808:	f7ff f9e8 	bl	800cbdc <get_fat>
 800d80c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	2b01      	cmp	r3, #1
 800d812:	d801      	bhi.n	800d818 <dir_next+0x9e>
 800d814:	2302      	movs	r3, #2
 800d816:	e081      	b.n	800d91c <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d81e:	d101      	bne.n	800d824 <dir_next+0xaa>
 800d820:	2301      	movs	r3, #1
 800d822:	e07b      	b.n	800d91c <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	69db      	ldr	r3, [r3, #28]
 800d828:	697a      	ldr	r2, [r7, #20]
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d35f      	bcc.n	800d8ee <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d104      	bne.n	800d83e <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2200      	movs	r2, #0
 800d838:	639a      	str	r2, [r3, #56]	; 0x38
 800d83a:	2304      	movs	r3, #4
 800d83c:	e06e      	b.n	800d91c <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d83e:	687a      	ldr	r2, [r7, #4]
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d844:	4619      	mov	r1, r3
 800d846:	4610      	mov	r0, r2
 800d848:	f7ff fdcc 	bl	800d3e4 <create_chain>
 800d84c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d101      	bne.n	800d858 <dir_next+0xde>
 800d854:	2307      	movs	r3, #7
 800d856:	e061      	b.n	800d91c <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	2b01      	cmp	r3, #1
 800d85c:	d101      	bne.n	800d862 <dir_next+0xe8>
 800d85e:	2302      	movs	r3, #2
 800d860:	e05c      	b.n	800d91c <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d862:	697b      	ldr	r3, [r7, #20]
 800d864:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d868:	d101      	bne.n	800d86e <dir_next+0xf4>
 800d86a:	2301      	movs	r3, #1
 800d86c:	e056      	b.n	800d91c <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	79db      	ldrb	r3, [r3, #7]
 800d872:	f043 0304 	orr.w	r3, r3, #4
 800d876:	b2da      	uxtb	r2, r3
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d87c:	68f8      	ldr	r0, [r7, #12]
 800d87e:	f7ff f8ad 	bl	800c9dc <sync_window>
 800d882:	4603      	mov	r3, r0
 800d884:	2b00      	cmp	r3, #0
 800d886:	d001      	beq.n	800d88c <dir_next+0x112>
 800d888:	2301      	movs	r3, #1
 800d88a:	e047      	b.n	800d91c <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	3338      	adds	r3, #56	; 0x38
 800d890:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d894:	2100      	movs	r1, #0
 800d896:	4618      	mov	r0, r3
 800d898:	f7fe fed6 	bl	800c648 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d89c:	2300      	movs	r3, #0
 800d89e:	613b      	str	r3, [r7, #16]
 800d8a0:	6979      	ldr	r1, [r7, #20]
 800d8a2:	68f8      	ldr	r0, [r7, #12]
 800d8a4:	f7ff f97a 	bl	800cb9c <clust2sect>
 800d8a8:	4602      	mov	r2, r0
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	635a      	str	r2, [r3, #52]	; 0x34
 800d8ae:	e012      	b.n	800d8d6 <dir_next+0x15c>
						fs->wflag = 1;
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d8b6:	68f8      	ldr	r0, [r7, #12]
 800d8b8:	f7ff f890 	bl	800c9dc <sync_window>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d001      	beq.n	800d8c6 <dir_next+0x14c>
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	e02a      	b.n	800d91c <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d8c6:	693b      	ldr	r3, [r7, #16]
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	613b      	str	r3, [r7, #16]
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8d0:	1c5a      	adds	r2, r3, #1
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	635a      	str	r2, [r3, #52]	; 0x34
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	895b      	ldrh	r3, [r3, #10]
 800d8da:	461a      	mov	r2, r3
 800d8dc:	693b      	ldr	r3, [r7, #16]
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d3e6      	bcc.n	800d8b0 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d8e6:	693b      	ldr	r3, [r7, #16]
 800d8e8:	1ad2      	subs	r2, r2, r3
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	697a      	ldr	r2, [r7, #20]
 800d8f2:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800d8f4:	6979      	ldr	r1, [r7, #20]
 800d8f6:	68f8      	ldr	r0, [r7, #12]
 800d8f8:	f7ff f950 	bl	800cb9c <clust2sect>
 800d8fc:	4602      	mov	r2, r0
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	68ba      	ldr	r2, [r7, #8]
 800d906:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d914:	441a      	add	r2, r3
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800d91a:	2300      	movs	r3, #0
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3718      	adds	r7, #24
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}

0800d924 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b086      	sub	sp, #24
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d934:	2100      	movs	r1, #0
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f7ff fe99 	bl	800d66e <dir_sdi>
 800d93c:	4603      	mov	r3, r0
 800d93e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d940:	7dfb      	ldrb	r3, [r7, #23]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d140      	bne.n	800d9c8 <dir_alloc+0xa4>
		n = 0;
 800d946:	2300      	movs	r3, #0
 800d948:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d94e:	4619      	mov	r1, r3
 800d950:	68f8      	ldr	r0, [r7, #12]
 800d952:	f7ff f887 	bl	800ca64 <move_window>
 800d956:	4603      	mov	r3, r0
 800d958:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d95a:	7dfb      	ldrb	r3, [r7, #23]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d132      	bne.n	800d9c6 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	781b      	ldrb	r3, [r3, #0]
 800d964:	2b04      	cmp	r3, #4
 800d966:	d108      	bne.n	800d97a <dir_alloc+0x56>
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d96c:	781b      	ldrb	r3, [r3, #0]
 800d96e:	b25b      	sxtb	r3, r3
 800d970:	43db      	mvns	r3, r3
 800d972:	b2db      	uxtb	r3, r3
 800d974:	09db      	lsrs	r3, r3, #7
 800d976:	b2db      	uxtb	r3, r3
 800d978:	e00f      	b.n	800d99a <dir_alloc+0x76>
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d97e:	781b      	ldrb	r3, [r3, #0]
 800d980:	2be5      	cmp	r3, #229	; 0xe5
 800d982:	d004      	beq.n	800d98e <dir_alloc+0x6a>
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d988:	781b      	ldrb	r3, [r3, #0]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d101      	bne.n	800d992 <dir_alloc+0x6e>
 800d98e:	2301      	movs	r3, #1
 800d990:	e000      	b.n	800d994 <dir_alloc+0x70>
 800d992:	2300      	movs	r3, #0
 800d994:	f003 0301 	and.w	r3, r3, #1
 800d998:	b2db      	uxtb	r3, r3
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d007      	beq.n	800d9ae <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	3301      	adds	r3, #1
 800d9a2:	613b      	str	r3, [r7, #16]
 800d9a4:	693a      	ldr	r2, [r7, #16]
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	429a      	cmp	r2, r3
 800d9aa:	d102      	bne.n	800d9b2 <dir_alloc+0x8e>
 800d9ac:	e00c      	b.n	800d9c8 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d9b2:	2101      	movs	r1, #1
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f7ff fee0 	bl	800d77a <dir_next>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d9be:	7dfb      	ldrb	r3, [r7, #23]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d0c2      	beq.n	800d94a <dir_alloc+0x26>
 800d9c4:	e000      	b.n	800d9c8 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800d9c6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d9c8:	7dfb      	ldrb	r3, [r7, #23]
 800d9ca:	2b04      	cmp	r3, #4
 800d9cc:	d101      	bne.n	800d9d2 <dir_alloc+0xae>
 800d9ce:	2307      	movs	r3, #7
 800d9d0:	75fb      	strb	r3, [r7, #23]
	return res;
 800d9d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3718      	adds	r7, #24
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}

0800d9dc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b084      	sub	sp, #16
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	331a      	adds	r3, #26
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f7fe fc26 	bl	800c23c <ld_word>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	781b      	ldrb	r3, [r3, #0]
 800d9f8:	2b03      	cmp	r3, #3
 800d9fa:	d109      	bne.n	800da10 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	3314      	adds	r3, #20
 800da00:	4618      	mov	r0, r3
 800da02:	f7fe fc1b 	bl	800c23c <ld_word>
 800da06:	4603      	mov	r3, r0
 800da08:	041b      	lsls	r3, r3, #16
 800da0a:	68fa      	ldr	r2, [r7, #12]
 800da0c:	4313      	orrs	r3, r2
 800da0e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800da10:	68fb      	ldr	r3, [r7, #12]
}
 800da12:	4618      	mov	r0, r3
 800da14:	3710      	adds	r7, #16
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}

0800da1a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800da1a:	b580      	push	{r7, lr}
 800da1c:	b084      	sub	sp, #16
 800da1e:	af00      	add	r7, sp, #0
 800da20:	60f8      	str	r0, [r7, #12]
 800da22:	60b9      	str	r1, [r7, #8]
 800da24:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	331a      	adds	r3, #26
 800da2a:	687a      	ldr	r2, [r7, #4]
 800da2c:	b292      	uxth	r2, r2
 800da2e:	4611      	mov	r1, r2
 800da30:	4618      	mov	r0, r3
 800da32:	f7fe fd19 	bl	800c468 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	2b03      	cmp	r3, #3
 800da3c:	d109      	bne.n	800da52 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800da3e:	68bb      	ldr	r3, [r7, #8]
 800da40:	f103 0214 	add.w	r2, r3, #20
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	0c1b      	lsrs	r3, r3, #16
 800da48:	b29b      	uxth	r3, r3
 800da4a:	4619      	mov	r1, r3
 800da4c:	4610      	mov	r0, r2
 800da4e:	f7fe fd0b 	bl	800c468 <st_word>
	}
}
 800da52:	bf00      	nop
 800da54:	3710      	adds	r7, #16
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}
	...

0800da5c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800da5c:	b590      	push	{r4, r7, lr}
 800da5e:	b087      	sub	sp, #28
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	331a      	adds	r3, #26
 800da6a:	4618      	mov	r0, r3
 800da6c:	f7fe fbe6 	bl	800c23c <ld_word>
 800da70:	4603      	mov	r3, r0
 800da72:	2b00      	cmp	r3, #0
 800da74:	d001      	beq.n	800da7a <cmp_lfn+0x1e>
 800da76:	2300      	movs	r3, #0
 800da78:	e059      	b.n	800db2e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da82:	1e5a      	subs	r2, r3, #1
 800da84:	4613      	mov	r3, r2
 800da86:	005b      	lsls	r3, r3, #1
 800da88:	4413      	add	r3, r2
 800da8a:	009b      	lsls	r3, r3, #2
 800da8c:	4413      	add	r3, r2
 800da8e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800da90:	2301      	movs	r3, #1
 800da92:	81fb      	strh	r3, [r7, #14]
 800da94:	2300      	movs	r3, #0
 800da96:	613b      	str	r3, [r7, #16]
 800da98:	e033      	b.n	800db02 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800da9a:	4a27      	ldr	r2, [pc, #156]	; (800db38 <cmp_lfn+0xdc>)
 800da9c:	693b      	ldr	r3, [r7, #16]
 800da9e:	4413      	add	r3, r2
 800daa0:	781b      	ldrb	r3, [r3, #0]
 800daa2:	461a      	mov	r2, r3
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	4413      	add	r3, r2
 800daa8:	4618      	mov	r0, r3
 800daaa:	f7fe fbc7 	bl	800c23c <ld_word>
 800daae:	4603      	mov	r3, r0
 800dab0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800dab2:	89fb      	ldrh	r3, [r7, #14]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d01a      	beq.n	800daee <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	2bfe      	cmp	r3, #254	; 0xfe
 800dabc:	d812      	bhi.n	800dae4 <cmp_lfn+0x88>
 800dabe:	89bb      	ldrh	r3, [r7, #12]
 800dac0:	4618      	mov	r0, r3
 800dac2:	f003 f96f 	bl	8010da4 <ff_wtoupper>
 800dac6:	4603      	mov	r3, r0
 800dac8:	461c      	mov	r4, r3
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	1c5a      	adds	r2, r3, #1
 800dace:	617a      	str	r2, [r7, #20]
 800dad0:	005b      	lsls	r3, r3, #1
 800dad2:	687a      	ldr	r2, [r7, #4]
 800dad4:	4413      	add	r3, r2
 800dad6:	881b      	ldrh	r3, [r3, #0]
 800dad8:	4618      	mov	r0, r3
 800dada:	f003 f963 	bl	8010da4 <ff_wtoupper>
 800dade:	4603      	mov	r3, r0
 800dae0:	429c      	cmp	r4, r3
 800dae2:	d001      	beq.n	800dae8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800dae4:	2300      	movs	r3, #0
 800dae6:	e022      	b.n	800db2e <cmp_lfn+0xd2>
			}
			wc = uc;
 800dae8:	89bb      	ldrh	r3, [r7, #12]
 800daea:	81fb      	strh	r3, [r7, #14]
 800daec:	e006      	b.n	800dafc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800daee:	89bb      	ldrh	r3, [r7, #12]
 800daf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800daf4:	4293      	cmp	r3, r2
 800daf6:	d001      	beq.n	800dafc <cmp_lfn+0xa0>
 800daf8:	2300      	movs	r3, #0
 800dafa:	e018      	b.n	800db2e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dafc:	693b      	ldr	r3, [r7, #16]
 800dafe:	3301      	adds	r3, #1
 800db00:	613b      	str	r3, [r7, #16]
 800db02:	693b      	ldr	r3, [r7, #16]
 800db04:	2b0c      	cmp	r3, #12
 800db06:	d9c8      	bls.n	800da9a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	781b      	ldrb	r3, [r3, #0]
 800db0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db10:	2b00      	cmp	r3, #0
 800db12:	d00b      	beq.n	800db2c <cmp_lfn+0xd0>
 800db14:	89fb      	ldrh	r3, [r7, #14]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d008      	beq.n	800db2c <cmp_lfn+0xd0>
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	005b      	lsls	r3, r3, #1
 800db1e:	687a      	ldr	r2, [r7, #4]
 800db20:	4413      	add	r3, r2
 800db22:	881b      	ldrh	r3, [r3, #0]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d001      	beq.n	800db2c <cmp_lfn+0xd0>
 800db28:	2300      	movs	r3, #0
 800db2a:	e000      	b.n	800db2e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800db2c:	2301      	movs	r3, #1
}
 800db2e:	4618      	mov	r0, r3
 800db30:	371c      	adds	r7, #28
 800db32:	46bd      	mov	sp, r7
 800db34:	bd90      	pop	{r4, r7, pc}
 800db36:	bf00      	nop
 800db38:	080168e0 	.word	0x080168e0

0800db3c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b086      	sub	sp, #24
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
 800db44:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	331a      	adds	r3, #26
 800db4a:	4618      	mov	r0, r3
 800db4c:	f7fe fb76 	bl	800c23c <ld_word>
 800db50:	4603      	mov	r3, r0
 800db52:	2b00      	cmp	r3, #0
 800db54:	d001      	beq.n	800db5a <pick_lfn+0x1e>
 800db56:	2300      	movs	r3, #0
 800db58:	e04d      	b.n	800dbf6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	781b      	ldrb	r3, [r3, #0]
 800db5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db62:	1e5a      	subs	r2, r3, #1
 800db64:	4613      	mov	r3, r2
 800db66:	005b      	lsls	r3, r3, #1
 800db68:	4413      	add	r3, r2
 800db6a:	009b      	lsls	r3, r3, #2
 800db6c:	4413      	add	r3, r2
 800db6e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800db70:	2301      	movs	r3, #1
 800db72:	81fb      	strh	r3, [r7, #14]
 800db74:	2300      	movs	r3, #0
 800db76:	613b      	str	r3, [r7, #16]
 800db78:	e028      	b.n	800dbcc <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800db7a:	4a21      	ldr	r2, [pc, #132]	; (800dc00 <pick_lfn+0xc4>)
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	4413      	add	r3, r2
 800db80:	781b      	ldrb	r3, [r3, #0]
 800db82:	461a      	mov	r2, r3
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	4413      	add	r3, r2
 800db88:	4618      	mov	r0, r3
 800db8a:	f7fe fb57 	bl	800c23c <ld_word>
 800db8e:	4603      	mov	r3, r0
 800db90:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800db92:	89fb      	ldrh	r3, [r7, #14]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d00f      	beq.n	800dbb8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	2bfe      	cmp	r3, #254	; 0xfe
 800db9c:	d901      	bls.n	800dba2 <pick_lfn+0x66>
 800db9e:	2300      	movs	r3, #0
 800dba0:	e029      	b.n	800dbf6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800dba2:	89bb      	ldrh	r3, [r7, #12]
 800dba4:	81fb      	strh	r3, [r7, #14]
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	1c5a      	adds	r2, r3, #1
 800dbaa:	617a      	str	r2, [r7, #20]
 800dbac:	005b      	lsls	r3, r3, #1
 800dbae:	687a      	ldr	r2, [r7, #4]
 800dbb0:	4413      	add	r3, r2
 800dbb2:	89fa      	ldrh	r2, [r7, #14]
 800dbb4:	801a      	strh	r2, [r3, #0]
 800dbb6:	e006      	b.n	800dbc6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800dbb8:	89bb      	ldrh	r3, [r7, #12]
 800dbba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dbbe:	4293      	cmp	r3, r2
 800dbc0:	d001      	beq.n	800dbc6 <pick_lfn+0x8a>
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	e017      	b.n	800dbf6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dbc6:	693b      	ldr	r3, [r7, #16]
 800dbc8:	3301      	adds	r3, #1
 800dbca:	613b      	str	r3, [r7, #16]
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	2b0c      	cmp	r3, #12
 800dbd0:	d9d3      	bls.n	800db7a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	781b      	ldrb	r3, [r3, #0]
 800dbd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d00a      	beq.n	800dbf4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	2bfe      	cmp	r3, #254	; 0xfe
 800dbe2:	d901      	bls.n	800dbe8 <pick_lfn+0xac>
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	e006      	b.n	800dbf6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800dbe8:	697b      	ldr	r3, [r7, #20]
 800dbea:	005b      	lsls	r3, r3, #1
 800dbec:	687a      	ldr	r2, [r7, #4]
 800dbee:	4413      	add	r3, r2
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800dbf4:	2301      	movs	r3, #1
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3718      	adds	r7, #24
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}
 800dbfe:	bf00      	nop
 800dc00:	080168e0 	.word	0x080168e0

0800dc04 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b088      	sub	sp, #32
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	60f8      	str	r0, [r7, #12]
 800dc0c:	60b9      	str	r1, [r7, #8]
 800dc0e:	4611      	mov	r1, r2
 800dc10:	461a      	mov	r2, r3
 800dc12:	460b      	mov	r3, r1
 800dc14:	71fb      	strb	r3, [r7, #7]
 800dc16:	4613      	mov	r3, r2
 800dc18:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	330d      	adds	r3, #13
 800dc1e:	79ba      	ldrb	r2, [r7, #6]
 800dc20:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	330b      	adds	r3, #11
 800dc26:	220f      	movs	r2, #15
 800dc28:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	330c      	adds	r3, #12
 800dc2e:	2200      	movs	r2, #0
 800dc30:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	331a      	adds	r3, #26
 800dc36:	2100      	movs	r1, #0
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f7fe fc15 	bl	800c468 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800dc3e:	79fb      	ldrb	r3, [r7, #7]
 800dc40:	1e5a      	subs	r2, r3, #1
 800dc42:	4613      	mov	r3, r2
 800dc44:	005b      	lsls	r3, r3, #1
 800dc46:	4413      	add	r3, r2
 800dc48:	009b      	lsls	r3, r3, #2
 800dc4a:	4413      	add	r3, r2
 800dc4c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	82fb      	strh	r3, [r7, #22]
 800dc52:	2300      	movs	r3, #0
 800dc54:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800dc56:	8afb      	ldrh	r3, [r7, #22]
 800dc58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc5c:	4293      	cmp	r3, r2
 800dc5e:	d007      	beq.n	800dc70 <put_lfn+0x6c>
 800dc60:	69fb      	ldr	r3, [r7, #28]
 800dc62:	1c5a      	adds	r2, r3, #1
 800dc64:	61fa      	str	r2, [r7, #28]
 800dc66:	005b      	lsls	r3, r3, #1
 800dc68:	68fa      	ldr	r2, [r7, #12]
 800dc6a:	4413      	add	r3, r2
 800dc6c:	881b      	ldrh	r3, [r3, #0]
 800dc6e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800dc70:	4a17      	ldr	r2, [pc, #92]	; (800dcd0 <put_lfn+0xcc>)
 800dc72:	69bb      	ldr	r3, [r7, #24]
 800dc74:	4413      	add	r3, r2
 800dc76:	781b      	ldrb	r3, [r3, #0]
 800dc78:	461a      	mov	r2, r3
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	4413      	add	r3, r2
 800dc7e:	8afa      	ldrh	r2, [r7, #22]
 800dc80:	4611      	mov	r1, r2
 800dc82:	4618      	mov	r0, r3
 800dc84:	f7fe fbf0 	bl	800c468 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800dc88:	8afb      	ldrh	r3, [r7, #22]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d102      	bne.n	800dc94 <put_lfn+0x90>
 800dc8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dc92:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800dc94:	69bb      	ldr	r3, [r7, #24]
 800dc96:	3301      	adds	r3, #1
 800dc98:	61bb      	str	r3, [r7, #24]
 800dc9a:	69bb      	ldr	r3, [r7, #24]
 800dc9c:	2b0c      	cmp	r3, #12
 800dc9e:	d9da      	bls.n	800dc56 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800dca0:	8afb      	ldrh	r3, [r7, #22]
 800dca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dca6:	4293      	cmp	r3, r2
 800dca8:	d006      	beq.n	800dcb8 <put_lfn+0xb4>
 800dcaa:	69fb      	ldr	r3, [r7, #28]
 800dcac:	005b      	lsls	r3, r3, #1
 800dcae:	68fa      	ldr	r2, [r7, #12]
 800dcb0:	4413      	add	r3, r2
 800dcb2:	881b      	ldrh	r3, [r3, #0]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d103      	bne.n	800dcc0 <put_lfn+0xbc>
 800dcb8:	79fb      	ldrb	r3, [r7, #7]
 800dcba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcbe:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	79fa      	ldrb	r2, [r7, #7]
 800dcc4:	701a      	strb	r2, [r3, #0]
}
 800dcc6:	bf00      	nop
 800dcc8:	3720      	adds	r7, #32
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}
 800dcce:	bf00      	nop
 800dcd0:	080168e0 	.word	0x080168e0

0800dcd4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b08c      	sub	sp, #48	; 0x30
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	60f8      	str	r0, [r7, #12]
 800dcdc:	60b9      	str	r1, [r7, #8]
 800dcde:	607a      	str	r2, [r7, #4]
 800dce0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800dce2:	220b      	movs	r2, #11
 800dce4:	68b9      	ldr	r1, [r7, #8]
 800dce6:	68f8      	ldr	r0, [r7, #12]
 800dce8:	f7fe fc8d 	bl	800c606 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	2b05      	cmp	r3, #5
 800dcf0:	d92b      	bls.n	800dd4a <gen_numname+0x76>
		sr = seq;
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800dcf6:	e022      	b.n	800dd3e <gen_numname+0x6a>
			wc = *lfn++;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	1c9a      	adds	r2, r3, #2
 800dcfc:	607a      	str	r2, [r7, #4]
 800dcfe:	881b      	ldrh	r3, [r3, #0]
 800dd00:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800dd02:	2300      	movs	r3, #0
 800dd04:	62bb      	str	r3, [r7, #40]	; 0x28
 800dd06:	e017      	b.n	800dd38 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800dd08:	69fb      	ldr	r3, [r7, #28]
 800dd0a:	005a      	lsls	r2, r3, #1
 800dd0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dd0e:	f003 0301 	and.w	r3, r3, #1
 800dd12:	4413      	add	r3, r2
 800dd14:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800dd16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dd18:	085b      	lsrs	r3, r3, #1
 800dd1a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800dd1c:	69fb      	ldr	r3, [r7, #28]
 800dd1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d005      	beq.n	800dd32 <gen_numname+0x5e>
 800dd26:	69fb      	ldr	r3, [r7, #28]
 800dd28:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800dd2c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800dd30:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800dd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd34:	3301      	adds	r3, #1
 800dd36:	62bb      	str	r3, [r7, #40]	; 0x28
 800dd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd3a:	2b0f      	cmp	r3, #15
 800dd3c:	d9e4      	bls.n	800dd08 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	881b      	ldrh	r3, [r3, #0]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d1d8      	bne.n	800dcf8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800dd46:	69fb      	ldr	r3, [r7, #28]
 800dd48:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800dd4a:	2307      	movs	r3, #7
 800dd4c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	b2db      	uxtb	r3, r3
 800dd52:	f003 030f 	and.w	r3, r3, #15
 800dd56:	b2db      	uxtb	r3, r3
 800dd58:	3330      	adds	r3, #48	; 0x30
 800dd5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800dd5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd62:	2b39      	cmp	r3, #57	; 0x39
 800dd64:	d904      	bls.n	800dd70 <gen_numname+0x9c>
 800dd66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd6a:	3307      	adds	r3, #7
 800dd6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800dd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd72:	1e5a      	subs	r2, r3, #1
 800dd74:	62ba      	str	r2, [r7, #40]	; 0x28
 800dd76:	3330      	adds	r3, #48	; 0x30
 800dd78:	443b      	add	r3, r7
 800dd7a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800dd7e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	091b      	lsrs	r3, r3, #4
 800dd86:	603b      	str	r3, [r7, #0]
	} while (seq);
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d1df      	bne.n	800dd4e <gen_numname+0x7a>
	ns[i] = '~';
 800dd8e:	f107 0214 	add.w	r2, r7, #20
 800dd92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd94:	4413      	add	r3, r2
 800dd96:	227e      	movs	r2, #126	; 0x7e
 800dd98:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	627b      	str	r3, [r7, #36]	; 0x24
 800dd9e:	e002      	b.n	800dda6 <gen_numname+0xd2>
 800dda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda2:	3301      	adds	r3, #1
 800dda4:	627b      	str	r3, [r7, #36]	; 0x24
 800dda6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	d205      	bcs.n	800ddba <gen_numname+0xe6>
 800ddae:	68fa      	ldr	r2, [r7, #12]
 800ddb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddb2:	4413      	add	r3, r2
 800ddb4:	781b      	ldrb	r3, [r3, #0]
 800ddb6:	2b20      	cmp	r3, #32
 800ddb8:	d1f2      	bne.n	800dda0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ddba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddbc:	2b07      	cmp	r3, #7
 800ddbe:	d807      	bhi.n	800ddd0 <gen_numname+0xfc>
 800ddc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc2:	1c5a      	adds	r2, r3, #1
 800ddc4:	62ba      	str	r2, [r7, #40]	; 0x28
 800ddc6:	3330      	adds	r3, #48	; 0x30
 800ddc8:	443b      	add	r3, r7
 800ddca:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ddce:	e000      	b.n	800ddd2 <gen_numname+0xfe>
 800ddd0:	2120      	movs	r1, #32
 800ddd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd4:	1c5a      	adds	r2, r3, #1
 800ddd6:	627a      	str	r2, [r7, #36]	; 0x24
 800ddd8:	68fa      	ldr	r2, [r7, #12]
 800ddda:	4413      	add	r3, r2
 800dddc:	460a      	mov	r2, r1
 800ddde:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800dde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde2:	2b07      	cmp	r3, #7
 800dde4:	d9e9      	bls.n	800ddba <gen_numname+0xe6>
}
 800dde6:	bf00      	nop
 800dde8:	bf00      	nop
 800ddea:	3730      	adds	r7, #48	; 0x30
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}

0800ddf0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ddf0:	b480      	push	{r7}
 800ddf2:	b085      	sub	sp, #20
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ddfc:	230b      	movs	r3, #11
 800ddfe:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800de00:	7bfb      	ldrb	r3, [r7, #15]
 800de02:	b2da      	uxtb	r2, r3
 800de04:	0852      	lsrs	r2, r2, #1
 800de06:	01db      	lsls	r3, r3, #7
 800de08:	4313      	orrs	r3, r2
 800de0a:	b2da      	uxtb	r2, r3
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	1c59      	adds	r1, r3, #1
 800de10:	6079      	str	r1, [r7, #4]
 800de12:	781b      	ldrb	r3, [r3, #0]
 800de14:	4413      	add	r3, r2
 800de16:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	3b01      	subs	r3, #1
 800de1c:	60bb      	str	r3, [r7, #8]
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d1ed      	bne.n	800de00 <sum_sfn+0x10>
	return sum;
 800de24:	7bfb      	ldrb	r3, [r7, #15]
}
 800de26:	4618      	mov	r0, r3
 800de28:	3714      	adds	r7, #20
 800de2a:	46bd      	mov	sp, r7
 800de2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de30:	4770      	bx	lr

0800de32 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800de32:	b480      	push	{r7}
 800de34:	b087      	sub	sp, #28
 800de36:	af00      	add	r7, sp, #0
 800de38:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	3301      	adds	r3, #1
 800de3e:	781b      	ldrb	r3, [r3, #0]
 800de40:	3301      	adds	r3, #1
 800de42:	015b      	lsls	r3, r3, #5
 800de44:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800de46:	2300      	movs	r3, #0
 800de48:	827b      	strh	r3, [r7, #18]
 800de4a:	2300      	movs	r3, #0
 800de4c:	617b      	str	r3, [r7, #20]
 800de4e:	e018      	b.n	800de82 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	2b02      	cmp	r3, #2
 800de54:	d103      	bne.n	800de5e <xdir_sum+0x2c>
			i++;
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	3301      	adds	r3, #1
 800de5a:	617b      	str	r3, [r7, #20]
 800de5c:	e00e      	b.n	800de7c <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800de5e:	8a7b      	ldrh	r3, [r7, #18]
 800de60:	03db      	lsls	r3, r3, #15
 800de62:	b29a      	uxth	r2, r3
 800de64:	8a7b      	ldrh	r3, [r7, #18]
 800de66:	085b      	lsrs	r3, r3, #1
 800de68:	b29b      	uxth	r3, r3
 800de6a:	4413      	add	r3, r2
 800de6c:	b29a      	uxth	r2, r3
 800de6e:	6879      	ldr	r1, [r7, #4]
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	440b      	add	r3, r1
 800de74:	781b      	ldrb	r3, [r3, #0]
 800de76:	b29b      	uxth	r3, r3
 800de78:	4413      	add	r3, r2
 800de7a:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800de7c:	697b      	ldr	r3, [r7, #20]
 800de7e:	3301      	adds	r3, #1
 800de80:	617b      	str	r3, [r7, #20]
 800de82:	697a      	ldr	r2, [r7, #20]
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	429a      	cmp	r2, r3
 800de88:	d3e2      	bcc.n	800de50 <xdir_sum+0x1e>
		}
	}
	return sum;
 800de8a:	8a7b      	ldrh	r3, [r7, #18]
}
 800de8c:	4618      	mov	r0, r3
 800de8e:	371c      	adds	r7, #28
 800de90:	46bd      	mov	sp, r7
 800de92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de96:	4770      	bx	lr

0800de98 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b084      	sub	sp, #16
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800dea0:	2300      	movs	r3, #0
 800dea2:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800dea4:	e01f      	b.n	800dee6 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800dea6:	89bb      	ldrh	r3, [r7, #12]
 800dea8:	4618      	mov	r0, r3
 800deaa:	f002 ff7b 	bl	8010da4 <ff_wtoupper>
 800deae:	4603      	mov	r3, r0
 800deb0:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800deb2:	89fb      	ldrh	r3, [r7, #14]
 800deb4:	03db      	lsls	r3, r3, #15
 800deb6:	b29a      	uxth	r2, r3
 800deb8:	89fb      	ldrh	r3, [r7, #14]
 800deba:	085b      	lsrs	r3, r3, #1
 800debc:	b29b      	uxth	r3, r3
 800debe:	4413      	add	r3, r2
 800dec0:	b29a      	uxth	r2, r3
 800dec2:	89bb      	ldrh	r3, [r7, #12]
 800dec4:	b2db      	uxtb	r3, r3
 800dec6:	b29b      	uxth	r3, r3
 800dec8:	4413      	add	r3, r2
 800deca:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800decc:	89fb      	ldrh	r3, [r7, #14]
 800dece:	03db      	lsls	r3, r3, #15
 800ded0:	b29a      	uxth	r2, r3
 800ded2:	89fb      	ldrh	r3, [r7, #14]
 800ded4:	085b      	lsrs	r3, r3, #1
 800ded6:	b29b      	uxth	r3, r3
 800ded8:	4413      	add	r3, r2
 800deda:	b29a      	uxth	r2, r3
 800dedc:	89bb      	ldrh	r3, [r7, #12]
 800dede:	0a1b      	lsrs	r3, r3, #8
 800dee0:	b29b      	uxth	r3, r3
 800dee2:	4413      	add	r3, r2
 800dee4:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	1c9a      	adds	r2, r3, #2
 800deea:	607a      	str	r2, [r7, #4]
 800deec:	881b      	ldrh	r3, [r3, #0]
 800deee:	81bb      	strh	r3, [r7, #12]
 800def0:	89bb      	ldrh	r3, [r7, #12]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d1d7      	bne.n	800dea6 <xname_sum+0xe>
	}
	return sum;
 800def6:	89fb      	ldrh	r3, [r7, #14]
}
 800def8:	4618      	mov	r0, r3
 800defa:	3710      	adds	r7, #16
 800defc:	46bd      	mov	sp, r7
 800defe:	bd80      	pop	{r7, pc}

0800df00 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800df00:	b590      	push	{r4, r7, lr}
 800df02:	b087      	sub	sp, #28
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	691b      	ldr	r3, [r3, #16]
 800df0e:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681a      	ldr	r2, [r3, #0]
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df18:	4619      	mov	r1, r3
 800df1a:	4610      	mov	r0, r2
 800df1c:	f7fe fda2 	bl	800ca64 <move_window>
 800df20:	4603      	mov	r3, r0
 800df22:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800df24:	7bfb      	ldrb	r3, [r7, #15]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d001      	beq.n	800df2e <load_xdir+0x2e>
 800df2a:	7bfb      	ldrb	r3, [r7, #15]
 800df2c:	e09f      	b.n	800e06e <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df32:	781b      	ldrb	r3, [r3, #0]
 800df34:	2b85      	cmp	r3, #133	; 0x85
 800df36:	d001      	beq.n	800df3c <load_xdir+0x3c>
 800df38:	2302      	movs	r3, #2
 800df3a:	e098      	b.n	800e06e <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df40:	2220      	movs	r2, #32
 800df42:	4619      	mov	r1, r3
 800df44:	6938      	ldr	r0, [r7, #16]
 800df46:	f7fe fb5e 	bl	800c606 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800df4a:	693b      	ldr	r3, [r7, #16]
 800df4c:	3301      	adds	r3, #1
 800df4e:	781b      	ldrb	r3, [r3, #0]
 800df50:	3301      	adds	r3, #1
 800df52:	015b      	lsls	r3, r3, #5
 800df54:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800df56:	68bb      	ldr	r3, [r7, #8]
 800df58:	2b5f      	cmp	r3, #95	; 0x5f
 800df5a:	d903      	bls.n	800df64 <load_xdir+0x64>
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800df62:	d901      	bls.n	800df68 <load_xdir+0x68>
 800df64:	2302      	movs	r3, #2
 800df66:	e082      	b.n	800e06e <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800df68:	2100      	movs	r1, #0
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f7ff fc05 	bl	800d77a <dir_next>
 800df70:	4603      	mov	r3, r0
 800df72:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800df74:	7bfb      	ldrb	r3, [r7, #15]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d001      	beq.n	800df7e <load_xdir+0x7e>
 800df7a:	7bfb      	ldrb	r3, [r7, #15]
 800df7c:	e077      	b.n	800e06e <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681a      	ldr	r2, [r3, #0]
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df86:	4619      	mov	r1, r3
 800df88:	4610      	mov	r0, r2
 800df8a:	f7fe fd6b 	bl	800ca64 <move_window>
 800df8e:	4603      	mov	r3, r0
 800df90:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800df92:	7bfb      	ldrb	r3, [r7, #15]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d001      	beq.n	800df9c <load_xdir+0x9c>
 800df98:	7bfb      	ldrb	r3, [r7, #15]
 800df9a:	e068      	b.n	800e06e <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	2bc0      	cmp	r3, #192	; 0xc0
 800dfa4:	d001      	beq.n	800dfaa <load_xdir+0xaa>
 800dfa6:	2302      	movs	r3, #2
 800dfa8:	e061      	b.n	800e06e <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800dfaa:	693b      	ldr	r3, [r7, #16]
 800dfac:	f103 0020 	add.w	r0, r3, #32
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfb4:	2220      	movs	r2, #32
 800dfb6:	4619      	mov	r1, r3
 800dfb8:	f7fe fb25 	bl	800c606 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800dfbc:	693b      	ldr	r3, [r7, #16]
 800dfbe:	3323      	adds	r3, #35	; 0x23
 800dfc0:	781b      	ldrb	r3, [r3, #0]
 800dfc2:	332c      	adds	r3, #44	; 0x2c
 800dfc4:	4a2c      	ldr	r2, [pc, #176]	; (800e078 <load_xdir+0x178>)
 800dfc6:	fba2 2303 	umull	r2, r3, r2, r3
 800dfca:	08db      	lsrs	r3, r3, #3
 800dfcc:	015b      	lsls	r3, r3, #5
 800dfce:	68ba      	ldr	r2, [r7, #8]
 800dfd0:	429a      	cmp	r2, r3
 800dfd2:	d201      	bcs.n	800dfd8 <load_xdir+0xd8>
 800dfd4:	2302      	movs	r3, #2
 800dfd6:	e04a      	b.n	800e06e <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800dfd8:	2340      	movs	r3, #64	; 0x40
 800dfda:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800dfdc:	2100      	movs	r1, #0
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f7ff fbcb 	bl	800d77a <dir_next>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800dfe8:	7bfb      	ldrb	r3, [r7, #15]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d001      	beq.n	800dff2 <load_xdir+0xf2>
 800dfee:	7bfb      	ldrb	r3, [r7, #15]
 800dff0:	e03d      	b.n	800e06e <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681a      	ldr	r2, [r3, #0]
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dffa:	4619      	mov	r1, r3
 800dffc:	4610      	mov	r0, r2
 800dffe:	f7fe fd31 	bl	800ca64 <move_window>
 800e002:	4603      	mov	r3, r0
 800e004:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800e006:	7bfb      	ldrb	r3, [r7, #15]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d001      	beq.n	800e010 <load_xdir+0x110>
 800e00c:	7bfb      	ldrb	r3, [r7, #15]
 800e00e:	e02e      	b.n	800e06e <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e014:	781b      	ldrb	r3, [r3, #0]
 800e016:	2bc1      	cmp	r3, #193	; 0xc1
 800e018:	d001      	beq.n	800e01e <load_xdir+0x11e>
 800e01a:	2302      	movs	r3, #2
 800e01c:	e027      	b.n	800e06e <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800e024:	d208      	bcs.n	800e038 <load_xdir+0x138>
 800e026:	693a      	ldr	r2, [r7, #16]
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	18d0      	adds	r0, r2, r3
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e030:	2220      	movs	r2, #32
 800e032:	4619      	mov	r1, r3
 800e034:	f7fe fae7 	bl	800c606 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	3320      	adds	r3, #32
 800e03c:	617b      	str	r3, [r7, #20]
 800e03e:	697a      	ldr	r2, [r7, #20]
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	429a      	cmp	r2, r3
 800e044:	d3ca      	bcc.n	800dfdc <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800e04c:	d80e      	bhi.n	800e06c <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800e04e:	6938      	ldr	r0, [r7, #16]
 800e050:	f7ff feef 	bl	800de32 <xdir_sum>
 800e054:	4603      	mov	r3, r0
 800e056:	461c      	mov	r4, r3
 800e058:	693b      	ldr	r3, [r7, #16]
 800e05a:	3302      	adds	r3, #2
 800e05c:	4618      	mov	r0, r3
 800e05e:	f7fe f8ed 	bl	800c23c <ld_word>
 800e062:	4603      	mov	r3, r0
 800e064:	429c      	cmp	r4, r3
 800e066:	d001      	beq.n	800e06c <load_xdir+0x16c>
 800e068:	2302      	movs	r3, #2
 800e06a:	e000      	b.n	800e06e <load_xdir+0x16e>
	}
	return FR_OK;
 800e06c:	2300      	movs	r3, #0
}
 800e06e:	4618      	mov	r0, r3
 800e070:	371c      	adds	r7, #28
 800e072:	46bd      	mov	sp, r7
 800e074:	bd90      	pop	{r4, r7, pc}
 800e076:	bf00      	nop
 800e078:	88888889 	.word	0x88888889

0800e07c <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800e07c:	b5b0      	push	{r4, r5, r7, lr}
 800e07e:	b084      	sub	sp, #16
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
 800e084:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800e086:	6839      	ldr	r1, [r7, #0]
 800e088:	6808      	ldr	r0, [r1, #0]
 800e08a:	6879      	ldr	r1, [r7, #4]
 800e08c:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800e08e:	6839      	ldr	r1, [r7, #0]
 800e090:	6a08      	ldr	r0, [r1, #32]
 800e092:	6879      	ldr	r1, [r7, #4]
 800e094:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800e096:	6839      	ldr	r1, [r7, #0]
 800e098:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800e09a:	b2c8      	uxtb	r0, r1
 800e09c:	6879      	ldr	r1, [r7, #4]
 800e09e:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800e0a0:	6839      	ldr	r1, [r7, #0]
 800e0a2:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800e0a4:	2000      	movs	r0, #0
 800e0a6:	460c      	mov	r4, r1
 800e0a8:	4605      	mov	r5, r0
 800e0aa:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	6879      	ldr	r1, [r7, #4]
 800e0b2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0c2:	4619      	mov	r1, r3
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f7ff fad2 	bl	800d66e <dir_sdi>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e0ce:	7bfb      	ldrb	r3, [r7, #15]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d104      	bne.n	800e0de <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f7ff ff13 	bl	800df00 <load_xdir>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800e0de:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3710      	adds	r7, #16
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bdb0      	pop	{r4, r5, r7, pc}

0800e0e8 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800e0e8:	b590      	push	{r4, r7, lr}
 800e0ea:	b087      	sub	sp, #28
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	691b      	ldr	r3, [r3, #16]
 800e0f6:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	1c9c      	adds	r4, r3, #2
 800e0fc:	68f8      	ldr	r0, [r7, #12]
 800e0fe:	f7ff fe98 	bl	800de32 <xdir_sum>
 800e102:	4603      	mov	r3, r0
 800e104:	4619      	mov	r1, r3
 800e106:	4620      	mov	r0, r4
 800e108:	f7fe f9ae 	bl	800c468 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	3301      	adds	r3, #1
 800e110:	781b      	ldrb	r3, [r3, #0]
 800e112:	3301      	adds	r3, #1
 800e114:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e11a:	4619      	mov	r1, r3
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f7ff faa6 	bl	800d66e <dir_sdi>
 800e122:	4603      	mov	r3, r0
 800e124:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800e126:	e026      	b.n	800e176 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681a      	ldr	r2, [r3, #0]
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e130:	4619      	mov	r1, r3
 800e132:	4610      	mov	r0, r2
 800e134:	f7fe fc96 	bl	800ca64 <move_window>
 800e138:	4603      	mov	r3, r0
 800e13a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e13c:	7dfb      	ldrb	r3, [r7, #23]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d11d      	bne.n	800e17e <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e146:	2220      	movs	r2, #32
 800e148:	68f9      	ldr	r1, [r7, #12]
 800e14a:	4618      	mov	r0, r3
 800e14c:	f7fe fa5b 	bl	800c606 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	2201      	movs	r2, #1
 800e156:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800e158:	693b      	ldr	r3, [r7, #16]
 800e15a:	3b01      	subs	r3, #1
 800e15c:	613b      	str	r3, [r7, #16]
 800e15e:	693b      	ldr	r3, [r7, #16]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d00e      	beq.n	800e182 <store_xdir+0x9a>
		dirb += SZDIRE;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	3320      	adds	r3, #32
 800e168:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800e16a:	2100      	movs	r1, #0
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f7ff fb04 	bl	800d77a <dir_next>
 800e172:	4603      	mov	r3, r0
 800e174:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800e176:	7dfb      	ldrb	r3, [r7, #23]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d0d5      	beq.n	800e128 <store_xdir+0x40>
 800e17c:	e002      	b.n	800e184 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800e17e:	bf00      	nop
 800e180:	e000      	b.n	800e184 <store_xdir+0x9c>
		if (--nent == 0) break;
 800e182:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800e184:	7dfb      	ldrb	r3, [r7, #23]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d002      	beq.n	800e190 <store_xdir+0xa8>
 800e18a:	7dfb      	ldrb	r3, [r7, #23]
 800e18c:	2b01      	cmp	r3, #1
 800e18e:	d101      	bne.n	800e194 <store_xdir+0xac>
 800e190:	7dfb      	ldrb	r3, [r7, #23]
 800e192:	e000      	b.n	800e196 <store_xdir+0xae>
 800e194:	2302      	movs	r3, #2
}
 800e196:	4618      	mov	r0, r3
 800e198:	371c      	adds	r7, #28
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd90      	pop	{r4, r7, pc}

0800e19e <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800e19e:	b590      	push	{r4, r7, lr}
 800e1a0:	b085      	sub	sp, #20
 800e1a2:	af00      	add	r7, sp, #0
 800e1a4:	6078      	str	r0, [r7, #4]
 800e1a6:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800e1a8:	2240      	movs	r2, #64	; 0x40
 800e1aa:	2100      	movs	r1, #0
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f7fe fa4b 	bl	800c648 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2285      	movs	r2, #133	; 0x85
 800e1b6:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	3320      	adds	r3, #32
 800e1bc:	22c0      	movs	r2, #192	; 0xc0
 800e1be:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	72bb      	strb	r3, [r7, #10]
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	72fb      	strb	r3, [r7, #11]
 800e1c8:	2301      	movs	r3, #1
 800e1ca:	813b      	strh	r3, [r7, #8]
 800e1cc:	2340      	movs	r3, #64	; 0x40
 800e1ce:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	1c5a      	adds	r2, r3, #1
 800e1d4:	60fa      	str	r2, [r7, #12]
 800e1d6:	687a      	ldr	r2, [r7, #4]
 800e1d8:	4413      	add	r3, r2
 800e1da:	22c1      	movs	r2, #193	; 0xc1
 800e1dc:	701a      	strb	r2, [r3, #0]
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	1c5a      	adds	r2, r3, #1
 800e1e2:	60fa      	str	r2, [r7, #12]
 800e1e4:	687a      	ldr	r2, [r7, #4]
 800e1e6:	4413      	add	r3, r2
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800e1ec:	893b      	ldrh	r3, [r7, #8]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d00b      	beq.n	800e20a <create_xdir+0x6c>
 800e1f2:	7abb      	ldrb	r3, [r7, #10]
 800e1f4:	005b      	lsls	r3, r3, #1
 800e1f6:	683a      	ldr	r2, [r7, #0]
 800e1f8:	4413      	add	r3, r2
 800e1fa:	881b      	ldrh	r3, [r3, #0]
 800e1fc:	813b      	strh	r3, [r7, #8]
 800e1fe:	893b      	ldrh	r3, [r7, #8]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d002      	beq.n	800e20a <create_xdir+0x6c>
 800e204:	7abb      	ldrb	r3, [r7, #10]
 800e206:	3301      	adds	r3, #1
 800e208:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800e20a:	687a      	ldr	r2, [r7, #4]
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	4413      	add	r3, r2
 800e210:	893a      	ldrh	r2, [r7, #8]
 800e212:	4611      	mov	r1, r2
 800e214:	4618      	mov	r0, r3
 800e216:	f7fe f927 	bl	800c468 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	3302      	adds	r3, #2
 800e21e:	60fb      	str	r3, [r7, #12]
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	f003 031f 	and.w	r3, r3, #31
 800e226:	2b00      	cmp	r3, #0
 800e228:	d1e0      	bne.n	800e1ec <create_xdir+0x4e>
		nb++;
 800e22a:	7afb      	ldrb	r3, [r7, #11]
 800e22c:	3301      	adds	r3, #1
 800e22e:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800e230:	7abb      	ldrb	r3, [r7, #10]
 800e232:	005b      	lsls	r3, r3, #1
 800e234:	683a      	ldr	r2, [r7, #0]
 800e236:	4413      	add	r3, r2
 800e238:	881b      	ldrh	r3, [r3, #0]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d1c8      	bne.n	800e1d0 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	3323      	adds	r3, #35	; 0x23
 800e242:	7aba      	ldrb	r2, [r7, #10]
 800e244:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	3301      	adds	r3, #1
 800e24a:	7afa      	ldrb	r2, [r7, #11]
 800e24c:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800e254:	6838      	ldr	r0, [r7, #0]
 800e256:	f7ff fe1f 	bl	800de98 <xname_sum>
 800e25a:	4603      	mov	r3, r0
 800e25c:	4619      	mov	r1, r3
 800e25e:	4620      	mov	r0, r4
 800e260:	f7fe f902 	bl	800c468 <st_word>
}
 800e264:	bf00      	nop
 800e266:	3714      	adds	r7, #20
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd90      	pop	{r4, r7, pc}

0800e26c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b086      	sub	sp, #24
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
 800e274:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e276:	2304      	movs	r3, #4
 800e278:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800e280:	23ff      	movs	r3, #255	; 0xff
 800e282:	757b      	strb	r3, [r7, #21]
 800e284:	23ff      	movs	r3, #255	; 0xff
 800e286:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800e288:	e09f      	b.n	800e3ca <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e28e:	4619      	mov	r1, r3
 800e290:	6938      	ldr	r0, [r7, #16]
 800e292:	f7fe fbe7 	bl	800ca64 <move_window>
 800e296:	4603      	mov	r3, r0
 800e298:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e29a:	7dfb      	ldrb	r3, [r7, #23]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	f040 809a 	bne.w	800e3d6 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2a6:	781b      	ldrb	r3, [r3, #0]
 800e2a8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800e2aa:	7dbb      	ldrb	r3, [r7, #22]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d102      	bne.n	800e2b6 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e2b0:	2304      	movs	r3, #4
 800e2b2:	75fb      	strb	r3, [r7, #23]
 800e2b4:	e096      	b.n	800e3e4 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e2b6:	693b      	ldr	r3, [r7, #16]
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	2b04      	cmp	r3, #4
 800e2bc:	d118      	bne.n	800e2f0 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800e2be:	7dbb      	ldrb	r3, [r7, #22]
 800e2c0:	2b85      	cmp	r3, #133	; 0x85
 800e2c2:	d179      	bne.n	800e3b8 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f7ff fe17 	bl	800df00 <load_xdir>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800e2d6:	7dfb      	ldrb	r3, [r7, #23]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d17e      	bne.n	800e3da <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800e2dc:	693b      	ldr	r3, [r7, #16]
 800e2de:	691b      	ldr	r3, [r3, #16]
 800e2e0:	3304      	adds	r3, #4
 800e2e2:	781b      	ldrb	r3, [r3, #0]
 800e2e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e2e8:	b2da      	uxtb	r2, r3
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	719a      	strb	r2, [r3, #6]
					}
					break;
 800e2ee:	e074      	b.n	800e3da <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2f4:	330b      	adds	r3, #11
 800e2f6:	781b      	ldrb	r3, [r3, #0]
 800e2f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e2fc:	73fb      	strb	r3, [r7, #15]
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	7bfa      	ldrb	r2, [r7, #15]
 800e302:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800e304:	7dbb      	ldrb	r3, [r7, #22]
 800e306:	2be5      	cmp	r3, #229	; 0xe5
 800e308:	d00e      	beq.n	800e328 <dir_read+0xbc>
 800e30a:	7dbb      	ldrb	r3, [r7, #22]
 800e30c:	2b2e      	cmp	r3, #46	; 0x2e
 800e30e:	d00b      	beq.n	800e328 <dir_read+0xbc>
 800e310:	7bfb      	ldrb	r3, [r7, #15]
 800e312:	f023 0320 	bic.w	r3, r3, #32
 800e316:	2b08      	cmp	r3, #8
 800e318:	bf0c      	ite	eq
 800e31a:	2301      	moveq	r3, #1
 800e31c:	2300      	movne	r3, #0
 800e31e:	b2db      	uxtb	r3, r3
 800e320:	461a      	mov	r2, r3
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	4293      	cmp	r3, r2
 800e326:	d002      	beq.n	800e32e <dir_read+0xc2>
				ord = 0xFF;
 800e328:	23ff      	movs	r3, #255	; 0xff
 800e32a:	757b      	strb	r3, [r7, #21]
 800e32c:	e044      	b.n	800e3b8 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800e32e:	7bfb      	ldrb	r3, [r7, #15]
 800e330:	2b0f      	cmp	r3, #15
 800e332:	d12f      	bne.n	800e394 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800e334:	7dbb      	ldrb	r3, [r7, #22]
 800e336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d00d      	beq.n	800e35a <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e342:	7b5b      	ldrb	r3, [r3, #13]
 800e344:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800e346:	7dbb      	ldrb	r3, [r7, #22]
 800e348:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e34c:	75bb      	strb	r3, [r7, #22]
 800e34e:	7dbb      	ldrb	r3, [r7, #22]
 800e350:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e35a:	7dba      	ldrb	r2, [r7, #22]
 800e35c:	7d7b      	ldrb	r3, [r7, #21]
 800e35e:	429a      	cmp	r2, r3
 800e360:	d115      	bne.n	800e38e <dir_read+0x122>
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e366:	330d      	adds	r3, #13
 800e368:	781b      	ldrb	r3, [r3, #0]
 800e36a:	7d3a      	ldrb	r2, [r7, #20]
 800e36c:	429a      	cmp	r2, r3
 800e36e:	d10e      	bne.n	800e38e <dir_read+0x122>
 800e370:	693b      	ldr	r3, [r7, #16]
 800e372:	68da      	ldr	r2, [r3, #12]
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e378:	4619      	mov	r1, r3
 800e37a:	4610      	mov	r0, r2
 800e37c:	f7ff fbde 	bl	800db3c <pick_lfn>
 800e380:	4603      	mov	r3, r0
 800e382:	2b00      	cmp	r3, #0
 800e384:	d003      	beq.n	800e38e <dir_read+0x122>
 800e386:	7d7b      	ldrb	r3, [r7, #21]
 800e388:	3b01      	subs	r3, #1
 800e38a:	b2db      	uxtb	r3, r3
 800e38c:	e000      	b.n	800e390 <dir_read+0x124>
 800e38e:	23ff      	movs	r3, #255	; 0xff
 800e390:	757b      	strb	r3, [r7, #21]
 800e392:	e011      	b.n	800e3b8 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800e394:	7d7b      	ldrb	r3, [r7, #21]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d109      	bne.n	800e3ae <dir_read+0x142>
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f7ff fd26 	bl	800ddf0 <sum_sfn>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	461a      	mov	r2, r3
 800e3a8:	7d3b      	ldrb	r3, [r7, #20]
 800e3aa:	4293      	cmp	r3, r2
 800e3ac:	d017      	beq.n	800e3de <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	f04f 32ff 	mov.w	r2, #4294967295
 800e3b4:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800e3b6:	e012      	b.n	800e3de <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e3b8:	2100      	movs	r1, #0
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f7ff f9dd 	bl	800d77a <dir_next>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e3c4:	7dfb      	ldrb	r3, [r7, #23]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d10b      	bne.n	800e3e2 <dir_read+0x176>
	while (dp->sect) {
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	f47f af5b 	bne.w	800e28a <dir_read+0x1e>
 800e3d4:	e006      	b.n	800e3e4 <dir_read+0x178>
		if (res != FR_OK) break;
 800e3d6:	bf00      	nop
 800e3d8:	e004      	b.n	800e3e4 <dir_read+0x178>
					break;
 800e3da:	bf00      	nop
 800e3dc:	e002      	b.n	800e3e4 <dir_read+0x178>
					break;
 800e3de:	bf00      	nop
 800e3e0:	e000      	b.n	800e3e4 <dir_read+0x178>
		if (res != FR_OK) break;
 800e3e2:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e3e4:	7dfb      	ldrb	r3, [r7, #23]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d002      	beq.n	800e3f0 <dir_read+0x184>
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800e3f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	3718      	adds	r7, #24
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}

0800e3fa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e3fa:	b590      	push	{r4, r7, lr}
 800e3fc:	b089      	sub	sp, #36	; 0x24
 800e3fe:	af00      	add	r7, sp, #0
 800e400:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e408:	2100      	movs	r1, #0
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f7ff f92f 	bl	800d66e <dir_sdi>
 800e410:	4603      	mov	r3, r0
 800e412:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800e414:	7ffb      	ldrb	r3, [r7, #31]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d001      	beq.n	800e41e <dir_find+0x24>
 800e41a:	7ffb      	ldrb	r3, [r7, #31]
 800e41c:	e112      	b.n	800e644 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	781b      	ldrb	r3, [r3, #0]
 800e422:	2b04      	cmp	r3, #4
 800e424:	d164      	bne.n	800e4f0 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	68db      	ldr	r3, [r3, #12]
 800e42a:	4618      	mov	r0, r3
 800e42c:	f7ff fd34 	bl	800de98 <xname_sum>
 800e430:	4603      	mov	r3, r0
 800e432:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800e434:	e04f      	b.n	800e4d6 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	691b      	ldr	r3, [r3, #16]
 800e43a:	3324      	adds	r3, #36	; 0x24
 800e43c:	4618      	mov	r0, r3
 800e43e:	f7fd fefd 	bl	800c23c <ld_word>
 800e442:	4603      	mov	r3, r0
 800e444:	461a      	mov	r2, r3
 800e446:	893b      	ldrh	r3, [r7, #8]
 800e448:	4293      	cmp	r3, r2
 800e44a:	d000      	beq.n	800e44e <dir_find+0x54>
 800e44c:	e043      	b.n	800e4d6 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	691b      	ldr	r3, [r3, #16]
 800e452:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800e456:	76fb      	strb	r3, [r7, #27]
 800e458:	2340      	movs	r3, #64	; 0x40
 800e45a:	617b      	str	r3, [r7, #20]
 800e45c:	2300      	movs	r3, #0
 800e45e:	613b      	str	r3, [r7, #16]
 800e460:	e029      	b.n	800e4b6 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	f003 031f 	and.w	r3, r3, #31
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d102      	bne.n	800e472 <dir_find+0x78>
 800e46c:	697b      	ldr	r3, [r7, #20]
 800e46e:	3302      	adds	r3, #2
 800e470:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	691a      	ldr	r2, [r3, #16]
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	4413      	add	r3, r2
 800e47a:	4618      	mov	r0, r3
 800e47c:	f7fd fede 	bl	800c23c <ld_word>
 800e480:	4603      	mov	r3, r0
 800e482:	4618      	mov	r0, r3
 800e484:	f002 fc8e 	bl	8010da4 <ff_wtoupper>
 800e488:	4603      	mov	r3, r0
 800e48a:	461c      	mov	r4, r3
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	68da      	ldr	r2, [r3, #12]
 800e490:	693b      	ldr	r3, [r7, #16]
 800e492:	005b      	lsls	r3, r3, #1
 800e494:	4413      	add	r3, r2
 800e496:	881b      	ldrh	r3, [r3, #0]
 800e498:	4618      	mov	r0, r3
 800e49a:	f002 fc83 	bl	8010da4 <ff_wtoupper>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	429c      	cmp	r4, r3
 800e4a2:	d10c      	bne.n	800e4be <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800e4a4:	7efb      	ldrb	r3, [r7, #27]
 800e4a6:	3b01      	subs	r3, #1
 800e4a8:	76fb      	strb	r3, [r7, #27]
 800e4aa:	697b      	ldr	r3, [r7, #20]
 800e4ac:	3302      	adds	r3, #2
 800e4ae:	617b      	str	r3, [r7, #20]
 800e4b0:	693b      	ldr	r3, [r7, #16]
 800e4b2:	3301      	adds	r3, #1
 800e4b4:	613b      	str	r3, [r7, #16]
 800e4b6:	7efb      	ldrb	r3, [r7, #27]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d1d2      	bne.n	800e462 <dir_find+0x68>
 800e4bc:	e000      	b.n	800e4c0 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800e4be:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800e4c0:	7efb      	ldrb	r3, [r7, #27]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d107      	bne.n	800e4d6 <dir_find+0xdc>
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	68da      	ldr	r2, [r3, #12]
 800e4ca:	693b      	ldr	r3, [r7, #16]
 800e4cc:	005b      	lsls	r3, r3, #1
 800e4ce:	4413      	add	r3, r2
 800e4d0:	881b      	ldrh	r3, [r3, #0]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d009      	beq.n	800e4ea <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800e4d6:	2100      	movs	r1, #0
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f7ff fec7 	bl	800e26c <dir_read>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	77fb      	strb	r3, [r7, #31]
 800e4e2:	7ffb      	ldrb	r3, [r7, #31]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d0a6      	beq.n	800e436 <dir_find+0x3c>
 800e4e8:	e000      	b.n	800e4ec <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800e4ea:	bf00      	nop
		}
		return res;
 800e4ec:	7ffb      	ldrb	r3, [r7, #31]
 800e4ee:	e0a9      	b.n	800e644 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e4f0:	23ff      	movs	r3, #255	; 0xff
 800e4f2:	773b      	strb	r3, [r7, #28]
 800e4f4:	7f3b      	ldrb	r3, [r7, #28]
 800e4f6:	777b      	strb	r3, [r7, #29]
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f04f 32ff 	mov.w	r2, #4294967295
 800e4fe:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e504:	4619      	mov	r1, r3
 800e506:	68f8      	ldr	r0, [r7, #12]
 800e508:	f7fe faac 	bl	800ca64 <move_window>
 800e50c:	4603      	mov	r3, r0
 800e50e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800e510:	7ffb      	ldrb	r3, [r7, #31]
 800e512:	2b00      	cmp	r3, #0
 800e514:	f040 8090 	bne.w	800e638 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e51c:	781b      	ldrb	r3, [r3, #0]
 800e51e:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e520:	7fbb      	ldrb	r3, [r7, #30]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d102      	bne.n	800e52c <dir_find+0x132>
 800e526:	2304      	movs	r3, #4
 800e528:	77fb      	strb	r3, [r7, #31]
 800e52a:	e08a      	b.n	800e642 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e530:	330b      	adds	r3, #11
 800e532:	781b      	ldrb	r3, [r3, #0]
 800e534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e538:	72fb      	strb	r3, [r7, #11]
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	7afa      	ldrb	r2, [r7, #11]
 800e53e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e540:	7fbb      	ldrb	r3, [r7, #30]
 800e542:	2be5      	cmp	r3, #229	; 0xe5
 800e544:	d007      	beq.n	800e556 <dir_find+0x15c>
 800e546:	7afb      	ldrb	r3, [r7, #11]
 800e548:	f003 0308 	and.w	r3, r3, #8
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d009      	beq.n	800e564 <dir_find+0x16a>
 800e550:	7afb      	ldrb	r3, [r7, #11]
 800e552:	2b0f      	cmp	r3, #15
 800e554:	d006      	beq.n	800e564 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e556:	23ff      	movs	r3, #255	; 0xff
 800e558:	777b      	strb	r3, [r7, #29]
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f04f 32ff 	mov.w	r2, #4294967295
 800e560:	64da      	str	r2, [r3, #76]	; 0x4c
 800e562:	e05e      	b.n	800e622 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e564:	7afb      	ldrb	r3, [r7, #11]
 800e566:	2b0f      	cmp	r3, #15
 800e568:	d136      	bne.n	800e5d8 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800e570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e574:	2b00      	cmp	r3, #0
 800e576:	d154      	bne.n	800e622 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e578:	7fbb      	ldrb	r3, [r7, #30]
 800e57a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d00d      	beq.n	800e59e <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e586:	7b5b      	ldrb	r3, [r3, #13]
 800e588:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e58a:	7fbb      	ldrb	r3, [r7, #30]
 800e58c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e590:	77bb      	strb	r3, [r7, #30]
 800e592:	7fbb      	ldrb	r3, [r7, #30]
 800e594:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e59e:	7fba      	ldrb	r2, [r7, #30]
 800e5a0:	7f7b      	ldrb	r3, [r7, #29]
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d115      	bne.n	800e5d2 <dir_find+0x1d8>
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5aa:	330d      	adds	r3, #13
 800e5ac:	781b      	ldrb	r3, [r3, #0]
 800e5ae:	7f3a      	ldrb	r2, [r7, #28]
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	d10e      	bne.n	800e5d2 <dir_find+0x1d8>
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	68da      	ldr	r2, [r3, #12]
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5bc:	4619      	mov	r1, r3
 800e5be:	4610      	mov	r0, r2
 800e5c0:	f7ff fa4c 	bl	800da5c <cmp_lfn>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d003      	beq.n	800e5d2 <dir_find+0x1d8>
 800e5ca:	7f7b      	ldrb	r3, [r7, #29]
 800e5cc:	3b01      	subs	r3, #1
 800e5ce:	b2db      	uxtb	r3, r3
 800e5d0:	e000      	b.n	800e5d4 <dir_find+0x1da>
 800e5d2:	23ff      	movs	r3, #255	; 0xff
 800e5d4:	777b      	strb	r3, [r7, #29]
 800e5d6:	e024      	b.n	800e622 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e5d8:	7f7b      	ldrb	r3, [r7, #29]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d109      	bne.n	800e5f2 <dir_find+0x1f8>
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	f7ff fc04 	bl	800ddf0 <sum_sfn>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	461a      	mov	r2, r3
 800e5ec:	7f3b      	ldrb	r3, [r7, #28]
 800e5ee:	4293      	cmp	r3, r2
 800e5f0:	d024      	beq.n	800e63c <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800e5f8:	f003 0301 	and.w	r3, r3, #1
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d10a      	bne.n	800e616 <dir_find+0x21c>
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	3340      	adds	r3, #64	; 0x40
 800e608:	220b      	movs	r2, #11
 800e60a:	4619      	mov	r1, r3
 800e60c:	f7fe f837 	bl	800c67e <mem_cmp>
 800e610:	4603      	mov	r3, r0
 800e612:	2b00      	cmp	r3, #0
 800e614:	d014      	beq.n	800e640 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e616:	23ff      	movs	r3, #255	; 0xff
 800e618:	777b      	strb	r3, [r7, #29]
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	f04f 32ff 	mov.w	r2, #4294967295
 800e620:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e622:	2100      	movs	r1, #0
 800e624:	6878      	ldr	r0, [r7, #4]
 800e626:	f7ff f8a8 	bl	800d77a <dir_next>
 800e62a:	4603      	mov	r3, r0
 800e62c:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800e62e:	7ffb      	ldrb	r3, [r7, #31]
 800e630:	2b00      	cmp	r3, #0
 800e632:	f43f af65 	beq.w	800e500 <dir_find+0x106>
 800e636:	e004      	b.n	800e642 <dir_find+0x248>
		if (res != FR_OK) break;
 800e638:	bf00      	nop
 800e63a:	e002      	b.n	800e642 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e63c:	bf00      	nop
 800e63e:	e000      	b.n	800e642 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e640:	bf00      	nop

	return res;
 800e642:	7ffb      	ldrb	r3, [r7, #31]
}
 800e644:	4618      	mov	r0, r3
 800e646:	3724      	adds	r7, #36	; 0x24
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd90      	pop	{r4, r7, pc}

0800e64c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e64c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e650:	b0a0      	sub	sp, #128	; 0x80
 800e652:	af00      	add	r7, sp, #0
 800e654:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800e662:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e666:	2b00      	cmp	r3, #0
 800e668:	d001      	beq.n	800e66e <dir_register+0x22>
 800e66a:	2306      	movs	r3, #6
 800e66c:	e18e      	b.n	800e98c <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e66e:	2300      	movs	r3, #0
 800e670:	677b      	str	r3, [r7, #116]	; 0x74
 800e672:	e002      	b.n	800e67a <dir_register+0x2e>
 800e674:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e676:	3301      	adds	r3, #1
 800e678:	677b      	str	r3, [r7, #116]	; 0x74
 800e67a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e67c:	68da      	ldr	r2, [r3, #12]
 800e67e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e680:	005b      	lsls	r3, r3, #1
 800e682:	4413      	add	r3, r2
 800e684:	881b      	ldrh	r3, [r3, #0]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d1f4      	bne.n	800e674 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e68a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e68c:	781b      	ldrb	r3, [r3, #0]
 800e68e:	2b04      	cmp	r3, #4
 800e690:	f040 809f 	bne.w	800e7d2 <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800e694:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e696:	330e      	adds	r3, #14
 800e698:	4aa2      	ldr	r2, [pc, #648]	; (800e924 <dir_register+0x2d8>)
 800e69a:	fba2 2303 	umull	r2, r3, r2, r3
 800e69e:	08db      	lsrs	r3, r3, #3
 800e6a0:	3302      	adds	r3, #2
 800e6a2:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800e6a4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f7ff f93c 	bl	800d924 <dir_alloc>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800e6b2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d002      	beq.n	800e6c0 <dir_register+0x74>
 800e6ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e6be:	e165      	b.n	800e98c <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e6c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e6c6:	3b01      	subs	r3, #1
 800e6c8:	015b      	lsls	r3, r3, #5
 800e6ca:	1ad2      	subs	r2, r2, r3
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	689b      	ldr	r3, [r3, #8]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d072      	beq.n	800e7be <dir_register+0x172>
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	79db      	ldrb	r3, [r3, #7]
 800e6dc:	f003 0304 	and.w	r3, r3, #4
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d06c      	beq.n	800e7be <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e6ea:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e6ec:	8949      	ldrh	r1, [r1, #10]
 800e6ee:	0249      	lsls	r1, r1, #9
 800e6f0:	2000      	movs	r0, #0
 800e6f2:	460c      	mov	r4, r1
 800e6f4:	4605      	mov	r5, r0
 800e6f6:	eb12 0804 	adds.w	r8, r2, r4
 800e6fa:	eb43 0905 	adc.w	r9, r3, r5
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	4618      	mov	r0, r3
 800e708:	f7fe fd58 	bl	800d1bc <fill_first_frag>
 800e70c:	4603      	mov	r3, r0
 800e70e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800e712:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e716:	2b00      	cmp	r3, #0
 800e718:	d002      	beq.n	800e720 <dir_register+0xd4>
 800e71a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e71e:	e135      	b.n	800e98c <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e726:	f04f 32ff 	mov.w	r2, #4294967295
 800e72a:	4619      	mov	r1, r3
 800e72c:	f7fe fd75 	bl	800d21a <fill_last_frag>
 800e730:	4603      	mov	r3, r0
 800e732:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800e736:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d002      	beq.n	800e744 <dir_register+0xf8>
 800e73e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e742:	e123      	b.n	800e98c <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800e744:	687a      	ldr	r2, [r7, #4]
 800e746:	f107 0308 	add.w	r3, r7, #8
 800e74a:	4611      	mov	r1, r2
 800e74c:	4618      	mov	r0, r3
 800e74e:	f7ff fc95 	bl	800e07c <load_obj_dir>
 800e752:	4603      	mov	r3, r0
 800e754:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800e758:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d002      	beq.n	800e766 <dir_register+0x11a>
 800e760:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e764:	e112      	b.n	800e98c <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800e766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e768:	691b      	ldr	r3, [r3, #16]
 800e76a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e774:	4608      	mov	r0, r1
 800e776:	f7fd febe 	bl	800c4f6 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800e77a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e77c:	691b      	ldr	r3, [r3, #16]
 800e77e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e788:	4608      	mov	r0, r1
 800e78a:	f7fd feb4 	bl	800c4f6 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	79da      	ldrb	r2, [r3, #7]
 800e792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e794:	691b      	ldr	r3, [r3, #16]
 800e796:	3321      	adds	r3, #33	; 0x21
 800e798:	f042 0201 	orr.w	r2, r2, #1
 800e79c:	b2d2      	uxtb	r2, r2
 800e79e:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800e7a0:	f107 0308 	add.w	r3, r7, #8
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f7ff fc9f 	bl	800e0e8 <store_xdir>
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800e7b0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d002      	beq.n	800e7be <dir_register+0x172>
 800e7b8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e7bc:	e0e6      	b.n	800e98c <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800e7be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7c0:	691a      	ldr	r2, [r3, #16]
 800e7c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7c4:	68db      	ldr	r3, [r3, #12]
 800e7c6:	4619      	mov	r1, r3
 800e7c8:	4610      	mov	r0, r2
 800e7ca:	f7ff fce8 	bl	800e19e <create_xdir>
		return FR_OK;
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	e0dc      	b.n	800e98c <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800e7d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e7dc:	220c      	movs	r2, #12
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f7fd ff11 	bl	800c606 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e7e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e7e8:	f003 0301 	and.w	r3, r3, #1
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d033      	beq.n	800e858 <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2240      	movs	r2, #64	; 0x40
 800e7f4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800e7f8:	2301      	movs	r3, #1
 800e7fa:	67bb      	str	r3, [r7, #120]	; 0x78
 800e7fc:	e016      	b.n	800e82c <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800e804:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e806:	68da      	ldr	r2, [r3, #12]
 800e808:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800e80c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e80e:	f7ff fa61 	bl	800dcd4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e812:	6878      	ldr	r0, [r7, #4]
 800e814:	f7ff fdf1 	bl	800e3fa <dir_find>
 800e818:	4603      	mov	r3, r0
 800e81a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800e81e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e822:	2b00      	cmp	r3, #0
 800e824:	d106      	bne.n	800e834 <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 800e826:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e828:	3301      	adds	r3, #1
 800e82a:	67bb      	str	r3, [r7, #120]	; 0x78
 800e82c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e82e:	2b63      	cmp	r3, #99	; 0x63
 800e830:	d9e5      	bls.n	800e7fe <dir_register+0x1b2>
 800e832:	e000      	b.n	800e836 <dir_register+0x1ea>
			if (res != FR_OK) break;
 800e834:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e836:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e838:	2b64      	cmp	r3, #100	; 0x64
 800e83a:	d101      	bne.n	800e840 <dir_register+0x1f4>
 800e83c:	2307      	movs	r3, #7
 800e83e:	e0a5      	b.n	800e98c <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e840:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e844:	2b04      	cmp	r3, #4
 800e846:	d002      	beq.n	800e84e <dir_register+0x202>
 800e848:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e84c:	e09e      	b.n	800e98c <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e84e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e858:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e85c:	f003 0302 	and.w	r3, r3, #2
 800e860:	2b00      	cmp	r3, #0
 800e862:	d007      	beq.n	800e874 <dir_register+0x228>
 800e864:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e866:	330c      	adds	r3, #12
 800e868:	4a2f      	ldr	r2, [pc, #188]	; (800e928 <dir_register+0x2dc>)
 800e86a:	fba2 2303 	umull	r2, r3, r2, r3
 800e86e:	089b      	lsrs	r3, r3, #2
 800e870:	3301      	adds	r3, #1
 800e872:	e000      	b.n	800e876 <dir_register+0x22a>
 800e874:	2301      	movs	r3, #1
 800e876:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e878:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	f7ff f852 	bl	800d924 <dir_alloc>
 800e880:	4603      	mov	r3, r0
 800e882:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e886:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d14f      	bne.n	800e92e <dir_register+0x2e2>
 800e88e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e890:	3b01      	subs	r3, #1
 800e892:	673b      	str	r3, [r7, #112]	; 0x70
 800e894:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e896:	2b00      	cmp	r3, #0
 800e898:	d049      	beq.n	800e92e <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e89e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e8a0:	015b      	lsls	r3, r3, #5
 800e8a2:	1ad3      	subs	r3, r2, r3
 800e8a4:	4619      	mov	r1, r3
 800e8a6:	6878      	ldr	r0, [r7, #4]
 800e8a8:	f7fe fee1 	bl	800d66e <dir_sdi>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800e8b2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d139      	bne.n	800e92e <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	3340      	adds	r3, #64	; 0x40
 800e8be:	4618      	mov	r0, r3
 800e8c0:	f7ff fa96 	bl	800ddf0 <sum_sfn>
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8ce:	4619      	mov	r1, r3
 800e8d0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e8d2:	f7fe f8c7 	bl	800ca64 <move_window>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800e8dc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d123      	bne.n	800e92c <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e8e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8e6:	68d8      	ldr	r0, [r3, #12]
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800e8ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e8ee:	b2da      	uxtb	r2, r3
 800e8f0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e8f4:	f7ff f986 	bl	800dc04 <put_lfn>
				fs->wflag = 1;
 800e8f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8fa:	2201      	movs	r2, #1
 800e8fc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e8fe:	2100      	movs	r1, #0
 800e900:	6878      	ldr	r0, [r7, #4]
 800e902:	f7fe ff3a 	bl	800d77a <dir_next>
 800e906:	4603      	mov	r3, r0
 800e908:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800e90c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e910:	2b00      	cmp	r3, #0
 800e912:	d10c      	bne.n	800e92e <dir_register+0x2e2>
 800e914:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e916:	3b01      	subs	r3, #1
 800e918:	673b      	str	r3, [r7, #112]	; 0x70
 800e91a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d1d4      	bne.n	800e8ca <dir_register+0x27e>
 800e920:	e005      	b.n	800e92e <dir_register+0x2e2>
 800e922:	bf00      	nop
 800e924:	88888889 	.word	0x88888889
 800e928:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800e92c:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e92e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e932:	2b00      	cmp	r3, #0
 800e934:	d128      	bne.n	800e988 <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e93a:	4619      	mov	r1, r3
 800e93c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e93e:	f7fe f891 	bl	800ca64 <move_window>
 800e942:	4603      	mov	r3, r0
 800e944:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800e948:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d11b      	bne.n	800e988 <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e954:	2220      	movs	r2, #32
 800e956:	2100      	movs	r1, #0
 800e958:	4618      	mov	r0, r3
 800e95a:	f7fd fe75 	bl	800c648 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	3340      	adds	r3, #64	; 0x40
 800e966:	220b      	movs	r2, #11
 800e968:	4619      	mov	r1, r3
 800e96a:	f7fd fe4c 	bl	800c606 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e978:	330c      	adds	r3, #12
 800e97a:	f002 0218 	and.w	r2, r2, #24
 800e97e:	b2d2      	uxtb	r2, r2
 800e980:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e984:	2201      	movs	r2, #1
 800e986:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e988:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	3780      	adds	r7, #128	; 0x80
 800e990:	46bd      	mov	sp, r7
 800e992:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800e996:	bf00      	nop

0800e998 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b08a      	sub	sp, #40	; 0x28
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	613b      	str	r3, [r7, #16]
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	68db      	ldr	r3, [r3, #12]
 800e9ae:	60fb      	str	r3, [r7, #12]
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	617b      	str	r3, [r7, #20]
 800e9b4:	697b      	ldr	r3, [r7, #20]
 800e9b6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e9b8:	69bb      	ldr	r3, [r7, #24]
 800e9ba:	1c5a      	adds	r2, r3, #1
 800e9bc:	61ba      	str	r2, [r7, #24]
 800e9be:	693a      	ldr	r2, [r7, #16]
 800e9c0:	4413      	add	r3, r2
 800e9c2:	781b      	ldrb	r3, [r3, #0]
 800e9c4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e9c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9c8:	2b1f      	cmp	r3, #31
 800e9ca:	d940      	bls.n	800ea4e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e9cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9ce:	2b2f      	cmp	r3, #47	; 0x2f
 800e9d0:	d006      	beq.n	800e9e0 <create_name+0x48>
 800e9d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9d4:	2b5c      	cmp	r3, #92	; 0x5c
 800e9d6:	d110      	bne.n	800e9fa <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e9d8:	e002      	b.n	800e9e0 <create_name+0x48>
 800e9da:	69bb      	ldr	r3, [r7, #24]
 800e9dc:	3301      	adds	r3, #1
 800e9de:	61bb      	str	r3, [r7, #24]
 800e9e0:	693a      	ldr	r2, [r7, #16]
 800e9e2:	69bb      	ldr	r3, [r7, #24]
 800e9e4:	4413      	add	r3, r2
 800e9e6:	781b      	ldrb	r3, [r3, #0]
 800e9e8:	2b2f      	cmp	r3, #47	; 0x2f
 800e9ea:	d0f6      	beq.n	800e9da <create_name+0x42>
 800e9ec:	693a      	ldr	r2, [r7, #16]
 800e9ee:	69bb      	ldr	r3, [r7, #24]
 800e9f0:	4413      	add	r3, r2
 800e9f2:	781b      	ldrb	r3, [r3, #0]
 800e9f4:	2b5c      	cmp	r3, #92	; 0x5c
 800e9f6:	d0f0      	beq.n	800e9da <create_name+0x42>
			break;
 800e9f8:	e02a      	b.n	800ea50 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e9fa:	697b      	ldr	r3, [r7, #20]
 800e9fc:	2bfe      	cmp	r3, #254	; 0xfe
 800e9fe:	d901      	bls.n	800ea04 <create_name+0x6c>
 800ea00:	2306      	movs	r3, #6
 800ea02:	e17d      	b.n	800ed00 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ea04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea06:	b2db      	uxtb	r3, r3
 800ea08:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ea0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea0c:	2101      	movs	r1, #1
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f002 f98c 	bl	8010d2c <ff_convert>
 800ea14:	4603      	mov	r3, r0
 800ea16:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ea18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d101      	bne.n	800ea22 <create_name+0x8a>
 800ea1e:	2306      	movs	r3, #6
 800ea20:	e16e      	b.n	800ed00 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ea22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea24:	2b7f      	cmp	r3, #127	; 0x7f
 800ea26:	d809      	bhi.n	800ea3c <create_name+0xa4>
 800ea28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea2a:	4619      	mov	r1, r3
 800ea2c:	488d      	ldr	r0, [pc, #564]	; (800ec64 <create_name+0x2cc>)
 800ea2e:	f7fd fe4d 	bl	800c6cc <chk_chr>
 800ea32:	4603      	mov	r3, r0
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d001      	beq.n	800ea3c <create_name+0xa4>
 800ea38:	2306      	movs	r3, #6
 800ea3a:	e161      	b.n	800ed00 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800ea3c:	697b      	ldr	r3, [r7, #20]
 800ea3e:	1c5a      	adds	r2, r3, #1
 800ea40:	617a      	str	r2, [r7, #20]
 800ea42:	005b      	lsls	r3, r3, #1
 800ea44:	68fa      	ldr	r2, [r7, #12]
 800ea46:	4413      	add	r3, r2
 800ea48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ea4a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ea4c:	e7b4      	b.n	800e9b8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ea4e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ea50:	693a      	ldr	r2, [r7, #16]
 800ea52:	69bb      	ldr	r3, [r7, #24]
 800ea54:	441a      	add	r2, r3
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ea5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea5c:	2b1f      	cmp	r3, #31
 800ea5e:	d801      	bhi.n	800ea64 <create_name+0xcc>
 800ea60:	2304      	movs	r3, #4
 800ea62:	e000      	b.n	800ea66 <create_name+0xce>
 800ea64:	2300      	movs	r3, #0
 800ea66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ea6a:	e011      	b.n	800ea90 <create_name+0xf8>
		w = lfn[di - 1];
 800ea6c:	697b      	ldr	r3, [r7, #20]
 800ea6e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ea72:	3b01      	subs	r3, #1
 800ea74:	005b      	lsls	r3, r3, #1
 800ea76:	68fa      	ldr	r2, [r7, #12]
 800ea78:	4413      	add	r3, r2
 800ea7a:	881b      	ldrh	r3, [r3, #0]
 800ea7c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800ea7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea80:	2b20      	cmp	r3, #32
 800ea82:	d002      	beq.n	800ea8a <create_name+0xf2>
 800ea84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea86:	2b2e      	cmp	r3, #46	; 0x2e
 800ea88:	d106      	bne.n	800ea98 <create_name+0x100>
		di--;
 800ea8a:	697b      	ldr	r3, [r7, #20]
 800ea8c:	3b01      	subs	r3, #1
 800ea8e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ea90:	697b      	ldr	r3, [r7, #20]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d1ea      	bne.n	800ea6c <create_name+0xd4>
 800ea96:	e000      	b.n	800ea9a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ea98:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ea9a:	697b      	ldr	r3, [r7, #20]
 800ea9c:	005b      	lsls	r3, r3, #1
 800ea9e:	68fa      	ldr	r2, [r7, #12]
 800eaa0:	4413      	add	r3, r2
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800eaa6:	697b      	ldr	r3, [r7, #20]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d101      	bne.n	800eab0 <create_name+0x118>
 800eaac:	2306      	movs	r3, #6
 800eaae:	e127      	b.n	800ed00 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	3340      	adds	r3, #64	; 0x40
 800eab4:	220b      	movs	r2, #11
 800eab6:	2120      	movs	r1, #32
 800eab8:	4618      	mov	r0, r3
 800eaba:	f7fd fdc5 	bl	800c648 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800eabe:	2300      	movs	r3, #0
 800eac0:	61bb      	str	r3, [r7, #24]
 800eac2:	e002      	b.n	800eaca <create_name+0x132>
 800eac4:	69bb      	ldr	r3, [r7, #24]
 800eac6:	3301      	adds	r3, #1
 800eac8:	61bb      	str	r3, [r7, #24]
 800eaca:	69bb      	ldr	r3, [r7, #24]
 800eacc:	005b      	lsls	r3, r3, #1
 800eace:	68fa      	ldr	r2, [r7, #12]
 800ead0:	4413      	add	r3, r2
 800ead2:	881b      	ldrh	r3, [r3, #0]
 800ead4:	2b20      	cmp	r3, #32
 800ead6:	d0f5      	beq.n	800eac4 <create_name+0x12c>
 800ead8:	69bb      	ldr	r3, [r7, #24]
 800eada:	005b      	lsls	r3, r3, #1
 800eadc:	68fa      	ldr	r2, [r7, #12]
 800eade:	4413      	add	r3, r2
 800eae0:	881b      	ldrh	r3, [r3, #0]
 800eae2:	2b2e      	cmp	r3, #46	; 0x2e
 800eae4:	d0ee      	beq.n	800eac4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800eae6:	69bb      	ldr	r3, [r7, #24]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d009      	beq.n	800eb00 <create_name+0x168>
 800eaec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eaf0:	f043 0303 	orr.w	r3, r3, #3
 800eaf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800eaf8:	e002      	b.n	800eb00 <create_name+0x168>
 800eafa:	697b      	ldr	r3, [r7, #20]
 800eafc:	3b01      	subs	r3, #1
 800eafe:	617b      	str	r3, [r7, #20]
 800eb00:	697b      	ldr	r3, [r7, #20]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d009      	beq.n	800eb1a <create_name+0x182>
 800eb06:	697b      	ldr	r3, [r7, #20]
 800eb08:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800eb0c:	3b01      	subs	r3, #1
 800eb0e:	005b      	lsls	r3, r3, #1
 800eb10:	68fa      	ldr	r2, [r7, #12]
 800eb12:	4413      	add	r3, r2
 800eb14:	881b      	ldrh	r3, [r3, #0]
 800eb16:	2b2e      	cmp	r3, #46	; 0x2e
 800eb18:	d1ef      	bne.n	800eafa <create_name+0x162>

	i = b = 0; ni = 8;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800eb20:	2300      	movs	r3, #0
 800eb22:	623b      	str	r3, [r7, #32]
 800eb24:	2308      	movs	r3, #8
 800eb26:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800eb28:	69bb      	ldr	r3, [r7, #24]
 800eb2a:	1c5a      	adds	r2, r3, #1
 800eb2c:	61ba      	str	r2, [r7, #24]
 800eb2e:	005b      	lsls	r3, r3, #1
 800eb30:	68fa      	ldr	r2, [r7, #12]
 800eb32:	4413      	add	r3, r2
 800eb34:	881b      	ldrh	r3, [r3, #0]
 800eb36:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800eb38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	f000 8090 	beq.w	800ec60 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800eb40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb42:	2b20      	cmp	r3, #32
 800eb44:	d006      	beq.n	800eb54 <create_name+0x1bc>
 800eb46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb48:	2b2e      	cmp	r3, #46	; 0x2e
 800eb4a:	d10a      	bne.n	800eb62 <create_name+0x1ca>
 800eb4c:	69ba      	ldr	r2, [r7, #24]
 800eb4e:	697b      	ldr	r3, [r7, #20]
 800eb50:	429a      	cmp	r2, r3
 800eb52:	d006      	beq.n	800eb62 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800eb54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb58:	f043 0303 	orr.w	r3, r3, #3
 800eb5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eb60:	e07d      	b.n	800ec5e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800eb62:	6a3a      	ldr	r2, [r7, #32]
 800eb64:	69fb      	ldr	r3, [r7, #28]
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d203      	bcs.n	800eb72 <create_name+0x1da>
 800eb6a:	69ba      	ldr	r2, [r7, #24]
 800eb6c:	697b      	ldr	r3, [r7, #20]
 800eb6e:	429a      	cmp	r2, r3
 800eb70:	d123      	bne.n	800ebba <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800eb72:	69fb      	ldr	r3, [r7, #28]
 800eb74:	2b0b      	cmp	r3, #11
 800eb76:	d106      	bne.n	800eb86 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800eb78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb7c:	f043 0303 	orr.w	r3, r3, #3
 800eb80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eb84:	e075      	b.n	800ec72 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800eb86:	69ba      	ldr	r2, [r7, #24]
 800eb88:	697b      	ldr	r3, [r7, #20]
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	d005      	beq.n	800eb9a <create_name+0x202>
 800eb8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb92:	f043 0303 	orr.w	r3, r3, #3
 800eb96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800eb9a:	69ba      	ldr	r2, [r7, #24]
 800eb9c:	697b      	ldr	r3, [r7, #20]
 800eb9e:	429a      	cmp	r2, r3
 800eba0:	d866      	bhi.n	800ec70 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800eba2:	697b      	ldr	r3, [r7, #20]
 800eba4:	61bb      	str	r3, [r7, #24]
 800eba6:	2308      	movs	r3, #8
 800eba8:	623b      	str	r3, [r7, #32]
 800ebaa:	230b      	movs	r3, #11
 800ebac:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ebae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ebb2:	009b      	lsls	r3, r3, #2
 800ebb4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ebb8:	e051      	b.n	800ec5e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ebba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebbc:	2b7f      	cmp	r3, #127	; 0x7f
 800ebbe:	d914      	bls.n	800ebea <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ebc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebc2:	2100      	movs	r1, #0
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f002 f8b1 	bl	8010d2c <ff_convert>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ebce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d004      	beq.n	800ebde <create_name+0x246>
 800ebd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebd6:	3b80      	subs	r3, #128	; 0x80
 800ebd8:	4a23      	ldr	r2, [pc, #140]	; (800ec68 <create_name+0x2d0>)
 800ebda:	5cd3      	ldrb	r3, [r2, r3]
 800ebdc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800ebde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ebe2:	f043 0302 	orr.w	r3, r3, #2
 800ebe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ebea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d007      	beq.n	800ec00 <create_name+0x268>
 800ebf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebf2:	4619      	mov	r1, r3
 800ebf4:	481d      	ldr	r0, [pc, #116]	; (800ec6c <create_name+0x2d4>)
 800ebf6:	f7fd fd69 	bl	800c6cc <chk_chr>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d008      	beq.n	800ec12 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ec00:	235f      	movs	r3, #95	; 0x5f
 800ec02:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ec04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec08:	f043 0303 	orr.w	r3, r3, #3
 800ec0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec10:	e01b      	b.n	800ec4a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ec12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec14:	2b40      	cmp	r3, #64	; 0x40
 800ec16:	d909      	bls.n	800ec2c <create_name+0x294>
 800ec18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec1a:	2b5a      	cmp	r3, #90	; 0x5a
 800ec1c:	d806      	bhi.n	800ec2c <create_name+0x294>
					b |= 2;
 800ec1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ec22:	f043 0302 	orr.w	r3, r3, #2
 800ec26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ec2a:	e00e      	b.n	800ec4a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ec2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec2e:	2b60      	cmp	r3, #96	; 0x60
 800ec30:	d90b      	bls.n	800ec4a <create_name+0x2b2>
 800ec32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec34:	2b7a      	cmp	r3, #122	; 0x7a
 800ec36:	d808      	bhi.n	800ec4a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800ec38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ec3c:	f043 0301 	orr.w	r3, r3, #1
 800ec40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ec44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec46:	3b20      	subs	r3, #32
 800ec48:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ec4a:	6a3b      	ldr	r3, [r7, #32]
 800ec4c:	1c5a      	adds	r2, r3, #1
 800ec4e:	623a      	str	r2, [r7, #32]
 800ec50:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ec52:	b2d1      	uxtb	r1, r2
 800ec54:	687a      	ldr	r2, [r7, #4]
 800ec56:	4413      	add	r3, r2
 800ec58:	460a      	mov	r2, r1
 800ec5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800ec5e:	e763      	b.n	800eb28 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800ec60:	bf00      	nop
 800ec62:	e006      	b.n	800ec72 <create_name+0x2da>
 800ec64:	080167d8 	.word	0x080167d8
 800ec68:	08016860 	.word	0x08016860
 800ec6c:	080167e4 	.word	0x080167e4
			if (si > di) break;			/* No extension */
 800ec70:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ec78:	2be5      	cmp	r3, #229	; 0xe5
 800ec7a:	d103      	bne.n	800ec84 <create_name+0x2ec>
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2205      	movs	r2, #5
 800ec80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800ec84:	69fb      	ldr	r3, [r7, #28]
 800ec86:	2b08      	cmp	r3, #8
 800ec88:	d104      	bne.n	800ec94 <create_name+0x2fc>
 800ec8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ec8e:	009b      	lsls	r3, r3, #2
 800ec90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ec94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ec98:	f003 030c 	and.w	r3, r3, #12
 800ec9c:	2b0c      	cmp	r3, #12
 800ec9e:	d005      	beq.n	800ecac <create_name+0x314>
 800eca0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eca4:	f003 0303 	and.w	r3, r3, #3
 800eca8:	2b03      	cmp	r3, #3
 800ecaa:	d105      	bne.n	800ecb8 <create_name+0x320>
 800ecac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecb0:	f043 0302 	orr.w	r3, r3, #2
 800ecb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ecb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecbc:	f003 0302 	and.w	r3, r3, #2
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d117      	bne.n	800ecf4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ecc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ecc8:	f003 0303 	and.w	r3, r3, #3
 800eccc:	2b01      	cmp	r3, #1
 800ecce:	d105      	bne.n	800ecdc <create_name+0x344>
 800ecd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecd4:	f043 0310 	orr.w	r3, r3, #16
 800ecd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ecdc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ece0:	f003 030c 	and.w	r3, r3, #12
 800ece4:	2b04      	cmp	r3, #4
 800ece6:	d105      	bne.n	800ecf4 <create_name+0x35c>
 800ece8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecec:	f043 0308 	orr.w	r3, r3, #8
 800ecf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ecfa:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800ecfe:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ed00:	4618      	mov	r0, r3
 800ed02:	3728      	adds	r7, #40	; 0x28
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}

0800ed08 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b086      	sub	sp, #24
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
 800ed10:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ed16:	693b      	ldr	r3, [r7, #16]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ed1c:	e002      	b.n	800ed24 <follow_path+0x1c>
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	3301      	adds	r3, #1
 800ed22:	603b      	str	r3, [r7, #0]
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	781b      	ldrb	r3, [r3, #0]
 800ed28:	2b2f      	cmp	r3, #47	; 0x2f
 800ed2a:	d0f8      	beq.n	800ed1e <follow_path+0x16>
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	781b      	ldrb	r3, [r3, #0]
 800ed30:	2b5c      	cmp	r3, #92	; 0x5c
 800ed32:	d0f4      	beq.n	800ed1e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	2200      	movs	r2, #0
 800ed38:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800ed3a:	693b      	ldr	r3, [r7, #16]
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ed40:	683b      	ldr	r3, [r7, #0]
 800ed42:	781b      	ldrb	r3, [r3, #0]
 800ed44:	2b1f      	cmp	r3, #31
 800ed46:	d80a      	bhi.n	800ed5e <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2280      	movs	r2, #128	; 0x80
 800ed4c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800ed50:	2100      	movs	r1, #0
 800ed52:	6878      	ldr	r0, [r7, #4]
 800ed54:	f7fe fc8b 	bl	800d66e <dir_sdi>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	75fb      	strb	r3, [r7, #23]
 800ed5c:	e078      	b.n	800ee50 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ed5e:	463b      	mov	r3, r7
 800ed60:	4619      	mov	r1, r3
 800ed62:	6878      	ldr	r0, [r7, #4]
 800ed64:	f7ff fe18 	bl	800e998 <create_name>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ed6c:	7dfb      	ldrb	r3, [r7, #23]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d169      	bne.n	800ee46 <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f7ff fb41 	bl	800e3fa <dir_find>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800ed82:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ed84:	7dfb      	ldrb	r3, [r7, #23]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d00a      	beq.n	800eda0 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ed8a:	7dfb      	ldrb	r3, [r7, #23]
 800ed8c:	2b04      	cmp	r3, #4
 800ed8e:	d15c      	bne.n	800ee4a <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ed90:	7afb      	ldrb	r3, [r7, #11]
 800ed92:	f003 0304 	and.w	r3, r3, #4
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d157      	bne.n	800ee4a <follow_path+0x142>
 800ed9a:	2305      	movs	r3, #5
 800ed9c:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ed9e:	e054      	b.n	800ee4a <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800eda0:	7afb      	ldrb	r3, [r7, #11]
 800eda2:	f003 0304 	and.w	r3, r3, #4
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d151      	bne.n	800ee4e <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800edaa:	693b      	ldr	r3, [r7, #16]
 800edac:	799b      	ldrb	r3, [r3, #6]
 800edae:	f003 0310 	and.w	r3, r3, #16
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d102      	bne.n	800edbc <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800edb6:	2305      	movs	r3, #5
 800edb8:	75fb      	strb	r3, [r7, #23]
 800edba:	e049      	b.n	800ee50 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	781b      	ldrb	r3, [r3, #0]
 800edc0:	2b04      	cmp	r3, #4
 800edc2:	d130      	bne.n	800ee26 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	689a      	ldr	r2, [r3, #8]
 800edc8:	693b      	ldr	r3, [r7, #16]
 800edca:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800edcc:	693b      	ldr	r3, [r7, #16]
 800edce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800edd2:	4613      	mov	r3, r2
 800edd4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800edd8:	693a      	ldr	r2, [r7, #16]
 800edda:	79d2      	ldrb	r2, [r2, #7]
 800eddc:	431a      	orrs	r2, r3
 800edde:	693b      	ldr	r3, [r7, #16]
 800ede0:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ede6:	693b      	ldr	r3, [r7, #16]
 800ede8:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	691b      	ldr	r3, [r3, #16]
 800edee:	3334      	adds	r3, #52	; 0x34
 800edf0:	4618      	mov	r0, r3
 800edf2:	f7fd fa3b 	bl	800c26c <ld_dword>
 800edf6:	4602      	mov	r2, r0
 800edf8:	693b      	ldr	r3, [r7, #16]
 800edfa:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	691b      	ldr	r3, [r3, #16]
 800ee00:	3321      	adds	r3, #33	; 0x21
 800ee02:	781b      	ldrb	r3, [r3, #0]
 800ee04:	f003 0302 	and.w	r3, r3, #2
 800ee08:	b2da      	uxtb	r2, r3
 800ee0a:	693b      	ldr	r3, [r7, #16]
 800ee0c:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	691b      	ldr	r3, [r3, #16]
 800ee12:	3338      	adds	r3, #56	; 0x38
 800ee14:	4618      	mov	r0, r3
 800ee16:	f7fd fa4c 	bl	800c2b2 <ld_qword>
 800ee1a:	4602      	mov	r2, r0
 800ee1c:	460b      	mov	r3, r1
 800ee1e:	6939      	ldr	r1, [r7, #16]
 800ee20:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800ee24:	e79b      	b.n	800ed5e <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee34:	4413      	add	r3, r2
 800ee36:	4619      	mov	r1, r3
 800ee38:	68f8      	ldr	r0, [r7, #12]
 800ee3a:	f7fe fdcf 	bl	800d9dc <ld_clust>
 800ee3e:	4602      	mov	r2, r0
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ee44:	e78b      	b.n	800ed5e <follow_path+0x56>
			if (res != FR_OK) break;
 800ee46:	bf00      	nop
 800ee48:	e002      	b.n	800ee50 <follow_path+0x148>
				break;
 800ee4a:	bf00      	nop
 800ee4c:	e000      	b.n	800ee50 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ee4e:	bf00      	nop
			}
		}
	}

	return res;
 800ee50:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee52:	4618      	mov	r0, r3
 800ee54:	3718      	adds	r7, #24
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}

0800ee5a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ee5a:	b480      	push	{r7}
 800ee5c:	b087      	sub	sp, #28
 800ee5e:	af00      	add	r7, sp, #0
 800ee60:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ee62:	f04f 33ff 	mov.w	r3, #4294967295
 800ee66:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d031      	beq.n	800eed4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	617b      	str	r3, [r7, #20]
 800ee76:	e002      	b.n	800ee7e <get_ldnumber+0x24>
 800ee78:	697b      	ldr	r3, [r7, #20]
 800ee7a:	3301      	adds	r3, #1
 800ee7c:	617b      	str	r3, [r7, #20]
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	781b      	ldrb	r3, [r3, #0]
 800ee82:	2b1f      	cmp	r3, #31
 800ee84:	d903      	bls.n	800ee8e <get_ldnumber+0x34>
 800ee86:	697b      	ldr	r3, [r7, #20]
 800ee88:	781b      	ldrb	r3, [r3, #0]
 800ee8a:	2b3a      	cmp	r3, #58	; 0x3a
 800ee8c:	d1f4      	bne.n	800ee78 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ee8e:	697b      	ldr	r3, [r7, #20]
 800ee90:	781b      	ldrb	r3, [r3, #0]
 800ee92:	2b3a      	cmp	r3, #58	; 0x3a
 800ee94:	d11c      	bne.n	800eed0 <get_ldnumber+0x76>
			tp = *path;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	1c5a      	adds	r2, r3, #1
 800eea0:	60fa      	str	r2, [r7, #12]
 800eea2:	781b      	ldrb	r3, [r3, #0]
 800eea4:	3b30      	subs	r3, #48	; 0x30
 800eea6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800eea8:	68bb      	ldr	r3, [r7, #8]
 800eeaa:	2b09      	cmp	r3, #9
 800eeac:	d80e      	bhi.n	800eecc <get_ldnumber+0x72>
 800eeae:	68fa      	ldr	r2, [r7, #12]
 800eeb0:	697b      	ldr	r3, [r7, #20]
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	d10a      	bne.n	800eecc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	2b03      	cmp	r3, #3
 800eeba:	d807      	bhi.n	800eecc <get_ldnumber+0x72>
					vol = (int)i;
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	3301      	adds	r3, #1
 800eec4:	617b      	str	r3, [r7, #20]
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	697a      	ldr	r2, [r7, #20]
 800eeca:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800eecc:	693b      	ldr	r3, [r7, #16]
 800eece:	e002      	b.n	800eed6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800eed0:	2300      	movs	r3, #0
 800eed2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800eed4:	693b      	ldr	r3, [r7, #16]
}
 800eed6:	4618      	mov	r0, r3
 800eed8:	371c      	adds	r7, #28
 800eeda:	46bd      	mov	sp, r7
 800eedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee0:	4770      	bx	lr
	...

0800eee4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b082      	sub	sp, #8
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
 800eeec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2200      	movs	r2, #0
 800eef2:	70da      	strb	r2, [r3, #3]
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f04f 32ff 	mov.w	r2, #4294967295
 800eefa:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800eefc:	6839      	ldr	r1, [r7, #0]
 800eefe:	6878      	ldr	r0, [r7, #4]
 800ef00:	f7fd fdb0 	bl	800ca64 <move_window>
 800ef04:	4603      	mov	r3, r0
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d001      	beq.n	800ef0e <check_fs+0x2a>
 800ef0a:	2304      	movs	r3, #4
 800ef0c:	e044      	b.n	800ef98 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	3338      	adds	r3, #56	; 0x38
 800ef12:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ef16:	4618      	mov	r0, r3
 800ef18:	f7fd f990 	bl	800c23c <ld_word>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	461a      	mov	r2, r3
 800ef20:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d001      	beq.n	800ef2c <check_fs+0x48>
 800ef28:	2303      	movs	r3, #3
 800ef2a:	e035      	b.n	800ef98 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ef32:	2be9      	cmp	r3, #233	; 0xe9
 800ef34:	d009      	beq.n	800ef4a <check_fs+0x66>
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ef3c:	2beb      	cmp	r3, #235	; 0xeb
 800ef3e:	d11e      	bne.n	800ef7e <check_fs+0x9a>
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ef46:	2b90      	cmp	r3, #144	; 0x90
 800ef48:	d119      	bne.n	800ef7e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	3338      	adds	r3, #56	; 0x38
 800ef4e:	3336      	adds	r3, #54	; 0x36
 800ef50:	4618      	mov	r0, r3
 800ef52:	f7fd f98b 	bl	800c26c <ld_dword>
 800ef56:	4603      	mov	r3, r0
 800ef58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ef5c:	4a10      	ldr	r2, [pc, #64]	; (800efa0 <check_fs+0xbc>)
 800ef5e:	4293      	cmp	r3, r2
 800ef60:	d101      	bne.n	800ef66 <check_fs+0x82>
 800ef62:	2300      	movs	r3, #0
 800ef64:	e018      	b.n	800ef98 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	3338      	adds	r3, #56	; 0x38
 800ef6a:	3352      	adds	r3, #82	; 0x52
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f7fd f97d 	bl	800c26c <ld_dword>
 800ef72:	4603      	mov	r3, r0
 800ef74:	4a0b      	ldr	r2, [pc, #44]	; (800efa4 <check_fs+0xc0>)
 800ef76:	4293      	cmp	r3, r2
 800ef78:	d101      	bne.n	800ef7e <check_fs+0x9a>
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	e00c      	b.n	800ef98 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	3338      	adds	r3, #56	; 0x38
 800ef82:	220b      	movs	r2, #11
 800ef84:	4908      	ldr	r1, [pc, #32]	; (800efa8 <check_fs+0xc4>)
 800ef86:	4618      	mov	r0, r3
 800ef88:	f7fd fb79 	bl	800c67e <mem_cmp>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d101      	bne.n	800ef96 <check_fs+0xb2>
 800ef92:	2301      	movs	r3, #1
 800ef94:	e000      	b.n	800ef98 <check_fs+0xb4>
#endif
	return 2;
 800ef96:	2302      	movs	r3, #2
}
 800ef98:	4618      	mov	r0, r3
 800ef9a:	3708      	adds	r7, #8
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd80      	pop	{r7, pc}
 800efa0:	00544146 	.word	0x00544146
 800efa4:	33544146 	.word	0x33544146
 800efa8:	080167ec 	.word	0x080167ec

0800efac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800efac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800efb0:	b09c      	sub	sp, #112	; 0x70
 800efb2:	af00      	add	r7, sp, #0
 800efb4:	61f8      	str	r0, [r7, #28]
 800efb6:	61b9      	str	r1, [r7, #24]
 800efb8:	4613      	mov	r3, r2
 800efba:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800efbc:	69bb      	ldr	r3, [r7, #24]
 800efbe:	2200      	movs	r2, #0
 800efc0:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800efc2:	69f8      	ldr	r0, [r7, #28]
 800efc4:	f7ff ff49 	bl	800ee5a <get_ldnumber>
 800efc8:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800efca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efcc:	2b00      	cmp	r3, #0
 800efce:	da01      	bge.n	800efd4 <find_volume+0x28>
 800efd0:	230b      	movs	r3, #11
 800efd2:	e337      	b.n	800f644 <find_volume+0x698>


	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800efd4:	4a99      	ldr	r2, [pc, #612]	; (800f23c <find_volume+0x290>)
 800efd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800efdc:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800efde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d101      	bne.n	800efe8 <find_volume+0x3c>
 800efe4:	230c      	movs	r3, #12
 800efe6:	e32d      	b.n	800f644 <find_volume+0x698>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800efe8:	69bb      	ldr	r3, [r7, #24]
 800efea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800efec:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800efee:	7dfb      	ldrb	r3, [r7, #23]
 800eff0:	f023 0301 	bic.w	r3, r3, #1
 800eff4:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800eff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eff8:	781b      	ldrb	r3, [r3, #0]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d01a      	beq.n	800f034 <find_volume+0x88>

		stat = disk_status(fs->drv);
 800effe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f000:	785b      	ldrb	r3, [r3, #1]
 800f002:	4618      	mov	r0, r3
 800f004:	f7fd f87c 	bl	800c100 <disk_status>
 800f008:	4603      	mov	r3, r0
 800f00a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f00e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f012:	f003 0301 	and.w	r3, r3, #1
 800f016:	2b00      	cmp	r3, #0
 800f018:	d10c      	bne.n	800f034 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f01a:	7dfb      	ldrb	r3, [r7, #23]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d007      	beq.n	800f030 <find_volume+0x84>
 800f020:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f024:	f003 0304 	and.w	r3, r3, #4
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d001      	beq.n	800f030 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800f02c:	230a      	movs	r3, #10
 800f02e:	e309      	b.n	800f644 <find_volume+0x698>
			}
			return FR_OK;				/* The file system object is valid */
 800f030:	2300      	movs	r3, #0
 800f032:	e307      	b.n	800f644 <find_volume+0x698>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f036:	2200      	movs	r2, #0
 800f038:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f03a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f03c:	b2da      	uxtb	r2, r3
 800f03e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f040:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f044:	785b      	ldrb	r3, [r3, #1]
 800f046:	4618      	mov	r0, r3
 800f048:	f7fd f874 	bl	800c134 <disk_initialize>
 800f04c:	4603      	mov	r3, r0
 800f04e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f052:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f056:	f003 0301 	and.w	r3, r3, #1
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d001      	beq.n	800f062 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f05e:	2303      	movs	r3, #3
 800f060:	e2f0      	b.n	800f644 <find_volume+0x698>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f062:	7dfb      	ldrb	r3, [r7, #23]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d007      	beq.n	800f078 <find_volume+0xcc>
 800f068:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f06c:	f003 0304 	and.w	r3, r3, #4
 800f070:	2b00      	cmp	r3, #0
 800f072:	d001      	beq.n	800f078 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800f074:	230a      	movs	r3, #10
 800f076:	e2e5      	b.n	800f644 <find_volume+0x698>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f078:	2300      	movs	r3, #0
 800f07a:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f07c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f07e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f080:	f7ff ff30 	bl	800eee4 <check_fs>
 800f084:	4603      	mov	r3, r0
 800f086:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f08a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f08e:	2b02      	cmp	r3, #2
 800f090:	d14d      	bne.n	800f12e <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f092:	2300      	movs	r3, #0
 800f094:	65bb      	str	r3, [r7, #88]	; 0x58
 800f096:	e020      	b.n	800f0da <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f09a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f09e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0a0:	011b      	lsls	r3, r3, #4
 800f0a2:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f0a6:	4413      	add	r3, r2
 800f0a8:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f0aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0ac:	3304      	adds	r3, #4
 800f0ae:	781b      	ldrb	r3, [r3, #0]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d006      	beq.n	800f0c2 <find_volume+0x116>
 800f0b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0b6:	3308      	adds	r3, #8
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	f7fd f8d7 	bl	800c26c <ld_dword>
 800f0be:	4602      	mov	r2, r0
 800f0c0:	e000      	b.n	800f0c4 <find_volume+0x118>
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0c6:	009b      	lsls	r3, r3, #2
 800f0c8:	3360      	adds	r3, #96	; 0x60
 800f0ca:	f107 0110 	add.w	r1, r7, #16
 800f0ce:	440b      	add	r3, r1
 800f0d0:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f0d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0d6:	3301      	adds	r3, #1
 800f0d8:	65bb      	str	r3, [r7, #88]	; 0x58
 800f0da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0dc:	2b03      	cmp	r3, #3
 800f0de:	d9db      	bls.n	800f098 <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 800f0e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d002      	beq.n	800f0f0 <find_volume+0x144>
 800f0ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0ec:	3b01      	subs	r3, #1
 800f0ee:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f0f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0f2:	009b      	lsls	r3, r3, #2
 800f0f4:	3360      	adds	r3, #96	; 0x60
 800f0f6:	f107 0210 	add.w	r2, r7, #16
 800f0fa:	4413      	add	r3, r2
 800f0fc:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800f100:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f102:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f104:	2b00      	cmp	r3, #0
 800f106:	d005      	beq.n	800f114 <find_volume+0x168>
 800f108:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f10a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f10c:	f7ff feea 	bl	800eee4 <check_fs>
 800f110:	4603      	mov	r3, r0
 800f112:	e000      	b.n	800f116 <find_volume+0x16a>
 800f114:	2303      	movs	r3, #3
 800f116:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f11a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f11e:	2b01      	cmp	r3, #1
 800f120:	d905      	bls.n	800f12e <find_volume+0x182>
 800f122:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f124:	3301      	adds	r3, #1
 800f126:	65bb      	str	r3, [r7, #88]	; 0x58
 800f128:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f12a:	2b03      	cmp	r3, #3
 800f12c:	d9e0      	bls.n	800f0f0 <find_volume+0x144>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f12e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f132:	2b04      	cmp	r3, #4
 800f134:	d101      	bne.n	800f13a <find_volume+0x18e>
 800f136:	2301      	movs	r3, #1
 800f138:	e284      	b.n	800f644 <find_volume+0x698>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f13a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f13e:	2b01      	cmp	r3, #1
 800f140:	d901      	bls.n	800f146 <find_volume+0x19a>
 800f142:	230d      	movs	r3, #13
 800f144:	e27e      	b.n	800f644 <find_volume+0x698>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800f146:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f14a:	2b01      	cmp	r3, #1
 800f14c:	f040 80fa 	bne.w	800f344 <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800f150:	230b      	movs	r3, #11
 800f152:	65bb      	str	r3, [r7, #88]	; 0x58
 800f154:	e002      	b.n	800f15c <find_volume+0x1b0>
 800f156:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f158:	3301      	adds	r3, #1
 800f15a:	65bb      	str	r3, [r7, #88]	; 0x58
 800f15c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f15e:	2b3f      	cmp	r3, #63	; 0x3f
 800f160:	d806      	bhi.n	800f170 <find_volume+0x1c4>
 800f162:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f164:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f166:	4413      	add	r3, r2
 800f168:	3338      	adds	r3, #56	; 0x38
 800f16a:	781b      	ldrb	r3, [r3, #0]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d0f2      	beq.n	800f156 <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800f170:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f172:	2b3f      	cmp	r3, #63	; 0x3f
 800f174:	d801      	bhi.n	800f17a <find_volume+0x1ce>
 800f176:	230d      	movs	r3, #13
 800f178:	e264      	b.n	800f644 <find_volume+0x698>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800f17a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f17c:	3338      	adds	r3, #56	; 0x38
 800f17e:	3368      	adds	r3, #104	; 0x68
 800f180:	4618      	mov	r0, r3
 800f182:	f7fd f85b 	bl	800c23c <ld_word>
 800f186:	4603      	mov	r3, r0
 800f188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f18c:	d001      	beq.n	800f192 <find_volume+0x1e6>
 800f18e:	230d      	movs	r3, #13
 800f190:	e258      	b.n	800f644 <find_volume+0x698>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800f192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f194:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800f198:	2b09      	cmp	r3, #9
 800f19a:	d001      	beq.n	800f1a0 <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 800f19c:	230d      	movs	r3, #13
 800f19e:	e251      	b.n	800f644 <find_volume+0x698>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800f1a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1a2:	3338      	adds	r3, #56	; 0x38
 800f1a4:	3348      	adds	r3, #72	; 0x48
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f7fd f883 	bl	800c2b2 <ld_qword>
 800f1ac:	4602      	mov	r2, r0
 800f1ae:	460b      	mov	r3, r1
 800f1b0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f1b2:	2000      	movs	r0, #0
 800f1b4:	60b9      	str	r1, [r7, #8]
 800f1b6:	60f8      	str	r0, [r7, #12]
 800f1b8:	68b9      	ldr	r1, [r7, #8]
 800f1ba:	1851      	adds	r1, r2, r1
 800f1bc:	6039      	str	r1, [r7, #0]
 800f1be:	68f9      	ldr	r1, [r7, #12]
 800f1c0:	eb43 0101 	adc.w	r1, r3, r1
 800f1c4:	6079      	str	r1, [r7, #4]
 800f1c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f1ca:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800f1ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f1d2:	2b01      	cmp	r3, #1
 800f1d4:	d301      	bcc.n	800f1da <find_volume+0x22e>
 800f1d6:	230d      	movs	r3, #13
 800f1d8:	e234      	b.n	800f644 <find_volume+0x698>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800f1da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1dc:	3338      	adds	r3, #56	; 0x38
 800f1de:	3354      	adds	r3, #84	; 0x54
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f7fd f843 	bl	800c26c <ld_dword>
 800f1e6:	4602      	mov	r2, r0
 800f1e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1ea:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800f1ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1ee:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 800f1f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1f4:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800f1f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1f8:	789b      	ldrb	r3, [r3, #2]
 800f1fa:	2b01      	cmp	r3, #1
 800f1fc:	d001      	beq.n	800f202 <find_volume+0x256>
 800f1fe:	230d      	movs	r3, #13
 800f200:	e220      	b.n	800f644 <find_volume+0x698>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800f202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f204:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800f208:	461a      	mov	r2, r3
 800f20a:	2301      	movs	r3, #1
 800f20c:	4093      	lsls	r3, r2
 800f20e:	b29a      	uxth	r2, r3
 800f210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f212:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800f214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f216:	895b      	ldrh	r3, [r3, #10]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d101      	bne.n	800f220 <find_volume+0x274>
 800f21c:	230d      	movs	r3, #13
 800f21e:	e211      	b.n	800f644 <find_volume+0x698>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800f220:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f222:	3338      	adds	r3, #56	; 0x38
 800f224:	335c      	adds	r3, #92	; 0x5c
 800f226:	4618      	mov	r0, r3
 800f228:	f7fd f820 	bl	800c26c <ld_dword>
 800f22c:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800f22e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f230:	4a03      	ldr	r2, [pc, #12]	; (800f240 <find_volume+0x294>)
 800f232:	4293      	cmp	r3, r2
 800f234:	d906      	bls.n	800f244 <find_volume+0x298>
 800f236:	230d      	movs	r3, #13
 800f238:	e204      	b.n	800f644 <find_volume+0x698>
 800f23a:	bf00      	nop
 800f23c:	20001d70 	.word	0x20001d70
 800f240:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800f244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f246:	1c9a      	adds	r2, r3, #2
 800f248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f24a:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800f24c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f24e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f250:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800f252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f254:	3338      	adds	r3, #56	; 0x38
 800f256:	3358      	adds	r3, #88	; 0x58
 800f258:	4618      	mov	r0, r3
 800f25a:	f7fd f807 	bl	800c26c <ld_dword>
 800f25e:	4602      	mov	r2, r0
 800f260:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f262:	441a      	add	r2, r3
 800f264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f266:	631a      	str	r2, [r3, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800f268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f26a:	3338      	adds	r3, #56	; 0x38
 800f26c:	3350      	adds	r3, #80	; 0x50
 800f26e:	4618      	mov	r0, r3
 800f270:	f7fc fffc 	bl	800c26c <ld_dword>
 800f274:	4602      	mov	r2, r0
 800f276:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f278:	441a      	add	r2, r3
 800f27a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f27c:	629a      	str	r2, [r3, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800f27e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f282:	2200      	movs	r2, #0
 800f284:	469a      	mov	sl, r3
 800f286:	4693      	mov	fp, r2
 800f288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f28a:	895b      	ldrh	r3, [r3, #10]
 800f28c:	461a      	mov	r2, r3
 800f28e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f290:	fb02 f303 	mul.w	r3, r2, r3
 800f294:	2200      	movs	r2, #0
 800f296:	4698      	mov	r8, r3
 800f298:	4691      	mov	r9, r2
 800f29a:	eb1a 0408 	adds.w	r4, sl, r8
 800f29e:	eb4b 0509 	adc.w	r5, fp, r9
 800f2a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f2a6:	42a2      	cmp	r2, r4
 800f2a8:	41ab      	sbcs	r3, r5
 800f2aa:	d201      	bcs.n	800f2b0 <find_volume+0x304>
 800f2ac:	230d      	movs	r3, #13
 800f2ae:	e1c9      	b.n	800f644 <find_volume+0x698>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800f2b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2b2:	3338      	adds	r3, #56	; 0x38
 800f2b4:	3360      	adds	r3, #96	; 0x60
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	f7fc ffd8 	bl	800c26c <ld_dword>
 800f2bc:	4602      	mov	r2, r0
 800f2be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2c0:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800f2c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2c6:	4619      	mov	r1, r3
 800f2c8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f2ca:	f7fd fc67 	bl	800cb9c <clust2sect>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	4619      	mov	r1, r3
 800f2d2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f2d4:	f7fd fbc6 	bl	800ca64 <move_window>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d001      	beq.n	800f2e2 <find_volume+0x336>
 800f2de:	2301      	movs	r3, #1
 800f2e0:	e1b0      	b.n	800f644 <find_volume+0x698>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	65bb      	str	r3, [r7, #88]	; 0x58
 800f2e6:	e015      	b.n	800f314 <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800f2e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f2ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f2ec:	4413      	add	r3, r2
 800f2ee:	3338      	adds	r3, #56	; 0x38
 800f2f0:	781b      	ldrb	r3, [r3, #0]
 800f2f2:	2b81      	cmp	r3, #129	; 0x81
 800f2f4:	d10b      	bne.n	800f30e <find_volume+0x362>
 800f2f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2f8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f2fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f2fe:	3314      	adds	r3, #20
 800f300:	4413      	add	r3, r2
 800f302:	4618      	mov	r0, r3
 800f304:	f7fc ffb2 	bl	800c26c <ld_dword>
 800f308:	4603      	mov	r3, r0
 800f30a:	2b02      	cmp	r3, #2
 800f30c:	d007      	beq.n	800f31e <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800f30e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f310:	3320      	adds	r3, #32
 800f312:	65bb      	str	r3, [r7, #88]	; 0x58
 800f314:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f316:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f31a:	d3e5      	bcc.n	800f2e8 <find_volume+0x33c>
 800f31c:	e000      	b.n	800f320 <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800f31e:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800f320:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f326:	d101      	bne.n	800f32c <find_volume+0x380>
 800f328:	230d      	movs	r3, #13
 800f32a:	e18b      	b.n	800f644 <find_volume+0x698>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f32c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f32e:	f04f 32ff 	mov.w	r2, #4294967295
 800f332:	619a      	str	r2, [r3, #24]
 800f334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f336:	699a      	ldr	r2, [r3, #24]
 800f338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f33a:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800f33c:	2304      	movs	r3, #4
 800f33e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800f342:	e167      	b.n	800f614 <find_volume+0x668>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f346:	3338      	adds	r3, #56	; 0x38
 800f348:	330b      	adds	r3, #11
 800f34a:	4618      	mov	r0, r3
 800f34c:	f7fc ff76 	bl	800c23c <ld_word>
 800f350:	4603      	mov	r3, r0
 800f352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f356:	d001      	beq.n	800f35c <find_volume+0x3b0>
 800f358:	230d      	movs	r3, #13
 800f35a:	e173      	b.n	800f644 <find_volume+0x698>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f35c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f35e:	3338      	adds	r3, #56	; 0x38
 800f360:	3316      	adds	r3, #22
 800f362:	4618      	mov	r0, r3
 800f364:	f7fc ff6a 	bl	800c23c <ld_word>
 800f368:	4603      	mov	r3, r0
 800f36a:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f36c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d106      	bne.n	800f380 <find_volume+0x3d4>
 800f372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f374:	3338      	adds	r3, #56	; 0x38
 800f376:	3324      	adds	r3, #36	; 0x24
 800f378:	4618      	mov	r0, r3
 800f37a:	f7fc ff77 	bl	800c26c <ld_dword>
 800f37e:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 800f380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f382:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f384:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f388:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f38c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f38e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f392:	789b      	ldrb	r3, [r3, #2]
 800f394:	2b01      	cmp	r3, #1
 800f396:	d005      	beq.n	800f3a4 <find_volume+0x3f8>
 800f398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f39a:	789b      	ldrb	r3, [r3, #2]
 800f39c:	2b02      	cmp	r3, #2
 800f39e:	d001      	beq.n	800f3a4 <find_volume+0x3f8>
 800f3a0:	230d      	movs	r3, #13
 800f3a2:	e14f      	b.n	800f644 <find_volume+0x698>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f3a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3a6:	789b      	ldrb	r3, [r3, #2]
 800f3a8:	461a      	mov	r2, r3
 800f3aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f3ac:	fb02 f303 	mul.w	r3, r2, r3
 800f3b0:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f3b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f3b8:	b29a      	uxth	r2, r3
 800f3ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3bc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f3be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3c0:	895b      	ldrh	r3, [r3, #10]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d008      	beq.n	800f3d8 <find_volume+0x42c>
 800f3c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3c8:	895b      	ldrh	r3, [r3, #10]
 800f3ca:	461a      	mov	r2, r3
 800f3cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3ce:	895b      	ldrh	r3, [r3, #10]
 800f3d0:	3b01      	subs	r3, #1
 800f3d2:	4013      	ands	r3, r2
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d001      	beq.n	800f3dc <find_volume+0x430>
 800f3d8:	230d      	movs	r3, #13
 800f3da:	e133      	b.n	800f644 <find_volume+0x698>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f3dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3de:	3338      	adds	r3, #56	; 0x38
 800f3e0:	3311      	adds	r3, #17
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	f7fc ff2a 	bl	800c23c <ld_word>
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	461a      	mov	r2, r3
 800f3ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3ee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f3f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3f2:	891b      	ldrh	r3, [r3, #8]
 800f3f4:	f003 030f 	and.w	r3, r3, #15
 800f3f8:	b29b      	uxth	r3, r3
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d001      	beq.n	800f402 <find_volume+0x456>
 800f3fe:	230d      	movs	r3, #13
 800f400:	e120      	b.n	800f644 <find_volume+0x698>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f404:	3338      	adds	r3, #56	; 0x38
 800f406:	3313      	adds	r3, #19
 800f408:	4618      	mov	r0, r3
 800f40a:	f7fc ff17 	bl	800c23c <ld_word>
 800f40e:	4603      	mov	r3, r0
 800f410:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f412:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f414:	2b00      	cmp	r3, #0
 800f416:	d106      	bne.n	800f426 <find_volume+0x47a>
 800f418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f41a:	3338      	adds	r3, #56	; 0x38
 800f41c:	3320      	adds	r3, #32
 800f41e:	4618      	mov	r0, r3
 800f420:	f7fc ff24 	bl	800c26c <ld_dword>
 800f424:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f428:	3338      	adds	r3, #56	; 0x38
 800f42a:	330e      	adds	r3, #14
 800f42c:	4618      	mov	r0, r3
 800f42e:	f7fc ff05 	bl	800c23c <ld_word>
 800f432:	4603      	mov	r3, r0
 800f434:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f438:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d101      	bne.n	800f444 <find_volume+0x498>
 800f440:	230d      	movs	r3, #13
 800f442:	e0ff      	b.n	800f644 <find_volume+0x698>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f444:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f448:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f44a:	4413      	add	r3, r2
 800f44c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f44e:	8912      	ldrh	r2, [r2, #8]
 800f450:	0912      	lsrs	r2, r2, #4
 800f452:	b292      	uxth	r2, r2
 800f454:	4413      	add	r3, r2
 800f456:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f458:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f45a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f45c:	429a      	cmp	r2, r3
 800f45e:	d201      	bcs.n	800f464 <find_volume+0x4b8>
 800f460:	230d      	movs	r3, #13
 800f462:	e0ef      	b.n	800f644 <find_volume+0x698>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f464:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f468:	1ad3      	subs	r3, r2, r3
 800f46a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f46c:	8952      	ldrh	r2, [r2, #10]
 800f46e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f472:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f476:	2b00      	cmp	r3, #0
 800f478:	d101      	bne.n	800f47e <find_volume+0x4d2>
 800f47a:	230d      	movs	r3, #13
 800f47c:	e0e2      	b.n	800f644 <find_volume+0x698>
		fmt = FS_FAT32;
 800f47e:	2303      	movs	r3, #3
 800f480:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f486:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f48a:	4293      	cmp	r3, r2
 800f48c:	d802      	bhi.n	800f494 <find_volume+0x4e8>
 800f48e:	2302      	movs	r3, #2
 800f490:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f496:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f49a:	4293      	cmp	r3, r2
 800f49c:	d802      	bhi.n	800f4a4 <find_volume+0x4f8>
 800f49e:	2301      	movs	r3, #1
 800f4a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f4a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4a6:	1c9a      	adds	r2, r3, #2
 800f4a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4aa:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800f4ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f4b0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f4b2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f4b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f4b8:	441a      	add	r2, r3
 800f4ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4bc:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800f4be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f4c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4c2:	441a      	add	r2, r3
 800f4c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4c6:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800f4c8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f4cc:	2b03      	cmp	r3, #3
 800f4ce:	d11e      	bne.n	800f50e <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f4d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4d2:	3338      	adds	r3, #56	; 0x38
 800f4d4:	332a      	adds	r3, #42	; 0x2a
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f7fc feb0 	bl	800c23c <ld_word>
 800f4dc:	4603      	mov	r3, r0
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d001      	beq.n	800f4e6 <find_volume+0x53a>
 800f4e2:	230d      	movs	r3, #13
 800f4e4:	e0ae      	b.n	800f644 <find_volume+0x698>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f4e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4e8:	891b      	ldrh	r3, [r3, #8]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d001      	beq.n	800f4f2 <find_volume+0x546>
 800f4ee:	230d      	movs	r3, #13
 800f4f0:	e0a8      	b.n	800f644 <find_volume+0x698>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f4f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4f4:	3338      	adds	r3, #56	; 0x38
 800f4f6:	332c      	adds	r3, #44	; 0x2c
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f7fc feb7 	bl	800c26c <ld_dword>
 800f4fe:	4602      	mov	r2, r0
 800f500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f502:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f504:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f506:	69db      	ldr	r3, [r3, #28]
 800f508:	009b      	lsls	r3, r3, #2
 800f50a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f50c:	e01f      	b.n	800f54e <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f50e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f510:	891b      	ldrh	r3, [r3, #8]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d101      	bne.n	800f51a <find_volume+0x56e>
 800f516:	230d      	movs	r3, #13
 800f518:	e094      	b.n	800f644 <find_volume+0x698>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f51a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f51c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f51e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f520:	441a      	add	r2, r3
 800f522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f524:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f526:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f52a:	2b02      	cmp	r3, #2
 800f52c:	d103      	bne.n	800f536 <find_volume+0x58a>
 800f52e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f530:	69db      	ldr	r3, [r3, #28]
 800f532:	005b      	lsls	r3, r3, #1
 800f534:	e00a      	b.n	800f54c <find_volume+0x5a0>
 800f536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f538:	69da      	ldr	r2, [r3, #28]
 800f53a:	4613      	mov	r3, r2
 800f53c:	005b      	lsls	r3, r3, #1
 800f53e:	4413      	add	r3, r2
 800f540:	085a      	lsrs	r2, r3, #1
 800f542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f544:	69db      	ldr	r3, [r3, #28]
 800f546:	f003 0301 	and.w	r3, r3, #1
 800f54a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f54c:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f54e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f550:	6a1a      	ldr	r2, [r3, #32]
 800f552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f554:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800f558:	0a5b      	lsrs	r3, r3, #9
 800f55a:	429a      	cmp	r2, r3
 800f55c:	d201      	bcs.n	800f562 <find_volume+0x5b6>
 800f55e:	230d      	movs	r3, #13
 800f560:	e070      	b.n	800f644 <find_volume+0x698>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f564:	f04f 32ff 	mov.w	r2, #4294967295
 800f568:	619a      	str	r2, [r3, #24]
 800f56a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f56c:	699a      	ldr	r2, [r3, #24]
 800f56e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f570:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800f572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f574:	2280      	movs	r2, #128	; 0x80
 800f576:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f578:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f57c:	2b03      	cmp	r3, #3
 800f57e:	d149      	bne.n	800f614 <find_volume+0x668>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f582:	3338      	adds	r3, #56	; 0x38
 800f584:	3330      	adds	r3, #48	; 0x30
 800f586:	4618      	mov	r0, r3
 800f588:	f7fc fe58 	bl	800c23c <ld_word>
 800f58c:	4603      	mov	r3, r0
 800f58e:	2b01      	cmp	r3, #1
 800f590:	d140      	bne.n	800f614 <find_volume+0x668>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f592:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f594:	3301      	adds	r3, #1
 800f596:	4619      	mov	r1, r3
 800f598:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f59a:	f7fd fa63 	bl	800ca64 <move_window>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d137      	bne.n	800f614 <find_volume+0x668>
		{
			fs->fsi_flag = 0;
 800f5a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f5aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5ac:	3338      	adds	r3, #56	; 0x38
 800f5ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f7fc fe42 	bl	800c23c <ld_word>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	461a      	mov	r2, r3
 800f5bc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f5c0:	429a      	cmp	r2, r3
 800f5c2:	d127      	bne.n	800f614 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f5c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5c6:	3338      	adds	r3, #56	; 0x38
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	f7fc fe4f 	bl	800c26c <ld_dword>
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	4a1f      	ldr	r2, [pc, #124]	; (800f650 <find_volume+0x6a4>)
 800f5d2:	4293      	cmp	r3, r2
 800f5d4:	d11e      	bne.n	800f614 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f5d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5d8:	3338      	adds	r3, #56	; 0x38
 800f5da:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f7fc fe44 	bl	800c26c <ld_dword>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	4a1b      	ldr	r2, [pc, #108]	; (800f654 <find_volume+0x6a8>)
 800f5e8:	4293      	cmp	r3, r2
 800f5ea:	d113      	bne.n	800f614 <find_volume+0x668>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f5ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5ee:	3338      	adds	r3, #56	; 0x38
 800f5f0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	f7fc fe39 	bl	800c26c <ld_dword>
 800f5fa:	4602      	mov	r2, r0
 800f5fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5fe:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f600:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f602:	3338      	adds	r3, #56	; 0x38
 800f604:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f608:	4618      	mov	r0, r3
 800f60a:	f7fc fe2f 	bl	800c26c <ld_dword>
 800f60e:	4602      	mov	r2, r0
 800f610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f612:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f616:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800f61a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f61c:	4b0e      	ldr	r3, [pc, #56]	; (800f658 <find_volume+0x6ac>)
 800f61e:	881b      	ldrh	r3, [r3, #0]
 800f620:	3301      	adds	r3, #1
 800f622:	b29a      	uxth	r2, r3
 800f624:	4b0c      	ldr	r3, [pc, #48]	; (800f658 <find_volume+0x6ac>)
 800f626:	801a      	strh	r2, [r3, #0]
 800f628:	4b0b      	ldr	r3, [pc, #44]	; (800f658 <find_volume+0x6ac>)
 800f62a:	881a      	ldrh	r2, [r3, #0]
 800f62c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f62e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f630:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f632:	4a0a      	ldr	r2, [pc, #40]	; (800f65c <find_volume+0x6b0>)
 800f634:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800f636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f638:	4a09      	ldr	r2, [pc, #36]	; (800f660 <find_volume+0x6b4>)
 800f63a:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f63c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f63e:	f7fd f9a9 	bl	800c994 <clear_lock>
#endif
	return FR_OK;
 800f642:	2300      	movs	r3, #0
}
 800f644:	4618      	mov	r0, r3
 800f646:	3770      	adds	r7, #112	; 0x70
 800f648:	46bd      	mov	sp, r7
 800f64a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f64e:	bf00      	nop
 800f650:	41615252 	.word	0x41615252
 800f654:	61417272 	.word	0x61417272
 800f658:	20001d80 	.word	0x20001d80
 800f65c:	20002004 	.word	0x20002004
 800f660:	20001da4 	.word	0x20001da4

0800f664 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b084      	sub	sp, #16
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
 800f66c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f66e:	2309      	movs	r3, #9
 800f670:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d01c      	beq.n	800f6b2 <validate+0x4e>
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d018      	beq.n	800f6b2 <validate+0x4e>
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	781b      	ldrb	r3, [r3, #0]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d013      	beq.n	800f6b2 <validate+0x4e>
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	889a      	ldrh	r2, [r3, #4]
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	88db      	ldrh	r3, [r3, #6]
 800f694:	429a      	cmp	r2, r3
 800f696:	d10c      	bne.n	800f6b2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	785b      	ldrb	r3, [r3, #1]
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f7fc fd2e 	bl	800c100 <disk_status>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	f003 0301 	and.w	r3, r3, #1
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d101      	bne.n	800f6b2 <validate+0x4e>
			res = FR_OK;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f6b2:	7bfb      	ldrb	r3, [r7, #15]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d102      	bne.n	800f6be <validate+0x5a>
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	e000      	b.n	800f6c0 <validate+0x5c>
 800f6be:	2300      	movs	r3, #0
 800f6c0:	683a      	ldr	r2, [r7, #0]
 800f6c2:	6013      	str	r3, [r2, #0]
	return res;
 800f6c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	3710      	adds	r7, #16
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bd80      	pop	{r7, pc}
	...

0800f6d0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b088      	sub	sp, #32
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	60f8      	str	r0, [r7, #12]
 800f6d8:	60b9      	str	r1, [r7, #8]
 800f6da:	4613      	mov	r3, r2
 800f6dc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f6de:	68bb      	ldr	r3, [r7, #8]
 800f6e0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f6e2:	f107 0310 	add.w	r3, r7, #16
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	f7ff fbb7 	bl	800ee5a <get_ldnumber>
 800f6ec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f6ee:	69fb      	ldr	r3, [r7, #28]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	da01      	bge.n	800f6f8 <f_mount+0x28>
 800f6f4:	230b      	movs	r3, #11
 800f6f6:	e02b      	b.n	800f750 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f6f8:	4a17      	ldr	r2, [pc, #92]	; (800f758 <f_mount+0x88>)
 800f6fa:	69fb      	ldr	r3, [r7, #28]
 800f6fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f700:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f702:	69bb      	ldr	r3, [r7, #24]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d005      	beq.n	800f714 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f708:	69b8      	ldr	r0, [r7, #24]
 800f70a:	f7fd f943 	bl	800c994 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f70e:	69bb      	ldr	r3, [r7, #24]
 800f710:	2200      	movs	r2, #0
 800f712:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d002      	beq.n	800f720 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	2200      	movs	r2, #0
 800f71e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f720:	68fa      	ldr	r2, [r7, #12]
 800f722:	490d      	ldr	r1, [pc, #52]	; (800f758 <f_mount+0x88>)
 800f724:	69fb      	ldr	r3, [r7, #28]
 800f726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d002      	beq.n	800f736 <f_mount+0x66>
 800f730:	79fb      	ldrb	r3, [r7, #7]
 800f732:	2b01      	cmp	r3, #1
 800f734:	d001      	beq.n	800f73a <f_mount+0x6a>
 800f736:	2300      	movs	r3, #0
 800f738:	e00a      	b.n	800f750 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f73a:	f107 010c 	add.w	r1, r7, #12
 800f73e:	f107 0308 	add.w	r3, r7, #8
 800f742:	2200      	movs	r2, #0
 800f744:	4618      	mov	r0, r3
 800f746:	f7ff fc31 	bl	800efac <find_volume>
 800f74a:	4603      	mov	r3, r0
 800f74c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f74e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f750:	4618      	mov	r0, r3
 800f752:	3720      	adds	r7, #32
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}
 800f758:	20001d70 	.word	0x20001d70

0800f75c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f75c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f760:	b0a6      	sub	sp, #152	; 0x98
 800f762:	af00      	add	r7, sp, #0
 800f764:	61f8      	str	r0, [r7, #28]
 800f766:	61b9      	str	r1, [r7, #24]
 800f768:	4613      	mov	r3, r2
 800f76a:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f76c:	69fb      	ldr	r3, [r7, #28]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d101      	bne.n	800f776 <f_open+0x1a>
 800f772:	2309      	movs	r3, #9
 800f774:	e2ae      	b.n	800fcd4 <f_open+0x578>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f776:	7dfb      	ldrb	r3, [r7, #23]
 800f778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f77c:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 800f77e:	7dfa      	ldrb	r2, [r7, #23]
 800f780:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800f784:	f107 0318 	add.w	r3, r7, #24
 800f788:	4618      	mov	r0, r3
 800f78a:	f7ff fc0f 	bl	800efac <find_volume>
 800f78e:	4603      	mov	r3, r0
 800f790:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	if (res == FR_OK) {
 800f794:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f798:	2b00      	cmp	r3, #0
 800f79a:	f040 8292 	bne.w	800fcc2 <f_open+0x566>
		dj.obj.fs = fs;
 800f79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7a0:	62bb      	str	r3, [r7, #40]	; 0x28
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f7a2:	69ba      	ldr	r2, [r7, #24]
 800f7a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f7a8:	4611      	mov	r1, r2
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f7ff faac 	bl	800ed08 <follow_path>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f7b6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d11a      	bne.n	800f7f4 <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f7be:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800f7c2:	b25b      	sxtb	r3, r3
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	da03      	bge.n	800f7d0 <f_open+0x74>
				res = FR_INVALID_NAME;
 800f7c8:	2306      	movs	r3, #6
 800f7ca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800f7ce:	e011      	b.n	800f7f4 <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f7d0:	7dfb      	ldrb	r3, [r7, #23]
 800f7d2:	f023 0301 	bic.w	r3, r3, #1
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	bf14      	ite	ne
 800f7da:	2301      	movne	r3, #1
 800f7dc:	2300      	moveq	r3, #0
 800f7de:	b2db      	uxtb	r3, r3
 800f7e0:	461a      	mov	r2, r3
 800f7e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f7e6:	4611      	mov	r1, r2
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f7fc ff8b 	bl	800c704 <chk_lock>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f7f4:	7dfb      	ldrb	r3, [r7, #23]
 800f7f6:	f003 031c 	and.w	r3, r3, #28
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	f000 8115 	beq.w	800fa2a <f_open+0x2ce>
			if (res != FR_OK) {					/* No file, create new */
 800f800:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f804:	2b00      	cmp	r3, #0
 800f806:	d017      	beq.n	800f838 <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f808:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f80c:	2b04      	cmp	r3, #4
 800f80e:	d10e      	bne.n	800f82e <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f810:	f7fc ffd4 	bl	800c7bc <enq_lock>
 800f814:	4603      	mov	r3, r0
 800f816:	2b00      	cmp	r3, #0
 800f818:	d006      	beq.n	800f828 <f_open+0xcc>
 800f81a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f81e:	4618      	mov	r0, r3
 800f820:	f7fe ff14 	bl	800e64c <dir_register>
 800f824:	4603      	mov	r3, r0
 800f826:	e000      	b.n	800f82a <f_open+0xce>
 800f828:	2312      	movs	r3, #18
 800f82a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f82e:	7dfb      	ldrb	r3, [r7, #23]
 800f830:	f043 0308 	orr.w	r3, r3, #8
 800f834:	75fb      	strb	r3, [r7, #23]
 800f836:	e011      	b.n	800f85c <f_open+0x100>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f838:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f83c:	f003 0311 	and.w	r3, r3, #17
 800f840:	2b00      	cmp	r3, #0
 800f842:	d003      	beq.n	800f84c <f_open+0xf0>
					res = FR_DENIED;
 800f844:	2307      	movs	r3, #7
 800f846:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800f84a:	e007      	b.n	800f85c <f_open+0x100>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f84c:	7dfb      	ldrb	r3, [r7, #23]
 800f84e:	f003 0304 	and.w	r3, r3, #4
 800f852:	2b00      	cmp	r3, #0
 800f854:	d002      	beq.n	800f85c <f_open+0x100>
 800f856:	2308      	movs	r3, #8
 800f858:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f85c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f860:	2b00      	cmp	r3, #0
 800f862:	f040 80fe 	bne.w	800fa62 <f_open+0x306>
 800f866:	7dfb      	ldrb	r3, [r7, #23]
 800f868:	f003 0308 	and.w	r3, r3, #8
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	f000 80f8 	beq.w	800fa62 <f_open+0x306>
				dw = GET_FATTIME();
 800f872:	f7f9 fe49 	bl	8009508 <get_fattime>
 800f876:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800f87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f87c:	781b      	ldrb	r3, [r3, #0]
 800f87e:	2b04      	cmp	r3, #4
 800f880:	f040 8084 	bne.w	800f98c <f_open+0x230>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800f884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f886:	69fb      	ldr	r3, [r7, #28]
 800f888:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800f88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f88c:	691b      	ldr	r3, [r3, #16]
 800f88e:	3334      	adds	r3, #52	; 0x34
 800f890:	4618      	mov	r0, r3
 800f892:	f7fc fceb 	bl	800c26c <ld_dword>
 800f896:	4602      	mov	r2, r0
 800f898:	69fb      	ldr	r3, [r7, #28]
 800f89a:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800f89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f89e:	691b      	ldr	r3, [r3, #16]
 800f8a0:	3338      	adds	r3, #56	; 0x38
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f7fc fd05 	bl	800c2b2 <ld_qword>
 800f8a8:	4602      	mov	r2, r0
 800f8aa:	460b      	mov	r3, r1
 800f8ac:	69f9      	ldr	r1, [r7, #28]
 800f8ae:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800f8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8b4:	691b      	ldr	r3, [r3, #16]
 800f8b6:	3321      	adds	r3, #33	; 0x21
 800f8b8:	781b      	ldrb	r3, [r3, #0]
 800f8ba:	f003 0302 	and.w	r3, r3, #2
 800f8be:	b2da      	uxtb	r2, r3
 800f8c0:	69fb      	ldr	r3, [r7, #28]
 800f8c2:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800f8c4:	69fb      	ldr	r3, [r7, #28]
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800f8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8cc:	691b      	ldr	r3, [r3, #16]
 800f8ce:	3308      	adds	r3, #8
 800f8d0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f7fc fde2 	bl	800c49e <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800f8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8dc:	691b      	ldr	r3, [r3, #16]
 800f8de:	3314      	adds	r3, #20
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800f8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8e6:	691b      	ldr	r3, [r3, #16]
 800f8e8:	330c      	adds	r3, #12
 800f8ea:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	f7fc fdd5 	bl	800c49e <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800f8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8f6:	691b      	ldr	r3, [r3, #16]
 800f8f8:	3315      	adds	r3, #21
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800f8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f900:	691b      	ldr	r3, [r3, #16]
 800f902:	3304      	adds	r3, #4
 800f904:	2220      	movs	r2, #32
 800f906:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800f908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f90a:	691b      	ldr	r3, [r3, #16]
 800f90c:	3334      	adds	r3, #52	; 0x34
 800f90e:	2100      	movs	r1, #0
 800f910:	4618      	mov	r0, r3
 800f912:	f7fc fdc4 	bl	800c49e <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800f916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f918:	691b      	ldr	r3, [r3, #16]
 800f91a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f91e:	f04f 0200 	mov.w	r2, #0
 800f922:	f04f 0300 	mov.w	r3, #0
 800f926:	4608      	mov	r0, r1
 800f928:	f7fc fde5 	bl	800c4f6 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800f92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f92e:	691b      	ldr	r3, [r3, #16]
 800f930:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800f934:	f04f 0200 	mov.w	r2, #0
 800f938:	f04f 0300 	mov.w	r3, #0
 800f93c:	4608      	mov	r0, r1
 800f93e:	f7fc fdda 	bl	800c4f6 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800f942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f944:	691b      	ldr	r3, [r3, #16]
 800f946:	3321      	adds	r3, #33	; 0x21
 800f948:	2201      	movs	r2, #1
 800f94a:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800f94c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f950:	4618      	mov	r0, r3
 800f952:	f7fe fbc9 	bl	800e0e8 <store_xdir>
 800f956:	4603      	mov	r3, r0
 800f958:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800f95c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f960:	2b00      	cmp	r3, #0
 800f962:	d17e      	bne.n	800fa62 <f_open+0x306>
 800f964:	69fb      	ldr	r3, [r7, #28]
 800f966:	689b      	ldr	r3, [r3, #8]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d07a      	beq.n	800fa62 <f_open+0x306>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800f96c:	69f8      	ldr	r0, [r7, #28]
 800f96e:	69fb      	ldr	r3, [r7, #28]
 800f970:	689b      	ldr	r3, [r3, #8]
 800f972:	2200      	movs	r2, #0
 800f974:	4619      	mov	r1, r3
 800f976:	f7fd fc81 	bl	800d27c <remove_chain>
 800f97a:	4603      	mov	r3, r0
 800f97c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800f980:	69fb      	ldr	r3, [r7, #28]
 800f982:	689a      	ldr	r2, [r3, #8]
 800f984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f986:	3a01      	subs	r2, #1
 800f988:	615a      	str	r2, [r3, #20]
 800f98a:	e06a      	b.n	800fa62 <f_open+0x306>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f98c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f98e:	330e      	adds	r3, #14
 800f990:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f994:	4618      	mov	r0, r3
 800f996:	f7fc fd82 	bl	800c49e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f99a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f99c:	3316      	adds	r3, #22
 800f99e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	f7fc fd7b 	bl	800c49e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f9a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f9aa:	330b      	adds	r3, #11
 800f9ac:	2220      	movs	r2, #32
 800f9ae:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9b2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f9b4:	4611      	mov	r1, r2
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f7fe f810 	bl	800d9dc <ld_clust>
 800f9bc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9c2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f7fe f827 	bl	800da1a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f9cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f9ce:	331c      	adds	r3, #28
 800f9d0:	2100      	movs	r1, #0
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	f7fc fd63 	bl	800c49e <st_dword>
					fs->wflag = 1;
 800f9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9da:	2201      	movs	r2, #1
 800f9dc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f9de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d03d      	beq.n	800fa62 <f_open+0x306>
						dw = fs->winsect;
 800f9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
						res = remove_chain(&dj.obj, cl, 0);
 800f9ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	f7fd fc3f 	bl	800d27c <remove_chain>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						if (res == FR_OK) {
 800fa04:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d12a      	bne.n	800fa62 <f_open+0x306>
							res = move_window(fs, dw);
 800fa0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa0e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800fa12:	4618      	mov	r0, r3
 800fa14:	f7fd f826 	bl	800ca64 <move_window>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fa1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa20:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fa24:	3a01      	subs	r2, #1
 800fa26:	615a      	str	r2, [r3, #20]
 800fa28:	e01b      	b.n	800fa62 <f_open+0x306>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fa2a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d117      	bne.n	800fa62 <f_open+0x306>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fa32:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800fa36:	f003 0310 	and.w	r3, r3, #16
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d003      	beq.n	800fa46 <f_open+0x2ea>
					res = FR_NO_FILE;
 800fa3e:	2304      	movs	r3, #4
 800fa40:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800fa44:	e00d      	b.n	800fa62 <f_open+0x306>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fa46:	7dfb      	ldrb	r3, [r7, #23]
 800fa48:	f003 0302 	and.w	r3, r3, #2
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d008      	beq.n	800fa62 <f_open+0x306>
 800fa50:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800fa54:	f003 0301 	and.w	r3, r3, #1
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d002      	beq.n	800fa62 <f_open+0x306>
						res = FR_DENIED;
 800fa5c:	2307      	movs	r3, #7
 800fa5e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					}
				}
			}
		}
		if (res == FR_OK) {
 800fa62:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d128      	bne.n	800fabc <f_open+0x360>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fa6a:	7dfb      	ldrb	r3, [r7, #23]
 800fa6c:	f003 0308 	and.w	r3, r3, #8
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d003      	beq.n	800fa7c <f_open+0x320>
				mode |= FA_MODIFIED;
 800fa74:	7dfb      	ldrb	r3, [r7, #23]
 800fa76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa7a:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fa7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fa80:	69fb      	ldr	r3, [r7, #28]
 800fa82:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800fa84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fa86:	69fb      	ldr	r3, [r7, #28]
 800fa88:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fa8a:	7dfb      	ldrb	r3, [r7, #23]
 800fa8c:	f023 0301 	bic.w	r3, r3, #1
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	bf14      	ite	ne
 800fa94:	2301      	movne	r3, #1
 800fa96:	2300      	moveq	r3, #0
 800fa98:	b2db      	uxtb	r3, r3
 800fa9a:	461a      	mov	r2, r3
 800fa9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800faa0:	4611      	mov	r1, r2
 800faa2:	4618      	mov	r0, r3
 800faa4:	f7fc feac 	bl	800c800 <inc_lock>
 800faa8:	4602      	mov	r2, r0
 800faaa:	69fb      	ldr	r3, [r7, #28]
 800faac:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800faae:	69fb      	ldr	r3, [r7, #28]
 800fab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d102      	bne.n	800fabc <f_open+0x360>
 800fab6:	2302      	movs	r3, #2
 800fab8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fabc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	f040 80fe 	bne.w	800fcc2 <f_open+0x566>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800fac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac8:	781b      	ldrb	r3, [r3, #0]
 800faca:	2b04      	cmp	r3, #4
 800facc:	d12d      	bne.n	800fb2a <f_open+0x3ce>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800face:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fad0:	69fb      	ldr	r3, [r7, #28]
 800fad2:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800fad4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800fad8:	4613      	mov	r3, r2
 800fada:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800fade:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800fae2:	431a      	orrs	r2, r3
 800fae4:	69fb      	ldr	r3, [r7, #28]
 800fae6:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800fae8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800faea:	69fb      	ldr	r3, [r7, #28]
 800faec:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800faee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faf0:	691b      	ldr	r3, [r3, #16]
 800faf2:	3334      	adds	r3, #52	; 0x34
 800faf4:	4618      	mov	r0, r3
 800faf6:	f7fc fbb9 	bl	800c26c <ld_dword>
 800fafa:	4602      	mov	r2, r0
 800fafc:	69fb      	ldr	r3, [r7, #28]
 800fafe:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800fb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb02:	691b      	ldr	r3, [r3, #16]
 800fb04:	3338      	adds	r3, #56	; 0x38
 800fb06:	4618      	mov	r0, r3
 800fb08:	f7fc fbd3 	bl	800c2b2 <ld_qword>
 800fb0c:	4602      	mov	r2, r0
 800fb0e:	460b      	mov	r3, r1
 800fb10:	69f9      	ldr	r1, [r7, #28]
 800fb12:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800fb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb18:	691b      	ldr	r3, [r3, #16]
 800fb1a:	3321      	adds	r3, #33	; 0x21
 800fb1c:	781b      	ldrb	r3, [r3, #0]
 800fb1e:	f003 0302 	and.w	r3, r3, #2
 800fb22:	b2da      	uxtb	r2, r3
 800fb24:	69fb      	ldr	r3, [r7, #28]
 800fb26:	71da      	strb	r2, [r3, #7]
 800fb28:	e016      	b.n	800fb58 <f_open+0x3fc>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb2c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fb2e:	4611      	mov	r1, r2
 800fb30:	4618      	mov	r0, r3
 800fb32:	f7fd ff53 	bl	800d9dc <ld_clust>
 800fb36:	4602      	mov	r2, r0
 800fb38:	69fb      	ldr	r3, [r7, #28]
 800fb3a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fb3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb3e:	331c      	adds	r3, #28
 800fb40:	4618      	mov	r0, r3
 800fb42:	f7fc fb93 	bl	800c26c <ld_dword>
 800fb46:	4603      	mov	r3, r0
 800fb48:	2200      	movs	r2, #0
 800fb4a:	60bb      	str	r3, [r7, #8]
 800fb4c:	60fa      	str	r2, [r7, #12]
 800fb4e:	69fb      	ldr	r3, [r7, #28]
 800fb50:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800fb54:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fb58:	69fb      	ldr	r3, [r7, #28]
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fb5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb60:	69fb      	ldr	r3, [r7, #28]
 800fb62:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb66:	88da      	ldrh	r2, [r3, #6]
 800fb68:	69fb      	ldr	r3, [r7, #28]
 800fb6a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800fb6c:	69fb      	ldr	r3, [r7, #28]
 800fb6e:	7dfa      	ldrb	r2, [r7, #23]
 800fb70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800fb74:	69fb      	ldr	r3, [r7, #28]
 800fb76:	2200      	movs	r2, #0
 800fb78:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800fb7c:	69fb      	ldr	r3, [r7, #28]
 800fb7e:	2200      	movs	r2, #0
 800fb80:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fb82:	69f9      	ldr	r1, [r7, #28]
 800fb84:	f04f 0200 	mov.w	r2, #0
 800fb88:	f04f 0300 	mov.w	r3, #0
 800fb8c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fb90:	69fb      	ldr	r3, [r7, #28]
 800fb92:	3354      	adds	r3, #84	; 0x54
 800fb94:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fb98:	2100      	movs	r1, #0
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f7fc fd54 	bl	800c648 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fba0:	7dfb      	ldrb	r3, [r7, #23]
 800fba2:	f003 0320 	and.w	r3, r3, #32
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	f000 808b 	beq.w	800fcc2 <f_open+0x566>
 800fbac:	69fb      	ldr	r3, [r7, #28]
 800fbae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800fbb2:	4313      	orrs	r3, r2
 800fbb4:	f000 8085 	beq.w	800fcc2 <f_open+0x566>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fbb8:	69fb      	ldr	r3, [r7, #28]
 800fbba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800fbbe:	69f9      	ldr	r1, [r7, #28]
 800fbc0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc6:	895b      	ldrh	r3, [r3, #10]
 800fbc8:	025b      	lsls	r3, r3, #9
 800fbca:	67fb      	str	r3, [r7, #124]	; 0x7c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fbcc:	69fb      	ldr	r3, [r7, #28]
 800fbce:	689b      	ldr	r3, [r3, #8]
 800fbd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fbd4:	69fb      	ldr	r3, [r7, #28]
 800fbd6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800fbda:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 800fbde:	e026      	b.n	800fc2e <f_open+0x4d2>
					clst = get_fat(&fp->obj, clst);
 800fbe0:	69fb      	ldr	r3, [r7, #28]
 800fbe2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f7fc fff8 	bl	800cbdc <get_fat>
 800fbec:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
					if (clst <= 1) res = FR_INT_ERR;
 800fbf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fbf4:	2b01      	cmp	r3, #1
 800fbf6:	d802      	bhi.n	800fbfe <f_open+0x4a2>
 800fbf8:	2302      	movs	r3, #2
 800fbfa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fbfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fc02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc06:	d102      	bne.n	800fc0e <f_open+0x4b2>
 800fc08:	2301      	movs	r3, #1
 800fc0a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fc0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fc10:	2200      	movs	r2, #0
 800fc12:	469a      	mov	sl, r3
 800fc14:	4693      	mov	fp, r2
 800fc16:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800fc1a:	ebb2 010a 	subs.w	r1, r2, sl
 800fc1e:	6039      	str	r1, [r7, #0]
 800fc20:	eb63 030b 	sbc.w	r3, r3, fp
 800fc24:	607b      	str	r3, [r7, #4]
 800fc26:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc2a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 800fc2e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d109      	bne.n	800fc4a <f_open+0x4ee>
 800fc36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fc38:	2200      	movs	r2, #0
 800fc3a:	4698      	mov	r8, r3
 800fc3c:	4691      	mov	r9, r2
 800fc3e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800fc42:	4590      	cmp	r8, r2
 800fc44:	eb79 0303 	sbcs.w	r3, r9, r3
 800fc48:	d3ca      	bcc.n	800fbe0 <f_open+0x484>
				}
				fp->clust = clst;
 800fc4a:	69fb      	ldr	r3, [r7, #28]
 800fc4c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800fc50:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fc52:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d133      	bne.n	800fcc2 <f_open+0x566>
 800fc5a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800fc5e:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800fc62:	2500      	movs	r5, #0
 800fc64:	ea54 0305 	orrs.w	r3, r4, r5
 800fc68:	d02b      	beq.n	800fcc2 <f_open+0x566>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc6c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800fc70:	4618      	mov	r0, r3
 800fc72:	f7fc ff93 	bl	800cb9c <clust2sect>
 800fc76:	67b8      	str	r0, [r7, #120]	; 0x78
 800fc78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d103      	bne.n	800fc86 <f_open+0x52a>
						res = FR_INT_ERR;
 800fc7e:	2302      	movs	r3, #2
 800fc80:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800fc84:	e01d      	b.n	800fcc2 <f_open+0x566>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fc86:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800fc8a:	f04f 0200 	mov.w	r2, #0
 800fc8e:	f04f 0300 	mov.w	r3, #0
 800fc92:	0a42      	lsrs	r2, r0, #9
 800fc94:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800fc98:	0a4b      	lsrs	r3, r1, #9
 800fc9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc9c:	441a      	add	r2, r3
 800fc9e:	69fb      	ldr	r3, [r7, #28]
 800fca0:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca4:	7858      	ldrb	r0, [r3, #1]
 800fca6:	69fb      	ldr	r3, [r7, #28]
 800fca8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800fcac:	69fb      	ldr	r3, [r7, #28]
 800fcae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fcb0:	2301      	movs	r3, #1
 800fcb2:	f7fc fa65 	bl	800c180 <disk_read>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d002      	beq.n	800fcc2 <f_open+0x566>
 800fcbc:	2301      	movs	r3, #1
 800fcbe:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fcc2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d002      	beq.n	800fcd0 <f_open+0x574>
 800fcca:	69fb      	ldr	r3, [r7, #28]
 800fccc:	2200      	movs	r2, #0
 800fcce:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fcd0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	3798      	adds	r7, #152	; 0x98
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800fcde <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800fcde:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fce2:	b08c      	sub	sp, #48	; 0x30
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	60f8      	str	r0, [r7, #12]
 800fce8:	60b9      	str	r1, [r7, #8]
 800fcea:	607a      	str	r2, [r7, #4]
 800fcec:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800fcee:	68bb      	ldr	r3, [r7, #8]
 800fcf0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	f107 0210 	add.w	r2, r7, #16
 800fcfe:	4611      	mov	r1, r2
 800fd00:	4618      	mov	r0, r3
 800fd02:	f7ff fcaf 	bl	800f664 <validate>
 800fd06:	4603      	mov	r3, r0
 800fd08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fd0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d108      	bne.n	800fd26 <f_write+0x48>
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fd1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800fd1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d002      	beq.n	800fd2c <f_write+0x4e>
 800fd26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fd2a:	e187      	b.n	801003c <f_write+0x35e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fd32:	f003 0302 	and.w	r3, r3, #2
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d101      	bne.n	800fd3e <f_write+0x60>
 800fd3a:	2307      	movs	r3, #7
 800fd3c:	e17e      	b.n	801003c <f_write+0x35e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800fd3e:	693b      	ldr	r3, [r7, #16]
 800fd40:	781b      	ldrb	r3, [r3, #0]
 800fd42:	2b04      	cmp	r3, #4
 800fd44:	f000 816a 	beq.w	801001c <f_write+0x33e>
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	18d1      	adds	r1, r2, r3
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800fd58:	4613      	mov	r3, r2
 800fd5a:	4299      	cmp	r1, r3
 800fd5c:	f080 815e 	bcs.w	801001c <f_write+0x33e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800fd66:	4613      	mov	r3, r2
 800fd68:	43db      	mvns	r3, r3
 800fd6a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800fd6c:	e156      	b.n	801001c <f_write+0x33e>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800fd74:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800fd78:	2500      	movs	r5, #0
 800fd7a:	ea54 0305 	orrs.w	r3, r4, r5
 800fd7e:	f040 80fb 	bne.w	800ff78 <f_write+0x29a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800fd88:	f04f 0200 	mov.w	r2, #0
 800fd8c:	f04f 0300 	mov.w	r3, #0
 800fd90:	0a42      	lsrs	r2, r0, #9
 800fd92:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800fd96:	0a4b      	lsrs	r3, r1, #9
 800fd98:	693b      	ldr	r3, [r7, #16]
 800fd9a:	895b      	ldrh	r3, [r3, #10]
 800fd9c:	3b01      	subs	r3, #1
 800fd9e:	4013      	ands	r3, r2
 800fda0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800fda2:	69bb      	ldr	r3, [r7, #24]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d146      	bne.n	800fe36 <f_write+0x158>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800fdae:	4313      	orrs	r3, r2
 800fdb0:	d10c      	bne.n	800fdcc <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	689b      	ldr	r3, [r3, #8]
 800fdb6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800fdb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d11a      	bne.n	800fdf4 <f_write+0x116>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	2100      	movs	r1, #0
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f7fd fb0e 	bl	800d3e4 <create_chain>
 800fdc8:	62b8      	str	r0, [r7, #40]	; 0x28
 800fdca:	e013      	b.n	800fdf4 <f_write+0x116>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d007      	beq.n	800fde4 <f_write+0x106>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800fdda:	68f8      	ldr	r0, [r7, #12]
 800fddc:	f7fd fc03 	bl	800d5e6 <clmt_clust>
 800fde0:	62b8      	str	r0, [r7, #40]	; 0x28
 800fde2:	e007      	b.n	800fdf4 <f_write+0x116>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800fde4:	68fa      	ldr	r2, [r7, #12]
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdea:	4619      	mov	r1, r3
 800fdec:	4610      	mov	r0, r2
 800fdee:	f7fd faf9 	bl	800d3e4 <create_chain>
 800fdf2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	f000 8115 	beq.w	8010026 <f_write+0x348>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fdfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdfe:	2b01      	cmp	r3, #1
 800fe00:	d105      	bne.n	800fe0e <f_write+0x130>
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	2202      	movs	r2, #2
 800fe06:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800fe0a:	2302      	movs	r3, #2
 800fe0c:	e116      	b.n	801003c <f_write+0x35e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fe0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe14:	d105      	bne.n	800fe22 <f_write+0x144>
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	2201      	movs	r2, #1
 800fe1a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800fe1e:	2301      	movs	r3, #1
 800fe20:	e10c      	b.n	801003c <f_write+0x35e>
				fp->clust = clst;			/* Update current cluster */
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe26:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	689b      	ldr	r3, [r3, #8]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d102      	bne.n	800fe36 <f_write+0x158>
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe34:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fe3c:	b25b      	sxtb	r3, r3
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	da1b      	bge.n	800fe7a <f_write+0x19c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fe42:	693b      	ldr	r3, [r7, #16]
 800fe44:	7858      	ldrb	r0, [r3, #1]
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fe50:	2301      	movs	r3, #1
 800fe52:	f7fc f9b5 	bl	800c1c0 <disk_write>
 800fe56:	4603      	mov	r3, r0
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d005      	beq.n	800fe68 <f_write+0x18a>
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	2201      	movs	r2, #1
 800fe60:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800fe64:	2301      	movs	r3, #1
 800fe66:	e0e9      	b.n	801003c <f_write+0x35e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fe6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe72:	b2da      	uxtb	r2, r3
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fe7a:	693a      	ldr	r2, [r7, #16]
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe80:	4619      	mov	r1, r3
 800fe82:	4610      	mov	r0, r2
 800fe84:	f7fc fe8a 	bl	800cb9c <clust2sect>
 800fe88:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fe8a:	697b      	ldr	r3, [r7, #20]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d105      	bne.n	800fe9c <f_write+0x1be>
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	2202      	movs	r2, #2
 800fe94:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800fe98:	2302      	movs	r3, #2
 800fe9a:	e0cf      	b.n	801003c <f_write+0x35e>
			sect += csect;
 800fe9c:	697a      	ldr	r2, [r7, #20]
 800fe9e:	69bb      	ldr	r3, [r7, #24]
 800fea0:	4413      	add	r3, r2
 800fea2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	0a5b      	lsrs	r3, r3, #9
 800fea8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800feaa:	6a3b      	ldr	r3, [r7, #32]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d03f      	beq.n	800ff30 <f_write+0x252>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800feb0:	69ba      	ldr	r2, [r7, #24]
 800feb2:	6a3b      	ldr	r3, [r7, #32]
 800feb4:	4413      	add	r3, r2
 800feb6:	693a      	ldr	r2, [r7, #16]
 800feb8:	8952      	ldrh	r2, [r2, #10]
 800feba:	4293      	cmp	r3, r2
 800febc:	d905      	bls.n	800feca <f_write+0x1ec>
					cc = fs->csize - csect;
 800febe:	693b      	ldr	r3, [r7, #16]
 800fec0:	895b      	ldrh	r3, [r3, #10]
 800fec2:	461a      	mov	r2, r3
 800fec4:	69bb      	ldr	r3, [r7, #24]
 800fec6:	1ad3      	subs	r3, r2, r3
 800fec8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800feca:	693b      	ldr	r3, [r7, #16]
 800fecc:	7858      	ldrb	r0, [r3, #1]
 800fece:	6a3b      	ldr	r3, [r7, #32]
 800fed0:	697a      	ldr	r2, [r7, #20]
 800fed2:	69f9      	ldr	r1, [r7, #28]
 800fed4:	f7fc f974 	bl	800c1c0 <disk_write>
 800fed8:	4603      	mov	r3, r0
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d005      	beq.n	800feea <f_write+0x20c>
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	2201      	movs	r2, #1
 800fee2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800fee6:	2301      	movs	r3, #1
 800fee8:	e0a8      	b.n	801003c <f_write+0x35e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800feee:	697b      	ldr	r3, [r7, #20]
 800fef0:	1ad3      	subs	r3, r2, r3
 800fef2:	6a3a      	ldr	r2, [r7, #32]
 800fef4:	429a      	cmp	r2, r3
 800fef6:	d917      	bls.n	800ff28 <f_write+0x24a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ff02:	697b      	ldr	r3, [r7, #20]
 800ff04:	1ad3      	subs	r3, r2, r3
 800ff06:	025b      	lsls	r3, r3, #9
 800ff08:	69fa      	ldr	r2, [r7, #28]
 800ff0a:	4413      	add	r3, r2
 800ff0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ff10:	4619      	mov	r1, r3
 800ff12:	f7fc fb78 	bl	800c606 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ff1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff20:	b2da      	uxtb	r2, r3
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ff28:	6a3b      	ldr	r3, [r7, #32]
 800ff2a:	025b      	lsls	r3, r3, #9
 800ff2c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ff2e:	e04a      	b.n	800ffc6 <f_write+0x2e8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff34:	697a      	ldr	r2, [r7, #20]
 800ff36:	429a      	cmp	r2, r3
 800ff38:	d01b      	beq.n	800ff72 <f_write+0x294>
				fp->fptr < fp->obj.objsize &&
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ff46:	4290      	cmp	r0, r2
 800ff48:	eb71 0303 	sbcs.w	r3, r1, r3
 800ff4c:	d211      	bcs.n	800ff72 <f_write+0x294>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ff4e:	693b      	ldr	r3, [r7, #16]
 800ff50:	7858      	ldrb	r0, [r3, #1]
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800ff58:	2301      	movs	r3, #1
 800ff5a:	697a      	ldr	r2, [r7, #20]
 800ff5c:	f7fc f910 	bl	800c180 <disk_read>
 800ff60:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d005      	beq.n	800ff72 <f_write+0x294>
					ABORT(fs, FR_DISK_ERR);
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	2201      	movs	r2, #1
 800ff6a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ff6e:	2301      	movs	r3, #1
 800ff70:	e064      	b.n	801003c <f_write+0x35e>
			}
#endif
			fp->sect = sect;
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	697a      	ldr	r2, [r7, #20]
 800ff76:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ff7e:	4613      	mov	r3, r2
 800ff80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff84:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ff88:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ff8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	429a      	cmp	r2, r3
 800ff90:	d901      	bls.n	800ff96 <f_write+0x2b8>
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ffa2:	4613      	mov	r3, r2
 800ffa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ffa8:	440b      	add	r3, r1
 800ffaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffac:	69f9      	ldr	r1, [r7, #28]
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7fc fb29 	bl	800c606 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ffba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ffbe:	b2da      	uxtb	r2, r3
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ffc6:	69fa      	ldr	r2, [r7, #28]
 800ffc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffca:	4413      	add	r3, r2
 800ffcc:	61fb      	str	r3, [r7, #28]
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ffd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ffd6:	2000      	movs	r0, #0
 800ffd8:	4688      	mov	r8, r1
 800ffda:	4681      	mov	r9, r0
 800ffdc:	eb12 0a08 	adds.w	sl, r2, r8
 800ffe0:	eb43 0b09 	adc.w	fp, r3, r9
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800fff0:	68f9      	ldr	r1, [r7, #12]
 800fff2:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
 800fff6:	4282      	cmp	r2, r0
 800fff8:	eb73 0c01 	sbcs.w	ip, r3, r1
 800fffc:	d201      	bcs.n	8010002 <f_write+0x324>
 800fffe:	4602      	mov	r2, r0
 8010000:	460b      	mov	r3, r1
 8010002:	68f9      	ldr	r1, [r7, #12]
 8010004:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	681a      	ldr	r2, [r3, #0]
 801000c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801000e:	441a      	add	r2, r3
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	601a      	str	r2, [r3, #0]
 8010014:	687a      	ldr	r2, [r7, #4]
 8010016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010018:	1ad3      	subs	r3, r2, r3
 801001a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2b00      	cmp	r3, #0
 8010020:	f47f aea5 	bne.w	800fd6e <f_write+0x90>
 8010024:	e000      	b.n	8010028 <f_write+0x34a>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010026:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801002e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010032:	b2da      	uxtb	r2, r3
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 801003a:	2300      	movs	r3, #0
}
 801003c:	4618      	mov	r0, r3
 801003e:	3730      	adds	r7, #48	; 0x30
 8010040:	46bd      	mov	sp, r7
 8010042:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010046 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010046:	b580      	push	{r7, lr}
 8010048:	b09a      	sub	sp, #104	; 0x68
 801004a:	af00      	add	r7, sp, #0
 801004c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010054:	4611      	mov	r1, r2
 8010056:	4618      	mov	r0, r3
 8010058:	f7ff fb04 	bl	800f664 <validate>
 801005c:	4603      	mov	r3, r0
 801005e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8010062:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010066:	2b00      	cmp	r3, #0
 8010068:	f040 8105 	bne.w	8010276 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010076:	2b00      	cmp	r3, #0
 8010078:	f000 80fd 	beq.w	8010276 <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010082:	b25b      	sxtb	r3, r3
 8010084:	2b00      	cmp	r3, #0
 8010086:	da17      	bge.n	80100b8 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010088:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801008a:	7858      	ldrb	r0, [r3, #1]
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010096:	2301      	movs	r3, #1
 8010098:	f7fc f892 	bl	800c1c0 <disk_write>
 801009c:	4603      	mov	r3, r0
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d001      	beq.n	80100a6 <f_sync+0x60>
 80100a2:	2301      	movs	r3, #1
 80100a4:	e0e9      	b.n	801027a <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80100ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80100b0:	b2da      	uxtb	r2, r3
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80100b8:	f7f9 fa26 	bl	8009508 <get_fattime>
 80100bc:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80100be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80100c0:	781b      	ldrb	r3, [r3, #0]
 80100c2:	2b04      	cmp	r3, #4
 80100c4:	f040 808c 	bne.w	80101e0 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	4618      	mov	r0, r3
 80100cc:	f7fd f876 	bl	800d1bc <fill_first_frag>
 80100d0:	4603      	mov	r3, r0
 80100d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 80100d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d10a      	bne.n	80100f4 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 80100de:	6878      	ldr	r0, [r7, #4]
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100e4:	f04f 32ff 	mov.w	r2, #4294967295
 80100e8:	4619      	mov	r1, r3
 80100ea:	f7fd f896 	bl	800d21a <fill_last_frag>
 80100ee:	4603      	mov	r3, r0
 80100f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 80100f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	f040 80bc 	bne.w	8010276 <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 80100fe:	687a      	ldr	r2, [r7, #4]
 8010100:	f107 0308 	add.w	r3, r7, #8
 8010104:	4611      	mov	r1, r2
 8010106:	4618      	mov	r0, r3
 8010108:	f7fd ffb8 	bl	800e07c <load_obj_dir>
 801010c:	4603      	mov	r3, r0
 801010e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 8010112:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010116:	2b00      	cmp	r3, #0
 8010118:	f040 80ad 	bne.w	8010276 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 801011c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801011e:	691b      	ldr	r3, [r3, #16]
 8010120:	3304      	adds	r3, #4
 8010122:	781a      	ldrb	r2, [r3, #0]
 8010124:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010126:	691b      	ldr	r3, [r3, #16]
 8010128:	3304      	adds	r3, #4
 801012a:	f042 0220 	orr.w	r2, r2, #32
 801012e:	b2d2      	uxtb	r2, r2
 8010130:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	79da      	ldrb	r2, [r3, #7]
 8010136:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010138:	691b      	ldr	r3, [r3, #16]
 801013a:	3321      	adds	r3, #33	; 0x21
 801013c:	f042 0201 	orr.w	r2, r2, #1
 8010140:	b2d2      	uxtb	r2, r2
 8010142:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 8010144:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010146:	691b      	ldr	r3, [r3, #16]
 8010148:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	689b      	ldr	r3, [r3, #8]
 8010150:	4619      	mov	r1, r3
 8010152:	4610      	mov	r0, r2
 8010154:	f7fc f9a3 	bl	800c49e <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8010158:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801015a:	691b      	ldr	r3, [r3, #16]
 801015c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010166:	4608      	mov	r0, r1
 8010168:	f7fc f9c5 	bl	800c4f6 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 801016c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801016e:	691b      	ldr	r3, [r3, #16]
 8010170:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801017a:	4608      	mov	r0, r1
 801017c:	f7fc f9bb 	bl	800c4f6 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8010180:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010182:	691b      	ldr	r3, [r3, #16]
 8010184:	330c      	adds	r3, #12
 8010186:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010188:	4618      	mov	r0, r3
 801018a:	f7fc f988 	bl	800c49e <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 801018e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010190:	691b      	ldr	r3, [r3, #16]
 8010192:	3315      	adds	r3, #21
 8010194:	2200      	movs	r2, #0
 8010196:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8010198:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801019a:	691b      	ldr	r3, [r3, #16]
 801019c:	3310      	adds	r3, #16
 801019e:	2100      	movs	r1, #0
 80101a0:	4618      	mov	r0, r3
 80101a2:	f7fc f97c 	bl	800c49e <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 80101a6:	f107 0308 	add.w	r3, r7, #8
 80101aa:	4618      	mov	r0, r3
 80101ac:	f7fd ff9c 	bl	800e0e8 <store_xdir>
 80101b0:	4603      	mov	r3, r0
 80101b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80101b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d15b      	bne.n	8010276 <f_sync+0x230>
							res = sync_fs(fs);
 80101be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80101c0:	4618      	mov	r0, r3
 80101c2:	f7fc fc7d 	bl	800cac0 <sync_fs>
 80101c6:	4603      	mov	r3, r0
 80101c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80101d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80101d6:	b2da      	uxtb	r2, r3
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80101de:	e04a      	b.n	8010276 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80101e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80101e6:	4619      	mov	r1, r3
 80101e8:	4610      	mov	r0, r2
 80101ea:	f7fc fc3b 	bl	800ca64 <move_window>
 80101ee:	4603      	mov	r3, r0
 80101f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 80101f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d13c      	bne.n	8010276 <f_sync+0x230>
					dir = fp->dir_ptr;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010200:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010202:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010204:	330b      	adds	r3, #11
 8010206:	781a      	ldrb	r2, [r3, #0]
 8010208:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801020a:	330b      	adds	r3, #11
 801020c:	f042 0220 	orr.w	r2, r2, #32
 8010210:	b2d2      	uxtb	r2, r2
 8010212:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	6818      	ldr	r0, [r3, #0]
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	689b      	ldr	r3, [r3, #8]
 801021c:	461a      	mov	r2, r3
 801021e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8010220:	f7fd fbfb 	bl	800da1a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010224:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010226:	f103 001c 	add.w	r0, r3, #28
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010230:	4613      	mov	r3, r2
 8010232:	4619      	mov	r1, r3
 8010234:	f7fc f933 	bl	800c49e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801023a:	3316      	adds	r3, #22
 801023c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801023e:	4618      	mov	r0, r3
 8010240:	f7fc f92d 	bl	800c49e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010244:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010246:	3312      	adds	r3, #18
 8010248:	2100      	movs	r1, #0
 801024a:	4618      	mov	r0, r3
 801024c:	f7fc f90c 	bl	800c468 <st_word>
					fs->wflag = 1;
 8010250:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010252:	2201      	movs	r2, #1
 8010254:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010256:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010258:	4618      	mov	r0, r3
 801025a:	f7fc fc31 	bl	800cac0 <sync_fs>
 801025e:	4603      	mov	r3, r0
 8010260:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801026a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801026e:	b2da      	uxtb	r2, r3
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010276:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 801027a:	4618      	mov	r0, r3
 801027c:	3768      	adds	r7, #104	; 0x68
 801027e:	46bd      	mov	sp, r7
 8010280:	bd80      	pop	{r7, pc}

08010282 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010282:	b580      	push	{r7, lr}
 8010284:	b084      	sub	sp, #16
 8010286:	af00      	add	r7, sp, #0
 8010288:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801028a:	6878      	ldr	r0, [r7, #4]
 801028c:	f7ff fedb 	bl	8010046 <f_sync>
 8010290:	4603      	mov	r3, r0
 8010292:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010294:	7bfb      	ldrb	r3, [r7, #15]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d118      	bne.n	80102cc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	f107 0208 	add.w	r2, r7, #8
 80102a0:	4611      	mov	r1, r2
 80102a2:	4618      	mov	r0, r3
 80102a4:	f7ff f9de 	bl	800f664 <validate>
 80102a8:	4603      	mov	r3, r0
 80102aa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80102ac:	7bfb      	ldrb	r3, [r7, #15]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d10c      	bne.n	80102cc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102b6:	4618      	mov	r0, r3
 80102b8:	f7fc fb30 	bl	800c91c <dec_lock>
 80102bc:	4603      	mov	r3, r0
 80102be:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80102c0:	7bfb      	ldrb	r3, [r7, #15]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d102      	bne.n	80102cc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	2200      	movs	r2, #0
 80102ca:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80102cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80102ce:	4618      	mov	r0, r3
 80102d0:	3710      	adds	r7, #16
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bd80      	pop	{r7, pc}

080102d6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80102d6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80102da:	b0b6      	sub	sp, #216	; 0xd8
 80102dc:	af00      	add	r7, sp, #0
 80102de:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 80102e2:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80102e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80102ea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80102ee:	4619      	mov	r1, r3
 80102f0:	4610      	mov	r0, r2
 80102f2:	f7ff f9b7 	bl	800f664 <validate>
 80102f6:	4603      	mov	r3, r0
 80102f8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	if (res == FR_OK) res = (FRESULT)fp->err;
 80102fc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8010300:	2b00      	cmp	r3, #0
 8010302:	d105      	bne.n	8010310 <f_lseek+0x3a>
 8010304:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010308:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801030c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 8010310:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8010314:	2b00      	cmp	r3, #0
 8010316:	d111      	bne.n	801033c <f_lseek+0x66>
 8010318:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801031c:	781b      	ldrb	r3, [r3, #0]
 801031e:	2b04      	cmp	r3, #4
 8010320:	d10c      	bne.n	801033c <f_lseek+0x66>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8010322:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8010326:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801032a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801032c:	f04f 32ff 	mov.w	r2, #4294967295
 8010330:	4619      	mov	r1, r3
 8010332:	f7fc ff72 	bl	800d21a <fill_last_frag>
 8010336:	4603      	mov	r3, r0
 8010338:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801033c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8010340:	2b00      	cmp	r3, #0
 8010342:	d002      	beq.n	801034a <f_lseek+0x74>
 8010344:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8010348:	e38c      	b.n	8010a64 <f_lseek+0x78e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801034a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801034e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010350:	2b00      	cmp	r3, #0
 8010352:	f000 8141 	beq.w	80105d8 <f_lseek+0x302>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010356:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801035a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801035e:	bf08      	it	eq
 8010360:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8010364:	f040 8087 	bne.w	8010476 <f_lseek+0x1a0>
			tbl = fp->cltbl;
 8010368:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801036c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801036e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010372:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010376:	1d1a      	adds	r2, r3, #4
 8010378:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010382:	2302      	movs	r3, #2
 8010384:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010388:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801038c:	689b      	ldr	r3, [r3, #8]
 801038e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
			if (cl) {
 8010392:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010396:	2b00      	cmp	r3, #0
 8010398:	d058      	beq.n	801044c <f_lseek+0x176>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801039a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801039e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80103a2:	2300      	movs	r3, #0
 80103a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80103a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80103ac:	3302      	adds	r3, #2
 80103ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
					do {
						pcl = cl; ncl++;
 80103b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80103b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80103ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80103be:	3301      	adds	r3, #1
 80103c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
						cl = get_fat(&fp->obj, cl);
 80103c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80103c8:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80103cc:	4618      	mov	r0, r3
 80103ce:	f7fc fc05 	bl	800cbdc <get_fat>
 80103d2:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80103d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80103da:	2b01      	cmp	r3, #1
 80103dc:	d806      	bhi.n	80103ec <f_lseek+0x116>
 80103de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80103e2:	2202      	movs	r2, #2
 80103e4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80103e8:	2302      	movs	r3, #2
 80103ea:	e33b      	b.n	8010a64 <f_lseek+0x78e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80103ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80103f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103f4:	d106      	bne.n	8010404 <f_lseek+0x12e>
 80103f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80103fa:	2201      	movs	r2, #1
 80103fc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010400:	2301      	movs	r3, #1
 8010402:	e32f      	b.n	8010a64 <f_lseek+0x78e>
					} while (cl == pcl + 1);
 8010404:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010408:	3301      	adds	r3, #1
 801040a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801040e:	429a      	cmp	r2, r3
 8010410:	d0cf      	beq.n	80103b2 <f_lseek+0xdc>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010412:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010416:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801041a:	429a      	cmp	r2, r3
 801041c:	d80f      	bhi.n	801043e <f_lseek+0x168>
						*tbl++ = ncl; *tbl++ = tcl;
 801041e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010422:	1d1a      	adds	r2, r3, #4
 8010424:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8010428:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801042c:	601a      	str	r2, [r3, #0]
 801042e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010432:	1d1a      	adds	r2, r3, #4
 8010434:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8010438:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801043c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801043e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010442:	69db      	ldr	r3, [r3, #28]
 8010444:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010448:	429a      	cmp	r2, r3
 801044a:	d3a6      	bcc.n	801039a <f_lseek+0xc4>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801044c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010452:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010456:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010458:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801045c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010460:	429a      	cmp	r2, r3
 8010462:	d804      	bhi.n	801046e <f_lseek+0x198>
				*tbl = 0;		/* Terminate table */
 8010464:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010468:	2200      	movs	r2, #0
 801046a:	601a      	str	r2, [r3, #0]
 801046c:	e2f8      	b.n	8010a60 <f_lseek+0x78a>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801046e:	2311      	movs	r3, #17
 8010470:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8010474:	e2f4      	b.n	8010a60 <f_lseek+0x78a>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010476:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801047a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 801047e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010482:	4290      	cmp	r0, r2
 8010484:	eb71 0303 	sbcs.w	r3, r1, r3
 8010488:	d205      	bcs.n	8010496 <f_lseek+0x1c0>
 801048a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801048e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010492:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
			fp->fptr = ofs;				/* Set file pointer */
 8010496:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 801049a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801049e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			if (ofs) {
 80104a2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80104a6:	4313      	orrs	r3, r2
 80104a8:	f000 82da 	beq.w	8010a60 <f_lseek+0x78a>
				fp->clust = clmt_clust(fp, ofs - 1);
 80104ac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80104b0:	f112 3aff 	adds.w	sl, r2, #4294967295
 80104b4:	f143 3bff 	adc.w	fp, r3, #4294967295
 80104b8:	4652      	mov	r2, sl
 80104ba:	465b      	mov	r3, fp
 80104bc:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80104c0:	f7fd f891 	bl	800d5e6 <clmt_clust>
 80104c4:	4602      	mov	r2, r0
 80104c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80104ca:	641a      	str	r2, [r3, #64]	; 0x40
				dsc = clust2sect(fs, fp->clust);
 80104cc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80104d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80104d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104d6:	4619      	mov	r1, r3
 80104d8:	4610      	mov	r0, r2
 80104da:	f7fc fb5f 	bl	800cb9c <clust2sect>
 80104de:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80104e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d106      	bne.n	80104f8 <f_lseek+0x222>
 80104ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80104ee:	2202      	movs	r2, #2
 80104f0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80104f4:	2302      	movs	r3, #2
 80104f6:	e2b5      	b.n	8010a64 <f_lseek+0x78e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80104f8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80104fc:	1e54      	subs	r4, r2, #1
 80104fe:	f143 35ff 	adc.w	r5, r3, #4294967295
 8010502:	f04f 0200 	mov.w	r2, #0
 8010506:	f04f 0300 	mov.w	r3, #0
 801050a:	0a62      	lsrs	r2, r4, #9
 801050c:	ea42 52c5 	orr.w	r2, r2, r5, lsl #23
 8010510:	0a6b      	lsrs	r3, r5, #9
 8010512:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010516:	895b      	ldrh	r3, [r3, #10]
 8010518:	3b01      	subs	r3, #1
 801051a:	4013      	ands	r3, r2
 801051c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010520:	4413      	add	r3, r2
 8010522:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010526:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801052a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801052e:	f3c2 0808 	ubfx	r8, r2, #0, #9
 8010532:	f04f 0900 	mov.w	r9, #0
 8010536:	ea58 0309 	orrs.w	r3, r8, r9
 801053a:	f000 8291 	beq.w	8010a60 <f_lseek+0x78a>
 801053e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010544:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010548:	429a      	cmp	r2, r3
 801054a:	f000 8289 	beq.w	8010a60 <f_lseek+0x78a>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801054e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010552:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010556:	b25b      	sxtb	r3, r3
 8010558:	2b00      	cmp	r3, #0
 801055a:	da21      	bge.n	80105a0 <f_lseek+0x2ca>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801055c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010560:	7858      	ldrb	r0, [r3, #1]
 8010562:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010566:	f103 0154 	add.w	r1, r3, #84	; 0x54
 801056a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801056e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010570:	2301      	movs	r3, #1
 8010572:	f7fb fe25 	bl	800c1c0 <disk_write>
 8010576:	4603      	mov	r3, r0
 8010578:	2b00      	cmp	r3, #0
 801057a:	d006      	beq.n	801058a <f_lseek+0x2b4>
 801057c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010580:	2201      	movs	r2, #1
 8010582:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010586:	2301      	movs	r3, #1
 8010588:	e26c      	b.n	8010a64 <f_lseek+0x78e>
						fp->flag &= (BYTE)~FA_DIRTY;
 801058a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801058e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010596:	b2da      	uxtb	r2, r3
 8010598:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801059c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80105a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80105a4:	7858      	ldrb	r0, [r3, #1]
 80105a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80105aa:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80105ae:	2301      	movs	r3, #1
 80105b0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80105b4:	f7fb fde4 	bl	800c180 <disk_read>
 80105b8:	4603      	mov	r3, r0
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d006      	beq.n	80105cc <f_lseek+0x2f6>
 80105be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80105c2:	2201      	movs	r2, #1
 80105c4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80105c8:	2301      	movs	r3, #1
 80105ca:	e24b      	b.n	8010a64 <f_lseek+0x78e>
#endif
					fp->sect = dsc;
 80105cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80105d0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80105d4:	645a      	str	r2, [r3, #68]	; 0x44
 80105d6:	e243      	b.n	8010a60 <f_lseek+0x78a>
#endif

	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 80105d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80105dc:	781b      	ldrb	r3, [r3, #0]
 80105de:	2b04      	cmp	r3, #4
 80105e0:	d009      	beq.n	80105f6 <f_lseek+0x320>
 80105e2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80105e6:	2b01      	cmp	r3, #1
 80105e8:	d305      	bcc.n	80105f6 <f_lseek+0x320>
 80105ea:	f04f 32ff 	mov.w	r2, #4294967295
 80105ee:	f04f 0300 	mov.w	r3, #0
 80105f2:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80105f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80105fa:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80105fe:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010602:	4290      	cmp	r0, r2
 8010604:	eb71 0303 	sbcs.w	r3, r1, r3
 8010608:	d20d      	bcs.n	8010626 <f_lseek+0x350>
 801060a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801060e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010612:	f003 0302 	and.w	r3, r3, #2
 8010616:	2b00      	cmp	r3, #0
 8010618:	d105      	bne.n	8010626 <f_lseek+0x350>
			ofs = fp->obj.objsize;
 801061a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801061e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010622:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
		}
		ifptr = fp->fptr;
 8010626:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801062a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801062e:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
		fp->fptr = nsect = 0;
 8010632:	2300      	movs	r3, #0
 8010634:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010638:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 801063c:	f04f 0200 	mov.w	r2, #0
 8010640:	f04f 0300 	mov.w	r3, #0
 8010644:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		if (ofs) {
 8010648:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801064c:	4313      	orrs	r3, r2
 801064e:	f000 818f 	beq.w	8010970 <f_lseek+0x69a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010652:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010656:	895b      	ldrh	r3, [r3, #10]
 8010658:	025b      	lsls	r3, r3, #9
 801065a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			if (ifptr > 0 &&
 801065e:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8010662:	4313      	orrs	r3, r2
 8010664:	d06b      	beq.n	801073e <f_lseek+0x468>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010666:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801066a:	1e51      	subs	r1, r2, #1
 801066c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8010670:	f143 33ff 	adc.w	r3, r3, #4294967295
 8010674:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010678:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801067c:	2200      	movs	r2, #0
 801067e:	67bb      	str	r3, [r7, #120]	; 0x78
 8010680:	67fa      	str	r2, [r7, #124]	; 0x7c
 8010682:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8010686:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801068a:	f7ef fe09 	bl	80002a0 <__aeabi_uldivmod>
 801068e:	4602      	mov	r2, r0
 8010690:	460b      	mov	r3, r1
 8010692:	4614      	mov	r4, r2
 8010694:	461d      	mov	r5, r3
 8010696:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 801069a:	1e51      	subs	r1, r2, #1
 801069c:	6739      	str	r1, [r7, #112]	; 0x70
 801069e:	f143 33ff 	adc.w	r3, r3, #4294967295
 80106a2:	677b      	str	r3, [r7, #116]	; 0x74
 80106a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80106a8:	2200      	movs	r2, #0
 80106aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80106ac:	66fa      	str	r2, [r7, #108]	; 0x6c
 80106ae:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80106b2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80106b6:	f7ef fdf3 	bl	80002a0 <__aeabi_uldivmod>
 80106ba:	4602      	mov	r2, r0
 80106bc:	460b      	mov	r3, r1
			if (ifptr > 0 &&
 80106be:	4294      	cmp	r4, r2
 80106c0:	eb75 0303 	sbcs.w	r3, r5, r3
 80106c4:	d33b      	bcc.n	801073e <f_lseek+0x468>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80106c6:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80106ca:	1e51      	subs	r1, r2, #1
 80106cc:	6639      	str	r1, [r7, #96]	; 0x60
 80106ce:	f143 33ff 	adc.w	r3, r3, #4294967295
 80106d2:	667b      	str	r3, [r7, #100]	; 0x64
 80106d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80106d8:	3b01      	subs	r3, #1
 80106da:	2200      	movs	r2, #0
 80106dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80106de:	65fa      	str	r2, [r7, #92]	; 0x5c
 80106e0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80106e4:	460b      	mov	r3, r1
 80106e6:	43db      	mvns	r3, r3
 80106e8:	653b      	str	r3, [r7, #80]	; 0x50
 80106ea:	4613      	mov	r3, r2
 80106ec:	43db      	mvns	r3, r3
 80106ee:	657b      	str	r3, [r7, #84]	; 0x54
 80106f0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80106f4:	4623      	mov	r3, r4
 80106f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80106fa:	4602      	mov	r2, r0
 80106fc:	4013      	ands	r3, r2
 80106fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8010700:	462b      	mov	r3, r5
 8010702:	460a      	mov	r2, r1
 8010704:	4013      	ands	r3, r2
 8010706:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010708:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801070c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8010710:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				ofs -= fp->fptr;
 8010714:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010718:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801071c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010720:	1a14      	subs	r4, r2, r0
 8010722:	60bc      	str	r4, [r7, #8]
 8010724:	eb63 0301 	sbc.w	r3, r3, r1
 8010728:	60fb      	str	r3, [r7, #12]
 801072a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801072e:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
				clst = fp->clust;
 8010732:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010738:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801073c:	e031      	b.n	80107a2 <f_lseek+0x4cc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801073e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010742:	689b      	ldr	r3, [r3, #8]
 8010744:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8010748:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801074c:	2b00      	cmp	r3, #0
 801074e:	d123      	bne.n	8010798 <f_lseek+0x4c2>
					clst = create_chain(&fp->obj, 0);
 8010750:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010754:	2100      	movs	r1, #0
 8010756:	4618      	mov	r0, r3
 8010758:	f7fc fe44 	bl	800d3e4 <create_chain>
 801075c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010760:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010764:	2b01      	cmp	r3, #1
 8010766:	d106      	bne.n	8010776 <f_lseek+0x4a0>
 8010768:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801076c:	2202      	movs	r2, #2
 801076e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010772:	2302      	movs	r3, #2
 8010774:	e176      	b.n	8010a64 <f_lseek+0x78e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010776:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801077a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801077e:	d106      	bne.n	801078e <f_lseek+0x4b8>
 8010780:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010784:	2201      	movs	r2, #1
 8010786:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801078a:	2301      	movs	r3, #1
 801078c:	e16a      	b.n	8010a64 <f_lseek+0x78e>
					fp->obj.sclust = clst;
 801078e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010792:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010796:	6093      	str	r3, [r2, #8]
				}
#endif
				fp->clust = clst;
 8010798:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801079c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80107a0:	6413      	str	r3, [r2, #64]	; 0x40
			}
			if (clst != 0) {
 80107a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	f000 80e2 	beq.w	8010970 <f_lseek+0x69a>
				while (ofs > bcs) {						/* Cluster following loop */
 80107ac:	e090      	b.n	80108d0 <f_lseek+0x5fa>
					ofs -= bcs; fp->fptr += bcs;
 80107ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80107b2:	2200      	movs	r2, #0
 80107b4:	643b      	str	r3, [r7, #64]	; 0x40
 80107b6:	647a      	str	r2, [r7, #68]	; 0x44
 80107b8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80107bc:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80107c0:	4621      	mov	r1, r4
 80107c2:	1a51      	subs	r1, r2, r1
 80107c4:	6039      	str	r1, [r7, #0]
 80107c6:	4629      	mov	r1, r5
 80107c8:	eb63 0301 	sbc.w	r3, r3, r1
 80107cc:	607b      	str	r3, [r7, #4]
 80107ce:	e9d7 3400 	ldrd	r3, r4, [r7]
 80107d2:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
 80107d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80107da:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80107de:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80107e2:	2000      	movs	r0, #0
 80107e4:	63b9      	str	r1, [r7, #56]	; 0x38
 80107e6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80107e8:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80107ec:	4621      	mov	r1, r4
 80107ee:	1851      	adds	r1, r2, r1
 80107f0:	6339      	str	r1, [r7, #48]	; 0x30
 80107f2:	4629      	mov	r1, r5
 80107f4:	414b      	adcs	r3, r1
 80107f6:	637b      	str	r3, [r7, #52]	; 0x34
 80107f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80107fc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8010800:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8010804:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010808:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801080c:	f003 0302 	and.w	r3, r3, #2
 8010810:	2b00      	cmp	r3, #0
 8010812:	d031      	beq.n	8010878 <f_lseek+0x5a2>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 8010814:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010818:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801081c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010820:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010824:	4282      	cmp	r2, r0
 8010826:	418b      	sbcs	r3, r1
 8010828:	d212      	bcs.n	8010850 <f_lseek+0x57a>
							fp->obj.objsize = fp->fptr;
 801082a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801082e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8010832:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010836:	e9c3 0104 	strd	r0, r1, [r3, #16]
							fp->flag |= FA_MODIFIED;
 801083a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801083e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010846:	b2db      	uxtb	r3, r3
 8010848:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801084c:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010850:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010854:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8010858:	4618      	mov	r0, r3
 801085a:	f7fc fdc3 	bl	800d3e4 <create_chain>
 801085e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
						if (clst == 0) {				/* Clip file size in case of disk full */
 8010862:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010866:	2b00      	cmp	r3, #0
 8010868:	d10f      	bne.n	801088a <f_lseek+0x5b4>
							ofs = 0; break;
 801086a:	f04f 0200 	mov.w	r2, #0
 801086e:	f04f 0300 	mov.w	r3, #0
 8010872:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 8010876:	e03b      	b.n	80108f0 <f_lseek+0x61a>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8010878:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801087c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8010880:	4618      	mov	r0, r3
 8010882:	f7fc f9ab 	bl	800cbdc <get_fat>
 8010886:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801088a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801088e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010892:	d106      	bne.n	80108a2 <f_lseek+0x5cc>
 8010894:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010898:	2201      	movs	r2, #1
 801089a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801089e:	2301      	movs	r3, #1
 80108a0:	e0e0      	b.n	8010a64 <f_lseek+0x78e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80108a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80108a6:	2b01      	cmp	r3, #1
 80108a8:	d906      	bls.n	80108b8 <f_lseek+0x5e2>
 80108aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80108ae:	69da      	ldr	r2, [r3, #28]
 80108b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80108b4:	4293      	cmp	r3, r2
 80108b6:	d306      	bcc.n	80108c6 <f_lseek+0x5f0>
 80108b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80108bc:	2202      	movs	r2, #2
 80108be:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80108c2:	2302      	movs	r3, #2
 80108c4:	e0ce      	b.n	8010a64 <f_lseek+0x78e>
					fp->clust = clst;
 80108c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80108ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80108ce:	6413      	str	r3, [r2, #64]	; 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 80108d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80108d4:	2200      	movs	r2, #0
 80108d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80108d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80108da:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80108de:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80108e2:	4621      	mov	r1, r4
 80108e4:	4291      	cmp	r1, r2
 80108e6:	4629      	mov	r1, r5
 80108e8:	eb71 0303 	sbcs.w	r3, r1, r3
 80108ec:	f4ff af5f 	bcc.w	80107ae <f_lseek+0x4d8>
				}
				fp->fptr += ofs;
 80108f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80108f4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80108f8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80108fc:	1884      	adds	r4, r0, r2
 80108fe:	623c      	str	r4, [r7, #32]
 8010900:	eb41 0303 	adc.w	r3, r1, r3
 8010904:	627b      	str	r3, [r7, #36]	; 0x24
 8010906:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801090a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801090e:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
				if (ofs % SS(fs)) {
 8010912:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8010916:	f3c2 0308 	ubfx	r3, r2, #0, #9
 801091a:	61bb      	str	r3, [r7, #24]
 801091c:	2300      	movs	r3, #0
 801091e:	61fb      	str	r3, [r7, #28]
 8010920:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8010924:	460b      	mov	r3, r1
 8010926:	4313      	orrs	r3, r2
 8010928:	d022      	beq.n	8010970 <f_lseek+0x69a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801092a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801092e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8010932:	4618      	mov	r0, r3
 8010934:	f7fc f932 	bl	800cb9c <clust2sect>
 8010938:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801093c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010940:	2b00      	cmp	r3, #0
 8010942:	d106      	bne.n	8010952 <f_lseek+0x67c>
 8010944:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010948:	2202      	movs	r2, #2
 801094a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801094e:	2302      	movs	r3, #2
 8010950:	e088      	b.n	8010a64 <f_lseek+0x78e>
					nsect += (DWORD)(ofs / SS(fs));
 8010952:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8010956:	f04f 0200 	mov.w	r2, #0
 801095a:	f04f 0300 	mov.w	r3, #0
 801095e:	0a42      	lsrs	r2, r0, #9
 8010960:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8010964:	0a4b      	lsrs	r3, r1, #9
 8010966:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801096a:	4413      	add	r3, r2
 801096c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8010970:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010974:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010978:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 801097c:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8010980:	4290      	cmp	r0, r2
 8010982:	eb71 0303 	sbcs.w	r3, r1, r3
 8010986:	d212      	bcs.n	80109ae <f_lseek+0x6d8>
			fp->obj.objsize = fp->fptr;
 8010988:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801098c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010990:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8010994:	e9c1 2304 	strd	r2, r3, [r1, #16]
			fp->flag |= FA_MODIFIED;
 8010998:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801099c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80109a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109a4:	b2da      	uxtb	r2, r3
 80109a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80109aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80109ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80109b2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80109b6:	f3c2 0308 	ubfx	r3, r2, #0, #9
 80109ba:	613b      	str	r3, [r7, #16]
 80109bc:	2300      	movs	r3, #0
 80109be:	617b      	str	r3, [r7, #20]
 80109c0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80109c4:	460b      	mov	r3, r1
 80109c6:	4313      	orrs	r3, r2
 80109c8:	d04a      	beq.n	8010a60 <f_lseek+0x78a>
 80109ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80109ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109d0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80109d4:	429a      	cmp	r2, r3
 80109d6:	d043      	beq.n	8010a60 <f_lseek+0x78a>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80109d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80109dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80109e0:	b25b      	sxtb	r3, r3
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	da21      	bge.n	8010a2a <f_lseek+0x754>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80109e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80109ea:	7858      	ldrb	r0, [r3, #1]
 80109ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80109f0:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80109f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80109f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80109fa:	2301      	movs	r3, #1
 80109fc:	f7fb fbe0 	bl	800c1c0 <disk_write>
 8010a00:	4603      	mov	r3, r0
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d006      	beq.n	8010a14 <f_lseek+0x73e>
 8010a06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010a0a:	2201      	movs	r2, #1
 8010a0c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010a10:	2301      	movs	r3, #1
 8010a12:	e027      	b.n	8010a64 <f_lseek+0x78e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010a14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010a18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a20:	b2da      	uxtb	r2, r3
 8010a22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010a26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010a2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010a2e:	7858      	ldrb	r0, [r3, #1]
 8010a30:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010a34:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010a38:	2301      	movs	r3, #1
 8010a3a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8010a3e:	f7fb fb9f 	bl	800c180 <disk_read>
 8010a42:	4603      	mov	r3, r0
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d006      	beq.n	8010a56 <f_lseek+0x780>
 8010a48:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010a4c:	2201      	movs	r2, #1
 8010a4e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010a52:	2301      	movs	r3, #1
 8010a54:	e006      	b.n	8010a64 <f_lseek+0x78e>
#endif
			fp->sect = nsect;
 8010a56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010a5a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8010a5e:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}

	LEAVE_FF(fs, res);
 8010a60:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8010a64:	4618      	mov	r0, r3
 8010a66:	37d8      	adds	r7, #216	; 0xd8
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010a6e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8010a6e:	b580      	push	{r7, lr}
 8010a70:	b09a      	sub	sp, #104	; 0x68
 8010a72:	af00      	add	r7, sp, #0
 8010a74:	60f8      	str	r0, [r7, #12]
 8010a76:	60b9      	str	r1, [r7, #8]
 8010a78:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8010a7a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8010a7e:	f107 030c 	add.w	r3, r7, #12
 8010a82:	2200      	movs	r2, #0
 8010a84:	4618      	mov	r0, r3
 8010a86:	f7fe fa91 	bl	800efac <find_volume>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8010a90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	f040 80e6 	bne.w	8010c66 <f_getfree+0x1f8>
		*fatfs = fs;				/* Return ptr to the fs object */
 8010a9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8010aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010aa2:	699a      	ldr	r2, [r3, #24]
 8010aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010aa6:	69db      	ldr	r3, [r3, #28]
 8010aa8:	3b02      	subs	r3, #2
 8010aaa:	429a      	cmp	r2, r3
 8010aac:	d804      	bhi.n	8010ab8 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8010aae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ab0:	699a      	ldr	r2, [r3, #24]
 8010ab2:	68bb      	ldr	r3, [r7, #8]
 8010ab4:	601a      	str	r2, [r3, #0]
 8010ab6:	e0d6      	b.n	8010c66 <f_getfree+0x1f8>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8010ab8:	2300      	movs	r3, #0
 8010aba:	663b      	str	r3, [r7, #96]	; 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8010abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010abe:	781b      	ldrb	r3, [r3, #0]
 8010ac0:	2b01      	cmp	r3, #1
 8010ac2:	d128      	bne.n	8010b16 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8010ac4:	2302      	movs	r3, #2
 8010ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010aca:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 8010acc:	f107 0310 	add.w	r3, r7, #16
 8010ad0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	f7fc f882 	bl	800cbdc <get_fat>
 8010ad8:	6478      	str	r0, [r7, #68]	; 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8010ada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ae0:	d103      	bne.n	8010aea <f_getfree+0x7c>
 8010ae2:	2301      	movs	r3, #1
 8010ae4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010ae8:	e0b0      	b.n	8010c4c <f_getfree+0x1de>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8010aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010aec:	2b01      	cmp	r3, #1
 8010aee:	d103      	bne.n	8010af8 <f_getfree+0x8a>
 8010af0:	2302      	movs	r3, #2
 8010af2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010af6:	e0a9      	b.n	8010c4c <f_getfree+0x1de>
					if (stat == 0) nfree++;
 8010af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d102      	bne.n	8010b04 <f_getfree+0x96>
 8010afe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010b00:	3301      	adds	r3, #1
 8010b02:	663b      	str	r3, [r7, #96]	; 0x60
				} while (++clst < fs->n_fatent);
 8010b04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b06:	3301      	adds	r3, #1
 8010b08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010b0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b0c:	69db      	ldr	r3, [r3, #28]
 8010b0e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010b10:	429a      	cmp	r2, r3
 8010b12:	d3db      	bcc.n	8010acc <f_getfree+0x5e>
 8010b14:	e09a      	b.n	8010c4c <f_getfree+0x1de>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 8010b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b18:	781b      	ldrb	r3, [r3, #0]
 8010b1a:	2b04      	cmp	r3, #4
 8010b1c:	d146      	bne.n	8010bac <f_getfree+0x13e>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 8010b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b20:	69db      	ldr	r3, [r3, #28]
 8010b22:	3b02      	subs	r3, #2
 8010b24:	65fb      	str	r3, [r7, #92]	; 0x5c
					sect = fs->database;
 8010b26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b2a:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0;
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	657b      	str	r3, [r7, #84]	; 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 8010b30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d10d      	bne.n	8010b52 <f_getfree+0xe4>
 8010b36:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010b38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010b3a:	1c5a      	adds	r2, r3, #1
 8010b3c:	65ba      	str	r2, [r7, #88]	; 0x58
 8010b3e:	4619      	mov	r1, r3
 8010b40:	f7fb ff90 	bl	800ca64 <move_window>
 8010b44:	4603      	mov	r3, r0
 8010b46:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010b4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d179      	bne.n	8010c46 <f_getfree+0x1d8>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 8010b52:	2308      	movs	r3, #8
 8010b54:	64bb      	str	r3, [r7, #72]	; 0x48
 8010b56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b5a:	4413      	add	r3, r2
 8010b5c:	3338      	adds	r3, #56	; 0x38
 8010b5e:	781b      	ldrb	r3, [r3, #0]
 8010b60:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8010b64:	e013      	b.n	8010b8e <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 8010b66:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010b6a:	f003 0301 	and.w	r3, r3, #1
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d102      	bne.n	8010b78 <f_getfree+0x10a>
 8010b72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010b74:	3301      	adds	r3, #1
 8010b76:	663b      	str	r3, [r7, #96]	; 0x60
							bm >>= 1;
 8010b78:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010b7c:	085b      	lsrs	r3, r3, #1
 8010b7e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 8010b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b84:	3b01      	subs	r3, #1
 8010b86:	64bb      	str	r3, [r7, #72]	; 0x48
 8010b88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b8a:	3b01      	subs	r3, #1
 8010b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d002      	beq.n	8010b9a <f_getfree+0x12c>
 8010b94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d1e5      	bne.n	8010b66 <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 8010b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b9c:	3301      	adds	r3, #1
 8010b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ba2:	657b      	str	r3, [r7, #84]	; 0x54
					} while (clst);
 8010ba4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d1c2      	bne.n	8010b30 <f_getfree+0xc2>
 8010baa:	e04f      	b.n	8010c4c <f_getfree+0x1de>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8010bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bae:	69db      	ldr	r3, [r3, #28]
 8010bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010bb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bb6:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0; p = 0;
 8010bb8:	2300      	movs	r3, #0
 8010bba:	657b      	str	r3, [r7, #84]	; 0x54
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	653b      	str	r3, [r7, #80]	; 0x50
					do {
						if (i == 0) {
 8010bc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d113      	bne.n	8010bee <f_getfree+0x180>
							res = move_window(fs, sect++);
 8010bc6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010bc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010bca:	1c5a      	adds	r2, r3, #1
 8010bcc:	65ba      	str	r2, [r7, #88]	; 0x58
 8010bce:	4619      	mov	r1, r3
 8010bd0:	f7fb ff48 	bl	800ca64 <move_window>
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							if (res != FR_OK) break;
 8010bda:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d133      	bne.n	8010c4a <f_getfree+0x1dc>
							p = fs->win;
 8010be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010be4:	3338      	adds	r3, #56	; 0x38
 8010be6:	653b      	str	r3, [r7, #80]	; 0x50
							i = SS(fs);
 8010be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010bec:	657b      	str	r3, [r7, #84]	; 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 8010bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bf0:	781b      	ldrb	r3, [r3, #0]
 8010bf2:	2b02      	cmp	r3, #2
 8010bf4:	d10f      	bne.n	8010c16 <f_getfree+0x1a8>
							if (ld_word(p) == 0) nfree++;
 8010bf6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010bf8:	f7fb fb20 	bl	800c23c <ld_word>
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d102      	bne.n	8010c08 <f_getfree+0x19a>
 8010c02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010c04:	3301      	adds	r3, #1
 8010c06:	663b      	str	r3, [r7, #96]	; 0x60
							p += 2; i -= 2;
 8010c08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c0a:	3302      	adds	r3, #2
 8010c0c:	653b      	str	r3, [r7, #80]	; 0x50
 8010c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c10:	3b02      	subs	r3, #2
 8010c12:	657b      	str	r3, [r7, #84]	; 0x54
 8010c14:	e010      	b.n	8010c38 <f_getfree+0x1ca>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8010c16:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010c18:	f7fb fb28 	bl	800c26c <ld_dword>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d102      	bne.n	8010c2c <f_getfree+0x1be>
 8010c26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010c28:	3301      	adds	r3, #1
 8010c2a:	663b      	str	r3, [r7, #96]	; 0x60
							p += 4; i -= 4;
 8010c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c2e:	3304      	adds	r3, #4
 8010c30:	653b      	str	r3, [r7, #80]	; 0x50
 8010c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c34:	3b04      	subs	r3, #4
 8010c36:	657b      	str	r3, [r7, #84]	; 0x54
						}
					} while (--clst);
 8010c38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010c3a:	3b01      	subs	r3, #1
 8010c3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d1bd      	bne.n	8010bc0 <f_getfree+0x152>
 8010c44:	e002      	b.n	8010c4c <f_getfree+0x1de>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 8010c46:	bf00      	nop
 8010c48:	e000      	b.n	8010c4c <f_getfree+0x1de>
							if (res != FR_OK) break;
 8010c4a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8010c4c:	68bb      	ldr	r3, [r7, #8]
 8010c4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010c50:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8010c52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010c56:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8010c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c5a:	791a      	ldrb	r2, [r3, #4]
 8010c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c5e:	f042 0201 	orr.w	r2, r2, #1
 8010c62:	b2d2      	uxtb	r2, r2
 8010c64:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8010c66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	3768      	adds	r7, #104	; 0x68
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}
	...

08010c74 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010c74:	b480      	push	{r7}
 8010c76:	b087      	sub	sp, #28
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	60f8      	str	r0, [r7, #12]
 8010c7c:	60b9      	str	r1, [r7, #8]
 8010c7e:	4613      	mov	r3, r2
 8010c80:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010c82:	2301      	movs	r3, #1
 8010c84:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010c86:	2300      	movs	r3, #0
 8010c88:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010c8a:	4b1f      	ldr	r3, [pc, #124]	; (8010d08 <FATFS_LinkDriverEx+0x94>)
 8010c8c:	7e1b      	ldrb	r3, [r3, #24]
 8010c8e:	b2db      	uxtb	r3, r3
 8010c90:	2b03      	cmp	r3, #3
 8010c92:	d831      	bhi.n	8010cf8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010c94:	4b1c      	ldr	r3, [pc, #112]	; (8010d08 <FATFS_LinkDriverEx+0x94>)
 8010c96:	7e1b      	ldrb	r3, [r3, #24]
 8010c98:	b2db      	uxtb	r3, r3
 8010c9a:	461a      	mov	r2, r3
 8010c9c:	4b1a      	ldr	r3, [pc, #104]	; (8010d08 <FATFS_LinkDriverEx+0x94>)
 8010c9e:	2100      	movs	r1, #0
 8010ca0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010ca2:	4b19      	ldr	r3, [pc, #100]	; (8010d08 <FATFS_LinkDriverEx+0x94>)
 8010ca4:	7e1b      	ldrb	r3, [r3, #24]
 8010ca6:	b2db      	uxtb	r3, r3
 8010ca8:	4a17      	ldr	r2, [pc, #92]	; (8010d08 <FATFS_LinkDriverEx+0x94>)
 8010caa:	009b      	lsls	r3, r3, #2
 8010cac:	4413      	add	r3, r2
 8010cae:	68fa      	ldr	r2, [r7, #12]
 8010cb0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010cb2:	4b15      	ldr	r3, [pc, #84]	; (8010d08 <FATFS_LinkDriverEx+0x94>)
 8010cb4:	7e1b      	ldrb	r3, [r3, #24]
 8010cb6:	b2db      	uxtb	r3, r3
 8010cb8:	461a      	mov	r2, r3
 8010cba:	4b13      	ldr	r3, [pc, #76]	; (8010d08 <FATFS_LinkDriverEx+0x94>)
 8010cbc:	4413      	add	r3, r2
 8010cbe:	79fa      	ldrb	r2, [r7, #7]
 8010cc0:	751a      	strb	r2, [r3, #20]
    DiskNum = disk.nbr++;
 8010cc2:	4b11      	ldr	r3, [pc, #68]	; (8010d08 <FATFS_LinkDriverEx+0x94>)
 8010cc4:	7e1b      	ldrb	r3, [r3, #24]
 8010cc6:	b2db      	uxtb	r3, r3
 8010cc8:	1c5a      	adds	r2, r3, #1
 8010cca:	b2d1      	uxtb	r1, r2
 8010ccc:	4a0e      	ldr	r2, [pc, #56]	; (8010d08 <FATFS_LinkDriverEx+0x94>)
 8010cce:	7611      	strb	r1, [r2, #24]
 8010cd0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010cd2:	7dbb      	ldrb	r3, [r7, #22]
 8010cd4:	3330      	adds	r3, #48	; 0x30
 8010cd6:	b2da      	uxtb	r2, r3
 8010cd8:	68bb      	ldr	r3, [r7, #8]
 8010cda:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010cdc:	68bb      	ldr	r3, [r7, #8]
 8010cde:	3301      	adds	r3, #1
 8010ce0:	223a      	movs	r2, #58	; 0x3a
 8010ce2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010ce4:	68bb      	ldr	r3, [r7, #8]
 8010ce6:	3302      	adds	r3, #2
 8010ce8:	222f      	movs	r2, #47	; 0x2f
 8010cea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010cec:	68bb      	ldr	r3, [r7, #8]
 8010cee:	3303      	adds	r3, #3
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	371c      	adds	r7, #28
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d04:	4770      	bx	lr
 8010d06:	bf00      	nop
 8010d08:	20002204 	.word	0x20002204

08010d0c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b082      	sub	sp, #8
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
 8010d14:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010d16:	2200      	movs	r2, #0
 8010d18:	6839      	ldr	r1, [r7, #0]
 8010d1a:	6878      	ldr	r0, [r7, #4]
 8010d1c:	f7ff ffaa 	bl	8010c74 <FATFS_LinkDriverEx>
 8010d20:	4603      	mov	r3, r0
}
 8010d22:	4618      	mov	r0, r3
 8010d24:	3708      	adds	r7, #8
 8010d26:	46bd      	mov	sp, r7
 8010d28:	bd80      	pop	{r7, pc}
	...

08010d2c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010d2c:	b480      	push	{r7}
 8010d2e:	b085      	sub	sp, #20
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	4603      	mov	r3, r0
 8010d34:	6039      	str	r1, [r7, #0]
 8010d36:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010d38:	88fb      	ldrh	r3, [r7, #6]
 8010d3a:	2b7f      	cmp	r3, #127	; 0x7f
 8010d3c:	d802      	bhi.n	8010d44 <ff_convert+0x18>
		c = chr;
 8010d3e:	88fb      	ldrh	r3, [r7, #6]
 8010d40:	81fb      	strh	r3, [r7, #14]
 8010d42:	e025      	b.n	8010d90 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010d44:	683b      	ldr	r3, [r7, #0]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d00b      	beq.n	8010d62 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010d4a:	88fb      	ldrh	r3, [r7, #6]
 8010d4c:	2bff      	cmp	r3, #255	; 0xff
 8010d4e:	d805      	bhi.n	8010d5c <ff_convert+0x30>
 8010d50:	88fb      	ldrh	r3, [r7, #6]
 8010d52:	3b80      	subs	r3, #128	; 0x80
 8010d54:	4a12      	ldr	r2, [pc, #72]	; (8010da0 <ff_convert+0x74>)
 8010d56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d5a:	e000      	b.n	8010d5e <ff_convert+0x32>
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	81fb      	strh	r3, [r7, #14]
 8010d60:	e016      	b.n	8010d90 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8010d62:	2300      	movs	r3, #0
 8010d64:	81fb      	strh	r3, [r7, #14]
 8010d66:	e009      	b.n	8010d7c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010d68:	89fb      	ldrh	r3, [r7, #14]
 8010d6a:	4a0d      	ldr	r2, [pc, #52]	; (8010da0 <ff_convert+0x74>)
 8010d6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d70:	88fa      	ldrh	r2, [r7, #6]
 8010d72:	429a      	cmp	r2, r3
 8010d74:	d006      	beq.n	8010d84 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010d76:	89fb      	ldrh	r3, [r7, #14]
 8010d78:	3301      	adds	r3, #1
 8010d7a:	81fb      	strh	r3, [r7, #14]
 8010d7c:	89fb      	ldrh	r3, [r7, #14]
 8010d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8010d80:	d9f2      	bls.n	8010d68 <ff_convert+0x3c>
 8010d82:	e000      	b.n	8010d86 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010d84:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010d86:	89fb      	ldrh	r3, [r7, #14]
 8010d88:	3380      	adds	r3, #128	; 0x80
 8010d8a:	b29b      	uxth	r3, r3
 8010d8c:	b2db      	uxtb	r3, r3
 8010d8e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010d90:	89fb      	ldrh	r3, [r7, #14]
}
 8010d92:	4618      	mov	r0, r3
 8010d94:	3714      	adds	r7, #20
 8010d96:	46bd      	mov	sp, r7
 8010d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9c:	4770      	bx	lr
 8010d9e:	bf00      	nop
 8010da0:	080168f0 	.word	0x080168f0

08010da4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010da4:	b480      	push	{r7}
 8010da6:	b087      	sub	sp, #28
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	4603      	mov	r3, r0
 8010dac:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8010dae:	88fb      	ldrh	r3, [r7, #6]
 8010db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010db4:	d201      	bcs.n	8010dba <ff_wtoupper+0x16>
 8010db6:	4b3e      	ldr	r3, [pc, #248]	; (8010eb0 <ff_wtoupper+0x10c>)
 8010db8:	e000      	b.n	8010dbc <ff_wtoupper+0x18>
 8010dba:	4b3e      	ldr	r3, [pc, #248]	; (8010eb4 <ff_wtoupper+0x110>)
 8010dbc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8010dbe:	697b      	ldr	r3, [r7, #20]
 8010dc0:	1c9a      	adds	r2, r3, #2
 8010dc2:	617a      	str	r2, [r7, #20]
 8010dc4:	881b      	ldrh	r3, [r3, #0]
 8010dc6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010dc8:	8a7b      	ldrh	r3, [r7, #18]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d068      	beq.n	8010ea0 <ff_wtoupper+0xfc>
 8010dce:	88fa      	ldrh	r2, [r7, #6]
 8010dd0:	8a7b      	ldrh	r3, [r7, #18]
 8010dd2:	429a      	cmp	r2, r3
 8010dd4:	d364      	bcc.n	8010ea0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010dd6:	697b      	ldr	r3, [r7, #20]
 8010dd8:	1c9a      	adds	r2, r3, #2
 8010dda:	617a      	str	r2, [r7, #20]
 8010ddc:	881b      	ldrh	r3, [r3, #0]
 8010dde:	823b      	strh	r3, [r7, #16]
 8010de0:	8a3b      	ldrh	r3, [r7, #16]
 8010de2:	0a1b      	lsrs	r3, r3, #8
 8010de4:	81fb      	strh	r3, [r7, #14]
 8010de6:	8a3b      	ldrh	r3, [r7, #16]
 8010de8:	b2db      	uxtb	r3, r3
 8010dea:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010dec:	88fa      	ldrh	r2, [r7, #6]
 8010dee:	8a79      	ldrh	r1, [r7, #18]
 8010df0:	8a3b      	ldrh	r3, [r7, #16]
 8010df2:	440b      	add	r3, r1
 8010df4:	429a      	cmp	r2, r3
 8010df6:	da49      	bge.n	8010e8c <ff_wtoupper+0xe8>
			switch (cmd) {
 8010df8:	89fb      	ldrh	r3, [r7, #14]
 8010dfa:	2b08      	cmp	r3, #8
 8010dfc:	d84f      	bhi.n	8010e9e <ff_wtoupper+0xfa>
 8010dfe:	a201      	add	r2, pc, #4	; (adr r2, 8010e04 <ff_wtoupper+0x60>)
 8010e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e04:	08010e29 	.word	0x08010e29
 8010e08:	08010e3b 	.word	0x08010e3b
 8010e0c:	08010e51 	.word	0x08010e51
 8010e10:	08010e59 	.word	0x08010e59
 8010e14:	08010e61 	.word	0x08010e61
 8010e18:	08010e69 	.word	0x08010e69
 8010e1c:	08010e71 	.word	0x08010e71
 8010e20:	08010e79 	.word	0x08010e79
 8010e24:	08010e81 	.word	0x08010e81
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010e28:	88fa      	ldrh	r2, [r7, #6]
 8010e2a:	8a7b      	ldrh	r3, [r7, #18]
 8010e2c:	1ad3      	subs	r3, r2, r3
 8010e2e:	005b      	lsls	r3, r3, #1
 8010e30:	697a      	ldr	r2, [r7, #20]
 8010e32:	4413      	add	r3, r2
 8010e34:	881b      	ldrh	r3, [r3, #0]
 8010e36:	80fb      	strh	r3, [r7, #6]
 8010e38:	e027      	b.n	8010e8a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8010e3a:	88fa      	ldrh	r2, [r7, #6]
 8010e3c:	8a7b      	ldrh	r3, [r7, #18]
 8010e3e:	1ad3      	subs	r3, r2, r3
 8010e40:	b29b      	uxth	r3, r3
 8010e42:	f003 0301 	and.w	r3, r3, #1
 8010e46:	b29b      	uxth	r3, r3
 8010e48:	88fa      	ldrh	r2, [r7, #6]
 8010e4a:	1ad3      	subs	r3, r2, r3
 8010e4c:	80fb      	strh	r3, [r7, #6]
 8010e4e:	e01c      	b.n	8010e8a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010e50:	88fb      	ldrh	r3, [r7, #6]
 8010e52:	3b10      	subs	r3, #16
 8010e54:	80fb      	strh	r3, [r7, #6]
 8010e56:	e018      	b.n	8010e8a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010e58:	88fb      	ldrh	r3, [r7, #6]
 8010e5a:	3b20      	subs	r3, #32
 8010e5c:	80fb      	strh	r3, [r7, #6]
 8010e5e:	e014      	b.n	8010e8a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010e60:	88fb      	ldrh	r3, [r7, #6]
 8010e62:	3b30      	subs	r3, #48	; 0x30
 8010e64:	80fb      	strh	r3, [r7, #6]
 8010e66:	e010      	b.n	8010e8a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010e68:	88fb      	ldrh	r3, [r7, #6]
 8010e6a:	3b1a      	subs	r3, #26
 8010e6c:	80fb      	strh	r3, [r7, #6]
 8010e6e:	e00c      	b.n	8010e8a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010e70:	88fb      	ldrh	r3, [r7, #6]
 8010e72:	3308      	adds	r3, #8
 8010e74:	80fb      	strh	r3, [r7, #6]
 8010e76:	e008      	b.n	8010e8a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010e78:	88fb      	ldrh	r3, [r7, #6]
 8010e7a:	3b50      	subs	r3, #80	; 0x50
 8010e7c:	80fb      	strh	r3, [r7, #6]
 8010e7e:	e004      	b.n	8010e8a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010e80:	88fb      	ldrh	r3, [r7, #6]
 8010e82:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8010e86:	80fb      	strh	r3, [r7, #6]
 8010e88:	bf00      	nop
			}
			break;
 8010e8a:	e008      	b.n	8010e9e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010e8c:	89fb      	ldrh	r3, [r7, #14]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d195      	bne.n	8010dbe <ff_wtoupper+0x1a>
 8010e92:	8a3b      	ldrh	r3, [r7, #16]
 8010e94:	005b      	lsls	r3, r3, #1
 8010e96:	697a      	ldr	r2, [r7, #20]
 8010e98:	4413      	add	r3, r2
 8010e9a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010e9c:	e78f      	b.n	8010dbe <ff_wtoupper+0x1a>
			break;
 8010e9e:	bf00      	nop
	}

	return chr;
 8010ea0:	88fb      	ldrh	r3, [r7, #6]
}
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	371c      	adds	r7, #28
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eac:	4770      	bx	lr
 8010eae:	bf00      	nop
 8010eb0:	080169f0 	.word	0x080169f0
 8010eb4:	08016be4 	.word	0x08016be4

08010eb8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8010eb8:	b480      	push	{r7}
 8010eba:	b085      	sub	sp, #20
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8010ec6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010eca:	2b84      	cmp	r3, #132	; 0x84
 8010ecc:	d005      	beq.n	8010eda <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8010ece:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	4413      	add	r3, r2
 8010ed6:	3303      	adds	r3, #3
 8010ed8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8010eda:	68fb      	ldr	r3, [r7, #12]
}
 8010edc:	4618      	mov	r0, r3
 8010ede:	3714      	adds	r7, #20
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee6:	4770      	bx	lr

08010ee8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8010ee8:	b480      	push	{r7}
 8010eea:	b083      	sub	sp, #12
 8010eec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010eee:	f3ef 8305 	mrs	r3, IPSR
 8010ef2:	607b      	str	r3, [r7, #4]
  return(result);
 8010ef4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	bf14      	ite	ne
 8010efa:	2301      	movne	r3, #1
 8010efc:	2300      	moveq	r3, #0
 8010efe:	b2db      	uxtb	r3, r3
}
 8010f00:	4618      	mov	r0, r3
 8010f02:	370c      	adds	r7, #12
 8010f04:	46bd      	mov	sp, r7
 8010f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0a:	4770      	bx	lr

08010f0c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8010f10:	f001 f916 	bl	8012140 <vTaskStartScheduler>
  
  return osOK;
 8010f14:	2300      	movs	r3, #0
}
 8010f16:	4618      	mov	r0, r3
 8010f18:	bd80      	pop	{r7, pc}

08010f1a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010f1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f1c:	b089      	sub	sp, #36	; 0x24
 8010f1e:	af04      	add	r7, sp, #16
 8010f20:	6078      	str	r0, [r7, #4]
 8010f22:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	695b      	ldr	r3, [r3, #20]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d020      	beq.n	8010f6e <osThreadCreate+0x54>
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	699b      	ldr	r3, [r3, #24]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d01c      	beq.n	8010f6e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	685c      	ldr	r4, [r3, #4]
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	681d      	ldr	r5, [r3, #0]
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	691e      	ldr	r6, [r3, #16]
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010f46:	4618      	mov	r0, r3
 8010f48:	f7ff ffb6 	bl	8010eb8 <makeFreeRtosPriority>
 8010f4c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	695b      	ldr	r3, [r3, #20]
 8010f52:	687a      	ldr	r2, [r7, #4]
 8010f54:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010f56:	9202      	str	r2, [sp, #8]
 8010f58:	9301      	str	r3, [sp, #4]
 8010f5a:	9100      	str	r1, [sp, #0]
 8010f5c:	683b      	ldr	r3, [r7, #0]
 8010f5e:	4632      	mov	r2, r6
 8010f60:	4629      	mov	r1, r5
 8010f62:	4620      	mov	r0, r4
 8010f64:	f000 ff0e 	bl	8011d84 <xTaskCreateStatic>
 8010f68:	4603      	mov	r3, r0
 8010f6a:	60fb      	str	r3, [r7, #12]
 8010f6c:	e01c      	b.n	8010fa8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	685c      	ldr	r4, [r3, #4]
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010f7a:	b29e      	uxth	r6, r3
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010f82:	4618      	mov	r0, r3
 8010f84:	f7ff ff98 	bl	8010eb8 <makeFreeRtosPriority>
 8010f88:	4602      	mov	r2, r0
 8010f8a:	f107 030c 	add.w	r3, r7, #12
 8010f8e:	9301      	str	r3, [sp, #4]
 8010f90:	9200      	str	r2, [sp, #0]
 8010f92:	683b      	ldr	r3, [r7, #0]
 8010f94:	4632      	mov	r2, r6
 8010f96:	4629      	mov	r1, r5
 8010f98:	4620      	mov	r0, r4
 8010f9a:	f000 ff50 	bl	8011e3e <xTaskCreate>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	2b01      	cmp	r3, #1
 8010fa2:	d001      	beq.n	8010fa8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	e000      	b.n	8010faa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8010fa8:	68fb      	ldr	r3, [r7, #12]
}
 8010faa:	4618      	mov	r0, r3
 8010fac:	3714      	adds	r7, #20
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010fb2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8010fb2:	b580      	push	{r7, lr}
 8010fb4:	b084      	sub	sp, #16
 8010fb6:	af00      	add	r7, sp, #0
 8010fb8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d001      	beq.n	8010fc8 <osDelay+0x16>
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	e000      	b.n	8010fca <osDelay+0x18>
 8010fc8:	2301      	movs	r3, #1
 8010fca:	4618      	mov	r0, r3
 8010fcc:	f001 f884 	bl	80120d8 <vTaskDelay>
  
  return osOK;
 8010fd0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	3710      	adds	r7, #16
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	bd80      	pop	{r7, pc}

08010fda <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8010fda:	b590      	push	{r4, r7, lr}
 8010fdc:	b085      	sub	sp, #20
 8010fde:	af02      	add	r7, sp, #8
 8010fe0:	6078      	str	r0, [r7, #4]
 8010fe2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	689b      	ldr	r3, [r3, #8]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d011      	beq.n	8011010 <osMessageCreate+0x36>
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	68db      	ldr	r3, [r3, #12]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d00d      	beq.n	8011010 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	6818      	ldr	r0, [r3, #0]
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	6859      	ldr	r1, [r3, #4]
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	689a      	ldr	r2, [r3, #8]
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	68db      	ldr	r3, [r3, #12]
 8011004:	2400      	movs	r4, #0
 8011006:	9400      	str	r4, [sp, #0]
 8011008:	f000 f9e0 	bl	80113cc <xQueueGenericCreateStatic>
 801100c:	4603      	mov	r3, r0
 801100e:	e008      	b.n	8011022 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	6818      	ldr	r0, [r3, #0]
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	685b      	ldr	r3, [r3, #4]
 8011018:	2200      	movs	r2, #0
 801101a:	4619      	mov	r1, r3
 801101c:	f000 fa4e 	bl	80114bc <xQueueGenericCreate>
 8011020:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8011022:	4618      	mov	r0, r3
 8011024:	370c      	adds	r7, #12
 8011026:	46bd      	mov	sp, r7
 8011028:	bd90      	pop	{r4, r7, pc}
	...

0801102c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b086      	sub	sp, #24
 8011030:	af00      	add	r7, sp, #0
 8011032:	60f8      	str	r0, [r7, #12]
 8011034:	60b9      	str	r1, [r7, #8]
 8011036:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8011038:	2300      	movs	r3, #0
 801103a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8011040:	697b      	ldr	r3, [r7, #20]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d101      	bne.n	801104a <osMessagePut+0x1e>
    ticks = 1;
 8011046:	2301      	movs	r3, #1
 8011048:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 801104a:	f7ff ff4d 	bl	8010ee8 <inHandlerMode>
 801104e:	4603      	mov	r3, r0
 8011050:	2b00      	cmp	r3, #0
 8011052:	d018      	beq.n	8011086 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8011054:	f107 0210 	add.w	r2, r7, #16
 8011058:	f107 0108 	add.w	r1, r7, #8
 801105c:	2300      	movs	r3, #0
 801105e:	68f8      	ldr	r0, [r7, #12]
 8011060:	f000 fb84 	bl	801176c <xQueueGenericSendFromISR>
 8011064:	4603      	mov	r3, r0
 8011066:	2b01      	cmp	r3, #1
 8011068:	d001      	beq.n	801106e <osMessagePut+0x42>
      return osErrorOS;
 801106a:	23ff      	movs	r3, #255	; 0xff
 801106c:	e018      	b.n	80110a0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801106e:	693b      	ldr	r3, [r7, #16]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d014      	beq.n	801109e <osMessagePut+0x72>
 8011074:	4b0c      	ldr	r3, [pc, #48]	; (80110a8 <osMessagePut+0x7c>)
 8011076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801107a:	601a      	str	r2, [r3, #0]
 801107c:	f3bf 8f4f 	dsb	sy
 8011080:	f3bf 8f6f 	isb	sy
 8011084:	e00b      	b.n	801109e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8011086:	f107 0108 	add.w	r1, r7, #8
 801108a:	2300      	movs	r3, #0
 801108c:	697a      	ldr	r2, [r7, #20]
 801108e:	68f8      	ldr	r0, [r7, #12]
 8011090:	f000 fa6e 	bl	8011570 <xQueueGenericSend>
 8011094:	4603      	mov	r3, r0
 8011096:	2b01      	cmp	r3, #1
 8011098:	d001      	beq.n	801109e <osMessagePut+0x72>
      return osErrorOS;
 801109a:	23ff      	movs	r3, #255	; 0xff
 801109c:	e000      	b.n	80110a0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 801109e:	2300      	movs	r3, #0
}
 80110a0:	4618      	mov	r0, r3
 80110a2:	3718      	adds	r7, #24
 80110a4:	46bd      	mov	sp, r7
 80110a6:	bd80      	pop	{r7, pc}
 80110a8:	e000ed04 	.word	0xe000ed04

080110ac <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80110ac:	b590      	push	{r4, r7, lr}
 80110ae:	b08b      	sub	sp, #44	; 0x2c
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	60f8      	str	r0, [r7, #12]
 80110b4:	60b9      	str	r1, [r7, #8]
 80110b6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80110b8:	68bb      	ldr	r3, [r7, #8]
 80110ba:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80110bc:	2300      	movs	r3, #0
 80110be:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80110c0:	68bb      	ldr	r3, [r7, #8]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d10a      	bne.n	80110dc <osMessageGet+0x30>
    event.status = osErrorParameter;
 80110c6:	2380      	movs	r3, #128	; 0x80
 80110c8:	617b      	str	r3, [r7, #20]
    return event;
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	461c      	mov	r4, r3
 80110ce:	f107 0314 	add.w	r3, r7, #20
 80110d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80110d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80110da:	e054      	b.n	8011186 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80110dc:	2300      	movs	r3, #0
 80110de:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80110e0:	2300      	movs	r3, #0
 80110e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110ea:	d103      	bne.n	80110f4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80110ec:	f04f 33ff 	mov.w	r3, #4294967295
 80110f0:	627b      	str	r3, [r7, #36]	; 0x24
 80110f2:	e009      	b.n	8011108 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d006      	beq.n	8011108 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80110fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011100:	2b00      	cmp	r3, #0
 8011102:	d101      	bne.n	8011108 <osMessageGet+0x5c>
      ticks = 1;
 8011104:	2301      	movs	r3, #1
 8011106:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8011108:	f7ff feee 	bl	8010ee8 <inHandlerMode>
 801110c:	4603      	mov	r3, r0
 801110e:	2b00      	cmp	r3, #0
 8011110:	d01c      	beq.n	801114c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8011112:	f107 0220 	add.w	r2, r7, #32
 8011116:	f107 0314 	add.w	r3, r7, #20
 801111a:	3304      	adds	r3, #4
 801111c:	4619      	mov	r1, r3
 801111e:	68b8      	ldr	r0, [r7, #8]
 8011120:	f000 fca0 	bl	8011a64 <xQueueReceiveFromISR>
 8011124:	4603      	mov	r3, r0
 8011126:	2b01      	cmp	r3, #1
 8011128:	d102      	bne.n	8011130 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 801112a:	2310      	movs	r3, #16
 801112c:	617b      	str	r3, [r7, #20]
 801112e:	e001      	b.n	8011134 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8011130:	2300      	movs	r3, #0
 8011132:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011134:	6a3b      	ldr	r3, [r7, #32]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d01d      	beq.n	8011176 <osMessageGet+0xca>
 801113a:	4b15      	ldr	r3, [pc, #84]	; (8011190 <osMessageGet+0xe4>)
 801113c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011140:	601a      	str	r2, [r3, #0]
 8011142:	f3bf 8f4f 	dsb	sy
 8011146:	f3bf 8f6f 	isb	sy
 801114a:	e014      	b.n	8011176 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 801114c:	f107 0314 	add.w	r3, r7, #20
 8011150:	3304      	adds	r3, #4
 8011152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011154:	4619      	mov	r1, r3
 8011156:	68b8      	ldr	r0, [r7, #8]
 8011158:	f000 fba4 	bl	80118a4 <xQueueReceive>
 801115c:	4603      	mov	r3, r0
 801115e:	2b01      	cmp	r3, #1
 8011160:	d102      	bne.n	8011168 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8011162:	2310      	movs	r3, #16
 8011164:	617b      	str	r3, [r7, #20]
 8011166:	e006      	b.n	8011176 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8011168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801116a:	2b00      	cmp	r3, #0
 801116c:	d101      	bne.n	8011172 <osMessageGet+0xc6>
 801116e:	2300      	movs	r3, #0
 8011170:	e000      	b.n	8011174 <osMessageGet+0xc8>
 8011172:	2340      	movs	r3, #64	; 0x40
 8011174:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	461c      	mov	r4, r3
 801117a:	f107 0314 	add.w	r3, r7, #20
 801117e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011182:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011186:	68f8      	ldr	r0, [r7, #12]
 8011188:	372c      	adds	r7, #44	; 0x2c
 801118a:	46bd      	mov	sp, r7
 801118c:	bd90      	pop	{r4, r7, pc}
 801118e:	bf00      	nop
 8011190:	e000ed04 	.word	0xe000ed04

08011194 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011194:	b480      	push	{r7}
 8011196:	b083      	sub	sp, #12
 8011198:	af00      	add	r7, sp, #0
 801119a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	f103 0208 	add.w	r2, r3, #8
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	f04f 32ff 	mov.w	r2, #4294967295
 80111ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	f103 0208 	add.w	r2, r3, #8
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	f103 0208 	add.w	r2, r3, #8
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	2200      	movs	r2, #0
 80111c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80111c8:	bf00      	nop
 80111ca:	370c      	adds	r7, #12
 80111cc:	46bd      	mov	sp, r7
 80111ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d2:	4770      	bx	lr

080111d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80111d4:	b480      	push	{r7}
 80111d6:	b083      	sub	sp, #12
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	2200      	movs	r2, #0
 80111e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80111e2:	bf00      	nop
 80111e4:	370c      	adds	r7, #12
 80111e6:	46bd      	mov	sp, r7
 80111e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ec:	4770      	bx	lr

080111ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80111ee:	b480      	push	{r7}
 80111f0:	b085      	sub	sp, #20
 80111f2:	af00      	add	r7, sp, #0
 80111f4:	6078      	str	r0, [r7, #4]
 80111f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	685b      	ldr	r3, [r3, #4]
 80111fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80111fe:	683b      	ldr	r3, [r7, #0]
 8011200:	68fa      	ldr	r2, [r7, #12]
 8011202:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	689a      	ldr	r2, [r3, #8]
 8011208:	683b      	ldr	r3, [r7, #0]
 801120a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	689b      	ldr	r3, [r3, #8]
 8011210:	683a      	ldr	r2, [r7, #0]
 8011212:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	683a      	ldr	r2, [r7, #0]
 8011218:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801121a:	683b      	ldr	r3, [r7, #0]
 801121c:	687a      	ldr	r2, [r7, #4]
 801121e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	1c5a      	adds	r2, r3, #1
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	601a      	str	r2, [r3, #0]
}
 801122a:	bf00      	nop
 801122c:	3714      	adds	r7, #20
 801122e:	46bd      	mov	sp, r7
 8011230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011234:	4770      	bx	lr

08011236 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011236:	b480      	push	{r7}
 8011238:	b085      	sub	sp, #20
 801123a:	af00      	add	r7, sp, #0
 801123c:	6078      	str	r0, [r7, #4]
 801123e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011240:	683b      	ldr	r3, [r7, #0]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011246:	68bb      	ldr	r3, [r7, #8]
 8011248:	f1b3 3fff 	cmp.w	r3, #4294967295
 801124c:	d103      	bne.n	8011256 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	691b      	ldr	r3, [r3, #16]
 8011252:	60fb      	str	r3, [r7, #12]
 8011254:	e00c      	b.n	8011270 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	3308      	adds	r3, #8
 801125a:	60fb      	str	r3, [r7, #12]
 801125c:	e002      	b.n	8011264 <vListInsert+0x2e>
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	685b      	ldr	r3, [r3, #4]
 8011262:	60fb      	str	r3, [r7, #12]
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	685b      	ldr	r3, [r3, #4]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	68ba      	ldr	r2, [r7, #8]
 801126c:	429a      	cmp	r2, r3
 801126e:	d2f6      	bcs.n	801125e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	685a      	ldr	r2, [r3, #4]
 8011274:	683b      	ldr	r3, [r7, #0]
 8011276:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011278:	683b      	ldr	r3, [r7, #0]
 801127a:	685b      	ldr	r3, [r3, #4]
 801127c:	683a      	ldr	r2, [r7, #0]
 801127e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011280:	683b      	ldr	r3, [r7, #0]
 8011282:	68fa      	ldr	r2, [r7, #12]
 8011284:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	683a      	ldr	r2, [r7, #0]
 801128a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	687a      	ldr	r2, [r7, #4]
 8011290:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	1c5a      	adds	r2, r3, #1
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	601a      	str	r2, [r3, #0]
}
 801129c:	bf00      	nop
 801129e:	3714      	adds	r7, #20
 80112a0:	46bd      	mov	sp, r7
 80112a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a6:	4770      	bx	lr

080112a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80112a8:	b480      	push	{r7}
 80112aa:	b085      	sub	sp, #20
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	691b      	ldr	r3, [r3, #16]
 80112b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	685b      	ldr	r3, [r3, #4]
 80112ba:	687a      	ldr	r2, [r7, #4]
 80112bc:	6892      	ldr	r2, [r2, #8]
 80112be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	689b      	ldr	r3, [r3, #8]
 80112c4:	687a      	ldr	r2, [r7, #4]
 80112c6:	6852      	ldr	r2, [r2, #4]
 80112c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	685b      	ldr	r3, [r3, #4]
 80112ce:	687a      	ldr	r2, [r7, #4]
 80112d0:	429a      	cmp	r2, r3
 80112d2:	d103      	bne.n	80112dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	689a      	ldr	r2, [r3, #8]
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	2200      	movs	r2, #0
 80112e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	1e5a      	subs	r2, r3, #1
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	681b      	ldr	r3, [r3, #0]
}
 80112f0:	4618      	mov	r0, r3
 80112f2:	3714      	adds	r7, #20
 80112f4:	46bd      	mov	sp, r7
 80112f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fa:	4770      	bx	lr

080112fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b084      	sub	sp, #16
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
 8011304:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d10a      	bne.n	8011326 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011314:	f383 8811 	msr	BASEPRI, r3
 8011318:	f3bf 8f6f 	isb	sy
 801131c:	f3bf 8f4f 	dsb	sy
 8011320:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011322:	bf00      	nop
 8011324:	e7fe      	b.n	8011324 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8011326:	f001 fd65 	bl	8012df4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	681a      	ldr	r2, [r3, #0]
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011332:	68f9      	ldr	r1, [r7, #12]
 8011334:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011336:	fb01 f303 	mul.w	r3, r1, r3
 801133a:	441a      	add	r2, r3
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	2200      	movs	r2, #0
 8011344:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	681a      	ldr	r2, [r3, #0]
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	681a      	ldr	r2, [r3, #0]
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011356:	3b01      	subs	r3, #1
 8011358:	68f9      	ldr	r1, [r7, #12]
 801135a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801135c:	fb01 f303 	mul.w	r3, r1, r3
 8011360:	441a      	add	r2, r3
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	22ff      	movs	r2, #255	; 0xff
 801136a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	22ff      	movs	r2, #255	; 0xff
 8011372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011376:	683b      	ldr	r3, [r7, #0]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d114      	bne.n	80113a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	691b      	ldr	r3, [r3, #16]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d01a      	beq.n	80113ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	3310      	adds	r3, #16
 8011388:	4618      	mov	r0, r3
 801138a:	f001 f93b 	bl	8012604 <xTaskRemoveFromEventList>
 801138e:	4603      	mov	r3, r0
 8011390:	2b00      	cmp	r3, #0
 8011392:	d012      	beq.n	80113ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011394:	4b0c      	ldr	r3, [pc, #48]	; (80113c8 <xQueueGenericReset+0xcc>)
 8011396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801139a:	601a      	str	r2, [r3, #0]
 801139c:	f3bf 8f4f 	dsb	sy
 80113a0:	f3bf 8f6f 	isb	sy
 80113a4:	e009      	b.n	80113ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	3310      	adds	r3, #16
 80113aa:	4618      	mov	r0, r3
 80113ac:	f7ff fef2 	bl	8011194 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	3324      	adds	r3, #36	; 0x24
 80113b4:	4618      	mov	r0, r3
 80113b6:	f7ff feed 	bl	8011194 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80113ba:	f001 fd4b 	bl	8012e54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80113be:	2301      	movs	r3, #1
}
 80113c0:	4618      	mov	r0, r3
 80113c2:	3710      	adds	r7, #16
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}
 80113c8:	e000ed04 	.word	0xe000ed04

080113cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b08e      	sub	sp, #56	; 0x38
 80113d0:	af02      	add	r7, sp, #8
 80113d2:	60f8      	str	r0, [r7, #12]
 80113d4:	60b9      	str	r1, [r7, #8]
 80113d6:	607a      	str	r2, [r7, #4]
 80113d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d10a      	bne.n	80113f6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80113e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113e4:	f383 8811 	msr	BASEPRI, r3
 80113e8:	f3bf 8f6f 	isb	sy
 80113ec:	f3bf 8f4f 	dsb	sy
 80113f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80113f2:	bf00      	nop
 80113f4:	e7fe      	b.n	80113f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80113f6:	683b      	ldr	r3, [r7, #0]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d10a      	bne.n	8011412 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80113fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011400:	f383 8811 	msr	BASEPRI, r3
 8011404:	f3bf 8f6f 	isb	sy
 8011408:	f3bf 8f4f 	dsb	sy
 801140c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801140e:	bf00      	nop
 8011410:	e7fe      	b.n	8011410 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d002      	beq.n	801141e <xQueueGenericCreateStatic+0x52>
 8011418:	68bb      	ldr	r3, [r7, #8]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d001      	beq.n	8011422 <xQueueGenericCreateStatic+0x56>
 801141e:	2301      	movs	r3, #1
 8011420:	e000      	b.n	8011424 <xQueueGenericCreateStatic+0x58>
 8011422:	2300      	movs	r3, #0
 8011424:	2b00      	cmp	r3, #0
 8011426:	d10a      	bne.n	801143e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8011428:	f04f 0350 	mov.w	r3, #80	; 0x50
 801142c:	f383 8811 	msr	BASEPRI, r3
 8011430:	f3bf 8f6f 	isb	sy
 8011434:	f3bf 8f4f 	dsb	sy
 8011438:	623b      	str	r3, [r7, #32]
}
 801143a:	bf00      	nop
 801143c:	e7fe      	b.n	801143c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d102      	bne.n	801144a <xQueueGenericCreateStatic+0x7e>
 8011444:	68bb      	ldr	r3, [r7, #8]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d101      	bne.n	801144e <xQueueGenericCreateStatic+0x82>
 801144a:	2301      	movs	r3, #1
 801144c:	e000      	b.n	8011450 <xQueueGenericCreateStatic+0x84>
 801144e:	2300      	movs	r3, #0
 8011450:	2b00      	cmp	r3, #0
 8011452:	d10a      	bne.n	801146a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8011454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011458:	f383 8811 	msr	BASEPRI, r3
 801145c:	f3bf 8f6f 	isb	sy
 8011460:	f3bf 8f4f 	dsb	sy
 8011464:	61fb      	str	r3, [r7, #28]
}
 8011466:	bf00      	nop
 8011468:	e7fe      	b.n	8011468 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801146a:	2348      	movs	r3, #72	; 0x48
 801146c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801146e:	697b      	ldr	r3, [r7, #20]
 8011470:	2b48      	cmp	r3, #72	; 0x48
 8011472:	d00a      	beq.n	801148a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8011474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011478:	f383 8811 	msr	BASEPRI, r3
 801147c:	f3bf 8f6f 	isb	sy
 8011480:	f3bf 8f4f 	dsb	sy
 8011484:	61bb      	str	r3, [r7, #24]
}
 8011486:	bf00      	nop
 8011488:	e7fe      	b.n	8011488 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801148a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801148c:	683b      	ldr	r3, [r7, #0]
 801148e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011492:	2b00      	cmp	r3, #0
 8011494:	d00d      	beq.n	80114b2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011498:	2201      	movs	r2, #1
 801149a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801149e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80114a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114a4:	9300      	str	r3, [sp, #0]
 80114a6:	4613      	mov	r3, r2
 80114a8:	687a      	ldr	r2, [r7, #4]
 80114aa:	68b9      	ldr	r1, [r7, #8]
 80114ac:	68f8      	ldr	r0, [r7, #12]
 80114ae:	f000 f83f 	bl	8011530 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80114b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80114b4:	4618      	mov	r0, r3
 80114b6:	3730      	adds	r7, #48	; 0x30
 80114b8:	46bd      	mov	sp, r7
 80114ba:	bd80      	pop	{r7, pc}

080114bc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b08a      	sub	sp, #40	; 0x28
 80114c0:	af02      	add	r7, sp, #8
 80114c2:	60f8      	str	r0, [r7, #12]
 80114c4:	60b9      	str	r1, [r7, #8]
 80114c6:	4613      	mov	r3, r2
 80114c8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d10a      	bne.n	80114e6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80114d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114d4:	f383 8811 	msr	BASEPRI, r3
 80114d8:	f3bf 8f6f 	isb	sy
 80114dc:	f3bf 8f4f 	dsb	sy
 80114e0:	613b      	str	r3, [r7, #16]
}
 80114e2:	bf00      	nop
 80114e4:	e7fe      	b.n	80114e4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	68ba      	ldr	r2, [r7, #8]
 80114ea:	fb02 f303 	mul.w	r3, r2, r3
 80114ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80114f0:	69fb      	ldr	r3, [r7, #28]
 80114f2:	3348      	adds	r3, #72	; 0x48
 80114f4:	4618      	mov	r0, r3
 80114f6:	f001 fd9f 	bl	8013038 <pvPortMalloc>
 80114fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80114fc:	69bb      	ldr	r3, [r7, #24]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d011      	beq.n	8011526 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011502:	69bb      	ldr	r3, [r7, #24]
 8011504:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011506:	697b      	ldr	r3, [r7, #20]
 8011508:	3348      	adds	r3, #72	; 0x48
 801150a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801150c:	69bb      	ldr	r3, [r7, #24]
 801150e:	2200      	movs	r2, #0
 8011510:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011514:	79fa      	ldrb	r2, [r7, #7]
 8011516:	69bb      	ldr	r3, [r7, #24]
 8011518:	9300      	str	r3, [sp, #0]
 801151a:	4613      	mov	r3, r2
 801151c:	697a      	ldr	r2, [r7, #20]
 801151e:	68b9      	ldr	r1, [r7, #8]
 8011520:	68f8      	ldr	r0, [r7, #12]
 8011522:	f000 f805 	bl	8011530 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011526:	69bb      	ldr	r3, [r7, #24]
	}
 8011528:	4618      	mov	r0, r3
 801152a:	3720      	adds	r7, #32
 801152c:	46bd      	mov	sp, r7
 801152e:	bd80      	pop	{r7, pc}

08011530 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b084      	sub	sp, #16
 8011534:	af00      	add	r7, sp, #0
 8011536:	60f8      	str	r0, [r7, #12]
 8011538:	60b9      	str	r1, [r7, #8]
 801153a:	607a      	str	r2, [r7, #4]
 801153c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801153e:	68bb      	ldr	r3, [r7, #8]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d103      	bne.n	801154c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011544:	69bb      	ldr	r3, [r7, #24]
 8011546:	69ba      	ldr	r2, [r7, #24]
 8011548:	601a      	str	r2, [r3, #0]
 801154a:	e002      	b.n	8011552 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801154c:	69bb      	ldr	r3, [r7, #24]
 801154e:	687a      	ldr	r2, [r7, #4]
 8011550:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011552:	69bb      	ldr	r3, [r7, #24]
 8011554:	68fa      	ldr	r2, [r7, #12]
 8011556:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011558:	69bb      	ldr	r3, [r7, #24]
 801155a:	68ba      	ldr	r2, [r7, #8]
 801155c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801155e:	2101      	movs	r1, #1
 8011560:	69b8      	ldr	r0, [r7, #24]
 8011562:	f7ff fecb 	bl	80112fc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011566:	bf00      	nop
 8011568:	3710      	adds	r7, #16
 801156a:	46bd      	mov	sp, r7
 801156c:	bd80      	pop	{r7, pc}
	...

08011570 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b08e      	sub	sp, #56	; 0x38
 8011574:	af00      	add	r7, sp, #0
 8011576:	60f8      	str	r0, [r7, #12]
 8011578:	60b9      	str	r1, [r7, #8]
 801157a:	607a      	str	r2, [r7, #4]
 801157c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801157e:	2300      	movs	r3, #0
 8011580:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011588:	2b00      	cmp	r3, #0
 801158a:	d10a      	bne.n	80115a2 <xQueueGenericSend+0x32>
	__asm volatile
 801158c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011590:	f383 8811 	msr	BASEPRI, r3
 8011594:	f3bf 8f6f 	isb	sy
 8011598:	f3bf 8f4f 	dsb	sy
 801159c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801159e:	bf00      	nop
 80115a0:	e7fe      	b.n	80115a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80115a2:	68bb      	ldr	r3, [r7, #8]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d103      	bne.n	80115b0 <xQueueGenericSend+0x40>
 80115a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d101      	bne.n	80115b4 <xQueueGenericSend+0x44>
 80115b0:	2301      	movs	r3, #1
 80115b2:	e000      	b.n	80115b6 <xQueueGenericSend+0x46>
 80115b4:	2300      	movs	r3, #0
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d10a      	bne.n	80115d0 <xQueueGenericSend+0x60>
	__asm volatile
 80115ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115be:	f383 8811 	msr	BASEPRI, r3
 80115c2:	f3bf 8f6f 	isb	sy
 80115c6:	f3bf 8f4f 	dsb	sy
 80115ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80115cc:	bf00      	nop
 80115ce:	e7fe      	b.n	80115ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80115d0:	683b      	ldr	r3, [r7, #0]
 80115d2:	2b02      	cmp	r3, #2
 80115d4:	d103      	bne.n	80115de <xQueueGenericSend+0x6e>
 80115d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115da:	2b01      	cmp	r3, #1
 80115dc:	d101      	bne.n	80115e2 <xQueueGenericSend+0x72>
 80115de:	2301      	movs	r3, #1
 80115e0:	e000      	b.n	80115e4 <xQueueGenericSend+0x74>
 80115e2:	2300      	movs	r3, #0
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d10a      	bne.n	80115fe <xQueueGenericSend+0x8e>
	__asm volatile
 80115e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115ec:	f383 8811 	msr	BASEPRI, r3
 80115f0:	f3bf 8f6f 	isb	sy
 80115f4:	f3bf 8f4f 	dsb	sy
 80115f8:	623b      	str	r3, [r7, #32]
}
 80115fa:	bf00      	nop
 80115fc:	e7fe      	b.n	80115fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80115fe:	f001 f9c1 	bl	8012984 <xTaskGetSchedulerState>
 8011602:	4603      	mov	r3, r0
 8011604:	2b00      	cmp	r3, #0
 8011606:	d102      	bne.n	801160e <xQueueGenericSend+0x9e>
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d101      	bne.n	8011612 <xQueueGenericSend+0xa2>
 801160e:	2301      	movs	r3, #1
 8011610:	e000      	b.n	8011614 <xQueueGenericSend+0xa4>
 8011612:	2300      	movs	r3, #0
 8011614:	2b00      	cmp	r3, #0
 8011616:	d10a      	bne.n	801162e <xQueueGenericSend+0xbe>
	__asm volatile
 8011618:	f04f 0350 	mov.w	r3, #80	; 0x50
 801161c:	f383 8811 	msr	BASEPRI, r3
 8011620:	f3bf 8f6f 	isb	sy
 8011624:	f3bf 8f4f 	dsb	sy
 8011628:	61fb      	str	r3, [r7, #28]
}
 801162a:	bf00      	nop
 801162c:	e7fe      	b.n	801162c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801162e:	f001 fbe1 	bl	8012df4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801163a:	429a      	cmp	r2, r3
 801163c:	d302      	bcc.n	8011644 <xQueueGenericSend+0xd4>
 801163e:	683b      	ldr	r3, [r7, #0]
 8011640:	2b02      	cmp	r3, #2
 8011642:	d129      	bne.n	8011698 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011644:	683a      	ldr	r2, [r7, #0]
 8011646:	68b9      	ldr	r1, [r7, #8]
 8011648:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801164a:	f000 fa8b 	bl	8011b64 <prvCopyDataToQueue>
 801164e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011654:	2b00      	cmp	r3, #0
 8011656:	d010      	beq.n	801167a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801165a:	3324      	adds	r3, #36	; 0x24
 801165c:	4618      	mov	r0, r3
 801165e:	f000 ffd1 	bl	8012604 <xTaskRemoveFromEventList>
 8011662:	4603      	mov	r3, r0
 8011664:	2b00      	cmp	r3, #0
 8011666:	d013      	beq.n	8011690 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011668:	4b3f      	ldr	r3, [pc, #252]	; (8011768 <xQueueGenericSend+0x1f8>)
 801166a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801166e:	601a      	str	r2, [r3, #0]
 8011670:	f3bf 8f4f 	dsb	sy
 8011674:	f3bf 8f6f 	isb	sy
 8011678:	e00a      	b.n	8011690 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801167a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801167c:	2b00      	cmp	r3, #0
 801167e:	d007      	beq.n	8011690 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011680:	4b39      	ldr	r3, [pc, #228]	; (8011768 <xQueueGenericSend+0x1f8>)
 8011682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011686:	601a      	str	r2, [r3, #0]
 8011688:	f3bf 8f4f 	dsb	sy
 801168c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011690:	f001 fbe0 	bl	8012e54 <vPortExitCritical>
				return pdPASS;
 8011694:	2301      	movs	r3, #1
 8011696:	e063      	b.n	8011760 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d103      	bne.n	80116a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801169e:	f001 fbd9 	bl	8012e54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80116a2:	2300      	movs	r3, #0
 80116a4:	e05c      	b.n	8011760 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80116a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d106      	bne.n	80116ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80116ac:	f107 0314 	add.w	r3, r7, #20
 80116b0:	4618      	mov	r0, r3
 80116b2:	f001 f809 	bl	80126c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80116b6:	2301      	movs	r3, #1
 80116b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80116ba:	f001 fbcb 	bl	8012e54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80116be:	f000 fda9 	bl	8012214 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80116c2:	f001 fb97 	bl	8012df4 <vPortEnterCritical>
 80116c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80116cc:	b25b      	sxtb	r3, r3
 80116ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116d2:	d103      	bne.n	80116dc <xQueueGenericSend+0x16c>
 80116d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116d6:	2200      	movs	r2, #0
 80116d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80116dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80116e2:	b25b      	sxtb	r3, r3
 80116e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116e8:	d103      	bne.n	80116f2 <xQueueGenericSend+0x182>
 80116ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116ec:	2200      	movs	r2, #0
 80116ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80116f2:	f001 fbaf 	bl	8012e54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80116f6:	1d3a      	adds	r2, r7, #4
 80116f8:	f107 0314 	add.w	r3, r7, #20
 80116fc:	4611      	mov	r1, r2
 80116fe:	4618      	mov	r0, r3
 8011700:	f000 fff8 	bl	80126f4 <xTaskCheckForTimeOut>
 8011704:	4603      	mov	r3, r0
 8011706:	2b00      	cmp	r3, #0
 8011708:	d124      	bne.n	8011754 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801170a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801170c:	f000 fb22 	bl	8011d54 <prvIsQueueFull>
 8011710:	4603      	mov	r3, r0
 8011712:	2b00      	cmp	r3, #0
 8011714:	d018      	beq.n	8011748 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011718:	3310      	adds	r3, #16
 801171a:	687a      	ldr	r2, [r7, #4]
 801171c:	4611      	mov	r1, r2
 801171e:	4618      	mov	r0, r3
 8011720:	f000 ff4c 	bl	80125bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011726:	f000 faad 	bl	8011c84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801172a:	f000 fd81 	bl	8012230 <xTaskResumeAll>
 801172e:	4603      	mov	r3, r0
 8011730:	2b00      	cmp	r3, #0
 8011732:	f47f af7c 	bne.w	801162e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8011736:	4b0c      	ldr	r3, [pc, #48]	; (8011768 <xQueueGenericSend+0x1f8>)
 8011738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801173c:	601a      	str	r2, [r3, #0]
 801173e:	f3bf 8f4f 	dsb	sy
 8011742:	f3bf 8f6f 	isb	sy
 8011746:	e772      	b.n	801162e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011748:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801174a:	f000 fa9b 	bl	8011c84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801174e:	f000 fd6f 	bl	8012230 <xTaskResumeAll>
 8011752:	e76c      	b.n	801162e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011754:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011756:	f000 fa95 	bl	8011c84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801175a:	f000 fd69 	bl	8012230 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801175e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011760:	4618      	mov	r0, r3
 8011762:	3738      	adds	r7, #56	; 0x38
 8011764:	46bd      	mov	sp, r7
 8011766:	bd80      	pop	{r7, pc}
 8011768:	e000ed04 	.word	0xe000ed04

0801176c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801176c:	b580      	push	{r7, lr}
 801176e:	b090      	sub	sp, #64	; 0x40
 8011770:	af00      	add	r7, sp, #0
 8011772:	60f8      	str	r0, [r7, #12]
 8011774:	60b9      	str	r1, [r7, #8]
 8011776:	607a      	str	r2, [r7, #4]
 8011778:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801177e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011780:	2b00      	cmp	r3, #0
 8011782:	d10a      	bne.n	801179a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8011784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011788:	f383 8811 	msr	BASEPRI, r3
 801178c:	f3bf 8f6f 	isb	sy
 8011790:	f3bf 8f4f 	dsb	sy
 8011794:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011796:	bf00      	nop
 8011798:	e7fe      	b.n	8011798 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801179a:	68bb      	ldr	r3, [r7, #8]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d103      	bne.n	80117a8 <xQueueGenericSendFromISR+0x3c>
 80117a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d101      	bne.n	80117ac <xQueueGenericSendFromISR+0x40>
 80117a8:	2301      	movs	r3, #1
 80117aa:	e000      	b.n	80117ae <xQueueGenericSendFromISR+0x42>
 80117ac:	2300      	movs	r3, #0
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d10a      	bne.n	80117c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80117b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117b6:	f383 8811 	msr	BASEPRI, r3
 80117ba:	f3bf 8f6f 	isb	sy
 80117be:	f3bf 8f4f 	dsb	sy
 80117c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80117c4:	bf00      	nop
 80117c6:	e7fe      	b.n	80117c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80117c8:	683b      	ldr	r3, [r7, #0]
 80117ca:	2b02      	cmp	r3, #2
 80117cc:	d103      	bne.n	80117d6 <xQueueGenericSendFromISR+0x6a>
 80117ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117d2:	2b01      	cmp	r3, #1
 80117d4:	d101      	bne.n	80117da <xQueueGenericSendFromISR+0x6e>
 80117d6:	2301      	movs	r3, #1
 80117d8:	e000      	b.n	80117dc <xQueueGenericSendFromISR+0x70>
 80117da:	2300      	movs	r3, #0
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d10a      	bne.n	80117f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80117e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117e4:	f383 8811 	msr	BASEPRI, r3
 80117e8:	f3bf 8f6f 	isb	sy
 80117ec:	f3bf 8f4f 	dsb	sy
 80117f0:	623b      	str	r3, [r7, #32]
}
 80117f2:	bf00      	nop
 80117f4:	e7fe      	b.n	80117f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80117f6:	f001 fbdf 	bl	8012fb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80117fa:	f3ef 8211 	mrs	r2, BASEPRI
 80117fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011802:	f383 8811 	msr	BASEPRI, r3
 8011806:	f3bf 8f6f 	isb	sy
 801180a:	f3bf 8f4f 	dsb	sy
 801180e:	61fa      	str	r2, [r7, #28]
 8011810:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011812:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011814:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801181a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801181c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801181e:	429a      	cmp	r2, r3
 8011820:	d302      	bcc.n	8011828 <xQueueGenericSendFromISR+0xbc>
 8011822:	683b      	ldr	r3, [r7, #0]
 8011824:	2b02      	cmp	r3, #2
 8011826:	d12f      	bne.n	8011888 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801182a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801182e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011836:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011838:	683a      	ldr	r2, [r7, #0]
 801183a:	68b9      	ldr	r1, [r7, #8]
 801183c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801183e:	f000 f991 	bl	8011b64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011842:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8011846:	f1b3 3fff 	cmp.w	r3, #4294967295
 801184a:	d112      	bne.n	8011872 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801184c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011850:	2b00      	cmp	r3, #0
 8011852:	d016      	beq.n	8011882 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011856:	3324      	adds	r3, #36	; 0x24
 8011858:	4618      	mov	r0, r3
 801185a:	f000 fed3 	bl	8012604 <xTaskRemoveFromEventList>
 801185e:	4603      	mov	r3, r0
 8011860:	2b00      	cmp	r3, #0
 8011862:	d00e      	beq.n	8011882 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d00b      	beq.n	8011882 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	2201      	movs	r2, #1
 801186e:	601a      	str	r2, [r3, #0]
 8011870:	e007      	b.n	8011882 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011872:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011876:	3301      	adds	r3, #1
 8011878:	b2db      	uxtb	r3, r3
 801187a:	b25a      	sxtb	r2, r3
 801187c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801187e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011882:	2301      	movs	r3, #1
 8011884:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8011886:	e001      	b.n	801188c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011888:	2300      	movs	r3, #0
 801188a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801188c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801188e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011890:	697b      	ldr	r3, [r7, #20]
 8011892:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011896:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801189a:	4618      	mov	r0, r3
 801189c:	3740      	adds	r7, #64	; 0x40
 801189e:	46bd      	mov	sp, r7
 80118a0:	bd80      	pop	{r7, pc}
	...

080118a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80118a4:	b580      	push	{r7, lr}
 80118a6:	b08c      	sub	sp, #48	; 0x30
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	60f8      	str	r0, [r7, #12]
 80118ac:	60b9      	str	r1, [r7, #8]
 80118ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80118b0:	2300      	movs	r3, #0
 80118b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80118b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d10a      	bne.n	80118d4 <xQueueReceive+0x30>
	__asm volatile
 80118be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118c2:	f383 8811 	msr	BASEPRI, r3
 80118c6:	f3bf 8f6f 	isb	sy
 80118ca:	f3bf 8f4f 	dsb	sy
 80118ce:	623b      	str	r3, [r7, #32]
}
 80118d0:	bf00      	nop
 80118d2:	e7fe      	b.n	80118d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80118d4:	68bb      	ldr	r3, [r7, #8]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d103      	bne.n	80118e2 <xQueueReceive+0x3e>
 80118da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d101      	bne.n	80118e6 <xQueueReceive+0x42>
 80118e2:	2301      	movs	r3, #1
 80118e4:	e000      	b.n	80118e8 <xQueueReceive+0x44>
 80118e6:	2300      	movs	r3, #0
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d10a      	bne.n	8011902 <xQueueReceive+0x5e>
	__asm volatile
 80118ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118f0:	f383 8811 	msr	BASEPRI, r3
 80118f4:	f3bf 8f6f 	isb	sy
 80118f8:	f3bf 8f4f 	dsb	sy
 80118fc:	61fb      	str	r3, [r7, #28]
}
 80118fe:	bf00      	nop
 8011900:	e7fe      	b.n	8011900 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011902:	f001 f83f 	bl	8012984 <xTaskGetSchedulerState>
 8011906:	4603      	mov	r3, r0
 8011908:	2b00      	cmp	r3, #0
 801190a:	d102      	bne.n	8011912 <xQueueReceive+0x6e>
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d101      	bne.n	8011916 <xQueueReceive+0x72>
 8011912:	2301      	movs	r3, #1
 8011914:	e000      	b.n	8011918 <xQueueReceive+0x74>
 8011916:	2300      	movs	r3, #0
 8011918:	2b00      	cmp	r3, #0
 801191a:	d10a      	bne.n	8011932 <xQueueReceive+0x8e>
	__asm volatile
 801191c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011920:	f383 8811 	msr	BASEPRI, r3
 8011924:	f3bf 8f6f 	isb	sy
 8011928:	f3bf 8f4f 	dsb	sy
 801192c:	61bb      	str	r3, [r7, #24]
}
 801192e:	bf00      	nop
 8011930:	e7fe      	b.n	8011930 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011932:	f001 fa5f 	bl	8012df4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801193a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801193e:	2b00      	cmp	r3, #0
 8011940:	d01f      	beq.n	8011982 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011942:	68b9      	ldr	r1, [r7, #8]
 8011944:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011946:	f000 f977 	bl	8011c38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801194c:	1e5a      	subs	r2, r3, #1
 801194e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011950:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011954:	691b      	ldr	r3, [r3, #16]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d00f      	beq.n	801197a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801195a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801195c:	3310      	adds	r3, #16
 801195e:	4618      	mov	r0, r3
 8011960:	f000 fe50 	bl	8012604 <xTaskRemoveFromEventList>
 8011964:	4603      	mov	r3, r0
 8011966:	2b00      	cmp	r3, #0
 8011968:	d007      	beq.n	801197a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801196a:	4b3d      	ldr	r3, [pc, #244]	; (8011a60 <xQueueReceive+0x1bc>)
 801196c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011970:	601a      	str	r2, [r3, #0]
 8011972:	f3bf 8f4f 	dsb	sy
 8011976:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801197a:	f001 fa6b 	bl	8012e54 <vPortExitCritical>
				return pdPASS;
 801197e:	2301      	movs	r3, #1
 8011980:	e069      	b.n	8011a56 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d103      	bne.n	8011990 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011988:	f001 fa64 	bl	8012e54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801198c:	2300      	movs	r3, #0
 801198e:	e062      	b.n	8011a56 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011992:	2b00      	cmp	r3, #0
 8011994:	d106      	bne.n	80119a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011996:	f107 0310 	add.w	r3, r7, #16
 801199a:	4618      	mov	r0, r3
 801199c:	f000 fe94 	bl	80126c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80119a0:	2301      	movs	r3, #1
 80119a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80119a4:	f001 fa56 	bl	8012e54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80119a8:	f000 fc34 	bl	8012214 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80119ac:	f001 fa22 	bl	8012df4 <vPortEnterCritical>
 80119b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80119b6:	b25b      	sxtb	r3, r3
 80119b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119bc:	d103      	bne.n	80119c6 <xQueueReceive+0x122>
 80119be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119c0:	2200      	movs	r2, #0
 80119c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80119c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80119cc:	b25b      	sxtb	r3, r3
 80119ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119d2:	d103      	bne.n	80119dc <xQueueReceive+0x138>
 80119d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119d6:	2200      	movs	r2, #0
 80119d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80119dc:	f001 fa3a 	bl	8012e54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80119e0:	1d3a      	adds	r2, r7, #4
 80119e2:	f107 0310 	add.w	r3, r7, #16
 80119e6:	4611      	mov	r1, r2
 80119e8:	4618      	mov	r0, r3
 80119ea:	f000 fe83 	bl	80126f4 <xTaskCheckForTimeOut>
 80119ee:	4603      	mov	r3, r0
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d123      	bne.n	8011a3c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80119f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80119f6:	f000 f997 	bl	8011d28 <prvIsQueueEmpty>
 80119fa:	4603      	mov	r3, r0
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d017      	beq.n	8011a30 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a02:	3324      	adds	r3, #36	; 0x24
 8011a04:	687a      	ldr	r2, [r7, #4]
 8011a06:	4611      	mov	r1, r2
 8011a08:	4618      	mov	r0, r3
 8011a0a:	f000 fdd7 	bl	80125bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011a0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a10:	f000 f938 	bl	8011c84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011a14:	f000 fc0c 	bl	8012230 <xTaskResumeAll>
 8011a18:	4603      	mov	r3, r0
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d189      	bne.n	8011932 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8011a1e:	4b10      	ldr	r3, [pc, #64]	; (8011a60 <xQueueReceive+0x1bc>)
 8011a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a24:	601a      	str	r2, [r3, #0]
 8011a26:	f3bf 8f4f 	dsb	sy
 8011a2a:	f3bf 8f6f 	isb	sy
 8011a2e:	e780      	b.n	8011932 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011a30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a32:	f000 f927 	bl	8011c84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011a36:	f000 fbfb 	bl	8012230 <xTaskResumeAll>
 8011a3a:	e77a      	b.n	8011932 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a3e:	f000 f921 	bl	8011c84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011a42:	f000 fbf5 	bl	8012230 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011a46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a48:	f000 f96e 	bl	8011d28 <prvIsQueueEmpty>
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	f43f af6f 	beq.w	8011932 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011a54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011a56:	4618      	mov	r0, r3
 8011a58:	3730      	adds	r7, #48	; 0x30
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	bd80      	pop	{r7, pc}
 8011a5e:	bf00      	nop
 8011a60:	e000ed04 	.word	0xe000ed04

08011a64 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b08e      	sub	sp, #56	; 0x38
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	60f8      	str	r0, [r7, #12]
 8011a6c:	60b9      	str	r1, [r7, #8]
 8011a6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d10a      	bne.n	8011a90 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8011a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a7e:	f383 8811 	msr	BASEPRI, r3
 8011a82:	f3bf 8f6f 	isb	sy
 8011a86:	f3bf 8f4f 	dsb	sy
 8011a8a:	623b      	str	r3, [r7, #32]
}
 8011a8c:	bf00      	nop
 8011a8e:	e7fe      	b.n	8011a8e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011a90:	68bb      	ldr	r3, [r7, #8]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d103      	bne.n	8011a9e <xQueueReceiveFromISR+0x3a>
 8011a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d101      	bne.n	8011aa2 <xQueueReceiveFromISR+0x3e>
 8011a9e:	2301      	movs	r3, #1
 8011aa0:	e000      	b.n	8011aa4 <xQueueReceiveFromISR+0x40>
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d10a      	bne.n	8011abe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8011aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aac:	f383 8811 	msr	BASEPRI, r3
 8011ab0:	f3bf 8f6f 	isb	sy
 8011ab4:	f3bf 8f4f 	dsb	sy
 8011ab8:	61fb      	str	r3, [r7, #28]
}
 8011aba:	bf00      	nop
 8011abc:	e7fe      	b.n	8011abc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011abe:	f001 fa7b 	bl	8012fb8 <vPortValidateInterruptPriority>
	__asm volatile
 8011ac2:	f3ef 8211 	mrs	r2, BASEPRI
 8011ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aca:	f383 8811 	msr	BASEPRI, r3
 8011ace:	f3bf 8f6f 	isb	sy
 8011ad2:	f3bf 8f4f 	dsb	sy
 8011ad6:	61ba      	str	r2, [r7, #24]
 8011ad8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011ada:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011adc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ae2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d02f      	beq.n	8011b4a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011af0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011af4:	68b9      	ldr	r1, [r7, #8]
 8011af6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011af8:	f000 f89e 	bl	8011c38 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011afe:	1e5a      	subs	r2, r3, #1
 8011b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b02:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011b04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b0c:	d112      	bne.n	8011b34 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b10:	691b      	ldr	r3, [r3, #16]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d016      	beq.n	8011b44 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b18:	3310      	adds	r3, #16
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	f000 fd72 	bl	8012604 <xTaskRemoveFromEventList>
 8011b20:	4603      	mov	r3, r0
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d00e      	beq.n	8011b44 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d00b      	beq.n	8011b44 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	2201      	movs	r2, #1
 8011b30:	601a      	str	r2, [r3, #0]
 8011b32:	e007      	b.n	8011b44 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011b34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b38:	3301      	adds	r3, #1
 8011b3a:	b2db      	uxtb	r3, r3
 8011b3c:	b25a      	sxtb	r2, r3
 8011b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011b44:	2301      	movs	r3, #1
 8011b46:	637b      	str	r3, [r7, #52]	; 0x34
 8011b48:	e001      	b.n	8011b4e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	637b      	str	r3, [r7, #52]	; 0x34
 8011b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b50:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011b52:	693b      	ldr	r3, [r7, #16]
 8011b54:	f383 8811 	msr	BASEPRI, r3
}
 8011b58:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	3738      	adds	r7, #56	; 0x38
 8011b60:	46bd      	mov	sp, r7
 8011b62:	bd80      	pop	{r7, pc}

08011b64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011b64:	b580      	push	{r7, lr}
 8011b66:	b086      	sub	sp, #24
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	60f8      	str	r0, [r7, #12]
 8011b6c:	60b9      	str	r1, [r7, #8]
 8011b6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011b70:	2300      	movs	r3, #0
 8011b72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d10d      	bne.n	8011b9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d14d      	bne.n	8011c26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	689b      	ldr	r3, [r3, #8]
 8011b8e:	4618      	mov	r0, r3
 8011b90:	f000 ff16 	bl	80129c0 <xTaskPriorityDisinherit>
 8011b94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	2200      	movs	r2, #0
 8011b9a:	609a      	str	r2, [r3, #8]
 8011b9c:	e043      	b.n	8011c26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d119      	bne.n	8011bd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	6858      	ldr	r0, [r3, #4]
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bac:	461a      	mov	r2, r3
 8011bae:	68b9      	ldr	r1, [r7, #8]
 8011bb0:	f002 f8cc 	bl	8013d4c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	685a      	ldr	r2, [r3, #4]
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bbc:	441a      	add	r2, r3
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	685a      	ldr	r2, [r3, #4]
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	689b      	ldr	r3, [r3, #8]
 8011bca:	429a      	cmp	r2, r3
 8011bcc:	d32b      	bcc.n	8011c26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	681a      	ldr	r2, [r3, #0]
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	605a      	str	r2, [r3, #4]
 8011bd6:	e026      	b.n	8011c26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	68d8      	ldr	r0, [r3, #12]
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011be0:	461a      	mov	r2, r3
 8011be2:	68b9      	ldr	r1, [r7, #8]
 8011be4:	f002 f8b2 	bl	8013d4c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	68da      	ldr	r2, [r3, #12]
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bf0:	425b      	negs	r3, r3
 8011bf2:	441a      	add	r2, r3
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	68da      	ldr	r2, [r3, #12]
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	429a      	cmp	r2, r3
 8011c02:	d207      	bcs.n	8011c14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	689a      	ldr	r2, [r3, #8]
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c0c:	425b      	negs	r3, r3
 8011c0e:	441a      	add	r2, r3
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	2b02      	cmp	r3, #2
 8011c18:	d105      	bne.n	8011c26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011c1a:	693b      	ldr	r3, [r7, #16]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d002      	beq.n	8011c26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011c20:	693b      	ldr	r3, [r7, #16]
 8011c22:	3b01      	subs	r3, #1
 8011c24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011c26:	693b      	ldr	r3, [r7, #16]
 8011c28:	1c5a      	adds	r2, r3, #1
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011c2e:	697b      	ldr	r3, [r7, #20]
}
 8011c30:	4618      	mov	r0, r3
 8011c32:	3718      	adds	r7, #24
 8011c34:	46bd      	mov	sp, r7
 8011c36:	bd80      	pop	{r7, pc}

08011c38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b082      	sub	sp, #8
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
 8011c40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d018      	beq.n	8011c7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	68da      	ldr	r2, [r3, #12]
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c52:	441a      	add	r2, r3
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	68da      	ldr	r2, [r3, #12]
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	689b      	ldr	r3, [r3, #8]
 8011c60:	429a      	cmp	r2, r3
 8011c62:	d303      	bcc.n	8011c6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	681a      	ldr	r2, [r3, #0]
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	68d9      	ldr	r1, [r3, #12]
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c74:	461a      	mov	r2, r3
 8011c76:	6838      	ldr	r0, [r7, #0]
 8011c78:	f002 f868 	bl	8013d4c <memcpy>
	}
}
 8011c7c:	bf00      	nop
 8011c7e:	3708      	adds	r7, #8
 8011c80:	46bd      	mov	sp, r7
 8011c82:	bd80      	pop	{r7, pc}

08011c84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b084      	sub	sp, #16
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011c8c:	f001 f8b2 	bl	8012df4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011c96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011c98:	e011      	b.n	8011cbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d012      	beq.n	8011cc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	3324      	adds	r3, #36	; 0x24
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	f000 fcac 	bl	8012604 <xTaskRemoveFromEventList>
 8011cac:	4603      	mov	r3, r0
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d001      	beq.n	8011cb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011cb2:	f000 fd81 	bl	80127b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011cb6:	7bfb      	ldrb	r3, [r7, #15]
 8011cb8:	3b01      	subs	r3, #1
 8011cba:	b2db      	uxtb	r3, r3
 8011cbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	dce9      	bgt.n	8011c9a <prvUnlockQueue+0x16>
 8011cc6:	e000      	b.n	8011cca <prvUnlockQueue+0x46>
					break;
 8011cc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	22ff      	movs	r2, #255	; 0xff
 8011cce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011cd2:	f001 f8bf 	bl	8012e54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011cd6:	f001 f88d 	bl	8012df4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011ce0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011ce2:	e011      	b.n	8011d08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	691b      	ldr	r3, [r3, #16]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d012      	beq.n	8011d12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	3310      	adds	r3, #16
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	f000 fc87 	bl	8012604 <xTaskRemoveFromEventList>
 8011cf6:	4603      	mov	r3, r0
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d001      	beq.n	8011d00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011cfc:	f000 fd5c 	bl	80127b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011d00:	7bbb      	ldrb	r3, [r7, #14]
 8011d02:	3b01      	subs	r3, #1
 8011d04:	b2db      	uxtb	r3, r3
 8011d06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011d08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	dce9      	bgt.n	8011ce4 <prvUnlockQueue+0x60>
 8011d10:	e000      	b.n	8011d14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011d12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	22ff      	movs	r2, #255	; 0xff
 8011d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011d1c:	f001 f89a 	bl	8012e54 <vPortExitCritical>
}
 8011d20:	bf00      	nop
 8011d22:	3710      	adds	r7, #16
 8011d24:	46bd      	mov	sp, r7
 8011d26:	bd80      	pop	{r7, pc}

08011d28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b084      	sub	sp, #16
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011d30:	f001 f860 	bl	8012df4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d102      	bne.n	8011d42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011d3c:	2301      	movs	r3, #1
 8011d3e:	60fb      	str	r3, [r7, #12]
 8011d40:	e001      	b.n	8011d46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011d42:	2300      	movs	r3, #0
 8011d44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011d46:	f001 f885 	bl	8012e54 <vPortExitCritical>

	return xReturn;
 8011d4a:	68fb      	ldr	r3, [r7, #12]
}
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	3710      	adds	r7, #16
 8011d50:	46bd      	mov	sp, r7
 8011d52:	bd80      	pop	{r7, pc}

08011d54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011d54:	b580      	push	{r7, lr}
 8011d56:	b084      	sub	sp, #16
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011d5c:	f001 f84a 	bl	8012df4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d68:	429a      	cmp	r2, r3
 8011d6a:	d102      	bne.n	8011d72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011d6c:	2301      	movs	r3, #1
 8011d6e:	60fb      	str	r3, [r7, #12]
 8011d70:	e001      	b.n	8011d76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011d72:	2300      	movs	r3, #0
 8011d74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011d76:	f001 f86d 	bl	8012e54 <vPortExitCritical>

	return xReturn;
 8011d7a:	68fb      	ldr	r3, [r7, #12]
}
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	3710      	adds	r7, #16
 8011d80:	46bd      	mov	sp, r7
 8011d82:	bd80      	pop	{r7, pc}

08011d84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b08e      	sub	sp, #56	; 0x38
 8011d88:	af04      	add	r7, sp, #16
 8011d8a:	60f8      	str	r0, [r7, #12]
 8011d8c:	60b9      	str	r1, [r7, #8]
 8011d8e:	607a      	str	r2, [r7, #4]
 8011d90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d10a      	bne.n	8011dae <xTaskCreateStatic+0x2a>
	__asm volatile
 8011d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d9c:	f383 8811 	msr	BASEPRI, r3
 8011da0:	f3bf 8f6f 	isb	sy
 8011da4:	f3bf 8f4f 	dsb	sy
 8011da8:	623b      	str	r3, [r7, #32]
}
 8011daa:	bf00      	nop
 8011dac:	e7fe      	b.n	8011dac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d10a      	bne.n	8011dca <xTaskCreateStatic+0x46>
	__asm volatile
 8011db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011db8:	f383 8811 	msr	BASEPRI, r3
 8011dbc:	f3bf 8f6f 	isb	sy
 8011dc0:	f3bf 8f4f 	dsb	sy
 8011dc4:	61fb      	str	r3, [r7, #28]
}
 8011dc6:	bf00      	nop
 8011dc8:	e7fe      	b.n	8011dc8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011dca:	23b4      	movs	r3, #180	; 0xb4
 8011dcc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011dce:	693b      	ldr	r3, [r7, #16]
 8011dd0:	2bb4      	cmp	r3, #180	; 0xb4
 8011dd2:	d00a      	beq.n	8011dea <xTaskCreateStatic+0x66>
	__asm volatile
 8011dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dd8:	f383 8811 	msr	BASEPRI, r3
 8011ddc:	f3bf 8f6f 	isb	sy
 8011de0:	f3bf 8f4f 	dsb	sy
 8011de4:	61bb      	str	r3, [r7, #24]
}
 8011de6:	bf00      	nop
 8011de8:	e7fe      	b.n	8011de8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011dea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d01e      	beq.n	8011e30 <xTaskCreateStatic+0xac>
 8011df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d01b      	beq.n	8011e30 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dfa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e00:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e04:	2202      	movs	r2, #2
 8011e06:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	9303      	str	r3, [sp, #12]
 8011e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e10:	9302      	str	r3, [sp, #8]
 8011e12:	f107 0314 	add.w	r3, r7, #20
 8011e16:	9301      	str	r3, [sp, #4]
 8011e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e1a:	9300      	str	r3, [sp, #0]
 8011e1c:	683b      	ldr	r3, [r7, #0]
 8011e1e:	687a      	ldr	r2, [r7, #4]
 8011e20:	68b9      	ldr	r1, [r7, #8]
 8011e22:	68f8      	ldr	r0, [r7, #12]
 8011e24:	f000 f850 	bl	8011ec8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011e28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e2a:	f000 f8eb 	bl	8012004 <prvAddNewTaskToReadyList>
 8011e2e:	e001      	b.n	8011e34 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8011e30:	2300      	movs	r3, #0
 8011e32:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011e34:	697b      	ldr	r3, [r7, #20]
	}
 8011e36:	4618      	mov	r0, r3
 8011e38:	3728      	adds	r7, #40	; 0x28
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	bd80      	pop	{r7, pc}

08011e3e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011e3e:	b580      	push	{r7, lr}
 8011e40:	b08c      	sub	sp, #48	; 0x30
 8011e42:	af04      	add	r7, sp, #16
 8011e44:	60f8      	str	r0, [r7, #12]
 8011e46:	60b9      	str	r1, [r7, #8]
 8011e48:	603b      	str	r3, [r7, #0]
 8011e4a:	4613      	mov	r3, r2
 8011e4c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011e4e:	88fb      	ldrh	r3, [r7, #6]
 8011e50:	009b      	lsls	r3, r3, #2
 8011e52:	4618      	mov	r0, r3
 8011e54:	f001 f8f0 	bl	8013038 <pvPortMalloc>
 8011e58:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011e5a:	697b      	ldr	r3, [r7, #20]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d00e      	beq.n	8011e7e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011e60:	20b4      	movs	r0, #180	; 0xb4
 8011e62:	f001 f8e9 	bl	8013038 <pvPortMalloc>
 8011e66:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011e68:	69fb      	ldr	r3, [r7, #28]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d003      	beq.n	8011e76 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011e6e:	69fb      	ldr	r3, [r7, #28]
 8011e70:	697a      	ldr	r2, [r7, #20]
 8011e72:	631a      	str	r2, [r3, #48]	; 0x30
 8011e74:	e005      	b.n	8011e82 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011e76:	6978      	ldr	r0, [r7, #20]
 8011e78:	f001 f9aa 	bl	80131d0 <vPortFree>
 8011e7c:	e001      	b.n	8011e82 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011e7e:	2300      	movs	r3, #0
 8011e80:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011e82:	69fb      	ldr	r3, [r7, #28]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d017      	beq.n	8011eb8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011e88:	69fb      	ldr	r3, [r7, #28]
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011e90:	88fa      	ldrh	r2, [r7, #6]
 8011e92:	2300      	movs	r3, #0
 8011e94:	9303      	str	r3, [sp, #12]
 8011e96:	69fb      	ldr	r3, [r7, #28]
 8011e98:	9302      	str	r3, [sp, #8]
 8011e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e9c:	9301      	str	r3, [sp, #4]
 8011e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ea0:	9300      	str	r3, [sp, #0]
 8011ea2:	683b      	ldr	r3, [r7, #0]
 8011ea4:	68b9      	ldr	r1, [r7, #8]
 8011ea6:	68f8      	ldr	r0, [r7, #12]
 8011ea8:	f000 f80e 	bl	8011ec8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011eac:	69f8      	ldr	r0, [r7, #28]
 8011eae:	f000 f8a9 	bl	8012004 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011eb2:	2301      	movs	r3, #1
 8011eb4:	61bb      	str	r3, [r7, #24]
 8011eb6:	e002      	b.n	8011ebe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8011ebc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011ebe:	69bb      	ldr	r3, [r7, #24]
	}
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	3720      	adds	r7, #32
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	bd80      	pop	{r7, pc}

08011ec8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	b088      	sub	sp, #32
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	60f8      	str	r0, [r7, #12]
 8011ed0:	60b9      	str	r1, [r7, #8]
 8011ed2:	607a      	str	r2, [r7, #4]
 8011ed4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ed8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011ee0:	3b01      	subs	r3, #1
 8011ee2:	009b      	lsls	r3, r3, #2
 8011ee4:	4413      	add	r3, r2
 8011ee6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011ee8:	69bb      	ldr	r3, [r7, #24]
 8011eea:	f023 0307 	bic.w	r3, r3, #7
 8011eee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011ef0:	69bb      	ldr	r3, [r7, #24]
 8011ef2:	f003 0307 	and.w	r3, r3, #7
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d00a      	beq.n	8011f10 <prvInitialiseNewTask+0x48>
	__asm volatile
 8011efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011efe:	f383 8811 	msr	BASEPRI, r3
 8011f02:	f3bf 8f6f 	isb	sy
 8011f06:	f3bf 8f4f 	dsb	sy
 8011f0a:	617b      	str	r3, [r7, #20]
}
 8011f0c:	bf00      	nop
 8011f0e:	e7fe      	b.n	8011f0e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011f10:	68bb      	ldr	r3, [r7, #8]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d01f      	beq.n	8011f56 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011f16:	2300      	movs	r3, #0
 8011f18:	61fb      	str	r3, [r7, #28]
 8011f1a:	e012      	b.n	8011f42 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011f1c:	68ba      	ldr	r2, [r7, #8]
 8011f1e:	69fb      	ldr	r3, [r7, #28]
 8011f20:	4413      	add	r3, r2
 8011f22:	7819      	ldrb	r1, [r3, #0]
 8011f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f26:	69fb      	ldr	r3, [r7, #28]
 8011f28:	4413      	add	r3, r2
 8011f2a:	3334      	adds	r3, #52	; 0x34
 8011f2c:	460a      	mov	r2, r1
 8011f2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011f30:	68ba      	ldr	r2, [r7, #8]
 8011f32:	69fb      	ldr	r3, [r7, #28]
 8011f34:	4413      	add	r3, r2
 8011f36:	781b      	ldrb	r3, [r3, #0]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d006      	beq.n	8011f4a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011f3c:	69fb      	ldr	r3, [r7, #28]
 8011f3e:	3301      	adds	r3, #1
 8011f40:	61fb      	str	r3, [r7, #28]
 8011f42:	69fb      	ldr	r3, [r7, #28]
 8011f44:	2b0f      	cmp	r3, #15
 8011f46:	d9e9      	bls.n	8011f1c <prvInitialiseNewTask+0x54>
 8011f48:	e000      	b.n	8011f4c <prvInitialiseNewTask+0x84>
			{
				break;
 8011f4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f4e:	2200      	movs	r2, #0
 8011f50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011f54:	e003      	b.n	8011f5e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f58:	2200      	movs	r2, #0
 8011f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f60:	2b06      	cmp	r3, #6
 8011f62:	d901      	bls.n	8011f68 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011f64:	2306      	movs	r3, #6
 8011f66:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f72:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8011f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f76:	2200      	movs	r2, #0
 8011f78:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f7c:	3304      	adds	r3, #4
 8011f7e:	4618      	mov	r0, r3
 8011f80:	f7ff f928 	bl	80111d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f86:	3318      	adds	r3, #24
 8011f88:	4618      	mov	r0, r3
 8011f8a:	f7ff f923 	bl	80111d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f96:	f1c3 0207 	rsb	r2, r3, #7
 8011f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011fa2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fa6:	2200      	movs	r2, #0
 8011fa8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fae:	2200      	movs	r2, #0
 8011fb0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8011fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fb6:	334c      	adds	r3, #76	; 0x4c
 8011fb8:	2260      	movs	r2, #96	; 0x60
 8011fba:	2100      	movs	r1, #0
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	f001 fed3 	bl	8013d68 <memset>
 8011fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fc4:	4a0c      	ldr	r2, [pc, #48]	; (8011ff8 <prvInitialiseNewTask+0x130>)
 8011fc6:	651a      	str	r2, [r3, #80]	; 0x50
 8011fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fca:	4a0c      	ldr	r2, [pc, #48]	; (8011ffc <prvInitialiseNewTask+0x134>)
 8011fcc:	655a      	str	r2, [r3, #84]	; 0x54
 8011fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fd0:	4a0b      	ldr	r2, [pc, #44]	; (8012000 <prvInitialiseNewTask+0x138>)
 8011fd2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011fd4:	683a      	ldr	r2, [r7, #0]
 8011fd6:	68f9      	ldr	r1, [r7, #12]
 8011fd8:	69b8      	ldr	r0, [r7, #24]
 8011fda:	f000 fddd 	bl	8012b98 <pxPortInitialiseStack>
 8011fde:	4602      	mov	r2, r0
 8011fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fe2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d002      	beq.n	8011ff0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011fee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011ff0:	bf00      	nop
 8011ff2:	3720      	adds	r7, #32
 8011ff4:	46bd      	mov	sp, r7
 8011ff6:	bd80      	pop	{r7, pc}
 8011ff8:	08016cc0 	.word	0x08016cc0
 8011ffc:	08016ce0 	.word	0x08016ce0
 8012000:	08016ca0 	.word	0x08016ca0

08012004 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012004:	b580      	push	{r7, lr}
 8012006:	b082      	sub	sp, #8
 8012008:	af00      	add	r7, sp, #0
 801200a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801200c:	f000 fef2 	bl	8012df4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012010:	4b2a      	ldr	r3, [pc, #168]	; (80120bc <prvAddNewTaskToReadyList+0xb8>)
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	3301      	adds	r3, #1
 8012016:	4a29      	ldr	r2, [pc, #164]	; (80120bc <prvAddNewTaskToReadyList+0xb8>)
 8012018:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801201a:	4b29      	ldr	r3, [pc, #164]	; (80120c0 <prvAddNewTaskToReadyList+0xbc>)
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d109      	bne.n	8012036 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012022:	4a27      	ldr	r2, [pc, #156]	; (80120c0 <prvAddNewTaskToReadyList+0xbc>)
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012028:	4b24      	ldr	r3, [pc, #144]	; (80120bc <prvAddNewTaskToReadyList+0xb8>)
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	2b01      	cmp	r3, #1
 801202e:	d110      	bne.n	8012052 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012030:	f000 fbe6 	bl	8012800 <prvInitialiseTaskLists>
 8012034:	e00d      	b.n	8012052 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012036:	4b23      	ldr	r3, [pc, #140]	; (80120c4 <prvAddNewTaskToReadyList+0xc0>)
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	2b00      	cmp	r3, #0
 801203c:	d109      	bne.n	8012052 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801203e:	4b20      	ldr	r3, [pc, #128]	; (80120c0 <prvAddNewTaskToReadyList+0xbc>)
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012048:	429a      	cmp	r2, r3
 801204a:	d802      	bhi.n	8012052 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801204c:	4a1c      	ldr	r2, [pc, #112]	; (80120c0 <prvAddNewTaskToReadyList+0xbc>)
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012052:	4b1d      	ldr	r3, [pc, #116]	; (80120c8 <prvAddNewTaskToReadyList+0xc4>)
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	3301      	adds	r3, #1
 8012058:	4a1b      	ldr	r2, [pc, #108]	; (80120c8 <prvAddNewTaskToReadyList+0xc4>)
 801205a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012060:	2201      	movs	r2, #1
 8012062:	409a      	lsls	r2, r3
 8012064:	4b19      	ldr	r3, [pc, #100]	; (80120cc <prvAddNewTaskToReadyList+0xc8>)
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	4313      	orrs	r3, r2
 801206a:	4a18      	ldr	r2, [pc, #96]	; (80120cc <prvAddNewTaskToReadyList+0xc8>)
 801206c:	6013      	str	r3, [r2, #0]
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012072:	4613      	mov	r3, r2
 8012074:	009b      	lsls	r3, r3, #2
 8012076:	4413      	add	r3, r2
 8012078:	009b      	lsls	r3, r3, #2
 801207a:	4a15      	ldr	r2, [pc, #84]	; (80120d0 <prvAddNewTaskToReadyList+0xcc>)
 801207c:	441a      	add	r2, r3
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	3304      	adds	r3, #4
 8012082:	4619      	mov	r1, r3
 8012084:	4610      	mov	r0, r2
 8012086:	f7ff f8b2 	bl	80111ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801208a:	f000 fee3 	bl	8012e54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801208e:	4b0d      	ldr	r3, [pc, #52]	; (80120c4 <prvAddNewTaskToReadyList+0xc0>)
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d00e      	beq.n	80120b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012096:	4b0a      	ldr	r3, [pc, #40]	; (80120c0 <prvAddNewTaskToReadyList+0xbc>)
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120a0:	429a      	cmp	r2, r3
 80120a2:	d207      	bcs.n	80120b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80120a4:	4b0b      	ldr	r3, [pc, #44]	; (80120d4 <prvAddNewTaskToReadyList+0xd0>)
 80120a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80120aa:	601a      	str	r2, [r3, #0]
 80120ac:	f3bf 8f4f 	dsb	sy
 80120b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80120b4:	bf00      	nop
 80120b6:	3708      	adds	r7, #8
 80120b8:	46bd      	mov	sp, r7
 80120ba:	bd80      	pop	{r7, pc}
 80120bc:	20002320 	.word	0x20002320
 80120c0:	20002220 	.word	0x20002220
 80120c4:	2000232c 	.word	0x2000232c
 80120c8:	2000233c 	.word	0x2000233c
 80120cc:	20002328 	.word	0x20002328
 80120d0:	20002224 	.word	0x20002224
 80120d4:	e000ed04 	.word	0xe000ed04

080120d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80120d8:	b580      	push	{r7, lr}
 80120da:	b084      	sub	sp, #16
 80120dc:	af00      	add	r7, sp, #0
 80120de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80120e0:	2300      	movs	r3, #0
 80120e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d017      	beq.n	801211a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80120ea:	4b13      	ldr	r3, [pc, #76]	; (8012138 <vTaskDelay+0x60>)
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d00a      	beq.n	8012108 <vTaskDelay+0x30>
	__asm volatile
 80120f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120f6:	f383 8811 	msr	BASEPRI, r3
 80120fa:	f3bf 8f6f 	isb	sy
 80120fe:	f3bf 8f4f 	dsb	sy
 8012102:	60bb      	str	r3, [r7, #8]
}
 8012104:	bf00      	nop
 8012106:	e7fe      	b.n	8012106 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012108:	f000 f884 	bl	8012214 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801210c:	2100      	movs	r1, #0
 801210e:	6878      	ldr	r0, [r7, #4]
 8012110:	f000 fcdc 	bl	8012acc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012114:	f000 f88c 	bl	8012230 <xTaskResumeAll>
 8012118:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	2b00      	cmp	r3, #0
 801211e:	d107      	bne.n	8012130 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8012120:	4b06      	ldr	r3, [pc, #24]	; (801213c <vTaskDelay+0x64>)
 8012122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012126:	601a      	str	r2, [r3, #0]
 8012128:	f3bf 8f4f 	dsb	sy
 801212c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012130:	bf00      	nop
 8012132:	3710      	adds	r7, #16
 8012134:	46bd      	mov	sp, r7
 8012136:	bd80      	pop	{r7, pc}
 8012138:	20002348 	.word	0x20002348
 801213c:	e000ed04 	.word	0xe000ed04

08012140 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012140:	b580      	push	{r7, lr}
 8012142:	b08a      	sub	sp, #40	; 0x28
 8012144:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012146:	2300      	movs	r3, #0
 8012148:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801214a:	2300      	movs	r3, #0
 801214c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801214e:	463a      	mov	r2, r7
 8012150:	1d39      	adds	r1, r7, #4
 8012152:	f107 0308 	add.w	r3, r7, #8
 8012156:	4618      	mov	r0, r3
 8012158:	f7ee fed0 	bl	8000efc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801215c:	6839      	ldr	r1, [r7, #0]
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	68ba      	ldr	r2, [r7, #8]
 8012162:	9202      	str	r2, [sp, #8]
 8012164:	9301      	str	r3, [sp, #4]
 8012166:	2300      	movs	r3, #0
 8012168:	9300      	str	r3, [sp, #0]
 801216a:	2300      	movs	r3, #0
 801216c:	460a      	mov	r2, r1
 801216e:	4921      	ldr	r1, [pc, #132]	; (80121f4 <vTaskStartScheduler+0xb4>)
 8012170:	4821      	ldr	r0, [pc, #132]	; (80121f8 <vTaskStartScheduler+0xb8>)
 8012172:	f7ff fe07 	bl	8011d84 <xTaskCreateStatic>
 8012176:	4603      	mov	r3, r0
 8012178:	4a20      	ldr	r2, [pc, #128]	; (80121fc <vTaskStartScheduler+0xbc>)
 801217a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801217c:	4b1f      	ldr	r3, [pc, #124]	; (80121fc <vTaskStartScheduler+0xbc>)
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d002      	beq.n	801218a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012184:	2301      	movs	r3, #1
 8012186:	617b      	str	r3, [r7, #20]
 8012188:	e001      	b.n	801218e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801218a:	2300      	movs	r3, #0
 801218c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801218e:	697b      	ldr	r3, [r7, #20]
 8012190:	2b01      	cmp	r3, #1
 8012192:	d11b      	bne.n	80121cc <vTaskStartScheduler+0x8c>
	__asm volatile
 8012194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012198:	f383 8811 	msr	BASEPRI, r3
 801219c:	f3bf 8f6f 	isb	sy
 80121a0:	f3bf 8f4f 	dsb	sy
 80121a4:	613b      	str	r3, [r7, #16]
}
 80121a6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80121a8:	4b15      	ldr	r3, [pc, #84]	; (8012200 <vTaskStartScheduler+0xc0>)
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	334c      	adds	r3, #76	; 0x4c
 80121ae:	4a15      	ldr	r2, [pc, #84]	; (8012204 <vTaskStartScheduler+0xc4>)
 80121b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80121b2:	4b15      	ldr	r3, [pc, #84]	; (8012208 <vTaskStartScheduler+0xc8>)
 80121b4:	f04f 32ff 	mov.w	r2, #4294967295
 80121b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80121ba:	4b14      	ldr	r3, [pc, #80]	; (801220c <vTaskStartScheduler+0xcc>)
 80121bc:	2201      	movs	r2, #1
 80121be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80121c0:	4b13      	ldr	r3, [pc, #76]	; (8012210 <vTaskStartScheduler+0xd0>)
 80121c2:	2200      	movs	r2, #0
 80121c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80121c6:	f000 fd73 	bl	8012cb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80121ca:	e00e      	b.n	80121ea <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80121cc:	697b      	ldr	r3, [r7, #20]
 80121ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121d2:	d10a      	bne.n	80121ea <vTaskStartScheduler+0xaa>
	__asm volatile
 80121d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121d8:	f383 8811 	msr	BASEPRI, r3
 80121dc:	f3bf 8f6f 	isb	sy
 80121e0:	f3bf 8f4f 	dsb	sy
 80121e4:	60fb      	str	r3, [r7, #12]
}
 80121e6:	bf00      	nop
 80121e8:	e7fe      	b.n	80121e8 <vTaskStartScheduler+0xa8>
}
 80121ea:	bf00      	nop
 80121ec:	3718      	adds	r7, #24
 80121ee:	46bd      	mov	sp, r7
 80121f0:	bd80      	pop	{r7, pc}
 80121f2:	bf00      	nop
 80121f4:	0801682c 	.word	0x0801682c
 80121f8:	080127d1 	.word	0x080127d1
 80121fc:	20002344 	.word	0x20002344
 8012200:	20002220 	.word	0x20002220
 8012204:	200002b4 	.word	0x200002b4
 8012208:	20002340 	.word	0x20002340
 801220c:	2000232c 	.word	0x2000232c
 8012210:	20002324 	.word	0x20002324

08012214 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012214:	b480      	push	{r7}
 8012216:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012218:	4b04      	ldr	r3, [pc, #16]	; (801222c <vTaskSuspendAll+0x18>)
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	3301      	adds	r3, #1
 801221e:	4a03      	ldr	r2, [pc, #12]	; (801222c <vTaskSuspendAll+0x18>)
 8012220:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8012222:	bf00      	nop
 8012224:	46bd      	mov	sp, r7
 8012226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222a:	4770      	bx	lr
 801222c:	20002348 	.word	0x20002348

08012230 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012230:	b580      	push	{r7, lr}
 8012232:	b084      	sub	sp, #16
 8012234:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012236:	2300      	movs	r3, #0
 8012238:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801223a:	2300      	movs	r3, #0
 801223c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801223e:	4b41      	ldr	r3, [pc, #260]	; (8012344 <xTaskResumeAll+0x114>)
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d10a      	bne.n	801225c <xTaskResumeAll+0x2c>
	__asm volatile
 8012246:	f04f 0350 	mov.w	r3, #80	; 0x50
 801224a:	f383 8811 	msr	BASEPRI, r3
 801224e:	f3bf 8f6f 	isb	sy
 8012252:	f3bf 8f4f 	dsb	sy
 8012256:	603b      	str	r3, [r7, #0]
}
 8012258:	bf00      	nop
 801225a:	e7fe      	b.n	801225a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801225c:	f000 fdca 	bl	8012df4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012260:	4b38      	ldr	r3, [pc, #224]	; (8012344 <xTaskResumeAll+0x114>)
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	3b01      	subs	r3, #1
 8012266:	4a37      	ldr	r2, [pc, #220]	; (8012344 <xTaskResumeAll+0x114>)
 8012268:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801226a:	4b36      	ldr	r3, [pc, #216]	; (8012344 <xTaskResumeAll+0x114>)
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d161      	bne.n	8012336 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012272:	4b35      	ldr	r3, [pc, #212]	; (8012348 <xTaskResumeAll+0x118>)
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d05d      	beq.n	8012336 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801227a:	e02e      	b.n	80122da <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801227c:	4b33      	ldr	r3, [pc, #204]	; (801234c <xTaskResumeAll+0x11c>)
 801227e:	68db      	ldr	r3, [r3, #12]
 8012280:	68db      	ldr	r3, [r3, #12]
 8012282:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	3318      	adds	r3, #24
 8012288:	4618      	mov	r0, r3
 801228a:	f7ff f80d 	bl	80112a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	3304      	adds	r3, #4
 8012292:	4618      	mov	r0, r3
 8012294:	f7ff f808 	bl	80112a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801229c:	2201      	movs	r2, #1
 801229e:	409a      	lsls	r2, r3
 80122a0:	4b2b      	ldr	r3, [pc, #172]	; (8012350 <xTaskResumeAll+0x120>)
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	4313      	orrs	r3, r2
 80122a6:	4a2a      	ldr	r2, [pc, #168]	; (8012350 <xTaskResumeAll+0x120>)
 80122a8:	6013      	str	r3, [r2, #0]
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122ae:	4613      	mov	r3, r2
 80122b0:	009b      	lsls	r3, r3, #2
 80122b2:	4413      	add	r3, r2
 80122b4:	009b      	lsls	r3, r3, #2
 80122b6:	4a27      	ldr	r2, [pc, #156]	; (8012354 <xTaskResumeAll+0x124>)
 80122b8:	441a      	add	r2, r3
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	3304      	adds	r3, #4
 80122be:	4619      	mov	r1, r3
 80122c0:	4610      	mov	r0, r2
 80122c2:	f7fe ff94 	bl	80111ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122ca:	4b23      	ldr	r3, [pc, #140]	; (8012358 <xTaskResumeAll+0x128>)
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122d0:	429a      	cmp	r2, r3
 80122d2:	d302      	bcc.n	80122da <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80122d4:	4b21      	ldr	r3, [pc, #132]	; (801235c <xTaskResumeAll+0x12c>)
 80122d6:	2201      	movs	r2, #1
 80122d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80122da:	4b1c      	ldr	r3, [pc, #112]	; (801234c <xTaskResumeAll+0x11c>)
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d1cc      	bne.n	801227c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d001      	beq.n	80122ec <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80122e8:	f000 fb2c 	bl	8012944 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80122ec:	4b1c      	ldr	r3, [pc, #112]	; (8012360 <xTaskResumeAll+0x130>)
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d010      	beq.n	801231a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80122f8:	f000 f846 	bl	8012388 <xTaskIncrementTick>
 80122fc:	4603      	mov	r3, r0
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d002      	beq.n	8012308 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8012302:	4b16      	ldr	r3, [pc, #88]	; (801235c <xTaskResumeAll+0x12c>)
 8012304:	2201      	movs	r2, #1
 8012306:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	3b01      	subs	r3, #1
 801230c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d1f1      	bne.n	80122f8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8012314:	4b12      	ldr	r3, [pc, #72]	; (8012360 <xTaskResumeAll+0x130>)
 8012316:	2200      	movs	r2, #0
 8012318:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801231a:	4b10      	ldr	r3, [pc, #64]	; (801235c <xTaskResumeAll+0x12c>)
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d009      	beq.n	8012336 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012322:	2301      	movs	r3, #1
 8012324:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012326:	4b0f      	ldr	r3, [pc, #60]	; (8012364 <xTaskResumeAll+0x134>)
 8012328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801232c:	601a      	str	r2, [r3, #0]
 801232e:	f3bf 8f4f 	dsb	sy
 8012332:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012336:	f000 fd8d 	bl	8012e54 <vPortExitCritical>

	return xAlreadyYielded;
 801233a:	68bb      	ldr	r3, [r7, #8]
}
 801233c:	4618      	mov	r0, r3
 801233e:	3710      	adds	r7, #16
 8012340:	46bd      	mov	sp, r7
 8012342:	bd80      	pop	{r7, pc}
 8012344:	20002348 	.word	0x20002348
 8012348:	20002320 	.word	0x20002320
 801234c:	200022e0 	.word	0x200022e0
 8012350:	20002328 	.word	0x20002328
 8012354:	20002224 	.word	0x20002224
 8012358:	20002220 	.word	0x20002220
 801235c:	20002334 	.word	0x20002334
 8012360:	20002330 	.word	0x20002330
 8012364:	e000ed04 	.word	0xe000ed04

08012368 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012368:	b480      	push	{r7}
 801236a:	b083      	sub	sp, #12
 801236c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801236e:	4b05      	ldr	r3, [pc, #20]	; (8012384 <xTaskGetTickCount+0x1c>)
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012374:	687b      	ldr	r3, [r7, #4]
}
 8012376:	4618      	mov	r0, r3
 8012378:	370c      	adds	r7, #12
 801237a:	46bd      	mov	sp, r7
 801237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012380:	4770      	bx	lr
 8012382:	bf00      	nop
 8012384:	20002324 	.word	0x20002324

08012388 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012388:	b580      	push	{r7, lr}
 801238a:	b086      	sub	sp, #24
 801238c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801238e:	2300      	movs	r3, #0
 8012390:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012392:	4b4e      	ldr	r3, [pc, #312]	; (80124cc <xTaskIncrementTick+0x144>)
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	2b00      	cmp	r3, #0
 8012398:	f040 808e 	bne.w	80124b8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801239c:	4b4c      	ldr	r3, [pc, #304]	; (80124d0 <xTaskIncrementTick+0x148>)
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	3301      	adds	r3, #1
 80123a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80123a4:	4a4a      	ldr	r2, [pc, #296]	; (80124d0 <xTaskIncrementTick+0x148>)
 80123a6:	693b      	ldr	r3, [r7, #16]
 80123a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80123aa:	693b      	ldr	r3, [r7, #16]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d120      	bne.n	80123f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80123b0:	4b48      	ldr	r3, [pc, #288]	; (80124d4 <xTaskIncrementTick+0x14c>)
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d00a      	beq.n	80123d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80123ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123be:	f383 8811 	msr	BASEPRI, r3
 80123c2:	f3bf 8f6f 	isb	sy
 80123c6:	f3bf 8f4f 	dsb	sy
 80123ca:	603b      	str	r3, [r7, #0]
}
 80123cc:	bf00      	nop
 80123ce:	e7fe      	b.n	80123ce <xTaskIncrementTick+0x46>
 80123d0:	4b40      	ldr	r3, [pc, #256]	; (80124d4 <xTaskIncrementTick+0x14c>)
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	60fb      	str	r3, [r7, #12]
 80123d6:	4b40      	ldr	r3, [pc, #256]	; (80124d8 <xTaskIncrementTick+0x150>)
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	4a3e      	ldr	r2, [pc, #248]	; (80124d4 <xTaskIncrementTick+0x14c>)
 80123dc:	6013      	str	r3, [r2, #0]
 80123de:	4a3e      	ldr	r2, [pc, #248]	; (80124d8 <xTaskIncrementTick+0x150>)
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	6013      	str	r3, [r2, #0]
 80123e4:	4b3d      	ldr	r3, [pc, #244]	; (80124dc <xTaskIncrementTick+0x154>)
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	3301      	adds	r3, #1
 80123ea:	4a3c      	ldr	r2, [pc, #240]	; (80124dc <xTaskIncrementTick+0x154>)
 80123ec:	6013      	str	r3, [r2, #0]
 80123ee:	f000 faa9 	bl	8012944 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80123f2:	4b3b      	ldr	r3, [pc, #236]	; (80124e0 <xTaskIncrementTick+0x158>)
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	693a      	ldr	r2, [r7, #16]
 80123f8:	429a      	cmp	r2, r3
 80123fa:	d348      	bcc.n	801248e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80123fc:	4b35      	ldr	r3, [pc, #212]	; (80124d4 <xTaskIncrementTick+0x14c>)
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d104      	bne.n	8012410 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012406:	4b36      	ldr	r3, [pc, #216]	; (80124e0 <xTaskIncrementTick+0x158>)
 8012408:	f04f 32ff 	mov.w	r2, #4294967295
 801240c:	601a      	str	r2, [r3, #0]
					break;
 801240e:	e03e      	b.n	801248e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012410:	4b30      	ldr	r3, [pc, #192]	; (80124d4 <xTaskIncrementTick+0x14c>)
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	68db      	ldr	r3, [r3, #12]
 8012416:	68db      	ldr	r3, [r3, #12]
 8012418:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801241a:	68bb      	ldr	r3, [r7, #8]
 801241c:	685b      	ldr	r3, [r3, #4]
 801241e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012420:	693a      	ldr	r2, [r7, #16]
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	429a      	cmp	r2, r3
 8012426:	d203      	bcs.n	8012430 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012428:	4a2d      	ldr	r2, [pc, #180]	; (80124e0 <xTaskIncrementTick+0x158>)
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801242e:	e02e      	b.n	801248e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012430:	68bb      	ldr	r3, [r7, #8]
 8012432:	3304      	adds	r3, #4
 8012434:	4618      	mov	r0, r3
 8012436:	f7fe ff37 	bl	80112a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801243a:	68bb      	ldr	r3, [r7, #8]
 801243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801243e:	2b00      	cmp	r3, #0
 8012440:	d004      	beq.n	801244c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012442:	68bb      	ldr	r3, [r7, #8]
 8012444:	3318      	adds	r3, #24
 8012446:	4618      	mov	r0, r3
 8012448:	f7fe ff2e 	bl	80112a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801244c:	68bb      	ldr	r3, [r7, #8]
 801244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012450:	2201      	movs	r2, #1
 8012452:	409a      	lsls	r2, r3
 8012454:	4b23      	ldr	r3, [pc, #140]	; (80124e4 <xTaskIncrementTick+0x15c>)
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	4313      	orrs	r3, r2
 801245a:	4a22      	ldr	r2, [pc, #136]	; (80124e4 <xTaskIncrementTick+0x15c>)
 801245c:	6013      	str	r3, [r2, #0]
 801245e:	68bb      	ldr	r3, [r7, #8]
 8012460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012462:	4613      	mov	r3, r2
 8012464:	009b      	lsls	r3, r3, #2
 8012466:	4413      	add	r3, r2
 8012468:	009b      	lsls	r3, r3, #2
 801246a:	4a1f      	ldr	r2, [pc, #124]	; (80124e8 <xTaskIncrementTick+0x160>)
 801246c:	441a      	add	r2, r3
 801246e:	68bb      	ldr	r3, [r7, #8]
 8012470:	3304      	adds	r3, #4
 8012472:	4619      	mov	r1, r3
 8012474:	4610      	mov	r0, r2
 8012476:	f7fe feba 	bl	80111ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801247a:	68bb      	ldr	r3, [r7, #8]
 801247c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801247e:	4b1b      	ldr	r3, [pc, #108]	; (80124ec <xTaskIncrementTick+0x164>)
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012484:	429a      	cmp	r2, r3
 8012486:	d3b9      	bcc.n	80123fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8012488:	2301      	movs	r3, #1
 801248a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801248c:	e7b6      	b.n	80123fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801248e:	4b17      	ldr	r3, [pc, #92]	; (80124ec <xTaskIncrementTick+0x164>)
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012494:	4914      	ldr	r1, [pc, #80]	; (80124e8 <xTaskIncrementTick+0x160>)
 8012496:	4613      	mov	r3, r2
 8012498:	009b      	lsls	r3, r3, #2
 801249a:	4413      	add	r3, r2
 801249c:	009b      	lsls	r3, r3, #2
 801249e:	440b      	add	r3, r1
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	2b01      	cmp	r3, #1
 80124a4:	d901      	bls.n	80124aa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80124a6:	2301      	movs	r3, #1
 80124a8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80124aa:	4b11      	ldr	r3, [pc, #68]	; (80124f0 <xTaskIncrementTick+0x168>)
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d007      	beq.n	80124c2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80124b2:	2301      	movs	r3, #1
 80124b4:	617b      	str	r3, [r7, #20]
 80124b6:	e004      	b.n	80124c2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80124b8:	4b0e      	ldr	r3, [pc, #56]	; (80124f4 <xTaskIncrementTick+0x16c>)
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	3301      	adds	r3, #1
 80124be:	4a0d      	ldr	r2, [pc, #52]	; (80124f4 <xTaskIncrementTick+0x16c>)
 80124c0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80124c2:	697b      	ldr	r3, [r7, #20]
}
 80124c4:	4618      	mov	r0, r3
 80124c6:	3718      	adds	r7, #24
 80124c8:	46bd      	mov	sp, r7
 80124ca:	bd80      	pop	{r7, pc}
 80124cc:	20002348 	.word	0x20002348
 80124d0:	20002324 	.word	0x20002324
 80124d4:	200022d8 	.word	0x200022d8
 80124d8:	200022dc 	.word	0x200022dc
 80124dc:	20002338 	.word	0x20002338
 80124e0:	20002340 	.word	0x20002340
 80124e4:	20002328 	.word	0x20002328
 80124e8:	20002224 	.word	0x20002224
 80124ec:	20002220 	.word	0x20002220
 80124f0:	20002334 	.word	0x20002334
 80124f4:	20002330 	.word	0x20002330

080124f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80124f8:	b480      	push	{r7}
 80124fa:	b087      	sub	sp, #28
 80124fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80124fe:	4b29      	ldr	r3, [pc, #164]	; (80125a4 <vTaskSwitchContext+0xac>)
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d003      	beq.n	801250e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012506:	4b28      	ldr	r3, [pc, #160]	; (80125a8 <vTaskSwitchContext+0xb0>)
 8012508:	2201      	movs	r2, #1
 801250a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801250c:	e044      	b.n	8012598 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 801250e:	4b26      	ldr	r3, [pc, #152]	; (80125a8 <vTaskSwitchContext+0xb0>)
 8012510:	2200      	movs	r2, #0
 8012512:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012514:	4b25      	ldr	r3, [pc, #148]	; (80125ac <vTaskSwitchContext+0xb4>)
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	fab3 f383 	clz	r3, r3
 8012520:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8012522:	7afb      	ldrb	r3, [r7, #11]
 8012524:	f1c3 031f 	rsb	r3, r3, #31
 8012528:	617b      	str	r3, [r7, #20]
 801252a:	4921      	ldr	r1, [pc, #132]	; (80125b0 <vTaskSwitchContext+0xb8>)
 801252c:	697a      	ldr	r2, [r7, #20]
 801252e:	4613      	mov	r3, r2
 8012530:	009b      	lsls	r3, r3, #2
 8012532:	4413      	add	r3, r2
 8012534:	009b      	lsls	r3, r3, #2
 8012536:	440b      	add	r3, r1
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d10a      	bne.n	8012554 <vTaskSwitchContext+0x5c>
	__asm volatile
 801253e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012542:	f383 8811 	msr	BASEPRI, r3
 8012546:	f3bf 8f6f 	isb	sy
 801254a:	f3bf 8f4f 	dsb	sy
 801254e:	607b      	str	r3, [r7, #4]
}
 8012550:	bf00      	nop
 8012552:	e7fe      	b.n	8012552 <vTaskSwitchContext+0x5a>
 8012554:	697a      	ldr	r2, [r7, #20]
 8012556:	4613      	mov	r3, r2
 8012558:	009b      	lsls	r3, r3, #2
 801255a:	4413      	add	r3, r2
 801255c:	009b      	lsls	r3, r3, #2
 801255e:	4a14      	ldr	r2, [pc, #80]	; (80125b0 <vTaskSwitchContext+0xb8>)
 8012560:	4413      	add	r3, r2
 8012562:	613b      	str	r3, [r7, #16]
 8012564:	693b      	ldr	r3, [r7, #16]
 8012566:	685b      	ldr	r3, [r3, #4]
 8012568:	685a      	ldr	r2, [r3, #4]
 801256a:	693b      	ldr	r3, [r7, #16]
 801256c:	605a      	str	r2, [r3, #4]
 801256e:	693b      	ldr	r3, [r7, #16]
 8012570:	685a      	ldr	r2, [r3, #4]
 8012572:	693b      	ldr	r3, [r7, #16]
 8012574:	3308      	adds	r3, #8
 8012576:	429a      	cmp	r2, r3
 8012578:	d104      	bne.n	8012584 <vTaskSwitchContext+0x8c>
 801257a:	693b      	ldr	r3, [r7, #16]
 801257c:	685b      	ldr	r3, [r3, #4]
 801257e:	685a      	ldr	r2, [r3, #4]
 8012580:	693b      	ldr	r3, [r7, #16]
 8012582:	605a      	str	r2, [r3, #4]
 8012584:	693b      	ldr	r3, [r7, #16]
 8012586:	685b      	ldr	r3, [r3, #4]
 8012588:	68db      	ldr	r3, [r3, #12]
 801258a:	4a0a      	ldr	r2, [pc, #40]	; (80125b4 <vTaskSwitchContext+0xbc>)
 801258c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801258e:	4b09      	ldr	r3, [pc, #36]	; (80125b4 <vTaskSwitchContext+0xbc>)
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	334c      	adds	r3, #76	; 0x4c
 8012594:	4a08      	ldr	r2, [pc, #32]	; (80125b8 <vTaskSwitchContext+0xc0>)
 8012596:	6013      	str	r3, [r2, #0]
}
 8012598:	bf00      	nop
 801259a:	371c      	adds	r7, #28
 801259c:	46bd      	mov	sp, r7
 801259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a2:	4770      	bx	lr
 80125a4:	20002348 	.word	0x20002348
 80125a8:	20002334 	.word	0x20002334
 80125ac:	20002328 	.word	0x20002328
 80125b0:	20002224 	.word	0x20002224
 80125b4:	20002220 	.word	0x20002220
 80125b8:	200002b4 	.word	0x200002b4

080125bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80125bc:	b580      	push	{r7, lr}
 80125be:	b084      	sub	sp, #16
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
 80125c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d10a      	bne.n	80125e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80125cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125d0:	f383 8811 	msr	BASEPRI, r3
 80125d4:	f3bf 8f6f 	isb	sy
 80125d8:	f3bf 8f4f 	dsb	sy
 80125dc:	60fb      	str	r3, [r7, #12]
}
 80125de:	bf00      	nop
 80125e0:	e7fe      	b.n	80125e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80125e2:	4b07      	ldr	r3, [pc, #28]	; (8012600 <vTaskPlaceOnEventList+0x44>)
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	3318      	adds	r3, #24
 80125e8:	4619      	mov	r1, r3
 80125ea:	6878      	ldr	r0, [r7, #4]
 80125ec:	f7fe fe23 	bl	8011236 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80125f0:	2101      	movs	r1, #1
 80125f2:	6838      	ldr	r0, [r7, #0]
 80125f4:	f000 fa6a 	bl	8012acc <prvAddCurrentTaskToDelayedList>
}
 80125f8:	bf00      	nop
 80125fa:	3710      	adds	r7, #16
 80125fc:	46bd      	mov	sp, r7
 80125fe:	bd80      	pop	{r7, pc}
 8012600:	20002220 	.word	0x20002220

08012604 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012604:	b580      	push	{r7, lr}
 8012606:	b086      	sub	sp, #24
 8012608:	af00      	add	r7, sp, #0
 801260a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	68db      	ldr	r3, [r3, #12]
 8012610:	68db      	ldr	r3, [r3, #12]
 8012612:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012614:	693b      	ldr	r3, [r7, #16]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d10a      	bne.n	8012630 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801261a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801261e:	f383 8811 	msr	BASEPRI, r3
 8012622:	f3bf 8f6f 	isb	sy
 8012626:	f3bf 8f4f 	dsb	sy
 801262a:	60fb      	str	r3, [r7, #12]
}
 801262c:	bf00      	nop
 801262e:	e7fe      	b.n	801262e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012630:	693b      	ldr	r3, [r7, #16]
 8012632:	3318      	adds	r3, #24
 8012634:	4618      	mov	r0, r3
 8012636:	f7fe fe37 	bl	80112a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801263a:	4b1d      	ldr	r3, [pc, #116]	; (80126b0 <xTaskRemoveFromEventList+0xac>)
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	2b00      	cmp	r3, #0
 8012640:	d11c      	bne.n	801267c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012642:	693b      	ldr	r3, [r7, #16]
 8012644:	3304      	adds	r3, #4
 8012646:	4618      	mov	r0, r3
 8012648:	f7fe fe2e 	bl	80112a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801264c:	693b      	ldr	r3, [r7, #16]
 801264e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012650:	2201      	movs	r2, #1
 8012652:	409a      	lsls	r2, r3
 8012654:	4b17      	ldr	r3, [pc, #92]	; (80126b4 <xTaskRemoveFromEventList+0xb0>)
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	4313      	orrs	r3, r2
 801265a:	4a16      	ldr	r2, [pc, #88]	; (80126b4 <xTaskRemoveFromEventList+0xb0>)
 801265c:	6013      	str	r3, [r2, #0]
 801265e:	693b      	ldr	r3, [r7, #16]
 8012660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012662:	4613      	mov	r3, r2
 8012664:	009b      	lsls	r3, r3, #2
 8012666:	4413      	add	r3, r2
 8012668:	009b      	lsls	r3, r3, #2
 801266a:	4a13      	ldr	r2, [pc, #76]	; (80126b8 <xTaskRemoveFromEventList+0xb4>)
 801266c:	441a      	add	r2, r3
 801266e:	693b      	ldr	r3, [r7, #16]
 8012670:	3304      	adds	r3, #4
 8012672:	4619      	mov	r1, r3
 8012674:	4610      	mov	r0, r2
 8012676:	f7fe fdba 	bl	80111ee <vListInsertEnd>
 801267a:	e005      	b.n	8012688 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801267c:	693b      	ldr	r3, [r7, #16]
 801267e:	3318      	adds	r3, #24
 8012680:	4619      	mov	r1, r3
 8012682:	480e      	ldr	r0, [pc, #56]	; (80126bc <xTaskRemoveFromEventList+0xb8>)
 8012684:	f7fe fdb3 	bl	80111ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012688:	693b      	ldr	r3, [r7, #16]
 801268a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801268c:	4b0c      	ldr	r3, [pc, #48]	; (80126c0 <xTaskRemoveFromEventList+0xbc>)
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012692:	429a      	cmp	r2, r3
 8012694:	d905      	bls.n	80126a2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012696:	2301      	movs	r3, #1
 8012698:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801269a:	4b0a      	ldr	r3, [pc, #40]	; (80126c4 <xTaskRemoveFromEventList+0xc0>)
 801269c:	2201      	movs	r2, #1
 801269e:	601a      	str	r2, [r3, #0]
 80126a0:	e001      	b.n	80126a6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80126a2:	2300      	movs	r3, #0
 80126a4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80126a6:	697b      	ldr	r3, [r7, #20]
}
 80126a8:	4618      	mov	r0, r3
 80126aa:	3718      	adds	r7, #24
 80126ac:	46bd      	mov	sp, r7
 80126ae:	bd80      	pop	{r7, pc}
 80126b0:	20002348 	.word	0x20002348
 80126b4:	20002328 	.word	0x20002328
 80126b8:	20002224 	.word	0x20002224
 80126bc:	200022e0 	.word	0x200022e0
 80126c0:	20002220 	.word	0x20002220
 80126c4:	20002334 	.word	0x20002334

080126c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80126c8:	b480      	push	{r7}
 80126ca:	b083      	sub	sp, #12
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80126d0:	4b06      	ldr	r3, [pc, #24]	; (80126ec <vTaskInternalSetTimeOutState+0x24>)
 80126d2:	681a      	ldr	r2, [r3, #0]
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80126d8:	4b05      	ldr	r3, [pc, #20]	; (80126f0 <vTaskInternalSetTimeOutState+0x28>)
 80126da:	681a      	ldr	r2, [r3, #0]
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	605a      	str	r2, [r3, #4]
}
 80126e0:	bf00      	nop
 80126e2:	370c      	adds	r7, #12
 80126e4:	46bd      	mov	sp, r7
 80126e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ea:	4770      	bx	lr
 80126ec:	20002338 	.word	0x20002338
 80126f0:	20002324 	.word	0x20002324

080126f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b088      	sub	sp, #32
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	6078      	str	r0, [r7, #4]
 80126fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d10a      	bne.n	801271a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8012704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012708:	f383 8811 	msr	BASEPRI, r3
 801270c:	f3bf 8f6f 	isb	sy
 8012710:	f3bf 8f4f 	dsb	sy
 8012714:	613b      	str	r3, [r7, #16]
}
 8012716:	bf00      	nop
 8012718:	e7fe      	b.n	8012718 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801271a:	683b      	ldr	r3, [r7, #0]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d10a      	bne.n	8012736 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8012720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012724:	f383 8811 	msr	BASEPRI, r3
 8012728:	f3bf 8f6f 	isb	sy
 801272c:	f3bf 8f4f 	dsb	sy
 8012730:	60fb      	str	r3, [r7, #12]
}
 8012732:	bf00      	nop
 8012734:	e7fe      	b.n	8012734 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8012736:	f000 fb5d 	bl	8012df4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801273a:	4b1d      	ldr	r3, [pc, #116]	; (80127b0 <xTaskCheckForTimeOut+0xbc>)
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	685b      	ldr	r3, [r3, #4]
 8012744:	69ba      	ldr	r2, [r7, #24]
 8012746:	1ad3      	subs	r3, r2, r3
 8012748:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801274a:	683b      	ldr	r3, [r7, #0]
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012752:	d102      	bne.n	801275a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012754:	2300      	movs	r3, #0
 8012756:	61fb      	str	r3, [r7, #28]
 8012758:	e023      	b.n	80127a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	681a      	ldr	r2, [r3, #0]
 801275e:	4b15      	ldr	r3, [pc, #84]	; (80127b4 <xTaskCheckForTimeOut+0xc0>)
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	429a      	cmp	r2, r3
 8012764:	d007      	beq.n	8012776 <xTaskCheckForTimeOut+0x82>
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	685b      	ldr	r3, [r3, #4]
 801276a:	69ba      	ldr	r2, [r7, #24]
 801276c:	429a      	cmp	r2, r3
 801276e:	d302      	bcc.n	8012776 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012770:	2301      	movs	r3, #1
 8012772:	61fb      	str	r3, [r7, #28]
 8012774:	e015      	b.n	80127a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012776:	683b      	ldr	r3, [r7, #0]
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	697a      	ldr	r2, [r7, #20]
 801277c:	429a      	cmp	r2, r3
 801277e:	d20b      	bcs.n	8012798 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012780:	683b      	ldr	r3, [r7, #0]
 8012782:	681a      	ldr	r2, [r3, #0]
 8012784:	697b      	ldr	r3, [r7, #20]
 8012786:	1ad2      	subs	r2, r2, r3
 8012788:	683b      	ldr	r3, [r7, #0]
 801278a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801278c:	6878      	ldr	r0, [r7, #4]
 801278e:	f7ff ff9b 	bl	80126c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012792:	2300      	movs	r3, #0
 8012794:	61fb      	str	r3, [r7, #28]
 8012796:	e004      	b.n	80127a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8012798:	683b      	ldr	r3, [r7, #0]
 801279a:	2200      	movs	r2, #0
 801279c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801279e:	2301      	movs	r3, #1
 80127a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80127a2:	f000 fb57 	bl	8012e54 <vPortExitCritical>

	return xReturn;
 80127a6:	69fb      	ldr	r3, [r7, #28]
}
 80127a8:	4618      	mov	r0, r3
 80127aa:	3720      	adds	r7, #32
 80127ac:	46bd      	mov	sp, r7
 80127ae:	bd80      	pop	{r7, pc}
 80127b0:	20002324 	.word	0x20002324
 80127b4:	20002338 	.word	0x20002338

080127b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80127b8:	b480      	push	{r7}
 80127ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80127bc:	4b03      	ldr	r3, [pc, #12]	; (80127cc <vTaskMissedYield+0x14>)
 80127be:	2201      	movs	r2, #1
 80127c0:	601a      	str	r2, [r3, #0]
}
 80127c2:	bf00      	nop
 80127c4:	46bd      	mov	sp, r7
 80127c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ca:	4770      	bx	lr
 80127cc:	20002334 	.word	0x20002334

080127d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b082      	sub	sp, #8
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80127d8:	f000 f852 	bl	8012880 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80127dc:	4b06      	ldr	r3, [pc, #24]	; (80127f8 <prvIdleTask+0x28>)
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	2b01      	cmp	r3, #1
 80127e2:	d9f9      	bls.n	80127d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80127e4:	4b05      	ldr	r3, [pc, #20]	; (80127fc <prvIdleTask+0x2c>)
 80127e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127ea:	601a      	str	r2, [r3, #0]
 80127ec:	f3bf 8f4f 	dsb	sy
 80127f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80127f4:	e7f0      	b.n	80127d8 <prvIdleTask+0x8>
 80127f6:	bf00      	nop
 80127f8:	20002224 	.word	0x20002224
 80127fc:	e000ed04 	.word	0xe000ed04

08012800 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012800:	b580      	push	{r7, lr}
 8012802:	b082      	sub	sp, #8
 8012804:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012806:	2300      	movs	r3, #0
 8012808:	607b      	str	r3, [r7, #4]
 801280a:	e00c      	b.n	8012826 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801280c:	687a      	ldr	r2, [r7, #4]
 801280e:	4613      	mov	r3, r2
 8012810:	009b      	lsls	r3, r3, #2
 8012812:	4413      	add	r3, r2
 8012814:	009b      	lsls	r3, r3, #2
 8012816:	4a12      	ldr	r2, [pc, #72]	; (8012860 <prvInitialiseTaskLists+0x60>)
 8012818:	4413      	add	r3, r2
 801281a:	4618      	mov	r0, r3
 801281c:	f7fe fcba 	bl	8011194 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	3301      	adds	r3, #1
 8012824:	607b      	str	r3, [r7, #4]
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	2b06      	cmp	r3, #6
 801282a:	d9ef      	bls.n	801280c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801282c:	480d      	ldr	r0, [pc, #52]	; (8012864 <prvInitialiseTaskLists+0x64>)
 801282e:	f7fe fcb1 	bl	8011194 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012832:	480d      	ldr	r0, [pc, #52]	; (8012868 <prvInitialiseTaskLists+0x68>)
 8012834:	f7fe fcae 	bl	8011194 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012838:	480c      	ldr	r0, [pc, #48]	; (801286c <prvInitialiseTaskLists+0x6c>)
 801283a:	f7fe fcab 	bl	8011194 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801283e:	480c      	ldr	r0, [pc, #48]	; (8012870 <prvInitialiseTaskLists+0x70>)
 8012840:	f7fe fca8 	bl	8011194 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012844:	480b      	ldr	r0, [pc, #44]	; (8012874 <prvInitialiseTaskLists+0x74>)
 8012846:	f7fe fca5 	bl	8011194 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801284a:	4b0b      	ldr	r3, [pc, #44]	; (8012878 <prvInitialiseTaskLists+0x78>)
 801284c:	4a05      	ldr	r2, [pc, #20]	; (8012864 <prvInitialiseTaskLists+0x64>)
 801284e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012850:	4b0a      	ldr	r3, [pc, #40]	; (801287c <prvInitialiseTaskLists+0x7c>)
 8012852:	4a05      	ldr	r2, [pc, #20]	; (8012868 <prvInitialiseTaskLists+0x68>)
 8012854:	601a      	str	r2, [r3, #0]
}
 8012856:	bf00      	nop
 8012858:	3708      	adds	r7, #8
 801285a:	46bd      	mov	sp, r7
 801285c:	bd80      	pop	{r7, pc}
 801285e:	bf00      	nop
 8012860:	20002224 	.word	0x20002224
 8012864:	200022b0 	.word	0x200022b0
 8012868:	200022c4 	.word	0x200022c4
 801286c:	200022e0 	.word	0x200022e0
 8012870:	200022f4 	.word	0x200022f4
 8012874:	2000230c 	.word	0x2000230c
 8012878:	200022d8 	.word	0x200022d8
 801287c:	200022dc 	.word	0x200022dc

08012880 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012880:	b580      	push	{r7, lr}
 8012882:	b082      	sub	sp, #8
 8012884:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012886:	e019      	b.n	80128bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012888:	f000 fab4 	bl	8012df4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801288c:	4b10      	ldr	r3, [pc, #64]	; (80128d0 <prvCheckTasksWaitingTermination+0x50>)
 801288e:	68db      	ldr	r3, [r3, #12]
 8012890:	68db      	ldr	r3, [r3, #12]
 8012892:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	3304      	adds	r3, #4
 8012898:	4618      	mov	r0, r3
 801289a:	f7fe fd05 	bl	80112a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801289e:	4b0d      	ldr	r3, [pc, #52]	; (80128d4 <prvCheckTasksWaitingTermination+0x54>)
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	3b01      	subs	r3, #1
 80128a4:	4a0b      	ldr	r2, [pc, #44]	; (80128d4 <prvCheckTasksWaitingTermination+0x54>)
 80128a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80128a8:	4b0b      	ldr	r3, [pc, #44]	; (80128d8 <prvCheckTasksWaitingTermination+0x58>)
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	3b01      	subs	r3, #1
 80128ae:	4a0a      	ldr	r2, [pc, #40]	; (80128d8 <prvCheckTasksWaitingTermination+0x58>)
 80128b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80128b2:	f000 facf 	bl	8012e54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80128b6:	6878      	ldr	r0, [r7, #4]
 80128b8:	f000 f810 	bl	80128dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80128bc:	4b06      	ldr	r3, [pc, #24]	; (80128d8 <prvCheckTasksWaitingTermination+0x58>)
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d1e1      	bne.n	8012888 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80128c4:	bf00      	nop
 80128c6:	bf00      	nop
 80128c8:	3708      	adds	r7, #8
 80128ca:	46bd      	mov	sp, r7
 80128cc:	bd80      	pop	{r7, pc}
 80128ce:	bf00      	nop
 80128d0:	200022f4 	.word	0x200022f4
 80128d4:	20002320 	.word	0x20002320
 80128d8:	20002308 	.word	0x20002308

080128dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80128dc:	b580      	push	{r7, lr}
 80128de:	b084      	sub	sp, #16
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	334c      	adds	r3, #76	; 0x4c
 80128e8:	4618      	mov	r0, r3
 80128ea:	f001 fda5 	bl	8014438 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d108      	bne.n	801290a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128fc:	4618      	mov	r0, r3
 80128fe:	f000 fc67 	bl	80131d0 <vPortFree>
				vPortFree( pxTCB );
 8012902:	6878      	ldr	r0, [r7, #4]
 8012904:	f000 fc64 	bl	80131d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012908:	e018      	b.n	801293c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8012910:	2b01      	cmp	r3, #1
 8012912:	d103      	bne.n	801291c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8012914:	6878      	ldr	r0, [r7, #4]
 8012916:	f000 fc5b 	bl	80131d0 <vPortFree>
	}
 801291a:	e00f      	b.n	801293c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8012922:	2b02      	cmp	r3, #2
 8012924:	d00a      	beq.n	801293c <prvDeleteTCB+0x60>
	__asm volatile
 8012926:	f04f 0350 	mov.w	r3, #80	; 0x50
 801292a:	f383 8811 	msr	BASEPRI, r3
 801292e:	f3bf 8f6f 	isb	sy
 8012932:	f3bf 8f4f 	dsb	sy
 8012936:	60fb      	str	r3, [r7, #12]
}
 8012938:	bf00      	nop
 801293a:	e7fe      	b.n	801293a <prvDeleteTCB+0x5e>
	}
 801293c:	bf00      	nop
 801293e:	3710      	adds	r7, #16
 8012940:	46bd      	mov	sp, r7
 8012942:	bd80      	pop	{r7, pc}

08012944 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012944:	b480      	push	{r7}
 8012946:	b083      	sub	sp, #12
 8012948:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801294a:	4b0c      	ldr	r3, [pc, #48]	; (801297c <prvResetNextTaskUnblockTime+0x38>)
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d104      	bne.n	801295e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012954:	4b0a      	ldr	r3, [pc, #40]	; (8012980 <prvResetNextTaskUnblockTime+0x3c>)
 8012956:	f04f 32ff 	mov.w	r2, #4294967295
 801295a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801295c:	e008      	b.n	8012970 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801295e:	4b07      	ldr	r3, [pc, #28]	; (801297c <prvResetNextTaskUnblockTime+0x38>)
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	68db      	ldr	r3, [r3, #12]
 8012964:	68db      	ldr	r3, [r3, #12]
 8012966:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	685b      	ldr	r3, [r3, #4]
 801296c:	4a04      	ldr	r2, [pc, #16]	; (8012980 <prvResetNextTaskUnblockTime+0x3c>)
 801296e:	6013      	str	r3, [r2, #0]
}
 8012970:	bf00      	nop
 8012972:	370c      	adds	r7, #12
 8012974:	46bd      	mov	sp, r7
 8012976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297a:	4770      	bx	lr
 801297c:	200022d8 	.word	0x200022d8
 8012980:	20002340 	.word	0x20002340

08012984 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012984:	b480      	push	{r7}
 8012986:	b083      	sub	sp, #12
 8012988:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801298a:	4b0b      	ldr	r3, [pc, #44]	; (80129b8 <xTaskGetSchedulerState+0x34>)
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d102      	bne.n	8012998 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012992:	2301      	movs	r3, #1
 8012994:	607b      	str	r3, [r7, #4]
 8012996:	e008      	b.n	80129aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012998:	4b08      	ldr	r3, [pc, #32]	; (80129bc <xTaskGetSchedulerState+0x38>)
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d102      	bne.n	80129a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80129a0:	2302      	movs	r3, #2
 80129a2:	607b      	str	r3, [r7, #4]
 80129a4:	e001      	b.n	80129aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80129a6:	2300      	movs	r3, #0
 80129a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80129aa:	687b      	ldr	r3, [r7, #4]
	}
 80129ac:	4618      	mov	r0, r3
 80129ae:	370c      	adds	r7, #12
 80129b0:	46bd      	mov	sp, r7
 80129b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b6:	4770      	bx	lr
 80129b8:	2000232c 	.word	0x2000232c
 80129bc:	20002348 	.word	0x20002348

080129c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80129c0:	b580      	push	{r7, lr}
 80129c2:	b086      	sub	sp, #24
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80129cc:	2300      	movs	r3, #0
 80129ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d06e      	beq.n	8012ab4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80129d6:	4b3a      	ldr	r3, [pc, #232]	; (8012ac0 <xTaskPriorityDisinherit+0x100>)
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	693a      	ldr	r2, [r7, #16]
 80129dc:	429a      	cmp	r2, r3
 80129de:	d00a      	beq.n	80129f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80129e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129e4:	f383 8811 	msr	BASEPRI, r3
 80129e8:	f3bf 8f6f 	isb	sy
 80129ec:	f3bf 8f4f 	dsb	sy
 80129f0:	60fb      	str	r3, [r7, #12]
}
 80129f2:	bf00      	nop
 80129f4:	e7fe      	b.n	80129f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80129f6:	693b      	ldr	r3, [r7, #16]
 80129f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d10a      	bne.n	8012a14 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80129fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a02:	f383 8811 	msr	BASEPRI, r3
 8012a06:	f3bf 8f6f 	isb	sy
 8012a0a:	f3bf 8f4f 	dsb	sy
 8012a0e:	60bb      	str	r3, [r7, #8]
}
 8012a10:	bf00      	nop
 8012a12:	e7fe      	b.n	8012a12 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8012a14:	693b      	ldr	r3, [r7, #16]
 8012a16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012a18:	1e5a      	subs	r2, r3, #1
 8012a1a:	693b      	ldr	r3, [r7, #16]
 8012a1c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012a1e:	693b      	ldr	r3, [r7, #16]
 8012a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a22:	693b      	ldr	r3, [r7, #16]
 8012a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a26:	429a      	cmp	r2, r3
 8012a28:	d044      	beq.n	8012ab4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012a2a:	693b      	ldr	r3, [r7, #16]
 8012a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d140      	bne.n	8012ab4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012a32:	693b      	ldr	r3, [r7, #16]
 8012a34:	3304      	adds	r3, #4
 8012a36:	4618      	mov	r0, r3
 8012a38:	f7fe fc36 	bl	80112a8 <uxListRemove>
 8012a3c:	4603      	mov	r3, r0
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d115      	bne.n	8012a6e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012a42:	693b      	ldr	r3, [r7, #16]
 8012a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a46:	491f      	ldr	r1, [pc, #124]	; (8012ac4 <xTaskPriorityDisinherit+0x104>)
 8012a48:	4613      	mov	r3, r2
 8012a4a:	009b      	lsls	r3, r3, #2
 8012a4c:	4413      	add	r3, r2
 8012a4e:	009b      	lsls	r3, r3, #2
 8012a50:	440b      	add	r3, r1
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d10a      	bne.n	8012a6e <xTaskPriorityDisinherit+0xae>
 8012a58:	693b      	ldr	r3, [r7, #16]
 8012a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a5c:	2201      	movs	r2, #1
 8012a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8012a62:	43da      	mvns	r2, r3
 8012a64:	4b18      	ldr	r3, [pc, #96]	; (8012ac8 <xTaskPriorityDisinherit+0x108>)
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	4013      	ands	r3, r2
 8012a6a:	4a17      	ldr	r2, [pc, #92]	; (8012ac8 <xTaskPriorityDisinherit+0x108>)
 8012a6c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012a6e:	693b      	ldr	r3, [r7, #16]
 8012a70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012a72:	693b      	ldr	r3, [r7, #16]
 8012a74:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a76:	693b      	ldr	r3, [r7, #16]
 8012a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a7a:	f1c3 0207 	rsb	r2, r3, #7
 8012a7e:	693b      	ldr	r3, [r7, #16]
 8012a80:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012a82:	693b      	ldr	r3, [r7, #16]
 8012a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a86:	2201      	movs	r2, #1
 8012a88:	409a      	lsls	r2, r3
 8012a8a:	4b0f      	ldr	r3, [pc, #60]	; (8012ac8 <xTaskPriorityDisinherit+0x108>)
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	4313      	orrs	r3, r2
 8012a90:	4a0d      	ldr	r2, [pc, #52]	; (8012ac8 <xTaskPriorityDisinherit+0x108>)
 8012a92:	6013      	str	r3, [r2, #0]
 8012a94:	693b      	ldr	r3, [r7, #16]
 8012a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a98:	4613      	mov	r3, r2
 8012a9a:	009b      	lsls	r3, r3, #2
 8012a9c:	4413      	add	r3, r2
 8012a9e:	009b      	lsls	r3, r3, #2
 8012aa0:	4a08      	ldr	r2, [pc, #32]	; (8012ac4 <xTaskPriorityDisinherit+0x104>)
 8012aa2:	441a      	add	r2, r3
 8012aa4:	693b      	ldr	r3, [r7, #16]
 8012aa6:	3304      	adds	r3, #4
 8012aa8:	4619      	mov	r1, r3
 8012aaa:	4610      	mov	r0, r2
 8012aac:	f7fe fb9f 	bl	80111ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012ab0:	2301      	movs	r3, #1
 8012ab2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012ab4:	697b      	ldr	r3, [r7, #20]
	}
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	3718      	adds	r7, #24
 8012aba:	46bd      	mov	sp, r7
 8012abc:	bd80      	pop	{r7, pc}
 8012abe:	bf00      	nop
 8012ac0:	20002220 	.word	0x20002220
 8012ac4:	20002224 	.word	0x20002224
 8012ac8:	20002328 	.word	0x20002328

08012acc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b084      	sub	sp, #16
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
 8012ad4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012ad6:	4b29      	ldr	r3, [pc, #164]	; (8012b7c <prvAddCurrentTaskToDelayedList+0xb0>)
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012adc:	4b28      	ldr	r3, [pc, #160]	; (8012b80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	3304      	adds	r3, #4
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	f7fe fbe0 	bl	80112a8 <uxListRemove>
 8012ae8:	4603      	mov	r3, r0
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d10b      	bne.n	8012b06 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8012aee:	4b24      	ldr	r3, [pc, #144]	; (8012b80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012af4:	2201      	movs	r2, #1
 8012af6:	fa02 f303 	lsl.w	r3, r2, r3
 8012afa:	43da      	mvns	r2, r3
 8012afc:	4b21      	ldr	r3, [pc, #132]	; (8012b84 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	4013      	ands	r3, r2
 8012b02:	4a20      	ldr	r2, [pc, #128]	; (8012b84 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012b04:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b0c:	d10a      	bne.n	8012b24 <prvAddCurrentTaskToDelayedList+0x58>
 8012b0e:	683b      	ldr	r3, [r7, #0]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d007      	beq.n	8012b24 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012b14:	4b1a      	ldr	r3, [pc, #104]	; (8012b80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	3304      	adds	r3, #4
 8012b1a:	4619      	mov	r1, r3
 8012b1c:	481a      	ldr	r0, [pc, #104]	; (8012b88 <prvAddCurrentTaskToDelayedList+0xbc>)
 8012b1e:	f7fe fb66 	bl	80111ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012b22:	e026      	b.n	8012b72 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012b24:	68fa      	ldr	r2, [r7, #12]
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	4413      	add	r3, r2
 8012b2a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012b2c:	4b14      	ldr	r3, [pc, #80]	; (8012b80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	68ba      	ldr	r2, [r7, #8]
 8012b32:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012b34:	68ba      	ldr	r2, [r7, #8]
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	429a      	cmp	r2, r3
 8012b3a:	d209      	bcs.n	8012b50 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012b3c:	4b13      	ldr	r3, [pc, #76]	; (8012b8c <prvAddCurrentTaskToDelayedList+0xc0>)
 8012b3e:	681a      	ldr	r2, [r3, #0]
 8012b40:	4b0f      	ldr	r3, [pc, #60]	; (8012b80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	3304      	adds	r3, #4
 8012b46:	4619      	mov	r1, r3
 8012b48:	4610      	mov	r0, r2
 8012b4a:	f7fe fb74 	bl	8011236 <vListInsert>
}
 8012b4e:	e010      	b.n	8012b72 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012b50:	4b0f      	ldr	r3, [pc, #60]	; (8012b90 <prvAddCurrentTaskToDelayedList+0xc4>)
 8012b52:	681a      	ldr	r2, [r3, #0]
 8012b54:	4b0a      	ldr	r3, [pc, #40]	; (8012b80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	3304      	adds	r3, #4
 8012b5a:	4619      	mov	r1, r3
 8012b5c:	4610      	mov	r0, r2
 8012b5e:	f7fe fb6a 	bl	8011236 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012b62:	4b0c      	ldr	r3, [pc, #48]	; (8012b94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	68ba      	ldr	r2, [r7, #8]
 8012b68:	429a      	cmp	r2, r3
 8012b6a:	d202      	bcs.n	8012b72 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8012b6c:	4a09      	ldr	r2, [pc, #36]	; (8012b94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012b6e:	68bb      	ldr	r3, [r7, #8]
 8012b70:	6013      	str	r3, [r2, #0]
}
 8012b72:	bf00      	nop
 8012b74:	3710      	adds	r7, #16
 8012b76:	46bd      	mov	sp, r7
 8012b78:	bd80      	pop	{r7, pc}
 8012b7a:	bf00      	nop
 8012b7c:	20002324 	.word	0x20002324
 8012b80:	20002220 	.word	0x20002220
 8012b84:	20002328 	.word	0x20002328
 8012b88:	2000230c 	.word	0x2000230c
 8012b8c:	200022dc 	.word	0x200022dc
 8012b90:	200022d8 	.word	0x200022d8
 8012b94:	20002340 	.word	0x20002340

08012b98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012b98:	b480      	push	{r7}
 8012b9a:	b085      	sub	sp, #20
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	60f8      	str	r0, [r7, #12]
 8012ba0:	60b9      	str	r1, [r7, #8]
 8012ba2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	3b04      	subs	r3, #4
 8012ba8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012bb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	3b04      	subs	r3, #4
 8012bb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012bb8:	68bb      	ldr	r3, [r7, #8]
 8012bba:	f023 0201 	bic.w	r2, r3, #1
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	3b04      	subs	r3, #4
 8012bc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012bc8:	4a0c      	ldr	r2, [pc, #48]	; (8012bfc <pxPortInitialiseStack+0x64>)
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	3b14      	subs	r3, #20
 8012bd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012bd4:	687a      	ldr	r2, [r7, #4]
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	3b04      	subs	r3, #4
 8012bde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	f06f 0202 	mvn.w	r2, #2
 8012be6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	3b20      	subs	r3, #32
 8012bec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012bee:	68fb      	ldr	r3, [r7, #12]
}
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	3714      	adds	r7, #20
 8012bf4:	46bd      	mov	sp, r7
 8012bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bfa:	4770      	bx	lr
 8012bfc:	08012c01 	.word	0x08012c01

08012c00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012c00:	b480      	push	{r7}
 8012c02:	b085      	sub	sp, #20
 8012c04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012c06:	2300      	movs	r3, #0
 8012c08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012c0a:	4b12      	ldr	r3, [pc, #72]	; (8012c54 <prvTaskExitError+0x54>)
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c12:	d00a      	beq.n	8012c2a <prvTaskExitError+0x2a>
	__asm volatile
 8012c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c18:	f383 8811 	msr	BASEPRI, r3
 8012c1c:	f3bf 8f6f 	isb	sy
 8012c20:	f3bf 8f4f 	dsb	sy
 8012c24:	60fb      	str	r3, [r7, #12]
}
 8012c26:	bf00      	nop
 8012c28:	e7fe      	b.n	8012c28 <prvTaskExitError+0x28>
	__asm volatile
 8012c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c2e:	f383 8811 	msr	BASEPRI, r3
 8012c32:	f3bf 8f6f 	isb	sy
 8012c36:	f3bf 8f4f 	dsb	sy
 8012c3a:	60bb      	str	r3, [r7, #8]
}
 8012c3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012c3e:	bf00      	nop
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d0fc      	beq.n	8012c40 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012c46:	bf00      	nop
 8012c48:	bf00      	nop
 8012c4a:	3714      	adds	r7, #20
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c52:	4770      	bx	lr
 8012c54:	200002b0 	.word	0x200002b0
	...

08012c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012c60:	4b07      	ldr	r3, [pc, #28]	; (8012c80 <pxCurrentTCBConst2>)
 8012c62:	6819      	ldr	r1, [r3, #0]
 8012c64:	6808      	ldr	r0, [r1, #0]
 8012c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c6a:	f380 8809 	msr	PSP, r0
 8012c6e:	f3bf 8f6f 	isb	sy
 8012c72:	f04f 0000 	mov.w	r0, #0
 8012c76:	f380 8811 	msr	BASEPRI, r0
 8012c7a:	4770      	bx	lr
 8012c7c:	f3af 8000 	nop.w

08012c80 <pxCurrentTCBConst2>:
 8012c80:	20002220 	.word	0x20002220
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012c84:	bf00      	nop
 8012c86:	bf00      	nop

08012c88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012c88:	4808      	ldr	r0, [pc, #32]	; (8012cac <prvPortStartFirstTask+0x24>)
 8012c8a:	6800      	ldr	r0, [r0, #0]
 8012c8c:	6800      	ldr	r0, [r0, #0]
 8012c8e:	f380 8808 	msr	MSP, r0
 8012c92:	f04f 0000 	mov.w	r0, #0
 8012c96:	f380 8814 	msr	CONTROL, r0
 8012c9a:	b662      	cpsie	i
 8012c9c:	b661      	cpsie	f
 8012c9e:	f3bf 8f4f 	dsb	sy
 8012ca2:	f3bf 8f6f 	isb	sy
 8012ca6:	df00      	svc	0
 8012ca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012caa:	bf00      	nop
 8012cac:	e000ed08 	.word	0xe000ed08

08012cb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b086      	sub	sp, #24
 8012cb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012cb6:	4b46      	ldr	r3, [pc, #280]	; (8012dd0 <xPortStartScheduler+0x120>)
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	4a46      	ldr	r2, [pc, #280]	; (8012dd4 <xPortStartScheduler+0x124>)
 8012cbc:	4293      	cmp	r3, r2
 8012cbe:	d10a      	bne.n	8012cd6 <xPortStartScheduler+0x26>
	__asm volatile
 8012cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cc4:	f383 8811 	msr	BASEPRI, r3
 8012cc8:	f3bf 8f6f 	isb	sy
 8012ccc:	f3bf 8f4f 	dsb	sy
 8012cd0:	613b      	str	r3, [r7, #16]
}
 8012cd2:	bf00      	nop
 8012cd4:	e7fe      	b.n	8012cd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012cd6:	4b3e      	ldr	r3, [pc, #248]	; (8012dd0 <xPortStartScheduler+0x120>)
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	4a3f      	ldr	r2, [pc, #252]	; (8012dd8 <xPortStartScheduler+0x128>)
 8012cdc:	4293      	cmp	r3, r2
 8012cde:	d10a      	bne.n	8012cf6 <xPortStartScheduler+0x46>
	__asm volatile
 8012ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ce4:	f383 8811 	msr	BASEPRI, r3
 8012ce8:	f3bf 8f6f 	isb	sy
 8012cec:	f3bf 8f4f 	dsb	sy
 8012cf0:	60fb      	str	r3, [r7, #12]
}
 8012cf2:	bf00      	nop
 8012cf4:	e7fe      	b.n	8012cf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012cf6:	4b39      	ldr	r3, [pc, #228]	; (8012ddc <xPortStartScheduler+0x12c>)
 8012cf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012cfa:	697b      	ldr	r3, [r7, #20]
 8012cfc:	781b      	ldrb	r3, [r3, #0]
 8012cfe:	b2db      	uxtb	r3, r3
 8012d00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012d02:	697b      	ldr	r3, [r7, #20]
 8012d04:	22ff      	movs	r2, #255	; 0xff
 8012d06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012d08:	697b      	ldr	r3, [r7, #20]
 8012d0a:	781b      	ldrb	r3, [r3, #0]
 8012d0c:	b2db      	uxtb	r3, r3
 8012d0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012d10:	78fb      	ldrb	r3, [r7, #3]
 8012d12:	b2db      	uxtb	r3, r3
 8012d14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012d18:	b2da      	uxtb	r2, r3
 8012d1a:	4b31      	ldr	r3, [pc, #196]	; (8012de0 <xPortStartScheduler+0x130>)
 8012d1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012d1e:	4b31      	ldr	r3, [pc, #196]	; (8012de4 <xPortStartScheduler+0x134>)
 8012d20:	2207      	movs	r2, #7
 8012d22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012d24:	e009      	b.n	8012d3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012d26:	4b2f      	ldr	r3, [pc, #188]	; (8012de4 <xPortStartScheduler+0x134>)
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	3b01      	subs	r3, #1
 8012d2c:	4a2d      	ldr	r2, [pc, #180]	; (8012de4 <xPortStartScheduler+0x134>)
 8012d2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012d30:	78fb      	ldrb	r3, [r7, #3]
 8012d32:	b2db      	uxtb	r3, r3
 8012d34:	005b      	lsls	r3, r3, #1
 8012d36:	b2db      	uxtb	r3, r3
 8012d38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012d3a:	78fb      	ldrb	r3, [r7, #3]
 8012d3c:	b2db      	uxtb	r3, r3
 8012d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012d42:	2b80      	cmp	r3, #128	; 0x80
 8012d44:	d0ef      	beq.n	8012d26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012d46:	4b27      	ldr	r3, [pc, #156]	; (8012de4 <xPortStartScheduler+0x134>)
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	f1c3 0307 	rsb	r3, r3, #7
 8012d4e:	2b04      	cmp	r3, #4
 8012d50:	d00a      	beq.n	8012d68 <xPortStartScheduler+0xb8>
	__asm volatile
 8012d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d56:	f383 8811 	msr	BASEPRI, r3
 8012d5a:	f3bf 8f6f 	isb	sy
 8012d5e:	f3bf 8f4f 	dsb	sy
 8012d62:	60bb      	str	r3, [r7, #8]
}
 8012d64:	bf00      	nop
 8012d66:	e7fe      	b.n	8012d66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012d68:	4b1e      	ldr	r3, [pc, #120]	; (8012de4 <xPortStartScheduler+0x134>)
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	021b      	lsls	r3, r3, #8
 8012d6e:	4a1d      	ldr	r2, [pc, #116]	; (8012de4 <xPortStartScheduler+0x134>)
 8012d70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012d72:	4b1c      	ldr	r3, [pc, #112]	; (8012de4 <xPortStartScheduler+0x134>)
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012d7a:	4a1a      	ldr	r2, [pc, #104]	; (8012de4 <xPortStartScheduler+0x134>)
 8012d7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	b2da      	uxtb	r2, r3
 8012d82:	697b      	ldr	r3, [r7, #20]
 8012d84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012d86:	4b18      	ldr	r3, [pc, #96]	; (8012de8 <xPortStartScheduler+0x138>)
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	4a17      	ldr	r2, [pc, #92]	; (8012de8 <xPortStartScheduler+0x138>)
 8012d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012d90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012d92:	4b15      	ldr	r3, [pc, #84]	; (8012de8 <xPortStartScheduler+0x138>)
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	4a14      	ldr	r2, [pc, #80]	; (8012de8 <xPortStartScheduler+0x138>)
 8012d98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012d9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012d9e:	f000 f8dd 	bl	8012f5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012da2:	4b12      	ldr	r3, [pc, #72]	; (8012dec <xPortStartScheduler+0x13c>)
 8012da4:	2200      	movs	r2, #0
 8012da6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012da8:	f000 f8fc 	bl	8012fa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012dac:	4b10      	ldr	r3, [pc, #64]	; (8012df0 <xPortStartScheduler+0x140>)
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	4a0f      	ldr	r2, [pc, #60]	; (8012df0 <xPortStartScheduler+0x140>)
 8012db2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012db6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012db8:	f7ff ff66 	bl	8012c88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012dbc:	f7ff fb9c 	bl	80124f8 <vTaskSwitchContext>
	prvTaskExitError();
 8012dc0:	f7ff ff1e 	bl	8012c00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012dc4:	2300      	movs	r3, #0
}
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	3718      	adds	r7, #24
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bd80      	pop	{r7, pc}
 8012dce:	bf00      	nop
 8012dd0:	e000ed00 	.word	0xe000ed00
 8012dd4:	410fc271 	.word	0x410fc271
 8012dd8:	410fc270 	.word	0x410fc270
 8012ddc:	e000e400 	.word	0xe000e400
 8012de0:	2000234c 	.word	0x2000234c
 8012de4:	20002350 	.word	0x20002350
 8012de8:	e000ed20 	.word	0xe000ed20
 8012dec:	200002b0 	.word	0x200002b0
 8012df0:	e000ef34 	.word	0xe000ef34

08012df4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012df4:	b480      	push	{r7}
 8012df6:	b083      	sub	sp, #12
 8012df8:	af00      	add	r7, sp, #0
	__asm volatile
 8012dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dfe:	f383 8811 	msr	BASEPRI, r3
 8012e02:	f3bf 8f6f 	isb	sy
 8012e06:	f3bf 8f4f 	dsb	sy
 8012e0a:	607b      	str	r3, [r7, #4]
}
 8012e0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012e0e:	4b0f      	ldr	r3, [pc, #60]	; (8012e4c <vPortEnterCritical+0x58>)
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	3301      	adds	r3, #1
 8012e14:	4a0d      	ldr	r2, [pc, #52]	; (8012e4c <vPortEnterCritical+0x58>)
 8012e16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012e18:	4b0c      	ldr	r3, [pc, #48]	; (8012e4c <vPortEnterCritical+0x58>)
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	2b01      	cmp	r3, #1
 8012e1e:	d10f      	bne.n	8012e40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012e20:	4b0b      	ldr	r3, [pc, #44]	; (8012e50 <vPortEnterCritical+0x5c>)
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	b2db      	uxtb	r3, r3
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d00a      	beq.n	8012e40 <vPortEnterCritical+0x4c>
	__asm volatile
 8012e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e2e:	f383 8811 	msr	BASEPRI, r3
 8012e32:	f3bf 8f6f 	isb	sy
 8012e36:	f3bf 8f4f 	dsb	sy
 8012e3a:	603b      	str	r3, [r7, #0]
}
 8012e3c:	bf00      	nop
 8012e3e:	e7fe      	b.n	8012e3e <vPortEnterCritical+0x4a>
	}
}
 8012e40:	bf00      	nop
 8012e42:	370c      	adds	r7, #12
 8012e44:	46bd      	mov	sp, r7
 8012e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4a:	4770      	bx	lr
 8012e4c:	200002b0 	.word	0x200002b0
 8012e50:	e000ed04 	.word	0xe000ed04

08012e54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012e54:	b480      	push	{r7}
 8012e56:	b083      	sub	sp, #12
 8012e58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012e5a:	4b12      	ldr	r3, [pc, #72]	; (8012ea4 <vPortExitCritical+0x50>)
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d10a      	bne.n	8012e78 <vPortExitCritical+0x24>
	__asm volatile
 8012e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e66:	f383 8811 	msr	BASEPRI, r3
 8012e6a:	f3bf 8f6f 	isb	sy
 8012e6e:	f3bf 8f4f 	dsb	sy
 8012e72:	607b      	str	r3, [r7, #4]
}
 8012e74:	bf00      	nop
 8012e76:	e7fe      	b.n	8012e76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012e78:	4b0a      	ldr	r3, [pc, #40]	; (8012ea4 <vPortExitCritical+0x50>)
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	3b01      	subs	r3, #1
 8012e7e:	4a09      	ldr	r2, [pc, #36]	; (8012ea4 <vPortExitCritical+0x50>)
 8012e80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012e82:	4b08      	ldr	r3, [pc, #32]	; (8012ea4 <vPortExitCritical+0x50>)
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d105      	bne.n	8012e96 <vPortExitCritical+0x42>
 8012e8a:	2300      	movs	r3, #0
 8012e8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012e8e:	683b      	ldr	r3, [r7, #0]
 8012e90:	f383 8811 	msr	BASEPRI, r3
}
 8012e94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012e96:	bf00      	nop
 8012e98:	370c      	adds	r7, #12
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea0:	4770      	bx	lr
 8012ea2:	bf00      	nop
 8012ea4:	200002b0 	.word	0x200002b0
	...

08012eb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012eb0:	f3ef 8009 	mrs	r0, PSP
 8012eb4:	f3bf 8f6f 	isb	sy
 8012eb8:	4b15      	ldr	r3, [pc, #84]	; (8012f10 <pxCurrentTCBConst>)
 8012eba:	681a      	ldr	r2, [r3, #0]
 8012ebc:	f01e 0f10 	tst.w	lr, #16
 8012ec0:	bf08      	it	eq
 8012ec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012ec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eca:	6010      	str	r0, [r2, #0]
 8012ecc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012ed0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012ed4:	f380 8811 	msr	BASEPRI, r0
 8012ed8:	f3bf 8f4f 	dsb	sy
 8012edc:	f3bf 8f6f 	isb	sy
 8012ee0:	f7ff fb0a 	bl	80124f8 <vTaskSwitchContext>
 8012ee4:	f04f 0000 	mov.w	r0, #0
 8012ee8:	f380 8811 	msr	BASEPRI, r0
 8012eec:	bc09      	pop	{r0, r3}
 8012eee:	6819      	ldr	r1, [r3, #0]
 8012ef0:	6808      	ldr	r0, [r1, #0]
 8012ef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ef6:	f01e 0f10 	tst.w	lr, #16
 8012efa:	bf08      	it	eq
 8012efc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012f00:	f380 8809 	msr	PSP, r0
 8012f04:	f3bf 8f6f 	isb	sy
 8012f08:	4770      	bx	lr
 8012f0a:	bf00      	nop
 8012f0c:	f3af 8000 	nop.w

08012f10 <pxCurrentTCBConst>:
 8012f10:	20002220 	.word	0x20002220
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012f14:	bf00      	nop
 8012f16:	bf00      	nop

08012f18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b082      	sub	sp, #8
 8012f1c:	af00      	add	r7, sp, #0
	__asm volatile
 8012f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f22:	f383 8811 	msr	BASEPRI, r3
 8012f26:	f3bf 8f6f 	isb	sy
 8012f2a:	f3bf 8f4f 	dsb	sy
 8012f2e:	607b      	str	r3, [r7, #4]
}
 8012f30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012f32:	f7ff fa29 	bl	8012388 <xTaskIncrementTick>
 8012f36:	4603      	mov	r3, r0
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d003      	beq.n	8012f44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012f3c:	4b06      	ldr	r3, [pc, #24]	; (8012f58 <SysTick_Handler+0x40>)
 8012f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f42:	601a      	str	r2, [r3, #0]
 8012f44:	2300      	movs	r3, #0
 8012f46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012f48:	683b      	ldr	r3, [r7, #0]
 8012f4a:	f383 8811 	msr	BASEPRI, r3
}
 8012f4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012f50:	bf00      	nop
 8012f52:	3708      	adds	r7, #8
 8012f54:	46bd      	mov	sp, r7
 8012f56:	bd80      	pop	{r7, pc}
 8012f58:	e000ed04 	.word	0xe000ed04

08012f5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012f5c:	b480      	push	{r7}
 8012f5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012f60:	4b0b      	ldr	r3, [pc, #44]	; (8012f90 <vPortSetupTimerInterrupt+0x34>)
 8012f62:	2200      	movs	r2, #0
 8012f64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012f66:	4b0b      	ldr	r3, [pc, #44]	; (8012f94 <vPortSetupTimerInterrupt+0x38>)
 8012f68:	2200      	movs	r2, #0
 8012f6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012f6c:	4b0a      	ldr	r3, [pc, #40]	; (8012f98 <vPortSetupTimerInterrupt+0x3c>)
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	4a0a      	ldr	r2, [pc, #40]	; (8012f9c <vPortSetupTimerInterrupt+0x40>)
 8012f72:	fba2 2303 	umull	r2, r3, r2, r3
 8012f76:	099b      	lsrs	r3, r3, #6
 8012f78:	4a09      	ldr	r2, [pc, #36]	; (8012fa0 <vPortSetupTimerInterrupt+0x44>)
 8012f7a:	3b01      	subs	r3, #1
 8012f7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012f7e:	4b04      	ldr	r3, [pc, #16]	; (8012f90 <vPortSetupTimerInterrupt+0x34>)
 8012f80:	2207      	movs	r2, #7
 8012f82:	601a      	str	r2, [r3, #0]
}
 8012f84:	bf00      	nop
 8012f86:	46bd      	mov	sp, r7
 8012f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f8c:	4770      	bx	lr
 8012f8e:	bf00      	nop
 8012f90:	e000e010 	.word	0xe000e010
 8012f94:	e000e018 	.word	0xe000e018
 8012f98:	20000234 	.word	0x20000234
 8012f9c:	10624dd3 	.word	0x10624dd3
 8012fa0:	e000e014 	.word	0xe000e014

08012fa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012fa4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012fb4 <vPortEnableVFP+0x10>
 8012fa8:	6801      	ldr	r1, [r0, #0]
 8012faa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012fae:	6001      	str	r1, [r0, #0]
 8012fb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012fb2:	bf00      	nop
 8012fb4:	e000ed88 	.word	0xe000ed88

08012fb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012fb8:	b480      	push	{r7}
 8012fba:	b085      	sub	sp, #20
 8012fbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012fbe:	f3ef 8305 	mrs	r3, IPSR
 8012fc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	2b0f      	cmp	r3, #15
 8012fc8:	d914      	bls.n	8012ff4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012fca:	4a17      	ldr	r2, [pc, #92]	; (8013028 <vPortValidateInterruptPriority+0x70>)
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	4413      	add	r3, r2
 8012fd0:	781b      	ldrb	r3, [r3, #0]
 8012fd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012fd4:	4b15      	ldr	r3, [pc, #84]	; (801302c <vPortValidateInterruptPriority+0x74>)
 8012fd6:	781b      	ldrb	r3, [r3, #0]
 8012fd8:	7afa      	ldrb	r2, [r7, #11]
 8012fda:	429a      	cmp	r2, r3
 8012fdc:	d20a      	bcs.n	8012ff4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8012fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fe2:	f383 8811 	msr	BASEPRI, r3
 8012fe6:	f3bf 8f6f 	isb	sy
 8012fea:	f3bf 8f4f 	dsb	sy
 8012fee:	607b      	str	r3, [r7, #4]
}
 8012ff0:	bf00      	nop
 8012ff2:	e7fe      	b.n	8012ff2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012ff4:	4b0e      	ldr	r3, [pc, #56]	; (8013030 <vPortValidateInterruptPriority+0x78>)
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012ffc:	4b0d      	ldr	r3, [pc, #52]	; (8013034 <vPortValidateInterruptPriority+0x7c>)
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	429a      	cmp	r2, r3
 8013002:	d90a      	bls.n	801301a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8013004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013008:	f383 8811 	msr	BASEPRI, r3
 801300c:	f3bf 8f6f 	isb	sy
 8013010:	f3bf 8f4f 	dsb	sy
 8013014:	603b      	str	r3, [r7, #0]
}
 8013016:	bf00      	nop
 8013018:	e7fe      	b.n	8013018 <vPortValidateInterruptPriority+0x60>
	}
 801301a:	bf00      	nop
 801301c:	3714      	adds	r7, #20
 801301e:	46bd      	mov	sp, r7
 8013020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013024:	4770      	bx	lr
 8013026:	bf00      	nop
 8013028:	e000e3f0 	.word	0xe000e3f0
 801302c:	2000234c 	.word	0x2000234c
 8013030:	e000ed0c 	.word	0xe000ed0c
 8013034:	20002350 	.word	0x20002350

08013038 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b08a      	sub	sp, #40	; 0x28
 801303c:	af00      	add	r7, sp, #0
 801303e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013040:	2300      	movs	r3, #0
 8013042:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013044:	f7ff f8e6 	bl	8012214 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013048:	4b5b      	ldr	r3, [pc, #364]	; (80131b8 <pvPortMalloc+0x180>)
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d101      	bne.n	8013054 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013050:	f000 f920 	bl	8013294 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013054:	4b59      	ldr	r3, [pc, #356]	; (80131bc <pvPortMalloc+0x184>)
 8013056:	681a      	ldr	r2, [r3, #0]
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	4013      	ands	r3, r2
 801305c:	2b00      	cmp	r3, #0
 801305e:	f040 8093 	bne.w	8013188 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d01d      	beq.n	80130a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8013068:	2208      	movs	r2, #8
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	4413      	add	r3, r2
 801306e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	f003 0307 	and.w	r3, r3, #7
 8013076:	2b00      	cmp	r3, #0
 8013078:	d014      	beq.n	80130a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	f023 0307 	bic.w	r3, r3, #7
 8013080:	3308      	adds	r3, #8
 8013082:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	f003 0307 	and.w	r3, r3, #7
 801308a:	2b00      	cmp	r3, #0
 801308c:	d00a      	beq.n	80130a4 <pvPortMalloc+0x6c>
	__asm volatile
 801308e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013092:	f383 8811 	msr	BASEPRI, r3
 8013096:	f3bf 8f6f 	isb	sy
 801309a:	f3bf 8f4f 	dsb	sy
 801309e:	617b      	str	r3, [r7, #20]
}
 80130a0:	bf00      	nop
 80130a2:	e7fe      	b.n	80130a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d06e      	beq.n	8013188 <pvPortMalloc+0x150>
 80130aa:	4b45      	ldr	r3, [pc, #276]	; (80131c0 <pvPortMalloc+0x188>)
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	687a      	ldr	r2, [r7, #4]
 80130b0:	429a      	cmp	r2, r3
 80130b2:	d869      	bhi.n	8013188 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80130b4:	4b43      	ldr	r3, [pc, #268]	; (80131c4 <pvPortMalloc+0x18c>)
 80130b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80130b8:	4b42      	ldr	r3, [pc, #264]	; (80131c4 <pvPortMalloc+0x18c>)
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80130be:	e004      	b.n	80130ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80130c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80130c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80130ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130cc:	685b      	ldr	r3, [r3, #4]
 80130ce:	687a      	ldr	r2, [r7, #4]
 80130d0:	429a      	cmp	r2, r3
 80130d2:	d903      	bls.n	80130dc <pvPortMalloc+0xa4>
 80130d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d1f1      	bne.n	80130c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80130dc:	4b36      	ldr	r3, [pc, #216]	; (80131b8 <pvPortMalloc+0x180>)
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130e2:	429a      	cmp	r2, r3
 80130e4:	d050      	beq.n	8013188 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80130e6:	6a3b      	ldr	r3, [r7, #32]
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	2208      	movs	r2, #8
 80130ec:	4413      	add	r3, r2
 80130ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80130f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130f2:	681a      	ldr	r2, [r3, #0]
 80130f4:	6a3b      	ldr	r3, [r7, #32]
 80130f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80130f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130fa:	685a      	ldr	r2, [r3, #4]
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	1ad2      	subs	r2, r2, r3
 8013100:	2308      	movs	r3, #8
 8013102:	005b      	lsls	r3, r3, #1
 8013104:	429a      	cmp	r2, r3
 8013106:	d91f      	bls.n	8013148 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	4413      	add	r3, r2
 801310e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013110:	69bb      	ldr	r3, [r7, #24]
 8013112:	f003 0307 	and.w	r3, r3, #7
 8013116:	2b00      	cmp	r3, #0
 8013118:	d00a      	beq.n	8013130 <pvPortMalloc+0xf8>
	__asm volatile
 801311a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801311e:	f383 8811 	msr	BASEPRI, r3
 8013122:	f3bf 8f6f 	isb	sy
 8013126:	f3bf 8f4f 	dsb	sy
 801312a:	613b      	str	r3, [r7, #16]
}
 801312c:	bf00      	nop
 801312e:	e7fe      	b.n	801312e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013132:	685a      	ldr	r2, [r3, #4]
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	1ad2      	subs	r2, r2, r3
 8013138:	69bb      	ldr	r3, [r7, #24]
 801313a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801313e:	687a      	ldr	r2, [r7, #4]
 8013140:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013142:	69b8      	ldr	r0, [r7, #24]
 8013144:	f000 f908 	bl	8013358 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013148:	4b1d      	ldr	r3, [pc, #116]	; (80131c0 <pvPortMalloc+0x188>)
 801314a:	681a      	ldr	r2, [r3, #0]
 801314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801314e:	685b      	ldr	r3, [r3, #4]
 8013150:	1ad3      	subs	r3, r2, r3
 8013152:	4a1b      	ldr	r2, [pc, #108]	; (80131c0 <pvPortMalloc+0x188>)
 8013154:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013156:	4b1a      	ldr	r3, [pc, #104]	; (80131c0 <pvPortMalloc+0x188>)
 8013158:	681a      	ldr	r2, [r3, #0]
 801315a:	4b1b      	ldr	r3, [pc, #108]	; (80131c8 <pvPortMalloc+0x190>)
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	429a      	cmp	r2, r3
 8013160:	d203      	bcs.n	801316a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013162:	4b17      	ldr	r3, [pc, #92]	; (80131c0 <pvPortMalloc+0x188>)
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	4a18      	ldr	r2, [pc, #96]	; (80131c8 <pvPortMalloc+0x190>)
 8013168:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801316c:	685a      	ldr	r2, [r3, #4]
 801316e:	4b13      	ldr	r3, [pc, #76]	; (80131bc <pvPortMalloc+0x184>)
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	431a      	orrs	r2, r3
 8013174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013176:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801317a:	2200      	movs	r2, #0
 801317c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801317e:	4b13      	ldr	r3, [pc, #76]	; (80131cc <pvPortMalloc+0x194>)
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	3301      	adds	r3, #1
 8013184:	4a11      	ldr	r2, [pc, #68]	; (80131cc <pvPortMalloc+0x194>)
 8013186:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013188:	f7ff f852 	bl	8012230 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801318c:	69fb      	ldr	r3, [r7, #28]
 801318e:	f003 0307 	and.w	r3, r3, #7
 8013192:	2b00      	cmp	r3, #0
 8013194:	d00a      	beq.n	80131ac <pvPortMalloc+0x174>
	__asm volatile
 8013196:	f04f 0350 	mov.w	r3, #80	; 0x50
 801319a:	f383 8811 	msr	BASEPRI, r3
 801319e:	f3bf 8f6f 	isb	sy
 80131a2:	f3bf 8f4f 	dsb	sy
 80131a6:	60fb      	str	r3, [r7, #12]
}
 80131a8:	bf00      	nop
 80131aa:	e7fe      	b.n	80131aa <pvPortMalloc+0x172>
	return pvReturn;
 80131ac:	69fb      	ldr	r3, [r7, #28]
}
 80131ae:	4618      	mov	r0, r3
 80131b0:	3728      	adds	r7, #40	; 0x28
 80131b2:	46bd      	mov	sp, r7
 80131b4:	bd80      	pop	{r7, pc}
 80131b6:	bf00      	nop
 80131b8:	2000811c 	.word	0x2000811c
 80131bc:	20008130 	.word	0x20008130
 80131c0:	20008120 	.word	0x20008120
 80131c4:	20008114 	.word	0x20008114
 80131c8:	20008124 	.word	0x20008124
 80131cc:	20008128 	.word	0x20008128

080131d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b086      	sub	sp, #24
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d04d      	beq.n	801327e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80131e2:	2308      	movs	r3, #8
 80131e4:	425b      	negs	r3, r3
 80131e6:	697a      	ldr	r2, [r7, #20]
 80131e8:	4413      	add	r3, r2
 80131ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80131ec:	697b      	ldr	r3, [r7, #20]
 80131ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80131f0:	693b      	ldr	r3, [r7, #16]
 80131f2:	685a      	ldr	r2, [r3, #4]
 80131f4:	4b24      	ldr	r3, [pc, #144]	; (8013288 <vPortFree+0xb8>)
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	4013      	ands	r3, r2
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d10a      	bne.n	8013214 <vPortFree+0x44>
	__asm volatile
 80131fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013202:	f383 8811 	msr	BASEPRI, r3
 8013206:	f3bf 8f6f 	isb	sy
 801320a:	f3bf 8f4f 	dsb	sy
 801320e:	60fb      	str	r3, [r7, #12]
}
 8013210:	bf00      	nop
 8013212:	e7fe      	b.n	8013212 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013214:	693b      	ldr	r3, [r7, #16]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d00a      	beq.n	8013232 <vPortFree+0x62>
	__asm volatile
 801321c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013220:	f383 8811 	msr	BASEPRI, r3
 8013224:	f3bf 8f6f 	isb	sy
 8013228:	f3bf 8f4f 	dsb	sy
 801322c:	60bb      	str	r3, [r7, #8]
}
 801322e:	bf00      	nop
 8013230:	e7fe      	b.n	8013230 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013232:	693b      	ldr	r3, [r7, #16]
 8013234:	685a      	ldr	r2, [r3, #4]
 8013236:	4b14      	ldr	r3, [pc, #80]	; (8013288 <vPortFree+0xb8>)
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	4013      	ands	r3, r2
 801323c:	2b00      	cmp	r3, #0
 801323e:	d01e      	beq.n	801327e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013240:	693b      	ldr	r3, [r7, #16]
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d11a      	bne.n	801327e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013248:	693b      	ldr	r3, [r7, #16]
 801324a:	685a      	ldr	r2, [r3, #4]
 801324c:	4b0e      	ldr	r3, [pc, #56]	; (8013288 <vPortFree+0xb8>)
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	43db      	mvns	r3, r3
 8013252:	401a      	ands	r2, r3
 8013254:	693b      	ldr	r3, [r7, #16]
 8013256:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013258:	f7fe ffdc 	bl	8012214 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801325c:	693b      	ldr	r3, [r7, #16]
 801325e:	685a      	ldr	r2, [r3, #4]
 8013260:	4b0a      	ldr	r3, [pc, #40]	; (801328c <vPortFree+0xbc>)
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	4413      	add	r3, r2
 8013266:	4a09      	ldr	r2, [pc, #36]	; (801328c <vPortFree+0xbc>)
 8013268:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801326a:	6938      	ldr	r0, [r7, #16]
 801326c:	f000 f874 	bl	8013358 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8013270:	4b07      	ldr	r3, [pc, #28]	; (8013290 <vPortFree+0xc0>)
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	3301      	adds	r3, #1
 8013276:	4a06      	ldr	r2, [pc, #24]	; (8013290 <vPortFree+0xc0>)
 8013278:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801327a:	f7fe ffd9 	bl	8012230 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801327e:	bf00      	nop
 8013280:	3718      	adds	r7, #24
 8013282:	46bd      	mov	sp, r7
 8013284:	bd80      	pop	{r7, pc}
 8013286:	bf00      	nop
 8013288:	20008130 	.word	0x20008130
 801328c:	20008120 	.word	0x20008120
 8013290:	2000812c 	.word	0x2000812c

08013294 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013294:	b480      	push	{r7}
 8013296:	b085      	sub	sp, #20
 8013298:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801329a:	f645 53c0 	movw	r3, #24000	; 0x5dc0
 801329e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80132a0:	4b27      	ldr	r3, [pc, #156]	; (8013340 <prvHeapInit+0xac>)
 80132a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	f003 0307 	and.w	r3, r3, #7
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d00c      	beq.n	80132c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	3307      	adds	r3, #7
 80132b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	f023 0307 	bic.w	r3, r3, #7
 80132ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80132bc:	68ba      	ldr	r2, [r7, #8]
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	1ad3      	subs	r3, r2, r3
 80132c2:	4a1f      	ldr	r2, [pc, #124]	; (8013340 <prvHeapInit+0xac>)
 80132c4:	4413      	add	r3, r2
 80132c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80132cc:	4a1d      	ldr	r2, [pc, #116]	; (8013344 <prvHeapInit+0xb0>)
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80132d2:	4b1c      	ldr	r3, [pc, #112]	; (8013344 <prvHeapInit+0xb0>)
 80132d4:	2200      	movs	r2, #0
 80132d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	68ba      	ldr	r2, [r7, #8]
 80132dc:	4413      	add	r3, r2
 80132de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80132e0:	2208      	movs	r2, #8
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	1a9b      	subs	r3, r3, r2
 80132e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	f023 0307 	bic.w	r3, r3, #7
 80132ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	4a15      	ldr	r2, [pc, #84]	; (8013348 <prvHeapInit+0xb4>)
 80132f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80132f6:	4b14      	ldr	r3, [pc, #80]	; (8013348 <prvHeapInit+0xb4>)
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	2200      	movs	r2, #0
 80132fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80132fe:	4b12      	ldr	r3, [pc, #72]	; (8013348 <prvHeapInit+0xb4>)
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	2200      	movs	r2, #0
 8013304:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801330a:	683b      	ldr	r3, [r7, #0]
 801330c:	68fa      	ldr	r2, [r7, #12]
 801330e:	1ad2      	subs	r2, r2, r3
 8013310:	683b      	ldr	r3, [r7, #0]
 8013312:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013314:	4b0c      	ldr	r3, [pc, #48]	; (8013348 <prvHeapInit+0xb4>)
 8013316:	681a      	ldr	r2, [r3, #0]
 8013318:	683b      	ldr	r3, [r7, #0]
 801331a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801331c:	683b      	ldr	r3, [r7, #0]
 801331e:	685b      	ldr	r3, [r3, #4]
 8013320:	4a0a      	ldr	r2, [pc, #40]	; (801334c <prvHeapInit+0xb8>)
 8013322:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013324:	683b      	ldr	r3, [r7, #0]
 8013326:	685b      	ldr	r3, [r3, #4]
 8013328:	4a09      	ldr	r2, [pc, #36]	; (8013350 <prvHeapInit+0xbc>)
 801332a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801332c:	4b09      	ldr	r3, [pc, #36]	; (8013354 <prvHeapInit+0xc0>)
 801332e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013332:	601a      	str	r2, [r3, #0]
}
 8013334:	bf00      	nop
 8013336:	3714      	adds	r7, #20
 8013338:	46bd      	mov	sp, r7
 801333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801333e:	4770      	bx	lr
 8013340:	20002354 	.word	0x20002354
 8013344:	20008114 	.word	0x20008114
 8013348:	2000811c 	.word	0x2000811c
 801334c:	20008124 	.word	0x20008124
 8013350:	20008120 	.word	0x20008120
 8013354:	20008130 	.word	0x20008130

08013358 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013358:	b480      	push	{r7}
 801335a:	b085      	sub	sp, #20
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013360:	4b28      	ldr	r3, [pc, #160]	; (8013404 <prvInsertBlockIntoFreeList+0xac>)
 8013362:	60fb      	str	r3, [r7, #12]
 8013364:	e002      	b.n	801336c <prvInsertBlockIntoFreeList+0x14>
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	60fb      	str	r3, [r7, #12]
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	687a      	ldr	r2, [r7, #4]
 8013372:	429a      	cmp	r2, r3
 8013374:	d8f7      	bhi.n	8013366 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	685b      	ldr	r3, [r3, #4]
 801337e:	68ba      	ldr	r2, [r7, #8]
 8013380:	4413      	add	r3, r2
 8013382:	687a      	ldr	r2, [r7, #4]
 8013384:	429a      	cmp	r2, r3
 8013386:	d108      	bne.n	801339a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	685a      	ldr	r2, [r3, #4]
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	685b      	ldr	r3, [r3, #4]
 8013390:	441a      	add	r2, r3
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	685b      	ldr	r3, [r3, #4]
 80133a2:	68ba      	ldr	r2, [r7, #8]
 80133a4:	441a      	add	r2, r3
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	429a      	cmp	r2, r3
 80133ac:	d118      	bne.n	80133e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	681a      	ldr	r2, [r3, #0]
 80133b2:	4b15      	ldr	r3, [pc, #84]	; (8013408 <prvInsertBlockIntoFreeList+0xb0>)
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	429a      	cmp	r2, r3
 80133b8:	d00d      	beq.n	80133d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	685a      	ldr	r2, [r3, #4]
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	685b      	ldr	r3, [r3, #4]
 80133c4:	441a      	add	r2, r3
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	681a      	ldr	r2, [r3, #0]
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	601a      	str	r2, [r3, #0]
 80133d4:	e008      	b.n	80133e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80133d6:	4b0c      	ldr	r3, [pc, #48]	; (8013408 <prvInsertBlockIntoFreeList+0xb0>)
 80133d8:	681a      	ldr	r2, [r3, #0]
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	601a      	str	r2, [r3, #0]
 80133de:	e003      	b.n	80133e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	681a      	ldr	r2, [r3, #0]
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80133e8:	68fa      	ldr	r2, [r7, #12]
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	429a      	cmp	r2, r3
 80133ee:	d002      	beq.n	80133f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	687a      	ldr	r2, [r7, #4]
 80133f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80133f6:	bf00      	nop
 80133f8:	3714      	adds	r7, #20
 80133fa:	46bd      	mov	sp, r7
 80133fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013400:	4770      	bx	lr
 8013402:	bf00      	nop
 8013404:	20008114 	.word	0x20008114
 8013408:	2000811c 	.word	0x2000811c

0801340c <USB_transmit_msg>:

/*
 * -- Insert your variables declaration here --
 */
/* USER CODE BEGIN 0 */
void USB_transmit_msg(uint8_t* data,uint32_t size){
 801340c:	b580      	push	{r7, lr}
 801340e:	b082      	sub	sp, #8
 8013410:	af00      	add	r7, sp, #0
 8013412:	6078      	str	r0, [r7, #4]
 8013414:	6039      	str	r1, [r7, #0]
  USBH_CDC_Stop(&hUsbHostFS);
 8013416:	4806      	ldr	r0, [pc, #24]	; (8013430 <USB_transmit_msg+0x24>)
 8013418:	f7f6 fd9f 	bl	8009f5a <USBH_CDC_Stop>
  USBH_CDC_Transmit(&hUsbHostFS,data, size);
 801341c:	683a      	ldr	r2, [r7, #0]
 801341e:	6879      	ldr	r1, [r7, #4]
 8013420:	4803      	ldr	r0, [pc, #12]	; (8013430 <USB_transmit_msg+0x24>)
 8013422:	f7f6 fe2a 	bl	800a07a <USBH_CDC_Transmit>
}
 8013426:	bf00      	nop
 8013428:	3708      	adds	r7, #8
 801342a:	46bd      	mov	sp, r7
 801342c:	bd80      	pop	{r7, pc}
 801342e:	bf00      	nop
 8013430:	2000c59c 	.word	0x2000c59c

08013434 <USB_receive_msg>:

void USB_receive_msg(){
 8013434:	b580      	push	{r7, lr}
 8013436:	af00      	add	r7, sp, #0
  USBH_CDC_Stop(&hUsbHostFS);
 8013438:	4809      	ldr	r0, [pc, #36]	; (8013460 <USB_receive_msg+0x2c>)
 801343a:	f7f6 fd8e 	bl	8009f5a <USBH_CDC_Stop>
  USBH_CDC_Receive(&hUsbHostFS,usb_rx_buff[usb_rx_buff_active],USB_RX_BUFF_SIZE);
 801343e:	4b09      	ldr	r3, [pc, #36]	; (8013464 <USB_receive_msg+0x30>)
 8013440:	781b      	ldrb	r3, [r3, #0]
 8013442:	461a      	mov	r2, r3
 8013444:	f640 53ac 	movw	r3, #3500	; 0xdac
 8013448:	fb02 f303 	mul.w	r3, r2, r3
 801344c:	4a06      	ldr	r2, [pc, #24]	; (8013468 <USB_receive_msg+0x34>)
 801344e:	4413      	add	r3, r2
 8013450:	f640 52ac 	movw	r2, #3500	; 0xdac
 8013454:	4619      	mov	r1, r3
 8013456:	4802      	ldr	r0, [pc, #8]	; (8013460 <USB_receive_msg+0x2c>)
 8013458:	f7f6 fe4a 	bl	800a0f0 <USBH_CDC_Receive>
}
 801345c:	bf00      	nop
 801345e:	bd80      	pop	{r7, pc}
 8013460:	2000c59c 	.word	0x2000c59c
 8013464:	2000c598 	.word	0x2000c598
 8013468:	2000813c 	.word	0x2000813c

0801346c <USB_set_line_coding>:


void USB_set_line_coding(){
 801346c:	b580      	push	{r7, lr}
 801346e:	af00      	add	r7, sp, #0
	FrameFormat.b.dwDTERate = 1250000;
 8013470:	4b08      	ldr	r3, [pc, #32]	; (8013494 <USB_set_line_coding+0x28>)
 8013472:	4a09      	ldr	r2, [pc, #36]	; (8013498 <USB_set_line_coding+0x2c>)
 8013474:	601a      	str	r2, [r3, #0]
	FrameFormat.b.bCharFormat = 0;
 8013476:	4b07      	ldr	r3, [pc, #28]	; (8013494 <USB_set_line_coding+0x28>)
 8013478:	2200      	movs	r2, #0
 801347a:	711a      	strb	r2, [r3, #4]
	FrameFormat.b.bDataBits = 8;
 801347c:	4b05      	ldr	r3, [pc, #20]	; (8013494 <USB_set_line_coding+0x28>)
 801347e:	2208      	movs	r2, #8
 8013480:	719a      	strb	r2, [r3, #6]
	FrameFormat.b.bParityType = 0;
 8013482:	4b04      	ldr	r3, [pc, #16]	; (8013494 <USB_set_line_coding+0x28>)
 8013484:	2200      	movs	r2, #0
 8013486:	715a      	strb	r2, [r3, #5]

	USBH_CDC_SetLineCoding(&hUsbHostFS, &FrameFormat);
 8013488:	4902      	ldr	r1, [pc, #8]	; (8013494 <USB_set_line_coding+0x28>)
 801348a:	4804      	ldr	r0, [pc, #16]	; (801349c <USB_set_line_coding+0x30>)
 801348c:	f7f6 fdcc 	bl	800a028 <USBH_CDC_SetLineCoding>
}
 8013490:	bf00      	nop
 8013492:	bd80      	pop	{r7, pc}
 8013494:	20008134 	.word	0x20008134
 8013498:	001312d0 	.word	0x001312d0
 801349c:	2000c59c 	.word	0x2000c59c

080134a0 <USBH_CDC_TransmitCallback>:
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */

void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b082      	sub	sp, #8
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
  USB_receive_msg();
 80134a8:	f7ff ffc4 	bl	8013434 <USB_receive_msg>
}
 80134ac:	bf00      	nop
 80134ae:	3708      	adds	r7, #8
 80134b0:	46bd      	mov	sp, r7
 80134b2:	bd80      	pop	{r7, pc}

080134b4 <USBH_CDC_ReceiveCallback>:


void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80134b4:	b480      	push	{r7}
 80134b6:	b083      	sub	sp, #12
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
}
 80134bc:	bf00      	nop
 80134be:	370c      	adds	r7, #12
 80134c0:	46bd      	mov	sp, r7
 80134c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c6:	4770      	bx	lr

080134c8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80134c8:	b580      	push	{r7, lr}
 80134ca:	af00      	add	r7, sp, #0


  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80134cc:	2201      	movs	r2, #1
 80134ce:	490e      	ldr	r1, [pc, #56]	; (8013508 <MX_USB_HOST_Init+0x40>)
 80134d0:	480e      	ldr	r0, [pc, #56]	; (801350c <MX_USB_HOST_Init+0x44>)
 80134d2:	f7f6 ff91 	bl	800a3f8 <USBH_Init>
 80134d6:	4603      	mov	r3, r0
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d001      	beq.n	80134e0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80134dc:	f7ee fae2 	bl	8001aa4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80134e0:	490b      	ldr	r1, [pc, #44]	; (8013510 <MX_USB_HOST_Init+0x48>)
 80134e2:	480a      	ldr	r0, [pc, #40]	; (801350c <MX_USB_HOST_Init+0x44>)
 80134e4:	f7f7 f83e 	bl	800a564 <USBH_RegisterClass>
 80134e8:	4603      	mov	r3, r0
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d001      	beq.n	80134f2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80134ee:	f7ee fad9 	bl	8001aa4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80134f2:	4806      	ldr	r0, [pc, #24]	; (801350c <MX_USB_HOST_Init+0x44>)
 80134f4:	f7f7 f8c2 	bl	800a67c <USBH_Start>
 80134f8:	4603      	mov	r3, r0
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d001      	beq.n	8013502 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80134fe:	f7ee fad1 	bl	8001aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8013502:	bf00      	nop
 8013504:	bd80      	pop	{r7, pc}
 8013506:	bf00      	nop
 8013508:	08013515 	.word	0x08013515
 801350c:	2000c59c 	.word	0x2000c59c
 8013510:	20000290 	.word	0x20000290

08013514 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8013514:	b580      	push	{r7, lr}
 8013516:	b082      	sub	sp, #8
 8013518:	af00      	add	r7, sp, #0
 801351a:	6078      	str	r0, [r7, #4]
 801351c:	460b      	mov	r3, r1
 801351e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8013520:	78fb      	ldrb	r3, [r7, #3]
 8013522:	3b01      	subs	r3, #1
 8013524:	2b04      	cmp	r3, #4
 8013526:	d82e      	bhi.n	8013586 <USBH_UserProcess+0x72>
 8013528:	a201      	add	r2, pc, #4	; (adr r2, 8013530 <USBH_UserProcess+0x1c>)
 801352a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801352e:	bf00      	nop
 8013530:	08013587 	.word	0x08013587
 8013534:	0801355b 	.word	0x0801355b
 8013538:	08013587 	.word	0x08013587
 801353c:	08013571 	.word	0x08013571
 8013540:	08013545 	.word	0x08013545
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8013544:	4b12      	ldr	r3, [pc, #72]	; (8013590 <USBH_UserProcess+0x7c>)
 8013546:	2203      	movs	r2, #3
 8013548:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_DISCONNECT, 0);
 801354a:	4b12      	ldr	r3, [pc, #72]	; (8013594 <USBH_UserProcess+0x80>)
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	2200      	movs	r2, #0
 8013550:	2103      	movs	r1, #3
 8013552:	4618      	mov	r0, r3
 8013554:	f7fd fd6a 	bl	801102c <osMessagePut>
  break;
 8013558:	e016      	b.n	8013588 <USBH_UserProcess+0x74>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801355a:	4b0d      	ldr	r3, [pc, #52]	; (8013590 <USBH_UserProcess+0x7c>)
 801355c:	2202      	movs	r2, #2
 801355e:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_READY, 0);
 8013560:	4b0c      	ldr	r3, [pc, #48]	; (8013594 <USBH_UserProcess+0x80>)
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	2200      	movs	r2, #0
 8013566:	2102      	movs	r1, #2
 8013568:	4618      	mov	r0, r3
 801356a:	f7fd fd5f 	bl	801102c <osMessagePut>
  break;
 801356e:	e00b      	b.n	8013588 <USBH_UserProcess+0x74>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8013570:	4b07      	ldr	r3, [pc, #28]	; (8013590 <USBH_UserProcess+0x7c>)
 8013572:	2201      	movs	r2, #1
 8013574:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_START, 0);
 8013576:	4b07      	ldr	r3, [pc, #28]	; (8013594 <USBH_UserProcess+0x80>)
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	2200      	movs	r2, #0
 801357c:	2101      	movs	r1, #1
 801357e:	4618      	mov	r0, r3
 8013580:	f7fd fd54 	bl	801102c <osMessagePut>
  break;
 8013584:	e000      	b.n	8013588 <USBH_UserProcess+0x74>

  default:
  break;
 8013586:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8013588:	bf00      	nop
 801358a:	3708      	adds	r7, #8
 801358c:	46bd      	mov	sp, r7
 801358e:	bd80      	pop	{r7, pc}
 8013590:	2000c980 	.word	0x2000c980
 8013594:	200009a0 	.word	0x200009a0

08013598 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b08a      	sub	sp, #40	; 0x28
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80135a0:	f107 0314 	add.w	r3, r7, #20
 80135a4:	2200      	movs	r2, #0
 80135a6:	601a      	str	r2, [r3, #0]
 80135a8:	605a      	str	r2, [r3, #4]
 80135aa:	609a      	str	r2, [r3, #8]
 80135ac:	60da      	str	r2, [r3, #12]
 80135ae:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80135b8:	d13a      	bne.n	8013630 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80135ba:	2300      	movs	r3, #0
 80135bc:	613b      	str	r3, [r7, #16]
 80135be:	4b1e      	ldr	r3, [pc, #120]	; (8013638 <HAL_HCD_MspInit+0xa0>)
 80135c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135c2:	4a1d      	ldr	r2, [pc, #116]	; (8013638 <HAL_HCD_MspInit+0xa0>)
 80135c4:	f043 0301 	orr.w	r3, r3, #1
 80135c8:	6313      	str	r3, [r2, #48]	; 0x30
 80135ca:	4b1b      	ldr	r3, [pc, #108]	; (8013638 <HAL_HCD_MspInit+0xa0>)
 80135cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135ce:	f003 0301 	and.w	r3, r3, #1
 80135d2:	613b      	str	r3, [r7, #16]
 80135d4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80135d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80135da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80135dc:	2302      	movs	r3, #2
 80135de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80135e0:	2300      	movs	r3, #0
 80135e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80135e4:	2303      	movs	r3, #3
 80135e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80135e8:	230a      	movs	r3, #10
 80135ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80135ec:	f107 0314 	add.w	r3, r7, #20
 80135f0:	4619      	mov	r1, r3
 80135f2:	4812      	ldr	r0, [pc, #72]	; (801363c <HAL_HCD_MspInit+0xa4>)
 80135f4:	f7f0 f90c 	bl	8003810 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80135f8:	4b0f      	ldr	r3, [pc, #60]	; (8013638 <HAL_HCD_MspInit+0xa0>)
 80135fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80135fc:	4a0e      	ldr	r2, [pc, #56]	; (8013638 <HAL_HCD_MspInit+0xa0>)
 80135fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013602:	6353      	str	r3, [r2, #52]	; 0x34
 8013604:	2300      	movs	r3, #0
 8013606:	60fb      	str	r3, [r7, #12]
 8013608:	4b0b      	ldr	r3, [pc, #44]	; (8013638 <HAL_HCD_MspInit+0xa0>)
 801360a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801360c:	4a0a      	ldr	r2, [pc, #40]	; (8013638 <HAL_HCD_MspInit+0xa0>)
 801360e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013612:	6453      	str	r3, [r2, #68]	; 0x44
 8013614:	4b08      	ldr	r3, [pc, #32]	; (8013638 <HAL_HCD_MspInit+0xa0>)
 8013616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801361c:	60fb      	str	r3, [r7, #12]
 801361e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8013620:	2200      	movs	r2, #0
 8013622:	2105      	movs	r1, #5
 8013624:	2043      	movs	r0, #67	; 0x43
 8013626:	f7ef fa75 	bl	8002b14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801362a:	2043      	movs	r0, #67	; 0x43
 801362c:	f7ef fa8e 	bl	8002b4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8013630:	bf00      	nop
 8013632:	3728      	adds	r7, #40	; 0x28
 8013634:	46bd      	mov	sp, r7
 8013636:	bd80      	pop	{r7, pc}
 8013638:	40023800 	.word	0x40023800
 801363c:	40020000 	.word	0x40020000

08013640 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8013640:	b580      	push	{r7, lr}
 8013642:	b082      	sub	sp, #8
 8013644:	af00      	add	r7, sp, #0
 8013646:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801364e:	4618      	mov	r0, r3
 8013650:	f7f7 fccb 	bl	800afea <USBH_LL_IncTimer>
}
 8013654:	bf00      	nop
 8013656:	3708      	adds	r7, #8
 8013658:	46bd      	mov	sp, r7
 801365a:	bd80      	pop	{r7, pc}

0801365c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801365c:	b580      	push	{r7, lr}
 801365e:	b082      	sub	sp, #8
 8013660:	af00      	add	r7, sp, #0
 8013662:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801366a:	4618      	mov	r0, r3
 801366c:	f7f7 fd0f 	bl	800b08e <USBH_LL_Connect>
}
 8013670:	bf00      	nop
 8013672:	3708      	adds	r7, #8
 8013674:	46bd      	mov	sp, r7
 8013676:	bd80      	pop	{r7, pc}

08013678 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8013678:	b580      	push	{r7, lr}
 801367a:	b082      	sub	sp, #8
 801367c:	af00      	add	r7, sp, #0
 801367e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8013686:	4618      	mov	r0, r3
 8013688:	f7f7 fd24 	bl	800b0d4 <USBH_LL_Disconnect>
}
 801368c:	bf00      	nop
 801368e:	3708      	adds	r7, #8
 8013690:	46bd      	mov	sp, r7
 8013692:	bd80      	pop	{r7, pc}

08013694 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8013694:	b580      	push	{r7, lr}
 8013696:	b082      	sub	sp, #8
 8013698:	af00      	add	r7, sp, #0
 801369a:	6078      	str	r0, [r7, #4]
 801369c:	460b      	mov	r3, r1
 801369e:	70fb      	strb	r3, [r7, #3]
 80136a0:	4613      	mov	r3, r2
 80136a2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80136aa:	4618      	mov	r0, r3
 80136ac:	f7f7 fd59 	bl	800b162 <USBH_LL_NotifyURBChange>
#endif
}
 80136b0:	bf00      	nop
 80136b2:	3708      	adds	r7, #8
 80136b4:	46bd      	mov	sp, r7
 80136b6:	bd80      	pop	{r7, pc}

080136b8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b082      	sub	sp, #8
 80136bc:	af00      	add	r7, sp, #0
 80136be:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80136c6:	4618      	mov	r0, r3
 80136c8:	f7f7 fcb9 	bl	800b03e <USBH_LL_PortEnabled>
}
 80136cc:	bf00      	nop
 80136ce:	3708      	adds	r7, #8
 80136d0:	46bd      	mov	sp, r7
 80136d2:	bd80      	pop	{r7, pc}

080136d4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b082      	sub	sp, #8
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80136e2:	4618      	mov	r0, r3
 80136e4:	f7f7 fcc5 	bl	800b072 <USBH_LL_PortDisabled>
}
 80136e8:	bf00      	nop
 80136ea:	3708      	adds	r7, #8
 80136ec:	46bd      	mov	sp, r7
 80136ee:	bd80      	pop	{r7, pc}

080136f0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80136f0:	b580      	push	{r7, lr}
 80136f2:	b082      	sub	sp, #8
 80136f4:	af00      	add	r7, sp, #0
 80136f6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80136fe:	2b01      	cmp	r3, #1
 8013700:	d12a      	bne.n	8013758 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8013702:	4a18      	ldr	r2, [pc, #96]	; (8013764 <USBH_LL_Init+0x74>)
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	4a15      	ldr	r2, [pc, #84]	; (8013764 <USBH_LL_Init+0x74>)
 801370e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8013712:	4b14      	ldr	r3, [pc, #80]	; (8013764 <USBH_LL_Init+0x74>)
 8013714:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8013718:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801371a:	4b12      	ldr	r3, [pc, #72]	; (8013764 <USBH_LL_Init+0x74>)
 801371c:	2208      	movs	r2, #8
 801371e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8013720:	4b10      	ldr	r3, [pc, #64]	; (8013764 <USBH_LL_Init+0x74>)
 8013722:	2201      	movs	r2, #1
 8013724:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8013726:	4b0f      	ldr	r3, [pc, #60]	; (8013764 <USBH_LL_Init+0x74>)
 8013728:	2200      	movs	r2, #0
 801372a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801372c:	4b0d      	ldr	r3, [pc, #52]	; (8013764 <USBH_LL_Init+0x74>)
 801372e:	2202      	movs	r2, #2
 8013730:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013732:	4b0c      	ldr	r3, [pc, #48]	; (8013764 <USBH_LL_Init+0x74>)
 8013734:	2200      	movs	r2, #0
 8013736:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8013738:	480a      	ldr	r0, [pc, #40]	; (8013764 <USBH_LL_Init+0x74>)
 801373a:	f7f0 fa1e 	bl	8003b7a <HAL_HCD_Init>
 801373e:	4603      	mov	r3, r0
 8013740:	2b00      	cmp	r3, #0
 8013742:	d001      	beq.n	8013748 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8013744:	f7ee f9ae 	bl	8001aa4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8013748:	4806      	ldr	r0, [pc, #24]	; (8013764 <USBH_LL_Init+0x74>)
 801374a:	f7f0 fe02 	bl	8004352 <HAL_HCD_GetCurrentFrame>
 801374e:	4603      	mov	r3, r0
 8013750:	4619      	mov	r1, r3
 8013752:	6878      	ldr	r0, [r7, #4]
 8013754:	f7f7 fc3a 	bl	800afcc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8013758:	2300      	movs	r3, #0
}
 801375a:	4618      	mov	r0, r3
 801375c:	3708      	adds	r7, #8
 801375e:	46bd      	mov	sp, r7
 8013760:	bd80      	pop	{r7, pc}
 8013762:	bf00      	nop
 8013764:	2000c984 	.word	0x2000c984

08013768 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8013768:	b580      	push	{r7, lr}
 801376a:	b084      	sub	sp, #16
 801376c:	af00      	add	r7, sp, #0
 801376e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013770:	2300      	movs	r3, #0
 8013772:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013774:	2300      	movs	r3, #0
 8013776:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801377e:	4618      	mov	r0, r3
 8013780:	f7f0 fd71 	bl	8004266 <HAL_HCD_Start>
 8013784:	4603      	mov	r3, r0
 8013786:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013788:	7bfb      	ldrb	r3, [r7, #15]
 801378a:	4618      	mov	r0, r3
 801378c:	f000 f95c 	bl	8013a48 <USBH_Get_USB_Status>
 8013790:	4603      	mov	r3, r0
 8013792:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013794:	7bbb      	ldrb	r3, [r7, #14]
}
 8013796:	4618      	mov	r0, r3
 8013798:	3710      	adds	r7, #16
 801379a:	46bd      	mov	sp, r7
 801379c:	bd80      	pop	{r7, pc}

0801379e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801379e:	b580      	push	{r7, lr}
 80137a0:	b084      	sub	sp, #16
 80137a2:	af00      	add	r7, sp, #0
 80137a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80137a6:	2300      	movs	r3, #0
 80137a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80137aa:	2300      	movs	r3, #0
 80137ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80137b4:	4618      	mov	r0, r3
 80137b6:	f7f0 fd79 	bl	80042ac <HAL_HCD_Stop>
 80137ba:	4603      	mov	r3, r0
 80137bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80137be:	7bfb      	ldrb	r3, [r7, #15]
 80137c0:	4618      	mov	r0, r3
 80137c2:	f000 f941 	bl	8013a48 <USBH_Get_USB_Status>
 80137c6:	4603      	mov	r3, r0
 80137c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80137ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80137cc:	4618      	mov	r0, r3
 80137ce:	3710      	adds	r7, #16
 80137d0:	46bd      	mov	sp, r7
 80137d2:	bd80      	pop	{r7, pc}

080137d4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b084      	sub	sp, #16
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80137dc:	2301      	movs	r3, #1
 80137de:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80137e6:	4618      	mov	r0, r3
 80137e8:	f7f0 fdc1 	bl	800436e <HAL_HCD_GetCurrentSpeed>
 80137ec:	4603      	mov	r3, r0
 80137ee:	2b02      	cmp	r3, #2
 80137f0:	d00c      	beq.n	801380c <USBH_LL_GetSpeed+0x38>
 80137f2:	2b02      	cmp	r3, #2
 80137f4:	d80d      	bhi.n	8013812 <USBH_LL_GetSpeed+0x3e>
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d002      	beq.n	8013800 <USBH_LL_GetSpeed+0x2c>
 80137fa:	2b01      	cmp	r3, #1
 80137fc:	d003      	beq.n	8013806 <USBH_LL_GetSpeed+0x32>
 80137fe:	e008      	b.n	8013812 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8013800:	2300      	movs	r3, #0
 8013802:	73fb      	strb	r3, [r7, #15]
    break;
 8013804:	e008      	b.n	8013818 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8013806:	2301      	movs	r3, #1
 8013808:	73fb      	strb	r3, [r7, #15]
    break;
 801380a:	e005      	b.n	8013818 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 801380c:	2302      	movs	r3, #2
 801380e:	73fb      	strb	r3, [r7, #15]
    break;
 8013810:	e002      	b.n	8013818 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8013812:	2301      	movs	r3, #1
 8013814:	73fb      	strb	r3, [r7, #15]
    break;
 8013816:	bf00      	nop
  }
  return  speed;
 8013818:	7bfb      	ldrb	r3, [r7, #15]
}
 801381a:	4618      	mov	r0, r3
 801381c:	3710      	adds	r7, #16
 801381e:	46bd      	mov	sp, r7
 8013820:	bd80      	pop	{r7, pc}

08013822 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8013822:	b580      	push	{r7, lr}
 8013824:	b084      	sub	sp, #16
 8013826:	af00      	add	r7, sp, #0
 8013828:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801382a:	2300      	movs	r3, #0
 801382c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801382e:	2300      	movs	r3, #0
 8013830:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013838:	4618      	mov	r0, r3
 801383a:	f7f0 fd54 	bl	80042e6 <HAL_HCD_ResetPort>
 801383e:	4603      	mov	r3, r0
 8013840:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013842:	7bfb      	ldrb	r3, [r7, #15]
 8013844:	4618      	mov	r0, r3
 8013846:	f000 f8ff 	bl	8013a48 <USBH_Get_USB_Status>
 801384a:	4603      	mov	r3, r0
 801384c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801384e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013850:	4618      	mov	r0, r3
 8013852:	3710      	adds	r7, #16
 8013854:	46bd      	mov	sp, r7
 8013856:	bd80      	pop	{r7, pc}

08013858 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013858:	b580      	push	{r7, lr}
 801385a:	b082      	sub	sp, #8
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
 8013860:	460b      	mov	r3, r1
 8013862:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801386a:	78fa      	ldrb	r2, [r7, #3]
 801386c:	4611      	mov	r1, r2
 801386e:	4618      	mov	r0, r3
 8013870:	f7f0 fd5b 	bl	800432a <HAL_HCD_HC_GetXferCount>
 8013874:	4603      	mov	r3, r0
}
 8013876:	4618      	mov	r0, r3
 8013878:	3708      	adds	r7, #8
 801387a:	46bd      	mov	sp, r7
 801387c:	bd80      	pop	{r7, pc}

0801387e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801387e:	b590      	push	{r4, r7, lr}
 8013880:	b089      	sub	sp, #36	; 0x24
 8013882:	af04      	add	r7, sp, #16
 8013884:	6078      	str	r0, [r7, #4]
 8013886:	4608      	mov	r0, r1
 8013888:	4611      	mov	r1, r2
 801388a:	461a      	mov	r2, r3
 801388c:	4603      	mov	r3, r0
 801388e:	70fb      	strb	r3, [r7, #3]
 8013890:	460b      	mov	r3, r1
 8013892:	70bb      	strb	r3, [r7, #2]
 8013894:	4613      	mov	r3, r2
 8013896:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013898:	2300      	movs	r3, #0
 801389a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801389c:	2300      	movs	r3, #0
 801389e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80138a6:	787c      	ldrb	r4, [r7, #1]
 80138a8:	78ba      	ldrb	r2, [r7, #2]
 80138aa:	78f9      	ldrb	r1, [r7, #3]
 80138ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80138ae:	9302      	str	r3, [sp, #8]
 80138b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80138b4:	9301      	str	r3, [sp, #4]
 80138b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80138ba:	9300      	str	r3, [sp, #0]
 80138bc:	4623      	mov	r3, r4
 80138be:	f7f0 f9be 	bl	8003c3e <HAL_HCD_HC_Init>
 80138c2:	4603      	mov	r3, r0
 80138c4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80138c6:	7bfb      	ldrb	r3, [r7, #15]
 80138c8:	4618      	mov	r0, r3
 80138ca:	f000 f8bd 	bl	8013a48 <USBH_Get_USB_Status>
 80138ce:	4603      	mov	r3, r0
 80138d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80138d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80138d4:	4618      	mov	r0, r3
 80138d6:	3714      	adds	r7, #20
 80138d8:	46bd      	mov	sp, r7
 80138da:	bd90      	pop	{r4, r7, pc}

080138dc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80138dc:	b580      	push	{r7, lr}
 80138de:	b084      	sub	sp, #16
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	6078      	str	r0, [r7, #4]
 80138e4:	460b      	mov	r3, r1
 80138e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80138e8:	2300      	movs	r3, #0
 80138ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80138ec:	2300      	movs	r3, #0
 80138ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80138f6:	78fa      	ldrb	r2, [r7, #3]
 80138f8:	4611      	mov	r1, r2
 80138fa:	4618      	mov	r0, r3
 80138fc:	f7f0 fa2e 	bl	8003d5c <HAL_HCD_HC_Halt>
 8013900:	4603      	mov	r3, r0
 8013902:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013904:	7bfb      	ldrb	r3, [r7, #15]
 8013906:	4618      	mov	r0, r3
 8013908:	f000 f89e 	bl	8013a48 <USBH_Get_USB_Status>
 801390c:	4603      	mov	r3, r0
 801390e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013910:	7bbb      	ldrb	r3, [r7, #14]
}
 8013912:	4618      	mov	r0, r3
 8013914:	3710      	adds	r7, #16
 8013916:	46bd      	mov	sp, r7
 8013918:	bd80      	pop	{r7, pc}

0801391a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801391a:	b590      	push	{r4, r7, lr}
 801391c:	b089      	sub	sp, #36	; 0x24
 801391e:	af04      	add	r7, sp, #16
 8013920:	6078      	str	r0, [r7, #4]
 8013922:	4608      	mov	r0, r1
 8013924:	4611      	mov	r1, r2
 8013926:	461a      	mov	r2, r3
 8013928:	4603      	mov	r3, r0
 801392a:	70fb      	strb	r3, [r7, #3]
 801392c:	460b      	mov	r3, r1
 801392e:	70bb      	strb	r3, [r7, #2]
 8013930:	4613      	mov	r3, r2
 8013932:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013934:	2300      	movs	r3, #0
 8013936:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013938:	2300      	movs	r3, #0
 801393a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8013942:	787c      	ldrb	r4, [r7, #1]
 8013944:	78ba      	ldrb	r2, [r7, #2]
 8013946:	78f9      	ldrb	r1, [r7, #3]
 8013948:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801394c:	9303      	str	r3, [sp, #12]
 801394e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013950:	9302      	str	r3, [sp, #8]
 8013952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013954:	9301      	str	r3, [sp, #4]
 8013956:	f897 3020 	ldrb.w	r3, [r7, #32]
 801395a:	9300      	str	r3, [sp, #0]
 801395c:	4623      	mov	r3, r4
 801395e:	f7f0 fa21 	bl	8003da4 <HAL_HCD_HC_SubmitRequest>
 8013962:	4603      	mov	r3, r0
 8013964:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8013966:	7bfb      	ldrb	r3, [r7, #15]
 8013968:	4618      	mov	r0, r3
 801396a:	f000 f86d 	bl	8013a48 <USBH_Get_USB_Status>
 801396e:	4603      	mov	r3, r0
 8013970:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013972:	7bbb      	ldrb	r3, [r7, #14]
}
 8013974:	4618      	mov	r0, r3
 8013976:	3714      	adds	r7, #20
 8013978:	46bd      	mov	sp, r7
 801397a:	bd90      	pop	{r4, r7, pc}

0801397c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801397c:	b580      	push	{r7, lr}
 801397e:	b082      	sub	sp, #8
 8013980:	af00      	add	r7, sp, #0
 8013982:	6078      	str	r0, [r7, #4]
 8013984:	460b      	mov	r3, r1
 8013986:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801398e:	78fa      	ldrb	r2, [r7, #3]
 8013990:	4611      	mov	r1, r2
 8013992:	4618      	mov	r0, r3
 8013994:	f7f0 fcb5 	bl	8004302 <HAL_HCD_HC_GetURBState>
 8013998:	4603      	mov	r3, r0
}
 801399a:	4618      	mov	r0, r3
 801399c:	3708      	adds	r7, #8
 801399e:	46bd      	mov	sp, r7
 80139a0:	bd80      	pop	{r7, pc}

080139a2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80139a2:	b580      	push	{r7, lr}
 80139a4:	b082      	sub	sp, #8
 80139a6:	af00      	add	r7, sp, #0
 80139a8:	6078      	str	r0, [r7, #4]
 80139aa:	460b      	mov	r3, r1
 80139ac:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80139b4:	2b01      	cmp	r3, #1
 80139b6:	d103      	bne.n	80139c0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80139b8:	78fb      	ldrb	r3, [r7, #3]
 80139ba:	4618      	mov	r0, r3
 80139bc:	f000 f870 	bl	8013aa0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80139c0:	20c8      	movs	r0, #200	; 0xc8
 80139c2:	f7ee ffcb 	bl	800295c <HAL_Delay>
  return USBH_OK;
 80139c6:	2300      	movs	r3, #0
}
 80139c8:	4618      	mov	r0, r3
 80139ca:	3708      	adds	r7, #8
 80139cc:	46bd      	mov	sp, r7
 80139ce:	bd80      	pop	{r7, pc}

080139d0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80139d0:	b480      	push	{r7}
 80139d2:	b085      	sub	sp, #20
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	6078      	str	r0, [r7, #4]
 80139d8:	460b      	mov	r3, r1
 80139da:	70fb      	strb	r3, [r7, #3]
 80139dc:	4613      	mov	r3, r2
 80139de:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80139e6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80139e8:	78fb      	ldrb	r3, [r7, #3]
 80139ea:	68fa      	ldr	r2, [r7, #12]
 80139ec:	212c      	movs	r1, #44	; 0x2c
 80139ee:	fb01 f303 	mul.w	r3, r1, r3
 80139f2:	4413      	add	r3, r2
 80139f4:	333b      	adds	r3, #59	; 0x3b
 80139f6:	781b      	ldrb	r3, [r3, #0]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d009      	beq.n	8013a10 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80139fc:	78fb      	ldrb	r3, [r7, #3]
 80139fe:	68fa      	ldr	r2, [r7, #12]
 8013a00:	212c      	movs	r1, #44	; 0x2c
 8013a02:	fb01 f303 	mul.w	r3, r1, r3
 8013a06:	4413      	add	r3, r2
 8013a08:	3354      	adds	r3, #84	; 0x54
 8013a0a:	78ba      	ldrb	r2, [r7, #2]
 8013a0c:	701a      	strb	r2, [r3, #0]
 8013a0e:	e008      	b.n	8013a22 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8013a10:	78fb      	ldrb	r3, [r7, #3]
 8013a12:	68fa      	ldr	r2, [r7, #12]
 8013a14:	212c      	movs	r1, #44	; 0x2c
 8013a16:	fb01 f303 	mul.w	r3, r1, r3
 8013a1a:	4413      	add	r3, r2
 8013a1c:	3355      	adds	r3, #85	; 0x55
 8013a1e:	78ba      	ldrb	r2, [r7, #2]
 8013a20:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8013a22:	2300      	movs	r3, #0
}
 8013a24:	4618      	mov	r0, r3
 8013a26:	3714      	adds	r7, #20
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a2e:	4770      	bx	lr

08013a30 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8013a30:	b580      	push	{r7, lr}
 8013a32:	b082      	sub	sp, #8
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8013a38:	6878      	ldr	r0, [r7, #4]
 8013a3a:	f7ee ff8f 	bl	800295c <HAL_Delay>
}
 8013a3e:	bf00      	nop
 8013a40:	3708      	adds	r7, #8
 8013a42:	46bd      	mov	sp, r7
 8013a44:	bd80      	pop	{r7, pc}
	...

08013a48 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013a48:	b480      	push	{r7}
 8013a4a:	b085      	sub	sp, #20
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	4603      	mov	r3, r0
 8013a50:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013a52:	2300      	movs	r3, #0
 8013a54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013a56:	79fb      	ldrb	r3, [r7, #7]
 8013a58:	2b03      	cmp	r3, #3
 8013a5a:	d817      	bhi.n	8013a8c <USBH_Get_USB_Status+0x44>
 8013a5c:	a201      	add	r2, pc, #4	; (adr r2, 8013a64 <USBH_Get_USB_Status+0x1c>)
 8013a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a62:	bf00      	nop
 8013a64:	08013a75 	.word	0x08013a75
 8013a68:	08013a7b 	.word	0x08013a7b
 8013a6c:	08013a81 	.word	0x08013a81
 8013a70:	08013a87 	.word	0x08013a87
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8013a74:	2300      	movs	r3, #0
 8013a76:	73fb      	strb	r3, [r7, #15]
    break;
 8013a78:	e00b      	b.n	8013a92 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8013a7a:	2302      	movs	r3, #2
 8013a7c:	73fb      	strb	r3, [r7, #15]
    break;
 8013a7e:	e008      	b.n	8013a92 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8013a80:	2301      	movs	r3, #1
 8013a82:	73fb      	strb	r3, [r7, #15]
    break;
 8013a84:	e005      	b.n	8013a92 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8013a86:	2302      	movs	r3, #2
 8013a88:	73fb      	strb	r3, [r7, #15]
    break;
 8013a8a:	e002      	b.n	8013a92 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8013a8c:	2302      	movs	r3, #2
 8013a8e:	73fb      	strb	r3, [r7, #15]
    break;
 8013a90:	bf00      	nop
  }
  return usb_status;
 8013a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a94:	4618      	mov	r0, r3
 8013a96:	3714      	adds	r7, #20
 8013a98:	46bd      	mov	sp, r7
 8013a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a9e:	4770      	bx	lr

08013aa0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	b084      	sub	sp, #16
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	4603      	mov	r3, r0
 8013aa8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8013aaa:	79fb      	ldrb	r3, [r7, #7]
 8013aac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8013aae:	79fb      	ldrb	r3, [r7, #7]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d102      	bne.n	8013aba <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8013ab4:	2301      	movs	r3, #1
 8013ab6:	73fb      	strb	r3, [r7, #15]
 8013ab8:	e001      	b.n	8013abe <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8013aba:	2300      	movs	r3, #0
 8013abc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,(GPIO_PinState)data);
 8013abe:	7bfb      	ldrb	r3, [r7, #15]
 8013ac0:	461a      	mov	r2, r3
 8013ac2:	2101      	movs	r1, #1
 8013ac4:	4803      	ldr	r0, [pc, #12]	; (8013ad4 <MX_DriverVbusFS+0x34>)
 8013ac6:	f7f0 f83f 	bl	8003b48 <HAL_GPIO_WritePin>
}
 8013aca:	bf00      	nop
 8013acc:	3710      	adds	r7, #16
 8013ace:	46bd      	mov	sp, r7
 8013ad0:	bd80      	pop	{r7, pc}
 8013ad2:	bf00      	nop
 8013ad4:	40020400 	.word	0x40020400

08013ad8 <atol>:
 8013ad8:	220a      	movs	r2, #10
 8013ada:	2100      	movs	r1, #0
 8013adc:	f000 be5e 	b.w	801479c <strtol>

08013ae0 <__errno>:
 8013ae0:	4b01      	ldr	r3, [pc, #4]	; (8013ae8 <__errno+0x8>)
 8013ae2:	6818      	ldr	r0, [r3, #0]
 8013ae4:	4770      	bx	lr
 8013ae6:	bf00      	nop
 8013ae8:	200002b4 	.word	0x200002b4

08013aec <std>:
 8013aec:	2300      	movs	r3, #0
 8013aee:	b510      	push	{r4, lr}
 8013af0:	4604      	mov	r4, r0
 8013af2:	e9c0 3300 	strd	r3, r3, [r0]
 8013af6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013afa:	6083      	str	r3, [r0, #8]
 8013afc:	8181      	strh	r1, [r0, #12]
 8013afe:	6643      	str	r3, [r0, #100]	; 0x64
 8013b00:	81c2      	strh	r2, [r0, #14]
 8013b02:	6183      	str	r3, [r0, #24]
 8013b04:	4619      	mov	r1, r3
 8013b06:	2208      	movs	r2, #8
 8013b08:	305c      	adds	r0, #92	; 0x5c
 8013b0a:	f000 f92d 	bl	8013d68 <memset>
 8013b0e:	4b05      	ldr	r3, [pc, #20]	; (8013b24 <std+0x38>)
 8013b10:	6263      	str	r3, [r4, #36]	; 0x24
 8013b12:	4b05      	ldr	r3, [pc, #20]	; (8013b28 <std+0x3c>)
 8013b14:	62a3      	str	r3, [r4, #40]	; 0x28
 8013b16:	4b05      	ldr	r3, [pc, #20]	; (8013b2c <std+0x40>)
 8013b18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013b1a:	4b05      	ldr	r3, [pc, #20]	; (8013b30 <std+0x44>)
 8013b1c:	6224      	str	r4, [r4, #32]
 8013b1e:	6323      	str	r3, [r4, #48]	; 0x30
 8013b20:	bd10      	pop	{r4, pc}
 8013b22:	bf00      	nop
 8013b24:	08014551 	.word	0x08014551
 8013b28:	08014577 	.word	0x08014577
 8013b2c:	080145af 	.word	0x080145af
 8013b30:	080145d3 	.word	0x080145d3

08013b34 <_cleanup_r>:
 8013b34:	4901      	ldr	r1, [pc, #4]	; (8013b3c <_cleanup_r+0x8>)
 8013b36:	f000 b8af 	b.w	8013c98 <_fwalk_reent>
 8013b3a:	bf00      	nop
 8013b3c:	08014ddd 	.word	0x08014ddd

08013b40 <__sfmoreglue>:
 8013b40:	b570      	push	{r4, r5, r6, lr}
 8013b42:	2268      	movs	r2, #104	; 0x68
 8013b44:	1e4d      	subs	r5, r1, #1
 8013b46:	4355      	muls	r5, r2
 8013b48:	460e      	mov	r6, r1
 8013b4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013b4e:	f000 fbf1 	bl	8014334 <_malloc_r>
 8013b52:	4604      	mov	r4, r0
 8013b54:	b140      	cbz	r0, 8013b68 <__sfmoreglue+0x28>
 8013b56:	2100      	movs	r1, #0
 8013b58:	e9c0 1600 	strd	r1, r6, [r0]
 8013b5c:	300c      	adds	r0, #12
 8013b5e:	60a0      	str	r0, [r4, #8]
 8013b60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013b64:	f000 f900 	bl	8013d68 <memset>
 8013b68:	4620      	mov	r0, r4
 8013b6a:	bd70      	pop	{r4, r5, r6, pc}

08013b6c <__sfp_lock_acquire>:
 8013b6c:	4801      	ldr	r0, [pc, #4]	; (8013b74 <__sfp_lock_acquire+0x8>)
 8013b6e:	f000 b8d9 	b.w	8013d24 <__retarget_lock_acquire_recursive>
 8013b72:	bf00      	nop
 8013b74:	2000cc8a 	.word	0x2000cc8a

08013b78 <__sfp_lock_release>:
 8013b78:	4801      	ldr	r0, [pc, #4]	; (8013b80 <__sfp_lock_release+0x8>)
 8013b7a:	f000 b8d5 	b.w	8013d28 <__retarget_lock_release_recursive>
 8013b7e:	bf00      	nop
 8013b80:	2000cc8a 	.word	0x2000cc8a

08013b84 <__sinit_lock_acquire>:
 8013b84:	4801      	ldr	r0, [pc, #4]	; (8013b8c <__sinit_lock_acquire+0x8>)
 8013b86:	f000 b8cd 	b.w	8013d24 <__retarget_lock_acquire_recursive>
 8013b8a:	bf00      	nop
 8013b8c:	2000cc8b 	.word	0x2000cc8b

08013b90 <__sinit_lock_release>:
 8013b90:	4801      	ldr	r0, [pc, #4]	; (8013b98 <__sinit_lock_release+0x8>)
 8013b92:	f000 b8c9 	b.w	8013d28 <__retarget_lock_release_recursive>
 8013b96:	bf00      	nop
 8013b98:	2000cc8b 	.word	0x2000cc8b

08013b9c <__sinit>:
 8013b9c:	b510      	push	{r4, lr}
 8013b9e:	4604      	mov	r4, r0
 8013ba0:	f7ff fff0 	bl	8013b84 <__sinit_lock_acquire>
 8013ba4:	69a3      	ldr	r3, [r4, #24]
 8013ba6:	b11b      	cbz	r3, 8013bb0 <__sinit+0x14>
 8013ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013bac:	f7ff bff0 	b.w	8013b90 <__sinit_lock_release>
 8013bb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013bb4:	6523      	str	r3, [r4, #80]	; 0x50
 8013bb6:	4b13      	ldr	r3, [pc, #76]	; (8013c04 <__sinit+0x68>)
 8013bb8:	4a13      	ldr	r2, [pc, #76]	; (8013c08 <__sinit+0x6c>)
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	62a2      	str	r2, [r4, #40]	; 0x28
 8013bbe:	42a3      	cmp	r3, r4
 8013bc0:	bf04      	itt	eq
 8013bc2:	2301      	moveq	r3, #1
 8013bc4:	61a3      	streq	r3, [r4, #24]
 8013bc6:	4620      	mov	r0, r4
 8013bc8:	f000 f820 	bl	8013c0c <__sfp>
 8013bcc:	6060      	str	r0, [r4, #4]
 8013bce:	4620      	mov	r0, r4
 8013bd0:	f000 f81c 	bl	8013c0c <__sfp>
 8013bd4:	60a0      	str	r0, [r4, #8]
 8013bd6:	4620      	mov	r0, r4
 8013bd8:	f000 f818 	bl	8013c0c <__sfp>
 8013bdc:	2200      	movs	r2, #0
 8013bde:	60e0      	str	r0, [r4, #12]
 8013be0:	2104      	movs	r1, #4
 8013be2:	6860      	ldr	r0, [r4, #4]
 8013be4:	f7ff ff82 	bl	8013aec <std>
 8013be8:	68a0      	ldr	r0, [r4, #8]
 8013bea:	2201      	movs	r2, #1
 8013bec:	2109      	movs	r1, #9
 8013bee:	f7ff ff7d 	bl	8013aec <std>
 8013bf2:	68e0      	ldr	r0, [r4, #12]
 8013bf4:	2202      	movs	r2, #2
 8013bf6:	2112      	movs	r1, #18
 8013bf8:	f7ff ff78 	bl	8013aec <std>
 8013bfc:	2301      	movs	r3, #1
 8013bfe:	61a3      	str	r3, [r4, #24]
 8013c00:	e7d2      	b.n	8013ba8 <__sinit+0xc>
 8013c02:	bf00      	nop
 8013c04:	08016d00 	.word	0x08016d00
 8013c08:	08013b35 	.word	0x08013b35

08013c0c <__sfp>:
 8013c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c0e:	4607      	mov	r7, r0
 8013c10:	f7ff ffac 	bl	8013b6c <__sfp_lock_acquire>
 8013c14:	4b1e      	ldr	r3, [pc, #120]	; (8013c90 <__sfp+0x84>)
 8013c16:	681e      	ldr	r6, [r3, #0]
 8013c18:	69b3      	ldr	r3, [r6, #24]
 8013c1a:	b913      	cbnz	r3, 8013c22 <__sfp+0x16>
 8013c1c:	4630      	mov	r0, r6
 8013c1e:	f7ff ffbd 	bl	8013b9c <__sinit>
 8013c22:	3648      	adds	r6, #72	; 0x48
 8013c24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013c28:	3b01      	subs	r3, #1
 8013c2a:	d503      	bpl.n	8013c34 <__sfp+0x28>
 8013c2c:	6833      	ldr	r3, [r6, #0]
 8013c2e:	b30b      	cbz	r3, 8013c74 <__sfp+0x68>
 8013c30:	6836      	ldr	r6, [r6, #0]
 8013c32:	e7f7      	b.n	8013c24 <__sfp+0x18>
 8013c34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013c38:	b9d5      	cbnz	r5, 8013c70 <__sfp+0x64>
 8013c3a:	4b16      	ldr	r3, [pc, #88]	; (8013c94 <__sfp+0x88>)
 8013c3c:	60e3      	str	r3, [r4, #12]
 8013c3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013c42:	6665      	str	r5, [r4, #100]	; 0x64
 8013c44:	f000 f86c 	bl	8013d20 <__retarget_lock_init_recursive>
 8013c48:	f7ff ff96 	bl	8013b78 <__sfp_lock_release>
 8013c4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013c50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013c54:	6025      	str	r5, [r4, #0]
 8013c56:	61a5      	str	r5, [r4, #24]
 8013c58:	2208      	movs	r2, #8
 8013c5a:	4629      	mov	r1, r5
 8013c5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013c60:	f000 f882 	bl	8013d68 <memset>
 8013c64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013c68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013c6c:	4620      	mov	r0, r4
 8013c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c70:	3468      	adds	r4, #104	; 0x68
 8013c72:	e7d9      	b.n	8013c28 <__sfp+0x1c>
 8013c74:	2104      	movs	r1, #4
 8013c76:	4638      	mov	r0, r7
 8013c78:	f7ff ff62 	bl	8013b40 <__sfmoreglue>
 8013c7c:	4604      	mov	r4, r0
 8013c7e:	6030      	str	r0, [r6, #0]
 8013c80:	2800      	cmp	r0, #0
 8013c82:	d1d5      	bne.n	8013c30 <__sfp+0x24>
 8013c84:	f7ff ff78 	bl	8013b78 <__sfp_lock_release>
 8013c88:	230c      	movs	r3, #12
 8013c8a:	603b      	str	r3, [r7, #0]
 8013c8c:	e7ee      	b.n	8013c6c <__sfp+0x60>
 8013c8e:	bf00      	nop
 8013c90:	08016d00 	.word	0x08016d00
 8013c94:	ffff0001 	.word	0xffff0001

08013c98 <_fwalk_reent>:
 8013c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c9c:	4606      	mov	r6, r0
 8013c9e:	4688      	mov	r8, r1
 8013ca0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013ca4:	2700      	movs	r7, #0
 8013ca6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013caa:	f1b9 0901 	subs.w	r9, r9, #1
 8013cae:	d505      	bpl.n	8013cbc <_fwalk_reent+0x24>
 8013cb0:	6824      	ldr	r4, [r4, #0]
 8013cb2:	2c00      	cmp	r4, #0
 8013cb4:	d1f7      	bne.n	8013ca6 <_fwalk_reent+0xe>
 8013cb6:	4638      	mov	r0, r7
 8013cb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cbc:	89ab      	ldrh	r3, [r5, #12]
 8013cbe:	2b01      	cmp	r3, #1
 8013cc0:	d907      	bls.n	8013cd2 <_fwalk_reent+0x3a>
 8013cc2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013cc6:	3301      	adds	r3, #1
 8013cc8:	d003      	beq.n	8013cd2 <_fwalk_reent+0x3a>
 8013cca:	4629      	mov	r1, r5
 8013ccc:	4630      	mov	r0, r6
 8013cce:	47c0      	blx	r8
 8013cd0:	4307      	orrs	r7, r0
 8013cd2:	3568      	adds	r5, #104	; 0x68
 8013cd4:	e7e9      	b.n	8013caa <_fwalk_reent+0x12>
	...

08013cd8 <__libc_init_array>:
 8013cd8:	b570      	push	{r4, r5, r6, lr}
 8013cda:	4d0d      	ldr	r5, [pc, #52]	; (8013d10 <__libc_init_array+0x38>)
 8013cdc:	4c0d      	ldr	r4, [pc, #52]	; (8013d14 <__libc_init_array+0x3c>)
 8013cde:	1b64      	subs	r4, r4, r5
 8013ce0:	10a4      	asrs	r4, r4, #2
 8013ce2:	2600      	movs	r6, #0
 8013ce4:	42a6      	cmp	r6, r4
 8013ce6:	d109      	bne.n	8013cfc <__libc_init_array+0x24>
 8013ce8:	4d0b      	ldr	r5, [pc, #44]	; (8013d18 <__libc_init_array+0x40>)
 8013cea:	4c0c      	ldr	r4, [pc, #48]	; (8013d1c <__libc_init_array+0x44>)
 8013cec:	f002 fbd4 	bl	8016498 <_init>
 8013cf0:	1b64      	subs	r4, r4, r5
 8013cf2:	10a4      	asrs	r4, r4, #2
 8013cf4:	2600      	movs	r6, #0
 8013cf6:	42a6      	cmp	r6, r4
 8013cf8:	d105      	bne.n	8013d06 <__libc_init_array+0x2e>
 8013cfa:	bd70      	pop	{r4, r5, r6, pc}
 8013cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8013d00:	4798      	blx	r3
 8013d02:	3601      	adds	r6, #1
 8013d04:	e7ee      	b.n	8013ce4 <__libc_init_array+0xc>
 8013d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8013d0a:	4798      	blx	r3
 8013d0c:	3601      	adds	r6, #1
 8013d0e:	e7f2      	b.n	8013cf6 <__libc_init_array+0x1e>
 8013d10:	0801700c 	.word	0x0801700c
 8013d14:	0801700c 	.word	0x0801700c
 8013d18:	0801700c 	.word	0x0801700c
 8013d1c:	08017010 	.word	0x08017010

08013d20 <__retarget_lock_init_recursive>:
 8013d20:	4770      	bx	lr

08013d22 <__retarget_lock_acquire>:
 8013d22:	4770      	bx	lr

08013d24 <__retarget_lock_acquire_recursive>:
 8013d24:	4770      	bx	lr

08013d26 <__retarget_lock_release>:
 8013d26:	4770      	bx	lr

08013d28 <__retarget_lock_release_recursive>:
 8013d28:	4770      	bx	lr
	...

08013d2c <malloc>:
 8013d2c:	4b02      	ldr	r3, [pc, #8]	; (8013d38 <malloc+0xc>)
 8013d2e:	4601      	mov	r1, r0
 8013d30:	6818      	ldr	r0, [r3, #0]
 8013d32:	f000 baff 	b.w	8014334 <_malloc_r>
 8013d36:	bf00      	nop
 8013d38:	200002b4 	.word	0x200002b4

08013d3c <free>:
 8013d3c:	4b02      	ldr	r3, [pc, #8]	; (8013d48 <free+0xc>)
 8013d3e:	4601      	mov	r1, r0
 8013d40:	6818      	ldr	r0, [r3, #0]
 8013d42:	f000 ba8b 	b.w	801425c <_free_r>
 8013d46:	bf00      	nop
 8013d48:	200002b4 	.word	0x200002b4

08013d4c <memcpy>:
 8013d4c:	440a      	add	r2, r1
 8013d4e:	4291      	cmp	r1, r2
 8013d50:	f100 33ff 	add.w	r3, r0, #4294967295
 8013d54:	d100      	bne.n	8013d58 <memcpy+0xc>
 8013d56:	4770      	bx	lr
 8013d58:	b510      	push	{r4, lr}
 8013d5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013d5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013d62:	4291      	cmp	r1, r2
 8013d64:	d1f9      	bne.n	8013d5a <memcpy+0xe>
 8013d66:	bd10      	pop	{r4, pc}

08013d68 <memset>:
 8013d68:	4402      	add	r2, r0
 8013d6a:	4603      	mov	r3, r0
 8013d6c:	4293      	cmp	r3, r2
 8013d6e:	d100      	bne.n	8013d72 <memset+0xa>
 8013d70:	4770      	bx	lr
 8013d72:	f803 1b01 	strb.w	r1, [r3], #1
 8013d76:	e7f9      	b.n	8013d6c <memset+0x4>

08013d78 <validate_structure>:
 8013d78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013d7a:	6801      	ldr	r1, [r0, #0]
 8013d7c:	293b      	cmp	r1, #59	; 0x3b
 8013d7e:	4604      	mov	r4, r0
 8013d80:	d911      	bls.n	8013da6 <validate_structure+0x2e>
 8013d82:	223c      	movs	r2, #60	; 0x3c
 8013d84:	4668      	mov	r0, sp
 8013d86:	f000 ff8f 	bl	8014ca8 <div>
 8013d8a:	9a01      	ldr	r2, [sp, #4]
 8013d8c:	6863      	ldr	r3, [r4, #4]
 8013d8e:	9900      	ldr	r1, [sp, #0]
 8013d90:	2a00      	cmp	r2, #0
 8013d92:	440b      	add	r3, r1
 8013d94:	6063      	str	r3, [r4, #4]
 8013d96:	bfbb      	ittet	lt
 8013d98:	323c      	addlt	r2, #60	; 0x3c
 8013d9a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8013d9e:	6022      	strge	r2, [r4, #0]
 8013da0:	6022      	strlt	r2, [r4, #0]
 8013da2:	bfb8      	it	lt
 8013da4:	6063      	strlt	r3, [r4, #4]
 8013da6:	6861      	ldr	r1, [r4, #4]
 8013da8:	293b      	cmp	r1, #59	; 0x3b
 8013daa:	d911      	bls.n	8013dd0 <validate_structure+0x58>
 8013dac:	223c      	movs	r2, #60	; 0x3c
 8013dae:	4668      	mov	r0, sp
 8013db0:	f000 ff7a 	bl	8014ca8 <div>
 8013db4:	9a01      	ldr	r2, [sp, #4]
 8013db6:	68a3      	ldr	r3, [r4, #8]
 8013db8:	9900      	ldr	r1, [sp, #0]
 8013dba:	2a00      	cmp	r2, #0
 8013dbc:	440b      	add	r3, r1
 8013dbe:	60a3      	str	r3, [r4, #8]
 8013dc0:	bfbb      	ittet	lt
 8013dc2:	323c      	addlt	r2, #60	; 0x3c
 8013dc4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8013dc8:	6062      	strge	r2, [r4, #4]
 8013dca:	6062      	strlt	r2, [r4, #4]
 8013dcc:	bfb8      	it	lt
 8013dce:	60a3      	strlt	r3, [r4, #8]
 8013dd0:	68a1      	ldr	r1, [r4, #8]
 8013dd2:	2917      	cmp	r1, #23
 8013dd4:	d911      	bls.n	8013dfa <validate_structure+0x82>
 8013dd6:	2218      	movs	r2, #24
 8013dd8:	4668      	mov	r0, sp
 8013dda:	f000 ff65 	bl	8014ca8 <div>
 8013dde:	9a01      	ldr	r2, [sp, #4]
 8013de0:	68e3      	ldr	r3, [r4, #12]
 8013de2:	9900      	ldr	r1, [sp, #0]
 8013de4:	2a00      	cmp	r2, #0
 8013de6:	440b      	add	r3, r1
 8013de8:	60e3      	str	r3, [r4, #12]
 8013dea:	bfbb      	ittet	lt
 8013dec:	3218      	addlt	r2, #24
 8013dee:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8013df2:	60a2      	strge	r2, [r4, #8]
 8013df4:	60a2      	strlt	r2, [r4, #8]
 8013df6:	bfb8      	it	lt
 8013df8:	60e3      	strlt	r3, [r4, #12]
 8013dfa:	6921      	ldr	r1, [r4, #16]
 8013dfc:	290b      	cmp	r1, #11
 8013dfe:	d911      	bls.n	8013e24 <validate_structure+0xac>
 8013e00:	220c      	movs	r2, #12
 8013e02:	4668      	mov	r0, sp
 8013e04:	f000 ff50 	bl	8014ca8 <div>
 8013e08:	9a01      	ldr	r2, [sp, #4]
 8013e0a:	6963      	ldr	r3, [r4, #20]
 8013e0c:	9900      	ldr	r1, [sp, #0]
 8013e0e:	2a00      	cmp	r2, #0
 8013e10:	440b      	add	r3, r1
 8013e12:	6163      	str	r3, [r4, #20]
 8013e14:	bfbb      	ittet	lt
 8013e16:	320c      	addlt	r2, #12
 8013e18:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8013e1c:	6122      	strge	r2, [r4, #16]
 8013e1e:	6122      	strlt	r2, [r4, #16]
 8013e20:	bfb8      	it	lt
 8013e22:	6163      	strlt	r3, [r4, #20]
 8013e24:	6963      	ldr	r3, [r4, #20]
 8013e26:	0798      	lsls	r0, r3, #30
 8013e28:	d120      	bne.n	8013e6c <validate_structure+0xf4>
 8013e2a:	2164      	movs	r1, #100	; 0x64
 8013e2c:	fb93 f2f1 	sdiv	r2, r3, r1
 8013e30:	fb01 3212 	mls	r2, r1, r2, r3
 8013e34:	b9e2      	cbnz	r2, 8013e70 <validate_structure+0xf8>
 8013e36:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8013e3a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8013e3e:	fb93 f1f2 	sdiv	r1, r3, r2
 8013e42:	fb02 3311 	mls	r3, r2, r1, r3
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	bf14      	ite	ne
 8013e4a:	231c      	movne	r3, #28
 8013e4c:	231d      	moveq	r3, #29
 8013e4e:	68e2      	ldr	r2, [r4, #12]
 8013e50:	2a00      	cmp	r2, #0
 8013e52:	dc0f      	bgt.n	8013e74 <validate_structure+0xfc>
 8013e54:	4f33      	ldr	r7, [pc, #204]	; (8013f24 <validate_structure+0x1ac>)
 8013e56:	260b      	movs	r6, #11
 8013e58:	2064      	movs	r0, #100	; 0x64
 8013e5a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8013e5e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8013e62:	f1bc 0f00 	cmp.w	ip, #0
 8013e66:	dd31      	ble.n	8013ecc <validate_structure+0x154>
 8013e68:	b003      	add	sp, #12
 8013e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e6c:	231c      	movs	r3, #28
 8013e6e:	e7ee      	b.n	8013e4e <validate_structure+0xd6>
 8013e70:	231d      	movs	r3, #29
 8013e72:	e7ec      	b.n	8013e4e <validate_structure+0xd6>
 8013e74:	4e2b      	ldr	r6, [pc, #172]	; (8013f24 <validate_structure+0x1ac>)
 8013e76:	2700      	movs	r7, #0
 8013e78:	2064      	movs	r0, #100	; 0x64
 8013e7a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8013e7e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8013e82:	2a01      	cmp	r2, #1
 8013e84:	bf14      	ite	ne
 8013e86:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 8013e8a:	469c      	moveq	ip, r3
 8013e8c:	4561      	cmp	r1, ip
 8013e8e:	ddeb      	ble.n	8013e68 <validate_structure+0xf0>
 8013e90:	3201      	adds	r2, #1
 8013e92:	eba1 010c 	sub.w	r1, r1, ip
 8013e96:	2a0c      	cmp	r2, #12
 8013e98:	60e1      	str	r1, [r4, #12]
 8013e9a:	6122      	str	r2, [r4, #16]
 8013e9c:	d1ef      	bne.n	8013e7e <validate_structure+0x106>
 8013e9e:	6963      	ldr	r3, [r4, #20]
 8013ea0:	1c5a      	adds	r2, r3, #1
 8013ea2:	0791      	lsls	r1, r2, #30
 8013ea4:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8013ea8:	d137      	bne.n	8013f1a <validate_structure+0x1a2>
 8013eaa:	fb92 f1f0 	sdiv	r1, r2, r0
 8013eae:	fb00 2211 	mls	r2, r0, r1, r2
 8013eb2:	2a00      	cmp	r2, #0
 8013eb4:	d133      	bne.n	8013f1e <validate_structure+0x1a6>
 8013eb6:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8013eba:	fb93 f2f5 	sdiv	r2, r3, r5
 8013ebe:	fb05 3312 	mls	r3, r5, r2, r3
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	bf14      	ite	ne
 8013ec6:	231c      	movne	r3, #28
 8013ec8:	231d      	moveq	r3, #29
 8013eca:	e7d8      	b.n	8013e7e <validate_structure+0x106>
 8013ecc:	6921      	ldr	r1, [r4, #16]
 8013ece:	3901      	subs	r1, #1
 8013ed0:	6121      	str	r1, [r4, #16]
 8013ed2:	3101      	adds	r1, #1
 8013ed4:	d114      	bne.n	8013f00 <validate_structure+0x188>
 8013ed6:	6963      	ldr	r3, [r4, #20]
 8013ed8:	1e5a      	subs	r2, r3, #1
 8013eda:	0791      	lsls	r1, r2, #30
 8013edc:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8013ee0:	d117      	bne.n	8013f12 <validate_structure+0x19a>
 8013ee2:	fb92 f1f0 	sdiv	r1, r2, r0
 8013ee6:	fb00 2211 	mls	r2, r0, r1, r2
 8013eea:	b9a2      	cbnz	r2, 8013f16 <validate_structure+0x19e>
 8013eec:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8013ef0:	fb93 f2f5 	sdiv	r2, r3, r5
 8013ef4:	fb05 3312 	mls	r3, r5, r2, r3
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	bf14      	ite	ne
 8013efc:	231c      	movne	r3, #28
 8013efe:	231d      	moveq	r3, #29
 8013f00:	6922      	ldr	r2, [r4, #16]
 8013f02:	2a01      	cmp	r2, #1
 8013f04:	bf14      	ite	ne
 8013f06:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8013f0a:	461a      	moveq	r2, r3
 8013f0c:	4462      	add	r2, ip
 8013f0e:	60e2      	str	r2, [r4, #12]
 8013f10:	e7a5      	b.n	8013e5e <validate_structure+0xe6>
 8013f12:	231c      	movs	r3, #28
 8013f14:	e7f4      	b.n	8013f00 <validate_structure+0x188>
 8013f16:	231d      	movs	r3, #29
 8013f18:	e7f2      	b.n	8013f00 <validate_structure+0x188>
 8013f1a:	231c      	movs	r3, #28
 8013f1c:	e7af      	b.n	8013e7e <validate_structure+0x106>
 8013f1e:	231d      	movs	r3, #29
 8013f20:	e7ad      	b.n	8013e7e <validate_structure+0x106>
 8013f22:	bf00      	nop
 8013f24:	08016d04 	.word	0x08016d04

08013f28 <mktime>:
 8013f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f2c:	b085      	sub	sp, #20
 8013f2e:	4607      	mov	r7, r0
 8013f30:	f000 ffe6 	bl	8014f00 <__gettzinfo>
 8013f34:	4681      	mov	r9, r0
 8013f36:	4638      	mov	r0, r7
 8013f38:	f7ff ff1e 	bl	8013d78 <validate_structure>
 8013f3c:	e9d7 4000 	ldrd	r4, r0, [r7]
 8013f40:	233c      	movs	r3, #60	; 0x3c
 8013f42:	fb03 4400 	mla	r4, r3, r0, r4
 8013f46:	68b8      	ldr	r0, [r7, #8]
 8013f48:	4abc      	ldr	r2, [pc, #752]	; (801423c <mktime+0x314>)
 8013f4a:	697e      	ldr	r6, [r7, #20]
 8013f4c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8013f50:	fb03 4400 	mla	r4, r3, r0, r4
 8013f54:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8013f58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8013f5c:	3d01      	subs	r5, #1
 8013f5e:	2b01      	cmp	r3, #1
 8013f60:	4415      	add	r5, r2
 8013f62:	dd11      	ble.n	8013f88 <mktime+0x60>
 8013f64:	07b1      	lsls	r1, r6, #30
 8013f66:	d10f      	bne.n	8013f88 <mktime+0x60>
 8013f68:	2264      	movs	r2, #100	; 0x64
 8013f6a:	fb96 f3f2 	sdiv	r3, r6, r2
 8013f6e:	fb02 6313 	mls	r3, r2, r3, r6
 8013f72:	b943      	cbnz	r3, 8013f86 <mktime+0x5e>
 8013f74:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8013f78:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8013f7c:	fb93 f1f2 	sdiv	r1, r3, r2
 8013f80:	fb02 3311 	mls	r3, r2, r1, r3
 8013f84:	b903      	cbnz	r3, 8013f88 <mktime+0x60>
 8013f86:	3501      	adds	r5, #1
 8013f88:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8013f8c:	3310      	adds	r3, #16
 8013f8e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8013f92:	4293      	cmp	r3, r2
 8013f94:	61fd      	str	r5, [r7, #28]
 8013f96:	f200 815d 	bhi.w	8014254 <mktime+0x32c>
 8013f9a:	2e46      	cmp	r6, #70	; 0x46
 8013f9c:	dd71      	ble.n	8014082 <mktime+0x15a>
 8013f9e:	2346      	movs	r3, #70	; 0x46
 8013fa0:	f240 1c6d 	movw	ip, #365	; 0x16d
 8013fa4:	2164      	movs	r1, #100	; 0x64
 8013fa6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8013faa:	079a      	lsls	r2, r3, #30
 8013fac:	d163      	bne.n	8014076 <mktime+0x14e>
 8013fae:	fb93 f2f1 	sdiv	r2, r3, r1
 8013fb2:	fb01 3212 	mls	r2, r1, r2, r3
 8013fb6:	2a00      	cmp	r2, #0
 8013fb8:	d160      	bne.n	801407c <mktime+0x154>
 8013fba:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8013fbe:	fb92 fef0 	sdiv	lr, r2, r0
 8013fc2:	fb00 221e 	mls	r2, r0, lr, r2
 8013fc6:	2a00      	cmp	r2, #0
 8013fc8:	bf14      	ite	ne
 8013fca:	4662      	movne	r2, ip
 8013fcc:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8013fd0:	3301      	adds	r3, #1
 8013fd2:	429e      	cmp	r6, r3
 8013fd4:	4415      	add	r5, r2
 8013fd6:	d1e8      	bne.n	8013faa <mktime+0x82>
 8013fd8:	4b99      	ldr	r3, [pc, #612]	; (8014240 <mktime+0x318>)
 8013fda:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8013fde:	fbc5 4803 	smlal	r4, r8, r5, r3
 8013fe2:	f000 fc8f 	bl	8014904 <__tz_lock>
 8013fe6:	f000 fc99 	bl	801491c <_tzset_unlocked>
 8013fea:	4b96      	ldr	r3, [pc, #600]	; (8014244 <mktime+0x31c>)
 8013fec:	f8d3 b000 	ldr.w	fp, [r3]
 8013ff0:	f1bb 0f00 	cmp.w	fp, #0
 8013ff4:	d039      	beq.n	801406a <mktime+0x142>
 8013ff6:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8013ffa:	6978      	ldr	r0, [r7, #20]
 8013ffc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014000:	f1bb 0f01 	cmp.w	fp, #1
 8014004:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8014008:	46da      	mov	sl, fp
 801400a:	bfa8      	it	ge
 801400c:	f04f 0a01 	movge.w	sl, #1
 8014010:	4283      	cmp	r3, r0
 8014012:	d178      	bne.n	8014106 <mktime+0x1de>
 8014014:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8014018:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 801401c:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 8014020:	1a5b      	subs	r3, r3, r1
 8014022:	9302      	str	r3, [sp, #8]
 8014024:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8014028:	9303      	str	r3, [sp, #12]
 801402a:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 801402e:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8014032:	9301      	str	r3, [sp, #4]
 8014034:	ebb3 0c02 	subs.w	ip, r3, r2
 8014038:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 801403c:	4564      	cmp	r4, ip
 801403e:	eb78 0300 	sbcs.w	r3, r8, r0
 8014042:	da66      	bge.n	8014112 <mktime+0x1ea>
 8014044:	f8d9 3000 	ldr.w	r3, [r9]
 8014048:	2b00      	cmp	r3, #0
 801404a:	d06f      	beq.n	801412c <mktime+0x204>
 801404c:	9b02      	ldr	r3, [sp, #8]
 801404e:	429c      	cmp	r4, r3
 8014050:	9b03      	ldr	r3, [sp, #12]
 8014052:	eb78 0303 	sbcs.w	r3, r8, r3
 8014056:	db03      	blt.n	8014060 <mktime+0x138>
 8014058:	4564      	cmp	r4, ip
 801405a:	eb78 0300 	sbcs.w	r3, r8, r0
 801405e:	db6b      	blt.n	8014138 <mktime+0x210>
 8014060:	f1bb 0f00 	cmp.w	fp, #0
 8014064:	f04f 0b00 	mov.w	fp, #0
 8014068:	da6b      	bge.n	8014142 <mktime+0x21a>
 801406a:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 801406e:	190c      	adds	r4, r1, r4
 8014070:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8014074:	e0a9      	b.n	80141ca <mktime+0x2a2>
 8014076:	f240 126d 	movw	r2, #365	; 0x16d
 801407a:	e7a9      	b.n	8013fd0 <mktime+0xa8>
 801407c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8014080:	e7a6      	b.n	8013fd0 <mktime+0xa8>
 8014082:	d0a9      	beq.n	8013fd8 <mktime+0xb0>
 8014084:	2345      	movs	r3, #69	; 0x45
 8014086:	f240 1c6d 	movw	ip, #365	; 0x16d
 801408a:	2164      	movs	r1, #100	; 0x64
 801408c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8014090:	e012      	b.n	80140b8 <mktime+0x190>
 8014092:	bb62      	cbnz	r2, 80140ee <mktime+0x1c6>
 8014094:	fb93 f2f1 	sdiv	r2, r3, r1
 8014098:	fb01 3212 	mls	r2, r1, r2, r3
 801409c:	bb52      	cbnz	r2, 80140f4 <mktime+0x1cc>
 801409e:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 80140a2:	fb92 fef0 	sdiv	lr, r2, r0
 80140a6:	fb00 221e 	mls	r2, r0, lr, r2
 80140aa:	2a00      	cmp	r2, #0
 80140ac:	bf14      	ite	ne
 80140ae:	4662      	movne	r2, ip
 80140b0:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80140b4:	1aad      	subs	r5, r5, r2
 80140b6:	3b01      	subs	r3, #1
 80140b8:	429e      	cmp	r6, r3
 80140ba:	f003 0203 	and.w	r2, r3, #3
 80140be:	dbe8      	blt.n	8014092 <mktime+0x16a>
 80140c0:	b9da      	cbnz	r2, 80140fa <mktime+0x1d2>
 80140c2:	2264      	movs	r2, #100	; 0x64
 80140c4:	fb96 f3f2 	sdiv	r3, r6, r2
 80140c8:	fb02 6313 	mls	r3, r2, r3, r6
 80140cc:	b9c3      	cbnz	r3, 8014100 <mktime+0x1d8>
 80140ce:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 80140d2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80140d6:	fb93 f1f2 	sdiv	r1, r3, r2
 80140da:	fb02 3311 	mls	r3, r2, r1, r3
 80140de:	2b00      	cmp	r3, #0
 80140e0:	f240 136d 	movw	r3, #365	; 0x16d
 80140e4:	bf08      	it	eq
 80140e6:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 80140ea:	1aed      	subs	r5, r5, r3
 80140ec:	e774      	b.n	8013fd8 <mktime+0xb0>
 80140ee:	f240 126d 	movw	r2, #365	; 0x16d
 80140f2:	e7df      	b.n	80140b4 <mktime+0x18c>
 80140f4:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80140f8:	e7dc      	b.n	80140b4 <mktime+0x18c>
 80140fa:	f240 136d 	movw	r3, #365	; 0x16d
 80140fe:	e7f4      	b.n	80140ea <mktime+0x1c2>
 8014100:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8014104:	e7f1      	b.n	80140ea <mktime+0x1c2>
 8014106:	f000 fb53 	bl	80147b0 <__tzcalc_limits>
 801410a:	2800      	cmp	r0, #0
 801410c:	d182      	bne.n	8014014 <mktime+0xec>
 801410e:	46d3      	mov	fp, sl
 8014110:	e050      	b.n	80141b4 <mktime+0x28c>
 8014112:	9b01      	ldr	r3, [sp, #4]
 8014114:	1a5b      	subs	r3, r3, r1
 8014116:	9301      	str	r3, [sp, #4]
 8014118:	ea4f 73e1 	mov.w	r3, r1, asr #31
 801411c:	eb6e 0e03 	sbc.w	lr, lr, r3
 8014120:	9b01      	ldr	r3, [sp, #4]
 8014122:	429c      	cmp	r4, r3
 8014124:	eb78 030e 	sbcs.w	r3, r8, lr
 8014128:	dbf1      	blt.n	801410e <mktime+0x1e6>
 801412a:	e78b      	b.n	8014044 <mktime+0x11c>
 801412c:	9b02      	ldr	r3, [sp, #8]
 801412e:	429c      	cmp	r4, r3
 8014130:	9b03      	ldr	r3, [sp, #12]
 8014132:	eb78 0303 	sbcs.w	r3, r8, r3
 8014136:	db8f      	blt.n	8014058 <mktime+0x130>
 8014138:	f1bb 0f00 	cmp.w	fp, #0
 801413c:	db3e      	blt.n	80141bc <mktime+0x294>
 801413e:	f04f 0b01 	mov.w	fp, #1
 8014142:	ea8a 0a0b 	eor.w	sl, sl, fp
 8014146:	f1ba 0f01 	cmp.w	sl, #1
 801414a:	d133      	bne.n	80141b4 <mktime+0x28c>
 801414c:	f1bb 0f00 	cmp.w	fp, #0
 8014150:	d04e      	beq.n	80141f0 <mktime+0x2c8>
 8014152:	1a52      	subs	r2, r2, r1
 8014154:	683b      	ldr	r3, [r7, #0]
 8014156:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 801415a:	4413      	add	r3, r2
 801415c:	1914      	adds	r4, r2, r4
 801415e:	603b      	str	r3, [r7, #0]
 8014160:	4638      	mov	r0, r7
 8014162:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 8014166:	f7ff fe07 	bl	8013d78 <validate_structure>
 801416a:	68fa      	ldr	r2, [r7, #12]
 801416c:	ebb2 020a 	subs.w	r2, r2, sl
 8014170:	d020      	beq.n	80141b4 <mktime+0x28c>
 8014172:	2a01      	cmp	r2, #1
 8014174:	dc3e      	bgt.n	80141f4 <mktime+0x2cc>
 8014176:	1c90      	adds	r0, r2, #2
 8014178:	bfd8      	it	le
 801417a:	2201      	movle	r2, #1
 801417c:	69fb      	ldr	r3, [r7, #28]
 801417e:	18d3      	adds	r3, r2, r3
 8014180:	4415      	add	r5, r2
 8014182:	d540      	bpl.n	8014206 <mktime+0x2de>
 8014184:	1e73      	subs	r3, r6, #1
 8014186:	0799      	lsls	r1, r3, #30
 8014188:	d137      	bne.n	80141fa <mktime+0x2d2>
 801418a:	2264      	movs	r2, #100	; 0x64
 801418c:	fb93 f1f2 	sdiv	r1, r3, r2
 8014190:	fb02 3311 	mls	r3, r2, r1, r3
 8014194:	bba3      	cbnz	r3, 8014200 <mktime+0x2d8>
 8014196:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801419a:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 801419e:	fb96 f2f3 	sdiv	r2, r6, r3
 80141a2:	fb03 6612 	mls	r6, r3, r2, r6
 80141a6:	2e00      	cmp	r6, #0
 80141a8:	f240 136d 	movw	r3, #365	; 0x16d
 80141ac:	bf18      	it	ne
 80141ae:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 80141b2:	61fb      	str	r3, [r7, #28]
 80141b4:	f1bb 0f01 	cmp.w	fp, #1
 80141b8:	f47f af57 	bne.w	801406a <mktime+0x142>
 80141bc:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 80141c0:	190c      	adds	r4, r1, r4
 80141c2:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 80141c6:	f04f 0b01 	mov.w	fp, #1
 80141ca:	f000 fba1 	bl	8014910 <__tz_unlock>
 80141ce:	3504      	adds	r5, #4
 80141d0:	2307      	movs	r3, #7
 80141d2:	fb95 f3f3 	sdiv	r3, r5, r3
 80141d6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80141da:	1aed      	subs	r5, r5, r3
 80141dc:	bf48      	it	mi
 80141de:	3507      	addmi	r5, #7
 80141e0:	f8c7 b020 	str.w	fp, [r7, #32]
 80141e4:	61bd      	str	r5, [r7, #24]
 80141e6:	4620      	mov	r0, r4
 80141e8:	4641      	mov	r1, r8
 80141ea:	b005      	add	sp, #20
 80141ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141f0:	1a8a      	subs	r2, r1, r2
 80141f2:	e7af      	b.n	8014154 <mktime+0x22c>
 80141f4:	f04f 32ff 	mov.w	r2, #4294967295
 80141f8:	e7c0      	b.n	801417c <mktime+0x254>
 80141fa:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80141fe:	e7d8      	b.n	80141b2 <mktime+0x28a>
 8014200:	f240 136d 	movw	r3, #365	; 0x16d
 8014204:	e7d5      	b.n	80141b2 <mktime+0x28a>
 8014206:	07b2      	lsls	r2, r6, #30
 8014208:	d11e      	bne.n	8014248 <mktime+0x320>
 801420a:	2164      	movs	r1, #100	; 0x64
 801420c:	fb96 f2f1 	sdiv	r2, r6, r1
 8014210:	fb01 6212 	mls	r2, r1, r2, r6
 8014214:	b9da      	cbnz	r2, 801424e <mktime+0x326>
 8014216:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801421a:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 801421e:	fb96 f1f2 	sdiv	r1, r6, r2
 8014222:	fb02 6611 	mls	r6, r2, r1, r6
 8014226:	2e00      	cmp	r6, #0
 8014228:	f240 126d 	movw	r2, #365	; 0x16d
 801422c:	bf08      	it	eq
 801422e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8014232:	4293      	cmp	r3, r2
 8014234:	bfa8      	it	ge
 8014236:	1a9b      	subge	r3, r3, r2
 8014238:	e7bb      	b.n	80141b2 <mktime+0x28a>
 801423a:	bf00      	nop
 801423c:	08016d34 	.word	0x08016d34
 8014240:	00015180 	.word	0x00015180
 8014244:	2000ccb8 	.word	0x2000ccb8
 8014248:	f240 126d 	movw	r2, #365	; 0x16d
 801424c:	e7f1      	b.n	8014232 <mktime+0x30a>
 801424e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8014252:	e7ee      	b.n	8014232 <mktime+0x30a>
 8014254:	f04f 34ff 	mov.w	r4, #4294967295
 8014258:	46a0      	mov	r8, r4
 801425a:	e7c4      	b.n	80141e6 <mktime+0x2be>

0801425c <_free_r>:
 801425c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801425e:	2900      	cmp	r1, #0
 8014260:	d044      	beq.n	80142ec <_free_r+0x90>
 8014262:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014266:	9001      	str	r0, [sp, #4]
 8014268:	2b00      	cmp	r3, #0
 801426a:	f1a1 0404 	sub.w	r4, r1, #4
 801426e:	bfb8      	it	lt
 8014270:	18e4      	addlt	r4, r4, r3
 8014272:	f000 fe5b 	bl	8014f2c <__malloc_lock>
 8014276:	4a1e      	ldr	r2, [pc, #120]	; (80142f0 <_free_r+0x94>)
 8014278:	9801      	ldr	r0, [sp, #4]
 801427a:	6813      	ldr	r3, [r2, #0]
 801427c:	b933      	cbnz	r3, 801428c <_free_r+0x30>
 801427e:	6063      	str	r3, [r4, #4]
 8014280:	6014      	str	r4, [r2, #0]
 8014282:	b003      	add	sp, #12
 8014284:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014288:	f000 be56 	b.w	8014f38 <__malloc_unlock>
 801428c:	42a3      	cmp	r3, r4
 801428e:	d908      	bls.n	80142a2 <_free_r+0x46>
 8014290:	6825      	ldr	r5, [r4, #0]
 8014292:	1961      	adds	r1, r4, r5
 8014294:	428b      	cmp	r3, r1
 8014296:	bf01      	itttt	eq
 8014298:	6819      	ldreq	r1, [r3, #0]
 801429a:	685b      	ldreq	r3, [r3, #4]
 801429c:	1949      	addeq	r1, r1, r5
 801429e:	6021      	streq	r1, [r4, #0]
 80142a0:	e7ed      	b.n	801427e <_free_r+0x22>
 80142a2:	461a      	mov	r2, r3
 80142a4:	685b      	ldr	r3, [r3, #4]
 80142a6:	b10b      	cbz	r3, 80142ac <_free_r+0x50>
 80142a8:	42a3      	cmp	r3, r4
 80142aa:	d9fa      	bls.n	80142a2 <_free_r+0x46>
 80142ac:	6811      	ldr	r1, [r2, #0]
 80142ae:	1855      	adds	r5, r2, r1
 80142b0:	42a5      	cmp	r5, r4
 80142b2:	d10b      	bne.n	80142cc <_free_r+0x70>
 80142b4:	6824      	ldr	r4, [r4, #0]
 80142b6:	4421      	add	r1, r4
 80142b8:	1854      	adds	r4, r2, r1
 80142ba:	42a3      	cmp	r3, r4
 80142bc:	6011      	str	r1, [r2, #0]
 80142be:	d1e0      	bne.n	8014282 <_free_r+0x26>
 80142c0:	681c      	ldr	r4, [r3, #0]
 80142c2:	685b      	ldr	r3, [r3, #4]
 80142c4:	6053      	str	r3, [r2, #4]
 80142c6:	4421      	add	r1, r4
 80142c8:	6011      	str	r1, [r2, #0]
 80142ca:	e7da      	b.n	8014282 <_free_r+0x26>
 80142cc:	d902      	bls.n	80142d4 <_free_r+0x78>
 80142ce:	230c      	movs	r3, #12
 80142d0:	6003      	str	r3, [r0, #0]
 80142d2:	e7d6      	b.n	8014282 <_free_r+0x26>
 80142d4:	6825      	ldr	r5, [r4, #0]
 80142d6:	1961      	adds	r1, r4, r5
 80142d8:	428b      	cmp	r3, r1
 80142da:	bf04      	itt	eq
 80142dc:	6819      	ldreq	r1, [r3, #0]
 80142de:	685b      	ldreq	r3, [r3, #4]
 80142e0:	6063      	str	r3, [r4, #4]
 80142e2:	bf04      	itt	eq
 80142e4:	1949      	addeq	r1, r1, r5
 80142e6:	6021      	streq	r1, [r4, #0]
 80142e8:	6054      	str	r4, [r2, #4]
 80142ea:	e7ca      	b.n	8014282 <_free_r+0x26>
 80142ec:	b003      	add	sp, #12
 80142ee:	bd30      	pop	{r4, r5, pc}
 80142f0:	2000cc90 	.word	0x2000cc90

080142f4 <sbrk_aligned>:
 80142f4:	b570      	push	{r4, r5, r6, lr}
 80142f6:	4e0e      	ldr	r6, [pc, #56]	; (8014330 <sbrk_aligned+0x3c>)
 80142f8:	460c      	mov	r4, r1
 80142fa:	6831      	ldr	r1, [r6, #0]
 80142fc:	4605      	mov	r5, r0
 80142fe:	b911      	cbnz	r1, 8014306 <sbrk_aligned+0x12>
 8014300:	f000 f8f6 	bl	80144f0 <_sbrk_r>
 8014304:	6030      	str	r0, [r6, #0]
 8014306:	4621      	mov	r1, r4
 8014308:	4628      	mov	r0, r5
 801430a:	f000 f8f1 	bl	80144f0 <_sbrk_r>
 801430e:	1c43      	adds	r3, r0, #1
 8014310:	d00a      	beq.n	8014328 <sbrk_aligned+0x34>
 8014312:	1cc4      	adds	r4, r0, #3
 8014314:	f024 0403 	bic.w	r4, r4, #3
 8014318:	42a0      	cmp	r0, r4
 801431a:	d007      	beq.n	801432c <sbrk_aligned+0x38>
 801431c:	1a21      	subs	r1, r4, r0
 801431e:	4628      	mov	r0, r5
 8014320:	f000 f8e6 	bl	80144f0 <_sbrk_r>
 8014324:	3001      	adds	r0, #1
 8014326:	d101      	bne.n	801432c <sbrk_aligned+0x38>
 8014328:	f04f 34ff 	mov.w	r4, #4294967295
 801432c:	4620      	mov	r0, r4
 801432e:	bd70      	pop	{r4, r5, r6, pc}
 8014330:	2000cc94 	.word	0x2000cc94

08014334 <_malloc_r>:
 8014334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014338:	1ccd      	adds	r5, r1, #3
 801433a:	f025 0503 	bic.w	r5, r5, #3
 801433e:	3508      	adds	r5, #8
 8014340:	2d0c      	cmp	r5, #12
 8014342:	bf38      	it	cc
 8014344:	250c      	movcc	r5, #12
 8014346:	2d00      	cmp	r5, #0
 8014348:	4607      	mov	r7, r0
 801434a:	db01      	blt.n	8014350 <_malloc_r+0x1c>
 801434c:	42a9      	cmp	r1, r5
 801434e:	d905      	bls.n	801435c <_malloc_r+0x28>
 8014350:	230c      	movs	r3, #12
 8014352:	603b      	str	r3, [r7, #0]
 8014354:	2600      	movs	r6, #0
 8014356:	4630      	mov	r0, r6
 8014358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801435c:	4e2e      	ldr	r6, [pc, #184]	; (8014418 <_malloc_r+0xe4>)
 801435e:	f000 fde5 	bl	8014f2c <__malloc_lock>
 8014362:	6833      	ldr	r3, [r6, #0]
 8014364:	461c      	mov	r4, r3
 8014366:	bb34      	cbnz	r4, 80143b6 <_malloc_r+0x82>
 8014368:	4629      	mov	r1, r5
 801436a:	4638      	mov	r0, r7
 801436c:	f7ff ffc2 	bl	80142f4 <sbrk_aligned>
 8014370:	1c43      	adds	r3, r0, #1
 8014372:	4604      	mov	r4, r0
 8014374:	d14d      	bne.n	8014412 <_malloc_r+0xde>
 8014376:	6834      	ldr	r4, [r6, #0]
 8014378:	4626      	mov	r6, r4
 801437a:	2e00      	cmp	r6, #0
 801437c:	d140      	bne.n	8014400 <_malloc_r+0xcc>
 801437e:	6823      	ldr	r3, [r4, #0]
 8014380:	4631      	mov	r1, r6
 8014382:	4638      	mov	r0, r7
 8014384:	eb04 0803 	add.w	r8, r4, r3
 8014388:	f000 f8b2 	bl	80144f0 <_sbrk_r>
 801438c:	4580      	cmp	r8, r0
 801438e:	d13a      	bne.n	8014406 <_malloc_r+0xd2>
 8014390:	6821      	ldr	r1, [r4, #0]
 8014392:	3503      	adds	r5, #3
 8014394:	1a6d      	subs	r5, r5, r1
 8014396:	f025 0503 	bic.w	r5, r5, #3
 801439a:	3508      	adds	r5, #8
 801439c:	2d0c      	cmp	r5, #12
 801439e:	bf38      	it	cc
 80143a0:	250c      	movcc	r5, #12
 80143a2:	4629      	mov	r1, r5
 80143a4:	4638      	mov	r0, r7
 80143a6:	f7ff ffa5 	bl	80142f4 <sbrk_aligned>
 80143aa:	3001      	adds	r0, #1
 80143ac:	d02b      	beq.n	8014406 <_malloc_r+0xd2>
 80143ae:	6823      	ldr	r3, [r4, #0]
 80143b0:	442b      	add	r3, r5
 80143b2:	6023      	str	r3, [r4, #0]
 80143b4:	e00e      	b.n	80143d4 <_malloc_r+0xa0>
 80143b6:	6822      	ldr	r2, [r4, #0]
 80143b8:	1b52      	subs	r2, r2, r5
 80143ba:	d41e      	bmi.n	80143fa <_malloc_r+0xc6>
 80143bc:	2a0b      	cmp	r2, #11
 80143be:	d916      	bls.n	80143ee <_malloc_r+0xba>
 80143c0:	1961      	adds	r1, r4, r5
 80143c2:	42a3      	cmp	r3, r4
 80143c4:	6025      	str	r5, [r4, #0]
 80143c6:	bf18      	it	ne
 80143c8:	6059      	strne	r1, [r3, #4]
 80143ca:	6863      	ldr	r3, [r4, #4]
 80143cc:	bf08      	it	eq
 80143ce:	6031      	streq	r1, [r6, #0]
 80143d0:	5162      	str	r2, [r4, r5]
 80143d2:	604b      	str	r3, [r1, #4]
 80143d4:	4638      	mov	r0, r7
 80143d6:	f104 060b 	add.w	r6, r4, #11
 80143da:	f000 fdad 	bl	8014f38 <__malloc_unlock>
 80143de:	f026 0607 	bic.w	r6, r6, #7
 80143e2:	1d23      	adds	r3, r4, #4
 80143e4:	1af2      	subs	r2, r6, r3
 80143e6:	d0b6      	beq.n	8014356 <_malloc_r+0x22>
 80143e8:	1b9b      	subs	r3, r3, r6
 80143ea:	50a3      	str	r3, [r4, r2]
 80143ec:	e7b3      	b.n	8014356 <_malloc_r+0x22>
 80143ee:	6862      	ldr	r2, [r4, #4]
 80143f0:	42a3      	cmp	r3, r4
 80143f2:	bf0c      	ite	eq
 80143f4:	6032      	streq	r2, [r6, #0]
 80143f6:	605a      	strne	r2, [r3, #4]
 80143f8:	e7ec      	b.n	80143d4 <_malloc_r+0xa0>
 80143fa:	4623      	mov	r3, r4
 80143fc:	6864      	ldr	r4, [r4, #4]
 80143fe:	e7b2      	b.n	8014366 <_malloc_r+0x32>
 8014400:	4634      	mov	r4, r6
 8014402:	6876      	ldr	r6, [r6, #4]
 8014404:	e7b9      	b.n	801437a <_malloc_r+0x46>
 8014406:	230c      	movs	r3, #12
 8014408:	603b      	str	r3, [r7, #0]
 801440a:	4638      	mov	r0, r7
 801440c:	f000 fd94 	bl	8014f38 <__malloc_unlock>
 8014410:	e7a1      	b.n	8014356 <_malloc_r+0x22>
 8014412:	6025      	str	r5, [r4, #0]
 8014414:	e7de      	b.n	80143d4 <_malloc_r+0xa0>
 8014416:	bf00      	nop
 8014418:	2000cc90 	.word	0x2000cc90

0801441c <cleanup_glue>:
 801441c:	b538      	push	{r3, r4, r5, lr}
 801441e:	460c      	mov	r4, r1
 8014420:	6809      	ldr	r1, [r1, #0]
 8014422:	4605      	mov	r5, r0
 8014424:	b109      	cbz	r1, 801442a <cleanup_glue+0xe>
 8014426:	f7ff fff9 	bl	801441c <cleanup_glue>
 801442a:	4621      	mov	r1, r4
 801442c:	4628      	mov	r0, r5
 801442e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014432:	f7ff bf13 	b.w	801425c <_free_r>
	...

08014438 <_reclaim_reent>:
 8014438:	4b2c      	ldr	r3, [pc, #176]	; (80144ec <_reclaim_reent+0xb4>)
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	4283      	cmp	r3, r0
 801443e:	b570      	push	{r4, r5, r6, lr}
 8014440:	4604      	mov	r4, r0
 8014442:	d051      	beq.n	80144e8 <_reclaim_reent+0xb0>
 8014444:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014446:	b143      	cbz	r3, 801445a <_reclaim_reent+0x22>
 8014448:	68db      	ldr	r3, [r3, #12]
 801444a:	2b00      	cmp	r3, #0
 801444c:	d14a      	bne.n	80144e4 <_reclaim_reent+0xac>
 801444e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014450:	6819      	ldr	r1, [r3, #0]
 8014452:	b111      	cbz	r1, 801445a <_reclaim_reent+0x22>
 8014454:	4620      	mov	r0, r4
 8014456:	f7ff ff01 	bl	801425c <_free_r>
 801445a:	6961      	ldr	r1, [r4, #20]
 801445c:	b111      	cbz	r1, 8014464 <_reclaim_reent+0x2c>
 801445e:	4620      	mov	r0, r4
 8014460:	f7ff fefc 	bl	801425c <_free_r>
 8014464:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014466:	b111      	cbz	r1, 801446e <_reclaim_reent+0x36>
 8014468:	4620      	mov	r0, r4
 801446a:	f7ff fef7 	bl	801425c <_free_r>
 801446e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014470:	b111      	cbz	r1, 8014478 <_reclaim_reent+0x40>
 8014472:	4620      	mov	r0, r4
 8014474:	f7ff fef2 	bl	801425c <_free_r>
 8014478:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801447a:	b111      	cbz	r1, 8014482 <_reclaim_reent+0x4a>
 801447c:	4620      	mov	r0, r4
 801447e:	f7ff feed 	bl	801425c <_free_r>
 8014482:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8014484:	b111      	cbz	r1, 801448c <_reclaim_reent+0x54>
 8014486:	4620      	mov	r0, r4
 8014488:	f7ff fee8 	bl	801425c <_free_r>
 801448c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801448e:	b111      	cbz	r1, 8014496 <_reclaim_reent+0x5e>
 8014490:	4620      	mov	r0, r4
 8014492:	f7ff fee3 	bl	801425c <_free_r>
 8014496:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8014498:	b111      	cbz	r1, 80144a0 <_reclaim_reent+0x68>
 801449a:	4620      	mov	r0, r4
 801449c:	f7ff fede 	bl	801425c <_free_r>
 80144a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80144a2:	b111      	cbz	r1, 80144aa <_reclaim_reent+0x72>
 80144a4:	4620      	mov	r0, r4
 80144a6:	f7ff fed9 	bl	801425c <_free_r>
 80144aa:	69a3      	ldr	r3, [r4, #24]
 80144ac:	b1e3      	cbz	r3, 80144e8 <_reclaim_reent+0xb0>
 80144ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80144b0:	4620      	mov	r0, r4
 80144b2:	4798      	blx	r3
 80144b4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80144b6:	b1b9      	cbz	r1, 80144e8 <_reclaim_reent+0xb0>
 80144b8:	4620      	mov	r0, r4
 80144ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80144be:	f7ff bfad 	b.w	801441c <cleanup_glue>
 80144c2:	5949      	ldr	r1, [r1, r5]
 80144c4:	b941      	cbnz	r1, 80144d8 <_reclaim_reent+0xa0>
 80144c6:	3504      	adds	r5, #4
 80144c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80144ca:	2d80      	cmp	r5, #128	; 0x80
 80144cc:	68d9      	ldr	r1, [r3, #12]
 80144ce:	d1f8      	bne.n	80144c2 <_reclaim_reent+0x8a>
 80144d0:	4620      	mov	r0, r4
 80144d2:	f7ff fec3 	bl	801425c <_free_r>
 80144d6:	e7ba      	b.n	801444e <_reclaim_reent+0x16>
 80144d8:	680e      	ldr	r6, [r1, #0]
 80144da:	4620      	mov	r0, r4
 80144dc:	f7ff febe 	bl	801425c <_free_r>
 80144e0:	4631      	mov	r1, r6
 80144e2:	e7ef      	b.n	80144c4 <_reclaim_reent+0x8c>
 80144e4:	2500      	movs	r5, #0
 80144e6:	e7ef      	b.n	80144c8 <_reclaim_reent+0x90>
 80144e8:	bd70      	pop	{r4, r5, r6, pc}
 80144ea:	bf00      	nop
 80144ec:	200002b4 	.word	0x200002b4

080144f0 <_sbrk_r>:
 80144f0:	b538      	push	{r3, r4, r5, lr}
 80144f2:	4d06      	ldr	r5, [pc, #24]	; (801450c <_sbrk_r+0x1c>)
 80144f4:	2300      	movs	r3, #0
 80144f6:	4604      	mov	r4, r0
 80144f8:	4608      	mov	r0, r1
 80144fa:	602b      	str	r3, [r5, #0]
 80144fc:	f7ee f8d6 	bl	80026ac <_sbrk>
 8014500:	1c43      	adds	r3, r0, #1
 8014502:	d102      	bne.n	801450a <_sbrk_r+0x1a>
 8014504:	682b      	ldr	r3, [r5, #0]
 8014506:	b103      	cbz	r3, 801450a <_sbrk_r+0x1a>
 8014508:	6023      	str	r3, [r4, #0]
 801450a:	bd38      	pop	{r3, r4, r5, pc}
 801450c:	2000cc98 	.word	0x2000cc98

08014510 <siprintf>:
 8014510:	b40e      	push	{r1, r2, r3}
 8014512:	b500      	push	{lr}
 8014514:	b09c      	sub	sp, #112	; 0x70
 8014516:	ab1d      	add	r3, sp, #116	; 0x74
 8014518:	9002      	str	r0, [sp, #8]
 801451a:	9006      	str	r0, [sp, #24]
 801451c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014520:	4809      	ldr	r0, [pc, #36]	; (8014548 <siprintf+0x38>)
 8014522:	9107      	str	r1, [sp, #28]
 8014524:	9104      	str	r1, [sp, #16]
 8014526:	4909      	ldr	r1, [pc, #36]	; (801454c <siprintf+0x3c>)
 8014528:	f853 2b04 	ldr.w	r2, [r3], #4
 801452c:	9105      	str	r1, [sp, #20]
 801452e:	6800      	ldr	r0, [r0, #0]
 8014530:	9301      	str	r3, [sp, #4]
 8014532:	a902      	add	r1, sp, #8
 8014534:	f000 fd62 	bl	8014ffc <_svfiprintf_r>
 8014538:	9b02      	ldr	r3, [sp, #8]
 801453a:	2200      	movs	r2, #0
 801453c:	701a      	strb	r2, [r3, #0]
 801453e:	b01c      	add	sp, #112	; 0x70
 8014540:	f85d eb04 	ldr.w	lr, [sp], #4
 8014544:	b003      	add	sp, #12
 8014546:	4770      	bx	lr
 8014548:	200002b4 	.word	0x200002b4
 801454c:	ffff0208 	.word	0xffff0208

08014550 <__sread>:
 8014550:	b510      	push	{r4, lr}
 8014552:	460c      	mov	r4, r1
 8014554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014558:	f001 f93e 	bl	80157d8 <_read_r>
 801455c:	2800      	cmp	r0, #0
 801455e:	bfab      	itete	ge
 8014560:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014562:	89a3      	ldrhlt	r3, [r4, #12]
 8014564:	181b      	addge	r3, r3, r0
 8014566:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801456a:	bfac      	ite	ge
 801456c:	6563      	strge	r3, [r4, #84]	; 0x54
 801456e:	81a3      	strhlt	r3, [r4, #12]
 8014570:	bd10      	pop	{r4, pc}

08014572 <__seofread>:
 8014572:	2000      	movs	r0, #0
 8014574:	4770      	bx	lr

08014576 <__swrite>:
 8014576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801457a:	461f      	mov	r7, r3
 801457c:	898b      	ldrh	r3, [r1, #12]
 801457e:	05db      	lsls	r3, r3, #23
 8014580:	4605      	mov	r5, r0
 8014582:	460c      	mov	r4, r1
 8014584:	4616      	mov	r6, r2
 8014586:	d505      	bpl.n	8014594 <__swrite+0x1e>
 8014588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801458c:	2302      	movs	r3, #2
 801458e:	2200      	movs	r2, #0
 8014590:	f000 fcba 	bl	8014f08 <_lseek_r>
 8014594:	89a3      	ldrh	r3, [r4, #12]
 8014596:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801459a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801459e:	81a3      	strh	r3, [r4, #12]
 80145a0:	4632      	mov	r2, r6
 80145a2:	463b      	mov	r3, r7
 80145a4:	4628      	mov	r0, r5
 80145a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80145aa:	f000 bb3d 	b.w	8014c28 <_write_r>

080145ae <__sseek>:
 80145ae:	b510      	push	{r4, lr}
 80145b0:	460c      	mov	r4, r1
 80145b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145b6:	f000 fca7 	bl	8014f08 <_lseek_r>
 80145ba:	1c43      	adds	r3, r0, #1
 80145bc:	89a3      	ldrh	r3, [r4, #12]
 80145be:	bf15      	itete	ne
 80145c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80145c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80145c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80145ca:	81a3      	strheq	r3, [r4, #12]
 80145cc:	bf18      	it	ne
 80145ce:	81a3      	strhne	r3, [r4, #12]
 80145d0:	bd10      	pop	{r4, pc}

080145d2 <__sclose>:
 80145d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145d6:	f000 bb57 	b.w	8014c88 <_close_r>
	...

080145dc <strtok>:
 80145dc:	4b16      	ldr	r3, [pc, #88]	; (8014638 <strtok+0x5c>)
 80145de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80145e0:	681e      	ldr	r6, [r3, #0]
 80145e2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80145e4:	4605      	mov	r5, r0
 80145e6:	b9fc      	cbnz	r4, 8014628 <strtok+0x4c>
 80145e8:	2050      	movs	r0, #80	; 0x50
 80145ea:	9101      	str	r1, [sp, #4]
 80145ec:	f7ff fb9e 	bl	8013d2c <malloc>
 80145f0:	9901      	ldr	r1, [sp, #4]
 80145f2:	65b0      	str	r0, [r6, #88]	; 0x58
 80145f4:	4602      	mov	r2, r0
 80145f6:	b920      	cbnz	r0, 8014602 <strtok+0x26>
 80145f8:	4b10      	ldr	r3, [pc, #64]	; (801463c <strtok+0x60>)
 80145fa:	4811      	ldr	r0, [pc, #68]	; (8014640 <strtok+0x64>)
 80145fc:	2157      	movs	r1, #87	; 0x57
 80145fe:	f000 fb25 	bl	8014c4c <__assert_func>
 8014602:	e9c0 4400 	strd	r4, r4, [r0]
 8014606:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801460a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801460e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8014612:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8014616:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801461a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801461e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8014622:	6184      	str	r4, [r0, #24]
 8014624:	7704      	strb	r4, [r0, #28]
 8014626:	6244      	str	r4, [r0, #36]	; 0x24
 8014628:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801462a:	2301      	movs	r3, #1
 801462c:	4628      	mov	r0, r5
 801462e:	b002      	add	sp, #8
 8014630:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014634:	f000 b806 	b.w	8014644 <__strtok_r>
 8014638:	200002b4 	.word	0x200002b4
 801463c:	08016d64 	.word	0x08016d64
 8014640:	08016d7b 	.word	0x08016d7b

08014644 <__strtok_r>:
 8014644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014646:	b908      	cbnz	r0, 801464c <__strtok_r+0x8>
 8014648:	6810      	ldr	r0, [r2, #0]
 801464a:	b188      	cbz	r0, 8014670 <__strtok_r+0x2c>
 801464c:	4604      	mov	r4, r0
 801464e:	4620      	mov	r0, r4
 8014650:	f814 5b01 	ldrb.w	r5, [r4], #1
 8014654:	460f      	mov	r7, r1
 8014656:	f817 6b01 	ldrb.w	r6, [r7], #1
 801465a:	b91e      	cbnz	r6, 8014664 <__strtok_r+0x20>
 801465c:	b965      	cbnz	r5, 8014678 <__strtok_r+0x34>
 801465e:	6015      	str	r5, [r2, #0]
 8014660:	4628      	mov	r0, r5
 8014662:	e005      	b.n	8014670 <__strtok_r+0x2c>
 8014664:	42b5      	cmp	r5, r6
 8014666:	d1f6      	bne.n	8014656 <__strtok_r+0x12>
 8014668:	2b00      	cmp	r3, #0
 801466a:	d1f0      	bne.n	801464e <__strtok_r+0xa>
 801466c:	6014      	str	r4, [r2, #0]
 801466e:	7003      	strb	r3, [r0, #0]
 8014670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014672:	461c      	mov	r4, r3
 8014674:	e00c      	b.n	8014690 <__strtok_r+0x4c>
 8014676:	b915      	cbnz	r5, 801467e <__strtok_r+0x3a>
 8014678:	f814 3b01 	ldrb.w	r3, [r4], #1
 801467c:	460e      	mov	r6, r1
 801467e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8014682:	42ab      	cmp	r3, r5
 8014684:	d1f7      	bne.n	8014676 <__strtok_r+0x32>
 8014686:	2b00      	cmp	r3, #0
 8014688:	d0f3      	beq.n	8014672 <__strtok_r+0x2e>
 801468a:	2300      	movs	r3, #0
 801468c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8014690:	6014      	str	r4, [r2, #0]
 8014692:	e7ed      	b.n	8014670 <__strtok_r+0x2c>

08014694 <_strtol_l.constprop.0>:
 8014694:	2b01      	cmp	r3, #1
 8014696:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801469a:	d001      	beq.n	80146a0 <_strtol_l.constprop.0+0xc>
 801469c:	2b24      	cmp	r3, #36	; 0x24
 801469e:	d906      	bls.n	80146ae <_strtol_l.constprop.0+0x1a>
 80146a0:	f7ff fa1e 	bl	8013ae0 <__errno>
 80146a4:	2316      	movs	r3, #22
 80146a6:	6003      	str	r3, [r0, #0]
 80146a8:	2000      	movs	r0, #0
 80146aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146ae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8014794 <_strtol_l.constprop.0+0x100>
 80146b2:	460d      	mov	r5, r1
 80146b4:	462e      	mov	r6, r5
 80146b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80146ba:	f814 700c 	ldrb.w	r7, [r4, ip]
 80146be:	f017 0708 	ands.w	r7, r7, #8
 80146c2:	d1f7      	bne.n	80146b4 <_strtol_l.constprop.0+0x20>
 80146c4:	2c2d      	cmp	r4, #45	; 0x2d
 80146c6:	d132      	bne.n	801472e <_strtol_l.constprop.0+0x9a>
 80146c8:	782c      	ldrb	r4, [r5, #0]
 80146ca:	2701      	movs	r7, #1
 80146cc:	1cb5      	adds	r5, r6, #2
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d05b      	beq.n	801478a <_strtol_l.constprop.0+0xf6>
 80146d2:	2b10      	cmp	r3, #16
 80146d4:	d109      	bne.n	80146ea <_strtol_l.constprop.0+0x56>
 80146d6:	2c30      	cmp	r4, #48	; 0x30
 80146d8:	d107      	bne.n	80146ea <_strtol_l.constprop.0+0x56>
 80146da:	782c      	ldrb	r4, [r5, #0]
 80146dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80146e0:	2c58      	cmp	r4, #88	; 0x58
 80146e2:	d14d      	bne.n	8014780 <_strtol_l.constprop.0+0xec>
 80146e4:	786c      	ldrb	r4, [r5, #1]
 80146e6:	2310      	movs	r3, #16
 80146e8:	3502      	adds	r5, #2
 80146ea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80146ee:	f108 38ff 	add.w	r8, r8, #4294967295
 80146f2:	f04f 0c00 	mov.w	ip, #0
 80146f6:	fbb8 f9f3 	udiv	r9, r8, r3
 80146fa:	4666      	mov	r6, ip
 80146fc:	fb03 8a19 	mls	sl, r3, r9, r8
 8014700:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8014704:	f1be 0f09 	cmp.w	lr, #9
 8014708:	d816      	bhi.n	8014738 <_strtol_l.constprop.0+0xa4>
 801470a:	4674      	mov	r4, lr
 801470c:	42a3      	cmp	r3, r4
 801470e:	dd24      	ble.n	801475a <_strtol_l.constprop.0+0xc6>
 8014710:	f1bc 0f00 	cmp.w	ip, #0
 8014714:	db1e      	blt.n	8014754 <_strtol_l.constprop.0+0xc0>
 8014716:	45b1      	cmp	r9, r6
 8014718:	d31c      	bcc.n	8014754 <_strtol_l.constprop.0+0xc0>
 801471a:	d101      	bne.n	8014720 <_strtol_l.constprop.0+0x8c>
 801471c:	45a2      	cmp	sl, r4
 801471e:	db19      	blt.n	8014754 <_strtol_l.constprop.0+0xc0>
 8014720:	fb06 4603 	mla	r6, r6, r3, r4
 8014724:	f04f 0c01 	mov.w	ip, #1
 8014728:	f815 4b01 	ldrb.w	r4, [r5], #1
 801472c:	e7e8      	b.n	8014700 <_strtol_l.constprop.0+0x6c>
 801472e:	2c2b      	cmp	r4, #43	; 0x2b
 8014730:	bf04      	itt	eq
 8014732:	782c      	ldrbeq	r4, [r5, #0]
 8014734:	1cb5      	addeq	r5, r6, #2
 8014736:	e7ca      	b.n	80146ce <_strtol_l.constprop.0+0x3a>
 8014738:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801473c:	f1be 0f19 	cmp.w	lr, #25
 8014740:	d801      	bhi.n	8014746 <_strtol_l.constprop.0+0xb2>
 8014742:	3c37      	subs	r4, #55	; 0x37
 8014744:	e7e2      	b.n	801470c <_strtol_l.constprop.0+0x78>
 8014746:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801474a:	f1be 0f19 	cmp.w	lr, #25
 801474e:	d804      	bhi.n	801475a <_strtol_l.constprop.0+0xc6>
 8014750:	3c57      	subs	r4, #87	; 0x57
 8014752:	e7db      	b.n	801470c <_strtol_l.constprop.0+0x78>
 8014754:	f04f 3cff 	mov.w	ip, #4294967295
 8014758:	e7e6      	b.n	8014728 <_strtol_l.constprop.0+0x94>
 801475a:	f1bc 0f00 	cmp.w	ip, #0
 801475e:	da05      	bge.n	801476c <_strtol_l.constprop.0+0xd8>
 8014760:	2322      	movs	r3, #34	; 0x22
 8014762:	6003      	str	r3, [r0, #0]
 8014764:	4646      	mov	r6, r8
 8014766:	b942      	cbnz	r2, 801477a <_strtol_l.constprop.0+0xe6>
 8014768:	4630      	mov	r0, r6
 801476a:	e79e      	b.n	80146aa <_strtol_l.constprop.0+0x16>
 801476c:	b107      	cbz	r7, 8014770 <_strtol_l.constprop.0+0xdc>
 801476e:	4276      	negs	r6, r6
 8014770:	2a00      	cmp	r2, #0
 8014772:	d0f9      	beq.n	8014768 <_strtol_l.constprop.0+0xd4>
 8014774:	f1bc 0f00 	cmp.w	ip, #0
 8014778:	d000      	beq.n	801477c <_strtol_l.constprop.0+0xe8>
 801477a:	1e69      	subs	r1, r5, #1
 801477c:	6011      	str	r1, [r2, #0]
 801477e:	e7f3      	b.n	8014768 <_strtol_l.constprop.0+0xd4>
 8014780:	2430      	movs	r4, #48	; 0x30
 8014782:	2b00      	cmp	r3, #0
 8014784:	d1b1      	bne.n	80146ea <_strtol_l.constprop.0+0x56>
 8014786:	2308      	movs	r3, #8
 8014788:	e7af      	b.n	80146ea <_strtol_l.constprop.0+0x56>
 801478a:	2c30      	cmp	r4, #48	; 0x30
 801478c:	d0a5      	beq.n	80146da <_strtol_l.constprop.0+0x46>
 801478e:	230a      	movs	r3, #10
 8014790:	e7ab      	b.n	80146ea <_strtol_l.constprop.0+0x56>
 8014792:	bf00      	nop
 8014794:	08016e51 	.word	0x08016e51

08014798 <_strtol_r>:
 8014798:	f7ff bf7c 	b.w	8014694 <_strtol_l.constprop.0>

0801479c <strtol>:
 801479c:	4613      	mov	r3, r2
 801479e:	460a      	mov	r2, r1
 80147a0:	4601      	mov	r1, r0
 80147a2:	4802      	ldr	r0, [pc, #8]	; (80147ac <strtol+0x10>)
 80147a4:	6800      	ldr	r0, [r0, #0]
 80147a6:	f7ff bf75 	b.w	8014694 <_strtol_l.constprop.0>
 80147aa:	bf00      	nop
 80147ac:	200002b4 	.word	0x200002b4

080147b0 <__tzcalc_limits>:
 80147b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147b4:	4605      	mov	r5, r0
 80147b6:	f000 fba3 	bl	8014f00 <__gettzinfo>
 80147ba:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80147be:	429d      	cmp	r5, r3
 80147c0:	f340 8099 	ble.w	80148f6 <__tzcalc_limits+0x146>
 80147c4:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 80147c8:	18ac      	adds	r4, r5, r2
 80147ca:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 80147ce:	f240 126d 	movw	r2, #365	; 0x16d
 80147d2:	10a4      	asrs	r4, r4, #2
 80147d4:	fb02 4403 	mla	r4, r2, r3, r4
 80147d8:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80147dc:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 80147e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80147e4:	441c      	add	r4, r3
 80147e6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80147ea:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 80147ee:	fb95 fcf3 	sdiv	ip, r5, r3
 80147f2:	fb03 5c1c 	mls	ip, r3, ip, r5
 80147f6:	186a      	adds	r2, r5, r1
 80147f8:	fabc f68c 	clz	r6, ip
 80147fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8014800:	f005 0303 	and.w	r3, r5, #3
 8014804:	4414      	add	r4, r2
 8014806:	2264      	movs	r2, #100	; 0x64
 8014808:	6045      	str	r5, [r0, #4]
 801480a:	fb95 f7f2 	sdiv	r7, r5, r2
 801480e:	0976      	lsrs	r6, r6, #5
 8014810:	fb02 5717 	mls	r7, r2, r7, r5
 8014814:	4601      	mov	r1, r0
 8014816:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801481a:	9300      	str	r3, [sp, #0]
 801481c:	f04f 0a07 	mov.w	sl, #7
 8014820:	7a0d      	ldrb	r5, [r1, #8]
 8014822:	694b      	ldr	r3, [r1, #20]
 8014824:	2d4a      	cmp	r5, #74	; 0x4a
 8014826:	d12d      	bne.n	8014884 <__tzcalc_limits+0xd4>
 8014828:	9a00      	ldr	r2, [sp, #0]
 801482a:	eb04 0e03 	add.w	lr, r4, r3
 801482e:	b902      	cbnz	r2, 8014832 <__tzcalc_limits+0x82>
 8014830:	b917      	cbnz	r7, 8014838 <__tzcalc_limits+0x88>
 8014832:	f1bc 0f00 	cmp.w	ip, #0
 8014836:	d123      	bne.n	8014880 <__tzcalc_limits+0xd0>
 8014838:	2b3b      	cmp	r3, #59	; 0x3b
 801483a:	bfd4      	ite	le
 801483c:	2300      	movle	r3, #0
 801483e:	2301      	movgt	r3, #1
 8014840:	4473      	add	r3, lr
 8014842:	3b01      	subs	r3, #1
 8014844:	698d      	ldr	r5, [r1, #24]
 8014846:	4a2d      	ldr	r2, [pc, #180]	; (80148fc <__tzcalc_limits+0x14c>)
 8014848:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 801484c:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8014850:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8014852:	18ed      	adds	r5, r5, r3
 8014854:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8014858:	e9c1 5308 	strd	r5, r3, [r1, #32]
 801485c:	3128      	adds	r1, #40	; 0x28
 801485e:	458b      	cmp	fp, r1
 8014860:	d1de      	bne.n	8014820 <__tzcalc_limits+0x70>
 8014862:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 8014866:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 801486a:	428c      	cmp	r4, r1
 801486c:	eb72 0303 	sbcs.w	r3, r2, r3
 8014870:	bfb4      	ite	lt
 8014872:	2301      	movlt	r3, #1
 8014874:	2300      	movge	r3, #0
 8014876:	6003      	str	r3, [r0, #0]
 8014878:	2001      	movs	r0, #1
 801487a:	b003      	add	sp, #12
 801487c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014880:	2300      	movs	r3, #0
 8014882:	e7dd      	b.n	8014840 <__tzcalc_limits+0x90>
 8014884:	2d44      	cmp	r5, #68	; 0x44
 8014886:	d101      	bne.n	801488c <__tzcalc_limits+0xdc>
 8014888:	4423      	add	r3, r4
 801488a:	e7db      	b.n	8014844 <__tzcalc_limits+0x94>
 801488c:	9a00      	ldr	r2, [sp, #0]
 801488e:	bb62      	cbnz	r2, 80148ea <__tzcalc_limits+0x13a>
 8014890:	2f00      	cmp	r7, #0
 8014892:	bf0c      	ite	eq
 8014894:	4635      	moveq	r5, r6
 8014896:	2501      	movne	r5, #1
 8014898:	68ca      	ldr	r2, [r1, #12]
 801489a:	9201      	str	r2, [sp, #4]
 801489c:	4a18      	ldr	r2, [pc, #96]	; (8014900 <__tzcalc_limits+0x150>)
 801489e:	f04f 0930 	mov.w	r9, #48	; 0x30
 80148a2:	fb09 2505 	mla	r5, r9, r5, r2
 80148a6:	46a6      	mov	lr, r4
 80148a8:	f04f 0800 	mov.w	r8, #0
 80148ac:	3d04      	subs	r5, #4
 80148ae:	9a01      	ldr	r2, [sp, #4]
 80148b0:	f108 0801 	add.w	r8, r8, #1
 80148b4:	4542      	cmp	r2, r8
 80148b6:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 80148ba:	dc18      	bgt.n	80148ee <__tzcalc_limits+0x13e>
 80148bc:	f10e 0504 	add.w	r5, lr, #4
 80148c0:	fb95 f8fa 	sdiv	r8, r5, sl
 80148c4:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 80148c8:	eba5 0808 	sub.w	r8, r5, r8
 80148cc:	ebb3 0808 	subs.w	r8, r3, r8
 80148d0:	690b      	ldr	r3, [r1, #16]
 80148d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80148d6:	bf48      	it	mi
 80148d8:	f108 0807 	addmi.w	r8, r8, #7
 80148dc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80148e0:	4443      	add	r3, r8
 80148e2:	454b      	cmp	r3, r9
 80148e4:	da05      	bge.n	80148f2 <__tzcalc_limits+0x142>
 80148e6:	4473      	add	r3, lr
 80148e8:	e7ac      	b.n	8014844 <__tzcalc_limits+0x94>
 80148ea:	4635      	mov	r5, r6
 80148ec:	e7d4      	b.n	8014898 <__tzcalc_limits+0xe8>
 80148ee:	44ce      	add	lr, r9
 80148f0:	e7dd      	b.n	80148ae <__tzcalc_limits+0xfe>
 80148f2:	3b07      	subs	r3, #7
 80148f4:	e7f5      	b.n	80148e2 <__tzcalc_limits+0x132>
 80148f6:	2000      	movs	r0, #0
 80148f8:	e7bf      	b.n	801487a <__tzcalc_limits+0xca>
 80148fa:	bf00      	nop
 80148fc:	00015180 	.word	0x00015180
 8014900:	08016f54 	.word	0x08016f54

08014904 <__tz_lock>:
 8014904:	4801      	ldr	r0, [pc, #4]	; (801490c <__tz_lock+0x8>)
 8014906:	f7ff ba0c 	b.w	8013d22 <__retarget_lock_acquire>
 801490a:	bf00      	nop
 801490c:	2000cc8c 	.word	0x2000cc8c

08014910 <__tz_unlock>:
 8014910:	4801      	ldr	r0, [pc, #4]	; (8014918 <__tz_unlock+0x8>)
 8014912:	f7ff ba08 	b.w	8013d26 <__retarget_lock_release>
 8014916:	bf00      	nop
 8014918:	2000cc8c 	.word	0x2000cc8c

0801491c <_tzset_unlocked>:
 801491c:	4b01      	ldr	r3, [pc, #4]	; (8014924 <_tzset_unlocked+0x8>)
 801491e:	6818      	ldr	r0, [r3, #0]
 8014920:	f000 b802 	b.w	8014928 <_tzset_unlocked_r>
 8014924:	200002b4 	.word	0x200002b4

08014928 <_tzset_unlocked_r>:
 8014928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801492c:	b08d      	sub	sp, #52	; 0x34
 801492e:	4607      	mov	r7, r0
 8014930:	f000 fae6 	bl	8014f00 <__gettzinfo>
 8014934:	49b0      	ldr	r1, [pc, #704]	; (8014bf8 <_tzset_unlocked_r+0x2d0>)
 8014936:	4eb1      	ldr	r6, [pc, #708]	; (8014bfc <_tzset_unlocked_r+0x2d4>)
 8014938:	4605      	mov	r5, r0
 801493a:	4638      	mov	r0, r7
 801493c:	f000 fad8 	bl	8014ef0 <_getenv_r>
 8014940:	4604      	mov	r4, r0
 8014942:	b970      	cbnz	r0, 8014962 <_tzset_unlocked_r+0x3a>
 8014944:	4bae      	ldr	r3, [pc, #696]	; (8014c00 <_tzset_unlocked_r+0x2d8>)
 8014946:	4aaf      	ldr	r2, [pc, #700]	; (8014c04 <_tzset_unlocked_r+0x2dc>)
 8014948:	6018      	str	r0, [r3, #0]
 801494a:	4baf      	ldr	r3, [pc, #700]	; (8014c08 <_tzset_unlocked_r+0x2e0>)
 801494c:	6018      	str	r0, [r3, #0]
 801494e:	4baf      	ldr	r3, [pc, #700]	; (8014c0c <_tzset_unlocked_r+0x2e4>)
 8014950:	6830      	ldr	r0, [r6, #0]
 8014952:	e9c3 2200 	strd	r2, r2, [r3]
 8014956:	f7ff f9f1 	bl	8013d3c <free>
 801495a:	6034      	str	r4, [r6, #0]
 801495c:	b00d      	add	sp, #52	; 0x34
 801495e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014962:	6831      	ldr	r1, [r6, #0]
 8014964:	2900      	cmp	r1, #0
 8014966:	d162      	bne.n	8014a2e <_tzset_unlocked_r+0x106>
 8014968:	6830      	ldr	r0, [r6, #0]
 801496a:	f7ff f9e7 	bl	8013d3c <free>
 801496e:	4620      	mov	r0, r4
 8014970:	f7eb fc38 	bl	80001e4 <strlen>
 8014974:	1c41      	adds	r1, r0, #1
 8014976:	4638      	mov	r0, r7
 8014978:	f7ff fcdc 	bl	8014334 <_malloc_r>
 801497c:	6030      	str	r0, [r6, #0]
 801497e:	2800      	cmp	r0, #0
 8014980:	d15a      	bne.n	8014a38 <_tzset_unlocked_r+0x110>
 8014982:	7823      	ldrb	r3, [r4, #0]
 8014984:	4aa2      	ldr	r2, [pc, #648]	; (8014c10 <_tzset_unlocked_r+0x2e8>)
 8014986:	49a3      	ldr	r1, [pc, #652]	; (8014c14 <_tzset_unlocked_r+0x2ec>)
 8014988:	2b3a      	cmp	r3, #58	; 0x3a
 801498a:	bf08      	it	eq
 801498c:	3401      	addeq	r4, #1
 801498e:	ae0a      	add	r6, sp, #40	; 0x28
 8014990:	4633      	mov	r3, r6
 8014992:	4620      	mov	r0, r4
 8014994:	f000 ff32 	bl	80157fc <siscanf>
 8014998:	2800      	cmp	r0, #0
 801499a:	dddf      	ble.n	801495c <_tzset_unlocked_r+0x34>
 801499c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801499e:	18e7      	adds	r7, r4, r3
 80149a0:	5ce3      	ldrb	r3, [r4, r3]
 80149a2:	2b2d      	cmp	r3, #45	; 0x2d
 80149a4:	d14c      	bne.n	8014a40 <_tzset_unlocked_r+0x118>
 80149a6:	3701      	adds	r7, #1
 80149a8:	f04f 38ff 	mov.w	r8, #4294967295
 80149ac:	f10d 0a20 	add.w	sl, sp, #32
 80149b0:	f10d 0b1e 	add.w	fp, sp, #30
 80149b4:	2400      	movs	r4, #0
 80149b6:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80149ba:	4997      	ldr	r1, [pc, #604]	; (8014c18 <_tzset_unlocked_r+0x2f0>)
 80149bc:	9603      	str	r6, [sp, #12]
 80149be:	f8cd b000 	str.w	fp, [sp]
 80149c2:	4633      	mov	r3, r6
 80149c4:	aa07      	add	r2, sp, #28
 80149c6:	4638      	mov	r0, r7
 80149c8:	f8ad 401e 	strh.w	r4, [sp, #30]
 80149cc:	f8ad 4020 	strh.w	r4, [sp, #32]
 80149d0:	f000 ff14 	bl	80157fc <siscanf>
 80149d4:	42a0      	cmp	r0, r4
 80149d6:	ddc1      	ble.n	801495c <_tzset_unlocked_r+0x34>
 80149d8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80149dc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80149e0:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8014c24 <_tzset_unlocked_r+0x2fc>
 80149e4:	213c      	movs	r1, #60	; 0x3c
 80149e6:	fb01 3302 	mla	r3, r1, r2, r3
 80149ea:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80149ee:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80149f2:	fb01 3302 	mla	r3, r1, r2, r3
 80149f6:	fb08 f303 	mul.w	r3, r8, r3
 80149fa:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8014c0c <_tzset_unlocked_r+0x2e4>
 80149fe:	62ab      	str	r3, [r5, #40]	; 0x28
 8014a00:	4b83      	ldr	r3, [pc, #524]	; (8014c10 <_tzset_unlocked_r+0x2e8>)
 8014a02:	f8c8 3000 	str.w	r3, [r8]
 8014a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a08:	4982      	ldr	r1, [pc, #520]	; (8014c14 <_tzset_unlocked_r+0x2ec>)
 8014a0a:	441f      	add	r7, r3
 8014a0c:	464a      	mov	r2, r9
 8014a0e:	4633      	mov	r3, r6
 8014a10:	4638      	mov	r0, r7
 8014a12:	f000 fef3 	bl	80157fc <siscanf>
 8014a16:	42a0      	cmp	r0, r4
 8014a18:	dc18      	bgt.n	8014a4c <_tzset_unlocked_r+0x124>
 8014a1a:	f8d8 3000 	ldr.w	r3, [r8]
 8014a1e:	f8c8 3004 	str.w	r3, [r8, #4]
 8014a22:	4b77      	ldr	r3, [pc, #476]	; (8014c00 <_tzset_unlocked_r+0x2d8>)
 8014a24:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8014a26:	601a      	str	r2, [r3, #0]
 8014a28:	4b77      	ldr	r3, [pc, #476]	; (8014c08 <_tzset_unlocked_r+0x2e0>)
 8014a2a:	601c      	str	r4, [r3, #0]
 8014a2c:	e796      	b.n	801495c <_tzset_unlocked_r+0x34>
 8014a2e:	f7eb fbcf 	bl	80001d0 <strcmp>
 8014a32:	2800      	cmp	r0, #0
 8014a34:	d198      	bne.n	8014968 <_tzset_unlocked_r+0x40>
 8014a36:	e791      	b.n	801495c <_tzset_unlocked_r+0x34>
 8014a38:	4621      	mov	r1, r4
 8014a3a:	f000 ff0b 	bl	8015854 <strcpy>
 8014a3e:	e7a0      	b.n	8014982 <_tzset_unlocked_r+0x5a>
 8014a40:	2b2b      	cmp	r3, #43	; 0x2b
 8014a42:	bf08      	it	eq
 8014a44:	3701      	addeq	r7, #1
 8014a46:	f04f 0801 	mov.w	r8, #1
 8014a4a:	e7af      	b.n	80149ac <_tzset_unlocked_r+0x84>
 8014a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a4e:	f8c8 9004 	str.w	r9, [r8, #4]
 8014a52:	18fc      	adds	r4, r7, r3
 8014a54:	5cfb      	ldrb	r3, [r7, r3]
 8014a56:	2b2d      	cmp	r3, #45	; 0x2d
 8014a58:	f040 808b 	bne.w	8014b72 <_tzset_unlocked_r+0x24a>
 8014a5c:	3401      	adds	r4, #1
 8014a5e:	f04f 37ff 	mov.w	r7, #4294967295
 8014a62:	2300      	movs	r3, #0
 8014a64:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014a68:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014a6c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014a70:	930a      	str	r3, [sp, #40]	; 0x28
 8014a72:	e9cd a602 	strd	sl, r6, [sp, #8]
 8014a76:	e9cd b600 	strd	fp, r6, [sp]
 8014a7a:	4967      	ldr	r1, [pc, #412]	; (8014c18 <_tzset_unlocked_r+0x2f0>)
 8014a7c:	4633      	mov	r3, r6
 8014a7e:	aa07      	add	r2, sp, #28
 8014a80:	4620      	mov	r0, r4
 8014a82:	f000 febb 	bl	80157fc <siscanf>
 8014a86:	2800      	cmp	r0, #0
 8014a88:	dc78      	bgt.n	8014b7c <_tzset_unlocked_r+0x254>
 8014a8a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8014a8c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8014a90:	652b      	str	r3, [r5, #80]	; 0x50
 8014a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a94:	462f      	mov	r7, r5
 8014a96:	441c      	add	r4, r3
 8014a98:	f04f 0900 	mov.w	r9, #0
 8014a9c:	7823      	ldrb	r3, [r4, #0]
 8014a9e:	2b2c      	cmp	r3, #44	; 0x2c
 8014aa0:	bf08      	it	eq
 8014aa2:	3401      	addeq	r4, #1
 8014aa4:	f894 8000 	ldrb.w	r8, [r4]
 8014aa8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8014aac:	d178      	bne.n	8014ba0 <_tzset_unlocked_r+0x278>
 8014aae:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8014ab2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8014ab6:	ab09      	add	r3, sp, #36	; 0x24
 8014ab8:	9300      	str	r3, [sp, #0]
 8014aba:	4958      	ldr	r1, [pc, #352]	; (8014c1c <_tzset_unlocked_r+0x2f4>)
 8014abc:	9603      	str	r6, [sp, #12]
 8014abe:	4633      	mov	r3, r6
 8014ac0:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8014ac4:	4620      	mov	r0, r4
 8014ac6:	f000 fe99 	bl	80157fc <siscanf>
 8014aca:	2803      	cmp	r0, #3
 8014acc:	f47f af46 	bne.w	801495c <_tzset_unlocked_r+0x34>
 8014ad0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8014ad4:	1e4b      	subs	r3, r1, #1
 8014ad6:	2b0b      	cmp	r3, #11
 8014ad8:	f63f af40 	bhi.w	801495c <_tzset_unlocked_r+0x34>
 8014adc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8014ae0:	1e53      	subs	r3, r2, #1
 8014ae2:	2b04      	cmp	r3, #4
 8014ae4:	f63f af3a 	bhi.w	801495c <_tzset_unlocked_r+0x34>
 8014ae8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8014aec:	2b06      	cmp	r3, #6
 8014aee:	f63f af35 	bhi.w	801495c <_tzset_unlocked_r+0x34>
 8014af2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8014af6:	f887 8008 	strb.w	r8, [r7, #8]
 8014afa:	617b      	str	r3, [r7, #20]
 8014afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014afe:	eb04 0803 	add.w	r8, r4, r3
 8014b02:	2302      	movs	r3, #2
 8014b04:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014b08:	2300      	movs	r3, #0
 8014b0a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014b0e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014b12:	930a      	str	r3, [sp, #40]	; 0x28
 8014b14:	f898 3000 	ldrb.w	r3, [r8]
 8014b18:	2b2f      	cmp	r3, #47	; 0x2f
 8014b1a:	d109      	bne.n	8014b30 <_tzset_unlocked_r+0x208>
 8014b1c:	e9cd a602 	strd	sl, r6, [sp, #8]
 8014b20:	e9cd b600 	strd	fp, r6, [sp]
 8014b24:	493e      	ldr	r1, [pc, #248]	; (8014c20 <_tzset_unlocked_r+0x2f8>)
 8014b26:	4633      	mov	r3, r6
 8014b28:	aa07      	add	r2, sp, #28
 8014b2a:	4640      	mov	r0, r8
 8014b2c:	f000 fe66 	bl	80157fc <siscanf>
 8014b30:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8014b34:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8014b38:	213c      	movs	r1, #60	; 0x3c
 8014b3a:	fb01 3302 	mla	r3, r1, r2, r3
 8014b3e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8014b42:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8014b46:	fb01 3302 	mla	r3, r1, r2, r3
 8014b4a:	61bb      	str	r3, [r7, #24]
 8014b4c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014b4e:	3728      	adds	r7, #40	; 0x28
 8014b50:	4444      	add	r4, r8
 8014b52:	f1b9 0f00 	cmp.w	r9, #0
 8014b56:	d020      	beq.n	8014b9a <_tzset_unlocked_r+0x272>
 8014b58:	6868      	ldr	r0, [r5, #4]
 8014b5a:	f7ff fe29 	bl	80147b0 <__tzcalc_limits>
 8014b5e:	4b28      	ldr	r3, [pc, #160]	; (8014c00 <_tzset_unlocked_r+0x2d8>)
 8014b60:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8014b62:	601a      	str	r2, [r3, #0]
 8014b64:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8014b66:	1a9b      	subs	r3, r3, r2
 8014b68:	4a27      	ldr	r2, [pc, #156]	; (8014c08 <_tzset_unlocked_r+0x2e0>)
 8014b6a:	bf18      	it	ne
 8014b6c:	2301      	movne	r3, #1
 8014b6e:	6013      	str	r3, [r2, #0]
 8014b70:	e6f4      	b.n	801495c <_tzset_unlocked_r+0x34>
 8014b72:	2b2b      	cmp	r3, #43	; 0x2b
 8014b74:	bf08      	it	eq
 8014b76:	3401      	addeq	r4, #1
 8014b78:	2701      	movs	r7, #1
 8014b7a:	e772      	b.n	8014a62 <_tzset_unlocked_r+0x13a>
 8014b7c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8014b80:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8014b84:	213c      	movs	r1, #60	; 0x3c
 8014b86:	fb01 3302 	mla	r3, r1, r2, r3
 8014b8a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8014b8e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8014b92:	fb01 3302 	mla	r3, r1, r2, r3
 8014b96:	437b      	muls	r3, r7
 8014b98:	e77a      	b.n	8014a90 <_tzset_unlocked_r+0x168>
 8014b9a:	f04f 0901 	mov.w	r9, #1
 8014b9e:	e77d      	b.n	8014a9c <_tzset_unlocked_r+0x174>
 8014ba0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8014ba4:	bf06      	itte	eq
 8014ba6:	3401      	addeq	r4, #1
 8014ba8:	4643      	moveq	r3, r8
 8014baa:	2344      	movne	r3, #68	; 0x44
 8014bac:	220a      	movs	r2, #10
 8014bae:	a90b      	add	r1, sp, #44	; 0x2c
 8014bb0:	4620      	mov	r0, r4
 8014bb2:	9305      	str	r3, [sp, #20]
 8014bb4:	f000 fede 	bl	8015974 <strtoul>
 8014bb8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8014bbc:	9b05      	ldr	r3, [sp, #20]
 8014bbe:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8014bc2:	45a0      	cmp	r8, r4
 8014bc4:	d114      	bne.n	8014bf0 <_tzset_unlocked_r+0x2c8>
 8014bc6:	234d      	movs	r3, #77	; 0x4d
 8014bc8:	f1b9 0f00 	cmp.w	r9, #0
 8014bcc:	d107      	bne.n	8014bde <_tzset_unlocked_r+0x2b6>
 8014bce:	722b      	strb	r3, [r5, #8]
 8014bd0:	2103      	movs	r1, #3
 8014bd2:	2302      	movs	r3, #2
 8014bd4:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8014bd8:	f8c5 9014 	str.w	r9, [r5, #20]
 8014bdc:	e791      	b.n	8014b02 <_tzset_unlocked_r+0x1da>
 8014bde:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8014be2:	220b      	movs	r2, #11
 8014be4:	2301      	movs	r3, #1
 8014be6:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8014bea:	2300      	movs	r3, #0
 8014bec:	63eb      	str	r3, [r5, #60]	; 0x3c
 8014bee:	e788      	b.n	8014b02 <_tzset_unlocked_r+0x1da>
 8014bf0:	b280      	uxth	r0, r0
 8014bf2:	723b      	strb	r3, [r7, #8]
 8014bf4:	6178      	str	r0, [r7, #20]
 8014bf6:	e784      	b.n	8014b02 <_tzset_unlocked_r+0x1da>
 8014bf8:	08016dd8 	.word	0x08016dd8
 8014bfc:	2000ccb4 	.word	0x2000ccb4
 8014c00:	2000ccbc 	.word	0x2000ccbc
 8014c04:	08016ddb 	.word	0x08016ddb
 8014c08:	2000ccb8 	.word	0x2000ccb8
 8014c0c:	20000318 	.word	0x20000318
 8014c10:	2000cca7 	.word	0x2000cca7
 8014c14:	08016ddf 	.word	0x08016ddf
 8014c18:	08016e02 	.word	0x08016e02
 8014c1c:	08016dee 	.word	0x08016dee
 8014c20:	08016e01 	.word	0x08016e01
 8014c24:	2000cc9c 	.word	0x2000cc9c

08014c28 <_write_r>:
 8014c28:	b538      	push	{r3, r4, r5, lr}
 8014c2a:	4d07      	ldr	r5, [pc, #28]	; (8014c48 <_write_r+0x20>)
 8014c2c:	4604      	mov	r4, r0
 8014c2e:	4608      	mov	r0, r1
 8014c30:	4611      	mov	r1, r2
 8014c32:	2200      	movs	r2, #0
 8014c34:	602a      	str	r2, [r5, #0]
 8014c36:	461a      	mov	r2, r3
 8014c38:	f7ed fce7 	bl	800260a <_write>
 8014c3c:	1c43      	adds	r3, r0, #1
 8014c3e:	d102      	bne.n	8014c46 <_write_r+0x1e>
 8014c40:	682b      	ldr	r3, [r5, #0]
 8014c42:	b103      	cbz	r3, 8014c46 <_write_r+0x1e>
 8014c44:	6023      	str	r3, [r4, #0]
 8014c46:	bd38      	pop	{r3, r4, r5, pc}
 8014c48:	2000cc98 	.word	0x2000cc98

08014c4c <__assert_func>:
 8014c4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014c4e:	4614      	mov	r4, r2
 8014c50:	461a      	mov	r2, r3
 8014c52:	4b09      	ldr	r3, [pc, #36]	; (8014c78 <__assert_func+0x2c>)
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	4605      	mov	r5, r0
 8014c58:	68d8      	ldr	r0, [r3, #12]
 8014c5a:	b14c      	cbz	r4, 8014c70 <__assert_func+0x24>
 8014c5c:	4b07      	ldr	r3, [pc, #28]	; (8014c7c <__assert_func+0x30>)
 8014c5e:	9100      	str	r1, [sp, #0]
 8014c60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014c64:	4906      	ldr	r1, [pc, #24]	; (8014c80 <__assert_func+0x34>)
 8014c66:	462b      	mov	r3, r5
 8014c68:	f000 f8f4 	bl	8014e54 <fiprintf>
 8014c6c:	f000 ff4c 	bl	8015b08 <abort>
 8014c70:	4b04      	ldr	r3, [pc, #16]	; (8014c84 <__assert_func+0x38>)
 8014c72:	461c      	mov	r4, r3
 8014c74:	e7f3      	b.n	8014c5e <__assert_func+0x12>
 8014c76:	bf00      	nop
 8014c78:	200002b4 	.word	0x200002b4
 8014c7c:	08016e14 	.word	0x08016e14
 8014c80:	08016e21 	.word	0x08016e21
 8014c84:	08016e4f 	.word	0x08016e4f

08014c88 <_close_r>:
 8014c88:	b538      	push	{r3, r4, r5, lr}
 8014c8a:	4d06      	ldr	r5, [pc, #24]	; (8014ca4 <_close_r+0x1c>)
 8014c8c:	2300      	movs	r3, #0
 8014c8e:	4604      	mov	r4, r0
 8014c90:	4608      	mov	r0, r1
 8014c92:	602b      	str	r3, [r5, #0]
 8014c94:	f7ed fcd5 	bl	8002642 <_close>
 8014c98:	1c43      	adds	r3, r0, #1
 8014c9a:	d102      	bne.n	8014ca2 <_close_r+0x1a>
 8014c9c:	682b      	ldr	r3, [r5, #0]
 8014c9e:	b103      	cbz	r3, 8014ca2 <_close_r+0x1a>
 8014ca0:	6023      	str	r3, [r4, #0]
 8014ca2:	bd38      	pop	{r3, r4, r5, pc}
 8014ca4:	2000cc98 	.word	0x2000cc98

08014ca8 <div>:
 8014ca8:	2900      	cmp	r1, #0
 8014caa:	b510      	push	{r4, lr}
 8014cac:	fb91 f4f2 	sdiv	r4, r1, r2
 8014cb0:	fb02 1314 	mls	r3, r2, r4, r1
 8014cb4:	db06      	blt.n	8014cc4 <div+0x1c>
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	da01      	bge.n	8014cbe <div+0x16>
 8014cba:	3401      	adds	r4, #1
 8014cbc:	1a9b      	subs	r3, r3, r2
 8014cbe:	e9c0 4300 	strd	r4, r3, [r0]
 8014cc2:	bd10      	pop	{r4, pc}
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	bfc4      	itt	gt
 8014cc8:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8014ccc:	189b      	addgt	r3, r3, r2
 8014cce:	e7f6      	b.n	8014cbe <div+0x16>

08014cd0 <__sflush_r>:
 8014cd0:	898a      	ldrh	r2, [r1, #12]
 8014cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cd6:	4605      	mov	r5, r0
 8014cd8:	0710      	lsls	r0, r2, #28
 8014cda:	460c      	mov	r4, r1
 8014cdc:	d458      	bmi.n	8014d90 <__sflush_r+0xc0>
 8014cde:	684b      	ldr	r3, [r1, #4]
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	dc05      	bgt.n	8014cf0 <__sflush_r+0x20>
 8014ce4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	dc02      	bgt.n	8014cf0 <__sflush_r+0x20>
 8014cea:	2000      	movs	r0, #0
 8014cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014cf2:	2e00      	cmp	r6, #0
 8014cf4:	d0f9      	beq.n	8014cea <__sflush_r+0x1a>
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014cfc:	682f      	ldr	r7, [r5, #0]
 8014cfe:	602b      	str	r3, [r5, #0]
 8014d00:	d032      	beq.n	8014d68 <__sflush_r+0x98>
 8014d02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014d04:	89a3      	ldrh	r3, [r4, #12]
 8014d06:	075a      	lsls	r2, r3, #29
 8014d08:	d505      	bpl.n	8014d16 <__sflush_r+0x46>
 8014d0a:	6863      	ldr	r3, [r4, #4]
 8014d0c:	1ac0      	subs	r0, r0, r3
 8014d0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014d10:	b10b      	cbz	r3, 8014d16 <__sflush_r+0x46>
 8014d12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014d14:	1ac0      	subs	r0, r0, r3
 8014d16:	2300      	movs	r3, #0
 8014d18:	4602      	mov	r2, r0
 8014d1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014d1c:	6a21      	ldr	r1, [r4, #32]
 8014d1e:	4628      	mov	r0, r5
 8014d20:	47b0      	blx	r6
 8014d22:	1c43      	adds	r3, r0, #1
 8014d24:	89a3      	ldrh	r3, [r4, #12]
 8014d26:	d106      	bne.n	8014d36 <__sflush_r+0x66>
 8014d28:	6829      	ldr	r1, [r5, #0]
 8014d2a:	291d      	cmp	r1, #29
 8014d2c:	d82c      	bhi.n	8014d88 <__sflush_r+0xb8>
 8014d2e:	4a2a      	ldr	r2, [pc, #168]	; (8014dd8 <__sflush_r+0x108>)
 8014d30:	40ca      	lsrs	r2, r1
 8014d32:	07d6      	lsls	r6, r2, #31
 8014d34:	d528      	bpl.n	8014d88 <__sflush_r+0xb8>
 8014d36:	2200      	movs	r2, #0
 8014d38:	6062      	str	r2, [r4, #4]
 8014d3a:	04d9      	lsls	r1, r3, #19
 8014d3c:	6922      	ldr	r2, [r4, #16]
 8014d3e:	6022      	str	r2, [r4, #0]
 8014d40:	d504      	bpl.n	8014d4c <__sflush_r+0x7c>
 8014d42:	1c42      	adds	r2, r0, #1
 8014d44:	d101      	bne.n	8014d4a <__sflush_r+0x7a>
 8014d46:	682b      	ldr	r3, [r5, #0]
 8014d48:	b903      	cbnz	r3, 8014d4c <__sflush_r+0x7c>
 8014d4a:	6560      	str	r0, [r4, #84]	; 0x54
 8014d4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014d4e:	602f      	str	r7, [r5, #0]
 8014d50:	2900      	cmp	r1, #0
 8014d52:	d0ca      	beq.n	8014cea <__sflush_r+0x1a>
 8014d54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014d58:	4299      	cmp	r1, r3
 8014d5a:	d002      	beq.n	8014d62 <__sflush_r+0x92>
 8014d5c:	4628      	mov	r0, r5
 8014d5e:	f7ff fa7d 	bl	801425c <_free_r>
 8014d62:	2000      	movs	r0, #0
 8014d64:	6360      	str	r0, [r4, #52]	; 0x34
 8014d66:	e7c1      	b.n	8014cec <__sflush_r+0x1c>
 8014d68:	6a21      	ldr	r1, [r4, #32]
 8014d6a:	2301      	movs	r3, #1
 8014d6c:	4628      	mov	r0, r5
 8014d6e:	47b0      	blx	r6
 8014d70:	1c41      	adds	r1, r0, #1
 8014d72:	d1c7      	bne.n	8014d04 <__sflush_r+0x34>
 8014d74:	682b      	ldr	r3, [r5, #0]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d0c4      	beq.n	8014d04 <__sflush_r+0x34>
 8014d7a:	2b1d      	cmp	r3, #29
 8014d7c:	d001      	beq.n	8014d82 <__sflush_r+0xb2>
 8014d7e:	2b16      	cmp	r3, #22
 8014d80:	d101      	bne.n	8014d86 <__sflush_r+0xb6>
 8014d82:	602f      	str	r7, [r5, #0]
 8014d84:	e7b1      	b.n	8014cea <__sflush_r+0x1a>
 8014d86:	89a3      	ldrh	r3, [r4, #12]
 8014d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d8c:	81a3      	strh	r3, [r4, #12]
 8014d8e:	e7ad      	b.n	8014cec <__sflush_r+0x1c>
 8014d90:	690f      	ldr	r7, [r1, #16]
 8014d92:	2f00      	cmp	r7, #0
 8014d94:	d0a9      	beq.n	8014cea <__sflush_r+0x1a>
 8014d96:	0793      	lsls	r3, r2, #30
 8014d98:	680e      	ldr	r6, [r1, #0]
 8014d9a:	bf08      	it	eq
 8014d9c:	694b      	ldreq	r3, [r1, #20]
 8014d9e:	600f      	str	r7, [r1, #0]
 8014da0:	bf18      	it	ne
 8014da2:	2300      	movne	r3, #0
 8014da4:	eba6 0807 	sub.w	r8, r6, r7
 8014da8:	608b      	str	r3, [r1, #8]
 8014daa:	f1b8 0f00 	cmp.w	r8, #0
 8014dae:	dd9c      	ble.n	8014cea <__sflush_r+0x1a>
 8014db0:	6a21      	ldr	r1, [r4, #32]
 8014db2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014db4:	4643      	mov	r3, r8
 8014db6:	463a      	mov	r2, r7
 8014db8:	4628      	mov	r0, r5
 8014dba:	47b0      	blx	r6
 8014dbc:	2800      	cmp	r0, #0
 8014dbe:	dc06      	bgt.n	8014dce <__sflush_r+0xfe>
 8014dc0:	89a3      	ldrh	r3, [r4, #12]
 8014dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014dc6:	81a3      	strh	r3, [r4, #12]
 8014dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8014dcc:	e78e      	b.n	8014cec <__sflush_r+0x1c>
 8014dce:	4407      	add	r7, r0
 8014dd0:	eba8 0800 	sub.w	r8, r8, r0
 8014dd4:	e7e9      	b.n	8014daa <__sflush_r+0xda>
 8014dd6:	bf00      	nop
 8014dd8:	20400001 	.word	0x20400001

08014ddc <_fflush_r>:
 8014ddc:	b538      	push	{r3, r4, r5, lr}
 8014dde:	690b      	ldr	r3, [r1, #16]
 8014de0:	4605      	mov	r5, r0
 8014de2:	460c      	mov	r4, r1
 8014de4:	b913      	cbnz	r3, 8014dec <_fflush_r+0x10>
 8014de6:	2500      	movs	r5, #0
 8014de8:	4628      	mov	r0, r5
 8014dea:	bd38      	pop	{r3, r4, r5, pc}
 8014dec:	b118      	cbz	r0, 8014df6 <_fflush_r+0x1a>
 8014dee:	6983      	ldr	r3, [r0, #24]
 8014df0:	b90b      	cbnz	r3, 8014df6 <_fflush_r+0x1a>
 8014df2:	f7fe fed3 	bl	8013b9c <__sinit>
 8014df6:	4b14      	ldr	r3, [pc, #80]	; (8014e48 <_fflush_r+0x6c>)
 8014df8:	429c      	cmp	r4, r3
 8014dfa:	d11b      	bne.n	8014e34 <_fflush_r+0x58>
 8014dfc:	686c      	ldr	r4, [r5, #4]
 8014dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d0ef      	beq.n	8014de6 <_fflush_r+0xa>
 8014e06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014e08:	07d0      	lsls	r0, r2, #31
 8014e0a:	d404      	bmi.n	8014e16 <_fflush_r+0x3a>
 8014e0c:	0599      	lsls	r1, r3, #22
 8014e0e:	d402      	bmi.n	8014e16 <_fflush_r+0x3a>
 8014e10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014e12:	f7fe ff87 	bl	8013d24 <__retarget_lock_acquire_recursive>
 8014e16:	4628      	mov	r0, r5
 8014e18:	4621      	mov	r1, r4
 8014e1a:	f7ff ff59 	bl	8014cd0 <__sflush_r>
 8014e1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014e20:	07da      	lsls	r2, r3, #31
 8014e22:	4605      	mov	r5, r0
 8014e24:	d4e0      	bmi.n	8014de8 <_fflush_r+0xc>
 8014e26:	89a3      	ldrh	r3, [r4, #12]
 8014e28:	059b      	lsls	r3, r3, #22
 8014e2a:	d4dd      	bmi.n	8014de8 <_fflush_r+0xc>
 8014e2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014e2e:	f7fe ff7b 	bl	8013d28 <__retarget_lock_release_recursive>
 8014e32:	e7d9      	b.n	8014de8 <_fflush_r+0xc>
 8014e34:	4b05      	ldr	r3, [pc, #20]	; (8014e4c <_fflush_r+0x70>)
 8014e36:	429c      	cmp	r4, r3
 8014e38:	d101      	bne.n	8014e3e <_fflush_r+0x62>
 8014e3a:	68ac      	ldr	r4, [r5, #8]
 8014e3c:	e7df      	b.n	8014dfe <_fflush_r+0x22>
 8014e3e:	4b04      	ldr	r3, [pc, #16]	; (8014e50 <_fflush_r+0x74>)
 8014e40:	429c      	cmp	r4, r3
 8014e42:	bf08      	it	eq
 8014e44:	68ec      	ldreq	r4, [r5, #12]
 8014e46:	e7da      	b.n	8014dfe <_fflush_r+0x22>
 8014e48:	08016cc0 	.word	0x08016cc0
 8014e4c:	08016ce0 	.word	0x08016ce0
 8014e50:	08016ca0 	.word	0x08016ca0

08014e54 <fiprintf>:
 8014e54:	b40e      	push	{r1, r2, r3}
 8014e56:	b503      	push	{r0, r1, lr}
 8014e58:	4601      	mov	r1, r0
 8014e5a:	ab03      	add	r3, sp, #12
 8014e5c:	4805      	ldr	r0, [pc, #20]	; (8014e74 <fiprintf+0x20>)
 8014e5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e62:	6800      	ldr	r0, [r0, #0]
 8014e64:	9301      	str	r3, [sp, #4]
 8014e66:	f000 f9f3 	bl	8015250 <_vfiprintf_r>
 8014e6a:	b002      	add	sp, #8
 8014e6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014e70:	b003      	add	sp, #12
 8014e72:	4770      	bx	lr
 8014e74:	200002b4 	.word	0x200002b4

08014e78 <_findenv_r>:
 8014e78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e7c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8014eec <_findenv_r+0x74>
 8014e80:	4607      	mov	r7, r0
 8014e82:	4689      	mov	r9, r1
 8014e84:	4616      	mov	r6, r2
 8014e86:	f000 fe47 	bl	8015b18 <__env_lock>
 8014e8a:	f8da 4000 	ldr.w	r4, [sl]
 8014e8e:	b134      	cbz	r4, 8014e9e <_findenv_r+0x26>
 8014e90:	464b      	mov	r3, r9
 8014e92:	4698      	mov	r8, r3
 8014e94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014e98:	b13a      	cbz	r2, 8014eaa <_findenv_r+0x32>
 8014e9a:	2a3d      	cmp	r2, #61	; 0x3d
 8014e9c:	d1f9      	bne.n	8014e92 <_findenv_r+0x1a>
 8014e9e:	4638      	mov	r0, r7
 8014ea0:	f000 fe40 	bl	8015b24 <__env_unlock>
 8014ea4:	2000      	movs	r0, #0
 8014ea6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eaa:	eba8 0809 	sub.w	r8, r8, r9
 8014eae:	46a3      	mov	fp, r4
 8014eb0:	f854 0b04 	ldr.w	r0, [r4], #4
 8014eb4:	2800      	cmp	r0, #0
 8014eb6:	d0f2      	beq.n	8014e9e <_findenv_r+0x26>
 8014eb8:	4642      	mov	r2, r8
 8014eba:	4649      	mov	r1, r9
 8014ebc:	f000 fcd2 	bl	8015864 <strncmp>
 8014ec0:	2800      	cmp	r0, #0
 8014ec2:	d1f4      	bne.n	8014eae <_findenv_r+0x36>
 8014ec4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014ec8:	eb03 0508 	add.w	r5, r3, r8
 8014ecc:	f813 3008 	ldrb.w	r3, [r3, r8]
 8014ed0:	2b3d      	cmp	r3, #61	; 0x3d
 8014ed2:	d1ec      	bne.n	8014eae <_findenv_r+0x36>
 8014ed4:	f8da 3000 	ldr.w	r3, [sl]
 8014ed8:	ebab 0303 	sub.w	r3, fp, r3
 8014edc:	109b      	asrs	r3, r3, #2
 8014ede:	4638      	mov	r0, r7
 8014ee0:	6033      	str	r3, [r6, #0]
 8014ee2:	f000 fe1f 	bl	8015b24 <__env_unlock>
 8014ee6:	1c68      	adds	r0, r5, #1
 8014ee8:	e7dd      	b.n	8014ea6 <_findenv_r+0x2e>
 8014eea:	bf00      	nop
 8014eec:	20000230 	.word	0x20000230

08014ef0 <_getenv_r>:
 8014ef0:	b507      	push	{r0, r1, r2, lr}
 8014ef2:	aa01      	add	r2, sp, #4
 8014ef4:	f7ff ffc0 	bl	8014e78 <_findenv_r>
 8014ef8:	b003      	add	sp, #12
 8014efa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08014f00 <__gettzinfo>:
 8014f00:	4800      	ldr	r0, [pc, #0]	; (8014f04 <__gettzinfo+0x4>)
 8014f02:	4770      	bx	lr
 8014f04:	20000320 	.word	0x20000320

08014f08 <_lseek_r>:
 8014f08:	b538      	push	{r3, r4, r5, lr}
 8014f0a:	4d07      	ldr	r5, [pc, #28]	; (8014f28 <_lseek_r+0x20>)
 8014f0c:	4604      	mov	r4, r0
 8014f0e:	4608      	mov	r0, r1
 8014f10:	4611      	mov	r1, r2
 8014f12:	2200      	movs	r2, #0
 8014f14:	602a      	str	r2, [r5, #0]
 8014f16:	461a      	mov	r2, r3
 8014f18:	f7ed fbba 	bl	8002690 <_lseek>
 8014f1c:	1c43      	adds	r3, r0, #1
 8014f1e:	d102      	bne.n	8014f26 <_lseek_r+0x1e>
 8014f20:	682b      	ldr	r3, [r5, #0]
 8014f22:	b103      	cbz	r3, 8014f26 <_lseek_r+0x1e>
 8014f24:	6023      	str	r3, [r4, #0]
 8014f26:	bd38      	pop	{r3, r4, r5, pc}
 8014f28:	2000cc98 	.word	0x2000cc98

08014f2c <__malloc_lock>:
 8014f2c:	4801      	ldr	r0, [pc, #4]	; (8014f34 <__malloc_lock+0x8>)
 8014f2e:	f7fe bef9 	b.w	8013d24 <__retarget_lock_acquire_recursive>
 8014f32:	bf00      	nop
 8014f34:	2000cc89 	.word	0x2000cc89

08014f38 <__malloc_unlock>:
 8014f38:	4801      	ldr	r0, [pc, #4]	; (8014f40 <__malloc_unlock+0x8>)
 8014f3a:	f7fe bef5 	b.w	8013d28 <__retarget_lock_release_recursive>
 8014f3e:	bf00      	nop
 8014f40:	2000cc89 	.word	0x2000cc89

08014f44 <__ssputs_r>:
 8014f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f48:	688e      	ldr	r6, [r1, #8]
 8014f4a:	429e      	cmp	r6, r3
 8014f4c:	4682      	mov	sl, r0
 8014f4e:	460c      	mov	r4, r1
 8014f50:	4690      	mov	r8, r2
 8014f52:	461f      	mov	r7, r3
 8014f54:	d838      	bhi.n	8014fc8 <__ssputs_r+0x84>
 8014f56:	898a      	ldrh	r2, [r1, #12]
 8014f58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014f5c:	d032      	beq.n	8014fc4 <__ssputs_r+0x80>
 8014f5e:	6825      	ldr	r5, [r4, #0]
 8014f60:	6909      	ldr	r1, [r1, #16]
 8014f62:	eba5 0901 	sub.w	r9, r5, r1
 8014f66:	6965      	ldr	r5, [r4, #20]
 8014f68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014f6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014f70:	3301      	adds	r3, #1
 8014f72:	444b      	add	r3, r9
 8014f74:	106d      	asrs	r5, r5, #1
 8014f76:	429d      	cmp	r5, r3
 8014f78:	bf38      	it	cc
 8014f7a:	461d      	movcc	r5, r3
 8014f7c:	0553      	lsls	r3, r2, #21
 8014f7e:	d531      	bpl.n	8014fe4 <__ssputs_r+0xa0>
 8014f80:	4629      	mov	r1, r5
 8014f82:	f7ff f9d7 	bl	8014334 <_malloc_r>
 8014f86:	4606      	mov	r6, r0
 8014f88:	b950      	cbnz	r0, 8014fa0 <__ssputs_r+0x5c>
 8014f8a:	230c      	movs	r3, #12
 8014f8c:	f8ca 3000 	str.w	r3, [sl]
 8014f90:	89a3      	ldrh	r3, [r4, #12]
 8014f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f96:	81a3      	strh	r3, [r4, #12]
 8014f98:	f04f 30ff 	mov.w	r0, #4294967295
 8014f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fa0:	6921      	ldr	r1, [r4, #16]
 8014fa2:	464a      	mov	r2, r9
 8014fa4:	f7fe fed2 	bl	8013d4c <memcpy>
 8014fa8:	89a3      	ldrh	r3, [r4, #12]
 8014faa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014fb2:	81a3      	strh	r3, [r4, #12]
 8014fb4:	6126      	str	r6, [r4, #16]
 8014fb6:	6165      	str	r5, [r4, #20]
 8014fb8:	444e      	add	r6, r9
 8014fba:	eba5 0509 	sub.w	r5, r5, r9
 8014fbe:	6026      	str	r6, [r4, #0]
 8014fc0:	60a5      	str	r5, [r4, #8]
 8014fc2:	463e      	mov	r6, r7
 8014fc4:	42be      	cmp	r6, r7
 8014fc6:	d900      	bls.n	8014fca <__ssputs_r+0x86>
 8014fc8:	463e      	mov	r6, r7
 8014fca:	6820      	ldr	r0, [r4, #0]
 8014fcc:	4632      	mov	r2, r6
 8014fce:	4641      	mov	r1, r8
 8014fd0:	f000 fe14 	bl	8015bfc <memmove>
 8014fd4:	68a3      	ldr	r3, [r4, #8]
 8014fd6:	1b9b      	subs	r3, r3, r6
 8014fd8:	60a3      	str	r3, [r4, #8]
 8014fda:	6823      	ldr	r3, [r4, #0]
 8014fdc:	4433      	add	r3, r6
 8014fde:	6023      	str	r3, [r4, #0]
 8014fe0:	2000      	movs	r0, #0
 8014fe2:	e7db      	b.n	8014f9c <__ssputs_r+0x58>
 8014fe4:	462a      	mov	r2, r5
 8014fe6:	f000 fe23 	bl	8015c30 <_realloc_r>
 8014fea:	4606      	mov	r6, r0
 8014fec:	2800      	cmp	r0, #0
 8014fee:	d1e1      	bne.n	8014fb4 <__ssputs_r+0x70>
 8014ff0:	6921      	ldr	r1, [r4, #16]
 8014ff2:	4650      	mov	r0, sl
 8014ff4:	f7ff f932 	bl	801425c <_free_r>
 8014ff8:	e7c7      	b.n	8014f8a <__ssputs_r+0x46>
	...

08014ffc <_svfiprintf_r>:
 8014ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015000:	4698      	mov	r8, r3
 8015002:	898b      	ldrh	r3, [r1, #12]
 8015004:	061b      	lsls	r3, r3, #24
 8015006:	b09d      	sub	sp, #116	; 0x74
 8015008:	4607      	mov	r7, r0
 801500a:	460d      	mov	r5, r1
 801500c:	4614      	mov	r4, r2
 801500e:	d50e      	bpl.n	801502e <_svfiprintf_r+0x32>
 8015010:	690b      	ldr	r3, [r1, #16]
 8015012:	b963      	cbnz	r3, 801502e <_svfiprintf_r+0x32>
 8015014:	2140      	movs	r1, #64	; 0x40
 8015016:	f7ff f98d 	bl	8014334 <_malloc_r>
 801501a:	6028      	str	r0, [r5, #0]
 801501c:	6128      	str	r0, [r5, #16]
 801501e:	b920      	cbnz	r0, 801502a <_svfiprintf_r+0x2e>
 8015020:	230c      	movs	r3, #12
 8015022:	603b      	str	r3, [r7, #0]
 8015024:	f04f 30ff 	mov.w	r0, #4294967295
 8015028:	e0d1      	b.n	80151ce <_svfiprintf_r+0x1d2>
 801502a:	2340      	movs	r3, #64	; 0x40
 801502c:	616b      	str	r3, [r5, #20]
 801502e:	2300      	movs	r3, #0
 8015030:	9309      	str	r3, [sp, #36]	; 0x24
 8015032:	2320      	movs	r3, #32
 8015034:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015038:	f8cd 800c 	str.w	r8, [sp, #12]
 801503c:	2330      	movs	r3, #48	; 0x30
 801503e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80151e8 <_svfiprintf_r+0x1ec>
 8015042:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015046:	f04f 0901 	mov.w	r9, #1
 801504a:	4623      	mov	r3, r4
 801504c:	469a      	mov	sl, r3
 801504e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015052:	b10a      	cbz	r2, 8015058 <_svfiprintf_r+0x5c>
 8015054:	2a25      	cmp	r2, #37	; 0x25
 8015056:	d1f9      	bne.n	801504c <_svfiprintf_r+0x50>
 8015058:	ebba 0b04 	subs.w	fp, sl, r4
 801505c:	d00b      	beq.n	8015076 <_svfiprintf_r+0x7a>
 801505e:	465b      	mov	r3, fp
 8015060:	4622      	mov	r2, r4
 8015062:	4629      	mov	r1, r5
 8015064:	4638      	mov	r0, r7
 8015066:	f7ff ff6d 	bl	8014f44 <__ssputs_r>
 801506a:	3001      	adds	r0, #1
 801506c:	f000 80aa 	beq.w	80151c4 <_svfiprintf_r+0x1c8>
 8015070:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015072:	445a      	add	r2, fp
 8015074:	9209      	str	r2, [sp, #36]	; 0x24
 8015076:	f89a 3000 	ldrb.w	r3, [sl]
 801507a:	2b00      	cmp	r3, #0
 801507c:	f000 80a2 	beq.w	80151c4 <_svfiprintf_r+0x1c8>
 8015080:	2300      	movs	r3, #0
 8015082:	f04f 32ff 	mov.w	r2, #4294967295
 8015086:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801508a:	f10a 0a01 	add.w	sl, sl, #1
 801508e:	9304      	str	r3, [sp, #16]
 8015090:	9307      	str	r3, [sp, #28]
 8015092:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015096:	931a      	str	r3, [sp, #104]	; 0x68
 8015098:	4654      	mov	r4, sl
 801509a:	2205      	movs	r2, #5
 801509c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80150a0:	4851      	ldr	r0, [pc, #324]	; (80151e8 <_svfiprintf_r+0x1ec>)
 80150a2:	f7eb f8ad 	bl	8000200 <memchr>
 80150a6:	9a04      	ldr	r2, [sp, #16]
 80150a8:	b9d8      	cbnz	r0, 80150e2 <_svfiprintf_r+0xe6>
 80150aa:	06d0      	lsls	r0, r2, #27
 80150ac:	bf44      	itt	mi
 80150ae:	2320      	movmi	r3, #32
 80150b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80150b4:	0711      	lsls	r1, r2, #28
 80150b6:	bf44      	itt	mi
 80150b8:	232b      	movmi	r3, #43	; 0x2b
 80150ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80150be:	f89a 3000 	ldrb.w	r3, [sl]
 80150c2:	2b2a      	cmp	r3, #42	; 0x2a
 80150c4:	d015      	beq.n	80150f2 <_svfiprintf_r+0xf6>
 80150c6:	9a07      	ldr	r2, [sp, #28]
 80150c8:	4654      	mov	r4, sl
 80150ca:	2000      	movs	r0, #0
 80150cc:	f04f 0c0a 	mov.w	ip, #10
 80150d0:	4621      	mov	r1, r4
 80150d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80150d6:	3b30      	subs	r3, #48	; 0x30
 80150d8:	2b09      	cmp	r3, #9
 80150da:	d94e      	bls.n	801517a <_svfiprintf_r+0x17e>
 80150dc:	b1b0      	cbz	r0, 801510c <_svfiprintf_r+0x110>
 80150de:	9207      	str	r2, [sp, #28]
 80150e0:	e014      	b.n	801510c <_svfiprintf_r+0x110>
 80150e2:	eba0 0308 	sub.w	r3, r0, r8
 80150e6:	fa09 f303 	lsl.w	r3, r9, r3
 80150ea:	4313      	orrs	r3, r2
 80150ec:	9304      	str	r3, [sp, #16]
 80150ee:	46a2      	mov	sl, r4
 80150f0:	e7d2      	b.n	8015098 <_svfiprintf_r+0x9c>
 80150f2:	9b03      	ldr	r3, [sp, #12]
 80150f4:	1d19      	adds	r1, r3, #4
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	9103      	str	r1, [sp, #12]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	bfbb      	ittet	lt
 80150fe:	425b      	neglt	r3, r3
 8015100:	f042 0202 	orrlt.w	r2, r2, #2
 8015104:	9307      	strge	r3, [sp, #28]
 8015106:	9307      	strlt	r3, [sp, #28]
 8015108:	bfb8      	it	lt
 801510a:	9204      	strlt	r2, [sp, #16]
 801510c:	7823      	ldrb	r3, [r4, #0]
 801510e:	2b2e      	cmp	r3, #46	; 0x2e
 8015110:	d10c      	bne.n	801512c <_svfiprintf_r+0x130>
 8015112:	7863      	ldrb	r3, [r4, #1]
 8015114:	2b2a      	cmp	r3, #42	; 0x2a
 8015116:	d135      	bne.n	8015184 <_svfiprintf_r+0x188>
 8015118:	9b03      	ldr	r3, [sp, #12]
 801511a:	1d1a      	adds	r2, r3, #4
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	9203      	str	r2, [sp, #12]
 8015120:	2b00      	cmp	r3, #0
 8015122:	bfb8      	it	lt
 8015124:	f04f 33ff 	movlt.w	r3, #4294967295
 8015128:	3402      	adds	r4, #2
 801512a:	9305      	str	r3, [sp, #20]
 801512c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80151f8 <_svfiprintf_r+0x1fc>
 8015130:	7821      	ldrb	r1, [r4, #0]
 8015132:	2203      	movs	r2, #3
 8015134:	4650      	mov	r0, sl
 8015136:	f7eb f863 	bl	8000200 <memchr>
 801513a:	b140      	cbz	r0, 801514e <_svfiprintf_r+0x152>
 801513c:	2340      	movs	r3, #64	; 0x40
 801513e:	eba0 000a 	sub.w	r0, r0, sl
 8015142:	fa03 f000 	lsl.w	r0, r3, r0
 8015146:	9b04      	ldr	r3, [sp, #16]
 8015148:	4303      	orrs	r3, r0
 801514a:	3401      	adds	r4, #1
 801514c:	9304      	str	r3, [sp, #16]
 801514e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015152:	4826      	ldr	r0, [pc, #152]	; (80151ec <_svfiprintf_r+0x1f0>)
 8015154:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015158:	2206      	movs	r2, #6
 801515a:	f7eb f851 	bl	8000200 <memchr>
 801515e:	2800      	cmp	r0, #0
 8015160:	d038      	beq.n	80151d4 <_svfiprintf_r+0x1d8>
 8015162:	4b23      	ldr	r3, [pc, #140]	; (80151f0 <_svfiprintf_r+0x1f4>)
 8015164:	bb1b      	cbnz	r3, 80151ae <_svfiprintf_r+0x1b2>
 8015166:	9b03      	ldr	r3, [sp, #12]
 8015168:	3307      	adds	r3, #7
 801516a:	f023 0307 	bic.w	r3, r3, #7
 801516e:	3308      	adds	r3, #8
 8015170:	9303      	str	r3, [sp, #12]
 8015172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015174:	4433      	add	r3, r6
 8015176:	9309      	str	r3, [sp, #36]	; 0x24
 8015178:	e767      	b.n	801504a <_svfiprintf_r+0x4e>
 801517a:	fb0c 3202 	mla	r2, ip, r2, r3
 801517e:	460c      	mov	r4, r1
 8015180:	2001      	movs	r0, #1
 8015182:	e7a5      	b.n	80150d0 <_svfiprintf_r+0xd4>
 8015184:	2300      	movs	r3, #0
 8015186:	3401      	adds	r4, #1
 8015188:	9305      	str	r3, [sp, #20]
 801518a:	4619      	mov	r1, r3
 801518c:	f04f 0c0a 	mov.w	ip, #10
 8015190:	4620      	mov	r0, r4
 8015192:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015196:	3a30      	subs	r2, #48	; 0x30
 8015198:	2a09      	cmp	r2, #9
 801519a:	d903      	bls.n	80151a4 <_svfiprintf_r+0x1a8>
 801519c:	2b00      	cmp	r3, #0
 801519e:	d0c5      	beq.n	801512c <_svfiprintf_r+0x130>
 80151a0:	9105      	str	r1, [sp, #20]
 80151a2:	e7c3      	b.n	801512c <_svfiprintf_r+0x130>
 80151a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80151a8:	4604      	mov	r4, r0
 80151aa:	2301      	movs	r3, #1
 80151ac:	e7f0      	b.n	8015190 <_svfiprintf_r+0x194>
 80151ae:	ab03      	add	r3, sp, #12
 80151b0:	9300      	str	r3, [sp, #0]
 80151b2:	462a      	mov	r2, r5
 80151b4:	4b0f      	ldr	r3, [pc, #60]	; (80151f4 <_svfiprintf_r+0x1f8>)
 80151b6:	a904      	add	r1, sp, #16
 80151b8:	4638      	mov	r0, r7
 80151ba:	f3af 8000 	nop.w
 80151be:	1c42      	adds	r2, r0, #1
 80151c0:	4606      	mov	r6, r0
 80151c2:	d1d6      	bne.n	8015172 <_svfiprintf_r+0x176>
 80151c4:	89ab      	ldrh	r3, [r5, #12]
 80151c6:	065b      	lsls	r3, r3, #25
 80151c8:	f53f af2c 	bmi.w	8015024 <_svfiprintf_r+0x28>
 80151cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80151ce:	b01d      	add	sp, #116	; 0x74
 80151d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151d4:	ab03      	add	r3, sp, #12
 80151d6:	9300      	str	r3, [sp, #0]
 80151d8:	462a      	mov	r2, r5
 80151da:	4b06      	ldr	r3, [pc, #24]	; (80151f4 <_svfiprintf_r+0x1f8>)
 80151dc:	a904      	add	r1, sp, #16
 80151de:	4638      	mov	r0, r7
 80151e0:	f000 f9d4 	bl	801558c <_printf_i>
 80151e4:	e7eb      	b.n	80151be <_svfiprintf_r+0x1c2>
 80151e6:	bf00      	nop
 80151e8:	08016fb4 	.word	0x08016fb4
 80151ec:	08016fbe 	.word	0x08016fbe
 80151f0:	00000000 	.word	0x00000000
 80151f4:	08014f45 	.word	0x08014f45
 80151f8:	08016fba 	.word	0x08016fba

080151fc <__sfputc_r>:
 80151fc:	6893      	ldr	r3, [r2, #8]
 80151fe:	3b01      	subs	r3, #1
 8015200:	2b00      	cmp	r3, #0
 8015202:	b410      	push	{r4}
 8015204:	6093      	str	r3, [r2, #8]
 8015206:	da08      	bge.n	801521a <__sfputc_r+0x1e>
 8015208:	6994      	ldr	r4, [r2, #24]
 801520a:	42a3      	cmp	r3, r4
 801520c:	db01      	blt.n	8015212 <__sfputc_r+0x16>
 801520e:	290a      	cmp	r1, #10
 8015210:	d103      	bne.n	801521a <__sfputc_r+0x1e>
 8015212:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015216:	f000 bbb7 	b.w	8015988 <__swbuf_r>
 801521a:	6813      	ldr	r3, [r2, #0]
 801521c:	1c58      	adds	r0, r3, #1
 801521e:	6010      	str	r0, [r2, #0]
 8015220:	7019      	strb	r1, [r3, #0]
 8015222:	4608      	mov	r0, r1
 8015224:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015228:	4770      	bx	lr

0801522a <__sfputs_r>:
 801522a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801522c:	4606      	mov	r6, r0
 801522e:	460f      	mov	r7, r1
 8015230:	4614      	mov	r4, r2
 8015232:	18d5      	adds	r5, r2, r3
 8015234:	42ac      	cmp	r4, r5
 8015236:	d101      	bne.n	801523c <__sfputs_r+0x12>
 8015238:	2000      	movs	r0, #0
 801523a:	e007      	b.n	801524c <__sfputs_r+0x22>
 801523c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015240:	463a      	mov	r2, r7
 8015242:	4630      	mov	r0, r6
 8015244:	f7ff ffda 	bl	80151fc <__sfputc_r>
 8015248:	1c43      	adds	r3, r0, #1
 801524a:	d1f3      	bne.n	8015234 <__sfputs_r+0xa>
 801524c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015250 <_vfiprintf_r>:
 8015250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015254:	460d      	mov	r5, r1
 8015256:	b09d      	sub	sp, #116	; 0x74
 8015258:	4614      	mov	r4, r2
 801525a:	4698      	mov	r8, r3
 801525c:	4606      	mov	r6, r0
 801525e:	b118      	cbz	r0, 8015268 <_vfiprintf_r+0x18>
 8015260:	6983      	ldr	r3, [r0, #24]
 8015262:	b90b      	cbnz	r3, 8015268 <_vfiprintf_r+0x18>
 8015264:	f7fe fc9a 	bl	8013b9c <__sinit>
 8015268:	4b89      	ldr	r3, [pc, #548]	; (8015490 <_vfiprintf_r+0x240>)
 801526a:	429d      	cmp	r5, r3
 801526c:	d11b      	bne.n	80152a6 <_vfiprintf_r+0x56>
 801526e:	6875      	ldr	r5, [r6, #4]
 8015270:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015272:	07d9      	lsls	r1, r3, #31
 8015274:	d405      	bmi.n	8015282 <_vfiprintf_r+0x32>
 8015276:	89ab      	ldrh	r3, [r5, #12]
 8015278:	059a      	lsls	r2, r3, #22
 801527a:	d402      	bmi.n	8015282 <_vfiprintf_r+0x32>
 801527c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801527e:	f7fe fd51 	bl	8013d24 <__retarget_lock_acquire_recursive>
 8015282:	89ab      	ldrh	r3, [r5, #12]
 8015284:	071b      	lsls	r3, r3, #28
 8015286:	d501      	bpl.n	801528c <_vfiprintf_r+0x3c>
 8015288:	692b      	ldr	r3, [r5, #16]
 801528a:	b9eb      	cbnz	r3, 80152c8 <_vfiprintf_r+0x78>
 801528c:	4629      	mov	r1, r5
 801528e:	4630      	mov	r0, r6
 8015290:	f000 fbcc 	bl	8015a2c <__swsetup_r>
 8015294:	b1c0      	cbz	r0, 80152c8 <_vfiprintf_r+0x78>
 8015296:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015298:	07dc      	lsls	r4, r3, #31
 801529a:	d50e      	bpl.n	80152ba <_vfiprintf_r+0x6a>
 801529c:	f04f 30ff 	mov.w	r0, #4294967295
 80152a0:	b01d      	add	sp, #116	; 0x74
 80152a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152a6:	4b7b      	ldr	r3, [pc, #492]	; (8015494 <_vfiprintf_r+0x244>)
 80152a8:	429d      	cmp	r5, r3
 80152aa:	d101      	bne.n	80152b0 <_vfiprintf_r+0x60>
 80152ac:	68b5      	ldr	r5, [r6, #8]
 80152ae:	e7df      	b.n	8015270 <_vfiprintf_r+0x20>
 80152b0:	4b79      	ldr	r3, [pc, #484]	; (8015498 <_vfiprintf_r+0x248>)
 80152b2:	429d      	cmp	r5, r3
 80152b4:	bf08      	it	eq
 80152b6:	68f5      	ldreq	r5, [r6, #12]
 80152b8:	e7da      	b.n	8015270 <_vfiprintf_r+0x20>
 80152ba:	89ab      	ldrh	r3, [r5, #12]
 80152bc:	0598      	lsls	r0, r3, #22
 80152be:	d4ed      	bmi.n	801529c <_vfiprintf_r+0x4c>
 80152c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80152c2:	f7fe fd31 	bl	8013d28 <__retarget_lock_release_recursive>
 80152c6:	e7e9      	b.n	801529c <_vfiprintf_r+0x4c>
 80152c8:	2300      	movs	r3, #0
 80152ca:	9309      	str	r3, [sp, #36]	; 0x24
 80152cc:	2320      	movs	r3, #32
 80152ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80152d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80152d6:	2330      	movs	r3, #48	; 0x30
 80152d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801549c <_vfiprintf_r+0x24c>
 80152dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80152e0:	f04f 0901 	mov.w	r9, #1
 80152e4:	4623      	mov	r3, r4
 80152e6:	469a      	mov	sl, r3
 80152e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80152ec:	b10a      	cbz	r2, 80152f2 <_vfiprintf_r+0xa2>
 80152ee:	2a25      	cmp	r2, #37	; 0x25
 80152f0:	d1f9      	bne.n	80152e6 <_vfiprintf_r+0x96>
 80152f2:	ebba 0b04 	subs.w	fp, sl, r4
 80152f6:	d00b      	beq.n	8015310 <_vfiprintf_r+0xc0>
 80152f8:	465b      	mov	r3, fp
 80152fa:	4622      	mov	r2, r4
 80152fc:	4629      	mov	r1, r5
 80152fe:	4630      	mov	r0, r6
 8015300:	f7ff ff93 	bl	801522a <__sfputs_r>
 8015304:	3001      	adds	r0, #1
 8015306:	f000 80aa 	beq.w	801545e <_vfiprintf_r+0x20e>
 801530a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801530c:	445a      	add	r2, fp
 801530e:	9209      	str	r2, [sp, #36]	; 0x24
 8015310:	f89a 3000 	ldrb.w	r3, [sl]
 8015314:	2b00      	cmp	r3, #0
 8015316:	f000 80a2 	beq.w	801545e <_vfiprintf_r+0x20e>
 801531a:	2300      	movs	r3, #0
 801531c:	f04f 32ff 	mov.w	r2, #4294967295
 8015320:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015324:	f10a 0a01 	add.w	sl, sl, #1
 8015328:	9304      	str	r3, [sp, #16]
 801532a:	9307      	str	r3, [sp, #28]
 801532c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015330:	931a      	str	r3, [sp, #104]	; 0x68
 8015332:	4654      	mov	r4, sl
 8015334:	2205      	movs	r2, #5
 8015336:	f814 1b01 	ldrb.w	r1, [r4], #1
 801533a:	4858      	ldr	r0, [pc, #352]	; (801549c <_vfiprintf_r+0x24c>)
 801533c:	f7ea ff60 	bl	8000200 <memchr>
 8015340:	9a04      	ldr	r2, [sp, #16]
 8015342:	b9d8      	cbnz	r0, 801537c <_vfiprintf_r+0x12c>
 8015344:	06d1      	lsls	r1, r2, #27
 8015346:	bf44      	itt	mi
 8015348:	2320      	movmi	r3, #32
 801534a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801534e:	0713      	lsls	r3, r2, #28
 8015350:	bf44      	itt	mi
 8015352:	232b      	movmi	r3, #43	; 0x2b
 8015354:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015358:	f89a 3000 	ldrb.w	r3, [sl]
 801535c:	2b2a      	cmp	r3, #42	; 0x2a
 801535e:	d015      	beq.n	801538c <_vfiprintf_r+0x13c>
 8015360:	9a07      	ldr	r2, [sp, #28]
 8015362:	4654      	mov	r4, sl
 8015364:	2000      	movs	r0, #0
 8015366:	f04f 0c0a 	mov.w	ip, #10
 801536a:	4621      	mov	r1, r4
 801536c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015370:	3b30      	subs	r3, #48	; 0x30
 8015372:	2b09      	cmp	r3, #9
 8015374:	d94e      	bls.n	8015414 <_vfiprintf_r+0x1c4>
 8015376:	b1b0      	cbz	r0, 80153a6 <_vfiprintf_r+0x156>
 8015378:	9207      	str	r2, [sp, #28]
 801537a:	e014      	b.n	80153a6 <_vfiprintf_r+0x156>
 801537c:	eba0 0308 	sub.w	r3, r0, r8
 8015380:	fa09 f303 	lsl.w	r3, r9, r3
 8015384:	4313      	orrs	r3, r2
 8015386:	9304      	str	r3, [sp, #16]
 8015388:	46a2      	mov	sl, r4
 801538a:	e7d2      	b.n	8015332 <_vfiprintf_r+0xe2>
 801538c:	9b03      	ldr	r3, [sp, #12]
 801538e:	1d19      	adds	r1, r3, #4
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	9103      	str	r1, [sp, #12]
 8015394:	2b00      	cmp	r3, #0
 8015396:	bfbb      	ittet	lt
 8015398:	425b      	neglt	r3, r3
 801539a:	f042 0202 	orrlt.w	r2, r2, #2
 801539e:	9307      	strge	r3, [sp, #28]
 80153a0:	9307      	strlt	r3, [sp, #28]
 80153a2:	bfb8      	it	lt
 80153a4:	9204      	strlt	r2, [sp, #16]
 80153a6:	7823      	ldrb	r3, [r4, #0]
 80153a8:	2b2e      	cmp	r3, #46	; 0x2e
 80153aa:	d10c      	bne.n	80153c6 <_vfiprintf_r+0x176>
 80153ac:	7863      	ldrb	r3, [r4, #1]
 80153ae:	2b2a      	cmp	r3, #42	; 0x2a
 80153b0:	d135      	bne.n	801541e <_vfiprintf_r+0x1ce>
 80153b2:	9b03      	ldr	r3, [sp, #12]
 80153b4:	1d1a      	adds	r2, r3, #4
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	9203      	str	r2, [sp, #12]
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	bfb8      	it	lt
 80153be:	f04f 33ff 	movlt.w	r3, #4294967295
 80153c2:	3402      	adds	r4, #2
 80153c4:	9305      	str	r3, [sp, #20]
 80153c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80154ac <_vfiprintf_r+0x25c>
 80153ca:	7821      	ldrb	r1, [r4, #0]
 80153cc:	2203      	movs	r2, #3
 80153ce:	4650      	mov	r0, sl
 80153d0:	f7ea ff16 	bl	8000200 <memchr>
 80153d4:	b140      	cbz	r0, 80153e8 <_vfiprintf_r+0x198>
 80153d6:	2340      	movs	r3, #64	; 0x40
 80153d8:	eba0 000a 	sub.w	r0, r0, sl
 80153dc:	fa03 f000 	lsl.w	r0, r3, r0
 80153e0:	9b04      	ldr	r3, [sp, #16]
 80153e2:	4303      	orrs	r3, r0
 80153e4:	3401      	adds	r4, #1
 80153e6:	9304      	str	r3, [sp, #16]
 80153e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80153ec:	482c      	ldr	r0, [pc, #176]	; (80154a0 <_vfiprintf_r+0x250>)
 80153ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80153f2:	2206      	movs	r2, #6
 80153f4:	f7ea ff04 	bl	8000200 <memchr>
 80153f8:	2800      	cmp	r0, #0
 80153fa:	d03f      	beq.n	801547c <_vfiprintf_r+0x22c>
 80153fc:	4b29      	ldr	r3, [pc, #164]	; (80154a4 <_vfiprintf_r+0x254>)
 80153fe:	bb1b      	cbnz	r3, 8015448 <_vfiprintf_r+0x1f8>
 8015400:	9b03      	ldr	r3, [sp, #12]
 8015402:	3307      	adds	r3, #7
 8015404:	f023 0307 	bic.w	r3, r3, #7
 8015408:	3308      	adds	r3, #8
 801540a:	9303      	str	r3, [sp, #12]
 801540c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801540e:	443b      	add	r3, r7
 8015410:	9309      	str	r3, [sp, #36]	; 0x24
 8015412:	e767      	b.n	80152e4 <_vfiprintf_r+0x94>
 8015414:	fb0c 3202 	mla	r2, ip, r2, r3
 8015418:	460c      	mov	r4, r1
 801541a:	2001      	movs	r0, #1
 801541c:	e7a5      	b.n	801536a <_vfiprintf_r+0x11a>
 801541e:	2300      	movs	r3, #0
 8015420:	3401      	adds	r4, #1
 8015422:	9305      	str	r3, [sp, #20]
 8015424:	4619      	mov	r1, r3
 8015426:	f04f 0c0a 	mov.w	ip, #10
 801542a:	4620      	mov	r0, r4
 801542c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015430:	3a30      	subs	r2, #48	; 0x30
 8015432:	2a09      	cmp	r2, #9
 8015434:	d903      	bls.n	801543e <_vfiprintf_r+0x1ee>
 8015436:	2b00      	cmp	r3, #0
 8015438:	d0c5      	beq.n	80153c6 <_vfiprintf_r+0x176>
 801543a:	9105      	str	r1, [sp, #20]
 801543c:	e7c3      	b.n	80153c6 <_vfiprintf_r+0x176>
 801543e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015442:	4604      	mov	r4, r0
 8015444:	2301      	movs	r3, #1
 8015446:	e7f0      	b.n	801542a <_vfiprintf_r+0x1da>
 8015448:	ab03      	add	r3, sp, #12
 801544a:	9300      	str	r3, [sp, #0]
 801544c:	462a      	mov	r2, r5
 801544e:	4b16      	ldr	r3, [pc, #88]	; (80154a8 <_vfiprintf_r+0x258>)
 8015450:	a904      	add	r1, sp, #16
 8015452:	4630      	mov	r0, r6
 8015454:	f3af 8000 	nop.w
 8015458:	4607      	mov	r7, r0
 801545a:	1c78      	adds	r0, r7, #1
 801545c:	d1d6      	bne.n	801540c <_vfiprintf_r+0x1bc>
 801545e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015460:	07d9      	lsls	r1, r3, #31
 8015462:	d405      	bmi.n	8015470 <_vfiprintf_r+0x220>
 8015464:	89ab      	ldrh	r3, [r5, #12]
 8015466:	059a      	lsls	r2, r3, #22
 8015468:	d402      	bmi.n	8015470 <_vfiprintf_r+0x220>
 801546a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801546c:	f7fe fc5c 	bl	8013d28 <__retarget_lock_release_recursive>
 8015470:	89ab      	ldrh	r3, [r5, #12]
 8015472:	065b      	lsls	r3, r3, #25
 8015474:	f53f af12 	bmi.w	801529c <_vfiprintf_r+0x4c>
 8015478:	9809      	ldr	r0, [sp, #36]	; 0x24
 801547a:	e711      	b.n	80152a0 <_vfiprintf_r+0x50>
 801547c:	ab03      	add	r3, sp, #12
 801547e:	9300      	str	r3, [sp, #0]
 8015480:	462a      	mov	r2, r5
 8015482:	4b09      	ldr	r3, [pc, #36]	; (80154a8 <_vfiprintf_r+0x258>)
 8015484:	a904      	add	r1, sp, #16
 8015486:	4630      	mov	r0, r6
 8015488:	f000 f880 	bl	801558c <_printf_i>
 801548c:	e7e4      	b.n	8015458 <_vfiprintf_r+0x208>
 801548e:	bf00      	nop
 8015490:	08016cc0 	.word	0x08016cc0
 8015494:	08016ce0 	.word	0x08016ce0
 8015498:	08016ca0 	.word	0x08016ca0
 801549c:	08016fb4 	.word	0x08016fb4
 80154a0:	08016fbe 	.word	0x08016fbe
 80154a4:	00000000 	.word	0x00000000
 80154a8:	0801522b 	.word	0x0801522b
 80154ac:	08016fba 	.word	0x08016fba

080154b0 <_printf_common>:
 80154b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80154b4:	4616      	mov	r6, r2
 80154b6:	4699      	mov	r9, r3
 80154b8:	688a      	ldr	r2, [r1, #8]
 80154ba:	690b      	ldr	r3, [r1, #16]
 80154bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80154c0:	4293      	cmp	r3, r2
 80154c2:	bfb8      	it	lt
 80154c4:	4613      	movlt	r3, r2
 80154c6:	6033      	str	r3, [r6, #0]
 80154c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80154cc:	4607      	mov	r7, r0
 80154ce:	460c      	mov	r4, r1
 80154d0:	b10a      	cbz	r2, 80154d6 <_printf_common+0x26>
 80154d2:	3301      	adds	r3, #1
 80154d4:	6033      	str	r3, [r6, #0]
 80154d6:	6823      	ldr	r3, [r4, #0]
 80154d8:	0699      	lsls	r1, r3, #26
 80154da:	bf42      	ittt	mi
 80154dc:	6833      	ldrmi	r3, [r6, #0]
 80154de:	3302      	addmi	r3, #2
 80154e0:	6033      	strmi	r3, [r6, #0]
 80154e2:	6825      	ldr	r5, [r4, #0]
 80154e4:	f015 0506 	ands.w	r5, r5, #6
 80154e8:	d106      	bne.n	80154f8 <_printf_common+0x48>
 80154ea:	f104 0a19 	add.w	sl, r4, #25
 80154ee:	68e3      	ldr	r3, [r4, #12]
 80154f0:	6832      	ldr	r2, [r6, #0]
 80154f2:	1a9b      	subs	r3, r3, r2
 80154f4:	42ab      	cmp	r3, r5
 80154f6:	dc26      	bgt.n	8015546 <_printf_common+0x96>
 80154f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80154fc:	1e13      	subs	r3, r2, #0
 80154fe:	6822      	ldr	r2, [r4, #0]
 8015500:	bf18      	it	ne
 8015502:	2301      	movne	r3, #1
 8015504:	0692      	lsls	r2, r2, #26
 8015506:	d42b      	bmi.n	8015560 <_printf_common+0xb0>
 8015508:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801550c:	4649      	mov	r1, r9
 801550e:	4638      	mov	r0, r7
 8015510:	47c0      	blx	r8
 8015512:	3001      	adds	r0, #1
 8015514:	d01e      	beq.n	8015554 <_printf_common+0xa4>
 8015516:	6823      	ldr	r3, [r4, #0]
 8015518:	68e5      	ldr	r5, [r4, #12]
 801551a:	6832      	ldr	r2, [r6, #0]
 801551c:	f003 0306 	and.w	r3, r3, #6
 8015520:	2b04      	cmp	r3, #4
 8015522:	bf08      	it	eq
 8015524:	1aad      	subeq	r5, r5, r2
 8015526:	68a3      	ldr	r3, [r4, #8]
 8015528:	6922      	ldr	r2, [r4, #16]
 801552a:	bf0c      	ite	eq
 801552c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015530:	2500      	movne	r5, #0
 8015532:	4293      	cmp	r3, r2
 8015534:	bfc4      	itt	gt
 8015536:	1a9b      	subgt	r3, r3, r2
 8015538:	18ed      	addgt	r5, r5, r3
 801553a:	2600      	movs	r6, #0
 801553c:	341a      	adds	r4, #26
 801553e:	42b5      	cmp	r5, r6
 8015540:	d11a      	bne.n	8015578 <_printf_common+0xc8>
 8015542:	2000      	movs	r0, #0
 8015544:	e008      	b.n	8015558 <_printf_common+0xa8>
 8015546:	2301      	movs	r3, #1
 8015548:	4652      	mov	r2, sl
 801554a:	4649      	mov	r1, r9
 801554c:	4638      	mov	r0, r7
 801554e:	47c0      	blx	r8
 8015550:	3001      	adds	r0, #1
 8015552:	d103      	bne.n	801555c <_printf_common+0xac>
 8015554:	f04f 30ff 	mov.w	r0, #4294967295
 8015558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801555c:	3501      	adds	r5, #1
 801555e:	e7c6      	b.n	80154ee <_printf_common+0x3e>
 8015560:	18e1      	adds	r1, r4, r3
 8015562:	1c5a      	adds	r2, r3, #1
 8015564:	2030      	movs	r0, #48	; 0x30
 8015566:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801556a:	4422      	add	r2, r4
 801556c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015570:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015574:	3302      	adds	r3, #2
 8015576:	e7c7      	b.n	8015508 <_printf_common+0x58>
 8015578:	2301      	movs	r3, #1
 801557a:	4622      	mov	r2, r4
 801557c:	4649      	mov	r1, r9
 801557e:	4638      	mov	r0, r7
 8015580:	47c0      	blx	r8
 8015582:	3001      	adds	r0, #1
 8015584:	d0e6      	beq.n	8015554 <_printf_common+0xa4>
 8015586:	3601      	adds	r6, #1
 8015588:	e7d9      	b.n	801553e <_printf_common+0x8e>
	...

0801558c <_printf_i>:
 801558c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015590:	7e0f      	ldrb	r7, [r1, #24]
 8015592:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015594:	2f78      	cmp	r7, #120	; 0x78
 8015596:	4691      	mov	r9, r2
 8015598:	4680      	mov	r8, r0
 801559a:	460c      	mov	r4, r1
 801559c:	469a      	mov	sl, r3
 801559e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80155a2:	d807      	bhi.n	80155b4 <_printf_i+0x28>
 80155a4:	2f62      	cmp	r7, #98	; 0x62
 80155a6:	d80a      	bhi.n	80155be <_printf_i+0x32>
 80155a8:	2f00      	cmp	r7, #0
 80155aa:	f000 80d8 	beq.w	801575e <_printf_i+0x1d2>
 80155ae:	2f58      	cmp	r7, #88	; 0x58
 80155b0:	f000 80a3 	beq.w	80156fa <_printf_i+0x16e>
 80155b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80155b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80155bc:	e03a      	b.n	8015634 <_printf_i+0xa8>
 80155be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80155c2:	2b15      	cmp	r3, #21
 80155c4:	d8f6      	bhi.n	80155b4 <_printf_i+0x28>
 80155c6:	a101      	add	r1, pc, #4	; (adr r1, 80155cc <_printf_i+0x40>)
 80155c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80155cc:	08015625 	.word	0x08015625
 80155d0:	08015639 	.word	0x08015639
 80155d4:	080155b5 	.word	0x080155b5
 80155d8:	080155b5 	.word	0x080155b5
 80155dc:	080155b5 	.word	0x080155b5
 80155e0:	080155b5 	.word	0x080155b5
 80155e4:	08015639 	.word	0x08015639
 80155e8:	080155b5 	.word	0x080155b5
 80155ec:	080155b5 	.word	0x080155b5
 80155f0:	080155b5 	.word	0x080155b5
 80155f4:	080155b5 	.word	0x080155b5
 80155f8:	08015745 	.word	0x08015745
 80155fc:	08015669 	.word	0x08015669
 8015600:	08015727 	.word	0x08015727
 8015604:	080155b5 	.word	0x080155b5
 8015608:	080155b5 	.word	0x080155b5
 801560c:	08015767 	.word	0x08015767
 8015610:	080155b5 	.word	0x080155b5
 8015614:	08015669 	.word	0x08015669
 8015618:	080155b5 	.word	0x080155b5
 801561c:	080155b5 	.word	0x080155b5
 8015620:	0801572f 	.word	0x0801572f
 8015624:	682b      	ldr	r3, [r5, #0]
 8015626:	1d1a      	adds	r2, r3, #4
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	602a      	str	r2, [r5, #0]
 801562c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015630:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015634:	2301      	movs	r3, #1
 8015636:	e0a3      	b.n	8015780 <_printf_i+0x1f4>
 8015638:	6820      	ldr	r0, [r4, #0]
 801563a:	6829      	ldr	r1, [r5, #0]
 801563c:	0606      	lsls	r6, r0, #24
 801563e:	f101 0304 	add.w	r3, r1, #4
 8015642:	d50a      	bpl.n	801565a <_printf_i+0xce>
 8015644:	680e      	ldr	r6, [r1, #0]
 8015646:	602b      	str	r3, [r5, #0]
 8015648:	2e00      	cmp	r6, #0
 801564a:	da03      	bge.n	8015654 <_printf_i+0xc8>
 801564c:	232d      	movs	r3, #45	; 0x2d
 801564e:	4276      	negs	r6, r6
 8015650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015654:	485e      	ldr	r0, [pc, #376]	; (80157d0 <_printf_i+0x244>)
 8015656:	230a      	movs	r3, #10
 8015658:	e019      	b.n	801568e <_printf_i+0x102>
 801565a:	680e      	ldr	r6, [r1, #0]
 801565c:	602b      	str	r3, [r5, #0]
 801565e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015662:	bf18      	it	ne
 8015664:	b236      	sxthne	r6, r6
 8015666:	e7ef      	b.n	8015648 <_printf_i+0xbc>
 8015668:	682b      	ldr	r3, [r5, #0]
 801566a:	6820      	ldr	r0, [r4, #0]
 801566c:	1d19      	adds	r1, r3, #4
 801566e:	6029      	str	r1, [r5, #0]
 8015670:	0601      	lsls	r1, r0, #24
 8015672:	d501      	bpl.n	8015678 <_printf_i+0xec>
 8015674:	681e      	ldr	r6, [r3, #0]
 8015676:	e002      	b.n	801567e <_printf_i+0xf2>
 8015678:	0646      	lsls	r6, r0, #25
 801567a:	d5fb      	bpl.n	8015674 <_printf_i+0xe8>
 801567c:	881e      	ldrh	r6, [r3, #0]
 801567e:	4854      	ldr	r0, [pc, #336]	; (80157d0 <_printf_i+0x244>)
 8015680:	2f6f      	cmp	r7, #111	; 0x6f
 8015682:	bf0c      	ite	eq
 8015684:	2308      	moveq	r3, #8
 8015686:	230a      	movne	r3, #10
 8015688:	2100      	movs	r1, #0
 801568a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801568e:	6865      	ldr	r5, [r4, #4]
 8015690:	60a5      	str	r5, [r4, #8]
 8015692:	2d00      	cmp	r5, #0
 8015694:	bfa2      	ittt	ge
 8015696:	6821      	ldrge	r1, [r4, #0]
 8015698:	f021 0104 	bicge.w	r1, r1, #4
 801569c:	6021      	strge	r1, [r4, #0]
 801569e:	b90e      	cbnz	r6, 80156a4 <_printf_i+0x118>
 80156a0:	2d00      	cmp	r5, #0
 80156a2:	d04d      	beq.n	8015740 <_printf_i+0x1b4>
 80156a4:	4615      	mov	r5, r2
 80156a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80156aa:	fb03 6711 	mls	r7, r3, r1, r6
 80156ae:	5dc7      	ldrb	r7, [r0, r7]
 80156b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80156b4:	4637      	mov	r7, r6
 80156b6:	42bb      	cmp	r3, r7
 80156b8:	460e      	mov	r6, r1
 80156ba:	d9f4      	bls.n	80156a6 <_printf_i+0x11a>
 80156bc:	2b08      	cmp	r3, #8
 80156be:	d10b      	bne.n	80156d8 <_printf_i+0x14c>
 80156c0:	6823      	ldr	r3, [r4, #0]
 80156c2:	07de      	lsls	r6, r3, #31
 80156c4:	d508      	bpl.n	80156d8 <_printf_i+0x14c>
 80156c6:	6923      	ldr	r3, [r4, #16]
 80156c8:	6861      	ldr	r1, [r4, #4]
 80156ca:	4299      	cmp	r1, r3
 80156cc:	bfde      	ittt	le
 80156ce:	2330      	movle	r3, #48	; 0x30
 80156d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80156d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80156d8:	1b52      	subs	r2, r2, r5
 80156da:	6122      	str	r2, [r4, #16]
 80156dc:	f8cd a000 	str.w	sl, [sp]
 80156e0:	464b      	mov	r3, r9
 80156e2:	aa03      	add	r2, sp, #12
 80156e4:	4621      	mov	r1, r4
 80156e6:	4640      	mov	r0, r8
 80156e8:	f7ff fee2 	bl	80154b0 <_printf_common>
 80156ec:	3001      	adds	r0, #1
 80156ee:	d14c      	bne.n	801578a <_printf_i+0x1fe>
 80156f0:	f04f 30ff 	mov.w	r0, #4294967295
 80156f4:	b004      	add	sp, #16
 80156f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156fa:	4835      	ldr	r0, [pc, #212]	; (80157d0 <_printf_i+0x244>)
 80156fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015700:	6829      	ldr	r1, [r5, #0]
 8015702:	6823      	ldr	r3, [r4, #0]
 8015704:	f851 6b04 	ldr.w	r6, [r1], #4
 8015708:	6029      	str	r1, [r5, #0]
 801570a:	061d      	lsls	r5, r3, #24
 801570c:	d514      	bpl.n	8015738 <_printf_i+0x1ac>
 801570e:	07df      	lsls	r7, r3, #31
 8015710:	bf44      	itt	mi
 8015712:	f043 0320 	orrmi.w	r3, r3, #32
 8015716:	6023      	strmi	r3, [r4, #0]
 8015718:	b91e      	cbnz	r6, 8015722 <_printf_i+0x196>
 801571a:	6823      	ldr	r3, [r4, #0]
 801571c:	f023 0320 	bic.w	r3, r3, #32
 8015720:	6023      	str	r3, [r4, #0]
 8015722:	2310      	movs	r3, #16
 8015724:	e7b0      	b.n	8015688 <_printf_i+0xfc>
 8015726:	6823      	ldr	r3, [r4, #0]
 8015728:	f043 0320 	orr.w	r3, r3, #32
 801572c:	6023      	str	r3, [r4, #0]
 801572e:	2378      	movs	r3, #120	; 0x78
 8015730:	4828      	ldr	r0, [pc, #160]	; (80157d4 <_printf_i+0x248>)
 8015732:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015736:	e7e3      	b.n	8015700 <_printf_i+0x174>
 8015738:	0659      	lsls	r1, r3, #25
 801573a:	bf48      	it	mi
 801573c:	b2b6      	uxthmi	r6, r6
 801573e:	e7e6      	b.n	801570e <_printf_i+0x182>
 8015740:	4615      	mov	r5, r2
 8015742:	e7bb      	b.n	80156bc <_printf_i+0x130>
 8015744:	682b      	ldr	r3, [r5, #0]
 8015746:	6826      	ldr	r6, [r4, #0]
 8015748:	6961      	ldr	r1, [r4, #20]
 801574a:	1d18      	adds	r0, r3, #4
 801574c:	6028      	str	r0, [r5, #0]
 801574e:	0635      	lsls	r5, r6, #24
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	d501      	bpl.n	8015758 <_printf_i+0x1cc>
 8015754:	6019      	str	r1, [r3, #0]
 8015756:	e002      	b.n	801575e <_printf_i+0x1d2>
 8015758:	0670      	lsls	r0, r6, #25
 801575a:	d5fb      	bpl.n	8015754 <_printf_i+0x1c8>
 801575c:	8019      	strh	r1, [r3, #0]
 801575e:	2300      	movs	r3, #0
 8015760:	6123      	str	r3, [r4, #16]
 8015762:	4615      	mov	r5, r2
 8015764:	e7ba      	b.n	80156dc <_printf_i+0x150>
 8015766:	682b      	ldr	r3, [r5, #0]
 8015768:	1d1a      	adds	r2, r3, #4
 801576a:	602a      	str	r2, [r5, #0]
 801576c:	681d      	ldr	r5, [r3, #0]
 801576e:	6862      	ldr	r2, [r4, #4]
 8015770:	2100      	movs	r1, #0
 8015772:	4628      	mov	r0, r5
 8015774:	f7ea fd44 	bl	8000200 <memchr>
 8015778:	b108      	cbz	r0, 801577e <_printf_i+0x1f2>
 801577a:	1b40      	subs	r0, r0, r5
 801577c:	6060      	str	r0, [r4, #4]
 801577e:	6863      	ldr	r3, [r4, #4]
 8015780:	6123      	str	r3, [r4, #16]
 8015782:	2300      	movs	r3, #0
 8015784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015788:	e7a8      	b.n	80156dc <_printf_i+0x150>
 801578a:	6923      	ldr	r3, [r4, #16]
 801578c:	462a      	mov	r2, r5
 801578e:	4649      	mov	r1, r9
 8015790:	4640      	mov	r0, r8
 8015792:	47d0      	blx	sl
 8015794:	3001      	adds	r0, #1
 8015796:	d0ab      	beq.n	80156f0 <_printf_i+0x164>
 8015798:	6823      	ldr	r3, [r4, #0]
 801579a:	079b      	lsls	r3, r3, #30
 801579c:	d413      	bmi.n	80157c6 <_printf_i+0x23a>
 801579e:	68e0      	ldr	r0, [r4, #12]
 80157a0:	9b03      	ldr	r3, [sp, #12]
 80157a2:	4298      	cmp	r0, r3
 80157a4:	bfb8      	it	lt
 80157a6:	4618      	movlt	r0, r3
 80157a8:	e7a4      	b.n	80156f4 <_printf_i+0x168>
 80157aa:	2301      	movs	r3, #1
 80157ac:	4632      	mov	r2, r6
 80157ae:	4649      	mov	r1, r9
 80157b0:	4640      	mov	r0, r8
 80157b2:	47d0      	blx	sl
 80157b4:	3001      	adds	r0, #1
 80157b6:	d09b      	beq.n	80156f0 <_printf_i+0x164>
 80157b8:	3501      	adds	r5, #1
 80157ba:	68e3      	ldr	r3, [r4, #12]
 80157bc:	9903      	ldr	r1, [sp, #12]
 80157be:	1a5b      	subs	r3, r3, r1
 80157c0:	42ab      	cmp	r3, r5
 80157c2:	dcf2      	bgt.n	80157aa <_printf_i+0x21e>
 80157c4:	e7eb      	b.n	801579e <_printf_i+0x212>
 80157c6:	2500      	movs	r5, #0
 80157c8:	f104 0619 	add.w	r6, r4, #25
 80157cc:	e7f5      	b.n	80157ba <_printf_i+0x22e>
 80157ce:	bf00      	nop
 80157d0:	08016fc5 	.word	0x08016fc5
 80157d4:	08016fd6 	.word	0x08016fd6

080157d8 <_read_r>:
 80157d8:	b538      	push	{r3, r4, r5, lr}
 80157da:	4d07      	ldr	r5, [pc, #28]	; (80157f8 <_read_r+0x20>)
 80157dc:	4604      	mov	r4, r0
 80157de:	4608      	mov	r0, r1
 80157e0:	4611      	mov	r1, r2
 80157e2:	2200      	movs	r2, #0
 80157e4:	602a      	str	r2, [r5, #0]
 80157e6:	461a      	mov	r2, r3
 80157e8:	f7ec fef2 	bl	80025d0 <_read>
 80157ec:	1c43      	adds	r3, r0, #1
 80157ee:	d102      	bne.n	80157f6 <_read_r+0x1e>
 80157f0:	682b      	ldr	r3, [r5, #0]
 80157f2:	b103      	cbz	r3, 80157f6 <_read_r+0x1e>
 80157f4:	6023      	str	r3, [r4, #0]
 80157f6:	bd38      	pop	{r3, r4, r5, pc}
 80157f8:	2000cc98 	.word	0x2000cc98

080157fc <siscanf>:
 80157fc:	b40e      	push	{r1, r2, r3}
 80157fe:	b510      	push	{r4, lr}
 8015800:	b09f      	sub	sp, #124	; 0x7c
 8015802:	ac21      	add	r4, sp, #132	; 0x84
 8015804:	f44f 7101 	mov.w	r1, #516	; 0x204
 8015808:	f854 2b04 	ldr.w	r2, [r4], #4
 801580c:	9201      	str	r2, [sp, #4]
 801580e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8015812:	9004      	str	r0, [sp, #16]
 8015814:	9008      	str	r0, [sp, #32]
 8015816:	f7ea fce5 	bl	80001e4 <strlen>
 801581a:	4b0c      	ldr	r3, [pc, #48]	; (801584c <siscanf+0x50>)
 801581c:	9005      	str	r0, [sp, #20]
 801581e:	9009      	str	r0, [sp, #36]	; 0x24
 8015820:	930d      	str	r3, [sp, #52]	; 0x34
 8015822:	480b      	ldr	r0, [pc, #44]	; (8015850 <siscanf+0x54>)
 8015824:	9a01      	ldr	r2, [sp, #4]
 8015826:	6800      	ldr	r0, [r0, #0]
 8015828:	9403      	str	r4, [sp, #12]
 801582a:	2300      	movs	r3, #0
 801582c:	9311      	str	r3, [sp, #68]	; 0x44
 801582e:	9316      	str	r3, [sp, #88]	; 0x58
 8015830:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015834:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015838:	a904      	add	r1, sp, #16
 801583a:	4623      	mov	r3, r4
 801583c:	f000 fa82 	bl	8015d44 <__ssvfiscanf_r>
 8015840:	b01f      	add	sp, #124	; 0x7c
 8015842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015846:	b003      	add	sp, #12
 8015848:	4770      	bx	lr
 801584a:	bf00      	nop
 801584c:	08014573 	.word	0x08014573
 8015850:	200002b4 	.word	0x200002b4

08015854 <strcpy>:
 8015854:	4603      	mov	r3, r0
 8015856:	f811 2b01 	ldrb.w	r2, [r1], #1
 801585a:	f803 2b01 	strb.w	r2, [r3], #1
 801585e:	2a00      	cmp	r2, #0
 8015860:	d1f9      	bne.n	8015856 <strcpy+0x2>
 8015862:	4770      	bx	lr

08015864 <strncmp>:
 8015864:	b510      	push	{r4, lr}
 8015866:	b17a      	cbz	r2, 8015888 <strncmp+0x24>
 8015868:	4603      	mov	r3, r0
 801586a:	3901      	subs	r1, #1
 801586c:	1884      	adds	r4, r0, r2
 801586e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015872:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015876:	4290      	cmp	r0, r2
 8015878:	d101      	bne.n	801587e <strncmp+0x1a>
 801587a:	42a3      	cmp	r3, r4
 801587c:	d101      	bne.n	8015882 <strncmp+0x1e>
 801587e:	1a80      	subs	r0, r0, r2
 8015880:	bd10      	pop	{r4, pc}
 8015882:	2800      	cmp	r0, #0
 8015884:	d1f3      	bne.n	801586e <strncmp+0xa>
 8015886:	e7fa      	b.n	801587e <strncmp+0x1a>
 8015888:	4610      	mov	r0, r2
 801588a:	e7f9      	b.n	8015880 <strncmp+0x1c>

0801588c <_strtoul_l.constprop.0>:
 801588c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015890:	4f36      	ldr	r7, [pc, #216]	; (801596c <_strtoul_l.constprop.0+0xe0>)
 8015892:	4686      	mov	lr, r0
 8015894:	460d      	mov	r5, r1
 8015896:	4628      	mov	r0, r5
 8015898:	f815 4b01 	ldrb.w	r4, [r5], #1
 801589c:	5de6      	ldrb	r6, [r4, r7]
 801589e:	f016 0608 	ands.w	r6, r6, #8
 80158a2:	d1f8      	bne.n	8015896 <_strtoul_l.constprop.0+0xa>
 80158a4:	2c2d      	cmp	r4, #45	; 0x2d
 80158a6:	d12f      	bne.n	8015908 <_strtoul_l.constprop.0+0x7c>
 80158a8:	782c      	ldrb	r4, [r5, #0]
 80158aa:	2601      	movs	r6, #1
 80158ac:	1c85      	adds	r5, r0, #2
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d057      	beq.n	8015962 <_strtoul_l.constprop.0+0xd6>
 80158b2:	2b10      	cmp	r3, #16
 80158b4:	d109      	bne.n	80158ca <_strtoul_l.constprop.0+0x3e>
 80158b6:	2c30      	cmp	r4, #48	; 0x30
 80158b8:	d107      	bne.n	80158ca <_strtoul_l.constprop.0+0x3e>
 80158ba:	7828      	ldrb	r0, [r5, #0]
 80158bc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80158c0:	2858      	cmp	r0, #88	; 0x58
 80158c2:	d149      	bne.n	8015958 <_strtoul_l.constprop.0+0xcc>
 80158c4:	786c      	ldrb	r4, [r5, #1]
 80158c6:	2310      	movs	r3, #16
 80158c8:	3502      	adds	r5, #2
 80158ca:	f04f 38ff 	mov.w	r8, #4294967295
 80158ce:	2700      	movs	r7, #0
 80158d0:	fbb8 f8f3 	udiv	r8, r8, r3
 80158d4:	fb03 f908 	mul.w	r9, r3, r8
 80158d8:	ea6f 0909 	mvn.w	r9, r9
 80158dc:	4638      	mov	r0, r7
 80158de:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80158e2:	f1bc 0f09 	cmp.w	ip, #9
 80158e6:	d814      	bhi.n	8015912 <_strtoul_l.constprop.0+0x86>
 80158e8:	4664      	mov	r4, ip
 80158ea:	42a3      	cmp	r3, r4
 80158ec:	dd22      	ble.n	8015934 <_strtoul_l.constprop.0+0xa8>
 80158ee:	2f00      	cmp	r7, #0
 80158f0:	db1d      	blt.n	801592e <_strtoul_l.constprop.0+0xa2>
 80158f2:	4580      	cmp	r8, r0
 80158f4:	d31b      	bcc.n	801592e <_strtoul_l.constprop.0+0xa2>
 80158f6:	d101      	bne.n	80158fc <_strtoul_l.constprop.0+0x70>
 80158f8:	45a1      	cmp	r9, r4
 80158fa:	db18      	blt.n	801592e <_strtoul_l.constprop.0+0xa2>
 80158fc:	fb00 4003 	mla	r0, r0, r3, r4
 8015900:	2701      	movs	r7, #1
 8015902:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015906:	e7ea      	b.n	80158de <_strtoul_l.constprop.0+0x52>
 8015908:	2c2b      	cmp	r4, #43	; 0x2b
 801590a:	bf04      	itt	eq
 801590c:	782c      	ldrbeq	r4, [r5, #0]
 801590e:	1c85      	addeq	r5, r0, #2
 8015910:	e7cd      	b.n	80158ae <_strtoul_l.constprop.0+0x22>
 8015912:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8015916:	f1bc 0f19 	cmp.w	ip, #25
 801591a:	d801      	bhi.n	8015920 <_strtoul_l.constprop.0+0x94>
 801591c:	3c37      	subs	r4, #55	; 0x37
 801591e:	e7e4      	b.n	80158ea <_strtoul_l.constprop.0+0x5e>
 8015920:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8015924:	f1bc 0f19 	cmp.w	ip, #25
 8015928:	d804      	bhi.n	8015934 <_strtoul_l.constprop.0+0xa8>
 801592a:	3c57      	subs	r4, #87	; 0x57
 801592c:	e7dd      	b.n	80158ea <_strtoul_l.constprop.0+0x5e>
 801592e:	f04f 37ff 	mov.w	r7, #4294967295
 8015932:	e7e6      	b.n	8015902 <_strtoul_l.constprop.0+0x76>
 8015934:	2f00      	cmp	r7, #0
 8015936:	da07      	bge.n	8015948 <_strtoul_l.constprop.0+0xbc>
 8015938:	2322      	movs	r3, #34	; 0x22
 801593a:	f8ce 3000 	str.w	r3, [lr]
 801593e:	f04f 30ff 	mov.w	r0, #4294967295
 8015942:	b932      	cbnz	r2, 8015952 <_strtoul_l.constprop.0+0xc6>
 8015944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015948:	b106      	cbz	r6, 801594c <_strtoul_l.constprop.0+0xc0>
 801594a:	4240      	negs	r0, r0
 801594c:	2a00      	cmp	r2, #0
 801594e:	d0f9      	beq.n	8015944 <_strtoul_l.constprop.0+0xb8>
 8015950:	b107      	cbz	r7, 8015954 <_strtoul_l.constprop.0+0xc8>
 8015952:	1e69      	subs	r1, r5, #1
 8015954:	6011      	str	r1, [r2, #0]
 8015956:	e7f5      	b.n	8015944 <_strtoul_l.constprop.0+0xb8>
 8015958:	2430      	movs	r4, #48	; 0x30
 801595a:	2b00      	cmp	r3, #0
 801595c:	d1b5      	bne.n	80158ca <_strtoul_l.constprop.0+0x3e>
 801595e:	2308      	movs	r3, #8
 8015960:	e7b3      	b.n	80158ca <_strtoul_l.constprop.0+0x3e>
 8015962:	2c30      	cmp	r4, #48	; 0x30
 8015964:	d0a9      	beq.n	80158ba <_strtoul_l.constprop.0+0x2e>
 8015966:	230a      	movs	r3, #10
 8015968:	e7af      	b.n	80158ca <_strtoul_l.constprop.0+0x3e>
 801596a:	bf00      	nop
 801596c:	08016e51 	.word	0x08016e51

08015970 <_strtoul_r>:
 8015970:	f7ff bf8c 	b.w	801588c <_strtoul_l.constprop.0>

08015974 <strtoul>:
 8015974:	4613      	mov	r3, r2
 8015976:	460a      	mov	r2, r1
 8015978:	4601      	mov	r1, r0
 801597a:	4802      	ldr	r0, [pc, #8]	; (8015984 <strtoul+0x10>)
 801597c:	6800      	ldr	r0, [r0, #0]
 801597e:	f7ff bf85 	b.w	801588c <_strtoul_l.constprop.0>
 8015982:	bf00      	nop
 8015984:	200002b4 	.word	0x200002b4

08015988 <__swbuf_r>:
 8015988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801598a:	460e      	mov	r6, r1
 801598c:	4614      	mov	r4, r2
 801598e:	4605      	mov	r5, r0
 8015990:	b118      	cbz	r0, 801599a <__swbuf_r+0x12>
 8015992:	6983      	ldr	r3, [r0, #24]
 8015994:	b90b      	cbnz	r3, 801599a <__swbuf_r+0x12>
 8015996:	f7fe f901 	bl	8013b9c <__sinit>
 801599a:	4b21      	ldr	r3, [pc, #132]	; (8015a20 <__swbuf_r+0x98>)
 801599c:	429c      	cmp	r4, r3
 801599e:	d12b      	bne.n	80159f8 <__swbuf_r+0x70>
 80159a0:	686c      	ldr	r4, [r5, #4]
 80159a2:	69a3      	ldr	r3, [r4, #24]
 80159a4:	60a3      	str	r3, [r4, #8]
 80159a6:	89a3      	ldrh	r3, [r4, #12]
 80159a8:	071a      	lsls	r2, r3, #28
 80159aa:	d52f      	bpl.n	8015a0c <__swbuf_r+0x84>
 80159ac:	6923      	ldr	r3, [r4, #16]
 80159ae:	b36b      	cbz	r3, 8015a0c <__swbuf_r+0x84>
 80159b0:	6923      	ldr	r3, [r4, #16]
 80159b2:	6820      	ldr	r0, [r4, #0]
 80159b4:	1ac0      	subs	r0, r0, r3
 80159b6:	6963      	ldr	r3, [r4, #20]
 80159b8:	b2f6      	uxtb	r6, r6
 80159ba:	4283      	cmp	r3, r0
 80159bc:	4637      	mov	r7, r6
 80159be:	dc04      	bgt.n	80159ca <__swbuf_r+0x42>
 80159c0:	4621      	mov	r1, r4
 80159c2:	4628      	mov	r0, r5
 80159c4:	f7ff fa0a 	bl	8014ddc <_fflush_r>
 80159c8:	bb30      	cbnz	r0, 8015a18 <__swbuf_r+0x90>
 80159ca:	68a3      	ldr	r3, [r4, #8]
 80159cc:	3b01      	subs	r3, #1
 80159ce:	60a3      	str	r3, [r4, #8]
 80159d0:	6823      	ldr	r3, [r4, #0]
 80159d2:	1c5a      	adds	r2, r3, #1
 80159d4:	6022      	str	r2, [r4, #0]
 80159d6:	701e      	strb	r6, [r3, #0]
 80159d8:	6963      	ldr	r3, [r4, #20]
 80159da:	3001      	adds	r0, #1
 80159dc:	4283      	cmp	r3, r0
 80159de:	d004      	beq.n	80159ea <__swbuf_r+0x62>
 80159e0:	89a3      	ldrh	r3, [r4, #12]
 80159e2:	07db      	lsls	r3, r3, #31
 80159e4:	d506      	bpl.n	80159f4 <__swbuf_r+0x6c>
 80159e6:	2e0a      	cmp	r6, #10
 80159e8:	d104      	bne.n	80159f4 <__swbuf_r+0x6c>
 80159ea:	4621      	mov	r1, r4
 80159ec:	4628      	mov	r0, r5
 80159ee:	f7ff f9f5 	bl	8014ddc <_fflush_r>
 80159f2:	b988      	cbnz	r0, 8015a18 <__swbuf_r+0x90>
 80159f4:	4638      	mov	r0, r7
 80159f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159f8:	4b0a      	ldr	r3, [pc, #40]	; (8015a24 <__swbuf_r+0x9c>)
 80159fa:	429c      	cmp	r4, r3
 80159fc:	d101      	bne.n	8015a02 <__swbuf_r+0x7a>
 80159fe:	68ac      	ldr	r4, [r5, #8]
 8015a00:	e7cf      	b.n	80159a2 <__swbuf_r+0x1a>
 8015a02:	4b09      	ldr	r3, [pc, #36]	; (8015a28 <__swbuf_r+0xa0>)
 8015a04:	429c      	cmp	r4, r3
 8015a06:	bf08      	it	eq
 8015a08:	68ec      	ldreq	r4, [r5, #12]
 8015a0a:	e7ca      	b.n	80159a2 <__swbuf_r+0x1a>
 8015a0c:	4621      	mov	r1, r4
 8015a0e:	4628      	mov	r0, r5
 8015a10:	f000 f80c 	bl	8015a2c <__swsetup_r>
 8015a14:	2800      	cmp	r0, #0
 8015a16:	d0cb      	beq.n	80159b0 <__swbuf_r+0x28>
 8015a18:	f04f 37ff 	mov.w	r7, #4294967295
 8015a1c:	e7ea      	b.n	80159f4 <__swbuf_r+0x6c>
 8015a1e:	bf00      	nop
 8015a20:	08016cc0 	.word	0x08016cc0
 8015a24:	08016ce0 	.word	0x08016ce0
 8015a28:	08016ca0 	.word	0x08016ca0

08015a2c <__swsetup_r>:
 8015a2c:	4b32      	ldr	r3, [pc, #200]	; (8015af8 <__swsetup_r+0xcc>)
 8015a2e:	b570      	push	{r4, r5, r6, lr}
 8015a30:	681d      	ldr	r5, [r3, #0]
 8015a32:	4606      	mov	r6, r0
 8015a34:	460c      	mov	r4, r1
 8015a36:	b125      	cbz	r5, 8015a42 <__swsetup_r+0x16>
 8015a38:	69ab      	ldr	r3, [r5, #24]
 8015a3a:	b913      	cbnz	r3, 8015a42 <__swsetup_r+0x16>
 8015a3c:	4628      	mov	r0, r5
 8015a3e:	f7fe f8ad 	bl	8013b9c <__sinit>
 8015a42:	4b2e      	ldr	r3, [pc, #184]	; (8015afc <__swsetup_r+0xd0>)
 8015a44:	429c      	cmp	r4, r3
 8015a46:	d10f      	bne.n	8015a68 <__swsetup_r+0x3c>
 8015a48:	686c      	ldr	r4, [r5, #4]
 8015a4a:	89a3      	ldrh	r3, [r4, #12]
 8015a4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015a50:	0719      	lsls	r1, r3, #28
 8015a52:	d42c      	bmi.n	8015aae <__swsetup_r+0x82>
 8015a54:	06dd      	lsls	r5, r3, #27
 8015a56:	d411      	bmi.n	8015a7c <__swsetup_r+0x50>
 8015a58:	2309      	movs	r3, #9
 8015a5a:	6033      	str	r3, [r6, #0]
 8015a5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015a60:	81a3      	strh	r3, [r4, #12]
 8015a62:	f04f 30ff 	mov.w	r0, #4294967295
 8015a66:	e03e      	b.n	8015ae6 <__swsetup_r+0xba>
 8015a68:	4b25      	ldr	r3, [pc, #148]	; (8015b00 <__swsetup_r+0xd4>)
 8015a6a:	429c      	cmp	r4, r3
 8015a6c:	d101      	bne.n	8015a72 <__swsetup_r+0x46>
 8015a6e:	68ac      	ldr	r4, [r5, #8]
 8015a70:	e7eb      	b.n	8015a4a <__swsetup_r+0x1e>
 8015a72:	4b24      	ldr	r3, [pc, #144]	; (8015b04 <__swsetup_r+0xd8>)
 8015a74:	429c      	cmp	r4, r3
 8015a76:	bf08      	it	eq
 8015a78:	68ec      	ldreq	r4, [r5, #12]
 8015a7a:	e7e6      	b.n	8015a4a <__swsetup_r+0x1e>
 8015a7c:	0758      	lsls	r0, r3, #29
 8015a7e:	d512      	bpl.n	8015aa6 <__swsetup_r+0x7a>
 8015a80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015a82:	b141      	cbz	r1, 8015a96 <__swsetup_r+0x6a>
 8015a84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015a88:	4299      	cmp	r1, r3
 8015a8a:	d002      	beq.n	8015a92 <__swsetup_r+0x66>
 8015a8c:	4630      	mov	r0, r6
 8015a8e:	f7fe fbe5 	bl	801425c <_free_r>
 8015a92:	2300      	movs	r3, #0
 8015a94:	6363      	str	r3, [r4, #52]	; 0x34
 8015a96:	89a3      	ldrh	r3, [r4, #12]
 8015a98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015a9c:	81a3      	strh	r3, [r4, #12]
 8015a9e:	2300      	movs	r3, #0
 8015aa0:	6063      	str	r3, [r4, #4]
 8015aa2:	6923      	ldr	r3, [r4, #16]
 8015aa4:	6023      	str	r3, [r4, #0]
 8015aa6:	89a3      	ldrh	r3, [r4, #12]
 8015aa8:	f043 0308 	orr.w	r3, r3, #8
 8015aac:	81a3      	strh	r3, [r4, #12]
 8015aae:	6923      	ldr	r3, [r4, #16]
 8015ab0:	b94b      	cbnz	r3, 8015ac6 <__swsetup_r+0x9a>
 8015ab2:	89a3      	ldrh	r3, [r4, #12]
 8015ab4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015abc:	d003      	beq.n	8015ac6 <__swsetup_r+0x9a>
 8015abe:	4621      	mov	r1, r4
 8015ac0:	4630      	mov	r0, r6
 8015ac2:	f000 f85b 	bl	8015b7c <__smakebuf_r>
 8015ac6:	89a0      	ldrh	r0, [r4, #12]
 8015ac8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015acc:	f010 0301 	ands.w	r3, r0, #1
 8015ad0:	d00a      	beq.n	8015ae8 <__swsetup_r+0xbc>
 8015ad2:	2300      	movs	r3, #0
 8015ad4:	60a3      	str	r3, [r4, #8]
 8015ad6:	6963      	ldr	r3, [r4, #20]
 8015ad8:	425b      	negs	r3, r3
 8015ada:	61a3      	str	r3, [r4, #24]
 8015adc:	6923      	ldr	r3, [r4, #16]
 8015ade:	b943      	cbnz	r3, 8015af2 <__swsetup_r+0xc6>
 8015ae0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015ae4:	d1ba      	bne.n	8015a5c <__swsetup_r+0x30>
 8015ae6:	bd70      	pop	{r4, r5, r6, pc}
 8015ae8:	0781      	lsls	r1, r0, #30
 8015aea:	bf58      	it	pl
 8015aec:	6963      	ldrpl	r3, [r4, #20]
 8015aee:	60a3      	str	r3, [r4, #8]
 8015af0:	e7f4      	b.n	8015adc <__swsetup_r+0xb0>
 8015af2:	2000      	movs	r0, #0
 8015af4:	e7f7      	b.n	8015ae6 <__swsetup_r+0xba>
 8015af6:	bf00      	nop
 8015af8:	200002b4 	.word	0x200002b4
 8015afc:	08016cc0 	.word	0x08016cc0
 8015b00:	08016ce0 	.word	0x08016ce0
 8015b04:	08016ca0 	.word	0x08016ca0

08015b08 <abort>:
 8015b08:	b508      	push	{r3, lr}
 8015b0a:	2006      	movs	r0, #6
 8015b0c:	f000 fc44 	bl	8016398 <raise>
 8015b10:	2001      	movs	r0, #1
 8015b12:	f7ec fd53 	bl	80025bc <_exit>
	...

08015b18 <__env_lock>:
 8015b18:	4801      	ldr	r0, [pc, #4]	; (8015b20 <__env_lock+0x8>)
 8015b1a:	f7fe b903 	b.w	8013d24 <__retarget_lock_acquire_recursive>
 8015b1e:	bf00      	nop
 8015b20:	2000cc88 	.word	0x2000cc88

08015b24 <__env_unlock>:
 8015b24:	4801      	ldr	r0, [pc, #4]	; (8015b2c <__env_unlock+0x8>)
 8015b26:	f7fe b8ff 	b.w	8013d28 <__retarget_lock_release_recursive>
 8015b2a:	bf00      	nop
 8015b2c:	2000cc88 	.word	0x2000cc88

08015b30 <__swhatbuf_r>:
 8015b30:	b570      	push	{r4, r5, r6, lr}
 8015b32:	460e      	mov	r6, r1
 8015b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b38:	2900      	cmp	r1, #0
 8015b3a:	b096      	sub	sp, #88	; 0x58
 8015b3c:	4614      	mov	r4, r2
 8015b3e:	461d      	mov	r5, r3
 8015b40:	da08      	bge.n	8015b54 <__swhatbuf_r+0x24>
 8015b42:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015b46:	2200      	movs	r2, #0
 8015b48:	602a      	str	r2, [r5, #0]
 8015b4a:	061a      	lsls	r2, r3, #24
 8015b4c:	d410      	bmi.n	8015b70 <__swhatbuf_r+0x40>
 8015b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015b52:	e00e      	b.n	8015b72 <__swhatbuf_r+0x42>
 8015b54:	466a      	mov	r2, sp
 8015b56:	f000 fc75 	bl	8016444 <_fstat_r>
 8015b5a:	2800      	cmp	r0, #0
 8015b5c:	dbf1      	blt.n	8015b42 <__swhatbuf_r+0x12>
 8015b5e:	9a01      	ldr	r2, [sp, #4]
 8015b60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015b64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015b68:	425a      	negs	r2, r3
 8015b6a:	415a      	adcs	r2, r3
 8015b6c:	602a      	str	r2, [r5, #0]
 8015b6e:	e7ee      	b.n	8015b4e <__swhatbuf_r+0x1e>
 8015b70:	2340      	movs	r3, #64	; 0x40
 8015b72:	2000      	movs	r0, #0
 8015b74:	6023      	str	r3, [r4, #0]
 8015b76:	b016      	add	sp, #88	; 0x58
 8015b78:	bd70      	pop	{r4, r5, r6, pc}
	...

08015b7c <__smakebuf_r>:
 8015b7c:	898b      	ldrh	r3, [r1, #12]
 8015b7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015b80:	079d      	lsls	r5, r3, #30
 8015b82:	4606      	mov	r6, r0
 8015b84:	460c      	mov	r4, r1
 8015b86:	d507      	bpl.n	8015b98 <__smakebuf_r+0x1c>
 8015b88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015b8c:	6023      	str	r3, [r4, #0]
 8015b8e:	6123      	str	r3, [r4, #16]
 8015b90:	2301      	movs	r3, #1
 8015b92:	6163      	str	r3, [r4, #20]
 8015b94:	b002      	add	sp, #8
 8015b96:	bd70      	pop	{r4, r5, r6, pc}
 8015b98:	ab01      	add	r3, sp, #4
 8015b9a:	466a      	mov	r2, sp
 8015b9c:	f7ff ffc8 	bl	8015b30 <__swhatbuf_r>
 8015ba0:	9900      	ldr	r1, [sp, #0]
 8015ba2:	4605      	mov	r5, r0
 8015ba4:	4630      	mov	r0, r6
 8015ba6:	f7fe fbc5 	bl	8014334 <_malloc_r>
 8015baa:	b948      	cbnz	r0, 8015bc0 <__smakebuf_r+0x44>
 8015bac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015bb0:	059a      	lsls	r2, r3, #22
 8015bb2:	d4ef      	bmi.n	8015b94 <__smakebuf_r+0x18>
 8015bb4:	f023 0303 	bic.w	r3, r3, #3
 8015bb8:	f043 0302 	orr.w	r3, r3, #2
 8015bbc:	81a3      	strh	r3, [r4, #12]
 8015bbe:	e7e3      	b.n	8015b88 <__smakebuf_r+0xc>
 8015bc0:	4b0d      	ldr	r3, [pc, #52]	; (8015bf8 <__smakebuf_r+0x7c>)
 8015bc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8015bc4:	89a3      	ldrh	r3, [r4, #12]
 8015bc6:	6020      	str	r0, [r4, #0]
 8015bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015bcc:	81a3      	strh	r3, [r4, #12]
 8015bce:	9b00      	ldr	r3, [sp, #0]
 8015bd0:	6163      	str	r3, [r4, #20]
 8015bd2:	9b01      	ldr	r3, [sp, #4]
 8015bd4:	6120      	str	r0, [r4, #16]
 8015bd6:	b15b      	cbz	r3, 8015bf0 <__smakebuf_r+0x74>
 8015bd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015bdc:	4630      	mov	r0, r6
 8015bde:	f000 fc43 	bl	8016468 <_isatty_r>
 8015be2:	b128      	cbz	r0, 8015bf0 <__smakebuf_r+0x74>
 8015be4:	89a3      	ldrh	r3, [r4, #12]
 8015be6:	f023 0303 	bic.w	r3, r3, #3
 8015bea:	f043 0301 	orr.w	r3, r3, #1
 8015bee:	81a3      	strh	r3, [r4, #12]
 8015bf0:	89a0      	ldrh	r0, [r4, #12]
 8015bf2:	4305      	orrs	r5, r0
 8015bf4:	81a5      	strh	r5, [r4, #12]
 8015bf6:	e7cd      	b.n	8015b94 <__smakebuf_r+0x18>
 8015bf8:	08013b35 	.word	0x08013b35

08015bfc <memmove>:
 8015bfc:	4288      	cmp	r0, r1
 8015bfe:	b510      	push	{r4, lr}
 8015c00:	eb01 0402 	add.w	r4, r1, r2
 8015c04:	d902      	bls.n	8015c0c <memmove+0x10>
 8015c06:	4284      	cmp	r4, r0
 8015c08:	4623      	mov	r3, r4
 8015c0a:	d807      	bhi.n	8015c1c <memmove+0x20>
 8015c0c:	1e43      	subs	r3, r0, #1
 8015c0e:	42a1      	cmp	r1, r4
 8015c10:	d008      	beq.n	8015c24 <memmove+0x28>
 8015c12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015c16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015c1a:	e7f8      	b.n	8015c0e <memmove+0x12>
 8015c1c:	4402      	add	r2, r0
 8015c1e:	4601      	mov	r1, r0
 8015c20:	428a      	cmp	r2, r1
 8015c22:	d100      	bne.n	8015c26 <memmove+0x2a>
 8015c24:	bd10      	pop	{r4, pc}
 8015c26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015c2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015c2e:	e7f7      	b.n	8015c20 <memmove+0x24>

08015c30 <_realloc_r>:
 8015c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c34:	4680      	mov	r8, r0
 8015c36:	4614      	mov	r4, r2
 8015c38:	460e      	mov	r6, r1
 8015c3a:	b921      	cbnz	r1, 8015c46 <_realloc_r+0x16>
 8015c3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015c40:	4611      	mov	r1, r2
 8015c42:	f7fe bb77 	b.w	8014334 <_malloc_r>
 8015c46:	b92a      	cbnz	r2, 8015c54 <_realloc_r+0x24>
 8015c48:	f7fe fb08 	bl	801425c <_free_r>
 8015c4c:	4625      	mov	r5, r4
 8015c4e:	4628      	mov	r0, r5
 8015c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c54:	f000 fc18 	bl	8016488 <_malloc_usable_size_r>
 8015c58:	4284      	cmp	r4, r0
 8015c5a:	4607      	mov	r7, r0
 8015c5c:	d802      	bhi.n	8015c64 <_realloc_r+0x34>
 8015c5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015c62:	d812      	bhi.n	8015c8a <_realloc_r+0x5a>
 8015c64:	4621      	mov	r1, r4
 8015c66:	4640      	mov	r0, r8
 8015c68:	f7fe fb64 	bl	8014334 <_malloc_r>
 8015c6c:	4605      	mov	r5, r0
 8015c6e:	2800      	cmp	r0, #0
 8015c70:	d0ed      	beq.n	8015c4e <_realloc_r+0x1e>
 8015c72:	42bc      	cmp	r4, r7
 8015c74:	4622      	mov	r2, r4
 8015c76:	4631      	mov	r1, r6
 8015c78:	bf28      	it	cs
 8015c7a:	463a      	movcs	r2, r7
 8015c7c:	f7fe f866 	bl	8013d4c <memcpy>
 8015c80:	4631      	mov	r1, r6
 8015c82:	4640      	mov	r0, r8
 8015c84:	f7fe faea 	bl	801425c <_free_r>
 8015c88:	e7e1      	b.n	8015c4e <_realloc_r+0x1e>
 8015c8a:	4635      	mov	r5, r6
 8015c8c:	e7df      	b.n	8015c4e <_realloc_r+0x1e>

08015c8e <_sungetc_r>:
 8015c8e:	b538      	push	{r3, r4, r5, lr}
 8015c90:	1c4b      	adds	r3, r1, #1
 8015c92:	4614      	mov	r4, r2
 8015c94:	d103      	bne.n	8015c9e <_sungetc_r+0x10>
 8015c96:	f04f 35ff 	mov.w	r5, #4294967295
 8015c9a:	4628      	mov	r0, r5
 8015c9c:	bd38      	pop	{r3, r4, r5, pc}
 8015c9e:	8993      	ldrh	r3, [r2, #12]
 8015ca0:	f023 0320 	bic.w	r3, r3, #32
 8015ca4:	8193      	strh	r3, [r2, #12]
 8015ca6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015ca8:	6852      	ldr	r2, [r2, #4]
 8015caa:	b2cd      	uxtb	r5, r1
 8015cac:	b18b      	cbz	r3, 8015cd2 <_sungetc_r+0x44>
 8015cae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015cb0:	4293      	cmp	r3, r2
 8015cb2:	dd08      	ble.n	8015cc6 <_sungetc_r+0x38>
 8015cb4:	6823      	ldr	r3, [r4, #0]
 8015cb6:	1e5a      	subs	r2, r3, #1
 8015cb8:	6022      	str	r2, [r4, #0]
 8015cba:	f803 5c01 	strb.w	r5, [r3, #-1]
 8015cbe:	6863      	ldr	r3, [r4, #4]
 8015cc0:	3301      	adds	r3, #1
 8015cc2:	6063      	str	r3, [r4, #4]
 8015cc4:	e7e9      	b.n	8015c9a <_sungetc_r+0xc>
 8015cc6:	4621      	mov	r1, r4
 8015cc8:	f000 fb82 	bl	80163d0 <__submore>
 8015ccc:	2800      	cmp	r0, #0
 8015cce:	d0f1      	beq.n	8015cb4 <_sungetc_r+0x26>
 8015cd0:	e7e1      	b.n	8015c96 <_sungetc_r+0x8>
 8015cd2:	6921      	ldr	r1, [r4, #16]
 8015cd4:	6823      	ldr	r3, [r4, #0]
 8015cd6:	b151      	cbz	r1, 8015cee <_sungetc_r+0x60>
 8015cd8:	4299      	cmp	r1, r3
 8015cda:	d208      	bcs.n	8015cee <_sungetc_r+0x60>
 8015cdc:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8015ce0:	42a9      	cmp	r1, r5
 8015ce2:	d104      	bne.n	8015cee <_sungetc_r+0x60>
 8015ce4:	3b01      	subs	r3, #1
 8015ce6:	3201      	adds	r2, #1
 8015ce8:	6023      	str	r3, [r4, #0]
 8015cea:	6062      	str	r2, [r4, #4]
 8015cec:	e7d5      	b.n	8015c9a <_sungetc_r+0xc>
 8015cee:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8015cf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015cf6:	6363      	str	r3, [r4, #52]	; 0x34
 8015cf8:	2303      	movs	r3, #3
 8015cfa:	63a3      	str	r3, [r4, #56]	; 0x38
 8015cfc:	4623      	mov	r3, r4
 8015cfe:	f803 5f46 	strb.w	r5, [r3, #70]!
 8015d02:	6023      	str	r3, [r4, #0]
 8015d04:	2301      	movs	r3, #1
 8015d06:	e7dc      	b.n	8015cc2 <_sungetc_r+0x34>

08015d08 <__ssrefill_r>:
 8015d08:	b510      	push	{r4, lr}
 8015d0a:	460c      	mov	r4, r1
 8015d0c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8015d0e:	b169      	cbz	r1, 8015d2c <__ssrefill_r+0x24>
 8015d10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015d14:	4299      	cmp	r1, r3
 8015d16:	d001      	beq.n	8015d1c <__ssrefill_r+0x14>
 8015d18:	f7fe faa0 	bl	801425c <_free_r>
 8015d1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015d1e:	6063      	str	r3, [r4, #4]
 8015d20:	2000      	movs	r0, #0
 8015d22:	6360      	str	r0, [r4, #52]	; 0x34
 8015d24:	b113      	cbz	r3, 8015d2c <__ssrefill_r+0x24>
 8015d26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015d28:	6023      	str	r3, [r4, #0]
 8015d2a:	bd10      	pop	{r4, pc}
 8015d2c:	6923      	ldr	r3, [r4, #16]
 8015d2e:	6023      	str	r3, [r4, #0]
 8015d30:	2300      	movs	r3, #0
 8015d32:	6063      	str	r3, [r4, #4]
 8015d34:	89a3      	ldrh	r3, [r4, #12]
 8015d36:	f043 0320 	orr.w	r3, r3, #32
 8015d3a:	81a3      	strh	r3, [r4, #12]
 8015d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8015d40:	e7f3      	b.n	8015d2a <__ssrefill_r+0x22>
	...

08015d44 <__ssvfiscanf_r>:
 8015d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d48:	460c      	mov	r4, r1
 8015d4a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8015d4e:	2100      	movs	r1, #0
 8015d50:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8015d54:	49a6      	ldr	r1, [pc, #664]	; (8015ff0 <__ssvfiscanf_r+0x2ac>)
 8015d56:	91a0      	str	r1, [sp, #640]	; 0x280
 8015d58:	f10d 0804 	add.w	r8, sp, #4
 8015d5c:	49a5      	ldr	r1, [pc, #660]	; (8015ff4 <__ssvfiscanf_r+0x2b0>)
 8015d5e:	4fa6      	ldr	r7, [pc, #664]	; (8015ff8 <__ssvfiscanf_r+0x2b4>)
 8015d60:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8015ffc <__ssvfiscanf_r+0x2b8>
 8015d64:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8015d68:	4606      	mov	r6, r0
 8015d6a:	91a1      	str	r1, [sp, #644]	; 0x284
 8015d6c:	9300      	str	r3, [sp, #0]
 8015d6e:	7813      	ldrb	r3, [r2, #0]
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	f000 815a 	beq.w	801602a <__ssvfiscanf_r+0x2e6>
 8015d76:	5dd9      	ldrb	r1, [r3, r7]
 8015d78:	f011 0108 	ands.w	r1, r1, #8
 8015d7c:	f102 0501 	add.w	r5, r2, #1
 8015d80:	d019      	beq.n	8015db6 <__ssvfiscanf_r+0x72>
 8015d82:	6863      	ldr	r3, [r4, #4]
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	dd0f      	ble.n	8015da8 <__ssvfiscanf_r+0x64>
 8015d88:	6823      	ldr	r3, [r4, #0]
 8015d8a:	781a      	ldrb	r2, [r3, #0]
 8015d8c:	5cba      	ldrb	r2, [r7, r2]
 8015d8e:	0712      	lsls	r2, r2, #28
 8015d90:	d401      	bmi.n	8015d96 <__ssvfiscanf_r+0x52>
 8015d92:	462a      	mov	r2, r5
 8015d94:	e7eb      	b.n	8015d6e <__ssvfiscanf_r+0x2a>
 8015d96:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015d98:	3201      	adds	r2, #1
 8015d9a:	9245      	str	r2, [sp, #276]	; 0x114
 8015d9c:	6862      	ldr	r2, [r4, #4]
 8015d9e:	3301      	adds	r3, #1
 8015da0:	3a01      	subs	r2, #1
 8015da2:	6062      	str	r2, [r4, #4]
 8015da4:	6023      	str	r3, [r4, #0]
 8015da6:	e7ec      	b.n	8015d82 <__ssvfiscanf_r+0x3e>
 8015da8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015daa:	4621      	mov	r1, r4
 8015dac:	4630      	mov	r0, r6
 8015dae:	4798      	blx	r3
 8015db0:	2800      	cmp	r0, #0
 8015db2:	d0e9      	beq.n	8015d88 <__ssvfiscanf_r+0x44>
 8015db4:	e7ed      	b.n	8015d92 <__ssvfiscanf_r+0x4e>
 8015db6:	2b25      	cmp	r3, #37	; 0x25
 8015db8:	d012      	beq.n	8015de0 <__ssvfiscanf_r+0x9c>
 8015dba:	469a      	mov	sl, r3
 8015dbc:	6863      	ldr	r3, [r4, #4]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	f340 8091 	ble.w	8015ee6 <__ssvfiscanf_r+0x1a2>
 8015dc4:	6822      	ldr	r2, [r4, #0]
 8015dc6:	7813      	ldrb	r3, [r2, #0]
 8015dc8:	4553      	cmp	r3, sl
 8015dca:	f040 812e 	bne.w	801602a <__ssvfiscanf_r+0x2e6>
 8015dce:	6863      	ldr	r3, [r4, #4]
 8015dd0:	3b01      	subs	r3, #1
 8015dd2:	6063      	str	r3, [r4, #4]
 8015dd4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8015dd6:	3201      	adds	r2, #1
 8015dd8:	3301      	adds	r3, #1
 8015dda:	6022      	str	r2, [r4, #0]
 8015ddc:	9345      	str	r3, [sp, #276]	; 0x114
 8015dde:	e7d8      	b.n	8015d92 <__ssvfiscanf_r+0x4e>
 8015de0:	9141      	str	r1, [sp, #260]	; 0x104
 8015de2:	9143      	str	r1, [sp, #268]	; 0x10c
 8015de4:	7853      	ldrb	r3, [r2, #1]
 8015de6:	2b2a      	cmp	r3, #42	; 0x2a
 8015de8:	bf02      	ittt	eq
 8015dea:	2310      	moveq	r3, #16
 8015dec:	1c95      	addeq	r5, r2, #2
 8015dee:	9341      	streq	r3, [sp, #260]	; 0x104
 8015df0:	220a      	movs	r2, #10
 8015df2:	46aa      	mov	sl, r5
 8015df4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8015df8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8015dfc:	2b09      	cmp	r3, #9
 8015dfe:	d91d      	bls.n	8015e3c <__ssvfiscanf_r+0xf8>
 8015e00:	487e      	ldr	r0, [pc, #504]	; (8015ffc <__ssvfiscanf_r+0x2b8>)
 8015e02:	2203      	movs	r2, #3
 8015e04:	f7ea f9fc 	bl	8000200 <memchr>
 8015e08:	b140      	cbz	r0, 8015e1c <__ssvfiscanf_r+0xd8>
 8015e0a:	2301      	movs	r3, #1
 8015e0c:	eba0 0009 	sub.w	r0, r0, r9
 8015e10:	fa03 f000 	lsl.w	r0, r3, r0
 8015e14:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015e16:	4318      	orrs	r0, r3
 8015e18:	9041      	str	r0, [sp, #260]	; 0x104
 8015e1a:	4655      	mov	r5, sl
 8015e1c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015e20:	2b78      	cmp	r3, #120	; 0x78
 8015e22:	d806      	bhi.n	8015e32 <__ssvfiscanf_r+0xee>
 8015e24:	2b57      	cmp	r3, #87	; 0x57
 8015e26:	d810      	bhi.n	8015e4a <__ssvfiscanf_r+0x106>
 8015e28:	2b25      	cmp	r3, #37	; 0x25
 8015e2a:	d0c6      	beq.n	8015dba <__ssvfiscanf_r+0x76>
 8015e2c:	d856      	bhi.n	8015edc <__ssvfiscanf_r+0x198>
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d064      	beq.n	8015efc <__ssvfiscanf_r+0x1b8>
 8015e32:	2303      	movs	r3, #3
 8015e34:	9347      	str	r3, [sp, #284]	; 0x11c
 8015e36:	230a      	movs	r3, #10
 8015e38:	9342      	str	r3, [sp, #264]	; 0x108
 8015e3a:	e071      	b.n	8015f20 <__ssvfiscanf_r+0x1dc>
 8015e3c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8015e3e:	fb02 1103 	mla	r1, r2, r3, r1
 8015e42:	3930      	subs	r1, #48	; 0x30
 8015e44:	9143      	str	r1, [sp, #268]	; 0x10c
 8015e46:	4655      	mov	r5, sl
 8015e48:	e7d3      	b.n	8015df2 <__ssvfiscanf_r+0xae>
 8015e4a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8015e4e:	2a20      	cmp	r2, #32
 8015e50:	d8ef      	bhi.n	8015e32 <__ssvfiscanf_r+0xee>
 8015e52:	a101      	add	r1, pc, #4	; (adr r1, 8015e58 <__ssvfiscanf_r+0x114>)
 8015e54:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015e58:	08015f0b 	.word	0x08015f0b
 8015e5c:	08015e33 	.word	0x08015e33
 8015e60:	08015e33 	.word	0x08015e33
 8015e64:	08015f69 	.word	0x08015f69
 8015e68:	08015e33 	.word	0x08015e33
 8015e6c:	08015e33 	.word	0x08015e33
 8015e70:	08015e33 	.word	0x08015e33
 8015e74:	08015e33 	.word	0x08015e33
 8015e78:	08015e33 	.word	0x08015e33
 8015e7c:	08015e33 	.word	0x08015e33
 8015e80:	08015e33 	.word	0x08015e33
 8015e84:	08015f7f 	.word	0x08015f7f
 8015e88:	08015f55 	.word	0x08015f55
 8015e8c:	08015ee3 	.word	0x08015ee3
 8015e90:	08015ee3 	.word	0x08015ee3
 8015e94:	08015ee3 	.word	0x08015ee3
 8015e98:	08015e33 	.word	0x08015e33
 8015e9c:	08015f59 	.word	0x08015f59
 8015ea0:	08015e33 	.word	0x08015e33
 8015ea4:	08015e33 	.word	0x08015e33
 8015ea8:	08015e33 	.word	0x08015e33
 8015eac:	08015e33 	.word	0x08015e33
 8015eb0:	08015f8f 	.word	0x08015f8f
 8015eb4:	08015f61 	.word	0x08015f61
 8015eb8:	08015f03 	.word	0x08015f03
 8015ebc:	08015e33 	.word	0x08015e33
 8015ec0:	08015e33 	.word	0x08015e33
 8015ec4:	08015f8b 	.word	0x08015f8b
 8015ec8:	08015e33 	.word	0x08015e33
 8015ecc:	08015f55 	.word	0x08015f55
 8015ed0:	08015e33 	.word	0x08015e33
 8015ed4:	08015e33 	.word	0x08015e33
 8015ed8:	08015f0b 	.word	0x08015f0b
 8015edc:	3b45      	subs	r3, #69	; 0x45
 8015ede:	2b02      	cmp	r3, #2
 8015ee0:	d8a7      	bhi.n	8015e32 <__ssvfiscanf_r+0xee>
 8015ee2:	2305      	movs	r3, #5
 8015ee4:	e01b      	b.n	8015f1e <__ssvfiscanf_r+0x1da>
 8015ee6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015ee8:	4621      	mov	r1, r4
 8015eea:	4630      	mov	r0, r6
 8015eec:	4798      	blx	r3
 8015eee:	2800      	cmp	r0, #0
 8015ef0:	f43f af68 	beq.w	8015dc4 <__ssvfiscanf_r+0x80>
 8015ef4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8015ef6:	2800      	cmp	r0, #0
 8015ef8:	f040 808d 	bne.w	8016016 <__ssvfiscanf_r+0x2d2>
 8015efc:	f04f 30ff 	mov.w	r0, #4294967295
 8015f00:	e08f      	b.n	8016022 <__ssvfiscanf_r+0x2de>
 8015f02:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8015f04:	f042 0220 	orr.w	r2, r2, #32
 8015f08:	9241      	str	r2, [sp, #260]	; 0x104
 8015f0a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8015f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015f10:	9241      	str	r2, [sp, #260]	; 0x104
 8015f12:	2210      	movs	r2, #16
 8015f14:	2b6f      	cmp	r3, #111	; 0x6f
 8015f16:	9242      	str	r2, [sp, #264]	; 0x108
 8015f18:	bf34      	ite	cc
 8015f1a:	2303      	movcc	r3, #3
 8015f1c:	2304      	movcs	r3, #4
 8015f1e:	9347      	str	r3, [sp, #284]	; 0x11c
 8015f20:	6863      	ldr	r3, [r4, #4]
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	dd42      	ble.n	8015fac <__ssvfiscanf_r+0x268>
 8015f26:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015f28:	0659      	lsls	r1, r3, #25
 8015f2a:	d404      	bmi.n	8015f36 <__ssvfiscanf_r+0x1f2>
 8015f2c:	6823      	ldr	r3, [r4, #0]
 8015f2e:	781a      	ldrb	r2, [r3, #0]
 8015f30:	5cba      	ldrb	r2, [r7, r2]
 8015f32:	0712      	lsls	r2, r2, #28
 8015f34:	d441      	bmi.n	8015fba <__ssvfiscanf_r+0x276>
 8015f36:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8015f38:	2b02      	cmp	r3, #2
 8015f3a:	dc50      	bgt.n	8015fde <__ssvfiscanf_r+0x29a>
 8015f3c:	466b      	mov	r3, sp
 8015f3e:	4622      	mov	r2, r4
 8015f40:	a941      	add	r1, sp, #260	; 0x104
 8015f42:	4630      	mov	r0, r6
 8015f44:	f000 f876 	bl	8016034 <_scanf_chars>
 8015f48:	2801      	cmp	r0, #1
 8015f4a:	d06e      	beq.n	801602a <__ssvfiscanf_r+0x2e6>
 8015f4c:	2802      	cmp	r0, #2
 8015f4e:	f47f af20 	bne.w	8015d92 <__ssvfiscanf_r+0x4e>
 8015f52:	e7cf      	b.n	8015ef4 <__ssvfiscanf_r+0x1b0>
 8015f54:	220a      	movs	r2, #10
 8015f56:	e7dd      	b.n	8015f14 <__ssvfiscanf_r+0x1d0>
 8015f58:	2300      	movs	r3, #0
 8015f5a:	9342      	str	r3, [sp, #264]	; 0x108
 8015f5c:	2303      	movs	r3, #3
 8015f5e:	e7de      	b.n	8015f1e <__ssvfiscanf_r+0x1da>
 8015f60:	2308      	movs	r3, #8
 8015f62:	9342      	str	r3, [sp, #264]	; 0x108
 8015f64:	2304      	movs	r3, #4
 8015f66:	e7da      	b.n	8015f1e <__ssvfiscanf_r+0x1da>
 8015f68:	4629      	mov	r1, r5
 8015f6a:	4640      	mov	r0, r8
 8015f6c:	f000 f9b4 	bl	80162d8 <__sccl>
 8015f70:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015f72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015f76:	9341      	str	r3, [sp, #260]	; 0x104
 8015f78:	4605      	mov	r5, r0
 8015f7a:	2301      	movs	r3, #1
 8015f7c:	e7cf      	b.n	8015f1e <__ssvfiscanf_r+0x1da>
 8015f7e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015f84:	9341      	str	r3, [sp, #260]	; 0x104
 8015f86:	2300      	movs	r3, #0
 8015f88:	e7c9      	b.n	8015f1e <__ssvfiscanf_r+0x1da>
 8015f8a:	2302      	movs	r3, #2
 8015f8c:	e7c7      	b.n	8015f1e <__ssvfiscanf_r+0x1da>
 8015f8e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8015f90:	06c3      	lsls	r3, r0, #27
 8015f92:	f53f aefe 	bmi.w	8015d92 <__ssvfiscanf_r+0x4e>
 8015f96:	9b00      	ldr	r3, [sp, #0]
 8015f98:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015f9a:	1d19      	adds	r1, r3, #4
 8015f9c:	9100      	str	r1, [sp, #0]
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	f010 0f01 	tst.w	r0, #1
 8015fa4:	bf14      	ite	ne
 8015fa6:	801a      	strhne	r2, [r3, #0]
 8015fa8:	601a      	streq	r2, [r3, #0]
 8015faa:	e6f2      	b.n	8015d92 <__ssvfiscanf_r+0x4e>
 8015fac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015fae:	4621      	mov	r1, r4
 8015fb0:	4630      	mov	r0, r6
 8015fb2:	4798      	blx	r3
 8015fb4:	2800      	cmp	r0, #0
 8015fb6:	d0b6      	beq.n	8015f26 <__ssvfiscanf_r+0x1e2>
 8015fb8:	e79c      	b.n	8015ef4 <__ssvfiscanf_r+0x1b0>
 8015fba:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015fbc:	3201      	adds	r2, #1
 8015fbe:	9245      	str	r2, [sp, #276]	; 0x114
 8015fc0:	6862      	ldr	r2, [r4, #4]
 8015fc2:	3a01      	subs	r2, #1
 8015fc4:	2a00      	cmp	r2, #0
 8015fc6:	6062      	str	r2, [r4, #4]
 8015fc8:	dd02      	ble.n	8015fd0 <__ssvfiscanf_r+0x28c>
 8015fca:	3301      	adds	r3, #1
 8015fcc:	6023      	str	r3, [r4, #0]
 8015fce:	e7ad      	b.n	8015f2c <__ssvfiscanf_r+0x1e8>
 8015fd0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015fd2:	4621      	mov	r1, r4
 8015fd4:	4630      	mov	r0, r6
 8015fd6:	4798      	blx	r3
 8015fd8:	2800      	cmp	r0, #0
 8015fda:	d0a7      	beq.n	8015f2c <__ssvfiscanf_r+0x1e8>
 8015fdc:	e78a      	b.n	8015ef4 <__ssvfiscanf_r+0x1b0>
 8015fde:	2b04      	cmp	r3, #4
 8015fe0:	dc0e      	bgt.n	8016000 <__ssvfiscanf_r+0x2bc>
 8015fe2:	466b      	mov	r3, sp
 8015fe4:	4622      	mov	r2, r4
 8015fe6:	a941      	add	r1, sp, #260	; 0x104
 8015fe8:	4630      	mov	r0, r6
 8015fea:	f000 f87d 	bl	80160e8 <_scanf_i>
 8015fee:	e7ab      	b.n	8015f48 <__ssvfiscanf_r+0x204>
 8015ff0:	08015c8f 	.word	0x08015c8f
 8015ff4:	08015d09 	.word	0x08015d09
 8015ff8:	08016e51 	.word	0x08016e51
 8015ffc:	08016fba 	.word	0x08016fba
 8016000:	4b0b      	ldr	r3, [pc, #44]	; (8016030 <__ssvfiscanf_r+0x2ec>)
 8016002:	2b00      	cmp	r3, #0
 8016004:	f43f aec5 	beq.w	8015d92 <__ssvfiscanf_r+0x4e>
 8016008:	466b      	mov	r3, sp
 801600a:	4622      	mov	r2, r4
 801600c:	a941      	add	r1, sp, #260	; 0x104
 801600e:	4630      	mov	r0, r6
 8016010:	f3af 8000 	nop.w
 8016014:	e798      	b.n	8015f48 <__ssvfiscanf_r+0x204>
 8016016:	89a3      	ldrh	r3, [r4, #12]
 8016018:	f013 0f40 	tst.w	r3, #64	; 0x40
 801601c:	bf18      	it	ne
 801601e:	f04f 30ff 	movne.w	r0, #4294967295
 8016022:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8016026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801602a:	9844      	ldr	r0, [sp, #272]	; 0x110
 801602c:	e7f9      	b.n	8016022 <__ssvfiscanf_r+0x2de>
 801602e:	bf00      	nop
 8016030:	00000000 	.word	0x00000000

08016034 <_scanf_chars>:
 8016034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016038:	4615      	mov	r5, r2
 801603a:	688a      	ldr	r2, [r1, #8]
 801603c:	4680      	mov	r8, r0
 801603e:	460c      	mov	r4, r1
 8016040:	b932      	cbnz	r2, 8016050 <_scanf_chars+0x1c>
 8016042:	698a      	ldr	r2, [r1, #24]
 8016044:	2a00      	cmp	r2, #0
 8016046:	bf0c      	ite	eq
 8016048:	2201      	moveq	r2, #1
 801604a:	f04f 32ff 	movne.w	r2, #4294967295
 801604e:	608a      	str	r2, [r1, #8]
 8016050:	6822      	ldr	r2, [r4, #0]
 8016052:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80160e4 <_scanf_chars+0xb0>
 8016056:	06d1      	lsls	r1, r2, #27
 8016058:	bf5f      	itttt	pl
 801605a:	681a      	ldrpl	r2, [r3, #0]
 801605c:	1d11      	addpl	r1, r2, #4
 801605e:	6019      	strpl	r1, [r3, #0]
 8016060:	6816      	ldrpl	r6, [r2, #0]
 8016062:	2700      	movs	r7, #0
 8016064:	69a0      	ldr	r0, [r4, #24]
 8016066:	b188      	cbz	r0, 801608c <_scanf_chars+0x58>
 8016068:	2801      	cmp	r0, #1
 801606a:	d107      	bne.n	801607c <_scanf_chars+0x48>
 801606c:	682a      	ldr	r2, [r5, #0]
 801606e:	7811      	ldrb	r1, [r2, #0]
 8016070:	6962      	ldr	r2, [r4, #20]
 8016072:	5c52      	ldrb	r2, [r2, r1]
 8016074:	b952      	cbnz	r2, 801608c <_scanf_chars+0x58>
 8016076:	2f00      	cmp	r7, #0
 8016078:	d031      	beq.n	80160de <_scanf_chars+0xaa>
 801607a:	e022      	b.n	80160c2 <_scanf_chars+0x8e>
 801607c:	2802      	cmp	r0, #2
 801607e:	d120      	bne.n	80160c2 <_scanf_chars+0x8e>
 8016080:	682b      	ldr	r3, [r5, #0]
 8016082:	781b      	ldrb	r3, [r3, #0]
 8016084:	f813 3009 	ldrb.w	r3, [r3, r9]
 8016088:	071b      	lsls	r3, r3, #28
 801608a:	d41a      	bmi.n	80160c2 <_scanf_chars+0x8e>
 801608c:	6823      	ldr	r3, [r4, #0]
 801608e:	06da      	lsls	r2, r3, #27
 8016090:	bf5e      	ittt	pl
 8016092:	682b      	ldrpl	r3, [r5, #0]
 8016094:	781b      	ldrbpl	r3, [r3, #0]
 8016096:	f806 3b01 	strbpl.w	r3, [r6], #1
 801609a:	682a      	ldr	r2, [r5, #0]
 801609c:	686b      	ldr	r3, [r5, #4]
 801609e:	3201      	adds	r2, #1
 80160a0:	602a      	str	r2, [r5, #0]
 80160a2:	68a2      	ldr	r2, [r4, #8]
 80160a4:	3b01      	subs	r3, #1
 80160a6:	3a01      	subs	r2, #1
 80160a8:	606b      	str	r3, [r5, #4]
 80160aa:	3701      	adds	r7, #1
 80160ac:	60a2      	str	r2, [r4, #8]
 80160ae:	b142      	cbz	r2, 80160c2 <_scanf_chars+0x8e>
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	dcd7      	bgt.n	8016064 <_scanf_chars+0x30>
 80160b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80160b8:	4629      	mov	r1, r5
 80160ba:	4640      	mov	r0, r8
 80160bc:	4798      	blx	r3
 80160be:	2800      	cmp	r0, #0
 80160c0:	d0d0      	beq.n	8016064 <_scanf_chars+0x30>
 80160c2:	6823      	ldr	r3, [r4, #0]
 80160c4:	f013 0310 	ands.w	r3, r3, #16
 80160c8:	d105      	bne.n	80160d6 <_scanf_chars+0xa2>
 80160ca:	68e2      	ldr	r2, [r4, #12]
 80160cc:	3201      	adds	r2, #1
 80160ce:	60e2      	str	r2, [r4, #12]
 80160d0:	69a2      	ldr	r2, [r4, #24]
 80160d2:	b102      	cbz	r2, 80160d6 <_scanf_chars+0xa2>
 80160d4:	7033      	strb	r3, [r6, #0]
 80160d6:	6923      	ldr	r3, [r4, #16]
 80160d8:	443b      	add	r3, r7
 80160da:	6123      	str	r3, [r4, #16]
 80160dc:	2000      	movs	r0, #0
 80160de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80160e2:	bf00      	nop
 80160e4:	08016e51 	.word	0x08016e51

080160e8 <_scanf_i>:
 80160e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160ec:	4698      	mov	r8, r3
 80160ee:	4b76      	ldr	r3, [pc, #472]	; (80162c8 <_scanf_i+0x1e0>)
 80160f0:	460c      	mov	r4, r1
 80160f2:	4682      	mov	sl, r0
 80160f4:	4616      	mov	r6, r2
 80160f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80160fa:	b087      	sub	sp, #28
 80160fc:	ab03      	add	r3, sp, #12
 80160fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016102:	4b72      	ldr	r3, [pc, #456]	; (80162cc <_scanf_i+0x1e4>)
 8016104:	69a1      	ldr	r1, [r4, #24]
 8016106:	4a72      	ldr	r2, [pc, #456]	; (80162d0 <_scanf_i+0x1e8>)
 8016108:	2903      	cmp	r1, #3
 801610a:	bf18      	it	ne
 801610c:	461a      	movne	r2, r3
 801610e:	68a3      	ldr	r3, [r4, #8]
 8016110:	9201      	str	r2, [sp, #4]
 8016112:	1e5a      	subs	r2, r3, #1
 8016114:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016118:	bf88      	it	hi
 801611a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801611e:	4627      	mov	r7, r4
 8016120:	bf82      	ittt	hi
 8016122:	eb03 0905 	addhi.w	r9, r3, r5
 8016126:	f240 135d 	movwhi	r3, #349	; 0x15d
 801612a:	60a3      	strhi	r3, [r4, #8]
 801612c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8016130:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8016134:	bf98      	it	ls
 8016136:	f04f 0900 	movls.w	r9, #0
 801613a:	6023      	str	r3, [r4, #0]
 801613c:	463d      	mov	r5, r7
 801613e:	f04f 0b00 	mov.w	fp, #0
 8016142:	6831      	ldr	r1, [r6, #0]
 8016144:	ab03      	add	r3, sp, #12
 8016146:	7809      	ldrb	r1, [r1, #0]
 8016148:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801614c:	2202      	movs	r2, #2
 801614e:	f7ea f857 	bl	8000200 <memchr>
 8016152:	b328      	cbz	r0, 80161a0 <_scanf_i+0xb8>
 8016154:	f1bb 0f01 	cmp.w	fp, #1
 8016158:	d159      	bne.n	801620e <_scanf_i+0x126>
 801615a:	6862      	ldr	r2, [r4, #4]
 801615c:	b92a      	cbnz	r2, 801616a <_scanf_i+0x82>
 801615e:	6822      	ldr	r2, [r4, #0]
 8016160:	2308      	movs	r3, #8
 8016162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016166:	6063      	str	r3, [r4, #4]
 8016168:	6022      	str	r2, [r4, #0]
 801616a:	6822      	ldr	r2, [r4, #0]
 801616c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8016170:	6022      	str	r2, [r4, #0]
 8016172:	68a2      	ldr	r2, [r4, #8]
 8016174:	1e51      	subs	r1, r2, #1
 8016176:	60a1      	str	r1, [r4, #8]
 8016178:	b192      	cbz	r2, 80161a0 <_scanf_i+0xb8>
 801617a:	6832      	ldr	r2, [r6, #0]
 801617c:	1c51      	adds	r1, r2, #1
 801617e:	6031      	str	r1, [r6, #0]
 8016180:	7812      	ldrb	r2, [r2, #0]
 8016182:	f805 2b01 	strb.w	r2, [r5], #1
 8016186:	6872      	ldr	r2, [r6, #4]
 8016188:	3a01      	subs	r2, #1
 801618a:	2a00      	cmp	r2, #0
 801618c:	6072      	str	r2, [r6, #4]
 801618e:	dc07      	bgt.n	80161a0 <_scanf_i+0xb8>
 8016190:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8016194:	4631      	mov	r1, r6
 8016196:	4650      	mov	r0, sl
 8016198:	4790      	blx	r2
 801619a:	2800      	cmp	r0, #0
 801619c:	f040 8085 	bne.w	80162aa <_scanf_i+0x1c2>
 80161a0:	f10b 0b01 	add.w	fp, fp, #1
 80161a4:	f1bb 0f03 	cmp.w	fp, #3
 80161a8:	d1cb      	bne.n	8016142 <_scanf_i+0x5a>
 80161aa:	6863      	ldr	r3, [r4, #4]
 80161ac:	b90b      	cbnz	r3, 80161b2 <_scanf_i+0xca>
 80161ae:	230a      	movs	r3, #10
 80161b0:	6063      	str	r3, [r4, #4]
 80161b2:	6863      	ldr	r3, [r4, #4]
 80161b4:	4947      	ldr	r1, [pc, #284]	; (80162d4 <_scanf_i+0x1ec>)
 80161b6:	6960      	ldr	r0, [r4, #20]
 80161b8:	1ac9      	subs	r1, r1, r3
 80161ba:	f000 f88d 	bl	80162d8 <__sccl>
 80161be:	f04f 0b00 	mov.w	fp, #0
 80161c2:	68a3      	ldr	r3, [r4, #8]
 80161c4:	6822      	ldr	r2, [r4, #0]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d03d      	beq.n	8016246 <_scanf_i+0x15e>
 80161ca:	6831      	ldr	r1, [r6, #0]
 80161cc:	6960      	ldr	r0, [r4, #20]
 80161ce:	f891 c000 	ldrb.w	ip, [r1]
 80161d2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80161d6:	2800      	cmp	r0, #0
 80161d8:	d035      	beq.n	8016246 <_scanf_i+0x15e>
 80161da:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80161de:	d124      	bne.n	801622a <_scanf_i+0x142>
 80161e0:	0510      	lsls	r0, r2, #20
 80161e2:	d522      	bpl.n	801622a <_scanf_i+0x142>
 80161e4:	f10b 0b01 	add.w	fp, fp, #1
 80161e8:	f1b9 0f00 	cmp.w	r9, #0
 80161ec:	d003      	beq.n	80161f6 <_scanf_i+0x10e>
 80161ee:	3301      	adds	r3, #1
 80161f0:	f109 39ff 	add.w	r9, r9, #4294967295
 80161f4:	60a3      	str	r3, [r4, #8]
 80161f6:	6873      	ldr	r3, [r6, #4]
 80161f8:	3b01      	subs	r3, #1
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	6073      	str	r3, [r6, #4]
 80161fe:	dd1b      	ble.n	8016238 <_scanf_i+0x150>
 8016200:	6833      	ldr	r3, [r6, #0]
 8016202:	3301      	adds	r3, #1
 8016204:	6033      	str	r3, [r6, #0]
 8016206:	68a3      	ldr	r3, [r4, #8]
 8016208:	3b01      	subs	r3, #1
 801620a:	60a3      	str	r3, [r4, #8]
 801620c:	e7d9      	b.n	80161c2 <_scanf_i+0xda>
 801620e:	f1bb 0f02 	cmp.w	fp, #2
 8016212:	d1ae      	bne.n	8016172 <_scanf_i+0x8a>
 8016214:	6822      	ldr	r2, [r4, #0]
 8016216:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801621a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801621e:	d1bf      	bne.n	80161a0 <_scanf_i+0xb8>
 8016220:	2310      	movs	r3, #16
 8016222:	6063      	str	r3, [r4, #4]
 8016224:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016228:	e7a2      	b.n	8016170 <_scanf_i+0x88>
 801622a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801622e:	6022      	str	r2, [r4, #0]
 8016230:	780b      	ldrb	r3, [r1, #0]
 8016232:	f805 3b01 	strb.w	r3, [r5], #1
 8016236:	e7de      	b.n	80161f6 <_scanf_i+0x10e>
 8016238:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801623c:	4631      	mov	r1, r6
 801623e:	4650      	mov	r0, sl
 8016240:	4798      	blx	r3
 8016242:	2800      	cmp	r0, #0
 8016244:	d0df      	beq.n	8016206 <_scanf_i+0x11e>
 8016246:	6823      	ldr	r3, [r4, #0]
 8016248:	05db      	lsls	r3, r3, #23
 801624a:	d50d      	bpl.n	8016268 <_scanf_i+0x180>
 801624c:	42bd      	cmp	r5, r7
 801624e:	d909      	bls.n	8016264 <_scanf_i+0x17c>
 8016250:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016254:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016258:	4632      	mov	r2, r6
 801625a:	4650      	mov	r0, sl
 801625c:	4798      	blx	r3
 801625e:	f105 39ff 	add.w	r9, r5, #4294967295
 8016262:	464d      	mov	r5, r9
 8016264:	42bd      	cmp	r5, r7
 8016266:	d02d      	beq.n	80162c4 <_scanf_i+0x1dc>
 8016268:	6822      	ldr	r2, [r4, #0]
 801626a:	f012 0210 	ands.w	r2, r2, #16
 801626e:	d113      	bne.n	8016298 <_scanf_i+0x1b0>
 8016270:	702a      	strb	r2, [r5, #0]
 8016272:	6863      	ldr	r3, [r4, #4]
 8016274:	9e01      	ldr	r6, [sp, #4]
 8016276:	4639      	mov	r1, r7
 8016278:	4650      	mov	r0, sl
 801627a:	47b0      	blx	r6
 801627c:	6821      	ldr	r1, [r4, #0]
 801627e:	f8d8 3000 	ldr.w	r3, [r8]
 8016282:	f011 0f20 	tst.w	r1, #32
 8016286:	d013      	beq.n	80162b0 <_scanf_i+0x1c8>
 8016288:	1d1a      	adds	r2, r3, #4
 801628a:	f8c8 2000 	str.w	r2, [r8]
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	6018      	str	r0, [r3, #0]
 8016292:	68e3      	ldr	r3, [r4, #12]
 8016294:	3301      	adds	r3, #1
 8016296:	60e3      	str	r3, [r4, #12]
 8016298:	1bed      	subs	r5, r5, r7
 801629a:	44ab      	add	fp, r5
 801629c:	6925      	ldr	r5, [r4, #16]
 801629e:	445d      	add	r5, fp
 80162a0:	6125      	str	r5, [r4, #16]
 80162a2:	2000      	movs	r0, #0
 80162a4:	b007      	add	sp, #28
 80162a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162aa:	f04f 0b00 	mov.w	fp, #0
 80162ae:	e7ca      	b.n	8016246 <_scanf_i+0x15e>
 80162b0:	1d1a      	adds	r2, r3, #4
 80162b2:	f8c8 2000 	str.w	r2, [r8]
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	f011 0f01 	tst.w	r1, #1
 80162bc:	bf14      	ite	ne
 80162be:	8018      	strhne	r0, [r3, #0]
 80162c0:	6018      	streq	r0, [r3, #0]
 80162c2:	e7e6      	b.n	8016292 <_scanf_i+0x1aa>
 80162c4:	2001      	movs	r0, #1
 80162c6:	e7ed      	b.n	80162a4 <_scanf_i+0x1bc>
 80162c8:	08016834 	.word	0x08016834
 80162cc:	08015971 	.word	0x08015971
 80162d0:	08014799 	.word	0x08014799
 80162d4:	08017000 	.word	0x08017000

080162d8 <__sccl>:
 80162d8:	b570      	push	{r4, r5, r6, lr}
 80162da:	780b      	ldrb	r3, [r1, #0]
 80162dc:	4604      	mov	r4, r0
 80162de:	2b5e      	cmp	r3, #94	; 0x5e
 80162e0:	bf0b      	itete	eq
 80162e2:	784b      	ldrbeq	r3, [r1, #1]
 80162e4:	1c48      	addne	r0, r1, #1
 80162e6:	1c88      	addeq	r0, r1, #2
 80162e8:	2200      	movne	r2, #0
 80162ea:	bf08      	it	eq
 80162ec:	2201      	moveq	r2, #1
 80162ee:	1e61      	subs	r1, r4, #1
 80162f0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80162f4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80162f8:	42a9      	cmp	r1, r5
 80162fa:	d1fb      	bne.n	80162f4 <__sccl+0x1c>
 80162fc:	b90b      	cbnz	r3, 8016302 <__sccl+0x2a>
 80162fe:	3801      	subs	r0, #1
 8016300:	bd70      	pop	{r4, r5, r6, pc}
 8016302:	f082 0201 	eor.w	r2, r2, #1
 8016306:	54e2      	strb	r2, [r4, r3]
 8016308:	4605      	mov	r5, r0
 801630a:	4628      	mov	r0, r5
 801630c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8016310:	292d      	cmp	r1, #45	; 0x2d
 8016312:	d006      	beq.n	8016322 <__sccl+0x4a>
 8016314:	295d      	cmp	r1, #93	; 0x5d
 8016316:	d0f3      	beq.n	8016300 <__sccl+0x28>
 8016318:	b909      	cbnz	r1, 801631e <__sccl+0x46>
 801631a:	4628      	mov	r0, r5
 801631c:	e7f0      	b.n	8016300 <__sccl+0x28>
 801631e:	460b      	mov	r3, r1
 8016320:	e7f1      	b.n	8016306 <__sccl+0x2e>
 8016322:	786e      	ldrb	r6, [r5, #1]
 8016324:	2e5d      	cmp	r6, #93	; 0x5d
 8016326:	d0fa      	beq.n	801631e <__sccl+0x46>
 8016328:	42b3      	cmp	r3, r6
 801632a:	dcf8      	bgt.n	801631e <__sccl+0x46>
 801632c:	3502      	adds	r5, #2
 801632e:	4619      	mov	r1, r3
 8016330:	3101      	adds	r1, #1
 8016332:	428e      	cmp	r6, r1
 8016334:	5462      	strb	r2, [r4, r1]
 8016336:	dcfb      	bgt.n	8016330 <__sccl+0x58>
 8016338:	1af1      	subs	r1, r6, r3
 801633a:	3901      	subs	r1, #1
 801633c:	1c58      	adds	r0, r3, #1
 801633e:	42b3      	cmp	r3, r6
 8016340:	bfa8      	it	ge
 8016342:	2100      	movge	r1, #0
 8016344:	1843      	adds	r3, r0, r1
 8016346:	e7e0      	b.n	801630a <__sccl+0x32>

08016348 <_raise_r>:
 8016348:	291f      	cmp	r1, #31
 801634a:	b538      	push	{r3, r4, r5, lr}
 801634c:	4604      	mov	r4, r0
 801634e:	460d      	mov	r5, r1
 8016350:	d904      	bls.n	801635c <_raise_r+0x14>
 8016352:	2316      	movs	r3, #22
 8016354:	6003      	str	r3, [r0, #0]
 8016356:	f04f 30ff 	mov.w	r0, #4294967295
 801635a:	bd38      	pop	{r3, r4, r5, pc}
 801635c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801635e:	b112      	cbz	r2, 8016366 <_raise_r+0x1e>
 8016360:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016364:	b94b      	cbnz	r3, 801637a <_raise_r+0x32>
 8016366:	4620      	mov	r0, r4
 8016368:	f000 f830 	bl	80163cc <_getpid_r>
 801636c:	462a      	mov	r2, r5
 801636e:	4601      	mov	r1, r0
 8016370:	4620      	mov	r0, r4
 8016372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016376:	f000 b817 	b.w	80163a8 <_kill_r>
 801637a:	2b01      	cmp	r3, #1
 801637c:	d00a      	beq.n	8016394 <_raise_r+0x4c>
 801637e:	1c59      	adds	r1, r3, #1
 8016380:	d103      	bne.n	801638a <_raise_r+0x42>
 8016382:	2316      	movs	r3, #22
 8016384:	6003      	str	r3, [r0, #0]
 8016386:	2001      	movs	r0, #1
 8016388:	e7e7      	b.n	801635a <_raise_r+0x12>
 801638a:	2400      	movs	r4, #0
 801638c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016390:	4628      	mov	r0, r5
 8016392:	4798      	blx	r3
 8016394:	2000      	movs	r0, #0
 8016396:	e7e0      	b.n	801635a <_raise_r+0x12>

08016398 <raise>:
 8016398:	4b02      	ldr	r3, [pc, #8]	; (80163a4 <raise+0xc>)
 801639a:	4601      	mov	r1, r0
 801639c:	6818      	ldr	r0, [r3, #0]
 801639e:	f7ff bfd3 	b.w	8016348 <_raise_r>
 80163a2:	bf00      	nop
 80163a4:	200002b4 	.word	0x200002b4

080163a8 <_kill_r>:
 80163a8:	b538      	push	{r3, r4, r5, lr}
 80163aa:	4d07      	ldr	r5, [pc, #28]	; (80163c8 <_kill_r+0x20>)
 80163ac:	2300      	movs	r3, #0
 80163ae:	4604      	mov	r4, r0
 80163b0:	4608      	mov	r0, r1
 80163b2:	4611      	mov	r1, r2
 80163b4:	602b      	str	r3, [r5, #0]
 80163b6:	f7ec f8f1 	bl	800259c <_kill>
 80163ba:	1c43      	adds	r3, r0, #1
 80163bc:	d102      	bne.n	80163c4 <_kill_r+0x1c>
 80163be:	682b      	ldr	r3, [r5, #0]
 80163c0:	b103      	cbz	r3, 80163c4 <_kill_r+0x1c>
 80163c2:	6023      	str	r3, [r4, #0]
 80163c4:	bd38      	pop	{r3, r4, r5, pc}
 80163c6:	bf00      	nop
 80163c8:	2000cc98 	.word	0x2000cc98

080163cc <_getpid_r>:
 80163cc:	f7ec b8de 	b.w	800258c <_getpid>

080163d0 <__submore>:
 80163d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163d4:	460c      	mov	r4, r1
 80163d6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80163d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80163dc:	4299      	cmp	r1, r3
 80163de:	d11d      	bne.n	801641c <__submore+0x4c>
 80163e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80163e4:	f7fd ffa6 	bl	8014334 <_malloc_r>
 80163e8:	b918      	cbnz	r0, 80163f2 <__submore+0x22>
 80163ea:	f04f 30ff 	mov.w	r0, #4294967295
 80163ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80163f6:	63a3      	str	r3, [r4, #56]	; 0x38
 80163f8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80163fc:	6360      	str	r0, [r4, #52]	; 0x34
 80163fe:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8016402:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8016406:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801640a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801640e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8016412:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8016416:	6020      	str	r0, [r4, #0]
 8016418:	2000      	movs	r0, #0
 801641a:	e7e8      	b.n	80163ee <__submore+0x1e>
 801641c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801641e:	0077      	lsls	r7, r6, #1
 8016420:	463a      	mov	r2, r7
 8016422:	f7ff fc05 	bl	8015c30 <_realloc_r>
 8016426:	4605      	mov	r5, r0
 8016428:	2800      	cmp	r0, #0
 801642a:	d0de      	beq.n	80163ea <__submore+0x1a>
 801642c:	eb00 0806 	add.w	r8, r0, r6
 8016430:	4601      	mov	r1, r0
 8016432:	4632      	mov	r2, r6
 8016434:	4640      	mov	r0, r8
 8016436:	f7fd fc89 	bl	8013d4c <memcpy>
 801643a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801643e:	f8c4 8000 	str.w	r8, [r4]
 8016442:	e7e9      	b.n	8016418 <__submore+0x48>

08016444 <_fstat_r>:
 8016444:	b538      	push	{r3, r4, r5, lr}
 8016446:	4d07      	ldr	r5, [pc, #28]	; (8016464 <_fstat_r+0x20>)
 8016448:	2300      	movs	r3, #0
 801644a:	4604      	mov	r4, r0
 801644c:	4608      	mov	r0, r1
 801644e:	4611      	mov	r1, r2
 8016450:	602b      	str	r3, [r5, #0]
 8016452:	f7ec f902 	bl	800265a <_fstat>
 8016456:	1c43      	adds	r3, r0, #1
 8016458:	d102      	bne.n	8016460 <_fstat_r+0x1c>
 801645a:	682b      	ldr	r3, [r5, #0]
 801645c:	b103      	cbz	r3, 8016460 <_fstat_r+0x1c>
 801645e:	6023      	str	r3, [r4, #0]
 8016460:	bd38      	pop	{r3, r4, r5, pc}
 8016462:	bf00      	nop
 8016464:	2000cc98 	.word	0x2000cc98

08016468 <_isatty_r>:
 8016468:	b538      	push	{r3, r4, r5, lr}
 801646a:	4d06      	ldr	r5, [pc, #24]	; (8016484 <_isatty_r+0x1c>)
 801646c:	2300      	movs	r3, #0
 801646e:	4604      	mov	r4, r0
 8016470:	4608      	mov	r0, r1
 8016472:	602b      	str	r3, [r5, #0]
 8016474:	f7ec f901 	bl	800267a <_isatty>
 8016478:	1c43      	adds	r3, r0, #1
 801647a:	d102      	bne.n	8016482 <_isatty_r+0x1a>
 801647c:	682b      	ldr	r3, [r5, #0]
 801647e:	b103      	cbz	r3, 8016482 <_isatty_r+0x1a>
 8016480:	6023      	str	r3, [r4, #0]
 8016482:	bd38      	pop	{r3, r4, r5, pc}
 8016484:	2000cc98 	.word	0x2000cc98

08016488 <_malloc_usable_size_r>:
 8016488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801648c:	1f18      	subs	r0, r3, #4
 801648e:	2b00      	cmp	r3, #0
 8016490:	bfbc      	itt	lt
 8016492:	580b      	ldrlt	r3, [r1, r0]
 8016494:	18c0      	addlt	r0, r0, r3
 8016496:	4770      	bx	lr

08016498 <_init>:
 8016498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801649a:	bf00      	nop
 801649c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801649e:	bc08      	pop	{r3}
 80164a0:	469e      	mov	lr, r3
 80164a2:	4770      	bx	lr

080164a4 <_fini>:
 80164a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164a6:	bf00      	nop
 80164a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80164aa:	bc08      	pop	{r3}
 80164ac:	469e      	mov	lr, r3
 80164ae:	4770      	bx	lr
